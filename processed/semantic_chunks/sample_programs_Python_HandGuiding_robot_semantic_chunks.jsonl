{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:1e7b9f543d36", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "logging", "qualified_name": "logging", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2, 2], "text": "import logging", "hash": "1e7b9f543d36", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 14, "original_size_bytes": 14, "start_byte": 23, "end_byte": 37}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:412862caa3f7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ipaddress", "qualified_name": "ipaddress", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [3, 3], "text": "import ipaddress", "hash": "412862caa3f7", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 38, "end_byte": 54}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [4, 4], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 55, "end_byte": 66}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:d11613a5082c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "socket", "qualified_name": "socket", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [5, 5], "text": "import socket", "hash": "d11613a5082c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 67, "end_byte": 80}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:818111220442", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "threading", "qualified_name": "threading", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [6, 6], "text": "import threading", "hash": "818111220442", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 81, "end_byte": 97}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:cd89a6634e6c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "queue", "qualified_name": "queue", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [7, 7], "text": "import queue", "hash": "cd89a6634e6c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 12, "original_size_bytes": 12, "start_byte": 98, "end_byte": 110}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:f720cee5b65c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "functools", "qualified_name": "functools", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [8, 8], "text": "import functools", "hash": "f720cee5b65c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 111, "end_byte": 127}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:9dd43cb332f7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "copy", "qualified_name": "copy", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [9, 9], "text": "import copy", "hash": "9dd43cb332f7", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 128, "end_byte": 139}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:e463e1373888", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "contextlib", "qualified_name": "contextlib", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [10, 10], "text": "import contextlib", "hash": "e463e1373888", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 17, "original_size_bytes": 17, "start_byte": 140, "end_byte": 157}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:6213a10daf24", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [12, 12], "text": "from mx_robot_def import *", "hash": "6213a10daf24", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 26, "original_size_bytes": 26, "start_byte": 159, "end_byte": 185}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:938787d8839d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [13, 13], "text": "from robot_common import *", "hash": "938787d8839d", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 26, "original_size_bytes": 26, "start_byte": 186, "end_byte": 212}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:f2684cce950d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [14, 14], "text": "from robot_logger import *", "hash": "f2684cce950d", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 26, "original_size_bytes": 26, "start_byte": 213, "end_byte": 239}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:c22756caf08f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "disconnect_on_exception", "qualified_name": "disconnect_on_exception", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [17, 39], "text": "def disconnect_on_exception(func):\n    \"\"\"Decorator to call disconnect if an exception is raised. Needs to be declared outside of class.\n    Attributes\n    ----------\n    func : function object\n        Function to wrap.\n    \"\"\"\n    @functools.wraps(func)\n    def wrap(self, *args, **kwargs):\n        try:\n            return func(self, *args, **kwargs)\n        except BaseException as e:\n            if self._disconnect_on_exception:\n                self.Disconnect()\n                raise DisconnectError('Automatically disconnected as a result of exception, '\n                                      'set \\'disconnect_on_exception\\' to False to disable.') from e\n            else:\n                raise e\n    return wrap", "hash": "c22756caf08f", "chunk_type": "function", "node_type": "function_definition", "signature": "disconnect_on_exception(func)", "docstring": "Decorator to call disconnect if an exception is raised. Needs to be declared outside of class.\n\n    Attributes\n    ----------\n    func : function object\n        Function to wrap.", "chunk_size_bytes": 719, "original_size_bytes": 723, "start_byte": 242, "end_byte": 965}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:77dd96fee87c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Robot", "qualified_name": "Robot", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [42, 2290], "text": "class Robot:\n    \"\"\"Class for controlling a generic Mecademic robot.\n    Attributes\n    ----------\n    _address : string\n        The IP address associated to the Mecademic Robot.\n    _command_socket : socket object\n        Socket connecting to the command port of the physical Mecademic robot.\n    _monitor_socket : socket object\n        Socket connecting to the monitor port of the physical Mecademic robot.\n    _command_rx_thread : thread handle\n        Thread used to receive messages from the command port.\n    _command_rx_queue : queue\n        Queue used to temporarily store messages from the command port.\n    _command_tx_thread : thread handle\n        Thread used to transmit messages to the command port.\n    _command_tx_queue : queue\n        Queue used to temporarily store commands to be sent to the command port.\n    _monitor_rx_thread : thread handle\n        Thread used to receive messages from the monitor port.\n    _monitor_rx_queue : queue\n        Queue used to temporarily store messages from the monitor port.\n    _command_response_handler_thread : thread handle\n        Thread used to read messages from the command response queue.\n    _monitor_handler_thread : thread handle\n        Thread used to read messages from the monitor queue.\n    _main_lock : recursive lock object\n        Used to protect internal state of the robot object.\n    _robot_state : RobotState object\n        Stores most current robot state.\n    _robot_events : RobotEvents object\n        Stores events related to the robot state.\n    _robot_callbacks : RobotCallbacks instance\n        Stores user-defined callback functions.\n    _callback_queue : queue\n        Queue storing triggered callbacks.\n    _callback_thread : thread handle\n        Callbacks will run in this thread if so configured.\n    _user_checkpoints : dictionary\n        Stores checkpoints set or expected by user.\n    _internal_checkpoints : dictionary\n        Stores checkpoints set internally by the Robot class.\n    _internal_checkpoint_counter : int\n        Stores the next available checkpoint id for internal checkpoints.\n    _enable_synchronous_mode : boolean\n        If enabled, commands block until action is completed.\n    _clear_motion_requests : int\n        Number of pending ClearMotion requests.\n    logger : logger object\n        Logger used throughout class.\n    default_timeout : float\n        Default timeout to use for blocking operations.\n    \"\"\"", "hash": "77dd96fee87c", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for controlling a generic Mecademic robot.\n\n    Attributes\n    ----------\n    _address : string\n        The IP address associated to the Mecademic Robot.\n    _command_socket : socket object\n        Socket connecting to the command port of the physical Mecademic robot.\n    _monitor_socket : socket object\n        Socket connecting to the monitor port of the physical Mecademic robot.\n\n    _command_rx_thread : thread handle\n        Thread used to receive messages from the command port.\n    _command_rx_queue : queue\n        Queue used to temporarily store messages from the command port.\n    _command_tx_thread : thread handle\n        Thread used to transmit messages to the command port.\n    _command_tx_queue : queue\n        Queue used to temporarily store commands to be sent to the command port.\n    _monitor_rx_thread : thread handle\n        Thread used to receive messages from the monitor port.\n    _monitor_rx_queue : queue\n        Queue used to temporarily store messages from the monitor port.\n\n    _command_response_handler_thread : thread handle\n        Thread used to read messages from the command response queue.\n    _monitor_handler_thread : thread handle\n        Thread used to read messages from the monitor queue.\n\n    _main_lock : recursive lock object\n        Used to protect internal state of the robot object.\n\n    _robot_state : RobotState object\n        Stores most current robot state.\n    _robot_events : RobotEvents object\n        Stores events related to the robot state.\n\n    _robot_callbacks : RobotCallbacks instance\n        Stores user-defined callback functions.\n    _callback_queue : queue\n        Queue storing triggered callbacks.\n    _callback_thread : thread handle\n        Callbacks will run in this thread if so configured.\n\n    _user_checkpoints : dictionary\n        Stores checkpoints set or expected by user.\n    _internal_checkpoints : dictionary\n        Stores checkpoints set internally by the Robot class.\n    _internal_checkpoint_counter : int\n        Stores the next available checkpoint id for internal checkpoints.\n\n    _enable_synchronous_mode : boolean\n        If enabled, commands block until action is completed.\n\n    _clear_motion_requests : int\n        Number of pending ClearMotion requests.\n\n    logger : logger object\n        Logger used throughout class.\n\n    default_timeout : float\n        Default timeout to use for blocking operations.", "chunk_size_bytes": 2425, "original_size_bytes": 2437, "start_byte": 968, "end_byte": 81680}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:802b5cc5cd79", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Robot.__init__", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [108, 149], "text": "def __init__(self):\n        \"\"\"Constructor for an instance of the Controller class.\n        \"\"\"\n        self._is_initialized = False\n        self._address = None\n        self._command_socket = None\n        self._monitor_socket = None\n        self._command_rx_thread = None\n        self._command_tx_thread = None\n        self._monitor_rx_thread = None\n        self._command_response_handler_thread = None\n        self._monitor_handler_thread = None\n        self._main_lock = threading.RLock()\n        self._robot_callbacks = RobotCallbacks()\n        self._callback_queue = CallbackQueue(self._robot_callbacks)\n        self._callback_thread = None\n        self._robot_info = None\n        self._robot_state = None\n        self._robot_events = RobotEvents()\n        self._file_logger = None\n        self._reset_disconnect_attributes()\n        self._enable_synchronous_mode = None\n        self._disconnect_on_exception = None\n        self._offline_mode = None\n        self._monitor_mode = None\n        self.logger = logging.getLogger(__name__)\n        self.default_timeout = 10\n        self._is_initialized = True", "hash": "802b5cc5cd79", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": "Constructor for an instance of the Controller class.", "chunk_size_bytes": 1108, "original_size_bytes": 1122, "start_byte": 3411, "end_byte": 4533}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:8728708b9180", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__del__", "qualified_name": "Robot.__del__", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [151, 155], "text": "def __del__(self):\n        if self._is_initialized:\n            self.Disconnect()\n            self.UnregisterCallbacks()", "hash": "8728708b9180", "chunk_type": "method", "node_type": "function_definition", "signature": "__del__(self)", "docstring": null, "chunk_size_bytes": 120, "original_size_bytes": 188, "start_byte": 4539, "end_byte": 4727}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:1c2118e462b2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_reset_disconnect_attributes", "qualified_name": "Robot._reset_disconnect_attributes", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [157, 167], "text": "def _reset_disconnect_attributes(self):\n        self._command_rx_queue = queue.Queue()\n        self._command_tx_queue = queue.Queue()\n        self._monitor_rx_queue = queue.Queue()\n        self._custom_response_events = list()\n        self._user_checkpoints = dict()\n        self._internal_checkpoints = dict()\n        self._internal_checkpoint_counter = MX_CHECKPOINT_ID_MAX + 1\n        self._clear_motion_requests = 0", "hash": "1c2118e462b2", "chunk_type": "method", "node_type": "function_definition", "signature": "_reset_disconnect_attributes(self)", "docstring": null, "chunk_size_bytes": 419, "original_size_bytes": 421, "start_byte": 4733, "end_byte": 5154}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:557ada678d62", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_deactivate_on_exception", "qualified_name": "Robot._deactivate_on_exception", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [174, 191], "text": "def _deactivate_on_exception(func, command_socket, *args, **kwargs):\n        \"\"\"Wrap input function to send deactivate signal to command_socket on exception.\n        Parameters\n        ----------\n        func : function handle\n            Function to execute.\n        command_socket : socket\n            Socket to send the deactivate command to.\n        \"\"\"\n        try:\n            return func(*args, **kwargs)\n        except BaseException as e:\n            if command_socket:\n                command_socket.sendall(b'DeactivateRobot\\0')\n            raise e", "hash": "557ada678d62", "chunk_type": "method", "node_type": "function_definition", "signature": "_deactivate_on_exception(func, command_socket, *args, **kwargs)", "docstring": "Wrap input function to send deactivate signal to command_socket on exception.\n\n        Parameters\n        ----------\n        func : function handle\n            Function to execute.\n\n        command_socket : socket\n            Socket to send the deactivate command to.", "chunk_size_bytes": 558, "original_size_bytes": 561, "start_byte": 5381, "end_byte": 5942}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:a1506e80329f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_handle_socket_rx", "qualified_name": "Robot._handle_socket_rx", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [194, 230], "text": "def _handle_socket_rx(robot_socket, rx_queue):\n        \"\"\"Handle received data on the socket.\n        Parameters\n        ----------\n        robot_socket : socket\n            Socket to use for receiving data.\n        rx_queue : queue\n            Thread-safe queue to push complete messages onto.\n        \"\"\"\n        remainder = ''\n        while True:\n            try:\n                robot_socket.setblocking(True)\n                raw_responses = robot_socket.recv(1024)\n            except (ConnectionAbortedError, BrokenPipeError):\n                return\n            if raw_responses == b'':\n                return\n            responses = raw_responses.decode('ascii').split('\\0')\n            if remainder != '':\n                responses[0] = remainder + responses[0]\n            remainder = responses[-1]\n            for response in responses[:-1]:\n                rx_queue.put(Message.from_string(response))", "hash": "a1506e80329f", "chunk_type": "method", "node_type": "function_definition", "signature": "_handle_socket_rx(robot_socket, rx_queue)", "docstring": "Handle received data on the socket.\n\n        Parameters\n        ----------\n        robot_socket : socket\n            Socket to use for receiving data.\n\n        rx_queue : queue\n            Thread-safe queue to push complete messages onto.", "chunk_size_bytes": 910, "original_size_bytes": 1205, "start_byte": 5966, "end_byte": 7171}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:20c03a7aed55", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_handle_socket_tx", "qualified_name": "Robot._handle_socket_tx", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [233, 253], "text": "def _handle_socket_tx(robot_socket, tx_queue):\n        \"\"\"Handle sending data on the socket.\n        Parameters\n        ----------\n        robot_socket : socket\n            Socket to use for sending data.\n        tx_queue : queue\n            Thread-safe queue to get messages from.\n        \"\"\"\n        while True:\n            command = tx_queue.get(block=True)\n            if command == TERMINATE:\n                return\n            else:\n                robot_socket.sendall((command + '\\0').encode('ascii'))", "hash": "20c03a7aed55", "chunk_type": "method", "node_type": "function_definition", "signature": "_handle_socket_tx(robot_socket, tx_queue)", "docstring": "Handle sending data on the socket.\n\n        Parameters\n        ----------\n        robot_socket : socket\n            Socket to use for sending data.\n\n        tx_queue : queue\n            Thread-safe queue to get messages from.", "chunk_size_bytes": 509, "original_size_bytes": 651, "start_byte": 7195, "end_byte": 7846}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:20427f822fc5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_connect_socket", "qualified_name": "Robot._connect_socket", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [256, 286], "text": "def _connect_socket(logger, address, port):\n        \"\"\"Connects to an arbitrary socket.\n        Parameters\n        ----------\n        logger : logger instance\n            Logger to use.\n        address : string\n            Address to use.\n        port : int\n            Port number to use.\n        Returns\n        -------\n        new_socket : socket object\n            Successfully-connected socket object.\n        \"\"\"\n        logger.debug('Attempting to connect to %s:%s', address, port)\n        new_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        new_socket.settimeout(0.1)  # 100ms\n        try:\n            new_socket.connect((address, port))\n        except:\n            logger.error('Unable to connect to %s:%s.', address, port)\n            return None\n        logger.debug('Connected to %s:%s.', address, port)\n        return new_socket", "hash": "20427f822fc5", "chunk_type": "method", "node_type": "function_definition", "signature": "_connect_socket(logger, address, port)", "docstring": "Connects to an arbitrary socket.\n\n        Parameters\n        ----------\n        logger : logger instance\n            Logger to use.\n        address : string\n            Address to use.\n        port : int\n            Port number to use.\n\n        Returns\n        -------\n        new_socket : socket object\n            Successfully-connected socket object.", "chunk_size_bytes": 860, "original_size_bytes": 913, "start_byte": 7870, "end_byte": 8783}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:20a2050fe2eb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_handle_callbacks", "qualified_name": "Robot._handle_callbacks", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [289, 320], "text": "def _handle_callbacks(logger, callback_queue, callbacks, timeout=None):\n        \"\"\"Runs callbacks found in callback_queue.\n        Parameters\n        ----------\n        logger : logger instance\n            Logger to use.\n        callback_queue : queue\n            Stores triggered callbacks.\n        callbacks : RobotCallbacks instance\n            Stores user-defined callback functions.\n        timeout : float or None\n            If none, block forever on empty queue, if 0, don't block, else block with timeout.\n        \"\"\"\n        block_on_empty = (timeout != 0)\n        while True:\n            if not block_on_empty and callback_queue.qsize() == 0:\n                return\n            callback_name, data = callback_queue.get(block=block_on_empty, timeout=timeout)\n            if callback_name == TERMINATE:\n                return\n            callback_function = callbacks.__dict__[callback_name]\n            if callback_function != None:\n                if data != None:\n                    callback_function(data)\n                else:\n                    callback_function()", "hash": "20a2050fe2eb", "chunk_type": "method", "node_type": "function_definition", "signature": "_handle_callbacks(logger, callback_queue, callbacks, timeout=None)", "docstring": "Runs callbacks found in callback_queue.\n\n        Parameters\n        ----------\n        logger : logger instance\n            Logger to use.\n        callback_queue : queue\n            Stores triggered callbacks.\n        callbacks : RobotCallbacks instance\n            Stores user-defined callback functions.\n        timeout : float or None\n            If none, block forever on empty queue, if 0, don't block, else block with timeout.", "chunk_size_bytes": 1081, "original_size_bytes": 1150, "start_byte": 8807, "end_byte": 9957}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:50a43983efbd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_check_monitor_threads", "qualified_name": "Robot._check_monitor_threads", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [326, 342], "text": "def _check_monitor_threads(self):\n        \"\"\"Check that the threads which handle robot monitor messages are alive.\n        Attempt to disconnect from the robot if not.\n        \"\"\"\n        if not (self._monitor_handler_thread and self._monitor_handler_thread.is_alive()):\n            self.Disconnect()\n            raise InvalidStateError('Monitor response handler thread has unexpectedly terminated.')\n        if self._offline_mode:  # Do not check rx threads in offline mode.\n            return\n        if not (self._monitor_rx_thread and self._monitor_rx_thread.is_alive()):\n            self.Disconnect()\n            raise InvalidStateError('Monitor rx thread has unexpectedly terminated.')", "hash": "50a43983efbd", "chunk_type": "method", "node_type": "function_definition", "signature": "_check_monitor_threads(self)", "docstring": "Check that the threads which handle robot monitor messages are alive.\n\n        Attempt to disconnect from the robot if not.", "chunk_size_bytes": 691, "original_size_bytes": 696, "start_byte": 10167, "end_byte": 10863}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:c4504cca560c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_check_command_threads", "qualified_name": "Robot._check_command_threads", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [344, 366], "text": "def _check_command_threads(self):\n        \"\"\"Check that the threads which handle robot command messages are alive.\n        Attempt to disconnect from the robot if not.\n        \"\"\"\n        if not (self._command_response_handler_thread and self._command_response_handler_thread.is_alive()):\n            self.Disconnect()\n            raise InvalidStateError('No command response handler thread, are you in monitor mode?')\n        if self._offline_mode:  # Do not check rx threads in offline mode.\n            return\n        if not (self._command_rx_thread and self._command_rx_thread.is_alive()):\n            self.Disconnect()\n            raise InvalidStateError('No command rx thread, are you in monitor mode?')\n        if not (self._command_tx_thread and self._command_tx_thread.is_alive()):\n            self._command_socket.sendall(b'DeactivateRobot\\0')\n            self.Disconnect()\n            raise InvalidStateError('No command tx thread, are you in monitor mode?')", "hash": "c4504cca560c", "chunk_type": "method", "node_type": "function_definition", "signature": "_check_command_threads(self)", "docstring": "Check that the threads which handle robot command messages are alive.\n\n        Attempt to disconnect from the robot if not.", "chunk_size_bytes": 969, "original_size_bytes": 1065, "start_byte": 10869, "end_byte": 11934}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:1ef136129d26", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_check_internal_states", "qualified_name": "Robot._check_internal_states", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [368, 379], "text": "def _check_internal_states(self):\n        \"\"\"Check that the threads which handle robot messages are alive.\n        Attempt to disconnect from the robot if not.\n        \"\"\"\n        if self._monitor_mode:\n            raise InvalidStateError('Cannot send command while in monitoring mode.')\n        else:\n            self._check_command_threads()\n        self._check_monitor_threads()", "hash": "1ef136129d26", "chunk_type": "method", "node_type": "function_definition", "signature": "_check_internal_states(self)", "docstring": "Check that the threads which handle robot messages are alive.\n\n        Attempt to disconnect from the robot if not.", "chunk_size_bytes": 381, "original_size_bytes": 384, "start_byte": 11940, "end_byte": 12324}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:36e590067bca", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_send_command", "qualified_name": "Robot._send_command", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [381, 402], "text": "def _send_command(self, command, arg_list=None):\n        \"\"\"Assembles and sends the command string to the Mecademic robot.\n        Parameters\n        ----------\n        command : string\n            Command name to send to the Mecademic robot.\n        arg_list : list\n            List of arguments the command requires.\n        \"\"\"\n        if arg_list:\n            command = command + '(' + ','.join([str(x) for x in arg_list]) + ')'\n        self._command_tx_queue.put(command)\n        if self._file_logger:\n            self._file_logger.command_queue.put(command)", "hash": "36e590067bca", "chunk_type": "method", "node_type": "function_definition", "signature": "_send_command(self, command, arg_list=None)", "docstring": "Assembles and sends the command string to the Mecademic robot.\n\n        Parameters\n        ----------\n        command : string\n            Command name to send to the Mecademic robot.\n        arg_list : list\n            List of arguments the command requires.", "chunk_size_bytes": 563, "original_size_bytes": 740, "start_byte": 12330, "end_byte": 13070}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:cac961cc2639", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_launch_thread", "qualified_name": "Robot._launch_thread", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [404, 428], "text": "def _launch_thread(self, *, target, args):\n        \"\"\"Establish the threads responsible for reading/sending messages using the sockets.\n        Parameters\n        ----------\n        func : function handle\n            Function to run using new thread.\n        args : argument list\n            Arguments to be passed to func.\n        Return\n        ------\n        thread handle\n            Handle for newly-launched thread.\n        \"\"\"\n        thread = threading.Thread(target=self._deactivate_on_exception, args=(\n            target,\n            self._command_socket,\n            *args,\n        ))\n        thread.start()\n        return thread", "hash": "cac961cc2639", "chunk_type": "method", "node_type": "function_definition", "signature": "_launch_thread(self, *, target, args)", "docstring": "Establish the threads responsible for reading/sending messages using the sockets.\n\n        Parameters\n        ----------\n        func : function handle\n            Function to run using new thread.\n        args : argument list\n            Arguments to be passed to func.\n\n        Return\n        ------\n        thread handle\n            Handle for newly-launched thread.", "chunk_size_bytes": 641, "original_size_bytes": 864, "start_byte": 13076, "end_byte": 13940}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:75295432cf1e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_initialize_command_socket", "qualified_name": "Robot._initialize_command_socket", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [430, 457], "text": "def _initialize_command_socket(self):\n        \"\"\"Establish the command socket and the associated thread.\n        \"\"\"\n        if self._offline_mode:\n            return\n        if self._command_socket is not None:\n            raise InvalidStateError('Cannot connect since existing command socket exists.')\n        try:\n            self._command_socket = self._connect_socket(self.logger, self._address, MX_ROBOT_TCP_PORT_CONTROL)\n            if self._command_socket is None:\n                raise CommunicationError('Command socket could not be created. Is the IP address correct?')\n            self._command_rx_thread = self._launch_thread(target=self._handle_socket_rx,\n                                                          args=(self._command_socket, self._command_rx_queue))\n            self._command_tx_thread = self._launch_thread(target=self._handle_socket_tx,\n                                                          args=(self._command_socket, self._command_tx_queue))\n        except:\n            self.Disconnect()\n            raise", "hash": "75295432cf1e", "chunk_type": "method", "node_type": "function_definition", "signature": "_initialize_command_socket(self)", "docstring": "Establish the command socket and the associated thread.", "chunk_size_bytes": 1044, "original_size_bytes": 1238, "start_byte": 13946, "end_byte": 15184}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:0dad1a69e3a3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_initialize_monitoring_socket", "qualified_name": "Robot._initialize_monitoring_socket", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [459, 482], "text": "def _initialize_monitoring_socket(self):\n        \"\"\"Establish the monitoring socket and the associated thread.\n        \"\"\"\n        if self._offline_mode:\n            return\n        if self._monitor_socket is not None:\n            raise InvalidStateError('Cannot connect since existing monitor socket exists.')\n        try:\n            self._monitor_socket = self._connect_socket(self.logger, self._address, MX_ROBOT_TCP_PORT_FEED)\n            if self._monitor_socket is None:\n                raise CommunicationError('Monitor socket could not be created. Is the IP address correct?')\n            self._monitor_rx_thread = self._launch_thread(target=self._handle_socket_rx,\n                                                          args=(self._monitor_socket, self._monitor_rx_queue))\n        except:\n            self.Disconnect()\n            raise", "hash": "0dad1a69e3a3", "chunk_type": "method", "node_type": "function_definition", "signature": "_initialize_monitoring_socket(self)", "docstring": "Establish the monitoring socket and the associated thread.", "chunk_size_bytes": 847, "original_size_bytes": 975, "start_byte": 15190, "end_byte": 16165}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:08c9f8fbdabf", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_receive_welcome_message", "qualified_name": "Robot._receive_welcome_message", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [484, 513], "text": "def _receive_welcome_message(self, message_queue):\n        \"\"\"Receive and parse a welcome message in order to set _robot_info and _robot_state.\n        Parameters\n        ----------\n        message_queue : queue\n            The welcome message will be fetched from this queue.\n        \"\"\"\n        try:\n            response = message_queue.get(block=True, timeout=self.default_timeout)\n        except queue.Empty:\n            self.logger.error('No response received within timeout interval.')\n            self.Disconnect()\n            raise CommunicationError('No response received within timeout interval.')\n        except BaseException:\n            self.Disconnect()\n            raise\n        if response.id != MX_ST_CONNECTED:\n            self.logger.error('Connection error: {}'.format(response))\n            self.Disconnect()\n            raise CommunicationError('Connection error: {}'.format(response))\n        self._robot_info = RobotInfo.from_command_response_string(response.data)\n        self._robot_state = RobotState(self._robot_info.num_joints)", "hash": "08c9f8fbdabf", "chunk_type": "method", "node_type": "function_definition", "signature": "_receive_welcome_message(self, message_queue)", "docstring": "Receive and parse a welcome message in order to set _robot_info and _robot_state.\n\n        Parameters\n        ----------\n        message_queue : queue\n            The welcome message will be fetched from this queue.", "chunk_size_bytes": 1056, "original_size_bytes": 1154, "start_byte": 16171, "end_byte": 17325}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:7165472eb3d6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_initialize_command_connection", "qualified_name": "Robot._initialize_command_connection", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [515, 521], "text": "def _initialize_command_connection(self):\n        \"\"\"Attempt to connect to the command port of the Mecademic Robot.\n        \"\"\"\n        self._receive_welcome_message(self._command_rx_queue)\n        self._command_response_handler_thread = self._launch_thread(target=self._command_response_handler, args=())", "hash": "7165472eb3d6", "chunk_type": "method", "node_type": "function_definition", "signature": "_initialize_command_connection(self)", "docstring": "Attempt to connect to the command port of the Mecademic Robot.", "chunk_size_bytes": 305, "original_size_bytes": 307, "start_byte": 17331, "end_byte": 17638}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:56a7b92c7468", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_initialize_monitoring_connection", "qualified_name": "Robot._initialize_monitoring_connection", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [523, 538], "text": "def _initialize_monitoring_connection(self):\n        \"\"\"Attempt to connect to the monitor port of the Mecademic Robot.\n        Returns\n        -------\n        status : boolean\n            Returns the status of the connection, true for success, false for failure.\n        \"\"\"\n        if self._monitor_mode:\n            self._receive_welcome_message(self._monitor_rx_queue)\n        self._monitor_handler_thread = self._launch_thread(target=self._monitor_handler, args=())\n        return", "hash": "56a7b92c7468", "chunk_type": "method", "node_type": "function_definition", "signature": "_initialize_monitoring_connection(self)", "docstring": "Attempt to connect to the monitor port of the Mecademic Robot.\n\n        Returns\n        -------\n        status : boolean\n            Returns the status of the connection, true for success, false for failure.", "chunk_size_bytes": 484, "original_size_bytes": 489, "start_byte": 17644, "end_byte": 18133}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:291e7ae97fcd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_shut_down_queue_threads", "qualified_name": "Robot._shut_down_queue_threads", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [540, 568], "text": "def _shut_down_queue_threads(self):\n        \"\"\"Attempt to gracefully shut down threads which read from queues.\n        \"\"\"\n        if self._command_tx_thread is not None:\n            try:\n                self._command_tx_queue.put(TERMINATE)\n            except Exception as e:\n                self.logger.error('Error shutting down tx thread. ' + str(e))\n            self._command_tx_thread.join(timeout=self.default_timeout)\n            self._command_tx_thread = None\n        if self._command_response_handler_thread is not None:\n            try:\n                self._command_rx_queue.put(TERMINATE)\n            except Exception as e:\n                self.logger.error('Error shutting down command response handler thread. ' + str(e))\n            self._command_response_handler_thread.join(timeout=self.default_timeout)\n            self._command_response_handler_thread = None\n        if self._monitor_handler_thread is not None:\n            try:\n                self._monitor_rx_queue.put(TERMINATE)\n            except Exception as e:\n                self.logger.error('Error shutting down monitor handler thread. ' + str(e))\n            self._monitor_handler_thread.join(timeout=self.default_timeout)\n            self._monitor_handler_thread = None", "hash": "291e7ae97fcd", "chunk_type": "method", "node_type": "function_definition", "signature": "_shut_down_queue_threads(self)", "docstring": "Attempt to gracefully shut down threads which read from queues.", "chunk_size_bytes": 1252, "original_size_bytes": 1431, "start_byte": 18139, "end_byte": 19570}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:a311b4e38f4e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_shut_down_socket_threads", "qualified_name": "Robot._shut_down_socket_threads", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [570, 595], "text": "def _shut_down_socket_threads(self):\n        \"\"\"Attempt to gracefully shut down threads which read from sockets.\n        \"\"\"\n        with self._main_lock:\n            if self._command_socket is not None:\n                try:\n                    self._command_socket.shutdown(socket.SHUT_RDWR)\n                except Exception as e:\n                    self.logger.error('Error shutting down command socket. ' + str(e))\n            if self._monitor_socket is not None:\n                try:\n                    self._monitor_socket.shutdown(socket.SHUT_RDWR)\n                except Exception as e:\n                    self.logger.error('Error shutting down monitor socket. ' + str(e))\n            if self._command_rx_thread is not None:\n                self._command_rx_thread.join(timeout=self.default_timeout)\n                self._command_rx_thread = None\n            if self._monitor_rx_thread is not None:\n                self._monitor_rx_thread.join(timeout=self.default_timeout)\n                self._monitor_rx_thread = None", "hash": "a311b4e38f4e", "chunk_type": "method", "node_type": "function_definition", "signature": "_shut_down_socket_threads(self)", "docstring": "Attempt to gracefully shut down threads which read from sockets.", "chunk_size_bytes": 1030, "original_size_bytes": 1144, "start_byte": 19576, "end_byte": 20720}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:81f3f6faf4cc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_set_checkpoint_internal", "qualified_name": "Robot._set_checkpoint_internal", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [597, 614], "text": "def _set_checkpoint_internal(self):\n        \"\"\"Set a checkpoint for internal use using the next available internal id.\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.\n        \"\"\"\n        with self._main_lock:\n            checkpoint_id = self._internal_checkpoint_counter\n            self._internal_checkpoint_counter += 1\n            if self._internal_checkpoint_counter > CHECKPOINT_ID_MAX_PRIVATE:\n                self._internal_checkpoint_counter.value = MX_CHECKPOINT_ID_MAX + 1\n            return self._set_checkpoint_impl(checkpoint_id)", "hash": "81f3f6faf4cc", "chunk_type": "method", "node_type": "function_definition", "signature": "_set_checkpoint_internal(self)", "docstring": "Set a checkpoint for internal use using the next available internal id.\n\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.", "chunk_size_bytes": 604, "original_size_bytes": 661, "start_byte": 20726, "end_byte": 21387}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:3bcafaed7562", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_set_checkpoint_impl", "qualified_name": "Robot._set_checkpoint_impl", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [616, 661], "text": "def _set_checkpoint_impl(self, n, send_to_robot=True):\n        \"\"\"Create a checkpoint object which can be used to wait for the checkpoint id to be received from the robot.\n        Checkpoints are implemented as a dictionary of lists, to support repeated checkpoints (which are discouraged),\n        and also to support expecting external checkpoints. Particularly so that ExpectExternalCheckpoints could be\n        called in any arbitrary order.\n        Returning an event object for the user to wait on also prevents activated checkpoints from being 'missed' by the\n        API, and prevents issues around waiting for checkpoints which may never arrive.\n        Parameters\n        ----------\n        n : int\n            Id of checkpoint.\n        send_to_robot : bool\n            If true, send the SetCheckpoint command to the robot.\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.\n        \"\"\"\n        with self._main_lock:\n            if not isinstance(n, int):\n                raise TypeError('Please provide an integer checkpoint id.')\n            if MX_CHECKPOINT_ID_MIN <= n <= MX_CHECKPOINT_ID_MAX:\n                checkpoints_dict = self._user_checkpoints\n            elif MX_CHECKPOINT_ID_MAX < n <= CHECKPOINT_ID_MAX_PRIVATE:\n                checkpoints_dict = self._internal_checkpoints\n            else:\n                raise ValueError\n            self.logger.debug('Setting checkpoint %s', n)\n            if n not in checkpoints_dict:\n                checkpoints_dict[n] = list()\n            event = InterruptableEvent(n)\n            checkpoints_dict[n].append(event)\n            if send_to_robot:\n                self._send_command('SetCheckpoint', [n])\n            return event", "hash": "3bcafaed7562", "chunk_type": "method", "node_type": "function_definition", "signature": "_set_checkpoint_impl(self, n, send_to_robot=True)", "docstring": "Create a checkpoint object which can be used to wait for the checkpoint id to be received from the robot.\n\n        Checkpoints are implemented as a dictionary of lists, to support repeated checkpoints (which are discouraged),\n        and also to support expecting external checkpoints. Particularly so that ExpectExternalCheckpoints could be\n        called in any arbitrary order.\n\n        Returning an event object for the user to wait on also prevents activated checkpoints from being 'missed' by the\n        API, and prevents issues around waiting for checkpoints which may never arrive.\n\n        Parameters\n        ----------\n        n : int\n            Id of checkpoint.\n        send_to_robot : bool\n            If true, send the SetCheckpoint command to the robot.\n\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.", "chunk_size_bytes": 1754, "original_size_bytes": 1827, "start_byte": 21393, "end_byte": 23220}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:fdd8dd697b1b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_invalidate_checkpoints", "qualified_name": "Robot._invalidate_checkpoints", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [663, 674], "text": "def _invalidate_checkpoints(self):\n        '''Unblock all waiting checkpoints and have them throw InterruptException.\n        '''\n        for checkpoints_dict in [self._internal_checkpoints, self._user_checkpoints]:\n            for key, checkpoints_list in checkpoints_dict.items():\n                for event in checkpoints_list:\n                    event.abort()\n            checkpoints_dict.clear()\n        self._internal_checkpoint_counter = MX_CHECKPOINT_ID_MAX + 1", "hash": "fdd8dd697b1b", "chunk_type": "method", "node_type": "function_definition", "signature": "_invalidate_checkpoints(self)", "docstring": "Unblock all waiting checkpoints and have them throw InterruptException.", "chunk_size_bytes": 469, "original_size_bytes": 472, "start_byte": 23226, "end_byte": 23698}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:bb7671b1b024", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_send_motion_command", "qualified_name": "Robot._send_motion_command", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [676, 694], "text": "def _send_motion_command(self, command, arg_list=None):\n        \"\"\"Send generic motion command with support for synchronous mode and locking.\n        Parameters\n        ----------\n        command : string\n            The command to send.\n        args : list\n            List of arguments to be sent.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command(command, arg_list)\n            if self._enable_synchronous_mode:\n                checkpoint = self._set_checkpoint_internal()\n        if self._enable_synchronous_mode:\n            checkpoint.wait()", "hash": "bb7671b1b024", "chunk_type": "method", "node_type": "function_definition", "signature": "_send_motion_command(self, command, arg_list=None)", "docstring": "Send generic motion command with support for synchronous mode and locking.\n\n        Parameters\n        ----------\n        command : string\n            The command to send.\n        args : list\n            List of arguments to be sent.", "chunk_size_bytes": 612, "original_size_bytes": 615, "start_byte": 23704, "end_byte": 24319}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:126ee8c8c346", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_monitor_handler", "qualified_name": "Robot._monitor_handler", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [696, 764], "text": "def _monitor_handler(self):\n        \"\"\"Handle messages from the monitoring port of the robot.\n        \"\"\"\n        joint_positions = None\n        end_effector_pose = None\n        joint_configuration = None\n        last_joint_turn = None\n        while True:\n            response = self._monitor_rx_queue.get(block=True)\n            if response == TERMINATE:\n                return\n            self._callback_queue.put('on_monitor_message', response)\n            queue_size = self._monitor_rx_queue.qsize()\n            if queue_size > self._robot_state.max_queue_size:\n                self._robot_state.max_queue_size = queue_size\n            with self._main_lock:\n                if response.id == MX_ST_GET_JOINTS and self._robot_info.rt_message_capable:\n                    joint_positions = string_to_floats(response.data)\n                elif response.id == MX_ST_GET_POSE and self._robot_info.rt_message_capable:\n                    end_effector_pose = string_to_floats(response.data)\n                elif response.id == MX_ST_GET_CONF and self._robot_info.rt_message_capable:\n                    joint_configuration = string_to_floats(response.data)\n                elif response.id == MX_ST_GET_CONF_TURN and self._robot_info.rt_message_capable:\n                    last_joint_turn = string_to_floats(response.data)\n                if response.id == MX_ST_RT_CYCLE_END:\n                    if not self._robot_info.rt_message_capable:\n                        self._robot_info.rt_message_capable = True\n                    timestamp = float(response.data)\n                    if joint_positions:\n                        self._robot_state.target_joint_positions.update_from_data(timestamp, joint_positions)\n                        joint_positions = None\n                    if end_effector_pose:\n                        self._robot_state.target_end_effector_pose.update_from_data(timestamp, end_effector_pose)\n                        end_effector_pose = None\n                    if joint_configuration:\n                        self._robot_state.target_joint_configurations.update_from_data(timestamp, joint_configuration)\n                        joint_configuration = None\n                    if last_joint_turn:\n                        self._robot_state.target_last_joint_turn.update_from_data(timestamp, last_joint_turn)\n                        last_joint_turn = None\n                    if self._file_logger != None:\n                        self._file_logger.write_fields(timestamp, self._robot_state)\n                else:\n                    self._handle_common_messages(response, is_command_response=False)\n                    if response.id == MX_ST_GET_POSE and not self._robot_info.rt_message_capable:\n                        if self._file_logger != None:\n                            self._file_logger.write_fields(time.time_ns() / 1000, self._robot_state)", "hash": "126ee8c8c346", "chunk_type": "method", "node_type": "function_definition", "signature": "_monitor_handler(self)", "docstring": "Handle messages from the monitoring port of the robot.", "chunk_size_bytes": 2867, "original_size_bytes": 3745, "start_byte": 24325, "end_byte": 28070}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:0b962633440e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_command_response_handler", "qualified_name": "Robot._command_response_handler", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [766, 825], "text": "def _command_response_handler(self):\n        \"\"\"Handle received messages on the command socket.\n        \"\"\"\n        while True:\n            response = self._command_rx_queue.get(block=True)\n            if response == TERMINATE:\n                return\n            self._callback_queue.put('on_command_message', response)\n            with self._main_lock:\n                matched_events = (event for event in self._custom_response_events if response.id in event.data)\n                for event in matched_events:\n                    event.set(data=response)\n                    self._custom_response_events.remove(event)\n                if response.id == MX_ST_CHECKPOINT_REACHED:\n                    self._handle_checkpoint_response(response)\n                elif response.id == MX_ST_CLEAR_MOTION:\n                    if self._clear_motion_requests <= 1:\n                        self._clear_motion_requests = 0\n                        self._robot_events.on_motion_cleared.set()\n                        self._callback_queue.put('on_motion_cleared')\n                    else:\n                        self._clear_motion_requests -= 1\n                elif response.id == MX_ST_PSTOP:\n                    if bool(int(response.data)):\n                        self._robot_events.on_p_stop_reset.clear()\n                        self._robot_events.on_p_stop.set()\n                        self._callback_queue.put('on_p_stop')\n                    else:\n                        self._robot_events.on_p_stop.clear()\n                        self._robot_events.on_p_stop_reset.set()\n                        self._callback_queue.put('on_p_stop_reset')\n                elif response.id == MX_ST_BRAKES_ON:\n                    self._robot_events.on_brakes_deactivated.clear()\n                    self._robot_events.on_brakes_activated.set()\n                elif response.id == MX_ST_BRAKES_OFF:\n                    self._robot_events.on_brakes_activated.clear()\n                    self._robot_events.on_brakes_deactivated.set()\n                elif response.id == MX_ST_OFFLINE_START:\n                    self._robot_events.on_offline_program_started.set()\n                    self._callback_queue.put('on_offline_program_state')\n                elif response.id == MX_ST_NO_OFFLINE_SAVED:\n                    self._robot_events.on_offline_program_started.abort()\n                else:\n                    self._handle_common_messages(response, is_command_response=True)", "hash": "0b962633440e", "chunk_type": "method", "node_type": "function_definition", "signature": "_command_response_handler(self)", "docstring": "Handle received messages on the command socket.", "chunk_size_bytes": 2454, "original_size_bytes": 2635, "start_byte": 28076, "end_byte": 30711}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:89b44705243a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_handle_common_messages", "qualified_name": "Robot._handle_common_messages", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [827, 906], "text": "def _handle_common_messages(self, response, is_command_response=False):\n        \"\"\"Handle response messages which are received on the command and monitor port, and are processed the same way.\n        Parameters\n        ----------\n        response : Message object\n            Robot status response to parse and handle.\n        \"\"\"\n        if response.id == MX_ST_GET_STATUS_ROBOT:\n            self._handle_robot_status_response(response)\n        elif response.id == MX_ST_GET_JOINTS and not self._robot_info.rt_message_capable:\n            self._robot_state.target_joint_positions = TimestampedData(0, string_to_floats(response.data))\n            if is_command_response:\n                self._robot_events.on_joints_updated.set()\n        elif response.id == MX_ST_GET_POSE and not self._robot_info.rt_message_capable:\n            self._robot_state.target_end_effector_pose = TimestampedData(0, string_to_floats(response.data))\n            if is_command_response:\n                self._robot_events.on_pose_updated.set()\n        elif response.id == MX_ST_GET_CONF and not self._robot_info.rt_message_capable:\n            self._robot_state.target_joint_configurations = TimestampedData(0, string_to_floats(response.data))\n            if is_command_response:\n                self._robot_events.on_conf_updated.set()\n        elif response.id == MX_ST_GET_CONF_TURN and not self._robot_info.rt_message_capable:\n            self._robot_state.target_last_joint_turn = TimestampedData(0, string_to_floats(response.data))\n            if is_command_response:\n                self._robot_events.on_conf_turn_updated.set()\n        elif response.id == MX_ST_RT_NC_JOINT_POS:\n            self._robot_state.target_joint_positions.update_from_csv(response.data)\n            if is_command_response:\n                self._robot_events.on_joints_updated.set()\n        elif response.id == MX_ST_RT_NC_CART_POS:\n            self._robot_state.target_end_effector_pose.update_from_csv(response.data)\n            if is_command_response:\n                self._robot_events.on_pose_updated.set()\n        elif response.id == MX_ST_RT_NC_JOINT_POS:\n            self._robot_state.target_joint_positions.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_NC_CART_POS:\n            self._robot_state.target_end_effector_pose.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_NC_JOINT_VEL:\n            self._robot_state.target_joint_velocity.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_NC_CART_VEL:\n            self._robot_state.target_end_effector_velocity.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_NC_CONF:\n            self._robot_state.target_joint_configurations.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_NC_CONF_TURN:\n            self._robot_state.target_last_joint_turn.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_JOINT_POS:\n            self._robot_state.drive_joint_positions.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_CART_POS:\n            self._robot_state.drive_end_effector_pose.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_JOINT_VEL:\n            self._robot_state.drive_joint_velocity.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_JOINT_TORQ:\n            self._robot_state.drive_joint_torque_ratio.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_CART_VEL:\n            self._robot_state.drive_end_effector_velocity.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_CONF:\n            self._robot_state.drive_joint_configurations.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_DRIVE_CONF_TURN:\n            self._robot_state.drive_last_joint_turn.update_from_csv(response.data)\n        elif response.id == MX_ST_RT_ACCELEROMETER:\n            timestamp, index, *measurements = string_to_floats(response.data)\n            if (index not in self._robot_state.accelerometer\n                    or timestamp > self._robot_state.accelerometer[index].timestamp):\n                self._robot_state.accelerometer[index] = TimestampedData(timestamp, measurements)", "hash": "89b44705243a", "chunk_type": "method", "node_type": "function_definition", "signature": "_handle_common_messages(self, response, is_command_response=False)", "docstring": "Handle response messages which are received on the command and monitor port, and are processed the same way.\n\n        Parameters\n        ----------\n        response : Message object\n            Robot status response to parse and handle.", "chunk_size_bytes": 4227, "original_size_bytes": 4460, "start_byte": 30717, "end_byte": 35177}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:58f13c0f0bc2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_handle_robot_status_response", "qualified_name": "Robot._handle_robot_status_response", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [908, 987], "text": "def _handle_robot_status_response(self, response):\n        \"\"\"Parse robot status response and update status fields and events.\n        Parameters\n        ----------\n        response : Message object\n            Robot status response to parse and handle.\n        \"\"\"\n        assert response.id == MX_ST_GET_STATUS_ROBOT\n        status_flags = [bool(int(x)) for x in response.data.split(',')]\n        if self._robot_state.activation_state != status_flags[0]:\n            if status_flags[0]:\n                self._robot_events.on_deactivated.clear()\n                self._robot_events.on_activated.set()\n                self._robot_events.on_brakes_activated.clear()\n                self._robot_events.on_brakes_deactivated.set()\n                self._callback_queue.put('on_activated')\n            else:\n                self._robot_events.on_activated.clear()\n                self._robot_events.on_deactivated.set()\n                self._robot_events.on_brakes_deactivated.clear()\n                self._robot_events.on_brakes_activated.set()\n                self._callback_queue.put('on_deactivated')\n            self._robot_state.activation_state = status_flags[0]\n        if self._robot_state.homing_state != status_flags[1]:\n            if status_flags[1]:\n                self._robot_events.on_homed.set()\n                self._callback_queue.put('on_homed')\n            else:\n                self._robot_events.on_homed.clear()\n            self._robot_state.homing_state = status_flags[1]\n        if self._robot_state.simulation_mode != status_flags[2]:\n            if status_flags[2]:\n                self._robot_events.on_deactivate_sim.clear()\n                self._robot_events.on_activate_sim.set()\n                self._callback_queue.put('on_activate_sim')\n            else:\n                self._robot_events.on_activate_sim.clear()\n                self._robot_events.on_deactivate_sim.set()\n                self._callback_queue.put('on_deactivate_sim')\n            self._robot_state.simulation_mode = status_flags[2]\n        if self._robot_state.error_status != status_flags[3]:\n            if status_flags[3]:\n                self._invalidate_checkpoints()\n                self._robot_events.on_error.set()\n                self._robot_events.abort_all_except_on_connected()\n                self._robot_events.on_error_reset.clear()\n                self._callback_queue.put('on_error')\n            else:\n                self._robot_events.clear_abort_all()\n                self._robot_events.on_error.clear()\n                self._robot_events.on_error_reset.set()\n                self._callback_queue.put('on_error_reset')\n            self._robot_state.error_status = status_flags[3]\n        if self._robot_state.pause_motion_status != status_flags[4]:\n            if status_flags[4]:\n                self._robot_events.on_motion_resumed.clear()\n                self._robot_events.on_motion_paused.set()\n                self._callback_queue.put('on_motion_paused')\n            else:\n                self._robot_events.on_motion_paused.clear()\n                self._robot_events.on_motion_resumed.set()\n                self._callback_queue.put('on_motion_resumed')\n            self._robot_state.pause_motion_status = status_flags[4]\n        if self._robot_state.end_of_block_status != status_flags[5]:\n            if status_flags[5]:\n                self._robot_events.on_end_of_block.set()\n            else:\n                self._robot_events.on_end_of_block.clear()\n            self._robot_state.end_of_block_status = status_flags[5]\n        self._robot_events.on_status_updated.set()\n        self._callback_queue.put('on_status_updated')", "hash": "58f13c0f0bc2", "chunk_type": "method", "node_type": "function_definition", "signature": "_handle_robot_status_response(self, response)", "docstring": "Parse robot status response and update status fields and events.\n\n        Parameters\n        ----------\n        response : Message object\n            Robot status response to parse and handle.", "chunk_size_bytes": 3652, "original_size_bytes": 3661, "start_byte": 35183, "end_byte": 38844}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:b0fbe877c95f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_handle_checkpoint_response", "qualified_name": "Robot._handle_checkpoint_response", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [989, 1021], "text": "def _handle_checkpoint_response(self, response):\n        \"\"\"Handle the checkpoint message from the robot, set the appropriate events, etc.\n        Parameters\n        ----------\n        response : Message object\n            Response message which includes the received checkpoint id.\n        \"\"\"\n        assert response.id == MX_ST_CHECKPOINT_REACHED\n        checkpoint_id = int(response.data)\n        if checkpoint_id in self._user_checkpoints and self._user_checkpoints[checkpoint_id]:\n            self._user_checkpoints[checkpoint_id].pop(0).set()\n            if not self._user_checkpoints[checkpoint_id]:\n                self._user_checkpoints.pop(checkpoint_id)\n            if '*' in self._internal_checkpoints and self._internal_checkpoints['*']:\n                for event in self._internal_checkpoints.pop('*'):\n                    event.set()\n            self._callback_queue.put('on_checkpoint_reached', checkpoint_id)\n        elif checkpoint_id in self._internal_checkpoints and self._internal_checkpoints[checkpoint_id]:\n            self._internal_checkpoints[checkpoint_id].pop(0).set()\n            if not self._internal_checkpoints[checkpoint_id]:\n                self._internal_checkpoints.pop(checkpoint_id)\n        else:\n            self.logger.warning('Received un-tracked checkpoint. Please use ExpectExternalCheckpoint() to track.')", "hash": "b0fbe877c95f", "chunk_type": "method", "node_type": "function_definition", "signature": "_handle_checkpoint_response(self, response)", "docstring": "Handle the checkpoint message from the robot, set the appropriate events, etc.\n\n        Parameters\n        ----------\n        response : Message object\n            Response message which includes the received checkpoint id.", "chunk_size_bytes": 1350, "original_size_bytes": 1749, "start_byte": 38850, "end_byte": 40599}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:3f93c3e837a4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RegisterCallbacks", "qualified_name": "Robot.RegisterCallbacks", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1029, 1057], "text": "def RegisterCallbacks(self, callbacks, run_callbacks_in_separate_thread):\n        \"\"\"Register callback functions to be executed.\n        Parameters\n        ----------\n        callbacks : RobotCallbacks object\n            Object containing all callback functions.\n        run_callbacks_in_separate_thread : bool\n            If true, callbacks are run automatically in thread. If false, RunCallbacks must be used.\n            **Running callbacks in a separate thread means the user application MUST BE THREAD SAFE!**\n        \"\"\"\n        if not isinstance(callbacks, RobotCallbacks):\n            raise TypeError('Callbacks object is not the appropriate class.')\n        if self._monitor_handler_thread or self._command_response_handler_thread:\n            raise InvalidStateError('Callbacks cannot be set if already connected.')\n        self._callback_queue = CallbackQueue(callbacks)\n        self._robot_callbacks = callbacks\n        if run_callbacks_in_separate_thread:\n            self._callback_thread = threading.Thread(target=self._handle_callbacks,\n                                                     args=(\n                                                         self.logger,\n                                                         self._callback_queue,\n                                                         self._robot_callbacks,\n                                                     ))\n            self._callback_thread.start()", "hash": "3f93c3e837a4", "chunk_type": "method", "node_type": "function_definition", "signature": "RegisterCallbacks(self, callbacks, run_callbacks_in_separate_thread)", "docstring": "Register callback functions to be executed.\n\n        Parameters\n        ----------\n        callbacks : RobotCallbacks object\n            Object containing all callback functions.\n        run_callbacks_in_separate_thread : bool\n            If true, callbacks are run automatically in thread. If false, RunCallbacks must be used.\n            **Running callbacks in a separate thread means the user application MUST BE THREAD SAFE!**", "chunk_size_bytes": 1439, "original_size_bytes": 1516, "start_byte": 40915, "end_byte": 42431}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:0c91f1963bab", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "UnregisterCallbacks", "qualified_name": "Robot.UnregisterCallbacks", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1059, 1069], "text": "def UnregisterCallbacks(self):\n        \"\"\"Unregister callback functions and terminate callback handler thread if applicable.\n        \"\"\"\n        if self._callback_thread:\n            self._callback_queue.put(TERMINATE)\n            self._callback_thread.join(timeout=self.default_timeout)\n        self._robot_callbacks = RobotCallbacks()\n        self._callback_queue = CallbackQueue(self._robot_callbacks)\n        self._callback_thread = None", "hash": "0c91f1963bab", "chunk_type": "method", "node_type": "function_definition", "signature": "UnregisterCallbacks(self)", "docstring": "Unregister callback functions and terminate callback handler thread if applicable.", "chunk_size_bytes": 441, "original_size_bytes": 443, "start_byte": 42437, "end_byte": 42880}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:43e32d7a0de2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RunCallbacks", "qualified_name": "Robot.RunCallbacks", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1071, 1080], "text": "def RunCallbacks(self):\n        \"\"\"Run all triggered callback functions.\n        \"\"\"\n        if self._callback_thread:\n            raise InvalidStateError(\n                'Cannot call RunCallbacks since callback handler is already running in separate thread.')\n        self._handle_callbacks(self.logger, self._callback_queue, self._robot_callbacks, timeout=0)", "hash": "43e32d7a0de2", "chunk_type": "method", "node_type": "function_definition", "signature": "RunCallbacks(self)", "docstring": "Run all triggered callback functions.", "chunk_size_bytes": 361, "original_size_bytes": 431, "start_byte": 42886, "end_byte": 43317}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:8fed68441bf0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Connect", "qualified_name": "Robot.Connect", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1084, 1150], "text": "def Connect(\n        self,\n        address=MX_DEFAULT_ROBOT_IP,\n        enable_synchronous_mode=False,\n        disconnect_on_exception=True,\n        monitor_mode=False,\n        offline_mode=False,\n    ):\n        \"\"\"Attempt to connect to a physical Mecademic Robot.\n        Parameters\n        ----------\n        address : string\n            The IP address associated to the Mecademic Robot.\n        enable_synchronous_mode : bool\n            If true, each command will wait until previous is done executing.\n        disconnect_on_exception : bool\n            If true, will attempt to disconnect from the robot on exception from api call.\n        monitor_mode : bool\n            If true, command connection will not be established.\n        offline_mode : bool\n            If true, socket connections are not created, only used for testing.\n        \"\"\"\n        with self._main_lock:\n            if not isinstance(address, str):\n                raise TypeError('Invalid IP address.')\n            ipaddress.ip_address(address)\n            self._address = address\n            self._enable_synchronous_mode = enable_synchronous_mode\n            self._disconnect_on_exception = disconnect_on_exception\n            self._offline_mode = offline_mode\n            self._monitor_mode = monitor_mode\n            if not self._monitor_mode:\n                self._initialize_command_socket()\n                self._initialize_command_connection()\n            self._initialize_monitoring_socket()\n            self._initialize_monitoring_connection()\n            self._robot_events.clear_all()\n            self._robot_events.on_deactivated.set()\n            self._robot_events.on_error_reset.set()\n            self._robot_events.on_p_stop_reset.set()\n            self._robot_events.on_motion_resumed.set()\n            self._robot_events.on_brakes_activated.set()\n            self._robot_events.on_status_updated.set()\n            self._robot_events.on_conf_updated.set()\n            self._robot_events.on_conf_turn_updated.set()\n            self._robot_events.on_joints_updated.set()\n            self._robot_events.on_pose_updated.set()\n            self._robot_events.on_connected.set()\n            self._callback_queue.put('on_connected')\n        if not self._monitor_mode:\n            serial_response = self.SendCustomCommand('GetRobotSerial', expected_responses=[MX_ST_GET_ROBOT_SERIAL])\n            serial_response_message = serial_response.wait_for_data(timeout=self.default_timeout)\n            self._robot_info.serial = serial_response_message.data", "hash": "8fed68441bf0", "chunk_type": "method", "node_type": "function_definition", "signature": "Connect(\n        self,\n        address=MX_DEFAULT_ROBOT_IP,\n        enable_synchronous_mode=False,\n        disconnect_on_exception=True,\n        monitor_mode=False,\n        offline_mode=False,\n    )", "docstring": "Attempt to connect to a physical Mecademic Robot.\n\n        Parameters\n        ----------\n        address : string\n            The IP address associated to the Mecademic Robot.\n        enable_synchronous_mode : bool\n            If true, each command will wait until previous is done executing.\n        disconnect_on_exception : bool\n            If true, will attempt to disconnect from the robot on exception from api call.\n        monitor_mode : bool\n            If true, command connection will not be established.\n        offline_mode : bool\n            If true, socket connections are not created, only used for testing.", "chunk_size_bytes": 2535, "original_size_bytes": 2680, "start_byte": 43357, "end_byte": 46037}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:ac4f64d3f750", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Disconnect", "qualified_name": "Robot.Disconnect", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1152, 1188], "text": "def Disconnect(self):\n        \"\"\"Disconnects Mecademic Robot object from the physical Mecademic robot.\n        \"\"\"\n        self.logger.debug('Disconnecting from the robot.')\n        self._shut_down_queue_threads()\n        with self._main_lock:\n            self._shut_down_socket_threads()\n            self._invalidate_checkpoints()\n            self._reset_disconnect_attributes()\n            if self._command_socket is not None:\n                try:\n                    self._command_socket.close()\n                except Exception as e:\n                    self.logger.error('Error closing command socket. ' + str(e))\n                self._command_socket = None\n            if self._monitor_socket is not None:\n                try:\n                    self._monitor_socket.close()\n                except Exception as e:\n                    self.logger.error('Error closing monitor socket. ' + str(e))\n                self._monitor_socket = None\n            self._robot_events.on_connected.clear()\n            self._robot_events.on_disconnected.set()\n            self._callback_queue.put('on_disconnected')\n            self._robot_events.abort_all_except_on_connected()", "hash": "ac4f64d3f750", "chunk_type": "method", "node_type": "function_definition", "signature": "Disconnect(self)", "docstring": "Disconnects Mecademic Robot object from the physical Mecademic robot.", "chunk_size_bytes": 1169, "original_size_bytes": 1408, "start_byte": 46043, "end_byte": 47451}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:c7372314f7dc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ActivateRobot", "qualified_name": "Robot.ActivateRobot", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1191, 1200], "text": "def ActivateRobot(self):\n        \"\"\"Activate the robot.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('ActivateRobot')\n        if self._enable_synchronous_mode:\n            self.WaitActivated()", "hash": "c7372314f7dc", "chunk_type": "method", "node_type": "function_definition", "signature": "ActivateRobot(self)", "docstring": "Activate the robot.", "chunk_size_bytes": 262, "original_size_bytes": 264, "start_byte": 47486, "end_byte": 47750}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:97515d59485d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Home", "qualified_name": "Robot.Home", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1203, 1212], "text": "def Home(self):\n        \"\"\"Home the robot.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('Home')\n        if self._enable_synchronous_mode:\n            self.WaitHomed()", "hash": "97515d59485d", "chunk_type": "method", "node_type": "function_definition", "signature": "Home(self)", "docstring": "Home the robot.", "chunk_size_bytes": 236, "original_size_bytes": 238, "start_byte": 47785, "end_byte": 48023}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:2da8ce8a018b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ActivateAndHome", "qualified_name": "Robot.ActivateAndHome", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1215, 1220], "text": "def ActivateAndHome(self):\n        \"\"\"Utility function that combines activate and home.\n        \"\"\"\n        self.ActivateRobot()\n        self.Home()", "hash": "2da8ce8a018b", "chunk_type": "method", "node_type": "function_definition", "signature": "ActivateAndHome(self)", "docstring": "Utility function that combines activate and home.", "chunk_size_bytes": 148, "original_size_bytes": 149, "start_byte": 48058, "end_byte": 48207}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:c32331488dc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "PauseMotion", "qualified_name": "Robot.PauseMotion", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1223, 1232], "text": "def PauseMotion(self):\n        \"\"\"Immediately pause robot motion.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('PauseMotion')\n        if self._enable_synchronous_mode:\n            self._robot_events.on_motion_paused.wait(timeout=self.default_timeout)", "hash": "c32331488dc3", "chunk_type": "method", "node_type": "function_definition", "signature": "PauseMotion(self)", "docstring": "Immediately pause robot motion.", "chunk_size_bytes": 320, "original_size_bytes": 322, "start_byte": 48242, "end_byte": 48564}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4dd6a6cdfb7c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ResumeMotion", "qualified_name": "Robot.ResumeMotion", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1235, 1244], "text": "def ResumeMotion(self):\n        \"\"\"Un-pause robot motion.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('ResumeMotion')\n        if self._enable_synchronous_mode:\n            self.WaitMotionResumed(timeout=self.default_timeout)", "hash": "4dd6a6cdfb7c", "chunk_type": "method", "node_type": "function_definition", "signature": "ResumeMotion(self)", "docstring": "Un-pause robot motion.", "chunk_size_bytes": 295, "original_size_bytes": 297, "start_byte": 48599, "end_byte": 48896}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:f3abe28a103b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "DeactivateRobot", "qualified_name": "Robot.DeactivateRobot", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1247, 1256], "text": "def DeactivateRobot(self):\n        \"\"\"Deactivate the robot.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('DeactivateRobot')\n        if self._enable_synchronous_mode:\n            self.WaitDeactivated()", "hash": "f3abe28a103b", "chunk_type": "method", "node_type": "function_definition", "signature": "DeactivateRobot(self)", "docstring": "Deactivate the robot.", "chunk_size_bytes": 270, "original_size_bytes": 272, "start_byte": 48931, "end_byte": 49203}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:2c368bdbba53", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ClearMotion", "qualified_name": "Robot.ClearMotion", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1259, 1276], "text": "def ClearMotion(self):\n        \"\"\"Clear the motion queue, includes implicit PauseMotion command.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._clear_motion_requests += 1\n            self._robot_events.on_motion_cleared.clear()\n            self._send_command('ClearMotion')\n            self._invalidate_checkpoints()\n        if self._enable_synchronous_mode:\n            self.WaitMotionCleared(timeout=self.default_timeout)", "hash": "2c368bdbba53", "chunk_type": "method", "node_type": "function_definition", "signature": "ClearMotion(self)", "docstring": "Clear the motion queue, includes implicit PauseMotion command.", "chunk_size_bytes": 478, "original_size_bytes": 668, "start_byte": 49238, "end_byte": 49906}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:dff086d53644", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveJoints", "qualified_name": "Robot.MoveJoints", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1279, 1291], "text": "def MoveJoints(self, *args):\n        \"\"\"Move the robot by specifying each joint's target angular position.\n        Parameters\n        ----------\n        joint_1...joint_n : float\n            Desired joint angles in degrees.\n        \"\"\"\n        if len(args) != self._robot_info.num_joints:\n            raise ValueError('Incorrect number of joints sent to command.')\n        self._send_motion_command('MoveJoints', args)", "hash": "dff086d53644", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveJoints(self, *args)", "docstring": "Move the robot by specifying each joint's target angular position.\n\n        Parameters\n        ----------\n        joint_1...joint_n : float\n            Desired joint angles in degrees.", "chunk_size_bytes": 418, "original_size_bytes": 421, "start_byte": 49941, "end_byte": 50362}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:257d708f1f6f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveJointsRel", "qualified_name": "Robot.MoveJointsRel", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1294, 1306], "text": "def MoveJointsRel(self, *args):\n        \"\"\"Move the robot relative to current position by specifying each joint's offset angular position.\n        Parameters\n        ----------\n        joint_1...joint_n : float\n            Desired joint angles offsets in degrees.\n        \"\"\"\n        if len(args) != self._robot_info.num_joints:\n            raise ValueError('Incorrect number of joints sent to command.')\n        self._send_motion_command('MoveJointsRel', args)", "hash": "257d708f1f6f", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveJointsRel(self, *args)", "docstring": "Move the robot relative to current position by specifying each joint's offset angular position.\n\n        Parameters\n        ----------\n        joint_1...joint_n : float\n            Desired joint angles offsets in degrees.", "chunk_size_bytes": 461, "original_size_bytes": 464, "start_byte": 50397, "end_byte": 50861}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:858367a6f183", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveJointsVel", "qualified_name": "Robot.MoveJointsVel", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1309, 1321], "text": "def MoveJointsVel(self, *args):\n        \"\"\"Moves joints to at desired velocities.\n        Parameters\n        ----------\n        joint_1...joint_n : float\n            Desired joint velocities in degrees per second.\n        \"\"\"\n        if len(args) != self._robot_info.num_joints:\n            raise ValueError('Incorrect number of joints sent to command.')\n        self._send_motion_command('MoveJointsVel', args)", "hash": "858367a6f183", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveJointsVel(self, *args)", "docstring": "Moves joints to at desired velocities.\n\n        Parameters\n        ----------\n        joint_1...joint_n : float\n            Desired joint velocities in degrees per second.", "chunk_size_bytes": 411, "original_size_bytes": 414, "start_byte": 50896, "end_byte": 51310}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4dfdb5750ff9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MovePose", "qualified_name": "Robot.MovePose", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1324, 1335], "text": "def MovePose(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Move robot's tool to an absolute Cartesian position (non-linear move, but all joints arrive simultaneously).\n        Parameters\n        ----------\n        x, y, z : float\n            Desired end effector coordinates in mm.\n        alpha, beta, gamma\n            Desired end effector orientation in degrees.\n        \"\"\"\n        self._send_motion_command('MovePose', [x, y, z, alpha, beta, gamma])", "hash": "4dfdb5750ff9", "chunk_type": "method", "node_type": "function_definition", "signature": "MovePose(self, x, y, z, alpha, beta, gamma)", "docstring": "Move robot's tool to an absolute Cartesian position (non-linear move, but all joints arrive simultaneously).\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired end effector coordinates in mm.\n        alpha, beta, gamma\n            Desired end effector orientation in degrees.", "chunk_size_bytes": 455, "original_size_bytes": 457, "start_byte": 51345, "end_byte": 51802}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:0423b92bd4e7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveLin", "qualified_name": "Robot.MoveLin", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1338, 1349], "text": "def MoveLin(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Linearly move robot's tool to an absolute Cartesian position.\n        Parameters\n        ----------\n        x, y, z : float\n            Desired end effector coordinates in mm.\n        alpha, beta, gamma\n            Desired end effector orientation in degrees.\n        \"\"\"\n        self._send_motion_command('MoveLin', [x, y, z, alpha, beta, gamma])", "hash": "0423b92bd4e7", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveLin(self, x, y, z, alpha, beta, gamma)", "docstring": "Linearly move robot's tool to an absolute Cartesian position.\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired end effector coordinates in mm.\n        alpha, beta, gamma\n            Desired end effector orientation in degrees.", "chunk_size_bytes": 406, "original_size_bytes": 408, "start_byte": 51837, "end_byte": 52245}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:f3055b51f025", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveLinRelTRF", "qualified_name": "Robot.MoveLinRelTRF", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1352, 1363], "text": "def MoveLinRelTRF(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Linearly move robot's tool to a Cartesian position relative to current TRF position.\n        Parameters\n        ----------\n        x, y, z : float\n            Desired displacement in mm.\n        alpha, beta, gamma\n            Desired orientation change in deg.\n        \"\"\"\n        self._send_motion_command('MoveLinRelTRF', [x, y, z, alpha, beta, gamma])", "hash": "f3055b51f025", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveLinRelTRF(self, x, y, z, alpha, beta, gamma)", "docstring": "Linearly move robot's tool to a Cartesian position relative to current TRF position.\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired displacement in mm.\n        alpha, beta, gamma\n            Desired orientation change in deg.", "chunk_size_bytes": 419, "original_size_bytes": 421, "start_byte": 52280, "end_byte": 52701}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:676542671643", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveLinRelWRF", "qualified_name": "Robot.MoveLinRelWRF", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1366, 1378], "text": "def MoveLinRelWRF(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Linearly move robot's tool to a Cartesian position relative to a reference frame that has the same\n        orientation.\n        Parameters\n        ----------\n        x, y, z : float\n            Desired displacement in mm.\n        alpha, beta, gamma\n            Desired orientation change in deg.\n        \"\"\"\n        self._send_motion_command('MoveLinRelWRF', [x, y, z, alpha, beta, gamma])", "hash": "676542671643", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveLinRelWRF(self, x, y, z, alpha, beta, gamma)", "docstring": "Linearly move robot's tool to a Cartesian position relative to a reference frame that has the same\n        orientation.\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired displacement in mm.\n        alpha, beta, gamma\n            Desired orientation change in deg.", "chunk_size_bytes": 454, "original_size_bytes": 456, "start_byte": 52736, "end_byte": 53192}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:b6cc1e23e6c5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveLinVelTRF", "qualified_name": "Robot.MoveLinVelTRF", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1381, 1394], "text": "def MoveLinVelTRF(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Move robot's by Cartesian velocity relative to the TRF.\n           Joints will move for a time controlled by velocity timeout (SetVelTimeout).\n        Parameters\n        ----------\n        x, y, z : float\n            Desired velocity in mm/s.\n        alpha, beta, gamma\n            Desired angular velocity in degrees/s.\n        \"\"\"\n        self._send_motion_command('MoveLinVelTRF', [x, y, z, alpha, beta, gamma])", "hash": "b6cc1e23e6c5", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveLinVelTRF(self, x, y, z, alpha, beta, gamma)", "docstring": "Move robot's by Cartesian velocity relative to the TRF.\n\n           Joints will move for a time controlled by velocity timeout (SetVelTimeout).\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired velocity in mm/s.\n        alpha, beta, gamma\n            Desired angular velocity in degrees/s.", "chunk_size_bytes": 479, "original_size_bytes": 482, "start_byte": 53227, "end_byte": 53709}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:7e52b9de84da", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveLinVelWRF", "qualified_name": "Robot.MoveLinVelWRF", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1397, 1410], "text": "def MoveLinVelWRF(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Move robot's by Cartesian velocity relative to the WRF.\n           Joints will move for a time controlled by velocity timeout (SetVelTimeout).\n        Parameters\n        ----------\n        x, y, z : float\n            Desired velocity in mm/s.\n        alpha, beta, gamma\n            Desired angular velocity in degrees/s.\n        \"\"\"\n        self._send_motion_command('MoveLinVelWRF', [x, y, z, alpha, beta, gamma])", "hash": "7e52b9de84da", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveLinVelWRF(self, x, y, z, alpha, beta, gamma)", "docstring": "Move robot's by Cartesian velocity relative to the WRF.\n\n           Joints will move for a time controlled by velocity timeout (SetVelTimeout).\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired velocity in mm/s.\n        alpha, beta, gamma\n            Desired angular velocity in degrees/s.", "chunk_size_bytes": 479, "original_size_bytes": 482, "start_byte": 53744, "end_byte": 54226}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:5e1348fbbb7b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetVelTimeout", "qualified_name": "Robot.SetVelTimeout", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1413, 1424], "text": "def SetVelTimeout(self, t):\n        \"\"\"Maximum time the robot will continue to move after a velocity move command was sent.\n        (Can be stopped earlier by sending a velocity command with 0 velocity values.)\n        Parameters\n        ----------\n        t : float\n            Desired duration for velocity-mode motion commands.\n        \"\"\"\n        self._send_motion_command('SetVelTimeout', [t])", "hash": "5e1348fbbb7b", "chunk_type": "method", "node_type": "function_definition", "signature": "SetVelTimeout(self, t)", "docstring": "Maximum time the robot will continue to move after a velocity move command was sent.\n\n        (Can be stopped earlier by sending a velocity command with 0 velocity values.)\n\n        Parameters\n        ----------\n        t : float\n            Desired duration for velocity-mode motion commands.", "chunk_size_bytes": 398, "original_size_bytes": 401, "start_byte": 54261, "end_byte": 54662}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:83ae970787a6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetConf", "qualified_name": "Robot.SetConf", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1427, 1440], "text": "def SetConf(self, shoulder, elbow, wrist):\n        \"\"\"Manually set inverse kinematics options (and disable auto-conf).\n        Parameters\n        ----------\n        shoulder : +1 or -1\n            Shoulder inverse kinematics parameter.\n        elbow : +1 or -1\n            Elbow inverse kinematics parameter.\n        wrist : +1 or -1\n            Wrist inverse kinematics parameter.\n        \"\"\"\n        self._send_motion_command('SetConf', [shoulder, elbow, wrist])", "hash": "83ae970787a6", "chunk_type": "method", "node_type": "function_definition", "signature": "SetConf(self, shoulder, elbow, wrist)", "docstring": "Manually set inverse kinematics options (and disable auto-conf).\n\n        Parameters\n        ----------\n        shoulder : +1 or -1\n            Shoulder inverse kinematics parameter.\n        elbow : +1 or -1\n            Elbow inverse kinematics parameter.\n        wrist : +1 or -1\n            Wrist inverse kinematics parameter.", "chunk_size_bytes": 464, "original_size_bytes": 466, "start_byte": 54697, "end_byte": 55163}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4fc079faf847", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetAutoConf", "qualified_name": "Robot.SetAutoConf", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1443, 1452], "text": "def SetAutoConf(self, e):\n        \"\"\"Enable or disable auto-conf (automatic selection of inverse kinematics options).\n        Parameters\n        ----------\n        e : boolean\n            If true, robot will automatically choose the best configuation for the desired pose.\n        \"\"\"\n        self._send_motion_command('SetAutoConf', [int(e)])", "hash": "4fc079faf847", "chunk_type": "method", "node_type": "function_definition", "signature": "SetAutoConf(self, e)", "docstring": "Enable or disable auto-conf (automatic selection of inverse kinematics options).\n\n        Parameters\n        ----------\n        e : boolean\n            If true, robot will automatically choose the best configuation for the desired pose.", "chunk_size_bytes": 343, "original_size_bytes": 345, "start_byte": 55198, "end_byte": 55543}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4783d0cae1f2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetConfTurn", "qualified_name": "Robot.SetConfTurn", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1455, 1464], "text": "def SetConfTurn(self, n):\n        \"\"\"Manually set the last joint turn configuration parameter.\n        Parameters\n        ----------\n        n : integer\n            The turn number for joint 6.\n        \"\"\"\n        self._send_motion_command('SetConfTurn', [n])", "hash": "4783d0cae1f2", "chunk_type": "method", "node_type": "function_definition", "signature": "SetConfTurn(self, n)", "docstring": "Manually set the last joint turn configuration parameter.\n\n        Parameters\n        ----------\n        n : integer\n            The turn number for joint 6.", "chunk_size_bytes": 259, "original_size_bytes": 261, "start_byte": 55578, "end_byte": 55839}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:a432bad27ea2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetAutoConfTurn", "qualified_name": "Robot.SetAutoConfTurn", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1467, 1476], "text": "def SetAutoConfTurn(self, e):\n        \"\"\"Enable or disable auto-conf (automatic selection of inverse kinematics options) for joint 6..\n        Parameters\n        ----------\n        e : boolean\n            If true, robot will automatically choose the best configuation for the desired pose.\n        \"\"\"\n        self._send_motion_command('SetAutoConfTurn', [int(e)])", "hash": "a432bad27ea2", "chunk_type": "method", "node_type": "function_definition", "signature": "SetAutoConfTurn(self, e)", "docstring": "Enable or disable auto-conf (automatic selection of inverse kinematics options) for joint 6..\n\n        Parameters\n        ----------\n        e : boolean\n            If true, robot will automatically choose the best configuation for the desired pose.", "chunk_size_bytes": 364, "original_size_bytes": 366, "start_byte": 55874, "end_byte": 56240}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:2ecf876f4a1a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetBlending", "qualified_name": "Robot.SetBlending", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1479, 1490], "text": "def SetBlending(self, p):\n        \"\"\"Set percentage of blending between consecutive movements in the same mode (velocity or cartesian).\n        Note: There can't be blending between joint mode and Cartesian mode moves.\n        Parameters\n        ----------\n        p : float\n            Percentage blending between actions.\n        \"\"\"\n        self._send_motion_command('SetBlending', [p])", "hash": "2ecf876f4a1a", "chunk_type": "method", "node_type": "function_definition", "signature": "SetBlending(self, p)", "docstring": "Set percentage of blending between consecutive movements in the same mode (velocity or cartesian).\n\n        Note: There can't be blending between joint mode and Cartesian mode moves.\n\n        Parameters\n        ----------\n        p : float\n            Percentage blending between actions.", "chunk_size_bytes": 389, "original_size_bytes": 392, "start_byte": 56275, "end_byte": 56667}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:2ad2fb3b7668", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetCartAcc", "qualified_name": "Robot.SetCartAcc", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1493, 1502], "text": "def SetCartAcc(self, p):\n        \"\"\"Set target acceleration (linear and angular) during MoveLin commands.\n        Parameters\n        ----------\n        p : float\n            Percentage of maximum acceleration.\n        \"\"\"\n        self._send_motion_command('SetCartAcc', [p])", "hash": "2ad2fb3b7668", "chunk_type": "method", "node_type": "function_definition", "signature": "SetCartAcc(self, p)", "docstring": "Set target acceleration (linear and angular) during MoveLin commands.\n\n        Parameters\n        ----------\n        p : float\n            Percentage of maximum acceleration.", "chunk_size_bytes": 274, "original_size_bytes": 276, "start_byte": 56702, "end_byte": 56978}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:e457233e14f3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetCartAngVel", "qualified_name": "Robot.SetCartAngVel", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1505, 1514], "text": "def SetCartAngVel(self, w):\n        \"\"\"Set maximum angular velocity during MoveLin commands.\n        Parameters\n        ----------\n        p : float\n            Maximum angular velocity in deg/s.\n        \"\"\"\n        self._send_motion_command('SetCartAngVel', [w])", "hash": "e457233e14f3", "chunk_type": "method", "node_type": "function_definition", "signature": "SetCartAngVel(self, w)", "docstring": "Set maximum angular velocity during MoveLin commands.\n\n        Parameters\n        ----------\n        p : float\n            Maximum angular velocity in deg/s.", "chunk_size_bytes": 263, "original_size_bytes": 265, "start_byte": 57013, "end_byte": 57278}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:9f004f377679", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetCartLinVel", "qualified_name": "Robot.SetCartLinVel", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1517, 1528], "text": "def SetCartLinVel(self, w):\n        \"\"\"Set maximum linear velocity during MoveLin commands.\n        Note: Actual linear velocity may be lower if necessary to avoid exceeding maximum angular velocity.\n        Parameters\n        ----------\n        p : float\n            Maximum angular velocity in deg/s.\n        \"\"\"\n        self._send_motion_command('SetCartLinVel', [w])", "hash": "9f004f377679", "chunk_type": "method", "node_type": "function_definition", "signature": "SetCartLinVel(self, w)", "docstring": "Set maximum linear velocity during MoveLin commands.\n\n        Note: Actual linear velocity may be lower if necessary to avoid exceeding maximum angular velocity.\n\n        Parameters\n        ----------\n        p : float\n            Maximum angular velocity in deg/s.", "chunk_size_bytes": 370, "original_size_bytes": 373, "start_byte": 57313, "end_byte": 57686}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:66a9f01fa7c0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GripperOpen", "qualified_name": "Robot.GripperOpen", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1531, 1535], "text": "def GripperOpen(self):\n        \"\"\"Open the gripper.\n        \"\"\"\n        self._send_motion_command('GripperOpen')", "hash": "66a9f01fa7c0", "chunk_type": "method", "node_type": "function_definition", "signature": "GripperOpen(self)", "docstring": "Open the gripper.", "chunk_size_bytes": 112, "original_size_bytes": 113, "start_byte": 57721, "end_byte": 57834}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:a6b356bb6fea", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GripperClose", "qualified_name": "Robot.GripperClose", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1538, 1542], "text": "def GripperClose(self):\n        \"\"\"Close the gripper.\n        \"\"\"\n        self._send_motion_command('GripperClose')", "hash": "a6b356bb6fea", "chunk_type": "method", "node_type": "function_definition", "signature": "GripperClose(self)", "docstring": "Close the gripper.", "chunk_size_bytes": 115, "original_size_bytes": 116, "start_byte": 57869, "end_byte": 57985}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:24ebbb195303", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoveGripper", "qualified_name": "Robot.MoveGripper", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1545, 1559], "text": "def MoveGripper(self, state=GRIPPER_OPEN):\n        \"\"\"Open or close the gripper.\n        Corresponds to text API calls \"GripperOpen\" / \"GripperClose\".\n        Parameters\n        ----------\n        state : boolean\n            Open or close the gripper (GRIPPER_OPEN or GRIPPER_CLOSE)\n        \"\"\"\n        if state:\n            self.GripperOpen()\n        else:\n            self.GripperClose()", "hash": "24ebbb195303", "chunk_type": "method", "node_type": "function_definition", "signature": "MoveGripper(self, state=GRIPPER_OPEN)", "docstring": "Open or close the gripper.\n\n        Corresponds to text API calls \"GripperOpen\" / \"GripperClose\".\n\n        Parameters\n        ----------\n        state : boolean\n            Open or close the gripper (GRIPPER_OPEN or GRIPPER_CLOSE)", "chunk_size_bytes": 389, "original_size_bytes": 392, "start_byte": 58020, "end_byte": 58412}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:d785d7db483a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetGripperForce", "qualified_name": "Robot.SetGripperForce", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1562, 1571], "text": "def SetGripperForce(self, p):\n        \"\"\"Set the gripper's force in percent.\n        Parameters\n        ----------\n        p : float\n            The desired force in percent.\n        \"\"\"\n        self._send_motion_command('SetGripperForce', [p])", "hash": "d785d7db483a", "chunk_type": "method", "node_type": "function_definition", "signature": "SetGripperForce(self, p)", "docstring": "Set the gripper's force in percent.\n\n        Parameters\n        ----------\n        p : float\n            The desired force in percent.", "chunk_size_bytes": 244, "original_size_bytes": 246, "start_byte": 58447, "end_byte": 58693}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:d3a3e09e4d20", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetGripperVel", "qualified_name": "Robot.SetGripperVel", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1574, 1583], "text": "def SetGripperVel(self, p):\n        \"\"\"Set the gripper's velocity in percent.\n        Parameters\n        ----------\n        p : float\n            The desired velocity in percent.\n        \"\"\"\n        self._send_motion_command('SetGripperVel', [p])", "hash": "d3a3e09e4d20", "chunk_type": "method", "node_type": "function_definition", "signature": "SetGripperVel(self, p)", "docstring": "Set the gripper's velocity in percent.\n\n        Parameters\n        ----------\n        p : float\n            The desired velocity in percent.", "chunk_size_bytes": 246, "original_size_bytes": 248, "start_byte": 58728, "end_byte": 58976}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:69fcea7e78fc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetJointAcc", "qualified_name": "Robot.SetJointAcc", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1586, 1595], "text": "def SetJointAcc(self, p):\n        \"\"\"Set target joint acceleration during MoveJoints commands.\n        Parameters\n        ----------\n        p : float\n            Target acceleration, in percent.\n        \"\"\"\n        self._send_motion_command('SetJointAcc', [p])", "hash": "69fcea7e78fc", "chunk_type": "method", "node_type": "function_definition", "signature": "SetJointAcc(self, p)", "docstring": "Set target joint acceleration during MoveJoints commands.\n\n        Parameters\n        ----------\n        p : float\n            Target acceleration, in percent.", "chunk_size_bytes": 261, "original_size_bytes": 263, "start_byte": 59011, "end_byte": 59274}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:cd57149a6231", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetJointVel", "qualified_name": "Robot.SetJointVel", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1598, 1607], "text": "def SetJointVel(self, p):\n        \"\"\"Set target joint velocity during MoveJoints commands.\n        Parameters\n        ----------\n        p : float\n            Target joint velocity, in percent.\n        \"\"\"\n        self._send_motion_command('SetJointVel', [p])", "hash": "cd57149a6231", "chunk_type": "method", "node_type": "function_definition", "signature": "SetJointVel(self, p)", "docstring": "Set target joint velocity during MoveJoints commands.\n\n        Parameters\n        ----------\n        p : float\n            Target joint velocity, in percent.", "chunk_size_bytes": 259, "original_size_bytes": 261, "start_byte": 59309, "end_byte": 59570}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:00aea5a8ea88", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetTRF", "qualified_name": "Robot.SetTRF", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1610, 1621], "text": "def SetTRF(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Set the TRF (tool reference frame) Cartesian position.\n        Parameters\n        ----------\n        x, y, z : float\n            Desired reference coordinates in mm.\n        alpha, beta, gamma\n            Desired reference orientation in degrees.\n        \"\"\"\n        self._send_motion_command('SetTRF', [x, y, z, alpha, beta, gamma])", "hash": "00aea5a8ea88", "chunk_type": "method", "node_type": "function_definition", "signature": "SetTRF(self, x, y, z, alpha, beta, gamma)", "docstring": "Set the TRF (tool reference frame) Cartesian position.\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired reference coordinates in mm.\n        alpha, beta, gamma\n            Desired reference orientation in degrees.", "chunk_size_bytes": 391, "original_size_bytes": 393, "start_byte": 59605, "end_byte": 59998}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4c7c7e7e47bf", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetWRF", "qualified_name": "Robot.SetWRF", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1624, 1635], "text": "def SetWRF(self, x, y, z, alpha, beta, gamma):\n        \"\"\"Set the WRF (world reference frame) Cartesian position.\n        Parameters\n        ----------\n        x, y, z : float\n            Desired reference coordinates in mm.\n        alpha, beta, gamma\n            Desired reference orientation in degrees.\n        \"\"\"\n        self._send_motion_command('SetWRF', [x, y, z, alpha, beta, gamma])", "hash": "4c7c7e7e47bf", "chunk_type": "method", "node_type": "function_definition", "signature": "SetWRF(self, x, y, z, alpha, beta, gamma)", "docstring": "Set the WRF (world reference frame) Cartesian position.\n\n        Parameters\n        ----------\n        x, y, z : float\n            Desired reference coordinates in mm.\n        alpha, beta, gamma\n            Desired reference orientation in degrees.", "chunk_size_bytes": 392, "original_size_bytes": 394, "start_byte": 60033, "end_byte": 60427}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:f43ef75983de", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetCheckpoint", "qualified_name": "Robot.SetCheckpoint", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1638, 1655], "text": "def SetCheckpoint(self, n):\n        \"\"\"Set checkpoint with desired id.\n        Parameters\n        ----------\n        n : int\n            Desired checkpoint id.\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            assert MX_CHECKPOINT_ID_MIN <= n <= MX_CHECKPOINT_ID_MAX\n            return self._set_checkpoint_impl(n)", "hash": "f43ef75983de", "chunk_type": "method", "node_type": "function_definition", "signature": "SetCheckpoint(self, n)", "docstring": "Set checkpoint with desired id.\n\n        Parameters\n        ----------\n        n : int\n            Desired checkpoint id.\n\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.", "chunk_size_bytes": 470, "original_size_bytes": 473, "start_byte": 60462, "end_byte": 60935}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:281b8bbda6d5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ExpectExternalCheckpoint", "qualified_name": "Robot.ExpectExternalCheckpoint", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1658, 1675], "text": "def ExpectExternalCheckpoint(self, n):\n        \"\"\"Expect the robot to receive a checkpoint with given id (e.g. from saved program).\n        Parameters\n        ----------\n        n : int\n            Id of expected checkpoint.\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            assert MX_CHECKPOINT_ID_MIN <= n <= MX_CHECKPOINT_ID_MAX\n            return self._set_checkpoint_impl(n, send_to_robot=False)", "hash": "281b8bbda6d5", "chunk_type": "method", "node_type": "function_definition", "signature": "ExpectExternalCheckpoint(self, n)", "docstring": "Expect the robot to receive a checkpoint with given id (e.g. from saved program).\n\n        Parameters\n        ----------\n        n : int\n            Id of expected checkpoint.\n\n        Return\n        ------\n        Checkpoint object\n            Object to use to wait for the checkpoint.", "chunk_size_bytes": 556, "original_size_bytes": 559, "start_byte": 60970, "end_byte": 61529}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:b94da35d7337", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitForAnyCheckpoint", "qualified_name": "Robot.WaitForAnyCheckpoint", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1678, 1699], "text": "def WaitForAnyCheckpoint(self, timeout=None):\n        \"\"\"Pause program execution until any checkpoint has been received from the robot.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the checkpoint (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            if '*' not in self._internal_checkpoints:\n                self._internal_checkpoints['*'] = list()\n            event = InterruptableEvent()\n            self._internal_checkpoints['*'].append(event)\n        return event.wait(timeout=timeout)", "hash": "b94da35d7337", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitForAnyCheckpoint(self, timeout=None)", "docstring": "Pause program execution until any checkpoint has been received from the robot.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the checkpoint (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 713, "original_size_bytes": 717, "start_byte": 61564, "end_byte": 62281}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:3759a2a36cb6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitConnected", "qualified_name": "Robot.WaitConnected", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1702, 1716], "text": "def WaitConnected(self, timeout=None):\n        \"\"\"Pause program execution until robot is disconnected.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_connected.wait(timeout=timeout)", "hash": "3759a2a36cb6", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitConnected(self, timeout=None)", "docstring": "Pause program execution until robot is disconnected.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 419, "original_size_bytes": 422, "start_byte": 62316, "end_byte": 62738}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:685e1b0d74eb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitDisconnected", "qualified_name": "Robot.WaitDisconnected", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1719, 1733], "text": "def WaitDisconnected(self, timeout=None):\n        \"\"\"Pause program execution until the robot is disconnected.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_disconnected.wait(timeout=timeout)", "hash": "685e1b0d74eb", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitDisconnected(self, timeout=None)", "docstring": "Pause program execution until the robot is disconnected.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 429, "original_size_bytes": 432, "start_byte": 62773, "end_byte": 63205}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:9ca145b593af", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitActivated", "qualified_name": "Robot.WaitActivated", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1736, 1750], "text": "def WaitActivated(self, timeout=None):\n        \"\"\"Pause program execution until the robot is activated.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_activated.wait(timeout=timeout)", "hash": "9ca145b593af", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitActivated(self, timeout=None)", "docstring": "Pause program execution until the robot is activated.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 420, "original_size_bytes": 423, "start_byte": 63240, "end_byte": 63663}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:67860708b44d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitDeactivated", "qualified_name": "Robot.WaitDeactivated", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1753, 1767], "text": "def WaitDeactivated(self, timeout=None):\n        \"\"\"Pause program execution until the robot is deactivated.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_deactivated.wait(timeout=timeout)", "hash": "67860708b44d", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitDeactivated(self, timeout=None)", "docstring": "Pause program execution until the robot is deactivated.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 426, "original_size_bytes": 429, "start_byte": 63698, "end_byte": 64127}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:02616e03b6a6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitHomed", "qualified_name": "Robot.WaitHomed", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1770, 1784], "text": "def WaitHomed(self, timeout=None):\n        \"\"\"Pause program execution until the robot is homed.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_homed.wait(timeout=timeout)", "hash": "02616e03b6a6", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitHomed(self, timeout=None)", "docstring": "Pause program execution until the robot is homed.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 408, "original_size_bytes": 411, "start_byte": 64162, "end_byte": 64573}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:ab10b5eca122", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitMotionResumed", "qualified_name": "Robot.WaitMotionResumed", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1787, 1801], "text": "def WaitMotionResumed(self, timeout=None):\n        \"\"\"Pause program execution until the robot motion is resumed.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_motion_resumed.wait(timeout=timeout)", "hash": "ab10b5eca122", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitMotionResumed(self, timeout=None)", "docstring": "Pause program execution until the robot motion is resumed.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 434, "original_size_bytes": 437, "start_byte": 64608, "end_byte": 65045}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:402b17442a33", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitMotionPaused", "qualified_name": "Robot.WaitMotionPaused", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1804, 1818], "text": "def WaitMotionPaused(self, timeout=None):\n        \"\"\"Pause program execution until the robot motion is paused.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_motion_paused.wait(timeout=timeout)", "hash": "402b17442a33", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitMotionPaused(self, timeout=None)", "docstring": "Pause program execution until the robot motion is paused.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 431, "original_size_bytes": 434, "start_byte": 65080, "end_byte": 65514}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:b2ca04d0651c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitMotionCleared", "qualified_name": "Robot.WaitMotionCleared", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1821, 1836], "text": "def WaitMotionCleared(self, timeout=None):\n        \"\"\"Pause program execution until all pending request to clear motion have been acknowledged.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        return self._robot_events.on_motion_cleared.wait(timeout=timeout)", "hash": "b2ca04d0651c", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitMotionCleared(self, timeout=None)", "docstring": "Pause program execution until all pending request to clear motion have been acknowledged.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 465, "original_size_bytes": 469, "start_byte": 65549, "end_byte": 66018}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:2744e1b3e145", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WaitIdle", "qualified_name": "Robot.WaitIdle", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1839, 1865], "text": "def WaitIdle(self, timeout=None):\n        \"\"\"Pause program execution until robot is idle.\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.\n        \"\"\"\n        checkpoint = self._set_checkpoint_internal()\n        start_time = time.time()\n        if not checkpoint.wait(timeout=timeout):\n            return False\n        end_time = time.time()\n        if timeout:\n            remaining_timeout = timeout - (end_time - start_time)\n        else:\n            remaining_timeout = None\n        return self._robot_events.on_end_of_block.wait(timeout=remaining_timeout)", "hash": "2744e1b3e145", "chunk_type": "method", "node_type": "function_definition", "signature": "WaitIdle(self, timeout=None)", "docstring": "Pause program execution until robot is idle.\n\n        Parameters\n        ----------\n        timeout : float\n            Maximum time to spend waiting for the event (in seconds).\n\n        Return\n        ------\n        boolean\n            True if wait was successful, false otherwise.", "chunk_size_bytes": 747, "original_size_bytes": 753, "start_byte": 66053, "end_byte": 66806}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:50601a18373c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ResetError", "qualified_name": "Robot.ResetError", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1868, 1877], "text": "def ResetError(self):\n        \"\"\"Attempt to reset robot error.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('ResetError')\n        if self._enable_synchronous_mode:\n            self._robot_events.on_error_reset.wait()", "hash": "50601a18373c", "chunk_type": "method", "node_type": "function_definition", "signature": "ResetError(self)", "docstring": "Attempt to reset robot error.", "chunk_size_bytes": 286, "original_size_bytes": 288, "start_byte": 66841, "end_byte": 67129}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:ba122dc750dc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ResetPStop", "qualified_name": "Robot.ResetPStop", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1880, 1889], "text": "def ResetPStop(self):\n        \"\"\"Attempt to reset robot pstop.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('ResetPStop')\n        if self._enable_synchronous_mode:\n            self._robot_events.on_p_stop_reset.wait()", "hash": "ba122dc750dc", "chunk_type": "method", "node_type": "function_definition", "signature": "ResetPStop(self)", "docstring": "Attempt to reset robot pstop.", "chunk_size_bytes": 287, "original_size_bytes": 289, "start_byte": 67164, "end_byte": 67453}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:8c3e036cc8b5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Delay", "qualified_name": "Robot.Delay", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1892, 1910], "text": "def Delay(self, t):\n        \"\"\"Set a delay between motion commands.\n        Parameters\n        ----------\n        t : float\n            Desired pause duration in seconds.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            if not self._robot_events.on_homed.is_set():\n                raise InvalidStateError('This command requires robot to be homed.')\n            self._send_command('Delay', [t])\n            if self._enable_synchronous_mode:\n                checkpoint = self._set_checkpoint_internal()\n        if self._enable_synchronous_mode:\n            checkpoint.wait()", "hash": "8c3e036cc8b5", "chunk_type": "method", "node_type": "function_definition", "signature": "Delay(self, t)", "docstring": "Set a delay between motion commands.\n\n        Parameters\n        ----------\n        t : float\n            Desired pause duration in seconds.", "chunk_size_bytes": 619, "original_size_bytes": 622, "start_byte": 67488, "end_byte": 68110}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:c04b95df0747", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SendCustomCommand", "qualified_name": "Robot.SendCustomCommand", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1913, 1940], "text": "def SendCustomCommand(self, command, expected_responses=None):\n        \"\"\"Send custom command to robot.\n        Parameters\n        ----------\n        command : str\n            Desired custom command.\n        expected_responses : None or list of ints.\n            If not none, wait for and return one of the expected responses.\n        Return\n        ------\n        If expected_responses is not None, return an event. The user can use\n        event.wait_for_data() to wait for and get the response message.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            if expected_responses:\n                event_with_data = InterruptableEvent(data=expected_responses)\n                self._custom_response_events.append(event_with_data)\n            self._send_command(command)\n        if expected_responses:\n            return event_with_data", "hash": "c04b95df0747", "chunk_type": "method", "node_type": "function_definition", "signature": "SendCustomCommand(self, command, expected_responses=None)", "docstring": "Send custom command to robot.\n\n        Parameters\n        ----------\n        command : str\n            Desired custom command.\n\n        expected_responses : None or list of ints.\n            If not none, wait for and return one of the expected responses.\n\n        Return\n        ------\n        If expected_responses is not None, return an event. The user can use\n        event.wait_for_data() to wait for and get the response message.", "chunk_size_bytes": 877, "original_size_bytes": 884, "start_byte": 68145, "end_byte": 69029}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:5fe95d278300", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "StartOfflineProgram", "qualified_name": "Robot.StartOfflineProgram", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1943, 1966], "text": "def StartOfflineProgram(self, n, timeout=None):\n        \"\"\"Start an offline program.\n        Offline programs need to be recorded using the robot's Web Portal (or text API).\n        This API can only start an already recorded offline program.\n        Callback on_offline_program_state will indicate when program is started or not.\n        Parameters\n        ----------\n        n : int\n            Id of offline program to start.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._robot_events.on_offline_program_started.clear()\n            self._send_command('StartProgram', [n])\n        if self._enable_synchronous_mode:\n            try:\n                self._robot_events.on_offline_program_started.wait(timeout=timeout)\n            except InterruptException:\n                raise InvalidStateError('Offline program start not confirmed. Does program {} exist?'.format(n))", "hash": "5fe95d278300", "chunk_type": "method", "node_type": "function_definition", "signature": "StartOfflineProgram(self, n, timeout=None)", "docstring": "Start an offline program.\n\n        Offline programs need to be recorded using the robot's Web Portal (or text API).\n        This API can only start an already recorded offline program.\n        Callback on_offline_program_state will indicate when program is started or not.\n\n        Parameters\n        ----------\n        n : int\n            Id of offline program to start.", "chunk_size_bytes": 925, "original_size_bytes": 930, "start_byte": 69064, "end_byte": 69994}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:ef108d0722e6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GetJoints", "qualified_name": "Robot.GetJoints", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [1971, 2011], "text": "def GetJoints(self, include_timestamp=False, synchronous_update=False, timeout=None):\n        \"\"\"Returns the current joint positions of the robot.\n        Uses RT commands if possible, otherwise uses legacy versions.\n        Parameters\n        ----------\n        include_timestamp : bool\n            If true, return a TimestampedData object, otherwise just return joints angles.\n        synchronous_update : bool\n            If true, requests updated joints positions and waits for response, else uses last known positions.\n        timeout : float\n            Maximum time in second to wait for forced update.\n        Return\n        ------\n        TimestampedData or list of floats\n            Returns joint positions in degrees.\n        \"\"\"\n        if synchronous_update:\n            with self._main_lock:\n                self._check_internal_states()\n                if self._robot_events.on_joints_updated.is_set():\n                    self._robot_events.on_joints_updated.clear()\n                    if self._robot_info.rt_message_capable:\n                        self._send_command('GetRtJointPos')\n                    else:\n                        self._send_command('GetJoints')\n            if not self._robot_events.on_joints_updated.wait(timeout=timeout):\n                raise TimeoutError\n        with self._main_lock:\n            if include_timestamp:\n                if not self._robot_info.rt_message_capable:\n                    raise InvalidStateError('Cannot provide timestamp with current robot firmware or model.')\n                else:\n                    return copy.deepcopy(self._robot_state.target_joint_positions)\n            return copy.deepcopy(self._robot_state.target_joint_positions.data)", "hash": "ef108d0722e6", "chunk_type": "method", "node_type": "function_definition", "signature": "GetJoints(self, include_timestamp=False, synchronous_update=False, timeout=None)", "docstring": "Returns the current joint positions of the robot.\n\n        Uses RT commands if possible, otherwise uses legacy versions.\n\n        Parameters\n        ----------\n        include_timestamp : bool\n            If true, return a TimestampedData object, otherwise just return joints angles.\n        synchronous_update : bool\n            If true, requests updated joints positions and waits for response, else uses last known positions.\n        timeout : float\n            Maximum time in second to wait for forced update.\n\n        Return\n        ------\n        TimestampedData or list of floats\n            Returns joint positions in degrees.", "chunk_size_bytes": 1718, "original_size_bytes": 1725, "start_byte": 70059, "end_byte": 71784}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:6bdfc082c08b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GetPose", "qualified_name": "Robot.GetPose", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2014, 2053], "text": "def GetPose(self, include_timestamp=False, synchronous_update=False, timeout=None):\n        \"\"\"Returns the current end-effector pose of the robot. WARNING: NOT UNIQUE.\n        Parameters\n        ----------\n        include_timestamp : bool\n            If true, return a TimestampedData object, otherwise just return joints angles.\n        synchronous_update : bool\n            If true, requests updated pose and waits for response, else uses last know pose.\n        timeout : float\n            Maximum time in second to wait for forced update.\n        Return\n        ------\n        TimestampedData or list of floats\n            Returns end-effector pose [x, y, z, alpha, beta, gamma].\n        \"\"\"\n        if synchronous_update:\n            with self._main_lock:\n                self._check_internal_states()\n                if self._robot_events.on_pose_updated.is_set():\n                    self._robot_events.on_pose_updated.clear()\n                    if self._robot_info.rt_message_capable:\n                        self._send_command('GetRtCartPos')\n                    else:\n                        self._send_command('GetPose')\n            if not self._robot_events.on_pose_updated.wait(timeout=timeout):\n                raise TimeoutError\n        with self._main_lock:\n            if include_timestamp:\n                if not self._robot_info.rt_message_capable:\n                    raise InvalidStateError('Cannot provide timestamp with current robot firmware or model.')\n                else:\n                    return copy.deepcopy(self._robot_state.target_end_effector_pose)\n            return copy.deepcopy(self._robot_state.target_end_effector_pose.data)", "hash": "6bdfc082c08b", "chunk_type": "method", "node_type": "function_definition", "signature": "GetPose(self, include_timestamp=False, synchronous_update=False, timeout=None)", "docstring": "Returns the current end-effector pose of the robot. WARNING: NOT UNIQUE.\n\n        Parameters\n        ----------\n        include_timestamp : bool\n            If true, return a TimestampedData object, otherwise just return joints angles.\n        synchronous_update : bool\n            If true, requests updated pose and waits for response, else uses last know pose.\n        timeout : float\n            Maximum time in second to wait for forced update.\n\n        Return\n        ------\n        TimestampedData or list of floats\n            Returns end-effector pose [x, y, z, alpha, beta, gamma].", "chunk_size_bytes": 1667, "original_size_bytes": 1674, "start_byte": 71819, "end_byte": 73493}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:0c1ad4fbdc9d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GetConf", "qualified_name": "Robot.GetConf", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2056, 2085], "text": "def GetConf(self, include_timestamp=False, synchronous_update=False, timeout=None):\n        \"\"\"Get robot's current (physical) inverse-kinematics configuration.\n        Returns\n        -------\n        list of ints (timestmap optional)\n            Configuration status of robot.\n        \"\"\"\n        if synchronous_update:\n            with self._main_lock:\n                self._check_internal_states()\n                if self._robot_events.on_conf_updated.is_set():\n                    self._robot_events.on_conf_updated.clear()\n                    if self._robot_info.rt_message_capable:\n                        self._send_command('GetRtConf')\n                    else:\n                        self._send_command('GetConf')\n            if not self._robot_events.on_conf_updated.wait(timeout=timeout):\n                raise TimeoutError\n        with self._main_lock:\n            if include_timestamp:\n                if not self._robot_info.rt_message_capable:\n                    raise InvalidStateError('Cannot provide timestamp with current robot firmware or model.')\n                else:\n                    return copy.deepcopy(self._robot_state.target_joint_configurations)\n            return copy.deepcopy(self._robot_state.target_joint_configurations.data)", "hash": "0c1ad4fbdc9d", "chunk_type": "method", "node_type": "function_definition", "signature": "GetConf(self, include_timestamp=False, synchronous_update=False, timeout=None)", "docstring": "Get robot's current (physical) inverse-kinematics configuration.\n\n        Returns\n        -------\n        list of ints (timestmap optional)\n            Configuration status of robot.", "chunk_size_bytes": 1263, "original_size_bytes": 1268, "start_byte": 73528, "end_byte": 74796}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:d494e2f983c8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GetConfTurn", "qualified_name": "Robot.GetConfTurn", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2088, 2117], "text": "def GetConfTurn(self, include_timestamp=False, synchronous_update=False, timeout=None):\n        \"\"\"Get robot's current (physical) last-joint turn number.\n        Returns\n        -------\n        int (timestamp optional)\n            Turn number of last joint.\n        \"\"\"\n        if synchronous_update:\n            with self._main_lock:\n                self._check_internal_states()\n                if self._robot_events.on_conf_turn_updated.is_set():\n                    self._robot_events.on_conf_turn_updated.clear()\n                    if self._robot_info.rt_message_capable:\n                        self._send_command('GetRtConfTurn')\n                    else:\n                        self._send_command('GetConfTurn')\n            if not self._robot_events.on_conf_turn_updated.wait(timeout=timeout):\n                raise TimeoutError\n        with self._main_lock:\n            if include_timestamp:\n                if not self._robot_info.rt_message_capable:\n                    raise InvalidStateError('Cannot provide timestamp with current robot firmware or model.')\n                else:\n                    return copy.deepcopy(self._robot_state.target_last_joint_turn)\n            return copy.deepcopy(self._robot_state.target_last_joint_turn.data[0])", "hash": "d494e2f983c8", "chunk_type": "method", "node_type": "function_definition", "signature": "GetConfTurn(self, include_timestamp=False, synchronous_update=False, timeout=None)", "docstring": "Get robot's current (physical) last-joint turn number.\n\n        Returns\n        -------\n        int (timestamp optional)\n            Turn number of last joint.", "chunk_size_bytes": 1260, "original_size_bytes": 1265, "start_byte": 74831, "end_byte": 76096}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4f33d0414a06", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetMonitoringInterval", "qualified_name": "Robot.SetMonitoringInterval", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2120, 2131], "text": "def SetMonitoringInterval(self, t):\n        \"\"\"Sets the rate at which the monitoring port sends data.\n        Parameters\n        ----------\n        t : float\n            Monitoring interval duration in seconds.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('SetMonitoringInterval', [t])", "hash": "4f33d0414a06", "chunk_type": "method", "node_type": "function_definition", "signature": "SetMonitoringInterval(self, t)", "docstring": "Sets the rate at which the monitoring port sends data.\n\n        Parameters\n        ----------\n        t : float\n            Monitoring interval duration in seconds.", "chunk_size_bytes": 355, "original_size_bytes": 357, "start_byte": 76131, "end_byte": 76488}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:279f0c829391", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetRealTimeMonitoring", "qualified_name": "Robot.SetRealTimeMonitoring", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2134, 2149], "text": "def SetRealTimeMonitoring(self, events):\n        \"\"\"Configure which real-time monitoring events to enable.\n        Parameters\n        ----------\n        args : list of event IDs\n            List of event IDs to enable. For instance: events=[MX_ST_RT_NC_JOINT_POS, MX_ST_RT_NC_CART_POS] enables the\n            target joint positions and target end effector pose messages. Can also use events='all' to enable all.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            if isinstance(events, list):\n                self._send_command('SetRealTimeMonitoring', events)\n            else:\n                self._send_command('SetRealTimeMonitoring', [events])", "hash": "279f0c829391", "chunk_type": "method", "node_type": "function_definition", "signature": "SetRealTimeMonitoring(self, events)", "docstring": "Configure which real-time monitoring events to enable.\n\n        Parameters\n        ----------\n        args : list of event IDs\n            List of event IDs to enable. For instance: events=[MX_ST_RT_NC_JOINT_POS, MX_ST_RT_NC_CART_POS] enables the\n            target joint positions and target end effector pose messages. Can also use events='all' to enable all.", "chunk_size_bytes": 693, "original_size_bytes": 695, "start_byte": 76523, "end_byte": 77218}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:b4767b6445bd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SetRTC", "qualified_name": "Robot.SetRTC", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2152, 2163], "text": "def SetRTC(self, t):\n        \"\"\"Sets the rate at which the monitoring port sends data.\n        Parameters\n        ----------\n        t : int\n            Unix epoch time (seconds since 00:00:00 UTC Jan 1, 1970).\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('SetRTC', [t])", "hash": "b4767b6445bd", "chunk_type": "method", "node_type": "function_definition", "signature": "SetRTC(self, t)", "docstring": "Sets the rate at which the monitoring port sends data.\n\n        Parameters\n        ----------\n        t : int\n            Unix epoch time (seconds since 00:00:00 UTC Jan 1, 1970).", "chunk_size_bytes": 340, "original_size_bytes": 342, "start_byte": 77253, "end_byte": 77595}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4a5891a286ab", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ActivateSim", "qualified_name": "Robot.ActivateSim", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2166, 2172], "text": "def ActivateSim(self):\n        \"\"\"Enables simulation mode. Motors don't move, but commands will be processed.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('ActivateSim')", "hash": "4a5891a286ab", "chunk_type": "method", "node_type": "function_definition", "signature": "ActivateSim(self)", "docstring": "Enables simulation mode. Motors don't move, but commands will be processed.", "chunk_size_bytes": 239, "original_size_bytes": 240, "start_byte": 77630, "end_byte": 77870}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:9be67fa0cd15", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "DeactivateSim", "qualified_name": "Robot.DeactivateSim", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2175, 2181], "text": "def DeactivateSim(self):\n        \"\"\"Disables simulation mode. Motors don't move, but commands will be processed.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            self._send_command('DeactivateSim')", "hash": "9be67fa0cd15", "chunk_type": "method", "node_type": "function_definition", "signature": "DeactivateSim(self)", "docstring": "Disables simulation mode. Motors don't move, but commands will be processed.", "chunk_size_bytes": 244, "original_size_bytes": 245, "start_byte": 77905, "end_byte": 78150}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:141f3569a2a8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ActivateBrakes", "qualified_name": "Robot.ActivateBrakes", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2184, 2207], "text": "def ActivateBrakes(self, activated=True):\n        \"\"\"Enable/disable the brakes. These commands are only available when the robot is deactivated.\n        By default, brakes are enabled until robot is activated (brakes are automatically disabled upon activation).\n        Corresponds to text API calls \"BrakesOn\" / \"BrakesOff\".\n        Parameters\n        ----------\n        activated : bool\n            Engage brakes if true, otherwise disengage brakes.\n        \"\"\"\n        with self._main_lock:\n            self._check_internal_states()\n            if activated:\n                self._send_command('BrakesOn')\n            else:\n                self._send_command('BrakesOff')\n        if self._enable_synchronous_mode:\n            if activated:\n                self._robot_events.on_brakes_activated.wait()\n            else:\n                self._robot_events.on_brakes_deactivated.wait()", "hash": "141f3569a2a8", "chunk_type": "method", "node_type": "function_definition", "signature": "ActivateBrakes(self, activated=True)", "docstring": "Enable/disable the brakes. These commands are only available when the robot is deactivated.\n\n        By default, brakes are enabled until robot is activated (brakes are automatically disabled upon activation).\n        Corresponds to text API calls \"BrakesOn\" / \"BrakesOff\".\n\n        Parameters\n        ----------\n        activated : bool\n            Engage brakes if true, otherwise disengage brakes.", "chunk_size_bytes": 886, "original_size_bytes": 890, "start_byte": 78185, "end_byte": 79075}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:f3411eef6fd4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GetRobotInfo", "qualified_name": "Robot.GetRobotInfo", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2209, 2219], "text": "def GetRobotInfo(self):\n        \"\"\"Return a copy of the known robot information.\n        Return\n        ------\n        RobotInfo\n            Object containing robot information.\n        \"\"\"\n        with self._main_lock:\n            return copy.deepcopy(self._robot_info)", "hash": "f3411eef6fd4", "chunk_type": "method", "node_type": "function_definition", "signature": "GetRobotInfo(self)", "docstring": "Return a copy of the known robot information.\n\n        Return\n        ------\n        RobotInfo\n            Object containing robot information.", "chunk_size_bytes": 270, "original_size_bytes": 272, "start_byte": 79081, "end_byte": 79353}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:ec283fbbac6c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GetRobotState", "qualified_name": "Robot.GetRobotState", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2221, 2231], "text": "def GetRobotState(self):\n        \"\"\"Return a copy of the current robot state.\n        Return\n        ------\n        RobotState\n            Object containing the current robot state.\n        \"\"\"\n        with self._main_lock:\n            return copy.deepcopy(self._robot_state)", "hash": "ec283fbbac6c", "chunk_type": "method", "node_type": "function_definition", "signature": "GetRobotState(self)", "docstring": "Return a copy of the current robot state.\n\n        Return\n        ------\n        RobotState\n            Object containing the current robot state.", "chunk_size_bytes": 275, "original_size_bytes": 277, "start_byte": 79359, "end_byte": 79636}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:4755b6d29e09", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "StartLogging", "qualified_name": "Robot.StartLogging", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2233, 2258], "text": "def StartLogging(self, file_path=None, fields=None, record_time=True):\n        \"\"\"Start logging robot state to file.\n        Fields logged are controlled by SetRealtimeMonitoring(). Logging frequency is set by SetMonitoringInterval().\n        By default, will wait until robot is idle before logging.\n        Parameters\n        ----------\n        file_path : string or None\n            File path to saved log.\n        fields : list of strings or None\n            List of fields to log. Taken from RobotState attributes. None means log all compatible fields.\n        record_time : bool\n            If true, current date and time will be recorded in file.\n        \"\"\"\n        if self._file_logger != None:\n            raise InvalidStateError('Another file logging operation is in progress.')\n        self._file_logger = CSVFileLogger(self._robot_info,\n                                          self._robot_state,\n                                          fields,\n                                          file_path,\n                                          record_time=record_time)", "hash": "4755b6d29e09", "chunk_type": "method", "node_type": "function_definition", "signature": "StartLogging(self, file_path=None, fields=None, record_time=True)", "docstring": "Start logging robot state to file.\n\n        Fields logged are controlled by SetRealtimeMonitoring(). Logging frequency is set by SetMonitoringInterval().\n        By default, will wait until robot is idle before logging.\n\n        Parameters\n        ----------\n        file_path : string or None\n            File path to saved log.\n\n        fields : list of strings or None\n            List of fields to log. Taken from RobotState attributes. None means log all compatible fields.\n\n        record_time : bool\n            If true, current date and time will be recorded in file.", "chunk_size_bytes": 1080, "original_size_bytes": 1086, "start_byte": 79642, "end_byte": 80728}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:97325a533cdd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "EndLogging", "qualified_name": "Robot.EndLogging", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2260, 2268], "text": "def EndLogging(self):\n        \"\"\"Stop logging robot state to file.\n        \"\"\"\n        if self._file_logger == None:\n            raise InvalidStateError('No existing logger to stop.')\n        self._file_logger.end_log()\n        self._file_logger = None", "hash": "97325a533cdd", "chunk_type": "method", "node_type": "function_definition", "signature": "EndLogging(self)", "docstring": "Stop logging robot state to file.", "chunk_size_bytes": 252, "original_size_bytes": 254, "start_byte": 80734, "end_byte": 80988}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot.py:155c2c245744", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "FileLogger", "qualified_name": "Robot.FileLogger", "source_path": "sample-programs/Python/HandGuiding/robot.py", "loc": [2271, 2290], "text": "def FileLogger(self, file_path=None, fields=None, record_time=True):\n        \"\"\"Contextmanager interface for file logger.\n        Parameters\n        ----------\n        file_path : string or None\n            File path to saved log.\n        fields : list of strings or None\n            List of fields to log. Taken from RobotState attributes. None means log all compatible fields.\n        record_time : bool\n            If true, current date and time will be recorded in file.\n        \"\"\"\n        self.StartLogging(file_path=file_path, fields=fields, record_time=record_time)\n        try:\n            yield\n        finally:\n            self.EndLogging()", "hash": "155c2c245744", "chunk_type": "method", "node_type": "function_definition", "signature": "FileLogger(self, file_path=None, fields=None, record_time=True)", "docstring": "Contextmanager interface for file logger.\n\n        Parameters\n        ----------\n        file_path : string or None\n            File path to saved log.\n\n        fields : list of strings or None\n            List of fields to log. Taken from RobotState attributes. None means log all compatible fields.\n\n        record_time : bool\n            If true, current date and time will be recorded in file.", "chunk_size_bytes": 651, "original_size_bytes": 655, "start_byte": 81025, "end_byte": 81680}
