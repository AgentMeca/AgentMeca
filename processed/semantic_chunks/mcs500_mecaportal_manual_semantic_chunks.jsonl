{"chunk_id": "mcs500_mecaportal_manual_semantic_0", "text": "Revision number: 11.1.43\n\n1 MecaPortal Operating Manual for the MCS500 Industrial Robot\n\n5 Updating the robot\u2019s firmware\n\n6 The code editor panel\n\n10 The configuration menu\n\nMecaPortal for the MCS500 Industrial Robot\n\nFor firmware version: 11.1\n\nDocument revision: A\n\nOnline release date: July 17, 2025\n\nDocument ID: MC-OM-MCS500\n\nand shall not be The information contained herein is the property of Mecademic Inc. reproduced in whole or in part without prior written approval of Mecademic Inc. This user manual describes how to use Mecademic\u2019s MecaPortal, in the case of the Mcs500 robot. Before using the MecaPortal, you must read your robot\u2019s user manual (MC-UM-MCS500)\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nAlthough the MecaPortal runs in a web browser, it does not require an internet connection to operate your robot. These are:\n\n\u2022 The code editor panel\n\n\u2022 You can show/hide each of the four panels from the button\n\nFigure 1: Overview of the MecaPortal\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nFrom left to right, the menu bar features\n\n\u2022 The configuration menu button,\n\n\u2022 The panels show/hide menu button,\n\n\u2022 The show/hide tooltips button,\n\n\u2022 The robot name surrounded by state bars (see Table 1)\n\n\u2022 The connection state selector,\n\n\u2022 The robot state selector,\n\n\u2022 The recovery mode button,\n\n\u2022 The simulation mode button,\n\n\u2022 The end-of-arm tooling state icon,\n\nUntil you get to know the MecaPortal, we recommend that you activate the tooltips using the button\n\n, in the menu bar. MCS500\u2019s web interface, called MecaPortal, is more or less the equivalent of the teach pendant\u2019s interface of a traditional industrial robot. You can also download a high-resolution screen orthographic projection from the capture of the current 3D view by pressing the\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nThe robot position display\n\nAs soon as the MecaPortal appears, the current robot position appears at the top of the 3D view panel. Pressing that button, or clicking the \u201cReset error\u201d link in the red popup that will appear, acknowledges and resets the error (i.e., the MecaPortal sends the ResetError command to the robot). The programs that appear in the code editor panel are simply those opened in the MecaPortal and not necessarily in the robot\u2019s memory. It can be downloaded from the MecaPortal (see troubleshoot-prog of the Programming Manual). It can be downloaded from the MecaPortal (see troubleshoot-prog of the Programming Manual). It can be downloaded from the MecaPortal (see troubleshoot-prog of the Programming Manual). The MecaPortal will locally save (in the browser\u2019s local storage) the opened programs, whether or not they are saved on the robot. The following figure shows the main elements of the MecaPortal web interface. fig:MecaPortal-ConnectionButton ).", "source": "mcs500_mecaportal_manual", "chunk_index": 0, "sentence_count": 14, "sentence_indices": [0, 5, 28, 33, 19, 119, 107, 80, 242, 258, 201, 81, 32, 44], "token_count": 700, "char_count": 2775, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "5a4070ccf64c0a2c5a562085e00aa722"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_1", "text": "The information herein is subject to change without notice and should not be construed as a commitment by Mecademic Inc. Mecademic Inc. assumes no responsibility for any errors or omissions in this document. \u00a9 Copyright 2025, Mecademic Inc. {build}\n\nEach Mecademic manual is written for a specific {major}.{minor}.{*}. The document ID for each Mecademic manual in a particular language is the same, regardless of the firmware version and the revision number. MC-OM-MCS500, Revision number: 11.1.43\n\nThe firmware that is installed on Mecademic products has the following numbering convention:\n\n{major}.{minor}.{patch}. When a Mecademic robot receives a motion command, it places it in a motion queue. This manual will be periodically reviewed and revised. These programs are sequences of the proprietary commands described in the Programming Manual. MC-OM-MCS500, Revision number: 11.1.43\n\nThe following table lists the symbols that may be used in Mecademic documents to denote certain conditions. You can control the level of details to be displayed. will turn red, and a red Note that the syntax validation is performed by the robot (and not by the MecaPortal) when the program is saved. PDOs can contain individual bits, bytes, or words. A pop-up window will appear, showing the progress of each step in the process. Furthermore, a brief description of the command appears, as shown in Figure 1. On a regular basis, we revise each manual, adding further information and improving certain explanations. Comments are entered in C/C++ style (e.g., // and /* */ ). Identifies information that requires special consideration. Below is the list of terms used by us in our technical documentation. It features the following sections:\n\n\u2022 Robot information, such as the serial number and the complete version number of the\n\n\u2022 Help, primarily links to documentation, the support website, and to the legacy web\n\n\u2022 Network configuration, such as entries of the IP address of the robot or the netmask,\n\n\u2022 Joint limits, for reducing the joint ranges;\n\n\u2022 Work zone limits and collision configuration, for preventing self-collisions and defining\n\n\u2022 Variables management (creation, deletion or modification of robot persistent variables);\n\n\u2022 Update firmware, for upgrading (or downgrading) the firmware of the robot;\n\n\u2022 Get logs and backup, for downloading a complete backup (robot logs, persistent\n\nconfiguration data, programs, etc.) TRF : Tool reference frame. All data request commands (Get*), all robot control commands, all work zone supervision and collision prevention commands and some optional accessories commands (*_Immediate) are instantaneous. Note that many of these poses can be attained with more than one set of\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nconfiguration parameters. when it is activated. Provides indications that must be respected in order to avoid a potentially hazardous situation, which could result in injury.", "source": "mcs500_mecaportal_manual", "chunk_index": 1, "sentence_count": 25, "sentence_indices": [1, 3, 4, 12, 18, 11, 219, 2, 62, 6, 111, 78, 226, 53, 90, 14, 64, 8, 188, 186, 255, 212, 261, 239, 10], "token_count": 700, "char_count": 2930, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "f9c17b1e46624786a774c8fc7f64b704"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_2", "text": "Particular attention must be paid to the warning and danger messages in this manual. Provides indications that must be respected in order to avoid equipment or work (data) on the system being damaged or lost. robot log : This file is a more detailed version of the user log, intended primarily for our support team. Updating the robot\u2019s firmware\n\nMake sure that you have the latest firmware installed on the robot and that you read the manuals corresponding to that firmware. See inverse-kinematics of the Programming manual for more details. Now that you have installed the latest robot firmware, make sure to read the documentation that corresponds to that firmware. In this panel, various events are listed such as commands sent, responses received, robot state changes, etc. The robot is in error mode. The robot is in recovery mode and executing motion commands. Go here, and download the latest firmware (a zip file). error mode : The robot goes into error mode when it encounters an error while executing a command or a hardware problem (see tab:error-messages ). At any time, if a motion error occurs (either while the robot is executing a command or is idle), the button will become red. The control buttons at the bottom of the log panel are self-explanatory:\n\nDownload the detailed event log\n\nInsert a text bookmark\n\nToggle the word wrapping\n\nSelect the level of details to be displayed\n\nOther robot logs can also be downloaded from the configuration menu, troubleshoot-prog of the Programming Manual. The jogging panel is enabled whenever the robot is ready to receive AND execute new motion commands. You must create your own software application or program if you intend to use the robot for complex tasks, such as interacting with inputs and outputs (in which case you also need a third-party I/O module). The web interface is also used for updating the firmware of your robot. user log : This file is a simplified log containing user-friendly traces of major events (e.g., robot activation, movement, E-Stop activation). The robot is homed and executing motion commands. For complex tasks, you must write a program outside the web interface (e.g., in your preferred integrated development environment) that parses the robot\u2019s feedback, controls the robot, and handles all flow control logic. In addition, once you start typing a command, a list of suggestions appears, allowing auto-completion. instantaneous commands : These are commands that are executed immediately, as soon as received by the robot. To control the robot click on the If the robot is in error when you connect to the robot, the connection state button will show a red blinking icon. The interface basically translates your mouse clicks, joystick movements and keyboard entries into proprietary commands that are sent to the robot\u2019s controller. robot is ready for motion : The robot is considered ready to receive motion commands, i.e. In addition, the web interface displays the feedback messages received from the robot and the 3D model of the actual robot. The robot motion is paused. robot posture : The arrangement of the robot links.", "source": "mcs500_mecaportal_manual", "chunk_index": 2, "sentence_count": 27, "sentence_indices": [7, 9, 241, 48, 214, 56, 110, 41, 37, 49, 207, 106, 112, 134, 26, 27, 257, 39, 65, 89, 211, 45, 22, 238, 24, 40, 244], "token_count": 698, "char_count": 3124, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "6ddc7de121539018a62fc094527de459"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_3", "text": "{*} firmware version. {*} firmware version. You are currently reading the documentation for firmware 11.1. Then, once you have followed the procedures of installing-the-robot-system , first-time-use , and power-up-procedure of your robot user manual, proceed to updating the robot firmware as follows:\n\n\u2022 First, take control of the robot using the connection menu button\n\n\u2022 Then, open the configuration menu\n\nand navigate to the \u201cUpdate firmware\u201d section. Wait a few minutes for the update to complete. You can change most of these shortcuts in the configuration menu,\n\nTable 4: Keyboard shortcuts for jogging (focus must be on jogging panel)\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nShift + arrow arrow 1 2 3 . Once the joystick is detected you will see the respective joystick icons next to each slider (Figure 3c). In addition, you can load a program from your computer, by clicking the\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nThe code editor provides syntax highlighting. To resume the execution of motion commands, press the the ResumeMotion command). You can select to either copy the data that is shown in the ) or insert a corresponding row by pressing the icon on the right (the icon is changed to specific command with arguments corresponding to the current robot position (the icon is ). Finally, you can show/hide the TRF, WRF, or the floor, and switch between perspective and menu. You should enable only one input mode at a time: the mouse, keyboard shortcuts, or the joystick. You should enable only one input mode at a time: the mouse, keyboard shortcuts, or the joystick. MC-OM-MCS500, Revision number: 11.1.43\n\nYou can create a new program using the button in the upper right corner of the panel. Once the error was reset, you need to ResumeMotion, by clicking the\n\nFinally, recall that you can execute other programs, using the command StartProgram. Table 1: The robot state bars in the MecaPortal\n\nGray, solid Yellow, solid\n\nYellow, blinking Green, solid Green, blinking Blue, solid Red, blinking\n\nThe robot is deactivated. Every motion that can be commanded in the jogging panel can also be performed by sending commands from the code editor panel, though in a much less user-friendly manner. You can use keyboard shortcuts to jog the robot by activating the toggle button . Finally, for convenience, the same stop button available at the bottom of the code editor is also provided at the bottom of both jogging menus. The Cartesian jog tab\n\nThe configuration menu\n\nThe configuration menu can be accessed from the top left corner of the MecaPortal window,\n\n. The monitoring option can be used to see in real-time the motion of the robot when\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nanother client (e.g., another MecaPortal, a Python program, or a Profinet application running on a PLC) is controlling the actual robot. \u2022 Finally, click on the Upload button.", "source": "mcs500_mecaportal_manual", "chunk_index": 3, "sentence_count": 22, "sentence_indices": [13, 16, 57, 50, 54, 156, 160, 88, 105, 128, 118, 164, 184, 68, 108, 35, 135, 153, 170, 185, 47, 52], "token_count": 700, "char_count": 2880, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "7f94dafe8518bbd42fcf1a11ce8d08b3"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_4", "text": "We only provide the latest revision for each {major}.{minor}.{*}. Below is a summary of the changes made in each revision. Note that we offer a Python API on our GitHub account. A yellow dot to the right of the program\u2019s name indicates that the program has been changed and needs to be saved. Alternatively, you can press the button (or Alt + . ) MC-OM-MCS500, Revision number: 11.1.43\n\nWe use an innovative UI element (patent pending) for jogging each joint. We have therefore added various visual cues (patent pending), that represent the approximate joint position, relative to the corresponding joint limits. or the latest robot logs only;\n\n\u2022 Keyboard mapping, for listing all and changing certain keyboard shortcuts;\n\n\u2022 Joystick mapping, for assigning robot jogging directions to joystick axes. In addition, the little triangle underneath each bar indicates the relative joint position with respect to the joint limits. All motion commands are queued commands, as well as some external-tool commands. If a syntax error is found in the code, during the saving, the yellow dot will appear in front of each line of code containing a syntax error. The command will be run once all preceding motion commands have been executed. Another set of highly useful features can be accessed in the selection menus on the right of each of the three rows of data. Each line that has a text cursor or a selection of text becomes highlighted in gray and is called an active line (page 31). Lastly, a list of predefined robot positions (essentially, joint sets) are stored and available in the menu button. Many of these settings have default values. These cues are the up-pointing triangles under each joint position text field. 1 Hold Shift for continuous jog, otherwise robot will jog in increments. You can specify multiple layers of folders. EOAT : End-of-arm tooling. Note that you can select a block of text, a box of text (column select), or even have multiple cursors. Alternatively, you can execute only the active line(s), by pressing the\n\nbutton, or by pressing Ctrl + Enter . The shortcuts for accessing these features are presented in Table 2. Programs can be saved in different folders. TCP : Tool Center Point. The file will be saved with the .mxprog extension. In contrast, some settings are persistent and their values are stored on an SD drive. Additionally, clicking the left or right arrow buttons with the secondary mouse button commands a single incremental joint displacement, with the increment specified in the specified in the text field at the bottom of the jogging panel. These are primarily the same commands described in the Programming Manual that you will eventually start sending from your own application, written in C++, Java, Python or any other modern programming language. immediately, i.e., are instantaneous. The robot is homed.", "source": "mcs500_mecaportal_manual", "chunk_index": 4, "sentence_count": 31, "sentence_indices": [15, 17, 67, 76, 103, 138, 122, 187, 152, 233, 77, 220, 127, 97, 171, 196, 123, 161, 73, 203, 96, 100, 95, 71, 252, 87, 199, 149, 23, 237, 38], "token_count": 700, "char_count": 2855, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "8454307b17c3e1b2718c0b615f42baf0"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_5", "text": "The interface is essentially an HTML 5 web page with JavaScript and WebGL scripts. By default, the web interface connects to the robot in monitoring mode only (as seen in . Once finished, the robot will reboot, and the new web interface will reload. The connection and robot state selectors\n\nNormally, once the web user interface is loaded, you have not only established an HTTP connection with the robot, but also activated the socket messaging which is the only communication channel between the web interface and the robot. All of these files reside in the robot\u2019s controller, so you do not need to install anything on your computer, but Google Chrome or another web browser. The robot\u2019s command interface does not support conditionals, loops, or other flow control statements, nor variables. By default, it remains offline. offline program : A sequence of commands saved in the internal memory of the robot. Table 4 the default keyboard shortcuts for jogging the robot. A list with two options will icon to activate the robot. Clicking on one of these robot positions moves the robot to that joint set, in joint mode. These commands are executed immediately and generally return values for parameters that have already been configured (sent and executed) with a Set* command (or the default values). To open a program that is already in the robot\u2019s memory, click on the icon. Doing so, it is the mouse horizontal velocity (rather than relative position) that is mapped to the robot joint velocity. monitoring port : The TCP port 10001, over which data is sent periodically from the robot. Once the robot starts executing motion commands, the button will become highlighted in yellow, and the green status bars in the menu panel will start blinking. Finally, you can jog in Cartesian mode using a joystick. That jogging bar is a mixture of a slider and a virtual single-axis joystick and has dual functionality, depending on which mouse button is used to interact with it (Figure 3). The robot is activated but not homed, or is in recovery mode but not moving. You can press that button (or Alt + ; ) at any time to stop the robot and clear its motion queue (i.e., to send the ClearMotion command to the robot). online mode programming : Programming the robot in online mode involves moving it directly to each desired robot position, typically using jogging controls. Next, you need to activate the robot by selecting the unroll. The shortcuts are active only if the toggle is selected and the mouse cursor is over the jogging panel, in which case the panel button is surrounded by a blue frame. default value : There are different settings in the robot controller that can be configured using Set* commands (e.g., SetCartAcc). to pause the execution of motion commands (i.e., to send the PauseMotion command to the button again (which sends robot). control port : The TCP port 10000, over which commands to the robot and messages from the robot are sent. Not to be confused with Transmission Control Protocol.", "source": "mcs500_mecaportal_manual", "chunk_index": 5, "sentence_count": 27, "sentence_indices": [20, 43, 55, 42, 21, 63, 29, 222, 154, 60, 172, 194, 82, 148, 217, 101, 181, 139, 36, 102, 224, 58, 155, 195, 104, 192, 254], "token_count": 696, "char_count": 3014, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "32ef00a2e59d779541c8c9d00a70a3fc"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_6", "text": "The MecaPortal is intended mainly for testing and writing simple programs. (In case you are familiar with our Meca500\n\nThe code editor panel\n\nThe code editor is used mainly for writing and executing simple programs, i.e., for testing. You can use any language that supports communication over TCP/IP (e.g., C/C++, C#, Python, Java or even Structured Text). You can also save the program directly using the shortcut Ctrl + s . A program can be called in another program with the StartProgram command, as in the following example:\n\nStartProgram(\"my_folder/my_subfolder/program123\")\n\nTo save and load programs from the robot, you must be connected to it in control mode, i.e., the connection state icon displayed in the menu bar must be\n\nYou can also save the contents of the active code editor tab to your computer\u2019s Downloads folder by clicking the icon. To specify a folder, and simultaneously create it if it does not exist, simply type the name of the folder followed by a slash, immediately before the name of the program. Alternatively, you can delete a program that is opened and in focus, by clicking the icon. To simply close an open program, click the \u00d7 on the tab with the program name. You can also delete programs from the same menu. Table 2: Shortcuts for course code editing\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nOpen the auto-complete popup menu\n\nCtrl + Space Ctrl + Shift + Space Open the command help popup Select all Ctrl + a Add selection to next find match Ctrl + d Open the find and replace dialog Ctrl + f Open the \u201cgo to line\u201d dialog Ctrl + g Comment/uncomment active line(s) Ctrl + / Move cursor to the beginning of the first line Ctrl + Home Move cursor to the end of the last line Ctrl + End Move cursor to next group Ctrl + \u2192 Move cursor to previous group Ctrl + \u2190 Select group Double click Select line Triple click Move active line(s) up Alt + \u2191 Move active line(s) down Alt + \u2193 Duplicate active line(s) and insert result above Shift + Alt + \u2191 Duplicate active line(s) and insert result below Shift + Alt + \u2193 Alt + click & drag Select a box of text (column select) Ctrl + click\n\nPlace multiple cursors for simultaneous editing\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nYou can execute the complete current program (even if it is not saved yet) by pressing the button at the bottom of the code editor panel. \u2022 Browse and select the file mcs500*.update that you just extracted. The program name can be changed and the program saved to the robot\u2019s non-volatile memory by either double-clicking on the program tab or by clicking the icon at the bottom of the code editor panel, which is equivalent to pressing the shortcut Ctrl + Shift + s . You can also select one of several preset views from the menu. To cancel the context menu without inserting a command, press Esc or click away.", "source": "mcs500_mecaportal_manual", "chunk_index": 6, "sentence_count": 14, "sentence_indices": [25, 61, 66, 70, 86, 72, 84, 85, 83, 99, 51, 69, 117, 93], "token_count": 697, "char_count": 2810, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "3500cc50f6b2b521e06c5299ed10df1a"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_7", "text": "The only times the MecaPortal connects to the internet are when you click on the Mecademic logo in the top-right corner or when you use clearly marked links to our website (for example, to view tutorials or documentation). For the MecaPortal to detect the joystick, you will need to press one of the device\u2019s buttons or, occasionally, unplug and replug the device. MC-OM-MCS500, Revision number: 11.1.43\n\nContrary to the keyboard shortcuts for jogging the robot, the joystick is active even if the mouse cursor is not over the jogging menu, as long as the focus is on the MecaPortal. Furthermore, other than mechanical interferences between non-adjacent links of the robot, the factors that limit the robot workspace are the joints limits and the singularities, which are already displayed in the robot position display, in the top right corner of the MecaPortal. active line : The line in the MecaPortal where the cursor is currently positioned. Do not install the driver and the software that come with the SpaceMouse as these will interfere with the desired functioning of the device in the MecaPortal. detailed event log : This file mirrors the content of the event log panel in the MecaPortal when in detailed mode. Figure 5c shows the Cartesian jog tab in the case of the SpaceMouse. By default, only the mouse is activated, and the button at the bottom of the jogging panel is highlighted in blue. You can even customize the mapping between the joystick \u201caxes\u201d and the jogging directions in the configuration menu,\n\n(a) an example of a 3-axis USB precision joystick (b) SpaceMouse\u00ae 6-axis joystick from 3Dconnexion\n\nFigure 4: USB joysticks that can be used with the MecaPortal\n\nTo select between joint jog, Cartesian jog with respect to the TRF or Cartesian jog with respect to the WRF, you can either use your mouse or press (up to two times if necessary) the right button of the SpaceMouse or of the 3-axis joystick until the desired selection is obtained. The Cartesian jog tab\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nThe Cartesian jog tab\n\nFigure 5: Cartesian jog tab when using (a)\u200athe primary mouse button, (b)\u200athe secondary mouse\n\nbutton, and (c)\u200athe SpaceMouse\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nThe other major difference is that there are no text fields showing the position and orientation of the TRF with respect to the WRF, next to each jogging bar, let alone visual cues for indicating whether Cartesian jogging in one direction might soon reach a workspace limit. As with the joint jog tab, the jogging bars can be controlled with both the primary (Figure 5a) and secondary (Figure 5b) mouse buttons, using the same logic. Click the six-axis robot, note that the MCS500 does not need homing, contrary to the Meca500.)", "source": "mcs500_mecaportal_manual", "chunk_index": 7, "sentence_count": 13, "sentence_indices": [30, 159, 162, 179, 189, 165, 200, 182, 142, 168, 177, 174, 59], "token_count": 697, "char_count": 2746, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "9d6e9c1246d81d90b62f06ff8e9cbca8"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_8", "text": "If you do not use these links, no internet connection is made. Most tooltips are disabled by default. The term offline is often omitted and will eventually be removed altogether. You can disable this message with the command SetEob. In other words, you are directly controlling the joint speed, rather than the joint position. EOB : End-of-block message, [3012][], sent by default every time the robot has stopped moving AND its motion queue is empty. With that command, you can only execute programs that have already been saved on the robot. Unlike PDOs, SDOs exchange structured data rather than individual bits or bytes. Having multiple input modes for jogging activated simultaneously is unsafe . Having multiple input modes for jogging activated simultaneously is unsafe . Every time the robot is powered up, these settings are initialized to their default values. EOM : End-of-motion message, [3004][], sent by the robot whenever it has stopped moving for at least 1 ms, if this option is activated with SetEom. Note that subsequent clicks on one of these buttons changes the jogging directions in the 2D jogging pad (there are a total of eight combinations). FCP : Flange Center Point. For example, in Figure 2, line 11 is an active line. However, you can merge two jogging bars for linear movement (i.e., X and Y, Y and Z, or Z and X) into a 2D jogging pad using the buttons under the label \u201cAxes\u201d. Alternatively, you can directly click with the primary mouse button on either of the two arrow buttons of the jogging bar and hold, which makes the joint rotate at the specified maximum jogging velocity. have been converted to the range (\u2212180\u00b0, 180\u00b0]. robot control commands : Commands used to immediately control the robot, (e.g., These commands are executed ActivateRobot, PauseMotion, SetNetworkOptions). You can also jog each joint using keyboard shortcuts, as well as a three-axis or a six-axis joystick with at least two buttons. To zoom in and out, place your mouse cursor over the 3D view window and use your button is mouse wheel. Note that each text field changes to yellow when the joint position is close to one of its limits or to a singularity (joints 3 and 5 only), or to red, when the joint position is at a limit or at a singularity, as is the case with the robot position display in the 3D view panel. Note that if the robot is in error or if a safety stop condition is present, it will refuse motion commands, but it will still be considered ready since its motion queue remains initialized and retains the latest received settings (e.q., velocity, acceleration, blending, WRF, TRF, etc.). (Technically, you can use other joysticks, such as a PlayStation controller, but the icons displayed will be those for the SpaceMouse.) FRF : Flange Reference Frame.", "source": "mcs500_mecaportal_manual", "chunk_index": 8, "sentence_count": 25, "sentence_indices": [31, 34, 223, 205, 145, 204, 109, 249, 163, 183, 197, 206, 176, 208, 98, 175, 146, 246, 236, 140, 114, 151, 240, 141, 210], "token_count": 697, "char_count": 2782, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "d5c1eaae058e386ecc180320305bcfd3"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_9", "text": "You can still press that button and select to only monitor or control the robot. One of the main limitations, when operating a robot, is its joint limits, which are different for each joint. For safety reasons, when jogging, the robot can move only up to 50% of its maximum speed. - =\n\nRotate joint 1 or move end-effector along x-axis, direction Rotate joint 1 or move end-effector along x-axis, direction Rotate joint 2 or move end-effector along y-axis, direction Rotate joint 2 or move end-effector along y-axis, direction Rotate joint 3 or move end-effector along z-axis, direction Rotate joint 3 or move end-effector along z-axis, direction Rotate joint 4 or rotate end-effector about x-axis, direction Rotate joint 4 or rotate end-effector about x-axis, direction Rotate joint 5 or rotate end-effector about y-axis, direction Rotate joint 5 or rotate end-effector about y-axis, direction Rotate joint 6 or rotate end-effector about z-axis, direction Rotate joint 6 or rotate end-effector about z-axis, direction Jog along each of the four directions chosen in the jogging pad\n\nOpen Cartesian jog panel and select TRF mode Open Cartesian jog panel and select WRF mode Open joint jog panel Toggle between TRF and WRF mode, if Cartesian jog panel open Reduce jog velocity Increase jog velocity\n\nFinally, you can jog the robot using either a 3-axis USB precision joystick (Figure 4a) or the SpaceMouse\u00ae 6-axis joystick from 3Dconnexion (Figure 4b). Table 3: Default keyboard shortcuts related to current robot position and reference frame definitions\n\nThe robot position display\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nAlt + j Alt + l Alt + p Alt + c\n\nInsert MoveJoints command with current joint set as arguments Insert MoveLin command with current TRF pose as arguments Insert MovePose command with current TRF pose as arguments Insert SetConf command with current posture configuration parameters as arguments Insert SetWrf command with current WRF pose as arguments Insert SetTrf command with current TRF pose as arguments\n\nAlt + w Alt + t Alt + Shift + j Copy current joint set Alt + Shift + p Copy current TRF pose with respect to the WRF Alt + Shift + c Copy the current posture configuration parameters Alt + Shift + w Copy the current definition of the WRF Alt + Shift + t Copy the current definition of the TRF\n\nThe robot position display\n\nThe jogging panel is used to jog (move) the robot in several different ways (in the Cartesian or joint space) and with several different input devices (mouse, keyboard shortcuts or joystick). motion commands : Commands used to construct the robot trajectory (e.g., Delay, MoveJoints, SetTRF, SetBlending). BRF : Base Reference Frame.", "source": "mcs500_mecaportal_manual", "chunk_index": 9, "sentence_count": 7, "sentence_indices": [46, 121, 136, 157, 132, 218, 190], "token_count": 695, "char_count": 2686, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "cfb07edb76f021b3ac70e6c8f10fff50"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_10", "text": "Naturally, the program names in a given folder must be unique, as well as the sub-folder names in a given folder. Program and folder names are case sensitive and must contain a maximum of 63 characters among the 62 alphanumerical (A..Z, a..z, 0..9), the underscore, the hyphen and the period. persistent settings : Some settings in the robot controller have default values (e.g., the robot name set by the command SetRobotName), but when changed, their new values are written on an SD drive and persist even if the robot is powered off. Local changes won\u2019t be validated until the program is saved again. queued commands : Commands that are placed in the motion queue, rather than executed immediately. Once a desired robot joint arrangement is reached, you can use the context menu in the program editor field to insert a motion command with current joint set or TRF pose. In the case of motion commands settings, their values are also initialized to their default values every time the robot is deactivated. Furthermore, when the joint position is within 5\u00b0 of the joint limit, the corresponding text field is highlighted in yellow, while if the joint limit is attained, the text field turns red. Table 3 shows the default keyboard shortcut for copying data from the robot position display or inserting instructions with that data at the current cursor in the code editor. To change the view angle, press the primary mouse button (if the highlighted) or the secondary mouse button (if the button is highlighted) inside the 3D view window, hold it down and drag the mouse. The further you drag the thumb away from its central position, right or left, the faster the joint turns, in positive or negative direction, respectively. The most important group is in \u201cTO CURRENT POSITION\u201d which inserts the selected command at the text cursor with the arguments corresponding to the current robot position, the current tool reference frame (TRF), and the current world reference frame (WRF). To pan, press the primary mouse button (if the button is highlighted) inside the button is highlighted) or the middle mouse button (if the 3D view window, hold it down and drag the mouse. SDOs are typically used to configure device parameters and access diagnostic information through the object dictionary. In addition, in the case of the first row of data, you can choose to show either changed to the joints calculated or actual positions, the joints calculated or actual velocities, or even the joints torques. WRF : World reference frame. motion queue : The buffer where motion commands that were sent to the robot are stored and executed on a FIFO basis by the robot. To use a 3-axis or a 6-axis joystick, you need to activate the button . velocity mode : One of the two control modes, in which the robot\u2019s motion is generated by requesting a target joint velocity vector or end-effector Cartesian velocity vector (see pos-vel-modes of the Programming Manual). The origin of the TRF.", "source": "mcs500_mecaportal_manual", "chunk_index": 10, "sentence_count": 20, "sentence_indices": [74, 75, 227, 79, 232, 133, 198, 125, 131, 115, 144, 92, 116, 248, 129, 262, 221, 158, 259, 253], "token_count": 698, "char_count": 2973, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "aeb2c0b7f5e3ced55cabd4b848455813"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_11", "text": "Additionally, pressing the secondary mouse button when your mouse cursor is over the code editor text field brings a context menu with all available commands (Figure 2). Figure 2: Context menu in the code editor\n\nThe code editor includes various editing features for productive source code editing. position mode : One of the two control modes, in which the robot\u2019s motion is generated by requesting a target end-effector pose or joint set (see pos-vel-modes of the Programming Manual). The 3D view window shows a perspective projection of the robot in its current position, as well as the current WRF (page 34) (World Reference Frame) and TRF (page 33) (Tool Reference Frame). You can also directly specify the joint value by entering the joint angle in the text field next to each jogging bar. The jogging panel has two tabs that will be described in the following sections. robot posture configuration : The two-value (\u22121 or 1) parameter c e that normally defines each of the two possible robot postures for a given pose of the robot\u2019s end-effector. data request commands : Commands used to request some data regarding the robot (e.g., GetTrf, GetBlending, GetJointVel). pose : The position and orientation of one reference frame with respect to another. workspace : The Cartesian workspace of a robot is the set of all feasible poses of its TRF with respect to its WRF. MC-OM-MCS500, Revision number: 11.1.43\n\ninverse kinematics : The problem of obtaining the robot joint sets that correspond to a desired end-effector pose. joint space : The four-dimensional space defined by the positions of the robot joints. MC-OM-MCS500, Revision number: 11.1.43\n\nThe Cartesian jog tab\n\nIn the Cartesian jog tab (Figure 5), you can move the robot along (labels X, Y, Z) or about (labels Rx, Ry, or Rz) the axes of the TRF (if the TRF button is selected, as in the figure) or along or about the axes of a reference frame having the same orientation as the WRF but with origin at the TCP (if WRF is selected). The horizontal position of each triangle relative to the left and right limits of the corresponding text field, is proportional to the position of the corresponding joint relative to the joint limits. By default, we show:\n\n\u2022 the four joint positions, \u03b8 1 , \u03b8 2 , and \u03b8 4 , in degrees, and d 3 , in mm,\n\n\u2022 the position (x, y, z) and orientation (\u03b3) of the TRF with respect to the WRF, in mm and\n\ndegrees, respectively, and\n\n\u2022 the robot configuration parameter. To jog each axis as if using a joystick, click the primary mouse button onto the thumb of the corresponding jogging bar and drag it right or left (Figure 3a). proximal link : This is the clear-anodized body between the base and the distal link.", "source": "mcs500_mecaportal_manual", "chunk_index": 11, "sentence_count": 17, "sentence_indices": [91, 94, 229, 113, 150, 137, 230, 193, 228, 260, 213, 216, 173, 124, 120, 143, 231], "token_count": 699, "char_count": 2704, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "4222fd74c6155d202bc0d7463ff11cc7"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_12", "text": "Similarly, when the angle of joint 2 is close to or equal to 0\u00b0 (elbow singularity), the corresponding text field is highlighted in yellow. Equivalent to a joint set in which all joint angles are normalized, i.e. joint position : The joint angle associated with a rotary joint or the position of joint 3.\n\njoint set : The set of all joint positions. robot position : A robot position is equivalent to either a joint set or the pose of the TRF relative to the WRF, along with the definitions of both reference frames, and the robot posture and last joint turn configuration parameters. singularities : A robot posture where the robot\u2019s end-effector is blocked in some directions even if no joint is at a limit (see singularities of the Programming Manual). reach : The maximum distance between the axis of joint 1 and the axis of joint 4.\n\nreal-time data request commands : Commands used to request some real-time data regarding the current status of robot (e.g., GetRtTrf, GetRtCartPos, GetStatusRobot). turn configuration parameter : Since the last joint of the robot can rotate multiple revolutions, the turn configuration parameter defines the revolution number. MC-OM-MCS500, Revision number: 11.1.43\n\nretaining ring : In the MCS500, this is each of the two circular clamps on both ends of the spline shaft. distal link : In the MCS500, this is the black-anodized body that holds the spline shaft. spline shaft : This is the the groved reciprocating shaft. Similarly, in the case of the second row of data, you can choose to show either the calculated or actual pose of the TRF with respect to the WRF, or the calculated or actual Cartesian velocity of the TRF with respect to the WRF. Cartesian space : The four-dimensional space defined by the position (x, y, z) and orientation (\u03b3) of the TRF with respect to the WRF. You can deactivate certain joystick directions by clicking on the respective joystick icon, to the right of each slider bar. SDO ( Service Data Object ): In EtherCAT, a Service Data Object (SDO) is a data structure used for non-real-time communication between an EtherCAT master and its slave devices. MC-OM-MCS500, Revision number: 11.1.43\n\nFor much more precise jogging, we strongly recommend the use of a 3-axis precision USB joystick such as from APEM. PDO ( Process Data Object ): In EtherCAT, a Process Data Object (PDO) is a data structure used for exchanging real-time cyclic data between an EtherCAT master and its slave devices. This is mainly because, in general, jogging along and about the three axes of a reference frame have no one-to-one correlation to the position coordinates and Euler angles used to represent the pose of the TRF with respect to the WRF. The keyboard shortcuts for Cartesian jogging are shown in Table 4.", "source": "mcs500_mecaportal_manual", "chunk_index": 12, "sentence_count": 18, "sentence_indices": [126, 245, 215, 243, 250, 234, 256, 235, 202, 251, 130, 191, 167, 247, 169, 225, 178, 180], "token_count": 696, "char_count": 2765, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "91e9e0446859d7b511ae8ab4cefaec28"}
{"chunk_id": "mcs500_mecaportal_manual_semantic_13", "text": "MC-OM-MCS500, Revision number: 11.1.43\n\nFigure 3: Joint jog tab when using (a)\u200a\u200athe primary mouse button, (b)\u200a\u200athe secondary mouse button, and (c)\u200a\u200aa 3\u2011axis joystick\n\nMC-OM-MCS500, Revision number: 11.1.43\n\nYou can also drag the thumbs of the jogging bars using the secondary mouse button (Figure 3b). Also, if you opt for the wireless model, keep the device close to the universal USB receiver and remember to recharge the device regularly. Page: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 The origin of the FRF.", "source": "mcs500_mecaportal_manual", "chunk_index": 13, "sentence_count": 4, "sentence_indices": [147, 166, 263, 209], "token_count": 240, "char_count": 639, "chunking_method": "max_min_semantic", "model_used": "BAAI/bge-m3", "hash": "822ace5c80fafd856496eed3b29a5ff1"}
