{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:818111220442", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "threading", "qualified_name": "threading", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [2, 2], "text": "import threading", "hash": "818111220442", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 23, "end_byte": 39}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:cd89a6634e6c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "queue", "qualified_name": "queue", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [3, 3], "text": "import queue", "hash": "cd89a6634e6c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 12, "original_size_bytes": 12, "start_byte": 40, "end_byte": 52}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:c307405b3f5d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "re", "qualified_name": "re", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [4, 4], "text": "import re", "hash": "c307405b3f5d", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 9, "original_size_bytes": 9, "start_byte": 53, "end_byte": 62}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:eb3622cb23ea", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MecademicException", "qualified_name": "MecademicException", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [14, 18], "text": "class MecademicException(Exception):\n    \"\"\"Base exception class for Mecademic-related exceptions.\n    \"\"\"", "hash": "eb3622cb23ea", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Base exception class for Mecademic-related exceptions.", "chunk_size_bytes": 106, "original_size_bytes": 107, "start_byte": 213, "end_byte": 329}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:6109e3afa217", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InvalidStateError", "qualified_name": "InvalidStateError", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [21, 25], "text": "class InvalidStateError(MecademicException):\n    \"\"\"The internal state of the instance is invalid.\n    \"\"\"", "hash": "6109e3afa217", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "The internal state of the instance is invalid.", "chunk_size_bytes": 106, "original_size_bytes": 107, "start_byte": 332, "end_byte": 448}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:625f7dedb184", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "CommunicationError", "qualified_name": "CommunicationError", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [28, 32], "text": "class CommunicationError(MecademicException):\n    \"\"\"There is a communication issue with the robot.\n    \"\"\"", "hash": "625f7dedb184", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "There is a communication issue with the robot.", "chunk_size_bytes": 107, "original_size_bytes": 108, "start_byte": 451, "end_byte": 568}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:4be8685e59d8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "DisconnectError", "qualified_name": "DisconnectError", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [35, 39], "text": "class DisconnectError(MecademicException):\n    \"\"\"A non-nominal disconnection has occurred.\n    \"\"\"", "hash": "4be8685e59d8", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "A non-nominal disconnection has occurred.", "chunk_size_bytes": 99, "original_size_bytes": 100, "start_byte": 571, "end_byte": 680}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:adf68a243c3a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InterruptException", "qualified_name": "InterruptException", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [42, 46], "text": "class InterruptException(MecademicException):\n    \"\"\"An event has encountered an error. Perhaps it will never be set.\n    \"\"\"", "hash": "adf68a243c3a", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "An event has encountered an error. Perhaps it will never be set.", "chunk_size_bytes": 125, "original_size_bytes": 126, "start_byte": 683, "end_byte": 818}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:6bb57df03aab", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InterruptableEvent", "qualified_name": "InterruptableEvent", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [49, 174], "text": "class InterruptableEvent:\n    \"\"\"Extend default event class to also be able to unblock and raise an exception.\n    Attributes\n    ----------\n    id : int or None\n        Id for event.\n    _event : event object\n        A standard event-type object.\n    _lock : lock object\n        Used to ensure atomic operations.\n    _interrupted : boolean\n        If true, event is in an error state.\n    \"\"\"", "hash": "6bb57df03aab", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Extend default event class to also be able to unblock and raise an exception.\n\n    Attributes\n    ----------\n    id : int or None\n        Id for event.\n    _event : event object\n        A standard event-type object.\n    _lock : lock object\n        Used to ensure atomic operations.\n    _interrupted : boolean\n        If true, event is in an error state.", "chunk_size_bytes": 393, "original_size_bytes": 395, "start_byte": 821, "end_byte": 4165}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:e7a9fba334ad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "InterruptableEvent.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [65, 70], "text": "def __init__(self, id=None, data=None):\n        self._id = id\n        self._data = data\n        self._event = threading.Event()\n        self._lock = threading.Lock()\n        self._interrupted = False", "hash": "e7a9fba334ad", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, id=None, data=None)", "docstring": null, "chunk_size_bytes": 199, "original_size_bytes": 199, "start_byte": 1222, "end_byte": 1421}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:6c35daa324ad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "wait", "qualified_name": "InterruptableEvent.wait", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [72, 89], "text": "def wait(self, timeout=None):\n        \"\"\"Block until event is set or should raise an exception.\n        Attributes\n        ----------\n        timeout : float\n            Maximum duration to wait in seconds.\n        Return\n        ------\n        success : boolean\n            False if event timed out, true otherwise.\n        \"\"\"\n        success = self._event.wait(timeout=timeout)\n        if self._interrupted:\n            raise InterruptException('Event received exception, possibly because event will never be triggered.')\n        return success", "hash": "6c35daa324ad", "chunk_type": "method", "node_type": "function_definition", "signature": "wait(self, timeout=None)", "docstring": "Block until event is set or should raise an exception.\n\n        Attributes\n        ----------\n        timeout : float\n            Maximum duration to wait in seconds.\n\n        Return\n        ------\n        success : boolean\n            False if event timed out, true otherwise.", "chunk_size_bytes": 547, "original_size_bytes": 550, "start_byte": 1427, "end_byte": 1977}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:2297919124d2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "wait_for_data", "qualified_name": "InterruptableEvent.wait_for_data", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [91, 111], "text": "def wait_for_data(self, timeout=None):\n        \"\"\"Block until event is set or should raise an exception.\n        Attributes\n        ----------\n        timeout : float\n            Maximum duration to wait in seconds.\n        Return\n        ------\n        data : object\n            Return the data object.\n        \"\"\"\n        success = self._event.wait(timeout=timeout)\n        if self._interrupted:\n            raise InterruptException('Event received exception, possibly because event will never be triggered.')\n        elif not success:\n            raise InterruptException('Event timed out.')\n        else:\n            return self._data", "hash": "2297919124d2", "chunk_type": "method", "node_type": "function_definition", "signature": "wait_for_data(self, timeout=None)", "docstring": "Block until event is set or should raise an exception.\n\n        Attributes\n        ----------\n        timeout : float\n            Maximum duration to wait in seconds.\n\n        Return\n        ------\n        data : object\n            Return the data object.", "chunk_size_bytes": 638, "original_size_bytes": 641, "start_byte": 1983, "end_byte": 2624}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:f4eb1fb730aa", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set", "qualified_name": "InterruptableEvent.set", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [113, 119], "text": "def set(self, data=None):\n        \"\"\"Set the event and unblock all waits. Optionally modify data before setting.\n        \"\"\"\n        with self._lock:\n            self._data = data\n            self._event.set()", "hash": "f4eb1fb730aa", "chunk_type": "method", "node_type": "function_definition", "signature": "set(self, data=None)", "docstring": "Set the event and unblock all waits. Optionally modify data before setting.", "chunk_size_bytes": 209, "original_size_bytes": 210, "start_byte": 2630, "end_byte": 2840}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:9349cd349551", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "abort", "qualified_name": "InterruptableEvent.abort", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [121, 128], "text": "def abort(self):\n        \"\"\"Unblock any waits and raise an exception.\n        \"\"\"\n        with self._lock:\n            if not self._event.is_set():\n                self._interrupted = True\n                self._event.set()", "hash": "9349cd349551", "chunk_type": "method", "node_type": "function_definition", "signature": "abort(self)", "docstring": "Unblock any waits and raise an exception.", "chunk_size_bytes": 222, "original_size_bytes": 223, "start_byte": 2846, "end_byte": 3069}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:ae93b2cf914a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear", "qualified_name": "InterruptableEvent.clear", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [130, 136], "text": "def clear(self):\n        \"\"\"Reset the event to its initial state.\n        \"\"\"\n        with self._lock:\n            self._interrupted = False\n            self._event.clear()", "hash": "ae93b2cf914a", "chunk_type": "method", "node_type": "function_definition", "signature": "clear(self)", "docstring": "Reset the event to its initial state.", "chunk_size_bytes": 172, "original_size_bytes": 173, "start_byte": 3075, "end_byte": 3248}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:b7f2f6fd64ff", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_set", "qualified_name": "InterruptableEvent.is_set", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [138, 151], "text": "def is_set(self):\n        \"\"\"Checks if the event is set.\n        Return\n        ------\n        boolean\n            False if event is not set or instance should '_interrupted'. True otherwise.\n        \"\"\"\n        with self._lock:\n            if self._interrupted:\n                return False\n            else:\n                return self._event.is_set()", "hash": "b7f2f6fd64ff", "chunk_type": "method", "node_type": "function_definition", "signature": "is_set(self)", "docstring": "Checks if the event is set.\n\n        Return\n        ------\n        boolean\n            False if event is not set or instance should '_interrupted'. True otherwise.", "chunk_size_bytes": 353, "original_size_bytes": 355, "start_byte": 3254, "end_byte": 3609}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:4ee927029baf", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_abort", "qualified_name": "InterruptableEvent.clear_abort", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [153, 160], "text": "def clear_abort(self):\n        \"\"\"Clears the abort.\n        \"\"\"\n        with self._lock:\n            if self._interrupted:\n                self._interrupted = False\n                self._event.clear()", "hash": "4ee927029baf", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_abort(self)", "docstring": "Clears the abort.", "chunk_size_bytes": 200, "original_size_bytes": 201, "start_byte": 3615, "end_byte": 3816}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:ccb8a5e1a59a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "id", "qualified_name": "InterruptableEvent.id", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [163, 167], "text": "def id(self):\n        \"\"\"Make id a read-only property since it should not be changed after instantiation.\n        \"\"\"\n        return self._id", "hash": "ccb8a5e1a59a", "chunk_type": "method", "node_type": "function_definition", "signature": "id(self)", "docstring": "Make id a read-only property since it should not be changed after instantiation.", "chunk_size_bytes": 141, "original_size_bytes": 142, "start_byte": 3836, "end_byte": 3978}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:f4b22b9edee7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "data", "qualified_name": "InterruptableEvent.data", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [170, 174], "text": "def data(self):\n        \"\"\"Make data a read-only property and enforce that it is only assignable at construction or using set().\n        \"\"\"\n        return self._data", "hash": "f4b22b9edee7", "chunk_type": "method", "node_type": "function_definition", "signature": "data(self)", "docstring": "Make data a read-only property and enforce that it is only assignable at construction or using set().", "chunk_size_bytes": 166, "original_size_bytes": 167, "start_byte": 3998, "end_byte": 4165}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:bd5e9fbcddc2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "TimestampedData", "qualified_name": "TimestampedData", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [177, 272], "text": "class TimestampedData:\n    \"\"\" Class for storing timestamped data.\n    Attributes\n    ----------\n    timestamp : number-like\n        Timestamp associated with data.\n    data : object\n        Data to be stored.\n    \"\"\"", "hash": "bd5e9fbcddc2", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing timestamped data.\n\n    Attributes\n    ----------\n    timestamp : number-like\n        Timestamp associated with data.\n    data : object\n        Data to be stored.", "chunk_size_bytes": 217, "original_size_bytes": 219, "start_byte": 4168, "end_byte": 6560}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:dc3423936fe1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "TimestampedData.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [189, 191], "text": "def __init__(self, timestamp, data):\n        self.timestamp = timestamp\n        self.data = data", "hash": "dc3423936fe1", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, timestamp, data)", "docstring": null, "chunk_size_bytes": 96, "original_size_bytes": 96, "start_byte": 4393, "end_byte": 4489}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:fda1b1ec9c54", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "update_from_csv", "qualified_name": "TimestampedData.update_from_csv", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [193, 209], "text": "def update_from_csv(self, input_string):\n        \"\"\"Update from comma-separated string, only if timestamp is newer.\n        Parameters\n        ----------\n        input_string : string\n            Comma-separated string. First value is timestamp, rest is data.\n        \"\"\"\n        floats = string_to_floats(input_string)\n        if (len(floats) - 1) != len(self.data):\n            raise ValueError('Cannot update TimestampedData with incompatible data.')\n        if floats[0] > self.timestamp:\n            self.timestamp = floats[0]\n            self.data = floats[1:]", "hash": "fda1b1ec9c54", "chunk_type": "method", "node_type": "function_definition", "signature": "update_from_csv(self, input_string)", "docstring": "Update from comma-separated string, only if timestamp is newer.\n\n        Parameters\n        ----------\n        input_string : string\n            Comma-separated string. First value is timestamp, rest is data.", "chunk_size_bytes": 566, "original_size_bytes": 570, "start_byte": 4495, "end_byte": 5065}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:996eb11908c9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "update_from_data", "qualified_name": "TimestampedData.update_from_data", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [211, 224], "text": "def update_from_data(self, timestamp, data):\n        \"\"\"Update with data if timestamp is newer.\n        Parameters\n        ----------\n        timestamp : number-like\n            Timestamp associated with data.\n        data : object\n            Data to be stored if timestamp is newer.\n        \"\"\"\n        if timestamp > self.timestamp:\n            self.timestamp = timestamp\n            self.data = data", "hash": "996eb11908c9", "chunk_type": "method", "node_type": "function_definition", "signature": "update_from_data(self, timestamp, data)", "docstring": "Update with data if timestamp is newer.\n\n        Parameters\n        ----------\n        timestamp : number-like\n            Timestamp associated with data.\n        data : object\n            Data to be stored if timestamp is newer.", "chunk_size_bytes": 403, "original_size_bytes": 405, "start_byte": 5071, "end_byte": 5476}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:6216d088e20d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "zeros", "qualified_name": "TimestampedData.zeros", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [227, 240], "text": "def zeros(cls, length):\n        \"\"\" Construct empty TimestampedData object of specified length.\n        Parameters\n        ----------\n        length : int\n            Length of data to construct.\n        Return\n        ------\n        TimestampedData object\n        \"\"\"\n        return cls(0, [0.] * length)", "hash": "6216d088e20d", "chunk_type": "method", "node_type": "function_definition", "signature": "zeros(cls, length)", "docstring": "Construct empty TimestampedData object of specified length.\n\n        Parameters\n        ----------\n        length : int\n            Length of data to construct.\n\n        Return\n        ------\n        TimestampedData object", "chunk_size_bytes": 305, "original_size_bytes": 308, "start_byte": 5499, "end_byte": 5807}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:b278bcd48f72", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__eq__", "qualified_name": "TimestampedData.__eq__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [242, 256], "text": "def __eq__(self, other):\n        \"\"\" Return true if other object has identical timestamp and data.\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n        Return\n        ------\n        bool\n            True if objects have same timestamp and data.\n        \"\"\"\n        return other.timestamp == self.timestamp and other.data == self.data", "hash": "b278bcd48f72", "chunk_type": "method", "node_type": "function_definition", "signature": "__eq__(self, other)", "docstring": "Return true if other object has identical timestamp and data.\n\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n\n        Return\n        ------\n        bool\n            True if objects have same timestamp and data.", "chunk_size_bytes": 388, "original_size_bytes": 391, "start_byte": 5813, "end_byte": 6204}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:231437da534b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__ne__", "qualified_name": "TimestampedData.__ne__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [258, 272], "text": "def __ne__(self, other):\n        \"\"\" Return true if other object has different timestamp or data.\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n        Return\n        ------\n        bool\n            True if objects have different timestamp or data.\n        \"\"\"\n        return not self == other", "hash": "231437da534b", "chunk_type": "method", "node_type": "function_definition", "signature": "__ne__(self, other)", "docstring": "Return true if other object has different timestamp or data.\n\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n\n        Return\n        ------\n        bool\n            True if objects have different timestamp or data.", "chunk_size_bytes": 347, "original_size_bytes": 350, "start_byte": 6210, "end_byte": 6560}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:aaf36df662b4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Message", "qualified_name": "Message", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [275, 315], "text": "class Message:\n    \"\"\"Class for storing a response message from a Mecademic robot.\n    Attributes\n    ----------\n    id : integer\n        The id of the message, representing the type of message.\n    data : string\n        The raw payoad of the message.\n    \"\"\"", "hash": "aaf36df662b4", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing a response message from a Mecademic robot.\n\n    Attributes\n    ----------\n    id : integer\n        The id of the message, representing the type of message.\n    data : string\n        The raw payoad of the message.", "chunk_size_bytes": 259, "original_size_bytes": 261, "start_byte": 6563, "end_byte": 7650}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:44c884b58cf8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Message.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [287, 289], "text": "def __init__(self, id, data):\n        self.id = id\n        self.data = data", "hash": "44c884b58cf8", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, id, data)", "docstring": null, "chunk_size_bytes": 75, "original_size_bytes": 75, "start_byte": 6830, "end_byte": 6905}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:d3cb33725906", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "Message.__repr__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [291, 292], "text": "def __repr__(self):\n        return \"Message with id={}, data={}\".format(self.id, self.data)", "hash": "d3cb33725906", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 91, "original_size_bytes": 91, "start_byte": 6911, "end_byte": 7002}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:0a9755a042ad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "from_string", "qualified_name": "Message.from_string", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [295, 315], "text": "def from_string(cls, input):\n        \"\"\"Construct message object from raw string input.\n        Parameters\n        ----------\n        input : string\n            Input string to convert to message.\n        \"\"\"\n        id_start = input.find('[') + 1\n        id_end = input.find(']', id_start)\n        id = int(input[id_start:id_end])\n        data_start = input.find('[', id_end) + 1\n        data_end = input.find(']', data_start)\n        data = ''\n        if data_start != -1 and data_end != -1:\n            data = input[data_start:data_end]\n        return cls(id, data)", "hash": "0a9755a042ad", "chunk_type": "method", "node_type": "function_definition", "signature": "from_string(cls, input)", "docstring": "Construct message object from raw string input.\n\n        Parameters\n        ----------\n        input : string\n            Input string to convert to message.", "chunk_size_bytes": 568, "original_size_bytes": 625, "start_byte": 7025, "end_byte": 7650}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:a6018d9721b8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotInfo", "qualified_name": "RobotInfo", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [318, 392], "text": "class RobotInfo:\n    \"\"\"Class for storing metadata about a robot.\n    Attributes\n    ----------\n    model : string\n        Model of robot.\n    revision : int\n        Robot revision.\n    is_virtual : bool\n        True if is a virtual robot.\n    fw_major_rev : int\n        Major firmware revision number.\n    fw_minor_rev : int\n        Minor firmware revision number.\n    fw_patch_num : int\n        Firmware patch number.\n    serial : string\n        Serial identifier of robot.\n    rt_message_capable : bool\n        True if robot is capable of sending real-time monitoring messages.\n    num_joints : int\n        Number of joints on the robot.\n    \"\"\"", "hash": "a6018d9721b8", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing metadata about a robot.\n\n    Attributes\n    ----------\n    model : string\n        Model of robot.\n    revision : int\n        Robot revision.\n    is_virtual : bool\n        True if is a virtual robot.\n    fw_major_rev : int\n        Major firmware revision number.\n    fw_minor_rev : int\n        Minor firmware revision number.\n    fw_patch_num : int\n        Firmware patch number.\n    serial : string\n        Serial identifier of robot.\n    rt_message_capable : bool\n        True if robot is capable of sending real-time monitoring messages.\n    num_joints : int\n        Number of joints on the robot.", "chunk_size_bytes": 648, "original_size_bytes": 650, "start_byte": 7653, "end_byte": 10120}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:d32828e21bb0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotInfo.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [344, 368], "text": "def __init__(self,\n                 model=None,\n                 revision=None,\n                 is_virtual=None,\n                 fw_major_rev=None,\n                 fw_minor_rev=None,\n                 fw_patch_num=None,\n                 serial=None):\n        self.model = model\n        self.revision = revision\n        self.is_virtual = is_virtual\n        self.fw_major_rev = fw_major_rev\n        self.fw_minor_rev = fw_minor_rev\n        self.fw_patch_num = fw_patch_num\n        self.serial = serial\n        self.rt_message_capable = False\n        if self.model == 'Meca500':\n            self.num_joints = 6\n        elif self.mode == 'scara':\n            self.num_joints = 4\n        elif self.model == None:\n            self.num_joints = 1\n        else:\n            raise ValueError('Invalid robot model: {}'.format(self.model))", "hash": "d32828e21bb0", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self,\n                 model=None,\n                 revision=None,\n                 is_virtual=None,\n                 fw_major_rev=None,\n                 fw_minor_rev=None,\n                 fw_patch_num=None,\n                 serial=None)", "docstring": null, "chunk_size_bytes": 830, "original_size_bytes": 831, "start_byte": 8309, "end_byte": 9140}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:149962e15b0b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "from_command_response_string", "qualified_name": "RobotInfo.from_command_response_string", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [371, 392], "text": "def from_command_response_string(cls, input_string):\n        \"\"\"Generate robot state from standard robot response string.\n        String format should be \"Connected to {model} R{revision}{-virtual} v{fw_major_num}.{fw_minor_num}.{patch_num}\"\n        Parameters\n        ----------\n        input_string : string\n            Input string to be parsed.\n        \"\"\"\n        robot_info_regex = re.compile(r'Connected to (\\b.*\\b) R(\\d)(-virtual)? v(\\d+)\\.(\\d+)\\.(\\d+)')\n        try:\n            matches = robot_info_regex.match(input_string).groups()\n            return cls(model=matches[0],\n                       revision=int(matches[1]),\n                       is_virtual=(matches[2] != None),\n                       fw_major_rev=int(matches[3]),\n                       fw_minor_rev=int(matches[4]),\n                       fw_patch_num=int(matches[5]))\n        except:\n            raise ValueError('Could not parse robot info string {}'.format(input_string))", "hash": "149962e15b0b", "chunk_type": "method", "node_type": "function_definition", "signature": "from_command_response_string(cls, input_string)", "docstring": "Generate robot state from standard robot response string.\n\n        String format should be \"Connected to {model} R{revision}{-virtual} v{fw_major_num}.{fw_minor_num}.{patch_num}\"\n\n        Parameters\n        ----------\n        input_string : string\n            Input string to be parsed.", "chunk_size_bytes": 954, "original_size_bytes": 957, "start_byte": 9163, "end_byte": 10120}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:9fd9ca2e2a25", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotState", "qualified_name": "RobotState", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [395, 487], "text": "class RobotState:\n    \"\"\"Class for storing the internal state of a generic Mecademic robot.\n    Note that the recency and availability of the states which are not 'status fields' depends on the monitoring\n    interval and which monitoring events are enabled. Monitoring events can be configured using SetMonitoringInterval()\n    and SetRealTimeMonitoring().\n    Attributes\n    ----------\n    target_joint_positions : TimestampedData\n        Controller desired joint positions in degrees [theta_1...6], includes timestamp.\n    target_end_effector_pose : TimestampedData\n        Controller desired end effector pose [x, y, z, alpha, beta, gamma], includes timestamp.\n    target_joint_velocity : TimestampedData\n        Controller desired joint velocity in degrees/second [theta_dot_1...6], includes timestamp.\n    target_end_effector_velocity : TimestampedData\n        Controller desired end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z]\n    target_joint_configurations : TimestampedData\n        Controller joint configuration that corresponds to desired joint positions.\n    target_last_joint_turn : TimestampedData\n        Controller last joint turn number that corresponds to desired joint positions.\n    drive_joint_positions : TimestampedData\n        Drive-measured joint positions in degrees [theta_1...6], includes timestamp.\n    drive_end_effector_pose : TimestampedData\n        Drive-measured end effector pose [x, y, z, alpha, beta, gamma], includes timestamp.\n    drive_joint_velocity : TimestampedData\n        Drive-measured joint velocity in degrees/second [theta_dot_1...6], includes timestamp.\n    drive_joint_torque_ratio : TimestampedData\n        Drive-measured torque ratio as a percent of maximum [torque_1...6], includes timestamp.\n    drive_end_effector_velocity : TimestampedData\n        Drive-measured end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z]\n    drive_joint_configurations : TimestampedData\n        Controller joint configuration that corresponds to drives-measured joint positions.\n    drive_last_joint_turn : TimestampedData\n        Controller last joint turn number that corresponds to drives-measured joint positions.\n    accelerometer : TimestampedData\n        Raw accelerometer measurements [accelerometer_id, x, y, z]. 16000 = 1g.\n    activation_state : boolean\n        True if the robot is activated.\n    homing_state : boolean\n        True if the robot is homed.\n    simulation_mode : boolean\n        True if the robot is in simulation-only mode.\n    error_status : boolean\n        True if the robot is in error.\n    pause_motion_status : boolean\n        True if motion is currently paused.\n    end_of_block_status : boolean\n        True if robot is not moving and motion queue is empty.\n    \"\"\"", "hash": "9fd9ca2e2a25", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the internal state of a generic Mecademic robot.\n\n    Note that the recency and availability of the states which are not 'status fields' depends on the monitoring\n    interval and which monitoring events are enabled. Monitoring events can be configured using SetMonitoringInterval()\n    and SetRealTimeMonitoring().\n\n    Attributes\n    ----------\n    target_joint_positions : TimestampedData\n        Controller desired joint positions in degrees [theta_1...6], includes timestamp.\n    target_end_effector_pose : TimestampedData\n        Controller desired end effector pose [x, y, z, alpha, beta, gamma], includes timestamp.\n\n    target_joint_velocity : TimestampedData\n        Controller desired joint velocity in degrees/second [theta_dot_1...6], includes timestamp.\n    target_end_effector_velocity : TimestampedData\n        Controller desired end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z]\n    target_joint_configurations : TimestampedData\n        Controller joint configuration that corresponds to desired joint positions.\n    target_last_joint_turn : TimestampedData\n        Controller last joint turn number that corresponds to desired joint positions.\n\n    drive_joint_positions : TimestampedData\n        Drive-measured joint positions in degrees [theta_1...6], includes timestamp.\n    drive_end_effector_pose : TimestampedData\n        Drive-measured end effector pose [x, y, z, alpha, beta, gamma], includes timestamp.\n\n    drive_joint_velocity : TimestampedData\n        Drive-measured joint velocity in degrees/second [theta_dot_1...6], includes timestamp.\n    drive_joint_torque_ratio : TimestampedData\n        Drive-measured torque ratio as a percent of maximum [torque_1...6], includes timestamp.\n    drive_end_effector_velocity : TimestampedData\n        Drive-measured end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z]\n\n    drive_joint_configurations : TimestampedData\n        Controller joint configuration that corresponds to drives-measured joint positions.\n    drive_last_joint_turn : TimestampedData\n        Controller last joint turn number that corresponds to drives-measured joint positions.\n\n    accelerometer : TimestampedData\n        Raw accelerometer measurements [accelerometer_id, x, y, z]. 16000 = 1g.\n\n    activation_state : boolean\n        True if the robot is activated.\n    homing_state : boolean\n        True if the robot is homed.\n    simulation_mode : boolean\n        True if the robot is in simulation-only mode.\n    error_status : boolean\n        True if the robot is in error.\n    pause_motion_status : boolean\n        True if motion is currently paused.\n    end_of_block_status : boolean\n        True if robot is not moving and motion queue is empty.", "chunk_size_bytes": 2977, "original_size_bytes": 2986, "start_byte": 10123, "end_byte": 14933}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:c05d7bc91236", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotState.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [455, 487], "text": "def __init__(self, num_joints):\n        self.target_joint_positions = TimestampedData.zeros(num_joints)  # microseconds timestamp, degrees\n        self.target_end_effector_pose = TimestampedData.zeros(6)  # microseconds timestamp, mm and degrees\n        self.target_joint_velocity = TimestampedData.zeros(num_joints)  # microseconds timestamp, degrees/second\n        self.target_end_effector_velocity = TimestampedData.zeros(6)  # microseconds timestamp, mm/s and deg/s\n        self.target_joint_configurations = TimestampedData.zeros(3)\n        self.target_last_joint_turn = TimestampedData.zeros(1)\n        self.drive_joint_positions = TimestampedData.zeros(num_joints)  # microseconds timestamp, degrees\n        self.drive_end_effector_pose = TimestampedData.zeros(6)  # microseconds timestamp, mm and degrees\n        self.drive_joint_velocity = TimestampedData.zeros(num_joints)  # microseconds timestamp, degrees/second\n        self.drive_joint_torque_ratio = TimestampedData.zeros(num_joints)  # microseconds timestamp, percent of maximum\n        self.drive_end_effector_velocity = TimestampedData.zeros(6)  # microseconds timestamp, mm/s and deg/s\n        self.drive_joint_configurations = TimestampedData.zeros(3)\n        self.drive_last_joint_turn = TimestampedData.zeros(1)\n        self.accelerometer = dict()  # 16000 = 1g\n        self.max_queue_size = 0\n        self.activation_state = False\n        self.homing_state = False\n        self.simulation_mode = False\n        self.error_status = False\n        self.pause_motion_status = False\n        self.end_of_block_status = False", "hash": "c05d7bc91236", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, num_joints)", "docstring": null, "chunk_size_bytes": 1590, "original_size_bytes": 1818, "start_byte": 13115, "end_byte": 14933}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:6973e463b692", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotEvents", "qualified_name": "RobotEvents", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [490, 613], "text": "class RobotEvents:\n    \"\"\"Class for storing possible status events for the generic Mecademic robot.\n    Attributes\n    ----------\n    on_connected : event\n        Set if robot is connected.\n    on_disconnected : event\n        Set if robot is disconnected.\n    on_status_updated : event\n        Set if robot status is updated.\n    on_activated : event\n        Set if robot is activated.\n    on_deactivated : event\n        Set if robot is deactivated.\n    on_homed : event\n        Set if robot is homed.\n    on_error : event\n        Set if robot is in error.\n    on_error_reset : event\n        Set if robot error has been reset.\n    on_p_stop : event\n        Set if robot receives pstop.\n    on_pstop_reset : event\n        Set if pstop is reset.\n    on_motion_paused : event\n        Set if robot motion is paused.\n    on_motion_resumed : event\n        Set if robot motion is not paused.\n    on_motion_cleared : event\n        Set if there are no pending ClearMotion commands.\n    on_activate_sim : event\n        Set if robot is in sim mode.\n    on_deactivate_sim : event\n        Set if robot is not in sim mode.\n    on_conf_updated : event\n        Set if robot configuration has been updated.\n    on_conf_turn_updated : event\n        Set if last joint turn number has been updated.\n    on_joints_updated : event\n        Set if joint angles has been updated.\n    on_pose_updated : event\n        Set if robot pose has been updated.\n    on_brakes_activated : event\n        Set if brakes are activated.\n    on_brakes_deactivated : event\n        Set if brakes are deactivated.\n    on_offline_program_started : event\n        Set if there has been a change in the offline program state.\n    on_end_of_block : event\n        Set if end of block has been reached.\n    \"\"\"", "hash": "6973e463b692", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing possible status events for the generic Mecademic robot.\n\n    Attributes\n    ----------\n    on_connected : event\n        Set if robot is connected.\n    on_disconnected : event\n        Set if robot is disconnected.\n    on_status_updated : event\n        Set if robot status is updated.\n    on_activated : event\n        Set if robot is activated.\n    on_deactivated : event\n        Set if robot is deactivated.\n    on_homed : event\n        Set if robot is homed.\n    on_error : event\n        Set if robot is in error.\n    on_error_reset : event\n        Set if robot error has been reset.\n    on_p_stop : event\n        Set if robot receives pstop.\n    on_pstop_reset : event\n        Set if pstop is reset.\n    on_motion_paused : event\n        Set if robot motion is paused.\n    on_motion_resumed : event\n        Set if robot motion is not paused.\n    on_motion_cleared : event\n        Set if there are no pending ClearMotion commands.\n    on_activate_sim : event\n        Set if robot is in sim mode.\n    on_deactivate_sim : event\n        Set if robot is not in sim mode.\n    on_conf_updated : event\n        Set if robot configuration has been updated.\n    on_conf_turn_updated : event\n        Set if last joint turn number has been updated.\n    on_joints_updated : event\n        Set if joint angles has been updated.\n    on_pose_updated : event\n        Set if robot pose has been updated.\n    on_brakes_activated : event\n        Set if brakes are activated.\n    on_brakes_deactivated : event\n        Set if brakes are deactivated.\n    on_offline_program_started : event\n        Set if there has been a change in the offline program state.\n    on_end_of_block : event\n        Set if end of block has been reached.", "chunk_size_bytes": 1758, "original_size_bytes": 1760, "start_byte": 14936, "end_byte": 18913}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:864fc06e1be9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotEvents.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [544, 591], "text": "def __init__(self):\n        self.on_connected = InterruptableEvent()\n        self.on_disconnected = InterruptableEvent()\n        self.on_status_updated = InterruptableEvent()\n        self.on_activated = InterruptableEvent()\n        self.on_deactivated = InterruptableEvent()\n        self.on_homed = InterruptableEvent()\n        self.on_error = InterruptableEvent()\n        self.on_error_reset = InterruptableEvent()\n        self.on_p_stop = InterruptableEvent()\n        self.on_p_stop_reset = InterruptableEvent()\n        self.on_motion_paused = InterruptableEvent()\n        self.on_motion_resumed = InterruptableEvent()\n        self.on_motion_cleared = InterruptableEvent()\n        self.on_activate_sim = InterruptableEvent()\n        self.on_deactivate_sim = InterruptableEvent()\n        self.on_conf_updated = InterruptableEvent()\n        self.on_conf_turn_updated = InterruptableEvent()\n        self.on_joints_updated = InterruptableEvent()\n        self.on_pose_updated = InterruptableEvent()\n        self.on_brakes_activated = InterruptableEvent()\n        self.on_brakes_deactivated = InterruptableEvent()\n        self.on_offline_program_started = InterruptableEvent()\n        self.on_end_of_block = InterruptableEvent()\n        self.on_disconnected.set()\n        self.on_deactivated.set()\n        self.on_error_reset.set()\n        self.on_p_stop_reset.set()\n        self.on_motion_resumed.set()\n        self.on_deactivate_sim.set()\n        self.on_status_updated.set()\n        self.on_conf_updated.set()\n        self.on_conf_turn_updated.set()\n        self.on_joints_updated.set()\n        self.on_pose_updated.set()\n        self.on_brakes_activated.set()", "hash": "864fc06e1be9", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 1659, "original_size_bytes": 1671, "start_byte": 16702, "end_byte": 18373}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:785fbc3295d4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_all", "qualified_name": "RobotEvents.clear_all", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [593, 598], "text": "def clear_all(self):\n        \"\"\"Clear all events.\n        \"\"\"\n        for attr in self.__dict__:\n            self.__dict__[attr].clear()", "hash": "785fbc3295d4", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_all(self)", "docstring": "Clear all events.", "chunk_size_bytes": 136, "original_size_bytes": 137, "start_byte": 18379, "end_byte": 18516}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:6e2922c3b2e0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "abort_all_except_on_connected", "qualified_name": "RobotEvents.abort_all_except_on_connected", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [600, 606], "text": "def abort_all_except_on_connected(self):\n        \"\"\"Abort all events, except for on_connected.\n        \"\"\"\n        for attr in self.__dict__:\n            if attr != 'on_connected':\n                self.__dict__[attr].abort()", "hash": "6e2922c3b2e0", "chunk_type": "method", "node_type": "function_definition", "signature": "abort_all_except_on_connected(self)", "docstring": "Abort all events, except for on_connected.", "chunk_size_bytes": 224, "original_size_bytes": 225, "start_byte": 18522, "end_byte": 18747}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:ced217eca007", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_abort_all", "qualified_name": "RobotEvents.clear_abort_all", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [608, 613], "text": "def clear_abort_all(self):\n        \"\"\"Clear aborts for all events.\n        \"\"\"\n        for attr in self.__dict__:\n            self.__dict__[attr].clear_abort()", "hash": "ced217eca007", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_abort_all(self)", "docstring": "Clear aborts for all events.", "chunk_size_bytes": 159, "original_size_bytes": 160, "start_byte": 18753, "end_byte": 18913}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:e93fc87980d6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotCallbacks", "qualified_name": "RobotCallbacks", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [616, 689], "text": "class RobotCallbacks:\n    \"\"\"Class for storing possible status events for the generic Mecademic robot.\n    Attributes\n    ----------\n        on_connected : function object\n            Function to be called once connected.\n        on_disconnected : function object\n            Function to be called once disconnected.\n        on_status_updated : function object\n            Function to be called once status is updated.\n        on_activated : function object\n            Function to be called once activated.\n        on_deactivated : function object\n            Function to be called once deactivated.\n        on_homed : function object\n            Function to be called once homing is complete.\n        on_error : function object\n            Function to be called if robot enters an error state.\n        on_error_reset : function object\n            Function to be called once error is reset.\n        on_p_stop : function object\n            Function to be called if PStop is activated.\n        on_p_stop_reset : function object\n            Function to be called if PStop is reset.\n        on_motion_paused : function object\n            Function to be called once motion is paused.\n        on_motion_cleared : function object\n            Function to be called once motion is cleared.\n        on_motion_resumed : function object\n            Function to be called once motion is resumed.\n        on_checkpoint_reached : function object\n            Function to be called if a checkpoint is reached.\n        on_activate_sim : function object\n            Function to be called once sim mode is activated.\n        on_deactivate_sim : function object\n            Function to be called once sim mode is deactivated.\n        on_command_message : function object\n            Function to be called each time a command response is received.\n        on_monitor_message : function object\n            Function to be called each time a monitor response is received.\n        on_offline_program_state : function object\n            Function to be called each time an offline program starts or fails to start.\n    \"\"\"", "hash": "e93fc87980d6", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing possible status events for the generic Mecademic robot.\n\n    Attributes\n    ----------\n        on_connected : function object\n            Function to be called once connected.\n        on_disconnected : function object\n            Function to be called once disconnected.\n        on_status_updated : function object\n            Function to be called once status is updated.\n        on_activated : function object\n            Function to be called once activated.\n        on_deactivated : function object\n            Function to be called once deactivated.\n        on_homed : function object\n            Function to be called once homing is complete.\n        on_error : function object\n            Function to be called if robot enters an error state.\n        on_error_reset : function object\n            Function to be called once error is reset.\n        on_p_stop : function object\n            Function to be called if PStop is activated.\n        on_p_stop_reset : function object\n            Function to be called if PStop is reset.\n        on_motion_paused : function object\n            Function to be called once motion is paused.\n        on_motion_cleared : function object\n            Function to be called once motion is cleared.\n        on_motion_resumed : function object\n            Function to be called once motion is resumed.\n        on_checkpoint_reached : function object\n            Function to be called if a checkpoint is reached.\n        on_activate_sim : function object\n            Function to be called once sim mode is activated.\n        on_deactivate_sim : function object\n            Function to be called once sim mode is deactivated.\n        on_command_message : function object\n            Function to be called each time a command response is received.\n        on_monitor_message : function object\n            Function to be called each time a monitor response is received.\n        on_offline_program_state : function object\n            Function to be called each time an offline program starts or fails to start.", "chunk_size_bytes": 2095, "original_size_bytes": 2096, "start_byte": 18916, "end_byte": 21732}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:f752d4a99390", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotCallbacks.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [661, 689], "text": "def __init__(self):\n        self.on_connected = None\n        self.on_disconnected = None\n        self.on_status_updated = None\n        self.on_activated = None\n        self.on_deactivated = None\n        self.on_homed = None\n        self.on_error = None\n        self.on_error_reset = None\n        self.on_p_stop = None\n        self.on_p_stop_reset = None\n        self.on_motion_paused = None\n        self.on_motion_cleared = None\n        self.on_motion_resumed = None\n        self.on_checkpoint_reached = None\n        self.on_activate_sim = None\n        self.on_deactivate_sim = None\n        self.on_command_message = None\n        self.on_monitor_message = None\n        self.on_offline_program_state = None", "hash": "f752d4a99390", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 705, "original_size_bytes": 714, "start_byte": 21018, "end_byte": 21732}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:595ae74840d2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "CallbackQueue", "qualified_name": "CallbackQueue", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [692, 747], "text": "class CallbackQueue():\n    \"\"\"Queue class for storing triggered callbacks. Only registered callbacks are added to the queue.\n    Attributes\n    ----------\n    _queue : queue\n        Queue to use to store callback names and associated data.\n    _registered_callbacks : set\n        Set of names of registered callbacks.\n    \"\"\"", "hash": "595ae74840d2", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Queue class for storing triggered callbacks. Only registered callbacks are added to the queue.\n\n    Attributes\n    ----------\n    _queue : queue\n        Queue to use to store callback names and associated data.\n    _registered_callbacks : set\n        Set of names of registered callbacks.", "chunk_size_bytes": 325, "original_size_bytes": 327, "start_byte": 21735, "end_byte": 23309}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:afee7e5b0384", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "CallbackQueue.__init__", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [704, 710], "text": "def __init__(self, robot_callbacks):\n        self._queue = queue.Queue()\n        self._registered_callbacks = set()\n        for attr in robot_callbacks.__dict__:\n            if robot_callbacks.__dict__[attr] != None:\n                self._registered_callbacks.add(attr)", "hash": "afee7e5b0384", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot_callbacks)", "docstring": null, "chunk_size_bytes": 269, "original_size_bytes": 270, "start_byte": 22068, "end_byte": 22338}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:b24a14c9c9d8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "qsize", "qualified_name": "CallbackQueue.qsize", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [712, 716], "text": "def qsize(self):\n        \"\"\"Returns the queue size.\n        \"\"\"\n        return self._queue.qsize()", "hash": "b24a14c9c9d8", "chunk_type": "method", "node_type": "function_definition", "signature": "qsize(self)", "docstring": "Returns the queue size.", "chunk_size_bytes": 98, "original_size_bytes": 99, "start_byte": 22344, "end_byte": 22443}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:22c89fb0c71c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "put", "qualified_name": "CallbackQueue.put", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [718, 730], "text": "def put(self, callback_name, data=None):\n        \"\"\"Put the callback name and associated data into the queue if is registered.\n        Parameters\n        ----------\n        callback_name : str\n            Name of callback.\n        data : any object type\n            Associated data.\n        \"\"\"\n        if callback_name in self._registered_callbacks or callback_name == TERMINATE:\n            self._queue.put((callback_name, data))", "hash": "22c89fb0c71c", "chunk_type": "method", "node_type": "function_definition", "signature": "put(self, callback_name, data=None)", "docstring": "Put the callback name and associated data into the queue if is registered.\n\n        Parameters\n        ----------\n        callback_name : str\n            Name of callback.\n        data : any object type\n            Associated data.", "chunk_size_bytes": 431, "original_size_bytes": 433, "start_byte": 22449, "end_byte": 22882}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:4a13fa07f7c8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get", "qualified_name": "CallbackQueue.get", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [732, 747], "text": "def get(self, block=False, timeout=None):\n        \"\"\"Get the next callback in the queue.\n        Parameters\n        ----------\n        block : bool\n            Block on next available callback if true.\n        timeout : float\n            Maximum time to wait on a callback.\n        Returns\n        -------\n        tuple of callback name and data\n        \"\"\"\n        return self._queue.get(block=block, timeout=timeout)", "hash": "4a13fa07f7c8", "chunk_type": "method", "node_type": "function_definition", "signature": "get(self, block=False, timeout=None)", "docstring": "Get the next callback in the queue.\n\n        Parameters\n        ----------\n        block : bool\n            Block on next available callback if true.\n        timeout : float\n            Maximum time to wait on a callback.\n\n        Returns\n        -------\n        tuple of callback name and data", "chunk_size_bytes": 418, "original_size_bytes": 421, "start_byte": 22888, "end_byte": 23309}
{"chunk_id": "meca_samples:sample-programs/Python/HandGuiding/robot_common.py:8254c5920306", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "string_to_floats", "qualified_name": "string_to_floats", "source_path": "sample-programs/Python/HandGuiding/robot_common.py", "loc": [750, 764], "text": "def string_to_floats(input_string):\n    \"\"\"Convert comma-separated floats in string form to list of floats.\n    Parameters\n    ----------\n    input_string : string\n        Comma-separated floats values encoded as a string.\n    Returns\n    -------\n    list of floats\n        Returns converted list of floats.\n    \"\"\"\n    return [float(x) for x in input_string.split(',')]", "hash": "8254c5920306", "chunk_type": "function", "node_type": "function_definition", "signature": "string_to_floats(input_string)", "docstring": "Convert comma-separated floats in string form to list of floats.\n\n    Parameters\n    ----------\n    input_string : string\n        Comma-separated floats values encoded as a string.\n\n    Returns\n    -------\n    list of floats\n        Returns converted list of floats.", "chunk_size_bytes": 370, "original_size_bytes": 373, "start_byte": 23312, "end_byte": 23685}
