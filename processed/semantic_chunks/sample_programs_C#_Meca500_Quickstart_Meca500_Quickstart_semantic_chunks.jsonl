{"chunk_id": "meca_samples:sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs:da8982440e79", "repo": "meca_samples", "commit": "806f144", "lang": "csharp", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs", "loc": [1, 1], "text": "using System;", "hash": "da8982440e79", "chunk_type": "other", "node_type": "using_directive", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 0, "end_byte": 13}
{"chunk_id": "meca_samples:sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs:6dbacf02f2da", "repo": "meca_samples", "commit": "806f144", "lang": "csharp", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs", "loc": [2, 2], "text": "using System.Net.Sockets;", "hash": "6dbacf02f2da", "chunk_type": "other", "node_type": "using_directive", "signature": null, "docstring": null, "chunk_size_bytes": 25, "original_size_bytes": 25, "start_byte": 14, "end_byte": 39}
{"chunk_id": "meca_samples:sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs:04521bb05ea3", "repo": "meca_samples", "commit": "806f144", "lang": "csharp", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs", "loc": [3, 3], "text": "using System.Text;", "hash": "04521bb05ea3", "chunk_type": "other", "node_type": "using_directive", "signature": null, "docstring": null, "chunk_size_bytes": 18, "original_size_bytes": 18, "start_byte": 40, "end_byte": 58}
{"chunk_id": "meca_samples:sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs:7be9a2393e56", "repo": "meca_samples", "commit": "806f144", "lang": "csharp", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs", "loc": [4, 4], "text": "using System.Threading;", "hash": "7be9a2393e56", "chunk_type": "other", "node_type": "using_directive", "signature": null, "docstring": null, "chunk_size_bytes": 23, "original_size_bytes": 23, "start_byte": 59, "end_byte": 82}
{"chunk_id": "meca_samples:sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs:4b2c6104c0f2", "repo": "meca_samples", "commit": "806f144", "lang": "csharp", "symbol": "Meca500Examples", "qualified_name": "Meca500Examples", "source_path": "sample-programs/C#/Meca500-Quickstart/Meca500-Quickstart.cs", "loc": [6, 233], "text": "namespace Meca500Examples\n{\n    class Meca500QuickStart\n    {\n        const string ROBOT_IP = \"192.168.0.100\";\n        const int ROBOT_PORT = 10000;\n        const double SAFE_Z_HEIGHT = 200;  // Safe height to avoid collisions\n        const double MOVE_SPEED = 25;      // Movement speed percentage (0-100)\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"=== Meca500 Quick Start Example ===\\n\");\n            TcpClient? client = null;\n            NetworkStream? stream = null;\n            try\n            {\n                Console.WriteLine($\"[1] Connecting to robot at {ROBOT_IP}:{ROBOT_PORT}...\");\n                client = new TcpClient();\n                var result = client.BeginConnect(ROBOT_IP, ROBOT_PORT, null, null);\n                var success = result.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5));\n                if (!success)\n                {\n                    throw new Exception(\"Connection timeout - check robot IP and network connection\");\n                }\n                client.EndConnect(result);\n                stream = client.GetStream();\n                Console.WriteLine(\"    \u2713 Connected successfully!\\n\");\n                Thread.Sleep(500);\n                Console.WriteLine(\"[2] Activating robot...\");\n                SendCommand(stream, \"ActivateRobot\");\n                Console.WriteLine(\"    - Command sent, waiting for activation...\");\n                Thread.Sleep(3000);\n                Console.WriteLine(\"    \u2713 Robot activated!\\n\");\n                Console.WriteLine(\"[3] Homing robot...\");\n                SendCommand(stream, \"Home\");\n                Console.WriteLine(\"    - Homing in progress...\");\n                WaitForResponse(stream, \"[2002][Homing done.]\");\n                Console.WriteLine(\"    \u2713 Robot homed!\\n\");\n                Console.WriteLine(\"[4] Setting motion parameters...\");\n                SendCommand(stream, $\"SetJointVel({MOVE_SPEED})\");\n                Thread.Sleep(100);\n                SendCommand(stream, $\"SetCartLinVel({MOVE_SPEED})\");\n                Thread.Sleep(100);\n                SendCommand(stream, \"ResumeMotion\");\n                Thread.Sleep(100);\n                Console.WriteLine(\"    \u2713 Motion parameters set!\\n\");\n                Console.WriteLine(\"[5] Performing test movements...\");\n                Console.WriteLine(\"    WARNING: Robot will move! Ensure area is clear.\");\n                Console.WriteLine(\"    Press any key to continue...\");\n                Console.ReadKey();\n                Console.WriteLine(\"\\n    - Getting current position...\");\n                SendCommand(stream, \"GetPose\");\n                Thread.Sleep(500);  // In production, you'd read the response\n                Console.WriteLine($\"    - Moving to safe position (Z={SAFE_Z_HEIGHT}mm)...\");\n                SendCommand(stream, $\"MovePose(190, 0, {SAFE_Z_HEIGHT}, 0, 90, 0)\");\n                Thread.Sleep(5000);\n                Console.WriteLine(\"    \u2713 Reached safe position\");\n                Console.WriteLine(\"    - Executing square pattern...\");\n                SendCommand(stream, $\"MovePose(100, 100, {SAFE_Z_HEIGHT}, 0, 90, 0)\");\n                Thread.Sleep(3000);\n                SendCommand(stream, $\"MovePose(100, -100, {SAFE_Z_HEIGHT}, 0, 90, 0)\");\n                Thread.Sleep(5000);\n                SendCommand(stream, $\"MovePose(200, -100, {SAFE_Z_HEIGHT}, 0, 90, 0)\");\n                Thread.Sleep(3000);\n                SendCommand(stream, $\"MovePose(200, 100, {SAFE_Z_HEIGHT}, 0, 90, 0)\");\n                Thread.Sleep(3000);\n                SendCommand(stream, $\"MovePose(190, 0, {SAFE_Z_HEIGHT}, 0, 90, 0)\");\n                Thread.Sleep(3000);\n                Console.WriteLine(\"    \u2713 Test movements complete!\\n\");\n                Console.WriteLine(\"[6] Deactivating robot...\");\n                SendCommand(stream, \"DeactivateRobot\");\n                Thread.Sleep(2000);\n                Console.WriteLine(\"    \u2713 Robot deactivated\\n\");\n                Console.WriteLine(\"=== Quick Start Example Complete! ===\");\n                Console.WriteLine(\"\\nNext steps:\");\n                Console.WriteLine(\"- Try modifying the movement positions\");\n                Console.WriteLine(\"- Add error checking with GetStatusRobot\");\n                Console.WriteLine(\"- Explore other commands in the Meca500 manual\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"\\n!!! ERROR: {ex.Message}\");\n                Console.WriteLine(\"\\nTroubleshooting:\");\n                Console.WriteLine(\"1. Check robot IP address in configuration\");\n                Console.WriteLine(\"2. Ensure robot is powered on and connected to network\");\n                Console.WriteLine(\"3. Verify no other application is connected to robot\");\n                Console.WriteLine(\"4. Check robot is not in error state (red LED)\");\n            }\n            finally\n            {\n                Console.WriteLine(\"\\n[7] Closing connection...\");\n                if (stream != null)\n                {\n                    stream.Close();\n                    stream.Dispose();\n                }\n                if (client != null)\n                {\n                    client.Close();\n                    client.Dispose();\n                }\n                Console.WriteLine(\"    \u2713 Connection closed\\n\");\n                Console.WriteLine(\"Press any key to exit...\");\n                Console.ReadKey();\n            }\n        }\n        static void SendCommand(NetworkStream stream, string command)\n        {\n            byte[] data = Encoding.ASCII.GetBytes(command + \"\\0\");\n            stream.Write(data, 0, data.Length);\n            stream.Flush();\n            Console.WriteLine($\"    \u2192 Sent: {command}\");\n        }\n        static void WaitForResponse(NetworkStream stream, string expectedResponse)\n        {\n            byte[] buffer = new byte[1024];\n            var responseBuilder = new StringBuilder();\n            while (true)\n            {\n                if (stream.DataAvailable)\n                {\n                    int bytesRead = stream.Read(buffer, 0, buffer.Length);\n                    string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);\n                    responseBuilder.Append(response);\n                    string fullResponse = responseBuilder.ToString();\n                    Console.WriteLine($\"    \u2190 Received: {response.Trim()}\");\n                    if (fullResponse.Contains(expectedResponse))\n                    {\n                        break;\n                    }\n                }\n                Thread.Sleep(100); // Small delay to avoid busy waiting\n            }\n        }\n    }\n}", "hash": "4b2c6104c0f2", "chunk_type": "other", "node_type": "namespace_declaration", "signature": null, "docstring": null, "chunk_size_bytes": 6657, "original_size_bytes": 9482, "start_byte": 84, "end_byte": 9566}
