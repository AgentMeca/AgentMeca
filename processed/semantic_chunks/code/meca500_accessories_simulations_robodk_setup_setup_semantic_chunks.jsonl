{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:83d8e9e427df", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "sys", "qualified_name": "sys", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [22, 22], "text": "import sys", "hash": "83d8e9e427df", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 10, "original_size_bytes": 10, "start_byte": 652, "end_byte": 662}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:89ed1aae8d33", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "os", "qualified_name": "os", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [23, 23], "text": "import os", "hash": "89ed1aae8d33", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 9, "original_size_bytes": 9, "start_byte": 663, "end_byte": 672}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:61c01096aa26", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "subprocess", "qualified_name": "subprocess", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [24, 24], "text": "import subprocess", "hash": "61c01096aa26", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 17, "original_size_bytes": 17, "start_byte": 673, "end_byte": 690}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:bd7be0a8646c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "importlib.util", "qualified_name": "importlib.util", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [25, 25], "text": "import importlib.util", "hash": "bd7be0a8646c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 21, "original_size_bytes": 21, "start_byte": 691, "end_byte": 712}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:258e367d7ff5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "argparse", "qualified_name": "argparse", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [26, 26], "text": "import argparse", "hash": "258e367d7ff5", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 15, "original_size_bytes": 15, "start_byte": 713, "end_byte": 728}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:2af44e85a5d9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "check_python_version", "qualified_name": "check_python_version", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [28, 34], "text": "def check_python_version():\n    \"\"\"Check if Python version is compatible\"\"\"\n    if sys.version_info < (3, 6):\n        print(\"ERROR: Python 3.6 or higher is required\")\n        return False\n    print(f\"\u2713 Python version: {sys.version}\")\n    return True", "hash": "2af44e85a5d9", "chunk_type": "function", "node_type": "function_definition", "signature": "check_python_version()", "docstring": "Check if Python version is compatible", "chunk_size_bytes": 249, "original_size_bytes": 253, "start_byte": 730, "end_byte": 981}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:843c1559babd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "eck_robodk_installation()", "qualified_name": "eck_robodk_installation()", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [36, 62], "text": "f check_robodk_installation():\n    \"\"\"Check if RoboDK is installed and accessible\"\"\"\n    try:\n        import robodk.robolink as rl\n        import robodk.robomath as rm\n        print(\"\u2713 RoboDK API is available\")\n        try:\n            RDK = rl.Robolink()\n            if RDK.Valid():\n                print(\"\u2713 RoboDK software is running and accessible\")\n                return True\n            else:\n                print(\"\u26a0 RoboDK software is not running\")\n                print(\"  Please start RoboDK and try again\")\n                return False\n        except Exception as e:\n            print(f\"\u26a0 Cannot connect to RoboDK: {e}\")\n            return False\n    except ImportError:\n        print(\"\u2717 RoboDK API not found\")\n        print(\"  Install with: pip install robodk\")\n        return False\ndef instal", "hash": "843c1559babd", "chunk_type": "function", "node_type": "function_definition", "signature": "eck_robodk_installation():\n", "docstring": "Check if RoboDK is installed and accessible\"\"\"", "chunk_size_bytes": 804, "original_size_bytes": 916, "start_byte": 983, "end_byte": 1889}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:8cbc75dca25d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ndencies():\n    \"\"\"I", "qualified_name": "ndencies():\n    \"\"\"I", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [64, 81], "text": "dependencies():\n    \"\"\"Install required Python packages\"\"\"\n    print(\"Installing Python dependencies...\")\n    try:\n        if os.path.exists(\"requirements.txt\"):\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-r\", \"requirements.txt\"])\n            print(\"\u2713 Dependencies installed successfully\")\n            return True\n        else:\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"robodk\"])\n            print(\"\u2713 RoboDK package installed\")\n            return True\n    except subprocess.CalledProcessError as e:\n        print(f\"\u2717 Failed to install dependencies: {e}\")\n        return False\ndef create_sampl", "hash": "8cbc75dca25d", "chunk_type": "function", "node_type": "function_definition", "signature": "ndencies():\n    \"\"\"Ins", "docstring": "equired Python packages\"\"\"\n    print(", "chunk_size_bytes": 659, "original_size_bytes": 757, "start_byte": 1891, "end_byte": 2642}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:ae5e0e08673a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "space():\n    \"\"\"Create ", "qualified_name": "space():\n    \"\"\"Create ", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [83, 144], "text": "workspace():\n    \"\"\"Create a sample RoboDK workspace with Meca500\"\"\"\n    try:\n        import robodk.robolink as rl\n        import robodk.robomath as rm\n        print(\"Creating sample workspace...\")\n        RDK = rl.Robolink()\n        if not RDK.Valid():\n            print(\"\u2717 Cannot connect to RoboDK\")\n            return False\n        RDK.CloseStation()\n        station = RDK.AddStation(\"Meca500_Sample_Workspace\")\n        print(\"  Adding Meca500 robot...\")\n        robot_file = RDK.getParam(\"PATH_LIBRARY\") + \"/Mecademic-Meca500-R3.robot\"\n        robot = RDK.AddFile(robot_file)\n        if robot.Valid():\n            robot.setName(\"Meca500\")\n            print(\"  \u2713 Meca500 robot added\")\n        else:\n            print(\"  \u26a0 Could not add Meca500 robot from library\")\n            print(\"    Please add Meca500 manually from RoboDK library\")\n        print(\"  Adding sample targets...\")\n        home_target = RDK.AddTarget(\"Home\")\n        home_joints = [0, 0, 0, 0, 0, 0]\n        home_target.setJoints(home_joints)\n        pick_target = RDK.AddTarget(\"Pick\")\n        pick_pose = rm.transl(300, 100, 200)\n        pick_target.setPose(pick_pose)\n        place_target = RDK.AddTarget(\"Place\")\n        place_pose = rm.transl(300, -100, 200)\n        place_target.setPose(place_pose)\n        print(\"  \u2713 Sample targets created\")\n        station_file = os.path.join(os.getcwd(), \"Meca500_Sample.rdk\")\n        RDK.Save(station_file)\n        print(f\"  \u2713 Workspace saved as: {station_file}\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 Failed to create workspace: {e}\")\n        return False\ndef validate_configuration()", "hash": "ae5e0e08673a", "chunk_type": "function", "node_type": "function_definition", "signature": "space():\n    \"\"\"Create a ", "docstring": "RoboDK workspace with Meca500\"\"\"\n    try:", "chunk_size_bytes": 1626, "original_size_bytes": 2006, "start_byte": 2644, "end_byte": 4638}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:b5e21d175862", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "\"\"\"Validate configurat", "qualified_name": "\"\"\"Validate configurat", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [146, 187], "text": "    \"\"\"Validate configuration files\"\"\"\n    print(\"Validating configuration...\")\n    try:\n        if os.path.exists(\"config_template.py\"):\n            print(\"  \u2713 Configuration template found\")\n        else:\n            print(\"  \u26a0 Configuration template not found\")\n            return False\n        if os.path.exists(\"config.py\"):\n            print(\"  \u2713 Configuration file found\")\n            spec = importlib.util.spec_from_file_location(\"config\", \"config.py\")\n            config = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(config)\n            if hasattr(config, 'validate_config'):\n                errors = config.validate_config()\n                if errors:\n                    print(\"  \u2717 Configuration validation failed:\")\n                    for error in errors:\n                        print(f\"    - {error}\")\n                    return False\n                else:\n                    print(\"  \u2713 Configuration validation passed\")\n            else:\n                print(\"  \u26a0 No validation function in config\")\n        else:\n            print(\"  \u26a0 No config.py found\")\n            print(\"    Copy config_template.py to config.py and customize\")\n        return True\n    except Exception as e:\n        print(f\"  \u2717 Configuration validation error: {e}\")\n        return False\ndef check_example_files():\n    \"\"\"Check if e", "hash": "b5e21d175862", "chunk_type": "function", "node_type": "function_definition", "signature": "\"\"\"Validate configuratio", "docstring": "s\"\"\"\n    print(\"Validating configu", "chunk_size_bytes": 1350, "original_size_bytes": 1588, "start_byte": 4640, "end_byte": 6212}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:aae75e1c98e3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": " files are present\"", "qualified_name": " files are present\"", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [189, 208], "text": "mple files are present\"\"\"\n    print(\"Checking example files...\")\n    files_to_check = [\n        \"example_robodk_script.py\",\n        \"requirements.txt\",\n        \"config_template.py\",\n        \"README.md\"\n    ]\n    all_present = True\n    for file_name in files_to_check:\n        if os.path.exists(file_name):\n            print(f\"  \u2713 {file_name}\")\n        else:\n            print(f\"  \u2717 {file_name} - Missing\")\n            all_present = False\n    return all_present\ndef run_system_check():\n    \"\"\"Run complete syst", "hash": "aae75e1c98e3", "chunk_type": "function", "node_type": "function_definition", "signature": " files are present\"\"\"", "docstring": "rint(\"Checking example files...\")", "chunk_size_bytes": 509, "original_size_bytes": 529, "start_byte": 6214, "end_byte": 6739}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:777707de7de3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ck\"\"\"\n    print(", "qualified_name": "ck\"\"\"\n    print(", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [210, 242], "text": " check\"\"\"\n    print(\"RoboDK Meca500 Setup - System Check\")\n    print(\"=\" * 40)\n    checks = [\n        (\"Python Version\", check_python_version),\n        (\"RoboDK Installation\", check_robodk_installation),\n        (\"Example Files\", check_example_files),\n        (\"Configuration\", validate_configuration)\n    ]\n    results = {}\n    for check_name, check_func in checks:\n        print(f\"\\n{check_name}:\")\n        results[check_name] = check_func()\n    print(\"\\n\" + \"=\" * 40)\n    print(\"SYSTEM CHECK SUMMARY:\")\n    all_passed = True\n    for check_name, result in results.items():\n        status = \"PASS\" if result else \"FAIL\"\n        print(f\"  {check_name}: {status}\")\n        if not result:\n            all_passed = False\n    if all_passed:\n        print(\"\\n\u2713 All checks passed! System is ready for RoboDK programming.\")\n    else:\n        print(\"\\n\u26a0 Some checks failed. Please address the issues above.\")\n    return all_passed\ndef show_usage():\n    \"\"\"Show usage instructions\"\"\"", "hash": "777707de7de3", "chunk_type": "function", "node_type": "function_definition", "signature": "ck\"\"\"\n    print(\"R", "docstring": "Meca500 Setup - System Check\")", "chunk_size_bytes": 974, "original_size_bytes": 1010, "start_byte": 6741, "end_byte": 7747}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:ddbffc23fbcb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "int(\"\"\"\nRo", "qualified_name": "int(\"\"\"\nRo", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [244, 266], "text": "  print(\"\"\"\nRoboDK Meca500 Setup Instructions:\n=================================\n1. System Check:\n   python setup.py --check-install\n2. Install Dependencies:\n   python setup.py --install-deps\n3. Create Sample Workspace:\n   python setup.py --create-workspace\n4. Validate Configuration:\n   python setup.py --validate-config\n5. Run Example:\n   python example_robodk_script.py\nFor more information, see README.md\n\"\"\")\ndef main():\n    \"\"\"Main setup function\"\"\"\n    parser", "hash": "ddbffc23fbcb", "chunk_type": "function", "node_type": "function_definition", "signature": "int(\"\"\"\nRobo", "docstring": "a500 Setup Instructions:\n====", "chunk_size_bytes": 466, "original_size_bytes": 473, "start_byte": 7749, "end_byte": 8222}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/setup.py:12e8db200e94", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pars", "qualified_name": "pars", "source_path": "meca500-accessories/simulations/robodk-setup/setup.py", "loc": [268, 311], "text": " argparse.ArgumentParser(description=\"RoboDK Meca500 Setup Script\")\n    parser.add_argument(\"--check-install\", action=\"store_true\", \n                       help=\"Check RoboDK installation and system\")\n    parser.add_argument(\"--install-deps\", action=\"store_true\",\n                       help=\"Install Python dependencies\")\n    parser.add_argument(\"--create-workspace\", action=\"store_true\",\n                       help=\"Create sample RoboDK workspace\")\n    parser.add_argument(\"--validate-config\", action=\"store_true\",\n                       help=\"Validate configuration files\")\n    parser.add_argument(\"--all\", action=\"store_true\",\n                       help=\"Run all setup steps\")\n    args = parser.parse_args()\n    if not any(vars(args).values()):\n        show_usage()\n        return\n    success = True\n    if args.check_install or args.all:\n        success &= run_system_check()\n    if args.install_deps or args.all:\n        print(\"\\nInstalling Dependencies:\")\n        success &= install_dependencies()\n    if args.create_workspace or args.all:\n        print(\"\\nCreating Sample Workspace:\")\n        success &= create_sample_workspace()\n    if args.validate_config or args.all:\n        print(\"\\nValidating Configuration:\")\n        success &= validate_configuration()\n    if success:\n        print(\"\\n\u2713 Setup completed successfully!\")\n        print(\"You can now run: python example_robodk_script.py\")\n    else:\n        print(\"\\n\u26a0 Setup completed with some issues.\")\n        print(\"Please check the error messages above.\")\nif __name__ == \"__main__\":\n    main()", "hash": "12e8db200e94", "chunk_type": "function", "node_type": "function_definition", "signature": "parse.", "docstring": "ntParser(description=\"Rob", "chunk_size_bytes": 1561, "original_size_bytes": 1649, "start_byte": 8224, "end_byte": 9888}
