{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:482430f661c2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ModbusTcpClient", "qualified_name": "ModbusTcpClient", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [1, 1], "text": "from pymodbus.client.sync import ModbusTcpClient", "hash": "482430f661c2", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 48, "original_size_bytes": 48, "start_byte": 0, "end_byte": 48}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:96269dfe372b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MoxaE1212", "qualified_name": "MoxaE1212", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [3, 153], "text": "class MoxaE1212:\n    \"\"\"Class to interface with the MOXA ioLogik E1212 External IO Module.\n    https://www.moxa.com/en/products/industrial-edge-connectivity/controllers-and-ios/universal-controllers-and-i-os/iologik-e1200-series/iologik-e1212\n    Attributes\n    ----------\n    modbusConnection : ModbusTcpClient object\n        The Modbus object from the pymodbus library used to communicate with the device.\n    outputStatus : list of bool\n        The current status of the digital outputs of the MOXA E1212.\n    address : string\n        The IP address of the device.\n    \"\"\"", "hash": "96269dfe372b", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class to interface with the MOXA ioLogik E1212 External IO Module.\n    https://www.moxa.com/en/products/industrial-edge-connectivity/controllers-and-ios/universal-controllers-and-i-os/iologik-e1200-series/iologik-e1212\n\n    Attributes\n    ----------\n    modbusConnection : ModbusTcpClient object\n        The Modbus object from the pymodbus library used to communicate with the device.\n    outputStatus : list of bool\n        The current status of the digital outputs of the MOXA E1212.\n    address : string\n        The IP address of the device.", "chunk_size_bytes": 575, "original_size_bytes": 577, "start_byte": 50, "end_byte": 5002}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:4ea4c8c7bdb9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "MoxaE1212.__init__", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [17, 21], "text": "def __init__(self):\n        \"\"\"Constructor for an instance of the MoxaE1212 class.\"\"\"\n        self.address = None\n        self.outputStatus = [False, False, False, False, False, False, False, False]", "hash": "4ea4c8c7bdb9", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": "Constructor for an instance of the MoxaE1212 class.", "chunk_size_bytes": 198, "original_size_bytes": 199, "start_byte": 632, "end_byte": 831}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:726ac6fd547f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_getoutputstatus", "qualified_name": "MoxaE1212._getoutputstatus", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [24, 34], "text": "def _getoutputstatus(self):\n        \"\"\"Private method to get the actual status of the digital outputs. This is done once in the constructor.\"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return\n        rq = self.modbusConnection.read_coils(0, 8)\n        if rq.isError():\n            print(\"Could not get the values\")\n        self.outputStatus = rq.bits\n        return", "hash": "726ac6fd547f", "chunk_type": "method", "node_type": "function_definition", "signature": "_getoutputstatus(self)", "docstring": "Private method to get the actual status of the digital outputs. This is done once in the constructor.", "chunk_size_bytes": 452, "original_size_bytes": 452, "start_byte": 838, "end_byte": 1290}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:8c091e7477ba", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "connect", "qualified_name": "MoxaE1212.connect", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [36, 50], "text": "def connect(self, address):\n        \"\"\"Attempts to connect to the device.\n        Return\n        ------\n        Bool\n            True if connected, False otherwise.\n        \"\"\"\n        self.address = address\n        self.modbusConnection = ModbusTcpClient(address)\n        r = self.modbusConnection.connect()\n        if not r:\n            print(\"Could not connect to the module.\")\n            return r\n        self._getoutputstatus()\n        return r", "hash": "8c091e7477ba", "chunk_type": "method", "node_type": "function_definition", "signature": "connect(self, address)", "docstring": "Attempts to connect to the device.\n        Return\n        ------\n        Bool\n            True if connected, False otherwise.", "chunk_size_bytes": 450, "original_size_bytes": 450, "start_byte": 1296, "end_byte": 1746}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:867bc68da62d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "setsingleoutput", "qualified_name": "MoxaE1212.setsingleoutput", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [52, 79], "text": "def setsingleoutput(self, pos, value):\n        \"\"\"Sets a single output to the desired value.\n        Parameters\n        ----------\n        pos : int\n            Number of the output to set.\n        value : Bool\n            True to set to High, False to set to Low.\n        Return\n        ------\n        Bool\n            True if output was set correctly, False otherwise.\n        \"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return False\n        try:\n            self.outputStatus[pos] = value\n        except IndexError:\n            print(\"Index Error: Not a valid output position\")\n            return False\n        rq = self.modbusConnection.write_coils(0, self.outputStatus)\n        if rq.isError():\n            print(\"Could not set the value properly\")\n            return not rq.isError()\n        return not rq.isError()", "hash": "867bc68da62d", "chunk_type": "method", "node_type": "function_definition", "signature": "setsingleoutput(self, pos, value)", "docstring": "Sets a single output to the desired value.\n        Parameters\n        ----------\n        pos : int\n            Number of the output to set.\n        value : Bool\n            True to set to High, False to set to Low.\n\n        Return\n        ------\n        Bool\n            True if output was set correctly, False otherwise.", "chunk_size_bytes": 909, "original_size_bytes": 910, "start_byte": 1752, "end_byte": 2662}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:e91184819e78", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "readsingleinput", "qualified_name": "MoxaE1212.readsingleinput", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [81, 104], "text": "def readsingleinput(self, pos):\n        \"\"\"Read a single digital input from the MOXA E1212.\n        Parameters\n        ----------\n        pos : number of the IO to read.\n        Return\n        ------\n        Bool or None\n            True if High, False if Low, None if an error has occurred.\n        \"\"\"\n        if pos > 7:\n            print(\"Not a valid input position\")\n            return None\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return None\n        rq = self.modbusConnection.read_discrete_inputs(0,8)\n        if rq.isError():\n            print(\"Could not read the value\")\n            return None\n        return rq.bits[pos]", "hash": "e91184819e78", "chunk_type": "method", "node_type": "function_definition", "signature": "readsingleinput(self, pos)", "docstring": "Read a single digital input from the MOXA E1212.\n\n        Parameters\n        ----------\n        pos : number of the IO to read.\n\n        Return\n        ------\n        Bool or None\n            True if High, False if Low, None if an error has occurred.", "chunk_size_bytes": 719, "original_size_bytes": 721, "start_byte": 2668, "end_byte": 3389}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:5555004c5758", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "setalloutputs", "qualified_name": "MoxaE1212.setalloutputs", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [106, 130], "text": "def setalloutputs(self, values):\n        \"\"\"Set the value of all the digital outputs of the MOXA E1212.\n        Parameters\n        ----------\n        values : List of bool.\n            A list of 8 elements where True is High and False is Low.\n        Return\n        ------\n        Bool\n            True if the values were set correctly, False otherwise.\n        \"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return False\n        try:\n            self.outputStatus = values\n        except IndexError:\n            print(\"Index Error: Not a valid output position\")\n            return False\n        rq = self.modbusConnection.write_coils(0, self.outputStatus)\n        if rq.isError():\n            print(\"Could not set the value properly\")\n            return not rq.isError()\n        return not rq.isError()", "hash": "5555004c5758", "chunk_type": "method", "node_type": "function_definition", "signature": "setalloutputs(self, values)", "docstring": "Set the value of all the digital outputs of the MOXA E1212.\n        Parameters\n        ----------\n        values : List of bool.\n            A list of 8 elements where True is High and False is Low.\n        Return\n        ------\n        Bool\n            True if the values were set correctly, False otherwise.", "chunk_size_bytes": 888, "original_size_bytes": 888, "start_byte": 3395, "end_byte": 4283}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:b3a7b2a4f0fb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "readallinputs", "qualified_name": "MoxaE1212.readallinputs", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [132, 147], "text": "def readallinputs(self):\n        \"\"\"Reads all the inputs of the MOXA E1212\n        Return\n        ------\n        List of bool or None\n            A list of bool where True is High and False is Low or None if an error has occurred\n        \"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return None\n        rq = self.modbusConnection.read_discrete_inputs(0, 8)\n        if rq.isError():\n            print(\"Could not read the values\")\n            return None\n        return rq.bits", "hash": "b3a7b2a4f0fb", "chunk_type": "method", "node_type": "function_definition", "signature": "readallinputs(self)", "docstring": "Reads all the inputs of the MOXA E1212\n        Return\n        ------\n        List of bool or None\n            A list of bool where True is High and False is Low or None if an error has occurred", "chunk_size_bytes": 562, "original_size_bytes": 562, "start_byte": 4289, "end_byte": 4851}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/MOXAE1212.py:4269e5346e99", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "waitforinput", "qualified_name": "MoxaE1212.waitforinput", "source_path": "sample-programs/Python/PythonUI/MOXAE1212.py", "loc": [149, 153], "text": "def waitforinput(self, pos, state):\n        inp = None\n        while inp is not state:\n            inp = self.readsingleinput(pos)\n        return", "hash": "4269e5346e99", "chunk_type": "method", "node_type": "function_definition", "signature": "waitforinput(self, pos, state)", "docstring": null, "chunk_size_bytes": 145, "original_size_bytes": 145, "start_byte": 4857, "end_byte": 5002}
