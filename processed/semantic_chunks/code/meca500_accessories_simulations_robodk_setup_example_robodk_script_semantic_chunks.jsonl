{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:47feae17752d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "unknown", "qualified_name": "unknown", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [21, 21], "text": "from robodk.robolink import *", "hash": "47feae17752d", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 29, "original_size_bytes": 29, "start_byte": 547, "end_byte": 576}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:256a9937cde1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "unknown", "qualified_name": "unknown", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [22, 22], "text": "from robodk.robomath import *", "hash": "256a9937cde1", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 29, "original_size_bytes": 29, "start_byte": 593, "end_byte": 622}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [23, 23], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 647, "end_byte": 658}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:83d8e9e427df", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "sys", "qualified_name": "sys", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [24, 24], "text": "import sys", "hash": "83d8e9e427df", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 10, "original_size_bytes": 10, "start_byte": 659, "end_byte": 669}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:4664baa4b4fc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Meca500Controller", "qualified_name": "Meca500Controller", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [32, 346], "text": "class Meca500Controller:\n    \"\"\"\n    Controller class for Mecademic Meca500 robot using RoboDK API\n    \"\"\"", "hash": "4664baa4b4fc", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Controller class for Mecademic Meca500 robot using RoboDK API", "chunk_size_bytes": 106, "original_size_bytes": 106, "start_byte": 924, "end_byte": 11874}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:7921c338141d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Meca500Controller.__init__", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [37, 47], "text": "def __init__(self, robot_name=ROBOT_NAME):\n        \"\"\"\n        Initialize connection to RoboDK and get robot reference\n        Args:\n            robot_name (str): Name of the robot in RoboDK workspace\n        \"\"\"\n        self.RDK = None\n        self.robot = None\n        self.robot_name = robot_name\n        self.connect_to_robodk()", "hash": "7921c338141d", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot_name=ROBOT_NAME)", "docstring": "Initialize connection to RoboDK and get robot reference\n        \n        Args:\n            robot_name (str): Name of the robot in RoboDK workspace", "chunk_size_bytes": 332, "original_size_bytes": 341, "start_byte": 1040, "end_byte": 1381}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:4cb63bccdc52", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "connect_to_robodk", "qualified_name": "Meca500Controller.connect_to_robodk", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [49, 75], "text": "def connect_to_robodk(self):\n        \"\"\"\n        Establish connection to RoboDK and get robot reference\n        \"\"\"\n        try:\n            self.RDK = Robolink()\n            if not self.RDK.Valid():\n                raise Exception(\"RoboDK is not running or not accessible\")\n            self.robot = self.RDK.Item(self.robot_name, ITEM_TYPE_ROBOT)\n            if not self.robot.Valid():\n                raise Exception(f\"Robot '{self.robot_name}' not found in RoboDK workspace\")\n            print(f\"Successfully connected to robot: {self.robot_name}\")\n            self.robot.setSpeed(DEFAULT_SPEED)  # Linear speed in mm/s\n            self.robot.setZoneData(5)  # Rounding/blending radius in mm\n        except Exception as e:\n            print(f\"Error connecting to RoboDK: {e}\")\n            sys.exit(1)", "hash": "4cb63bccdc52", "chunk_type": "method", "node_type": "function_definition", "signature": "connect_to_robodk(self)", "docstring": "Establish connection to RoboDK and get robot reference", "chunk_size_bytes": 803, "original_size_bytes": 1019, "start_byte": 1391, "end_byte": 2410}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:89437ee2caf7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_robot_status", "qualified_name": "Meca500Controller.get_robot_status", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [77, 96], "text": "def get_robot_status(self):\n        \"\"\"\n        Get current robot status and joint positions\n        Returns:\n            dict: Robot status information\n        \"\"\"\n        try:\n            joints = self.robot.Joints()\n            pose = self.robot.Pose()\n            return {\n                'joints': joints.tolist(),\n                'pose': pose,\n                'position': pose.Pos(),\n                'orientation': pose.Euler_2_Pose()[1]\n            }\n        except Exception as e:\n            print(f\"Error getting robot status: {e}\")\n            return None", "hash": "89437ee2caf7", "chunk_type": "method", "node_type": "function_definition", "signature": "get_robot_status(self)", "docstring": "Get current robot status and joint positions\n        \n        Returns:\n            dict: Robot status information", "chunk_size_bytes": 566, "original_size_bytes": 588, "start_byte": 2420, "end_byte": 3008}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:0f3a80a041d4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "move_to_home", "qualified_name": "Meca500Controller.move_to_home", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [98, 108], "text": "def move_to_home(self):\n        \"\"\"\n        Move robot to home position (all joints at 0 degrees)\n        \"\"\"\n        try:\n            home_joints = [0, 0, 0, 0, 0, 0]  # All joints at 0 degrees\n            print(\"Moving to home position...\")\n            self.robot.MoveJ(home_joints)\n            print(\"Home position reached\")\n        except Exception as e:\n            print(f\"Error moving to home: {e}\")", "hash": "0f3a80a041d4", "chunk_type": "method", "node_type": "function_definition", "signature": "move_to_home(self)", "docstring": "Move robot to home position (all joints at 0 degrees)", "chunk_size_bytes": 406, "original_size_bytes": 406, "start_byte": 3018, "end_byte": 3424}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:e447fd5c460a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "move_joints", "qualified_name": "Meca500Controller.move_joints", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [110, 125], "text": "def move_joints(self, joint_angles):\n        \"\"\"\n        Move robot to specified joint angles\n        Args:\n            joint_angles (list): List of 6 joint angles in degrees [J1, J2, J3, J4, J5, J6]\n        \"\"\"\n        try:\n            if len(joint_angles) != 6:\n                raise ValueError(\"Joint angles must be a list of 6 values\")\n            print(f\"Moving to joint angles: {joint_angles}\")\n            self.robot.MoveJ(joint_angles)\n            print(\"Joint movement completed\")\n        except Exception as e:\n            print(f\"Error in joint movement: {e}\")", "hash": "e447fd5c460a", "chunk_type": "method", "node_type": "function_definition", "signature": "move_joints(self, joint_angles)", "docstring": "Move robot to specified joint angles\n        \n        Args:\n            joint_angles (list): List of 6 joint angles in degrees [J1, J2, J3, J4, J5, J6]", "chunk_size_bytes": 571, "original_size_bytes": 593, "start_byte": 3434, "end_byte": 4027}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:a34a307eb574", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "move_linear", "qualified_name": "Meca500Controller.move_linear", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [127, 139], "text": "def move_linear(self, target_pose):\n        \"\"\"\n        Move robot linearly to target pose\n        Args:\n            target_pose: Target pose (can be Mat object or target item)\n        \"\"\"\n        try:\n            print(\"Executing linear movement...\")\n            self.robot.MoveL(target_pose)\n            print(\"Linear movement completed\")\n        except Exception as e:\n            print(f\"Error in linear movement: {e}\")", "hash": "a34a307eb574", "chunk_type": "method", "node_type": "function_definition", "signature": "move_linear(self, target_pose)", "docstring": "Move robot linearly to target pose\n        \n        Args:\n            target_pose: Target pose (can be Mat object or target item)", "chunk_size_bytes": 423, "original_size_bytes": 432, "start_byte": 4037, "end_byte": 4469}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:e2e009512511", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "create_target", "qualified_name": "Meca500Controller.create_target", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [141, 165], "text": "def create_target(self, name, x, y, z, rx=0, ry=0, rz=0):\n        \"\"\"\n        Create a target in RoboDK workspace\n        Args:\n            name (str): Name of the target\n            x, y, z (float): Position coordinates in mm\n            rx, ry, rz (float): Rotation angles in degrees\n        Returns:\n            Target item or None if failed\n        \"\"\"\n        try:\n            pose = transl(x, y, z) * rotz(rz * pi/180) * roty(ry * pi/180) * rotx(rx * pi/180)\n            target = self.RDK.AddTarget(name)\n            target.setPose(pose)\n            print(f\"Target '{name}' created at position ({x}, {y}, {z})\")\n            return target\n        except Exception as e:\n            print(f\"Error creating target: {e}\")\n            return None", "hash": "e2e009512511", "chunk_type": "method", "node_type": "function_definition", "signature": "create_target(self, name, x, y, z, rx=0, ry=0, rz=0)", "docstring": "Create a target in RoboDK workspace\n        \n        Args:\n            name (str): Name of the target\n            x, y, z (float): Position coordinates in mm\n            rx, ry, rz (float): Rotation angles in degrees\n            \n        Returns:\n            Target item or None if failed", "chunk_size_bytes": 747, "original_size_bytes": 866, "start_byte": 4479, "end_byte": 5345}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:25615aff6a65", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pick_and_place_demo", "qualified_name": "Meca500Controller.pick_and_place_demo", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [167, 231], "text": "def pick_and_place_demo(self):\n        \"\"\"\n        Demonstrate a simple pick and place operation\n        \"\"\"\n        try:\n            print(\"\\n=== Starting Pick and Place Demo ===\")\n            pick_pos = [300, 100, 200]      # Pick position [x, y, z] in mm\n            place_pos = [300, -100, 200]    # Place position [x, y, z] in mm\n            pick_target = self.create_target(\"Pick_Target\", *pick_pos)\n            place_target = self.create_target(\"Place_Target\", *place_pos)\n            if not pick_target or not place_target:\n                raise Exception(\"Failed to create targets\")\n            self.move_to_home()\n            time.sleep(1)\n            pick_approach = self.create_target(\"Pick_Approach\", \n                                             pick_pos[0], pick_pos[1], pick_pos[2] + APPROACH_DISTANCE)\n            self.move_linear(pick_approach)\n            time.sleep(0.5)\n            self.move_linear(pick_target)\n            time.sleep(0.5)\n            print(\"Closing gripper (simulated)\")\n            time.sleep(1)\n            self.move_linear(pick_approach)\n            time.sleep(0.5)\n            place_approach = self.create_target(\"Place_Approach\", \n                                              place_pos[0], place_pos[1], place_pos[2] + APPROACH_DISTANCE)\n            self.move_linear(place_approach)\n            time.sleep(0.5)\n            self.move_linear(place_target)\n            time.sleep(0.5)\n            print(\"Opening gripper (simulated)\")\n            time.sleep(1)\n            self.move_linear(place_approach)\n            time.sleep(0.5)\n            self.move_to_home()\n            print(\"=== Pick and Place Demo Completed ===\\n\")\n        except Exception as e:\n            print(f\"Error in pick and place demo: {e}\")", "hash": "25615aff6a65", "chunk_type": "method", "node_type": "function_definition", "signature": "pick_and_place_demo(self)", "docstring": "Demonstrate a simple pick and place operation", "chunk_size_bytes": 1754, "original_size_bytes": 2462, "start_byte": 5355, "end_byte": 7817}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:212a49e473af", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "circular_path_demo", "qualified_name": "Meca500Controller.circular_path_demo", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [233, 272], "text": "def circular_path_demo(self, center_x=300, center_y=0, center_z=200, radius=50, num_points=8):\n        \"\"\"\n        Demonstrate circular path movement\n        Args:\n            center_x, center_y, center_z (float): Center of circle in mm\n            radius (float): Radius of circle in mm\n            num_points (int): Number of points on circle\n        \"\"\"\n        try:\n            print(f\"\\n=== Starting Circular Path Demo ===\")\n            print(f\"Center: ({center_x}, {center_y}, {center_z}), Radius: {radius}mm\")\n            for i in range(num_points + 1):  # +1 to close the circle\n                angle = i * 2 * pi / num_points\n                x = center_x + radius * cos(angle)\n                y = center_y + radius * sin(angle)\n                z = center_z\n                target_name = f\"Circle_Point_{i}\"\n                target = self.create_target(target_name, x, y, z)\n                if target:\n                    if i == 0:\n                        self.robot.MoveJ(target)\n                    else:\n                        self.robot.MoveL(target)\n                    time.sleep(0.2)  # Brief pause between movements\n            print(\"=== Circular Path Demo Completed ===\\n\")\n        except Exception as e:\n            print(f\"Error in circular path demo: {e}\")", "hash": "212a49e473af", "chunk_type": "method", "node_type": "function_definition", "signature": "circular_path_demo(self, center_x=300, center_y=0, center_z=200, radius=50, num_points=8)", "docstring": "Demonstrate circular path movement\n        \n        Args:\n            center_x, center_y, center_z (float): Center of circle in mm\n            radius (float): Radius of circle in mm\n            num_points (int): Number of points on circle", "chunk_size_bytes": 1278, "original_size_bytes": 1641, "start_byte": 7827, "end_byte": 9468}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:75997d108452", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "speed_test_demo", "qualified_name": "Meca500Controller.speed_test_demo", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [274, 306], "text": "def speed_test_demo(self):\n        \"\"\"\n        Demonstrate different movement speeds\n        \"\"\"\n        try:\n            print(\"\\n=== Starting Speed Test Demo ===\")\n            pos1 = [300, 100, 200]\n            pos2 = [300, -100, 200]\n            target1 = self.create_target(\"Speed_Test_1\", *pos1)\n            target2 = self.create_target(\"Speed_Test_2\", *pos2)\n            speeds = [50, 100, 200]  # mm/s\n            for speed in speeds:\n                print(f\"Testing speed: {speed} mm/s\")\n                self.robot.setSpeed(speed)\n                self.move_linear(target1)\n                time.sleep(0.5)\n                self.move_linear(target2)\n                time.sleep(0.5)\n            self.robot.setSpeed(DEFAULT_SPEED)\n            print(\"=== Speed Test Demo Completed ===\\n\")\n        except Exception as e:\n            print(f\"Error in speed test demo: {e}\")", "hash": "75997d108452", "chunk_type": "method", "node_type": "function_definition", "signature": "speed_test_demo(self)", "docstring": "Demonstrate different movement speeds", "chunk_size_bytes": 873, "original_size_bytes": 1106, "start_byte": 9478, "end_byte": 10584}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:fd69a022d49e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run_full_demo", "qualified_name": "Meca500Controller.run_full_demo", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [308, 333], "text": "def run_full_demo(self):\n        \"\"\"\n        Run complete demonstration of robot capabilities\n        \"\"\"\n        try:\n            print(\"Starting Meca500 RoboDK Programming Demo\")\n            print(\"=\" * 50)\n            status = self.get_robot_status()\n            if status:\n                print(f\"Current robot position: {[round(x, 2) for x in status['position']]}\")\n                print(f\"Current joint angles: {[round(x, 2) for x in status['joints']]}\")\n            self.pick_and_place_demo()\n            self.circular_path_demo()\n            self.speed_test_demo()\n            self.move_to_home()\n            print(\"All demonstrations completed successfully!\")\n        except Exception as e:\n            print(f\"Error in full demo: {e}\")", "hash": "fd69a022d49e", "chunk_type": "method", "node_type": "function_definition", "signature": "run_full_demo(self)", "docstring": "Run complete demonstration of robot capabilities", "chunk_size_bytes": 745, "original_size_bytes": 907, "start_byte": 10594, "end_byte": 11501}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:084a49c75249", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "cleanup", "qualified_name": "Meca500Controller.cleanup", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [335, 346], "text": "def cleanup(self):\n        \"\"\"\n        Clean up resources and close connections\n        \"\"\"\n        try:\n            if self.robot and self.robot.Valid():\n                self.move_to_home()\n            print(\"Cleanup completed\")\n        except Exception as e:\n            print(f\"Error during cleanup: {e}\")", "hash": "084a49c75249", "chunk_type": "method", "node_type": "function_definition", "signature": "cleanup(self)", "docstring": "Clean up resources and close connections", "chunk_size_bytes": 308, "original_size_bytes": 363, "start_byte": 11511, "end_byte": 11874}
{"chunk_id": "meca_samples:meca500-accessories/simulations/robodk-setup/example_robodk_script.py:859e24788e2f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "main", "qualified_name": "main", "source_path": "meca500-accessories/simulations/robodk-setup/example_robodk_script.py", "loc": [348, 371], "text": "def main():\n    \"\"\"\n    Main function to run the Meca500 programming example\n    \"\"\"\n    print(\"Mecademic Meca500 RoboDK Programming Example\")\n    print(\"=\" * 50)\n    controller = Meca500Controller()\n    try:\n        controller.run_full_demo()\n    except KeyboardInterrupt:\n        print(\"\\nProgram interrupted by user\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n    finally:\n        controller.cleanup()\n        print(\"Program finished\")", "hash": "859e24788e2f", "chunk_type": "function", "node_type": "function_definition", "signature": "main()", "docstring": "Main function to run the Meca500 programming example", "chunk_size_bytes": 463, "original_size_bytes": 568, "start_byte": 11876, "end_byte": 12444}
