{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:9dd43cb332f7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "copy", "qualified_name": "copy", "source_path": "mecademicpy/tests/robot_test.py", "loc": [9, 9], "text": "import copy", "hash": "9dd43cb332f7", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 160, "end_byte": 171}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:1e7b9f543d36", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "logging", "qualified_name": "logging", "source_path": "mecademicpy/tests/robot_test.py", "loc": [10, 10], "text": "import logging", "hash": "1e7b9f543d36", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 14, "original_size_bytes": 14, "start_byte": 172, "end_byte": 186}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:89ed1aae8d33", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "os", "qualified_name": "os", "source_path": "mecademicpy/tests/robot_test.py", "loc": [11, 11], "text": "import os", "hash": "89ed1aae8d33", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 9, "original_size_bytes": 9, "start_byte": 187, "end_byte": 196}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:5757795d86dd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pathlib", "qualified_name": "pathlib", "source_path": "mecademicpy/tests/robot_test.py", "loc": [12, 12], "text": "import pathlib", "hash": "5757795d86dd", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 14, "original_size_bytes": 14, "start_byte": 197, "end_byte": 211}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:cd89a6634e6c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "queue", "qualified_name": "queue", "source_path": "mecademicpy/tests/robot_test.py", "loc": [13, 13], "text": "import queue", "hash": "cd89a6634e6c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 12, "original_size_bytes": 12, "start_byte": 212, "end_byte": 224}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:c307405b3f5d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "re", "qualified_name": "re", "source_path": "mecademicpy/tests/robot_test.py", "loc": [14, 14], "text": "import re", "hash": "c307405b3f5d", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 9, "original_size_bytes": 9, "start_byte": 225, "end_byte": 234}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:d11613a5082c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "socket", "qualified_name": "socket", "source_path": "mecademicpy/tests/robot_test.py", "loc": [15, 15], "text": "import socket", "hash": "d11613a5082c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 235, "end_byte": 248}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:818111220442", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "threading", "qualified_name": "threading", "source_path": "mecademicpy/tests/robot_test.py", "loc": [16, 16], "text": "import threading", "hash": "818111220442", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 249, "end_byte": 265}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "mecademicpy/tests/robot_test.py", "loc": [17, 17], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 266, "end_byte": 277}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:3e2dd63215ad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "partial", "qualified_name": "partial", "source_path": "mecademicpy/tests/robot_test.py", "loc": [18, 18], "text": "from functools import partial", "hash": "3e2dd63215ad", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 29, "original_size_bytes": 29, "start_byte": 278, "end_byte": 307}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:17528df22f18", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Union", "qualified_name": "Union", "source_path": "mecademicpy/tests/robot_test.py", "loc": [19, 19], "text": "from typing import Union", "hash": "17528df22f18", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 24, "original_size_bytes": 24, "start_byte": 308, "end_byte": 332}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:1da9e27523c0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "mock", "qualified_name": "mock", "source_path": "mecademicpy/tests/robot_test.py", "loc": [20, 20], "text": "from unittest import mock", "hash": "1da9e27523c0", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 25, "original_size_bytes": 25, "start_byte": 333, "end_byte": 358}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:96761e656a80", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pytest", "qualified_name": "pytest", "source_path": "mecademicpy/tests/robot_test.py", "loc": [22, 22], "text": "import pytest", "hash": "96761e656a80", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 360, "end_byte": 373}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:deb62b94d900", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "yaml", "qualified_name": "yaml", "source_path": "mecademicpy/tests/robot_test.py", "loc": [23, 23], "text": "import yaml", "hash": "deb62b94d900", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 374, "end_byte": 385}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:e5cda7f9a688", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "mecademicpy._robot_base as mdrb", "qualified_name": "mecademicpy._robot_base as mdrb", "source_path": "mecademicpy/tests/robot_test.py", "loc": [25, 25], "text": "import mecademicpy._robot_base as mdrb", "hash": "e5cda7f9a688", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 38, "original_size_bytes": 38, "start_byte": 387, "end_byte": 425}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:f1c5d1d07b59", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "mecademicpy.robot as mdr", "qualified_name": "mecademicpy.robot as mdr", "source_path": "mecademicpy/tests/robot_test.py", "loc": [26, 26], "text": "import mecademicpy.robot as mdr", "hash": "f1c5d1d07b59", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 31, "original_size_bytes": 31, "start_byte": 426, "end_byte": 457}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:677afd9041f6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "mecademicpy.robot_trajectory_files as robot_files", "qualified_name": "mecademicpy.robot_trajectory_files as robot_files", "source_path": "mecademicpy/tests/robot_test.py", "loc": [27, 27], "text": "import mecademicpy.robot_trajectory_files as robot_files", "hash": "677afd9041f6", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 56, "original_size_bytes": 56, "start_byte": 458, "end_byte": 514}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:524cc55a397f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MX_ROBOT_TCP_PORT_CONTROL", "qualified_name": "MX_ROBOT_TCP_PORT_CONTROL", "source_path": "mecademicpy/tests/robot_test.py", "loc": [28, 28], "text": "from mecademicpy.mx_robot_def import MX_ROBOT_TCP_PORT_CONTROL, MX_ROBOT_TCP_PORT_FEED, MxExtToolType, MxIoBankId", "hash": "524cc55a397f", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 113, "original_size_bytes": 113, "start_byte": 515, "end_byte": 628}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:fcd0a1dac439", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MxRobotStatusCode as mx_st", "qualified_name": "MxRobotStatusCode as mx_st", "source_path": "mecademicpy/tests/robot_test.py", "loc": [29, 29], "text": "from mecademicpy.mx_robot_def import MxRobotStatusCode as mx_st", "hash": "fcd0a1dac439", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 63, "original_size_bytes": 63, "start_byte": 629, "end_byte": 692}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:2d6466386f65", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "connect_robot_helper", "qualified_name": "connect_robot_helper", "source_path": "mecademicpy/tests/robot_test.py", "loc": [70, 117], "text": "def connect_robot_helper(robot: mdr.Robot,\n                         yaml_filename='meca500_r3_v9.yml',\n                         monitor_mode=False,\n                         offline_mode=True,\n                         disconnect_on_exception=False,\n                         enable_synchronous_mode=False):\n    \"\"\"Utility function to simulate a connection to the robot\"\"\"\n    file_path = pathlib.Path.cwd().joinpath('tests', 'robot_config')\n    yaml_file_full_path = pathlib.Path.joinpath(file_path, yaml_filename)\n    with open(yaml_file_full_path, 'r', encoding='utf-8') as file_stream:\n        robot_config = yaml.safe_load(file_stream)\n        rx_queue = robot._monitor_rx_queue if monitor_mode else robot._command_rx_queue\n        rx_queue.put(mdr.Message(mx_st.MX_ST_CONNECTED, robot_config['expected_connection_message']))\n        expected_commands = []\n        robot_responses = []\n        if not monitor_mode and robot_config['expected_connect_commands']:\n            for transaction in robot_config['expected_connect_commands']:\n                expected_commands.append(transaction['name'])\n                cmd_responses = []\n                cmd_responses.append(mdr.Message(transaction['response_code'], transaction['response']))\n                if 'extra_event' in transaction:\n                    cmd_responses.append(mdr.Message(transaction['extra_event'], transaction['extra_event_data']))\n                robot_responses.append(cmd_responses)\n        fake_robot = threading.Thread(target=simple_response_handler,\n                                      args=(robot._command_tx_queue, robot._command_rx_queue, expected_commands,\n                                            robot_responses))\n        fake_robot.start()\n        robot._Connect(TEST_IP,\n                       offline_mode=offline_mode,\n                       disconnect_on_exception=disconnect_on_exception,\n                       enable_synchronous_mode=enable_synchronous_mode,\n                       monitor_mode=monitor_mode)\n        fake_robot.join()\n        robot.WaitConnected(timeout=0)", "hash": "2d6466386f65", "chunk_type": "function", "node_type": "function_definition", "signature": "connect_robot_helper(robot: mdr.Robot,\n                         yaml_filename='meca500_r3_v9.yml',\n                         monitor_mode=False,\n                         offline_mode=True,\n                         disconnect_on_exception=False,\n                         enable_synchronous_mode=False)", "docstring": "Utility function to simulate a connection to the robot", "chunk_size_bytes": 2069, "original_size_bytes": 2328, "start_byte": 2163, "end_byte": 4491}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:0cce95b18402", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "simple_response_handler", "qualified_name": "simple_response_handler", "source_path": "mecademicpy/tests/robot_test.py", "loc": [121, 138], "text": "def simple_response_handler(queue_in: queue.Queue, queue_out: queue.Queue, expected_in: list[str],\n                            desired_out: Union[list[list[mdr.Message]], list[mdr.Message]]):\n    \"\"\"Simulated handler that simulates responses that the robot send to queued requests\"\"\"\n    if isinstance(expected_in, list):\n        for i, expected_val in enumerate(expected_in):\n            event = queue_in.get(block=True, timeout=1)\n            assert event == expected_val\n            if isinstance(desired_out[i], list):\n                desired_list: list = desired_out\n                for response in desired_list[i]:\n                    queue_out.put(response)\n            else:\n                queue_out.put(desired_out[i])\n    else:\n        event = queue_in.get(block=True, timeout=1)\n        assert event == expected_in\n        queue_out.put(desired_out)", "hash": "0cce95b18402", "chunk_type": "function", "node_type": "function_definition", "signature": "simple_response_handler(queue_in: queue.Queue, queue_out: queue.Queue, expected_in: list[str],\n                            desired_out: Union[list[list[mdr.Message]], list[mdr.Message]])", "docstring": "Simulated handler that simulates responses that the robot send to queued requests", "chunk_size_bytes": 861, "original_size_bytes": 862, "start_byte": 4544, "end_byte": 5406}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:1b63f754aa38", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "fake_server", "qualified_name": "fake_server", "source_path": "mecademicpy/tests/robot_test.py", "loc": [141, 162], "text": "def fake_server(address, port, data_list, server_up):\n    \"\"\" Server to listen for a connection. Send initial data in data_list on connect,\n    send rest in response to any msg.  \"\"\"\n    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_sock.settimeout(10)  # Allow up to 10 seconds to create the connection.\n    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_sock.bind((address, port))\n    server_sock.listen()\n    server_up.set()\n    client, addr = server_sock.accept()\n    if data_list:\n        client.sendall(data_list.pop(0).encode('ascii'))\n    while True:\n        received_data = client.recv(1024)\n        if not received_data:\n            break\n        if len(received_data) > 1 and data_list:\n            client.sendall(data_list.pop(0).encode('ascii'))", "hash": "1b63f754aa38", "chunk_type": "function", "node_type": "function_definition", "signature": "fake_server(address, port, data_list, server_up)", "docstring": "Server to listen for a connection. Send initial data in data_list on connect,\n    send rest in response to any msg.", "chunk_size_bytes": 817, "original_size_bytes": 858, "start_byte": 5409, "end_byte": 6267}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:0feb5e13f17c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run_fake_server", "qualified_name": "run_fake_server", "source_path": "mecademicpy/tests/robot_test.py", "loc": [166, 171], "text": "def run_fake_server(address, port, data_list):\n    server_up_event = threading.Event()  # Synchronization event for fake server.\n    server_thread = threading.Thread(target=fake_server, args=(address, port, data_list, server_up_event))\n    server_thread.start()\n    assert server_up_event.wait(timeout=DEFAULT_TIMEOUT)\n    return server_thread", "hash": "0feb5e13f17c", "chunk_type": "function", "node_type": "function_definition", "signature": "run_fake_server(address, port, data_list)", "docstring": null, "chunk_size_bytes": 343, "original_size_bytes": 343, "start_byte": 6314, "end_byte": 6657}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:ec5d22a7d27b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "FakeSocket", "qualified_name": "FakeSocket", "source_path": "mecademicpy/tests/robot_test.py", "loc": [175, 186], "text": "class FakeSocket():\n    def __init__(self, input_data):\n        self.queue = queue.Queue()\n        for x in input_data:\n            self.queue.put(x)\n    def setblocking(self, _):\n        pass\n    def recv(self, _):", "hash": "ec5d22a7d27b", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 215, "original_size_bytes": 218, "start_byte": 6764, "end_byte": 7014}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:47d50bdabdf0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "FakeSocket.__init__", "source_path": "mecademicpy/tests/robot_test.py", "loc": [177, 180], "text": "def __init__(self, input_data):\n        self.queue = queue.Queue()\n        for x in input_data:\n            self.queue.put(x)", "hash": "47d50bdabdf0", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, input_data)", "docstring": null, "chunk_size_bytes": 125, "original_size_bytes": 125, "start_byte": 6789, "end_byte": 6914}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:6190a0808011", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "setblocking", "qualified_name": "FakeSocket.setblocking", "source_path": "mecademicpy/tests/robot_test.py", "loc": [182, 183], "text": "def setblocking(self, _):\n        pass", "hash": "6190a0808011", "chunk_type": "method", "node_type": "function_definition", "signature": "setblocking(self, _)", "docstring": null, "chunk_size_bytes": 38, "original_size_bytes": 38, "start_byte": 6920, "end_byte": 6958}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:617a635f675e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "recv", "qualified_name": "FakeSocket.recv", "source_path": "mecademicpy/tests/robot_test.py", "loc": [185, 186], "text": "def recv(self, _):\n        return self.queue.get()", "hash": "617a635f675e", "chunk_type": "method", "node_type": "function_definition", "signature": "recv(self, _)", "docstring": null, "chunk_size_bytes": 50, "original_size_bytes": 50, "start_byte": 6964, "end_byte": 7014}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:84099e630bf6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_setup_invalid_input", "qualified_name": "test_setup_invalid_input", "source_path": "mecademicpy/tests/robot_test.py", "loc": [195, 197], "text": "def test_setup_invalid_input(robot: mdr.Robot):\n    with pytest.raises(mdr.CommunicationError):\n        robot.Connect('1.1.1.1.1')", "hash": "84099e630bf6", "chunk_type": "function", "node_type": "function_definition", "signature": "test_setup_invalid_input(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 130, "original_size_bytes": 130, "start_byte": 7269, "end_byte": 7399}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:d59692f1d179", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_connection_no_robot", "qualified_name": "test_connection_no_robot", "source_path": "mecademicpy/tests/robot_test.py", "loc": [201, 205], "text": "def test_connection_no_robot(robot: mdr.Robot):\n    robot.default_timeout = 0\n    with pytest.raises((mdr.CommunicationError, TimeoutError, ConnectionRefusedError)):\n        robot.Connect(TEST_IP)", "hash": "d59692f1d179", "chunk_type": "function", "node_type": "function_definition", "signature": "test_connection_no_robot(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 196, "original_size_bytes": 197, "start_byte": 7520, "end_byte": 7717}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:17e3bd48842f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_successful_connection_full_socket_legacy", "qualified_name": "test_successful_connection_full_socket_legacy", "source_path": "mecademicpy/tests/robot_test.py", "loc": [210, 238], "text": "def test_successful_connection_full_socket_legacy(robot: mdr.Robot):\n    command_server_thread = run_fake_server(TEST_IP, MX_ROBOT_TCP_PORT_CONTROL, [\n        '[3000][Connected to Meca500 R3-virtual v8.3.10]\\0', '[2007][0,0,0,0,1,1,1]\\0', '[2083][m500-99999]\\0',\n        '[2082][v8.3.10.9876-unit-test-fake]\\0', '[2007][0,0,0,0,1,1,1]\\0'\n    ])\n    monitor_server_thread = run_fake_server(TEST_IP, MX_ROBOT_TCP_PORT_FEED, ['\\0'])\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitConnected(timeout=0)\n    robot.Connect(TEST_IP)\n    robot.WaitConnected()\n    assert robot.GetRobotInfo().model == 'Meca500'\n    assert robot.GetRobotInfo().revision == 3\n    assert robot.GetRobotInfo().is_virtual is True\n    assert robot.GetRobotInfo().version.major == 8\n    assert robot.GetRobotInfo().version.minor == 3\n    assert robot.GetRobotInfo().version.patch == 10\n    assert robot.GetRobotInfo().version.build == 9876\n    assert robot.GetRobotInfo().serial == 'm500-99999'\n    robot.Disconnect()\n    assert robot._command_socket is None\n    assert robot._monitor_socket is None\n    command_server_thread.join()\n    monitor_server_thread.join()", "hash": "17e3bd48842f", "chunk_type": "function", "node_type": "function_definition", "signature": "test_successful_connection_full_socket_legacy(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 1149, "original_size_bytes": 1155, "start_byte": 7868, "end_byte": 9023}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:c7b940a36887", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_successful_connection_split_response", "qualified_name": "test_successful_connection_split_response", "source_path": "mecademicpy/tests/robot_test.py", "loc": [242, 253], "text": "def test_successful_connection_split_response(robot: mdr.Robot):\n    fake_socket = FakeSocket([b'[3', b'00', b'0][Connected to Meca500 R3 v9.0.0]\\0', b''])\n    rx_queue = queue.Queue()\n    robot._rx_thread_fct(fake_socket, rx_queue)\n    assert rx_queue.qsize() == 2  # \"Connected to\" and _TERMINATE\n    message = rx_queue.get()\n    assert message.id == mx_st.MX_ST_CONNECTED\n    assert message.data == MECA500_CONNECTED_RESPONSE", "hash": "c7b940a36887", "chunk_type": "function", "node_type": "function_definition", "signature": "test_successful_connection_split_response(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 428, "original_size_bytes": 594, "start_byte": 9124, "end_byte": 9718}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:56aaac19c110", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_mcs500_connection", "qualified_name": "test_mcs500_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [257, 264], "text": "def test_mcs500_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='mcs500_r1_v9.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Mcs500'\n    assert robot.GetRobotInfo().num_joints == 4\n    assert robot.GetRobotInfo().version.major == 9\n    assert robot.GetRobotInfo().rt_message_capable\n    assert robot.GetRobotInfo().serial == 'mcs500-87654321'", "hash": "56aaac19c110", "chunk_type": "function", "node_type": "function_definition", "signature": "test_mcs500_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 426, "original_size_bytes": 426, "start_byte": 9767, "end_byte": 10193}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:3fbd67413fc2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_mca250_connection", "qualified_name": "test_mca250_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [268, 275], "text": "def test_mca250_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='mca250_r1_v10.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Mca250'\n    assert robot.GetRobotInfo().num_joints == 6\n    assert robot.GetRobotInfo().version.major == 10\n    assert robot.GetRobotInfo().rt_message_capable\n    assert robot.GetRobotInfo().serial == 'mca250-250250'", "hash": "3fbd67413fc2", "chunk_type": "function", "node_type": "function_definition", "signature": "test_mca250_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 426, "original_size_bytes": 426, "start_byte": 10242, "end_byte": 10668}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:600e2fd3adc6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_mca1000_connection", "qualified_name": "test_mca1000_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [279, 286], "text": "def test_mca1000_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='mca1000_r1_v10.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Mca1000'\n    assert robot.GetRobotInfo().num_joints == 6\n    assert robot.GetRobotInfo().version.major == 10\n    assert robot.GetRobotInfo().rt_message_capable\n    assert robot.GetRobotInfo().serial == 'mca1000-10001000'", "hash": "600e2fd3adc6", "chunk_type": "function", "node_type": "function_definition", "signature": "test_mca1000_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 432, "original_size_bytes": 432, "start_byte": 10718, "end_byte": 11150}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:b549f084e064", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_7_0_connection", "qualified_name": "test_7_0_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [290, 301], "text": "def test_7_0_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='meca500_r3_v7_0.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Meca500'\n    assert robot.GetRobotInfo().num_joints == 6\n    assert robot.GetRobotInfo().version.major == 7\n    assert robot.GetRobotInfo().version.minor == 0\n    assert robot.GetRobotInfo().version.patch == 6\n    assert not robot.GetRobotInfo().rt_message_capable\n    assert not robot.GetRobotInfo().rt_on_ctrl_port_capable\n    assert not robot.GetRobotInfo().gripper_pos_ctrl_capable\n    assert robot.GetRobotInfo().serial == ''", "hash": "b549f084e064", "chunk_type": "function", "node_type": "function_definition", "signature": "test_7_0_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 639, "original_size_bytes": 639, "start_byte": 11224, "end_byte": 11863}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:a10e36ab1825", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_8_3_connection", "qualified_name": "test_8_3_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [305, 315], "text": "def test_8_3_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='meca500_r3_v8_3.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Meca500'\n    assert robot.GetRobotInfo().num_joints == 6\n    assert robot.GetRobotInfo().version.major == 8\n    assert robot.GetRobotInfo().version.minor == 3\n    assert not robot.GetRobotInfo().rt_message_capable\n    assert not robot.GetRobotInfo().rt_on_ctrl_port_capable\n    assert not robot.GetRobotInfo().gripper_pos_ctrl_capable\n    assert robot.GetRobotInfo().serial == 'm500-83'", "hash": "a10e36ab1825", "chunk_type": "function", "node_type": "function_definition", "signature": "test_8_3_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 595, "original_size_bytes": 595, "start_byte": 11929, "end_byte": 12524}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:8c1212070dc1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_8_4_connection", "qualified_name": "test_8_4_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [319, 329], "text": "def test_8_4_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='meca500_r3_v8_4.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Meca500'\n    assert robot.GetRobotInfo().num_joints == 6\n    assert robot.GetRobotInfo().version.major == 8\n    assert robot.GetRobotInfo().version.minor == 4\n    assert robot.GetRobotInfo().rt_message_capable\n    assert not robot.GetRobotInfo().rt_on_ctrl_port_capable\n    assert not robot.GetRobotInfo().gripper_pos_ctrl_capable\n    assert robot.GetRobotInfo().serial == 'm500-84'", "hash": "8c1212070dc1", "chunk_type": "function", "node_type": "function_definition", "signature": "test_8_4_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 591, "original_size_bytes": 591, "start_byte": 12590, "end_byte": 13181}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:5b267ee99b1d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_9_1_connection", "qualified_name": "test_9_1_connection", "source_path": "mecademicpy/tests/robot_test.py", "loc": [333, 352], "text": "def test_9_1_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='meca500_r3_v9.yml')\n    assert not robot.GetStatusRobot().activation_state\n    assert robot.GetRobotInfo().model == 'Meca500'\n    assert robot.GetRobotInfo().num_joints == 6\n    assert robot.GetRobotInfo().version.major == 9\n    assert robot.GetRobotInfo().version.minor == 147\n    assert robot.GetRobotInfo().version.patch == 0\n    assert robot.GetRobotInfo().version.build == 1213\n    assert robot.GetRobotInfo().rt_message_capable\n    assert robot.GetRobotInfo().rt_on_ctrl_port_capable\n    assert robot.GetRobotInfo().serial == 'm500-99999999'\n    assert robot.GetRobotInfo().gripper_pos_ctrl_capable\n    assert robot.GetRobotInfo().ext_tool_version_capable", "hash": "5b267ee99b1d", "chunk_type": "function", "node_type": "function_definition", "signature": "test_9_1_connection(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 751, "original_size_bytes": 1050, "start_byte": 13258, "end_byte": 14308}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:0c9ee338ec4b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_already_connected", "qualified_name": "test_already_connected", "source_path": "mecademicpy/tests/robot_test.py", "loc": [356, 361], "text": "def test_already_connected(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='meca500_r3_v9.yml')\n    robot.Connect()\n    assert robot.IsConnected()", "hash": "0c9ee338ec4b", "chunk_type": "function", "node_type": "function_definition", "signature": "test_already_connected(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 163, "original_size_bytes": 210, "start_byte": 14380, "end_byte": 14590}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:fb26c88f573e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_sequential_connections", "qualified_name": "test_sequential_connections", "source_path": "mecademicpy/tests/robot_test.py", "loc": [365, 379], "text": "def test_sequential_connections(robot: mdr.Robot):\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_USER_ALREADY, ''))\n    with pytest.raises(Exception):\n        robot._Connect(TEST_IP, offline_mode=True, disconnect_on_exception=False)\n    robot._command_rx_queue.put(mdr.Message(99999, ''))\n    with pytest.raises(Exception):\n        robot._Connect(TEST_IP, offline_mode=True, disconnect_on_exception=False)\n    connect_robot_helper(robot)\n    robot.Disconnect()\n    connect_robot_helper(robot)\n    robot.Disconnect()", "hash": "fb26c88f573e", "chunk_type": "function", "node_type": "function_definition", "signature": "test_sequential_connections(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 525, "original_size_bytes": 529, "start_byte": 14673, "end_byte": 15202}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:0fc214a187c7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_monitoring_connection_extra_messages", "qualified_name": "test_monitoring_connection_extra_messages", "source_path": "mecademicpy/tests/robot_test.py", "loc": [382, 389], "text": "def test_monitoring_connection_extra_messages(robot: mdr.Robot):\n    robot._monitor_rx_queue.put(mdr.Message(99999, ''))\n    robot._monitor_rx_queue.put(mdr.Message(99999, ''))\n    robot._monitor_rx_queue.put(mdr.Message(99999, ''))\n    robot._monitor_rx_queue.put(mdr.Message(99999, ''))\n    connect_robot_helper(robot)\n    robot.WaitConnected(timeout=0)", "hash": "0fc214a187c7", "chunk_type": "function", "node_type": "function_definition", "signature": "test_monitoring_connection_extra_messages(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 355, "original_size_bytes": 468, "start_byte": 15205, "end_byte": 15673}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:218f6243a0fe", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_with_block", "qualified_name": "test_with_block", "source_path": "mecademicpy/tests/robot_test.py", "loc": [394, 413], "text": "def test_with_block(robot: mdr.Robot):\n    called_callbacks = []\n    def on_connected_test():\n        called_callbacks.append('on_connected_test')\n    def on_disconnected_test():\n        called_callbacks.append('on_disconnected_test')\n    with mdr.Robot() as robot2:\n        callbacks = mdr.RobotCallbacks()\n        callbacks.on_connected = on_connected_test\n        callbacks.on_disconnected = on_disconnected_test\n        robot2.RegisterCallbacks(callbacks, run_callbacks_in_separate_thread=True)\n        connect_robot_helper(robot2)\n    assert called_callbacks == ['on_connected_test', 'on_disconnected_test']", "hash": "218f6243a0fe", "chunk_type": "function", "node_type": "function_definition", "signature": "test_with_block(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 612, "original_size_bytes": 733, "start_byte": 15767, "end_byte": 16500}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:7a3cfcbc325f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_with_block_twice", "qualified_name": "test_with_block_twice", "source_path": "mecademicpy/tests/robot_test.py", "loc": [418, 445], "text": "def test_with_block_twice(robot: mdr.Robot):\n    called_callbacks = []\n    def on_connected_test():\n        called_callbacks.append('on_connected_test')\n    def on_disconnected_test():\n        called_callbacks.append('on_disconnected_test')\n    robot2 = mdr.Robot()\n    callbacks = mdr.RobotCallbacks()\n    callbacks.on_connected = on_connected_test\n    callbacks.on_disconnected = on_disconnected_test\n    robot2.RegisterCallbacks(callbacks, run_callbacks_in_separate_thread=True)\n    with robot2:\n        connect_robot_helper(robot2)\n    with robot2:\n        connect_robot_helper(robot2)\n    assert called_callbacks == [\n        'on_connected_test', 'on_disconnected_test', 'on_connected_test', 'on_disconnected_test'\n    ]", "hash": "7a3cfcbc325f", "chunk_type": "function", "node_type": "function_definition", "signature": "test_with_block_twice(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 725, "original_size_bytes": 1020, "start_byte": 16622, "end_byte": 17642}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:c0ddad0675c6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_with_pre_connected", "qualified_name": "test_with_pre_connected", "source_path": "mecademicpy/tests/robot_test.py", "loc": [450, 455], "text": "def test_with_pre_connected(robot: mdr.Robot):\n    robot2 = mdr.Robot()\n    connect_robot_helper(robot2)\n    with pytest.raises(mdr.InvalidStateError):\n        with robot2:\n            robot2.Disconnect()", "hash": "c0ddad0675c6", "chunk_type": "function", "node_type": "function_definition", "signature": "test_with_pre_connected(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 204, "original_size_bytes": 204, "start_byte": 17748, "end_byte": 17952}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:55edeff58ca1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_monitoring_connection_part_1", "qualified_name": "test_monitoring_connection_part_1", "source_path": "mecademicpy/tests/robot_test.py", "loc": [459, 538], "text": "def test_monitoring_connection(robot: mdr.Robot):\n    connect_robot_helper(robot, monitor_mode=True)\n    def make_test_array(code, data):\n        return [x + code for x in data]\n    def make_test_data(code, data, update_type):\n        test_array = make_test_array(code, data)\n        return mdr.TimestampedData(test_array[0], test_array[1:], update_type)\n    def make_test_message(code, data):\n        test_array = make_test_array(code, data)\n        return mdr.Message(code, ','.join([str(x) for x in test_array]))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_TARGET_JOINT_POS, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_TARGET_CART_POS, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_TARGET_JOINT_VEL, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_TARGET_CART_VEL, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_TARGET_CONF, range(4)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_TARGET_CONF_TURN, range(2)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_JOINT_POS, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_ABS_JOINT_POS, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_CART_POS, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_JOINT_VEL, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_JOINT_TORQ, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_CART_VEL, range(7)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_CONF, range(4)))", "hash": "55edeff58ca1", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1679, "original_size_bytes": 2000, "start_byte": 18042, "end_byte": 23346}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:0005448e9a6e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_monitoring_connection_part_2", "qualified_name": "test_monitoring_connection_part_2", "source_path": "mecademicpy/tests/robot_test.py", "loc": [459, 538], "text": "    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_CONF_TURN, range(2)))\n    robot._monitor_rx_queue.put(make_test_message(mx_st.MX_ST_RT_ACCELEROMETER, range(5)))\n    robot.Disconnect()\n    assert robot._robot_rt_data.rt_target_joint_pos == make_test_data(\n        mx_st.MX_ST_RT_TARGET_JOINT_POS, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL)\n    assert robot._robot_rt_data.rt_target_cart_pos == make_test_data(\n        mx_st.MX_ST_RT_TARGET_CART_POS, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL)\n    assert robot._robot_rt_data.rt_target_joint_vel == make_test_data(\n        mx_st.MX_ST_RT_TARGET_JOINT_VEL, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_target_cart_vel == make_test_data(\n        mx_st.MX_ST_RT_TARGET_CART_VEL, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_target_conf == make_test_data(\n        mx_st.MX_ST_RT_TARGET_CONF, range(4), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n    assert robot._robot_rt_data.rt_target_conf_turn == make_test_data(\n        mx_st.MX_ST_RT_TARGET_CONF_TURN, range(2), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n    assert robot._robot_rt_data.rt_joint_pos == make_test_data(\n        mx_st.MX_ST_RT_JOINT_POS, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_abs_joint_pos == make_test_data(\n        mx_st.MX_ST_RT_ABS_JOINT_POS, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_cart_pos == make_test_data(\n        mx_st.MX_ST_RT_CART_POS, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_joint_vel == make_test_data(\n        mx_st.MX_ST_RT_JOINT_VEL, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)", "hash": "0005448e9a6e", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1956, "original_size_bytes": 2054, "start_byte": 18042, "end_byte": 23346}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:1f04e74fa24e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_monitoring_connection_part_3", "qualified_name": "test_monitoring_connection_part_3", "source_path": "mecademicpy/tests/robot_test.py", "loc": [459, 538], "text": "    assert robot._robot_rt_data.rt_joint_torq == make_test_data(\n        mx_st.MX_ST_RT_JOINT_TORQ, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_cart_vel == make_test_data(\n        mx_st.MX_ST_RT_CART_VEL, range(7), mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    assert robot._robot_rt_data.rt_conf == make_test_data(mx_st.MX_ST_RT_CONF, range(4),\n                                                          mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n    assert robot._robot_rt_data.rt_conf_turn == make_test_data(mx_st.MX_ST_RT_CONF_TURN, range(2),\n                                                               mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n    accel_array = make_test_array(mx_st.MX_ST_RT_ACCELEROMETER, range(5))\n    assert robot._robot_rt_data.rt_accelerometer == {\n        accel_array[1]:\n        mdr.TimestampedData(accel_array[0], accel_array[2:],\n                            mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)\n    }", "hash": "1f04e74fa24e", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1074, "original_size_bytes": 1248, "start_byte": 18042, "end_byte": 23346}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:b7187eca809b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_user_set_checkpoints", "qualified_name": "test_user_set_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [542, 556], "text": "def test_user_set_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    checkpoint_1 = robot.SetCheckpoint(1)\n    assert robot._command_tx_queue.get() == 'SetCheckpoint(1)'\n    assert checkpoint_1.id == 1\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_1.wait(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    checkpoint_1.wait(timeout=DEFAULT_TIMEOUT)", "hash": "b7187eca809b", "chunk_type": "function", "node_type": "function_definition", "signature": "test_user_set_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 429, "original_size_bytes": 676, "start_byte": 23443, "end_byte": 24119}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:c1a346e7f910", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_external_checkpoints", "qualified_name": "test_external_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [560, 574], "text": "def test_external_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    checkpoint_1 = robot.ExpectExternalCheckpoint(1)\n    assert robot._command_tx_queue.qsize() == 0\n    assert checkpoint_1.id == 1\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_1.wait(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    checkpoint_1.wait(timeout=DEFAULT_TIMEOUT)", "hash": "c1a346e7f910", "chunk_type": "function", "node_type": "function_definition", "signature": "test_external_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 425, "original_size_bytes": 676, "start_byte": 24230, "end_byte": 24906}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:4fc7dba0a4ed", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_multiple_checkpoints", "qualified_name": "test_multiple_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [578, 613], "text": "def test_multiple_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    checkpoint_1 = robot.SetCheckpoint(1)\n    checkpoint_2 = robot.SetCheckpoint(2)\n    checkpoint_3 = robot.ExpectExternalCheckpoint(3)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_1.wait(timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_2.wait(timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_3.wait(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    checkpoint_1.wait(timeout=DEFAULT_TIMEOUT)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_2.wait(timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_3.wait(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '2'))\n    checkpoint_1.wait(timeout=DEFAULT_TIMEOUT)\n    checkpoint_2.wait(timeout=DEFAULT_TIMEOUT)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_3.wait(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '3'))\n    checkpoint_3.wait(timeout=DEFAULT_TIMEOUT)\n    checkpoint_2.wait(timeout=DEFAULT_TIMEOUT)\n    checkpoint_1.wait(timeout=DEFAULT_TIMEOUT)", "hash": "4fc7dba0a4ed", "chunk_type": "function", "node_type": "function_definition", "signature": "test_multiple_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 1243, "original_size_bytes": 1558, "start_byte": 24974, "end_byte": 26532}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:c01322067422", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_repeated_checkpoints", "qualified_name": "test_repeated_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [618, 639], "text": "def test_repeated_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    checkpoint_1_a = robot.SetCheckpoint(1)\n    checkpoint_1_b = robot.SetCheckpoint(1)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_1_a.wait(timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_1_b.wait(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    with pytest.raises(mdr.TimeoutException):\n        checkpoint_1_b.wait(timeout=0)\n    checkpoint_1_a.wait(timeout=DEFAULT_TIMEOUT)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    checkpoint_1_b.wait(timeout=DEFAULT_TIMEOUT)\n    checkpoint_1_a.wait(timeout=DEFAULT_TIMEOUT)", "hash": "c01322067422", "chunk_type": "function", "node_type": "function_definition", "signature": "test_repeated_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 734, "original_size_bytes": 930, "start_byte": 26663, "end_byte": 27593}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:b50ecbd76092", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_special_checkpoints", "qualified_name": "test_special_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [643, 653], "text": "def test_special_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    robot.SetCheckpoint(1)\n    robot.SetCheckpoint(2)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitForAnyCheckpoint(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    robot.WaitForAnyCheckpoint()", "hash": "b50ecbd76092", "chunk_type": "function", "node_type": "function_definition", "signature": "test_special_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 340, "original_size_bytes": 343, "start_byte": 27627, "end_byte": 27970}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:ada3d54715bc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_unaccounted_checkpoints", "qualified_name": "test_unaccounted_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [657, 664], "text": "def test_unaccounted_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, '1'))\n    robot._check_internal_states()", "hash": "ada3d54715bc", "chunk_type": "function", "node_type": "function_definition", "signature": "test_unaccounted_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 200, "original_size_bytes": 308, "start_byte": 28061, "end_byte": 28369}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:9f0a01d7b19c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_stranded_checkpoints", "qualified_name": "test_stranded_checkpoints", "source_path": "mecademicpy/tests/robot_test.py", "loc": [668, 677], "text": "def test_stranded_checkpoints(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    checkpoint_1 = robot.SetCheckpoint(1)\n    robot.Disconnect()\n    with pytest.raises(mdr.InterruptException):\n        checkpoint_1.wait(timeout=DEFAULT_TIMEOUT)", "hash": "9f0a01d7b19c", "chunk_type": "function", "node_type": "function_definition", "signature": "test_stranded_checkpoints(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 244, "original_size_bytes": 340, "start_byte": 28446, "end_byte": 28786}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:1502330071c1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_events", "qualified_name": "test_events", "source_path": "mecademicpy/tests/robot_test.py", "loc": [681, 756], "text": "def test_events(robot: mdr.Robot):\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitActivated(timeout=0)\n    robot.WaitDeactivated()\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitConnected(timeout=0)\n    robot.WaitDisconnected()\n    connect_robot_helper(robot)\n    robot.WaitConnected()\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitDisconnected(timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitActivated(timeout=0)\n    robot.WaitDeactivated()\n    robot.ActivateRobot()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,0,0,0,0,0,0'))\n    robot.WaitActivated(timeout=1)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitDeactivated(timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitHomed(timeout=0)\n    robot.Home()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n    robot.WaitHomed(timeout=1)\n    robot.PauseMotion()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,1,0,0'))\n    robot.WaitMotionPaused(timeout=DEFAULT_TIMEOUT)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitMotionResumed(timeout=0)\n    robot.ResumeMotion()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n    robot.WaitMotionResumed(timeout=1)\n    robot.ClearMotion()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CLEAR_MOTION, ''))\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,1,1,1'))\n    robot.WaitMotionCleared(timeout=1)\n    robot._robot_events.on_end_of_block.wait(timeout=1)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,1,0,0,0'))\n    robot._robot_events.on_error.wait(timeout=1)\n    robot.ResetError()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n    robot._robot_events.on_error_reset.wait(timeout=1)\n    robot.DeactivateRobot()\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '0,0,0,0,0,0,0'))\n    robot.WaitDeactivated(timeout=1)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitActivated(timeout=0)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_BRAKES_OFF, ''))\n    robot._robot_events.on_brakes_deactivated.wait(timeout=DEFAULT_TIMEOUT)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_BRAKES_ON, ''))\n    robot._robot_events.on_brakes_activated.wait(timeout=DEFAULT_TIMEOUT)\n    with pytest.raises(mdr.TimeoutException):\n        robot.WaitDisconnected(timeout=0)\n    robot.Disconnect()\n    robot.WaitDisconnected()", "hash": "1502330071c1", "chunk_type": "function", "node_type": "function_definition", "signature": "test_events(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 2668, "original_size_bytes": 2891, "start_byte": 28845, "end_byte": 31736}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:4929f8229a6d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_disconnect_on_exception", "qualified_name": "test_disconnect_on_exception", "source_path": "mecademicpy/tests/robot_test.py", "loc": [760, 772], "text": "def test_disconnect_on_exception(robot: mdr.Robot):\n    connect_robot_helper(robot, disconnect_on_exception=True)\n    with pytest.raises(mdr.DisconnectError):\n        robot.SetCheckpoint(0)\n    robot.Disconnect()\n    connect_robot_helper(robot, disconnect_on_exception=False)\n    with pytest.raises(AssertionError):\n        robot.SetCheckpoint(0)", "hash": "4929f8229a6d", "chunk_type": "function", "node_type": "function_definition", "signature": "test_disconnect_on_exception(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 346, "original_size_bytes": 411, "start_byte": 31821, "end_byte": 32232}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:900119e6f3e8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_callbacks_part_1", "qualified_name": "test_callbacks_part_1", "source_path": "mecademicpy/tests/robot_test.py", "loc": [777, 942], "text": "def test_callbacks(robot: mdr.Robot):\n    callbacks = mdr.RobotCallbacks()\n    expected_callbacks = copy.deepcopy(callbacks.__dict__)\n    expected_callbacks.pop('on_monitor_message')\n    called_callbacks = []\n    def test_callback(name):\n        called_callbacks.append(name)\n    for attr in callbacks.__dict__:\n        callbacks.__dict__[attr] = partial(test_callback, name=attr)\n    checkpoint_id = 123\n    def checkpoint_reached_callback(id):\n        called_callbacks.append('on_checkpoint_reached')\n        called_callbacks.append(id)\n    def checkpoint_discarded_callback(id):\n        called_callbacks.append('on_checkpoint_discarded')\n        called_callbacks.append(id)\n    callbacks.on_checkpoint_reached = checkpoint_reached_callback\n    callbacks.on_checkpoint_discarded = checkpoint_discarded_callback\n    def command_message_callback(message):\n        called_callbacks.append('on_command_message')\n    def monitor_message_callback(message):\n        called_callbacks.append('on_monitor_message')\n    callbacks.on_command_message = command_message_callback\n    callbacks.on_monitor_message = monitor_message_callback", "hash": "900119e6f3e8", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1126, "original_size_bytes": 2023, "start_byte": 32429, "end_byte": 40197}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:e6fc115fdfdd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_callbacks_part_2", "qualified_name": "test_callbacks_part_2", "source_path": "mecademicpy/tests/robot_test.py", "loc": [777, 942], "text": "    def end_of_cycle_callback():\n        called_callbacks.append('on_end_of_cycle')\n    callbacks.on_end_of_cycle = end_of_cycle_callback\n    for run_in_thread in [True]:\n        robot.RegisterCallbacks(callbacks, run_callbacks_in_separate_thread=run_in_thread)\n        connect_robot_helper(robot, enable_synchronous_mode=True)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,0,0,0,0,0,0'))\n        robot.ActivateRobot()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CYCLE_END, '12345'))\n        robot.Home()\n        robot.GetStatusRobot(synchronous_update=False)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,1,0,0'))\n        robot.GetRtGripperState(synchronous_update=False)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_GRIPPER, '0,0,0,0,0,0'))\n        robot.SetCheckpoint(checkpoint_id)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_REACHED, str(checkpoint_id)))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,1,0,0'))\n        robot.PauseMotion()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n        robot.ResumeMotion()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CLEAR_MOTION, ''))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_OFFLINE_START, ''))", "hash": "e6fc115fdfdd", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1511, "original_size_bytes": 2019, "start_byte": 32429, "end_byte": 40197}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:5d9f7c761a1c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_callbacks_part_3", "qualified_name": "test_callbacks_part_3", "source_path": "mecademicpy/tests/robot_test.py", "loc": [777, 942], "text": "        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_POSE, '0.0,0.0,0.0,0.0,0.0,0.0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,1,0,0,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n        robot.ResetError()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_PSTOP2, '1'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_PSTOP2, '2'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_PSTOP2, '0'))\n        robot.ResetPStop2()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_PSTOP1, '1'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_PSTOP1, '2'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_PSTOP1, '0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_ESTOP, '1'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_ESTOP, '2'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_ESTOP, '0'))\n        robot.ResetError()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,1,0,0,0,0'))\n        robot.ActivateSim()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,0,0'))\n        robot.DeactivateSim()\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_EXTTOOL_SIM, '1'))\n        robot.SetExtToolSim(MxExtToolType.MX_EXT_TOOL_MEGP25_SHORT)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_EXTTOOL_SIM, '0'))\n        robot.SetExtToolSim(MxExtToolType.MX_EXT_TOOL_NONE)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_EXTTOOL_STATUS, '33,1,1,1,1,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VALVE_STATE, '34,1,1'))", "hash": "5d9f7c761a1c", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1753, "original_size_bytes": 2014, "start_byte": 32429, "end_byte": 40197}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:87d2a92b6efa", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_callbacks_part_4", "qualified_name": "test_callbacks_part_4", "source_path": "mecademicpy/tests/robot_test.py", "loc": [777, 942], "text": "        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_GRIPPER_STATE, '35,1,1,0,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_OUTPUT_STATE, '36,1,1,0,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_INPUT_STATE, '36,1,1,0,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_IO_STATUS, '39,1,1,1,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_IO_STATUS, '40,1,1,0,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VACUUM_STATE, '41,1,1,0'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VACUUM_PRESSURE, '42,-1'))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RECOVERY_MODE_ON, ''))\n        robot.SetRecoveryMode(True)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RECOVERY_MODE_OFF, ''))\n        robot.SetRecoveryMode(False)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_OFFLINE_START, ''))\n        robot.SetCheckpoint(checkpoint_id)\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_CHECKPOINT_DISCARDED, str(checkpoint_id)))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '0,0,0,0,0,0,0'))\n        robot.DeactivateRobot()\n        robot.Disconnect()\n        if not run_in_thread:\n            robot.RunCallbacks()\n        robot.UnregisterCallbacks()\n        for attr in expected_callbacks:\n            assert attr in called_callbacks, f'callback {attr} not called (called={called_callbacks})'\n        assert checkpoint_id in called_callbacks\n        assert robot._callback_thread is None", "hash": "87d2a92b6efa", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1591, "original_size_bytes": 1709, "start_byte": 32429, "end_byte": 40197}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:31353fa674dd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_event_with_exception", "qualified_name": "test_event_with_exception", "source_path": "mecademicpy/tests/robot_test.py", "loc": [946, 961], "text": "def test_event_with_exception():\n    event = mdr.InterruptableEvent()\n    event.set()\n    event.wait(timeout=0)\n    event.clear()\n    with pytest.raises(mdr.TimeoutException):\n        event.wait(timeout=0)\n    exception_event = mdr.InterruptableEvent()\n    exception_event.abort()\n    with pytest.raises(mdr.InterruptException):\n        exception_event.wait(timeout=0)", "hash": "31353fa674dd", "chunk_type": "function", "node_type": "function_definition", "signature": "test_event_with_exception()", "docstring": null, "chunk_size_bytes": 368, "original_size_bytes": 466, "start_byte": 40259, "end_byte": 40725}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:7e80436ad26e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_motion_commands", "qualified_name": "test_motion_commands", "source_path": "mecademicpy/tests/robot_test.py", "loc": [966, 1002], "text": "def test_motion_commands(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    skip_commands = [\n        'MoveGripper', 'MoveJoints', 'MoveJointsVel', 'MoveJointsRel', 'SetSynchronousMode', 'SetTorqueLimits',\n        'SetTorqueLimitsCfg', 'SetIoSim', 'SetOutputState', 'SetOutputStateImmediate', 'SetVariable'\n    ]\n    deprecated_commands = [\n        'MoveLinRelTRF', 'MoveLinRelWRF', 'MoveLinVelTRF', 'MoveLinVelWRF', 'SetRTC', 'SetTRF', 'SetWRF'\n    ]\n    for name in dir(robot):\n        if name in skip_commands or name in deprecated_commands:\n            continue\n        elif name.startswith('Move') or name.startswith('Set'):\n            method = getattr(robot, name)\n            num_args = method.__wrapped__.__code__.co_argcount\n            test_args = list(range(1, num_args))\n            test_args_text = ','.join([str(x) for x in test_args])\n            method(*test_args)\n            text_command = robot._command_tx_queue.get(block=True, timeout=1)\n            assert text_command.find(\n                name) == 0, f'Method {name} does not match text command ({text_command} does not include {name})'\n            assert text_command.find(\n                test_args_text\n            ) != -1, f'Method {name} args do not match text command ({text_command} does not include {test_args_text})'", "hash": "7e80436ad26e", "chunk_type": "function", "node_type": "function_definition", "signature": "test_motion_commands(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 1304, "original_size_bytes": 1660, "start_byte": 40941, "end_byte": 42601}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:5cdc64347a5a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_joint_moves", "qualified_name": "test_joint_moves", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1006, 1034], "text": "def test_joint_moves(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    fake_joint = fake_data(seed=1, length=6)\n    fake_joints_str = fake_string(seed=1, length=6)\n    robot.MoveJoints(*fake_joint)\n    text_command = robot._command_tx_queue.get(block=True, timeout=1)\n    assert text_command.find('MoveJoints') == 0\n    assert text_command.find(fake_joints_str) != -1\n    with pytest.raises(ValueError):\n        robot.MoveJoints(1, 2, 3)\n    robot.MoveJointsRel(*fake_joint)\n    text_command = robot._command_tx_queue.get(block=True, timeout=1)\n    assert text_command.find('MoveJointsRel') == 0\n    assert text_command.find(fake_joints_str) != -1\n    with pytest.raises(ValueError):\n        robot.MoveJointsRel(1, 2, 3)\n    robot.MoveJointsVel(*fake_joint)\n    text_command = robot._command_tx_queue.get(block=True, timeout=1)\n    assert text_command.find('MoveJointsVel') == 0\n    assert text_command.find(fake_joints_str) != -1\n    with pytest.raises(ValueError):\n        robot.MoveJointsVel(1, 2, 3)", "hash": "5cdc64347a5a", "chunk_type": "function", "node_type": "function_definition", "signature": "test_joint_moves(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 1008, "original_size_bytes": 1015, "start_byte": 42676, "end_byte": 43691}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:a60439fc6c50", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_synchronous_gets", "qualified_name": "test_synchronous_gets", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1038, 1089], "text": "def test_synchronous_gets(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    expected_commands = ['SyncCmdQueue(1)', 'GetRtTargetJointPos']\n    robot_responses = []\n    robot_responses.append(mdr.Message(mx_st.MX_ST_SYNC_CMD_QUEUE, '1'))\n    robot_responses.append(mdr.Message(mx_st.MX_ST_RT_TARGET_JOINT_POS, '1234, 1, 2, 3, 4, 5, 6'))\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_commands,\n                                        robot_responses))\n    fake_robot.start()\n    assert robot.GetRtTargetJointPos(synchronous_update=True, timeout=1) == [1, 2, 3, 4, 5, 6]\n    expected_response = mdr.TimestampedData(1234, [1, 2, 3, 4, 5, 6],\n                                            mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL)\n    assert robot.GetRtTargetJointPos(include_timestamp=True, synchronous_update=False) == expected_response\n    fake_robot.join()\n    expected_commands = ['SyncCmdQueue(2)', 'GetRtTargetCartPos']\n    robot_responses = []\n    robot_responses.append(mdr.Message(mx_st.MX_ST_SYNC_CMD_QUEUE, '2'))\n    robot_responses.append(mdr.Message(mx_st.MX_ST_RT_TARGET_CART_POS, '2345, 2, 3, 4, 5, 6, 7'))\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_commands,\n                                        robot_responses))\n    fake_robot.start()\n    assert robot.GetRtTargetCartPos(synchronous_update=True, timeout=1) == [2, 3, 4, 5, 6, 7]\n    expected_response = mdr.TimestampedData(2345, [2, 3, 4, 5, 6, 7],\n                                            mdr.RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL)\n    assert robot.GetRtTargetCartPos(include_timestamp=True, synchronous_update=False) == expected_response\n    fake_robot.join()\n    with pytest.raises(mdr.TimeoutException):\n        robot.GetRtTargetJointPos(synchronous_update=True, timeout=0)\n    with pytest.raises(mdr.TimeoutException):\n        robot.GetRtTargetCartPos(synchronous_update=True, timeout=0)", "hash": "a60439fc6c50", "chunk_type": "function", "node_type": "function_definition", "signature": "test_synchronous_gets(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 2129, "original_size_bytes": 2420, "start_byte": 43744, "end_byte": 46164}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:37a8cf1adcfa", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "fake_data", "qualified_name": "fake_data", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1093, 1094], "text": "def fake_data(seed, length=6):\n    return [seed] * length", "hash": "37a8cf1adcfa", "chunk_type": "function", "node_type": "function_definition", "signature": "fake_data(seed, length=6)", "docstring": null, "chunk_size_bytes": 57, "original_size_bytes": 57, "start_byte": 46250, "end_byte": 46307}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:996b2edd7176", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "fake_string", "qualified_name": "fake_string", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1097, 1098], "text": "def fake_string(seed, length=6):\n    return ','.join([str(x) for x in fake_data(seed, length)])", "hash": "996b2edd7176", "chunk_type": "function", "node_type": "function_definition", "signature": "fake_string(seed, length=6)", "docstring": null, "chunk_size_bytes": 95, "original_size_bytes": 95, "start_byte": 46310, "end_byte": 46405}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:fb08e3ae0e9d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_synchronous_gets_legacy", "qualified_name": "test_synchronous_gets_legacy", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1102, 1149], "text": "def test_synchronous_gets_legacy(robot: mdr.Robot):\n    connect_robot_helper(robot, yaml_filename='meca500_r3_v8_3.yml')\n    robot._monitor_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_JOINTS, fake_string(seed=1)))\n    robot._monitor_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_POSE, fake_string(seed=1)))\n    robot._monitor_rx_queue.put(mdrb._TERMINATE)\n    robot._monitor_rx_handler_thread.join(timeout=5)\n    robot._initialize_monitoring_connection()\n    with pytest.raises(mdr.InvalidStateError):\n        robot.GetRtTargetJointPos(include_timestamp=True)\n    with pytest.raises(mdr.InvalidStateError):\n        robot.GetRtTargetCartPos(include_timestamp=True)\n    assert robot.GetRtTargetJointPos(include_timestamp=False) == fake_data(seed=1)\n    assert robot.GetRtTargetCartPos(include_timestamp=False) == fake_data(seed=1)\n    assert not robot.GetRobotInfo().rt_message_capable\n    expected_command = 'GetJoints'\n    robot_response = mdr.Message(mx_st.MX_ST_GET_JOINTS, fake_string(seed=2))\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_command,\n                                        robot_response))\n    fake_robot.start()\n    assert robot.GetRtTargetJointPos(synchronous_update=True, timeout=1) == fake_data(seed=2)\n    fake_robot.join()\n    expected_command = 'GetPose'\n    robot_response = mdr.Message(mx_st.MX_ST_GET_POSE, fake_string(seed=2))\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_command,\n                                        robot_response))\n    fake_robot.start()\n    assert robot.GetRtTargetCartPos(synchronous_update=True, timeout=1) == fake_data(seed=2)\n    fake_robot.join()", "hash": "fb08e3ae0e9d", "chunk_type": "function", "node_type": "function_definition", "signature": "test_synchronous_gets_legacy(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 1836, "original_size_bytes": 2196, "start_byte": 46462, "end_byte": 48658}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:1054331cad6f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_start_offline_program", "qualified_name": "test_start_offline_program", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1153, 1179], "text": "def test_start_offline_program(robot: mdr.Robot):\n    connect_robot_helper(robot, enable_synchronous_mode=True)\n    expected_command = 'StartProgram(1)'\n    robot_response = mdr.Message(mx_st.MX_ST_OFFLINE_START, '')\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_command,\n                                        robot_response))\n    fake_robot.start()\n    robot.StartOfflineProgram(1, timeout=1)\n    fake_robot.join(timeout=1)\n    robot_response = mdr.Message(mx_st.MX_ST_NO_OFFLINE_SAVED, '')\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_command,\n                                        robot_response))\n    fake_robot.start()\n    with pytest.raises(mdr.InvalidStateError):\n        robot.StartOfflineProgram(1, timeout=1)\n    fake_robot.join(timeout=1)", "hash": "1054331cad6f", "chunk_type": "function", "node_type": "function_definition", "signature": "test_start_offline_program(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 992, "original_size_bytes": 1106, "start_byte": 48699, "end_byte": 49805}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:e709e6f3702d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_monitor_mode", "qualified_name": "test_monitor_mode", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1183, 1216], "text": "def test_monitor_mode(robot: mdr.Robot):\n    robot._monitor_rx_queue.put(mdr.Message(mx_st.MX_ST_CONNECTED, MECA500_CONNECTED_RESPONSE))\n    robot._Connect(TEST_IP,\n                   monitor_mode=True,\n                   offline_mode=True,\n                   disconnect_on_exception=False,\n                   enable_synchronous_mode=True)\n    robot.WaitConnected(timeout=0)\n    assert robot.GetRobotInfo().num_joints == 6\n    fake_joint = fake_data(seed=1, length=6)\n    fake_joints_str = fake_string(seed=1, length=6)\n    fake_pose = fake_data(seed=2, length=6)\n    fake_pose_str = fake_string(seed=2, length=6)\n    robot._monitor_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_JOINT_POS, '1234, ' + fake_joints_str))\n    robot._monitor_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_CART_POS, '2345, ' + fake_pose_str))\n    robot._monitor_rx_queue.put(mdrb._TERMINATE)\n    robot._monitor_rx_handler_thread.join(timeout=5)\n    assert robot.GetRtTargetJointPos() == fake_joint\n    assert robot.GetRtTargetCartPos() == fake_pose\n    with pytest.raises(mdr.InvalidStateError):\n        robot.MoveJoints(*fake_joint)", "hash": "e709e6f3702d", "chunk_type": "function", "node_type": "function_definition", "signature": "test_monitor_mode(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 1113, "original_size_bytes": 1387, "start_byte": 49861, "end_byte": 51248}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:9c1f3b42f7c9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_custom_command", "qualified_name": "test_custom_command", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1220, 1234], "text": "def test_custom_command(robot: mdr.Robot):\n    connect_robot_helper(robot)\n    expected_command = 'TestCommand'\n    robot_response = mdr.Message(mx_st.MX_ST_CMD_SUCCESSFUL, 'TestResponse')\n    fake_robot = threading.Thread(target=simple_response_handler,\n                                  args=(robot._command_tx_queue, robot._command_rx_queue, expected_command,\n                                        robot_response))\n    fake_robot.start()\n    response_event = robot.SendCustomCommand('TestCommand', expected_responses=[mx_st.MX_ST_CMD_SUCCESSFUL])\n    assert response_event.wait(timeout=DEFAULT_TIMEOUT) == robot_response\n    assert len(robot._custom_response_events) == 0", "hash": "9c1f3b42f7c9", "chunk_type": "function", "node_type": "function_definition", "signature": "test_custom_command(robot: mdr.Robot)", "docstring": null, "chunk_size_bytes": 676, "original_size_bytes": 680, "start_byte": 51304, "end_byte": 51984}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:f2e3225460c0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "remove_all_whitespaces", "qualified_name": "remove_all_whitespaces", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1238, 1239], "text": "def remove_all_whitespaces(string):\n    return re.sub(r\"\\s+\", \"\", string)", "hash": "f2e3225460c0", "chunk_type": "function", "node_type": "function_definition", "signature": "remove_all_whitespaces(string)", "docstring": null, "chunk_size_bytes": 73, "original_size_bytes": 73, "start_byte": 52047, "end_byte": 52120}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:6269840a5c11", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "robot_trajectory_files_identical", "qualified_name": "robot_trajectory_files_identical", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1244, 1248], "text": "def robot_trajectory_files_identical(file_path_1, file_path_2):\n    robot_traj_1 = robot_files.RobotTrajectories.from_file(file_path_1)\n    robot_traj_2 = robot_files.RobotTrajectories.from_file(file_path_2)\n    return robot_traj_1 == robot_traj_2", "hash": "6269840a5c11", "chunk_type": "function", "node_type": "function_definition", "signature": "robot_trajectory_files_identical(file_path_1, file_path_2)", "docstring": null, "chunk_size_bytes": 247, "original_size_bytes": 248, "start_byte": 52192, "end_byte": 52440}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:f5f818259409", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_file_logger_part_1", "qualified_name": "test_file_logger_part_1", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1252, 1375], "text": "def test_file_logger(tmp_path, robot: mdr.Robot):\n    connect_robot_helper(robot)\n    robot._robot_info.rt_message_capable = True\n    io_module_outputs = mdr.Message(mx_st.MX_ST_RT_OUTPUT_STATE,\n                                    f'0,{MxIoBankId.MX_IO_BANK_ID_IO_MODULE},1,0,1,0,1,0,1,0')\n    io_module_inputs = mdr.Message(mx_st.MX_ST_RT_INPUT_STATE,\n                                   f'0,{MxIoBankId.MX_IO_BANK_ID_IO_MODULE},0,1,0,1,0,1,0,1')\n    robot._command_rx_queue.put(io_module_outputs)\n    robot._command_rx_queue.put(io_module_inputs)\n    start_time = time.monotonic()\n    while len(robot._robot_rt_data.rt_io_module_inputs.data) == 0:\n        if time.monotonic() - start_time >= 1:\n            raise TimeoutError('Timeout waiting for MX_ST_RT_INPUT_STATE to be handled for io_module')\n        time.sleep(0.001)\n    sig_gen_outputs = mdr.Message(mx_st.MX_ST_RT_OUTPUT_STATE,\n                                  f'0,{MxIoBankId.MX_IO_BANK_ID_SIG_GEN},1,0,1,0,1,0,1,0, 1,1,0,0,1,1,0,0,1')\n    sig_gen_inputs = mdr.Message(mx_st.MX_ST_RT_INPUT_STATE,\n                                 f'0,{MxIoBankId.MX_IO_BANK_ID_SIG_GEN},0,1,0,1,0,1,0,1, 1,1,0')\n    robot._command_rx_queue.put(sig_gen_outputs)\n    robot._command_rx_queue.put(sig_gen_inputs)\n    start_time = time.monotonic()\n    while len(robot._robot_rt_data.rt_sig_gen_inputs.data) == 0:\n        if time.monotonic() - start_time >= 1:\n            raise TimeoutError('Timeout waiting for MX_ST_RT_INPUT_STATE to be handled for sig_gen')\n        time.sleep(0.001)\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_STATUS_ROBOT, '1,1,0,0,0,1,1'))\n    robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_REAL_TIME_MONITORING, ''))", "hash": "f5f818259409", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1704, "original_size_bytes": 2077, "start_byte": 52539, "end_byte": 60324}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:5ca7790a6171", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_file_logger_part_2", "qualified_name": "test_file_logger_part_2", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1252, 1375], "text": "    with robot.FileLogger(0.001, file_path=tmp_path, record_time=False):\n        robot.MoveJoints(0, -60, 60, 0, 0, 0)\n        robot.MoveJoints(0, 0, 0, 0, 0, 0)\n        for i in range(1, 4):\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_JOINTS, fake_string(seed=3)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_POSE, fake_string(seed=4)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_CONF, fake_string(seed=102, length=3)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_CONF_TURN, fake_string(seed=103, length=2)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_JOINT_POS, fake_string(seed=3, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_CART_POS, fake_string(seed=4, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_JOINT_VEL, fake_string(seed=5, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_CART_VEL, fake_string(seed=6, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_JOINT_TORQ, fake_string(seed=666, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_CONF, fake_string(seed=7, length=4)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TARGET_CONF_TURN, fake_string(seed=8, length=2)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_JOINT_POS, fake_string(seed=9, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CART_POS, fake_string(seed=10, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_JOINT_VEL, fake_string(seed=11, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_JOINT_TORQ, fake_string(seed=12, length=7)))", "hash": "5ca7790a6171", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1864, "original_size_bytes": 1986, "start_byte": 52539, "end_byte": 60324}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:e1ec82786989", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_file_logger_part_3", "qualified_name": "test_file_logger_part_3", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1252, 1375], "text": "            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CART_VEL, fake_string(seed=13, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CONF, fake_string(seed=14, length=4)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CONF_TURN, fake_string(seed=15, length=2)))\n            robot._command_rx_queue.put(\n                mdr.Message(mx_st.MX_ST_RT_ACCELEROMETER, '16,5,' + fake_string(seed=16000, length=3)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_ABS_JOINT_POS, fake_string(seed=99, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_EXTTOOL_STATUS, fake_string(seed=17, length=6)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VALVE_STATE, fake_string(seed=18, length=3)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_GRIPPER_STATE, fake_string(seed=19, length=5)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_GRIPPER_FORCE, fake_string(seed=20, length=2)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_GRIPPER_POS, fake_string(seed=21, length=2)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_WRF, fake_string(seed=22, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_TRF, fake_string(seed=23, length=7)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CHECKPOINT, fake_string(seed=24, length=2)))\n            robot._command_rx_queue.put(io_module_outputs)\n            robot._command_rx_queue.put(io_module_inputs)\n            robot._command_rx_queue.put(\n                mdr.Message(mx_st.MX_ST_RT_IO_STATUS, f'26,{MxIoBankId.MX_IO_BANK_ID_IO_MODULE},26,26,26'))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VACUUM_STATE, fake_string(seed=27, length=4)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VACUUM_PRESSURE, fake_string(seed=28, length=2)))\n            robot._command_rx_queue.put(sig_gen_outputs)", "hash": "e1ec82786989", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 2034, "original_size_bytes": 2042, "start_byte": 52539, "end_byte": 60324}
{"chunk_id": "meca_samples:mecademicpy/tests/robot_test.py:cfe4b3156b57", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_file_logger_part_4", "qualified_name": "test_file_logger_part_4", "source_path": "mecademicpy/tests/robot_test.py", "loc": [1252, 1375], "text": "            robot._command_rx_queue.put(sig_gen_inputs)\n            robot._command_rx_queue.put(\n                mdr.Message(mx_st.MX_ST_RT_IO_STATUS, f'29,{MxIoBankId.MX_IO_BANK_ID_SIG_GEN},29,29,29'))\n            robot._command_rx_queue.put(\n                mdr.Message(mx_st.MX_ST_RT_EFFECTIVE_TIME_SCALING, fake_string(seed=30, length=2)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_VM, fake_string(seed=31, length=10)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CURRENT, fake_string(seed=32, length=2)))\n            robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_RT_CYCLE_END, str(i * 100)))\n        robot._command_rx_queue.put(mdr.Message(mx_st.MX_ST_GET_REAL_TIME_MONITORING, ''))\n        robot._command_rx_queue.put(mdrb._TERMINATE)\n    robot._rx_handler_thread.join(timeout=5)\n    robot._initialize_monitoring_connection()\n    directory = os.listdir(tmp_path)\n    assert len(directory) == 1\n    log_file_name = directory[0]\n    assert log_file_name.startswith('Meca500_R3_v9.147.0')\n    log_file_path = os.path.join(tmp_path, log_file_name)\n    reference_file_path = os.path.join(os.path.dirname(__file__), 'log_file_reference.zip')\n    assert robot_trajectory_files_identical(log_file_path, reference_file_path)\n    robot.Disconnect()", "hash": "cfe4b3156b57", "chunk_type": "function_part", "node_type": "function_definition", "signature": null, "docstring": null, "chunk_size_bytes": 1298, "original_size_bytes": 1677, "start_byte": 52539, "end_byte": 60324}
