{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:b18452216544", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MainUI", "qualified_name": "MainUI", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [1, 1], "text": "import MainUI", "hash": "b18452216544", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 0, "end_byte": 13}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:bbf2d33515e8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "QtWidgets", "qualified_name": "QtWidgets", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [2, 2], "text": "from PyQt5 import QtWidgets, QtGui", "hash": "bbf2d33515e8", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 34, "original_size_bytes": 34, "start_byte": 14, "end_byte": 48}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:a1d472a191fa", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "QObject", "qualified_name": "QObject", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [3, 3], "text": "from PyQt5.QtCore import QObject, QThread, pyqtSignal", "hash": "a1d472a191fa", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 53, "original_size_bytes": 53, "start_byte": 49, "end_byte": 102}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:e3fe2efec582", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "sleep", "qualified_name": "sleep", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [4, 4], "text": "from time import sleep", "hash": "e3fe2efec582", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 22, "original_size_bytes": 22, "start_byte": 103, "end_byte": 125}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:80760bda9a96", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "joystick", "qualified_name": "joystick", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [5, 5], "text": "import joystick", "hash": "80760bda9a96", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 15, "original_size_bytes": 15, "start_byte": 126, "end_byte": 141}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:bdc8e8281109", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "parsdict", "qualified_name": "parsdict", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [6, 6], "text": "import parsdict", "hash": "bdc8e8281109", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 15, "original_size_bytes": 15, "start_byte": 142, "end_byte": 157}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:3e2dd63215ad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "partial", "qualified_name": "partial", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [7, 7], "text": "from functools import partial", "hash": "3e2dd63215ad", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 29, "original_size_bytes": 29, "start_byte": 158, "end_byte": 187}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:0b66d84588af", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "robot", "qualified_name": "robot", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [9, 9], "text": "import robot", "hash": "0b66d84588af", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 12, "original_size_bytes": 12, "start_byte": 189, "end_byte": 201}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:7237d6afd180", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MOXAE1212 as mx", "qualified_name": "MOXAE1212 as mx", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [10, 10], "text": "import MOXAE1212 as mx", "hash": "7237d6afd180", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 22, "original_size_bytes": 22, "start_byte": 202, "end_byte": 224}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:f981aa7d0097", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Application", "qualified_name": "Application", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [13, 398], "text": "class Application(QtWidgets.QMainWindow, MainUI.Ui_MainWindow):\n    def __init__(self, *args, **kwargs):\n        QtWidgets.QMainWindow.__init__(self, *args, **kwargs)\n        self.setupUi(self)\n        self.setFixedSize(1114, 730)\n        self.setWindowTitle(\"Mecademic Robot\")\n        self.setWindowIcon(QtGui.QIcon(\"robot_icon.png\"))\n        self.tcpPose.set_label(['x', 'y', 'z', 'alpha', 'beta', 'gamma'])\n        self.jointPose.set_label(['J1', 'J2', 'J3', 'J4', 'J5', 'J6'])", "hash": "f981aa7d0097", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 480, "original_size_bytes": 508, "start_byte": 227, "end_byte": 17551}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:1aeb3eeac970", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Application.__init__", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [14, 74], "text": "def __init__(self, *args, **kwargs):\n        QtWidgets.QMainWindow.__init__(self, *args, **kwargs)\n        self.setupUi(self)\n        self.setFixedSize(1114, 730)\n        self.setWindowTitle(\"Mecademic Robot\")\n        self.setWindowIcon(QtGui.QIcon(\"robot_icon.png\"))\n        self.tcpPose.set_label(['x', 'y', 'z', 'alpha', 'beta', 'gamma'])\n        self.jointPose.set_label(['J1', 'J2', 'J3', 'J4', 'J5', 'J6'])\n        self.disableUI()\n        self.errorLabel.setStyleSheet(\"background-color:rgb(200,200,200)\")\n        self.robot = robot.Robot()\n        self.moxa = mx.MoxaE1212()\n        self.monitorThread = QThread()\n        self.monitorWorker = RobotMonitoring(self.robot)\n        self.moxaThread = QThread()\n        self.moxaWorker = Moxa_monitoring(self.moxa)\n        self.jogMode = None\n        self.jogVelocity = None\n        self.jointp = None\n        self.tcpp = None\n        self.moxa_state = None\n        self.pushButtonConnect.clicked.connect(self.on_connect)\n        self.pushButtonDisconnect.clicked.connect(self.on_disconnect)\n        self.pushButtonUnpause.clicked.connect(self.on_unpause)\n        self.pushButtonActivate.clicked.connect(self.on_activate)\n        self.pushButtonHome.clicked.connect(self.on_home)\n        self.pushButtonReset.clicked.connect(self.on_reset_error)\n        self.pushButtonTest.clicked.connect(self.on_get_robot_state)\n        self.pushButtonStart.clicked.connect(self.on_play)\n        self.pushButtonGenerate.clicked.connect(self.on_generate_script)\n        self.jogWindow.delta.connect(self.on_jog_button)\n        self.jogWindow.mode.connect(self.on_get_jog_mode)\n        self.jogWindow.vel.connect(self.on_get_jog_velocity)\n        self.jogWindow.joymode.clicked.connect(self.on_joy_mode)\n        self.teachWindow.but1.clicked.connect(self.on_send_command)\n        self.teachWindow.but2.clicked.connect(self.on_insert_movejoints)\n        self.teachWindow.but3.clicked.connect(self.on_insert_movepose)\n        self.teachWindow.but4.clicked.connect(self.on_insert_movelin)\n        self.moxaWidget.out_0.clicked.connect(lambda ignore, out=0: self.on_click_output(out))\n        self.moxaWidget.out_1.clicked.connect(lambda ignore, out=1: self.on_click_output(out))\n        self.moxaWidget.out_2.clicked.connect(lambda ignore, out=2: self.on_click_output(out))\n        self.moxaWidget.out_3.clicked.connect(lambda ignore, out=3: self.on_click_output(out))\n        self.moxaWidget.out_4.clicked.connect(lambda ignore, out=4: self.on_click_output(out))\n        self.moxaWidget.out_5.clicked.connect(lambda ignore, out=5: self.on_click_output(out))\n        self.moxaWidget.out_6.clicked.connect(lambda ignore, out=6: self.on_click_output(out))\n        self.moxaWidget.out_7.clicked.connect(lambda ignore, out=7: self.on_click_output(out))\n        self.monitorWorker.joints.connect(self.updateJointPose)\n        self.monitorWorker.pose.connect(self.updateTCPPose)\n        self.monitorWorker.error_state.connect(self.updateErrorState)", "hash": "1aeb3eeac970", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, *args, **kwargs)", "docstring": null, "chunk_size_bytes": 2976, "original_size_bytes": 3154, "start_byte": 295, "end_byte": 3449}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:fcb8e43f0266", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "closeEvent", "qualified_name": "Application.closeEvent", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [76, 79], "text": "def closeEvent(self, event):\n        self.monitorWorker.dcFlag()\n        self.moxaWorker.dcFlag()\n        event.accept()", "hash": "fcb8e43f0266", "chunk_type": "method", "node_type": "function_definition", "signature": "closeEvent(self, event)", "docstring": null, "chunk_size_bytes": 120, "original_size_bytes": 120, "start_byte": 3455, "end_byte": 3575}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:a128855e4c19", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_connect", "qualified_name": "Application.on_connect", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [81, 122], "text": "def on_connect(self):\n        try:\n            self.robot.Connect()\n        except:\n            error_dialog = QtWidgets.QErrorMessage(self)\n            error_dialog.setWindowTitle(\"Connection Error\")\n            error_dialog.showMessage(\"Could not connect to the robot\")\n            return\n        if self.useMoxa.isChecked():\n            r = self.moxa.connect(self.moxaIP.text())\n            if not r:\n                error_dialog = QtWidgets.QErrorMessage(self)\n                error_dialog.setWindowTitle(\"Connection Error\")\n                error_dialog.showMessage(\"Could not connect to the moxa\")\n                self.robot.Disconnect()\n                return\n        self.pushButtonConnect.setStyleSheet(\"background-color:rgb(0,255,0)\")\n        sleep(0.25)\n        self.enableUI()\n        if not self.monitorThread.isRunning():\n            self.monitorWorker.moveToThread(self.monitorThread)\n            self.monitorThread.started.connect(self.monitorWorker.run)\n            self.monitorWorker.finished.connect(self.monitorThread.quit)\n            self.monitorWorker.finished.connect(self.monitorWorker.deleteLater)\n            self.monitorThread.finished.connect(self.monitorThread.deleteLater)\n            self.monitorThread.start()\n        else:\n            print(\"Thread already running\")\n            self.monitorWorker.dcPause()\n        if self.useMoxa.isChecked():\n            if not self.moxaThread.isRunning():\n                self.moxaWorker.moveToThread(self.moxaThread)\n                self.moxaThread.started.connect(self.moxaWorker.run)\n                self.moxaWorker.finished.connect(self.moxaThread.quit)\n                self.moxaWorker.finished.connect(self.moxaWorker.deleteLater)\n                self.moxaThread.finished.connect(self.moxaThread.deleteLater)\n                self.moxaWorker.moxa_state.connect(self.updateMoxa)\n                self.moxaThread.start()\n            else:\n                self.moxaWorker.pFlag()", "hash": "a128855e4c19", "chunk_type": "method", "node_type": "function_definition", "signature": "on_connect(self)", "docstring": null, "chunk_size_bytes": 1949, "original_size_bytes": 1977, "start_byte": 3581, "end_byte": 5558}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:edf09bec2e48", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_disconnect", "qualified_name": "Application.on_disconnect", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [124, 133], "text": "def on_disconnect(self):\n        try:\n            self.robot.Disconnect()\n        except:\n            print(\"Error\")\n        self.pushButtonConnect.setStyleSheet(\"background-color:rgb(127,127,127)\")\n        self.monitorWorker.dcPause()\n        if self.useMoxa.isChecked():\n            self.moxaWorker.pFlag()\n        self.disableUI()", "hash": "edf09bec2e48", "chunk_type": "method", "node_type": "function_definition", "signature": "on_disconnect(self)", "docstring": null, "chunk_size_bytes": 333, "original_size_bytes": 333, "start_byte": 5564, "end_byte": 5897}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:2e5e77f50cf2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_activate", "qualified_name": "Application.on_activate", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [135, 136], "text": "def on_activate(self):\n        self.robot.ActivateRobot()", "hash": "2e5e77f50cf2", "chunk_type": "method", "node_type": "function_definition", "signature": "on_activate(self)", "docstring": null, "chunk_size_bytes": 57, "original_size_bytes": 57, "start_byte": 5903, "end_byte": 5960}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:bfc985d5e44f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_home", "qualified_name": "Application.on_home", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [138, 139], "text": "def on_home(self):\n        self.robot.Home()", "hash": "bfc985d5e44f", "chunk_type": "method", "node_type": "function_definition", "signature": "on_home(self)", "docstring": null, "chunk_size_bytes": 44, "original_size_bytes": 44, "start_byte": 5966, "end_byte": 6010}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:d7ff6aeea4c9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_unpause", "qualified_name": "Application.on_unpause", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [141, 142], "text": "def on_unpause(self):\n        self.robot.ResumeMotion()", "hash": "d7ff6aeea4c9", "chunk_type": "method", "node_type": "function_definition", "signature": "on_unpause(self)", "docstring": null, "chunk_size_bytes": 55, "original_size_bytes": 55, "start_byte": 6016, "end_byte": 6071}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:9c347bc80629", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_reset_error", "qualified_name": "Application.on_reset_error", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [144, 145], "text": "def on_reset_error(self):\n        self.robot.ResetError()", "hash": "9c347bc80629", "chunk_type": "method", "node_type": "function_definition", "signature": "on_reset_error(self)", "docstring": null, "chunk_size_bytes": 57, "original_size_bytes": 57, "start_byte": 6077, "end_byte": 6134}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:cd8e532fb517", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_get_robot_state", "qualified_name": "Application.on_get_robot_state", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [147, 148], "text": "def on_get_robot_state(self):\n        print(self.robot.GetRobotState().error_status)", "hash": "cd8e532fb517", "chunk_type": "method", "node_type": "function_definition", "signature": "on_get_robot_state(self)", "docstring": null, "chunk_size_bytes": 84, "original_size_bytes": 84, "start_byte": 6140, "end_byte": 6224}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:adbc15828a20", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "updateJointPose", "qualified_name": "Application.updateJointPose", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [150, 152], "text": "def updateJointPose(self, joints):\n        self.jointPose.update(joints)\n        self.jointp = joints", "hash": "adbc15828a20", "chunk_type": "method", "node_type": "function_definition", "signature": "updateJointPose(self, joints)", "docstring": null, "chunk_size_bytes": 101, "original_size_bytes": 101, "start_byte": 6230, "end_byte": 6331}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:0afb7bfc9eca", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "updateTCPPose", "qualified_name": "Application.updateTCPPose", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [154, 156], "text": "def updateTCPPose(self, pose):\n        self.tcpPose.update(pose)\n        self.tcpp = pose", "hash": "0afb7bfc9eca", "chunk_type": "method", "node_type": "function_definition", "signature": "updateTCPPose(self, pose)", "docstring": null, "chunk_size_bytes": 89, "original_size_bytes": 89, "start_byte": 6337, "end_byte": 6426}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:abb8e2c64cc9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "updateErrorState", "qualified_name": "Application.updateErrorState", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [158, 164], "text": "def updateErrorState(self, state):\n        if state:\n            self.errorLabel.setStyleSheet(\"background-color:rgb(255,0,0)\")\n            self.errorLabel.setText(\"Error\")\n        else:\n            self.errorLabel.setStyleSheet(\"background-color:rgb(0,255,0)\")\n            self.errorLabel.setText(\"No Error\")", "hash": "abb8e2c64cc9", "chunk_type": "method", "node_type": "function_definition", "signature": "updateErrorState(self, state)", "docstring": null, "chunk_size_bytes": 309, "original_size_bytes": 309, "start_byte": 6432, "end_byte": 6741}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:cd58a7a8a6c7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "updateMoxa", "qualified_name": "Application.updateMoxa", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [166, 168], "text": "def updateMoxa(self, state):\n        self.moxa_state = state\n        self.moxaWidget.update_input(state)", "hash": "cd58a7a8a6c7", "chunk_type": "method", "node_type": "function_definition", "signature": "updateMoxa(self, state)", "docstring": null, "chunk_size_bytes": 104, "original_size_bytes": 104, "start_byte": 6747, "end_byte": 6851}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:7fa1d9e7e668", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_click_output", "qualified_name": "Application.on_click_output", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [170, 212], "text": "def on_click_output(self, out):\n        self.moxaWorker.pFlag()\n        if out == 0:\n            if self.moxaWidget.out_0.isChecked():\n                self.moxa.setsingleoutput(0, True)\n            else:\n                self.moxa.setsingleoutput(0, False)\n        if out == 1:\n            if self.moxaWidget.out_1.isChecked():\n                self.moxa.setsingleoutput(1, True)\n            else:\n                self.moxa.setsingleoutput(1, False)\n        if out == 2:\n            if self.moxaWidget.out_2.isChecked():\n                self.moxa.setsingleoutput(2, True)\n            else:\n                self.moxa.setsingleoutput(2, False)\n        if out == 3:\n            if self.moxaWidget.out_3.isChecked():\n                self.moxa.setsingleoutput(3, True)\n            else:\n                self.moxa.setsingleoutput(3, False)\n        if out == 4:\n            if self.moxaWidget.out_4.isChecked():\n                self.moxa.setsingleoutput(4, True)\n            else:\n                self.moxa.setsingleoutput(4, False)\n        if out == 5:\n            if self.moxaWidget.out_5.isChecked():\n                self.moxa.setsingleoutput(5, True)\n            else:\n                self.moxa.setsingleoutput(5, False)\n        if out == 6:\n            if self.moxaWidget.out_6.isChecked():\n                self.moxa.setsingleoutput(6, True)\n            else:\n                self.moxa.setsingleoutput(6, False)\n        if out == 7:\n            if self.moxaWidget.out_7.isChecked():\n                self.moxa.setsingleoutput(7, True)\n            else:\n                self.moxa.setsingleoutput(7, False)\n        self.moxaWorker.pFlag()", "hash": "7fa1d9e7e668", "chunk_type": "method", "node_type": "function_definition", "signature": "on_click_output(self, out)", "docstring": null, "chunk_size_bytes": 1631, "original_size_bytes": 1631, "start_byte": 6857, "end_byte": 8488}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:6614d78b7c18", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_play", "qualified_name": "Application.on_play", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [214, 229], "text": "def on_play(self):\n        self.disableUI()\n        if self.jogWindow.joymode.isChecked():\n            self.joyWorker.stoptrig()\n            self.jogWindow.joymode.setChecked(False)\n        self.jogWindow.jog.setChecked(False)\n        self.interpreterThread = QThread()\n        text = self.teachWindow.textf.toPlainText()\n        self.liveInterpreter = Interpreter(self.robot, self.moxa, text)\n        self.liveInterpreter.moveToThread(self.interpreterThread)\n        self.interpreterThread.started.connect(self.liveInterpreter.run)\n        self.interpreterThread.finished.connect(self.enableUI)\n        self.liveInterpreter.finished.connect(self.interpreterThread.quit)\n        self.liveInterpreter.finished.connect(self.liveInterpreter.deleteLater)\n        self.interpreterThread.finished.connect(self.interpreterThread.deleteLater)\n        self.interpreterThread.start()", "hash": "6614d78b7c18", "chunk_type": "method", "node_type": "function_definition", "signature": "on_play(self)", "docstring": null, "chunk_size_bytes": 873, "original_size_bytes": 873, "start_byte": 8494, "end_byte": 9367}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:494a2a87d4ba", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_test_move", "qualified_name": "Application.on_test_move", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [231, 237], "text": "def on_test_move(self):\n        self.robot.MovePose(200, 0, 300, 0, 90, 0)\n        self.robot.MovePose(200, 100, 300, 0, 90, 0)\n        self.robot.MovePose(200, 100, 100, 0, 90, 0)\n        self.robot.MovePose(200, -100, 100, 0, 90, 0)\n        self.robot.MovePose(200, -100, 300, 0, 90, 0)\n        self.robot.MovePose(200, 0, 300, 0, 90, 0)", "hash": "494a2a87d4ba", "chunk_type": "method", "node_type": "function_definition", "signature": "on_test_move(self)", "docstring": null, "chunk_size_bytes": 339, "original_size_bytes": 339, "start_byte": 9373, "end_byte": 9712}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:71919aa5beee", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_jog_button", "qualified_name": "Application.on_jog_button", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [239, 263], "text": "def on_jog_button(self, data):\n        if self.jogMode is None:\n            print('Select jog mode')\n        elif self.jogVelocity is None:\n            print('Select a velocity')\n        else:\n            vel_scale = self.jogVelocity / 100.0\n            if self.jogMode == 'Joints':\n                joint_vel = [150, 150, 180, 300, 300, 500]\n                data_vel = [d * vel_scale for d in data]\n                data_temp = [joint_vel[i] * data_vel[i] for i in range(6)]\n                self.robot.MoveJointsVel(data_temp[0], data_temp[1], data_temp[2], data_temp[3], data_temp[4],\n                                         data_temp[5])\n            if self.jogMode == 'WRF':\n                joint_vel = [500, 500, 500, 150, 150, 150]\n                data_vel = [d * vel_scale for d in data]\n                data_temp = [joint_vel[i] * data_vel[i] for i in range(6)]\n                self.robot.MoveLinVelWRF(data_temp[0], data_temp[1], data_temp[2], data_temp[3], data_temp[4],\n                                         data_temp[5])\n            if self.jogMode == 'TRF':\n                joint_vel = [500, 500, 500, 150, 150, 150]\n                data_vel = [d * vel_scale for d in data]\n                data_temp = [joint_vel[i] * data_vel[i] for i in range(6)]\n                self.robot.MoveLinVelTRF(data_temp[0], data_temp[1], data_temp[2], data_temp[3], data_temp[4],\n                                         data_temp[5])", "hash": "71919aa5beee", "chunk_type": "method", "node_type": "function_definition", "signature": "on_jog_button(self, data)", "docstring": null, "chunk_size_bytes": 1429, "original_size_bytes": 1429, "start_byte": 9718, "end_byte": 11147}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:403f943e0a35", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_get_jog_velocity", "qualified_name": "Application.on_get_jog_velocity", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [265, 266], "text": "def on_get_jog_velocity(self, value):\n        self.jogVelocity = value", "hash": "403f943e0a35", "chunk_type": "method", "node_type": "function_definition", "signature": "on_get_jog_velocity(self, value)", "docstring": null, "chunk_size_bytes": 70, "original_size_bytes": 70, "start_byte": 11153, "end_byte": 11223}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:93e803227f96", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_get_jog_mode", "qualified_name": "Application.on_get_jog_mode", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [268, 269], "text": "def on_get_jog_mode(self, mode):\n        self.jogMode = mode", "hash": "93e803227f96", "chunk_type": "method", "node_type": "function_definition", "signature": "on_get_jog_mode(self, mode)", "docstring": null, "chunk_size_bytes": 60, "original_size_bytes": 60, "start_byte": 11229, "end_byte": 11289}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:db3cfc9898ea", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_joy_mode", "qualified_name": "Application.on_joy_mode", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [271, 290], "text": "def on_joy_mode(self):\n        if self.jogWindow.joymode.isChecked():\n            self.joystick = joystick.MecaJoy()\n            if not self.joystick.checkdriver():\n                return\n            if not self.joystick.checkplugged():\n                return\n            self.joystick.getcaps()\n            self.joyThread = QThread()\n            self.joyWorker = Joystick_monitoring(self.joystick)\n            self.joyWorker.moveToThread(self.joyThread)\n            self.joyThread.started.connect(self.joyWorker.run)\n            self.joyWorker.joy_data.connect(self.on_get_joy)\n            self.joyWorker.finished.connect(self.joyThread.quit)\n            self.joyWorker.finished.connect(self.joyWorker.deleteLater)\n            self.joyThread.finished.connect(self.joyThread.deleteLater)\n            self.joyThread.start()\n        else:\n            self.joyWorker.stoptrig()", "hash": "db3cfc9898ea", "chunk_type": "method", "node_type": "function_definition", "signature": "on_joy_mode(self)", "docstring": null, "chunk_size_bytes": 874, "original_size_bytes": 875, "start_byte": 11295, "end_byte": 12170}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:d27a797f19bb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_get_joy", "qualified_name": "Application.on_get_joy", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [292, 331], "text": "def on_get_joy(self, data):\n        if self.jogMode is None:\n            print('Select jog mode')\n        elif self.jogVelocity is None:\n            print('Select a velocity')\n        else:\n            vel_scale = self.jogVelocity/100\n            if self.jogMode == 'Joints':\n                if not data[3] and not data[4]:\n                    joint_vel = [150, 150, 180, 300, 300, 500]\n                    data_vel = [data[0] * vel_scale, data[1] * vel_scale, data[2] * vel_scale]\n                    data_temp = [joint_vel[i] * data_vel[i] for i in range(3)]\n                    self.robot.MoveJointsVel(data_temp[0], data_temp[1], data_temp[2], 0, 0, 0)\n                else:\n                    joint_vel = [150, 150, 180, 300, 300, 500]\n                    data_vel = [data[0] * vel_scale, data[1] * vel_scale, data[2] * vel_scale]\n                    data_temp = [joint_vel[i+3] * data_vel[i] for i in range(3)]\n                    self.robot.MoveJointsVel(0, 0, 0, data_temp[0], data_temp[1], data_temp[2])\n            if self.jogMode == 'WRF':\n                if not data[3] and not data[4]:\n                    joint_vel = [500, 500, 500, 150, 150, 150]\n                    data_vel = [data[0] * vel_scale, data[1] * vel_scale, data[2] * vel_scale]\n                    data_temp = [joint_vel[i] * data_vel[i] for i in range(3)]\n                    self.robot.MoveLinVelWRF(data_temp[0], data_temp[1], data_temp[2], 0, 0, 0)\n                else:\n                    joint_vel = [500, 500, 500, 150, 150, 150]\n                    data_vel = [data[0] * vel_scale, data[1] * vel_scale, data[2] * vel_scale]\n                    data_temp = [joint_vel[i + 3] * data_vel[i] for i in range(3)]\n                    self.robot.MoveLinVelWRF(0, 0, 0, data_temp[0], data_temp[1], data_temp[2])\n            if self.jogMode == 'TRF':\n                if not data[3] and not data[4]:\n                    joint_vel = [500, 500, 500, 150, 150, 150]\n                    data_vel = [data[0] * vel_scale, data[1] * vel_scale, data[2] * vel_scale]\n                    data_temp = [joint_vel[i] * data_vel[i] for i in range(3)]\n                    self.robot.MoveLinVelTRF(data_temp[0], data_temp[1], data_temp[2], 0, 0, 0)\n                else:\n                    joint_vel = [500, 500, 500, 150, 150, 150]\n                    data_vel = [data[0] * vel_scale, data[1] * vel_scale, data[2] * vel_scale]\n                    data_temp = [joint_vel[i+3] * data_vel[i] for i in range(3)]\n                    self.robot.MoveLinVelTRF(0, 0, 0, data_temp[0], data_temp[1], data_temp[2])", "hash": "d27a797f19bb", "chunk_type": "method", "node_type": "function_definition", "signature": "on_get_joy(self, data)", "docstring": null, "chunk_size_bytes": 2567, "original_size_bytes": 2567, "start_byte": 12176, "end_byte": 14743}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:ec6b91747a7c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_send_command", "qualified_name": "Application.on_send_command", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [334, 336], "text": "def on_send_command(self):\n        command = self.teachWindow.linef.text()\n        self.robot.SendCustomCommand(command)", "hash": "ec6b91747a7c", "chunk_type": "method", "node_type": "function_definition", "signature": "on_send_command(self)", "docstring": null, "chunk_size_bytes": 120, "original_size_bytes": 120, "start_byte": 14750, "end_byte": 14870}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:b3a574af18fc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_insert_movejoints", "qualified_name": "Application.on_insert_movejoints", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [338, 341], "text": "def on_insert_movejoints(self):\n        command = \"MoveJoints(\" + str(self.jointp[0]) + ', ' + str(self.jointp[1]) + ', ' + str(\n            self.jointp[2]) + ', ' + str(self.jointp[3]) + ', ' + str(self.jointp[4]) + ', ' + str(self.jointp[5]) + ')'\n        self.teachWindow.textf.insertPlainText(command + '\\n')", "hash": "b3a574af18fc", "chunk_type": "method", "node_type": "function_definition", "signature": "on_insert_movejoints(self)", "docstring": null, "chunk_size_bytes": 312, "original_size_bytes": 312, "start_byte": 14876, "end_byte": 15188}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:1569e36b1877", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_insert_movelin", "qualified_name": "Application.on_insert_movelin", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [343, 346], "text": "def on_insert_movelin(self):\n        command = \"MoveLin(\" + str(self.tcpp[0]) + ', ' + str(self.tcpp[1]) + ', ' + str(self.tcpp[2]) + ', ' + str(\n            self.tcpp[3]) + ', ' + str(self.tcpp[4]) + ', ' + str(self.tcpp[5]) + ')'\n        self.teachWindow.textf.insertPlainText(command + '\\n')", "hash": "1569e36b1877", "chunk_type": "method", "node_type": "function_definition", "signature": "on_insert_movelin(self)", "docstring": null, "chunk_size_bytes": 294, "original_size_bytes": 294, "start_byte": 15194, "end_byte": 15488}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:0e10599285bc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_insert_movepose", "qualified_name": "Application.on_insert_movepose", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [348, 351], "text": "def on_insert_movepose(self):\n        command = \"MovePose(\" + str(self.tcpp[0]) + ', ' + str(self.tcpp[1]) + ', ' + str(self.tcpp[2]) + ', ' + str(\n            self.tcpp[3]) + ', ' + str(self.tcpp[4]) + ', ' + str(self.tcpp[5]) + ')'\n        self.teachWindow.textf.insertPlainText(command + '\\n')", "hash": "0e10599285bc", "chunk_type": "method", "node_type": "function_definition", "signature": "on_insert_movepose(self)", "docstring": null, "chunk_size_bytes": 296, "original_size_bytes": 296, "start_byte": 15494, "end_byte": 15790}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:3b48dada5c25", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "disableUI", "qualified_name": "Application.disableUI", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [353, 362], "text": "def disableUI(self):\n        self.jointPose.setEnabled(False)\n        self.tcpPose.setEnabled(False)\n        self.jogWindow.setEnabled(False)\n        self.teachWindow.setEnabled(False)\n        self.pushButtonDisconnect.setEnabled(False)\n        self.pushButtonActivate.setEnabled(False)\n        self.pushButtonHome.setEnabled(False)\n        self.moxaWidget.setEnabled(False)\n        self.errorLabel.setStyleSheet(\"background-color:rgb(200,200,200)\")", "hash": "3b48dada5c25", "chunk_type": "method", "node_type": "function_definition", "signature": "disableUI(self)", "docstring": null, "chunk_size_bytes": 449, "original_size_bytes": 449, "start_byte": 15796, "end_byte": 16245}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:7ff2502b9c02", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "enableUI", "qualified_name": "Application.enableUI", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [364, 379], "text": "def enableUI(self):\n        self.jointPose.setEnabled(True)\n        self.tcpPose.setEnabled(True)\n        self.jogWindow.setEnabled(True)\n        self.teachWindow.setEnabled(True)\n        self.pushButtonDisconnect.setEnabled(True)\n        self.pushButtonActivate.setEnabled(True)\n        self.pushButtonHome.setEnabled(True)\n        if self.useMoxa.isChecked():\n            self.moxaWidget.setEnabled(True)\n        if self.robot.GetRobotState().error_status:\n            self.errorLabel.setStyleSheet(\"background-color:rgb(255,0,0)\")\n            self.errorLabel.setText(\"Error\")\n        else:\n            self.errorLabel.setStyleSheet(\"background-color:rgb(0,255,0)\")\n            self.errorLabel.setText(\"No Error\")", "hash": "7ff2502b9c02", "chunk_type": "method", "node_type": "function_definition", "signature": "enableUI(self)", "docstring": null, "chunk_size_bytes": 715, "original_size_bytes": 715, "start_byte": 16251, "end_byte": 16966}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:cc88bdca67ca", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "on_generate_script", "qualified_name": "Application.on_generate_script", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [381, 398], "text": "def on_generate_script(self):\n        file = open('generated_script.py', 'w+')\n        file.write('import robot\\n\\n')\n        file.write('r = robot.Robot()\\n')\n        file.write('r.Connect()\\n')\n        file.write('r.ActivateRobot()\\n')\n        file.write('r.Home()\\n')\n        file.write('print(r.WaitHomed())\\n')\n        mod_text = self.teachWindow.textf.toPlainText()\n        rep = parsdict.gen_script\n        for i, j in rep.items():\n            mod_text = mod_text.replace(i, j)\n        file.write(mod_text+'\\n')\n        file.write('r.Disconnect()')\n        file.close()", "hash": "cc88bdca67ca", "chunk_type": "method", "node_type": "function_definition", "signature": "on_generate_script(self)", "docstring": null, "chunk_size_bytes": 576, "original_size_bytes": 579, "start_byte": 16972, "end_byte": 17551}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:37fd97674255", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotMonitoring", "qualified_name": "RobotMonitoring", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [403, 440], "text": "class RobotMonitoring(QObject):\n    finished = pyqtSignal()\n    joints = pyqtSignal(list)\n    pose = pyqtSignal(list)\n    error_state = pyqtSignal(bool)\n    def __init__(self, robot):\n        super().__init__()\n        self.robot = robot\n        self.jointpos = [0, 0, 0, 0, 0, 0]\n        self.connectedFlag = True", "hash": "37fd97674255", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 314, "original_size_bytes": 315, "start_byte": 17572, "end_byte": 18747}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:686d3b6e62ab", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotMonitoring.__init__", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [409, 414], "text": "def __init__(self, robot):\n        super().__init__()\n        self.robot = robot\n        self.jointpos = [0, 0, 0, 0, 0, 0]\n        self.connectedFlag = True\n        self.pauseDC = False", "hash": "686d3b6e62ab", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot)", "docstring": null, "chunk_size_bytes": 186, "original_size_bytes": 186, "start_byte": 17730, "end_byte": 17916}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:de3cfafec4fd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run", "qualified_name": "RobotMonitoring.run", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [416, 430], "text": "def run(self):\n        prev_error_state = self.robot.GetRobotState().error_status\n        while self.connectedFlag:\n            while self.pauseDC:\n                pass\n            jpose = self.robot.GetJoints()\n            tcppose = self.robot.GetPose()\n            self.joints.emit(jpose)\n            self.pose.emit(tcppose)\n            new_error_state = self.robot.GetRobotState().error_status\n            if new_error_state is not prev_error_state:\n                self.error_state.emit(new_error_state)\n                prev_error_state = new_error_state\n            sleep(0.1)\n        self.finished.emit()", "hash": "de3cfafec4fd", "chunk_type": "method", "node_type": "function_definition", "signature": "run(self)", "docstring": null, "chunk_size_bytes": 610, "original_size_bytes": 610, "start_byte": 17922, "end_byte": 18532}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:21ecee72bd30", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "dcFlag", "qualified_name": "RobotMonitoring.dcFlag", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [432, 434], "text": "def dcFlag(self):\n        self.connectedFlag = False\n        self.pauseDC = False", "hash": "21ecee72bd30", "chunk_type": "method", "node_type": "function_definition", "signature": "dcFlag(self)", "docstring": null, "chunk_size_bytes": 81, "original_size_bytes": 81, "start_byte": 18538, "end_byte": 18619}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:2cc2a822ccd0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "dcPause", "qualified_name": "RobotMonitoring.dcPause", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [436, 440], "text": "def dcPause(self):\n        if self.pauseDC:\n            self.pauseDC = False\n        else:\n            self.pauseDC = True", "hash": "2cc2a822ccd0", "chunk_type": "method", "node_type": "function_definition", "signature": "dcPause(self)", "docstring": null, "chunk_size_bytes": 122, "original_size_bytes": 122, "start_byte": 18625, "end_byte": 18747}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:1353a2afc19b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Interpreter", "qualified_name": "Interpreter", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [443, 464], "text": "class Interpreter(QObject):\n    finished = pyqtSignal()\n    def __init__(self, robot, moxa, text):\n        super().__init__()\n        self.robot = robot\n        self.moxa = moxa\n        self.text = text\n    def run(self):\n        mod_text = self.text", "hash": "1353a2afc19b", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 250, "original_size_bytes": 252, "start_byte": 18750, "end_byte": 19336}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:de73f52cc742", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Interpreter.__init__", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [446, 450], "text": "def __init__(self, robot, moxa, text):\n        super().__init__()\n        self.robot = robot\n        self.moxa = moxa\n        self.text = text", "hash": "de73f52cc742", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot, moxa, text)", "docstring": null, "chunk_size_bytes": 142, "original_size_bytes": 142, "start_byte": 18811, "end_byte": 18953}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:7a6c95697099", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run", "qualified_name": "Interpreter.run", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [452, 464], "text": "def run(self):\n        mod_text = self.text\n        rep = parsdict.live_rep\n        mox = parsdict.moxadict\n        for i, j in rep.items():\n            mod_text = mod_text.replace(i, j)\n        for i, j in mox.items():\n            mod_text = mod_text.replace(i, j)\n        try:\n            exec(mod_text)\n        except:\n            print(\"Error\")\n        self.finished.emit()", "hash": "7a6c95697099", "chunk_type": "method", "node_type": "function_definition", "signature": "run(self)", "docstring": null, "chunk_size_bytes": 377, "original_size_bytes": 377, "start_byte": 18959, "end_byte": 19336}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:6736b46cf468", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Moxa_monitoring", "qualified_name": "Moxa_monitoring", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [467, 494], "text": "class Moxa_monitoring(QObject):\n    finished = pyqtSignal()\n    moxa_state = pyqtSignal(list)\n    def __init__(self, moxa):\n        super().__init__()\n        self.moxa = moxa\n        self.connectFlag = True\n        self.pauseFlag = False\n    def run(self):", "hash": "6736b46cf468", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 257, "original_size_bytes": 259, "start_byte": 19339, "end_byte": 20042}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:eee52198f2db", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Moxa_monitoring.__init__", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [471, 475], "text": "def __init__(self, moxa):\n        super().__init__()\n        self.moxa = moxa\n        self.connectFlag = True\n        self.pauseFlag = False", "hash": "eee52198f2db", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, moxa)", "docstring": null, "chunk_size_bytes": 140, "original_size_bytes": 140, "start_byte": 19438, "end_byte": 19578}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:5d2d46577bd3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run", "qualified_name": "Moxa_monitoring.run", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [477, 484], "text": "def run(self):\n        while self.connectFlag:\n            state = self.moxa.readallinputs()\n            self.moxa_state.emit(state)\n            while self.pauseFlag:\n                pass\n            sleep(0.2)\n        self.finished.emit()", "hash": "5d2d46577bd3", "chunk_type": "method", "node_type": "function_definition", "signature": "run(self)", "docstring": null, "chunk_size_bytes": 239, "original_size_bytes": 239, "start_byte": 19584, "end_byte": 19823}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:03b7de442a75", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "dcFlag", "qualified_name": "Moxa_monitoring.dcFlag", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [486, 488], "text": "def dcFlag(self):\n        self.connectFlag = False\n        self.pauseFlag = False", "hash": "03b7de442a75", "chunk_type": "method", "node_type": "function_definition", "signature": "dcFlag(self)", "docstring": null, "chunk_size_bytes": 81, "original_size_bytes": 81, "start_byte": 19829, "end_byte": 19910}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:2d3771bf44a2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pFlag", "qualified_name": "Moxa_monitoring.pFlag", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [490, 494], "text": "def pFlag(self):\n        if self.pauseFlag:\n            self.pauseFlag = False\n        else:\n            self.pauseFlag = True", "hash": "2d3771bf44a2", "chunk_type": "method", "node_type": "function_definition", "signature": "pFlag(self)", "docstring": null, "chunk_size_bytes": 126, "original_size_bytes": 126, "start_byte": 19916, "end_byte": 20042}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:a19bb434dcd8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Joystick_monitoring", "qualified_name": "Joystick_monitoring", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [496, 512], "text": "class Joystick_monitoring(QObject):\n    finished = pyqtSignal()\n    joy_data = pyqtSignal(list)\n    def __init__(self, joy):\n        super().__init__()\n        self.joy = joy\n        self.stopFlag = True\n    def run(self):\n        while self.stopFlag:\n            data = self.joy.getinfo()", "hash": "a19bb434dcd8", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 289, "original_size_bytes": 290, "start_byte": 20044, "end_byte": 20479}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:1dde4e785e8d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Joystick_monitoring.__init__", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [499, 502], "text": "def __init__(self, joy):\n        super().__init__()\n        self.joy = joy\n        self.stopFlag = True", "hash": "1dde4e785e8d", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, joy)", "docstring": null, "chunk_size_bytes": 103, "original_size_bytes": 103, "start_byte": 20144, "end_byte": 20247}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:cce7b449255a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run", "qualified_name": "Joystick_monitoring.run", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [504, 509], "text": "def run(self):\n        while self.stopFlag:\n            data = self.joy.getinfo()\n            self.joy_data.emit(data)\n            sleep(0.05)\n        self.finished.emit()", "hash": "cce7b449255a", "chunk_type": "method", "node_type": "function_definition", "signature": "run(self)", "docstring": null, "chunk_size_bytes": 171, "original_size_bytes": 171, "start_byte": 20253, "end_byte": 20424}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/UIApp.py:87b0182cde70", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "stoptrig", "qualified_name": "Joystick_monitoring.stoptrig", "source_path": "sample-programs/Python/PythonUI/UIApp.py", "loc": [511, 512], "text": "def stoptrig(self):\n        self.stopFlag = False", "hash": "87b0182cde70", "chunk_type": "method", "node_type": "function_definition", "signature": "stoptrig(self)", "docstring": null, "chunk_size_bytes": 49, "original_size_bytes": 49, "start_byte": 20430, "end_byte": 20479}
