{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:d11613a5082c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "socket", "qualified_name": "socket", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [18, 18], "text": "import socket", "hash": "d11613a5082c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 439, "end_byte": 452}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:d695fd83bcac", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "struct", "qualified_name": "struct", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [19, 19], "text": "import struct", "hash": "d695fd83bcac", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 453, "end_byte": 466}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [20, 20], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 467, "end_byte": 478}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:818111220442", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "threading", "qualified_name": "threading", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [21, 21], "text": "import threading", "hash": "818111220442", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 479, "end_byte": 495}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:0f3c72e18f95", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "List", "qualified_name": "List", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [22, 22], "text": "from typing import List, Tuple, Optional", "hash": "0f3c72e18f95", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 40, "original_size_bytes": 40, "start_byte": 496, "end_byte": 536}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:f29f4826683d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "NetFTSensor", "qualified_name": "NetFTSensor", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [25, 403], "text": "class NetFTSensor:\n    \"\"\"\n    ATI NetFT Sensor interface class for UDP communication.\n    Provides methods for connecting to ATI Force/Torque sensors,\n    streaming real-time data, and performing sensor operations.\n    \"\"\"", "hash": "f29f4826683d", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "ATI NetFT Sensor interface class for UDP communication.\n    \n    Provides methods for connecting to ATI Force/Torque sensors,\n    streaming real-time data, and performing sensor operations.", "chunk_size_bytes": 223, "original_size_bytes": 228, "start_byte": 539, "end_byte": 13357}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:b389e620c488", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "NetFTSensor.__init__", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [33, 63], "text": "def __init__(self, sensor_ip: str, sensor_port: int = 49152, timeout: float = 1.0):\n        \"\"\"\n        Initialize NetFT sensor connection.\n        Args:\n            sensor_ip (str): IP address of the ATI sensor\n            sensor_port (int): UDP port for sensor communication (default: 49152)\n            timeout (float): Socket timeout in seconds (default: 1.0)\n        \"\"\"\n        self.sensor_ip = sensor_ip\n        self.sensor_port = sensor_port\n        self.timeout = timeout\n        self.socket = None\n        self.streaming = False\n        self.stream_thread = None\n        self.current_data = [0.0] * 6  # [Fx, Fy, Fz, Tx, Ty, Tz]\n        self.data_lock = threading.Lock()\n        self.sample_rate = 1000  # Default 1 kHz\n        self.bias_vector = [0.0] * 6\n        self.force_scale = 1.0  # Scale factor for forces (N)\n        self.torque_scale = 1.0  # Scale factor for torques (Nm)", "hash": "b389e620c488", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, sensor_ip: str, sensor_port: int = 49152, timeout: float = 1.0)", "docstring": "Initialize NetFT sensor connection.\n        \n        Args:\n            sensor_ip (str): IP address of the ATI sensor\n            sensor_port (int): UDP port for sensor communication (default: 49152)\n            timeout (float): Socket timeout in seconds (default: 1.0)", "chunk_size_bytes": 893, "original_size_bytes": 1138, "start_byte": 777, "end_byte": 1915}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:80d44ba22246", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "connect", "qualified_name": "NetFTSensor.connect", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [65, 87], "text": "def connect(self) -> bool:\n        \"\"\"\n        Establish UDP connection to the sensor.\n        Returns:\n            bool: True if connection successful, False otherwise\n        \"\"\"\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            self.socket.settimeout(self.timeout)\n            if self._test_connection():\n                print(f\"Successfully connected to ATI sensor at {self.sensor_ip}:{self.sensor_port}\")\n                return True\n            else:\n                print(\"Failed to establish communication with sensor\")\n                return False\n        except Exception as e:\n            print(f\"Connection error: {e}\")\n            return False", "hash": "80d44ba22246", "chunk_type": "method", "node_type": "function_definition", "signature": "connect(self)", "docstring": "Establish UDP connection to the sensor.\n        \n        Returns:\n            bool: True if connection successful, False otherwise", "chunk_size_bytes": 705, "original_size_bytes": 839, "start_byte": 1929, "end_byte": 2768}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:77d1292f7f73", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "disconnect", "qualified_name": "NetFTSensor.disconnect", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [89, 98], "text": "def disconnect(self):\n        \"\"\"\n        Close the sensor connection and stop data streaming.\n        \"\"\"\n        self.stop_streaming()\n        if self.socket:\n            self.socket.close()\n            self.socket = None\n            print(\"Disconnected from ATI sensor\")", "hash": "77d1292f7f73", "chunk_type": "method", "node_type": "function_definition", "signature": "disconnect(self)", "docstring": "Close the sensor connection and stop data streaming.", "chunk_size_bytes": 273, "original_size_bytes": 282, "start_byte": 2778, "end_byte": 3060}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:46e9e8ce9d01", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_test_connection", "qualified_name": "NetFTSensor._test_connection", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [100, 119], "text": "def _test_connection(self) -> bool:\n        \"\"\"\n        Test the connection by sending a status request.\n        Returns:\n            bool: True if sensor responds, False otherwise\n        \"\"\"\n        try:\n            command = self._create_command(0x0000)  # Status request\n            self.socket.sendto(command, (self.sensor_ip, self.sensor_port))\n            response, addr = self.socket.recvfrom(1024)\n            return len(response) > 0\n        except socket.timeout:\n            return False\n        except Exception:\n            return False", "hash": "46e9e8ce9d01", "chunk_type": "method", "node_type": "function_definition", "signature": "_test_connection(self)", "docstring": "Test the connection by sending a status request.\n        \n        Returns:\n            bool: True if sensor responds, False otherwise", "chunk_size_bytes": 550, "original_size_bytes": 659, "start_byte": 3070, "end_byte": 3729}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:e5f1bd476d67", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "start_streaming", "qualified_name": "NetFTSensor.start_streaming", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [121, 153], "text": "def start_streaming(self, sample_rate: int = 1000) -> bool:\n        \"\"\"\n        Start real-time data streaming from the sensor.\n        Args:\n            sample_rate (int): Desired sample rate in Hz (default: 1000)\n        Returns:\n            bool: True if streaming started successfully\n        \"\"\"\n        if self.streaming:\n            print(\"Data streaming already active\")\n            return True\n        try:\n            self.sample_rate = sample_rate\n            command = self._create_streaming_command(sample_rate)\n            self.socket.sendto(command, (self.sensor_ip, self.sensor_port))\n            self.streaming = True\n            self.stream_thread = threading.Thread(target=self._stream_data)\n            self.stream_thread.daemon = True\n            self.stream_thread.start()\n            print(f\"Started data streaming at {sample_rate} Hz\")\n            return True\n        except Exception as e:\n            print(f\"Failed to start streaming: {e}\")\n            return False", "hash": "e5f1bd476d67", "chunk_type": "method", "node_type": "function_definition", "signature": "start_streaming(self, sample_rate: int = 1000)", "docstring": "Start real-time data streaming from the sensor.\n        \n        Args:\n            sample_rate (int): Desired sample rate in Hz (default: 1000)\n            \n        Returns:\n            bool: True if streaming started successfully", "chunk_size_bytes": 992, "original_size_bytes": 1159, "start_byte": 3739, "end_byte": 4898}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:9973a1d47292", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "stop_streaming", "qualified_name": "NetFTSensor.stop_streaming", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [155, 173], "text": "def stop_streaming(self):\n        \"\"\"\n        Stop real-time data streaming.\n        \"\"\"\n        if self.streaming:\n            self.streaming = False\n            try:\n                command = self._create_command(0x0001)  # Stop streaming\n                self.socket.sendto(command, (self.sensor_ip, self.sensor_port))\n            except:\n                pass\n            if self.stream_thread and self.stream_thread.is_alive():\n                self.stream_thread.join(timeout=2.0)\n            print(\"Stopped data streaming\")", "hash": "9973a1d47292", "chunk_type": "method", "node_type": "function_definition", "signature": "stop_streaming(self)", "docstring": "Stop real-time data streaming.", "chunk_size_bytes": 527, "original_size_bytes": 648, "start_byte": 4908, "end_byte": 5556}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:5d5e089536e4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_stream_data", "qualified_name": "NetFTSensor._stream_data", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [175, 198], "text": "def _stream_data(self):\n        \"\"\"\n        Internal method for continuous data streaming.\n        Runs in separate thread to maintain real-time performance.\n        \"\"\"\n        while self.streaming:\n            try:\n                data, addr = self.socket.recvfrom(1024)\n                force_torque = self._parse_data_packet(data)\n                if force_torque:\n                    with self.data_lock:\n                        self.current_data = force_torque\n            except socket.timeout:\n                continue\n            except Exception as e:\n                if self.streaming:  # Only print error if still streaming\n                    print(f\"Data streaming error: {e}\")\n                break", "hash": "5d5e089536e4", "chunk_type": "method", "node_type": "function_definition", "signature": "_stream_data(self)", "docstring": "Internal method for continuous data streaming.\n        Runs in separate thread to maintain real-time performance.", "chunk_size_bytes": 711, "original_size_bytes": 911, "start_byte": 5566, "end_byte": 6477}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:2e77d9b58d76", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_force", "qualified_name": "NetFTSensor.get_force", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [200, 213], "text": "def get_force(self) -> List[float]:\n        \"\"\"\n        Get the current force/torque readings.\n        Returns:\n            List[float]: [Fx, Fy, Fz, Tx, Ty, Tz] in N and Nm\n        \"\"\"\n        with self.data_lock:\n            corrected_data = [\n                self.current_data[i] - self.bias_vector[i] \n                for i in range(6)\n            ]\n            return corrected_data.copy()", "hash": "2e77d9b58d76", "chunk_type": "method", "node_type": "function_definition", "signature": "get_force(self)", "docstring": "Get the current force/torque readings.\n        \n        Returns:\n            List[float]: [Fx, Fy, Fz, Tx, Ty, Tz] in N and Nm", "chunk_size_bytes": 394, "original_size_bytes": 439, "start_byte": 6487, "end_byte": 6926}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:37fcbcbc7ad4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_force_xyz", "qualified_name": "NetFTSensor.get_force_xyz", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [215, 223], "text": "def get_force_xyz(self) -> Tuple[float, float, float]:\n        \"\"\"\n        Get current force readings for X, Y, Z axes.\n        Returns:\n            Tuple[float, float, float]: (Fx, Fy, Fz) in Newtons\n        \"\"\"\n        force_data = self.get_force()\n        return force_data[0], force_data[1], force_data[2]", "hash": "37fcbcbc7ad4", "chunk_type": "method", "node_type": "function_definition", "signature": "get_force_xyz(self)", "docstring": "Get current force readings for X, Y, Z axes.\n        \n        Returns:\n            Tuple[float, float, float]: (Fx, Fy, Fz) in Newtons", "chunk_size_bytes": 309, "original_size_bytes": 318, "start_byte": 6936, "end_byte": 7254}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:cd90755fa638", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_torque_xyz", "qualified_name": "NetFTSensor.get_torque_xyz", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [225, 233], "text": "def get_torque_xyz(self) -> Tuple[float, float, float]:\n        \"\"\"\n        Get current torque readings for X, Y, Z axes.\n        Returns:\n            Tuple[float, float, float]: (Tx, Ty, Tz) in Newton-meters\n        \"\"\"\n        force_data = self.get_force()\n        return force_data[3], force_data[4], force_data[5]", "hash": "cd90755fa638", "chunk_type": "method", "node_type": "function_definition", "signature": "get_torque_xyz(self)", "docstring": "Get current torque readings for X, Y, Z axes.\n        \n        Returns:\n            Tuple[float, float, float]: (Tx, Ty, Tz) in Newton-meters", "chunk_size_bytes": 317, "original_size_bytes": 326, "start_byte": 7264, "end_byte": 7590}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:9b6be016142c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_bias", "qualified_name": "NetFTSensor.set_bias", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [235, 273], "text": "def set_bias(self, samples: int = 100) -> bool:\n        \"\"\"\n        Set the current sensor readings as bias/zero reference.\n        Args:\n            samples (int): Number of samples to average for bias calculation\n        Returns:\n            bool: True if bias set successfully\n        \"\"\"\n        if not self.streaming:\n            print(\"Data streaming must be active to set bias\")\n            return False\n        try:\n            print(f\"Collecting {samples} samples for bias calculation...\")\n            bias_samples = []\n            for i in range(samples):\n                with self.data_lock:\n                    bias_samples.append(self.current_data.copy())\n                time.sleep(0.001)  # 1ms delay between samples\n            self.bias_vector = [\n                sum(sample[i] for sample in bias_samples) / len(bias_samples)\n                for i in range(6)\n            ]\n            print(\"Bias vector set successfully:\")\n            print(f\"  Forces: Fx={self.bias_vector[0]:.3f}, Fy={self.bias_vector[1]:.3f}, Fz={self.bias_vector[2]:.3f}\")\n            print(f\"  Torques: Tx={self.bias_vector[3]:.3f}, Ty={self.bias_vector[4]:.3f}, Tz={self.bias_vector[5]:.3f}\")\n            return True\n        except Exception as e:\n            print(f\"Failed to set bias: {e}\")\n            return False", "hash": "9b6be016142c", "chunk_type": "method", "node_type": "function_definition", "signature": "set_bias(self, samples: int = 100)", "docstring": "Set the current sensor readings as bias/zero reference.\n        \n        Args:\n            samples (int): Number of samples to average for bias calculation\n            \n        Returns:\n            bool: True if bias set successfully", "chunk_size_bytes": 1310, "original_size_bytes": 1468, "start_byte": 7600, "end_byte": 9068}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:16737528c2e6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_bias", "qualified_name": "NetFTSensor.clear_bias", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [275, 280], "text": "def clear_bias(self):\n        \"\"\"\n        Clear the current bias vector (reset to zero).\n        \"\"\"\n        self.bias_vector = [0.0] * 6\n        print(\"Bias vector cleared\")", "hash": "16737528c2e6", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_bias(self)", "docstring": "Clear the current bias vector (reset to zero).", "chunk_size_bytes": 174, "original_size_bytes": 174, "start_byte": 9078, "end_byte": 9252}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:bbb0ac743a5f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_create_command", "qualified_name": "NetFTSensor._create_command", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [282, 298], "text": "def _create_command(self, command_code: int) -> bytes:\n        \"\"\"\n        Create a NetFT command packet.\n        Args:\n            command_code (int): Command code for the operation\n        Returns:\n            bytes: Formatted command packet\n        \"\"\"\n        header = 0x1234  # Standard NetFT header\n        sequence = 0x0001  # Sequence number\n        packet = struct.pack('>HHH', header, command_code, sequence)\n        return packet", "hash": "bbb0ac743a5f", "chunk_type": "method", "node_type": "function_definition", "signature": "_create_command(self, command_code: int)", "docstring": "Create a NetFT command packet.\n        \n        Args:\n            command_code (int): Command code for the operation\n            \n        Returns:\n            bytes: Formatted command packet", "chunk_size_bytes": 440, "original_size_bytes": 585, "start_byte": 9262, "end_byte": 9847}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:2f524e5328d1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_create_streaming_command", "qualified_name": "NetFTSensor._create_streaming_command", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [300, 317], "text": "def _create_streaming_command(self, sample_rate: int) -> bytes:\n        \"\"\"\n        Create a streaming start command with specified sample rate.\n        Args:\n            sample_rate (int): Desired sample rate in Hz\n        Returns:\n            bytes: Formatted streaming command\n        \"\"\"\n        header = 0x1234\n        command = 0x0002  # Start streaming command\n        sequence = 0x0001\n        rate_code = self._sample_rate_to_code(sample_rate)\n        packet = struct.pack('>HHHH', header, command, sequence, rate_code)\n        return packet", "hash": "2f524e5328d1", "chunk_type": "method", "node_type": "function_definition", "signature": "_create_streaming_command(self, sample_rate: int)", "docstring": "Create a streaming start command with specified sample rate.\n        \n        Args:\n            sample_rate (int): Desired sample rate in Hz\n            \n        Returns:\n            bytes: Formatted streaming command", "chunk_size_bytes": 550, "original_size_bytes": 635, "start_byte": 9857, "end_byte": 10492}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:cc80bc312084", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_sample_rate_to_code", "qualified_name": "NetFTSensor._sample_rate_to_code", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [319, 338], "text": "def _sample_rate_to_code(self, rate: int) -> int:\n        \"\"\"\n        Convert sample rate to NetFT rate code.\n        Args:\n            rate (int): Sample rate in Hz\n        Returns:\n            int: NetFT rate code\n        \"\"\"\n        rate_map = {\n            1: 0x0001,      # 1 Hz\n            10: 0x000A,     # 10 Hz\n            100: 0x0064,    # 100 Hz\n            500: 0x01F4,    # 500 Hz\n            1000: 0x03E8,   # 1000 Hz\n            2000: 0x07D0,   # 2000 Hz\n            7000: 0x1B58    # 7000 Hz\n        }\n        return rate_map.get(rate, 0x03E8)  # Default to 1000 Hz", "hash": "cc80bc312084", "chunk_type": "method", "node_type": "function_definition", "signature": "_sample_rate_to_code(self, rate: int)", "docstring": "Convert sample rate to NetFT rate code.\n        \n        Args:\n            rate (int): Sample rate in Hz\n            \n        Returns:\n            int: NetFT rate code", "chunk_size_bytes": 581, "original_size_bytes": 603, "start_byte": 10502, "end_byte": 11105}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:c2794a75b5fc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_parse_data_packet", "qualified_name": "NetFTSensor._parse_data_packet", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [340, 377], "text": "def _parse_data_packet(self, data: bytes) -> Optional[List[float]]:\n        \"\"\"\n        Parse a data packet from the sensor.\n        Args:\n            data (bytes): Raw data packet from sensor\n        Returns:\n            Optional[List[float]]: Parsed force/torque data or None if invalid\n        \"\"\"\n        try:\n            if len(data) < 36:  # Minimum packet size\n                return None\n            header, sequence, status = struct.unpack('>HHI', data[:8])\n            if header != 0x1234:  # Invalid header\n                return None\n            force_torque_raw = struct.unpack('>6i', data[8:32])\n            force_torque = [\n                force_torque_raw[0] * self.force_scale,   # Fx\n                force_torque_raw[1] * self.force_scale,   # Fy  \n                force_torque_raw[2] * self.force_scale,   # Fz\n                force_torque_raw[3] * self.torque_scale,  # Tx\n                force_torque_raw[4] * self.torque_scale,  # Ty\n                force_torque_raw[5] * self.torque_scale   # Tz\n            ]\n            return force_torque\n        except Exception:\n            return None", "hash": "c2794a75b5fc", "chunk_type": "method", "node_type": "function_definition", "signature": "_parse_data_packet(self, data: bytes)", "docstring": "Parse a data packet from the sensor.\n        \n        Args:\n            data (bytes): Raw data packet from sensor\n            \n        Returns:\n            Optional[List[float]]: Parsed force/torque data or None if invalid", "chunk_size_bytes": 1114, "original_size_bytes": 1470, "start_byte": 11115, "end_byte": 12585}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:8676b0aaa109", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_sensor_info", "qualified_name": "NetFTSensor.get_sensor_info", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [379, 394], "text": "def get_sensor_info(self) -> dict:\n        \"\"\"\n        Get sensor information and status.\n        Returns:\n            dict: Sensor information including model, serial number, etc.\n        \"\"\"\n        info = {\n            'ip_address': self.sensor_ip,\n            'port': self.sensor_port,\n            'sample_rate': self.sample_rate,\n            'streaming': self.streaming,\n            'connected': self.socket is not None,\n            'bias_set': any(abs(b) > 0.001 for b in self.bias_vector)\n        }\n        return info", "hash": "8676b0aaa109", "chunk_type": "method", "node_type": "function_definition", "signature": "get_sensor_info(self)", "docstring": "Get sensor information and status.\n        \n        Returns:\n            dict: Sensor information including model, serial number, etc.", "chunk_size_bytes": 525, "original_size_bytes": 534, "start_byte": 12595, "end_byte": 13129}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:bab93e7c350b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__enter__", "qualified_name": "NetFTSensor.__enter__", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [396, 399], "text": "def __enter__(self):\n        \"\"\"Context manager entry.\"\"\"\n        self.connect()\n        return self", "hash": "bab93e7c350b", "chunk_type": "method", "node_type": "function_definition", "signature": "__enter__(self)", "docstring": "Context manager entry.", "chunk_size_bytes": 100, "original_size_bytes": 100, "start_byte": 13139, "end_byte": 13239}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:3d3a4417a404", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__exit__", "qualified_name": "NetFTSensor.__exit__", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [401, 403], "text": "def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Context manager exit.\"\"\"\n        self.disconnect()", "hash": "3d3a4417a404", "chunk_type": "method", "node_type": "function_definition", "signature": "__exit__(self, exc_type, exc_val, exc_tb)", "docstring": "Context manager exit.", "chunk_size_bytes": 108, "original_size_bytes": 108, "start_byte": 13249, "end_byte": 13357}
{"chunk_id": "meca_samples:meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py:6ad84aecf669", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "test_sensor_connection", "qualified_name": "test_sensor_connection", "source_path": "meca500-accessories/sensors/ati-force-torque/python/netft_sensor.py", "loc": [407, 441], "text": "def test_sensor_connection():\n    \"\"\"Test basic sensor connection and data reading.\"\"\"\n    sensor_ip = \"192.168.1.100\"  # Replace with your sensor IP\n    print(\"Testing ATI NetFT sensor connection...\")\n    with NetFTSensor(sensor_ip) as sensor:\n        if sensor.connect():\n            print(\"\u2713 Connection successful\")\n            if sensor.start_streaming(1000):\n                print(\"\u2713 Data streaming started\")\n                time.sleep(1)  # Allow data to stabilize\n                sensor.set_bias()\n                print(\"\\nReading force/torque data for 5 seconds...\")\n                start_time = time.time()\n                while time.time() - start_time < 5.0:\n                    force_data = sensor.get_force()\n                    print(f\"F: [{force_data[0]:6.2f}, {force_data[1]:6.2f}, {force_data[2]:6.2f}] \"\n                          f\"T: [{force_data[3]:6.3f}, {force_data[4]:6.3f}, {force_data[5]:6.3f}]\", \n                          end='\\r')\n                    time.sleep(0.1)\n                print(\"\\n\u2713 Data reading completed\")\n            else:\n                print(\"\u2717 Failed to start streaming\")\n        else:\n            print(\"\u2717 Connection failed\")\nif __na", "hash": "6ad84aecf669", "chunk_type": "function", "node_type": "function_definition", "signature": "test_sensor_connection()", "docstring": "Test basic sensor connection and data reading.", "chunk_size_bytes": 1180, "original_size_bytes": 1399, "start_byte": 13398, "end_byte": 14787}
