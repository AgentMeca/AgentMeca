{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:c7f4804c898f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "system_commands as sys", "qualified_name": "system_commands as sys", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [1, 1], "text": "from pmclib import system_commands as sys", "hash": "c7f4804c898f", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 41, "original_size_bytes": 41, "start_byte": 0, "end_byte": 41}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:4ed020b2a5b1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "xbot_commands as bot", "qualified_name": "xbot_commands as bot", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [2, 2], "text": "from pmclib import xbot_commands as bot", "hash": "4ed020b2a5b1", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 39, "original_size_bytes": 39, "start_byte": 74, "end_byte": 113}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:283d67d151c8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pmc_types", "qualified_name": "pmc_types", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [3, 3], "text": "from pmclib import pmc_types", "hash": "283d67d151c8", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 28, "original_size_bytes": 28, "start_byte": 147, "end_byte": 175}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [5, 5], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 208, "end_byte": 219}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:eae0e403c7a6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "PlanarMotorMove", "qualified_name": "PlanarMotorMove", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [8, 15], "text": "class PlanarMotorMove():\n    def __init__(self, bot_id, xpos: float, ypos: float, vel: float = 1.0, acc: float = 10.0, ending_speed: float = 0) -> None:\n        self.bot_id = bot_id\n        self.xpos = xpos\n        self.ypos = ypos\n        self.vel = vel\n        self.acc = acc\n        self.end_speed = ending_speed", "hash": "eae0e403c7a6", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 315, "original_size_bytes": 315, "start_byte": 222, "end_byte": 537}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:05e326c7198b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "PlanarMotorMove.__init__", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [9, 15], "text": "def __init__(self, bot_id, xpos: float, ypos: float, vel: float = 1.0, acc: float = 10.0, ending_speed: float = 0) -> None:\n        self.bot_id = bot_id\n        self.xpos = xpos\n        self.ypos = ypos\n        self.vel = vel\n        self.acc = acc\n        self.end_speed = ending_speed", "hash": "05e326c7198b", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, bot_id, xpos: float, ypos: float, vel: float = 1.0, acc: float = 10.0, ending_speed: float = 0)", "docstring": null, "chunk_size_bytes": 286, "original_size_bytes": 286, "start_byte": 251, "end_byte": 537}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:780ac702aed6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MecaPlanar", "qualified_name": "MecaPlanar", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [18, 146], "text": "class MecaPlanar():\n    def __init__(self) -> None:\n        self.is_connected = False\n    def connect(self, auto_connect: bool = True, ip: str = '192.168.10.100') -> bool:\n        if auto_connect:\n            connection_state = sys.auto_search_and_connect_to_pmc()\n            self.is_connected = connection_state\n            return connection_state\n        else:\n            connection_state = sys.connect_to_specific_pmc(ip)", "hash": "780ac702aed6", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 426, "original_size_bytes": 427, "start_byte": 540, "end_byte": 6174}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:cc118ed5b6ee", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "MecaPlanar.__init__", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [19, 20], "text": "def __init__(self) -> None:\n        self.is_connected = False", "hash": "cc118ed5b6ee", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 61, "original_size_bytes": 61, "start_byte": 564, "end_byte": 625}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:3e50ef516209", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "connect", "qualified_name": "MecaPlanar.connect", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [22, 30], "text": "def connect(self, auto_connect: bool = True, ip: str = '192.168.10.100') -> bool:\n        if auto_connect:\n            connection_state = sys.auto_search_and_connect_to_pmc()\n            self.is_connected = connection_state\n            return connection_state\n        else:\n            connection_state = sys.connect_to_specific_pmc(ip)\n            self.is_connected = connection_state\n            return connection_state", "hash": "3e50ef516209", "chunk_type": "method", "node_type": "function_definition", "signature": "connect(self, auto_connect: bool = True, ip: str = '192.168.10.100')", "docstring": null, "chunk_size_bytes": 421, "original_size_bytes": 421, "start_byte": 631, "end_byte": 1052}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:25b0ebfe26eb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "initialize", "qualified_name": "MecaPlanar.initialize", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [32, 40], "text": "def initialize(self, timeout: float = 10.0):\n        if not sys.is_master():\n            sys.gain_mastership()\n        bot.activate_xbots()\n        maxTime = time.time() + timeout\n        while sys.get_pmc_status() is not pmc_types.PMCSTATUS.PMC_FULLCTRL:\n            time.sleep(0.5)\n            if time.time() > maxTime:\n                raise TimeoutError(\"PMC Activation timeout\")", "hash": "25b0ebfe26eb", "chunk_type": "method", "node_type": "function_definition", "signature": "initialize(self, timeout: float = 10.0)", "docstring": null, "chunk_size_bytes": 382, "original_size_bytes": 382, "start_byte": 1058, "end_byte": 1440}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:25a667f45aa1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "activate_bots", "qualified_name": "MecaPlanar.activate_bots", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [42, 48], "text": "def activate_bots(self, timeout: float = 10.0):\n        bot.activate_xbots()\n        maxTime = time.time() + timeout\n        while sys.get_pmc_status() is not pmc_types.PMCSTATUS.PMC_FULLCTRL:\n            time.sleep(0.5)\n            if time.time() > maxTime:\n                raise TimeoutError(\"PMC Activation timeout\")", "hash": "25a667f45aa1", "chunk_type": "method", "node_type": "function_definition", "signature": "activate_bots(self, timeout: float = 10.0)", "docstring": null, "chunk_size_bytes": 319, "original_size_bytes": 319, "start_byte": 1446, "end_byte": 1765}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:f1d99d7c87ba", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "deactivate_bots", "qualified_name": "MecaPlanar.deactivate_bots", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [50, 56], "text": "def deactivate_bots(self, timeout: float = 10.0):\n        bot.deactivate_xbots()\n        maxTime = time.time() + timeout\n        while sys.get_pmc_status() is not pmc_types.PMCSTATUS.PMC_INACTIVE:\n            time.sleep(0.5)\n            if time.time() > maxTime:\n                raise TimeoutError(\"PMC Deactivation timeout\")", "hash": "f1d99d7c87ba", "chunk_type": "method", "node_type": "function_definition", "signature": "deactivate_bots(self, timeout: float = 10.0)", "docstring": null, "chunk_size_bytes": 325, "original_size_bytes": 325, "start_byte": 1771, "end_byte": 2096}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:bad80badd446", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_pmc_status", "qualified_name": "MecaPlanar.get_pmc_status", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [58, 59], "text": "def get_pmc_status(self) -> pmc_types.PMCSTATUS:\n        return sys.get_pmc_status()", "hash": "bad80badd446", "chunk_type": "method", "node_type": "function_definition", "signature": "get_pmc_status(self)", "docstring": null, "chunk_size_bytes": 84, "original_size_bytes": 84, "start_byte": 2102, "end_byte": 2186}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:80324b388962", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_xbot_ids", "qualified_name": "MecaPlanar.get_xbot_ids", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [61, 67], "text": "def get_xbot_ids(self) -> list[int]:\n        status = bot.get_all_xbot_info(\n            pmc_types.ALLXBOTSFEEDBACKOPTION(0))\n        ids = []\n        for state in status:\n            ids.append(state.xbot_id)\n        return ids", "hash": "80324b388962", "chunk_type": "method", "node_type": "function_definition", "signature": "get_xbot_ids(self)", "docstring": null, "chunk_size_bytes": 228, "original_size_bytes": 228, "start_byte": 2192, "end_byte": 2420}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:54faa0999c28", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_num_xbots", "qualified_name": "MecaPlanar.get_num_xbots", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [69, 70], "text": "def get_num_xbots(self) -> int:\n        return len(bot.get_all_xbot_info(pmc_types.ALLXBOTSFEEDBACKOPTION(0)))", "hash": "54faa0999c28", "chunk_type": "method", "node_type": "function_definition", "signature": "get_num_xbots(self)", "docstring": null, "chunk_size_bytes": 110, "original_size_bytes": 110, "start_byte": 2426, "end_byte": 2536}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:4ed3e327590c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_xbots_state", "qualified_name": "MecaPlanar.get_xbots_state", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [72, 78], "text": "def get_xbots_state(self) -> dict:\n        status = bot.get_all_xbot_info(\n            pmc_types.ALLXBOTSFEEDBACKOPTION(0))\n        states = {}\n        for stat in status:\n            states[stat.xbot_id] = stat.xbot_state\n        return states", "hash": "4ed3e327590c", "chunk_type": "method", "node_type": "function_definition", "signature": "get_xbots_state(self)", "docstring": null, "chunk_size_bytes": 244, "original_size_bytes": 244, "start_byte": 2542, "end_byte": 2786}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:8ff8a8f36a22", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_xbots_pos", "qualified_name": "MecaPlanar.get_xbots_pos", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [80, 85], "text": "def get_xbots_pos(self) -> dict:\n        status = bot.get_all_xbot_info(\n            pmc_types.ALLXBOTSFEEDBACKOPTION(0))\n        pos = {}\n        for stat in status:\n            pos[stat.xbot_id] = (stat.x_pos, stat.y_pos)", "hash": "8ff8a8f36a22", "chunk_type": "method", "node_type": "function_definition", "signature": "get_xbots_pos(self)", "docstring": null, "chunk_size_bytes": 223, "original_size_bytes": 223, "start_byte": 2792, "end_byte": 3015}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:8d6ad7b1f61b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "send_rotation", "qualified_name": "MecaPlanar.send_rotation", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [87, 88], "text": "def send_rotation(self, id: int) -> None:\n        bot.rotary_motion_timed_spin(1, id, 0, 52.36, 25.0, 7.0)", "hash": "8d6ad7b1f61b", "chunk_type": "method", "node_type": "function_definition", "signature": "send_rotation(self, id: int)", "docstring": null, "chunk_size_bytes": 106, "original_size_bytes": 106, "start_byte": 3021, "end_byte": 3127}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:e9d5440b9b6e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "send_single_linear_command", "qualified_name": "MecaPlanar.send_single_linear_command", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [90, 92], "text": "def send_single_linear_command(self, xbot_id: int, xpos: float, ypos: float, vel: float = 1.0, acc: float = 10.0) -> None:\n        bot.linear_motion_si(1, xbot_id, pmc_types.POSITIONMODE(0),\n                             pmc_types.LINEARPATHTYPE(0), xpos, ypos, 0.0, vel, acc)", "hash": "e9d5440b9b6e", "chunk_type": "method", "node_type": "function_definition", "signature": "send_single_linear_command(self, xbot_id: int, xpos: float, ypos: float, vel: float = 1.0, acc: float = 10.0)", "docstring": null, "chunk_size_bytes": 275, "original_size_bytes": 275, "start_byte": 3133, "end_byte": 3408}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:6569f67744e1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "send_multi_linear_commands", "qualified_name": "MecaPlanar.send_multi_linear_commands", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [94, 97], "text": "def send_multi_linear_commands(self, moves: list[PlanarMotorMove]) -> None:\n        for move in moves:\n            bot.linear_motion_si(1, move.bot_id, pmc_types.POSITIONMODE(0), pmc_types.LINEARPATHTYPE(0), move.xpos,\n                                 move.ypos, move.end_speed, move.vel, move.acc)", "hash": "6569f67744e1", "chunk_type": "method", "node_type": "function_definition", "signature": "send_multi_linear_commands(self, moves: list[PlanarMotorMove])", "docstring": null, "chunk_size_bytes": 298, "original_size_bytes": 298, "start_byte": 3414, "end_byte": 3712}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:172cca21c19e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "send_auto_move_command", "qualified_name": "MecaPlanar.send_auto_move_command", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [99, 101], "text": "def send_auto_move_command(self, num_bot: int, xbot_ids: list[int], x_pos: list[float], y_pos: list[float]) -> None:\n        bot.auto_driving_motion_si(\n            num_bot, pmc_types.ASYNCOPTIONS.MOVEALL, xbot_ids, x_pos, y_pos)", "hash": "172cca21c19e", "chunk_type": "method", "node_type": "function_definition", "signature": "send_auto_move_command(self, num_bot: int, xbot_ids: list[int], x_pos: list[float], y_pos: list[float])", "docstring": null, "chunk_size_bytes": 229, "original_size_bytes": 229, "start_byte": 3718, "end_byte": 3947}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:56abb413a7f2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "wait_move_done", "qualified_name": "MecaPlanar.wait_move_done", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [103, 108], "text": "def wait_move_done(self, bot_id: int, timeout: float = 10.0) -> pmc_types.XBOTSTATE:\n        while bot.get_xbot_status(xbot_id=bot_id).xbot_state is not pmc_types.XBOTSTATE.XBOT_IDLE:\n            if bot.get_xbot_status(xbot_id=bot_id).xbot_state == pmc_types.XBOTSTATE.XBOT_OBSTACLE_DETECTED:\n                return pmc_types.XBOTSTATE.XBOT_OBSTACLE_DETECTED\n            time.sleep(0.5)\n        return pmc_types.XBOTSTATE.XBOT_IDLE", "hash": "56abb413a7f2", "chunk_type": "method", "node_type": "function_definition", "signature": "wait_move_done(self, bot_id: int, timeout: float = 10.0)", "docstring": null, "chunk_size_bytes": 431, "original_size_bytes": 431, "start_byte": 3953, "end_byte": 4384}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:1912b15bae73", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "wait_multiple_move_done", "qualified_name": "MecaPlanar.wait_multiple_move_done", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [110, 112], "text": "def wait_multiple_move_done(self, bot_list, timeout: float = 10) -> None:\n        for bot in bot_list:\n            self.wait_move_done(bot, timeout)", "hash": "1912b15bae73", "chunk_type": "method", "node_type": "function_definition", "signature": "wait_multiple_move_done(self, bot_list, timeout: float = 10)", "docstring": null, "chunk_size_bytes": 148, "original_size_bytes": 148, "start_byte": 4390, "end_byte": 4538}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:f46285a35996", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "define_stereotype", "qualified_name": "MecaPlanar.define_stereotype", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [114, 139], "text": "def define_stereotype(self,\n                          mover_type: pmc_types.XBOTTYPE,\n                          id: int,\n                          payload: float = 0,\n                          size_pos_x: float = 0,\n                          size_neg_x: float = 0,\n                          size_pos_y: float = 0,\n                          size_neg_y: float = 0,\n                          perf_level: int = 0,\n                          cg_x: float = 0,\n                          cg_y: float = 0,\n                          cg_z: float = 0,\n                          emerg_d_acc: float = 20) -> None:\n        mover_data = pmc_types.MoverStereotypeData(perf_level,\n                                                   payload,\n                                                   size_pos_x,\n                                                   size_neg_x,\n                                                   size_pos_y,\n                                                   size_neg_y,\n                                                   cg_x,\n                                                   cg_y,\n                                                   cg_z,\n                                                   emerg_d_acc)\n        bot.define_mover_stereotype(mover_type,\n                                    id,\n                                    mover_data)", "hash": "f46285a35996", "chunk_type": "method", "node_type": "function_definition", "signature": "define_stereotype(self,\n                          mover_type: pmc_types.XBOTTYPE,\n                          id: int,\n                          payload: float = 0,\n                          size_pos_x: float = 0,\n                          size_neg_x: float = 0,\n                          size_pos_y: float = 0,\n                          size_neg_y: float = 0,\n                          perf_level: int = 0,\n                          cg_x: float = 0,\n                          cg_y: float = 0,\n                          cg_z: float = 0,\n                          emerg_d_acc: float = 20)", "docstring": null, "chunk_size_bytes": 1344, "original_size_bytes": 1344, "start_byte": 4544, "end_byte": 5888}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:bb384ca968e9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "assign_stereotype", "qualified_name": "MecaPlanar.assign_stereotype", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [141, 143], "text": "def assign_stereotype(self, bot_id: int, ster_id: int) -> None:\n        bot.assign_stereotype_to_mover(\n            bot_id, ster_id, pmc_types.ASSIGNSTEREOTYPEOPTION(0))", "hash": "bb384ca968e9", "chunk_type": "method", "node_type": "function_definition", "signature": "assign_stereotype(self, bot_id: int, ster_id: int)", "docstring": null, "chunk_size_bytes": 169, "original_size_bytes": 169, "start_byte": 5894, "end_byte": 6063}
{"chunk_id": "meca_samples:SLAS2025/src/MecaPlanar.py:62db54cf2dc9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "start_macro", "qualified_name": "MecaPlanar.start_macro", "source_path": "SLAS2025/src/MecaPlanar.py", "loc": [145, 146], "text": "def start_macro(self, macro_id: int, xbot_id) -> None:\n        bot.run_motion_macro(1, macro_id, xbot_id)", "hash": "62db54cf2dc9", "chunk_type": "method", "node_type": "function_definition", "signature": "start_macro(self, macro_id: int, xbot_id)", "docstring": null, "chunk_size_bytes": 105, "original_size_bytes": 105, "start_byte": 6069, "end_byte": 6174}
