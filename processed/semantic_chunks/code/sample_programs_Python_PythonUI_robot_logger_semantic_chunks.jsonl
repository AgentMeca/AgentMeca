{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:89ed1aae8d33", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "os", "qualified_name": "os", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [2, 2], "text": "import os", "hash": "89ed1aae8d33", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 9, "original_size_bytes": 9, "start_byte": 23, "end_byte": 32}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:cd89a6634e6c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "queue", "qualified_name": "queue", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [3, 3], "text": "import queue", "hash": "cd89a6634e6c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 12, "original_size_bytes": 12, "start_byte": 33, "end_byte": 45}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [4, 4], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 46, "end_byte": 57}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:3e4de8dd2a97", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "CSVFileLogger", "qualified_name": "CSVFileLogger", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [7, 181], "text": "class CSVFileLogger:\n    \"\"\"Class to handle logging robot state to file.\n    Attributes\n    ----------\n    file : file handle\n        File to be written to.\n    fields : list of strings\n        Fields to be logged.\n    command_queue : queue\n        Queue to store sent commands.\n    element_width : int\n        Each numerical element will have this width.\n    \"\"\"", "hash": "3e4de8dd2a97", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class to handle logging robot state to file.\n\n    Attributes\n    ----------\n    file : file handle\n        File to be written to.\n    fields : list of strings\n        Fields to be logged.\n    command_queue : queue\n        Queue to store sent commands.\n    element_width : int\n        Each numerical element will have this width.", "chunk_size_bytes": 363, "original_size_bytes": 365, "start_byte": 60, "end_byte": 6822}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:78ae048d550a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "CSVFileLogger.__init__", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [23, 83], "text": "def __init__(self, robot_info, robot_state, fields=None, file_path=None, record_time=True):\n        \"\"\"Initialize class.\n        Parameters\n        ----------\n        robot_info : RobotInfo\n            Contains robot information.\n        fields : list of strings\n            List of fields to be logged.\n        robot_state : RobotState\n            Contains state of robot.\n        file_path : string or None\n            If not provided, file will be saved in working directory.\n        record_time : bool\n            If true, current time will also be recorded in the text file. (Time is also available in filename.)\n        \"\"\"\n        current_date_time = time.strftime('%Y-%m-%d-%H-%M-%S')\n        serial_number_or_blank = ('_serial_' + robot_info.serial) if robot_info.serial else \"\"\n        file_name = (f\"{robot_info.model}_R{robot_info.revision}_\"\n                     f\"v{robot_info.fw_major_rev}_{robot_info.fw_minor_rev}_{robot_info.fw_patch_num}_\"\n                     f\"log_{current_date_time}{serial_number_or_blank}.csv\")\n        if file_path:\n            file_name = os.path.join(file_path, file_name)\n        if fields == None:\n            fields = []\n            if robot_info.rt_message_capable:\n                for attr in vars(robot_state):\n                    if attr.startswith('target') or attr.startswith('drive'):\n                        fields.append(attr)\n            else:\n                fields = ['target_joint_positions', 'target_end_effector_pose']\n        self.file = open(file_name, 'w', newline='')\n        self.fields = fields\n        self.command_queue = queue.Queue()\n        self.element_width = 10\n        self.timestamp_element_width = 15\n        self.file.write('ROBOT_INFORMATION\\n')\n        for attr in ['model', 'revision', 'fw_major_rev', 'fw_minor_rev', 'fw_patch_num']:\n            self.file.write(f'{attr}, {getattr(robot_info, attr)}\\n')\n        if robot_info.serial != None:\n            self.file.write(f'serial_number, {robot_info.serial}\\n')\n        if record_time:\n            self.file.write(f'time_recorded, {current_date_time}\\n')\n        self.file.write('\\nLOGGED_DATA\\n')\n        self.write_field_headers(robot_state)\n        self.write_field_and_element_headers(robot_info)", "hash": "78ae048d550a", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot_info, robot_state, fields=None, file_path=None, record_time=True)", "docstring": "Initialize class.\n\n        Parameters\n        ----------\n        robot_info : RobotInfo\n            Contains robot information.\n        fields : list of strings\n            List of fields to be logged.\n        robot_state : RobotState\n            Contains state of robot.\n        file_path : string or None\n            If not provided, file will be saved in working directory.\n        record_time : bool\n            If true, current time will also be recorded in the text file. (Time is also available in filename.)", "chunk_size_bytes": 2233, "original_size_bytes": 2550, "start_byte": 431, "end_byte": 2981}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:fec2d7501abc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "write_field_headers", "qualified_name": "CSVFileLogger.write_field_headers", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [85, 107], "text": "def write_field_headers(self, robot_state):\n        \"\"\"For a field with multiple elements, write field name in first column, empty spaces for rest.\n        These headers are mostly for CSV and excel legibility.\n        Parameters\n        ----------\n        robot_state : RobotState\n            Current state of robot. Used only to get length of data fields.\n        \"\"\"\n        self.file.write(f\"{'timestamp':>{self.timestamp_element_width}},\")\n        for field in self.fields:\n            num_elements = len(getattr(robot_state, field).data)\n            commas = ',' * (num_elements - 1)\n            width = (self.element_width + 1) * num_elements - 1\n            self.file.write(f'{field + commas:{width}},')\n        self.file.write('\\n')", "hash": "fec2d7501abc", "chunk_type": "method", "node_type": "function_definition", "signature": "write_field_headers(self, robot_state)", "docstring": "For a field with multiple elements, write field name in first column, empty spaces for rest.\n\n        These headers are mostly for CSV and excel legibility.\n\n        Parameters\n        ----------\n        robot_state : RobotState\n            Current state of robot. Used only to get length of data fields.", "chunk_size_bytes": 741, "original_size_bytes": 951, "start_byte": 2987, "end_byte": 3938}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:59c0365da065", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "write_field_and_element_headers", "qualified_name": "CSVFileLogger.write_field_and_element_headers", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [109, 140], "text": "def write_field_and_element_headers(self, robot_info):\n        \"\"\"Write the full field name and element name in each column.\n        Parameters\n        ----------\n        robot_info : RobotInfo\n            Information about the robot, such as model name and number of joints.\n        \"\"\"\n        def assemble_with_prefix(field, names):\n            return ','.join([field + '_' + str(x) for x in names]) + ','\n        self.file.write(f\"{'timestamp':>{self.timestamp_element_width}},\")\n        for field in self.fields:\n            if (field.endswith('joint_positions') or field.endswith('joint_velocity')\n                    or field.endswith('joint_torque_ratio')):\n                self.file.write(assemble_with_prefix(field, range(robot_info.num_joints)))\n            elif field.endswith('end_effector_pose'):\n                self.file.write(assemble_with_prefix(field, ['x', 'y', 'z', 'alpha', 'beta', 'gamma']))\n            elif field.endswith('end_effector_velocity'):\n                self.file.write(\n                    assemble_with_prefix(field, ['x_dot', 'y_dot', 'z_dot', 'omega_x', 'omega_y', 'omega_z']))\n            elif field.endswith('configurations'):\n                self.file.write(assemble_with_prefix(field, ['shoulder', 'elbow', 'wrist']))\n            elif field.endswith('last_joint_turn'):\n                self.file.write(field + ',')\n            else:\n                raise ValueError(f'Missing formatting for field: {field}')\n        self.file.write('\\n')", "hash": "59c0365da065", "chunk_type": "method", "node_type": "function_definition", "signature": "write_field_and_element_headers(self, robot_info)", "docstring": "Write the full field name and element name in each column.\n\n        Parameters\n        ----------\n        robot_info : RobotInfo\n            Information about the robot, such as model name and number of joints.", "chunk_size_bytes": 1480, "original_size_bytes": 1628, "start_byte": 3944, "end_byte": 5572}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:f6b95bb72acb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "write_fields", "qualified_name": "CSVFileLogger.write_fields", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [142, 165], "text": "def write_fields(self, timestamp, robot_state):\n        \"\"\"Write fields to file.\n        Parameters\n        ----------\n        timestamp : numeric\n            The timestamp of the current data.\n        robot_state : RobotState\n            This object contains the current robot state.\n        \"\"\"\n        if self.file.closed:\n            return\n        self.file.write(f'{timestamp:{self.timestamp_element_width}},')\n        for field in self.fields:\n            self.file.write(','.join([f'{x:{self.element_width}}' for x in getattr(robot_state, field).data]))\n            self.file.write(',')\n        self.file.write('\\n')", "hash": "f6b95bb72acb", "chunk_type": "method", "node_type": "function_definition", "signature": "write_fields(self, timestamp, robot_state)", "docstring": "Write fields to file.\n\n        Parameters\n        ----------\n        timestamp : numeric\n            The timestamp of the current data.\n        robot_state : RobotState\n            This object contains the current robot state.", "chunk_size_bytes": 624, "original_size_bytes": 771, "start_byte": 5578, "end_byte": 6349}
{"chunk_id": "meca_samples:sample-programs/Python/PythonUI/robot_logger.py:992568a21b8a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "end_log", "qualified_name": "CSVFileLogger.end_log", "source_path": "sample-programs/Python/PythonUI/robot_logger.py", "loc": [167, 181], "text": "def end_log(self, ignore_checkpoints=True):\n        \"\"\"Write all accumulated sent commands and close file.\n        \"\"\"\n        self.file.write('\\nSENT_COMMANDS\\n')\n        while not self.command_queue.empty():\n            command = self.command_queue.get()\n            if ignore_checkpoints and command.startswith('SetCheckpoint'):\n                continue\n            self.file.write(f'\"{command}\"\\n')\n        self.file.close()", "hash": "992568a21b8a", "chunk_type": "method", "node_type": "function_definition", "signature": "end_log(self, ignore_checkpoints=True)", "docstring": "Write all accumulated sent commands and close file.", "chunk_size_bytes": 428, "original_size_bytes": 467, "start_byte": 6355, "end_byte": 6822}
