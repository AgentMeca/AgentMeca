{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [21, 21], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 553, "end_byte": 564}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:83d8e9e427df", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "sys", "qualified_name": "sys", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [22, 22], "text": "import sys", "hash": "83d8e9e427df", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 10, "original_size_bytes": 10, "start_byte": 565, "end_byte": 575}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:258e367d7ff5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "argparse", "qualified_name": "argparse", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [23, 23], "text": "import argparse", "hash": "258e367d7ff5", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 15, "original_size_bytes": 15, "start_byte": 576, "end_byte": 591}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:1e7b9f543d36", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "logging", "qualified_name": "logging", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [24, 24], "text": "import logging", "hash": "1e7b9f543d36", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 14, "original_size_bytes": 14, "start_byte": 592, "end_byte": 606}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:0f3c72e18f95", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "List", "qualified_name": "List", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [25, 25], "text": "from typing import List, Tuple, Optional", "hash": "0f3c72e18f95", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 40, "original_size_bytes": 40, "start_byte": 607, "end_byte": 647}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:f678863b31fe", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "VisionController", "qualified_name": "VisionController", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [26, 26], "text": "from vision_controller import VisionController", "hash": "f678863b31fe", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 46, "original_size_bytes": 46, "start_byte": 648, "end_byte": 694}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:e036e34e8a60", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "VisionGuidedPick", "qualified_name": "VisionGuidedPick", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [27, 27], "text": "from vision_guided_pick import VisionGuidedPick", "hash": "e036e34e8a60", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 47, "original_size_bytes": 47, "start_byte": 695, "end_byte": 742}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:85fdd406da6c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SickPloc2DApplication", "qualified_name": "SickPloc2DApplication", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [30, 468], "text": "class SickPloc2DApplication:\n    \"\"\"\n    Complete application class for SICK PLOC 2D vision-guided automation.\n    This class demonstrates a production-ready implementation with proper\n    error handling, logging, and operational monitoring.\n    \"\"\"", "hash": "85fdd406da6c", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Complete application class for SICK PLOC 2D vision-guided automation.\n    \n    This class demonstrates a production-ready implementation with proper\n    error handling, logging, and operational monitoring.", "chunk_size_bytes": 249, "original_size_bytes": 254, "start_byte": 745, "end_byte": 17347}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:dd5547e6aaf3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "SickPloc2DApplication.__init__", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [38, 77], "text": "def __init__(self, robot_ip: str, vision_ip: str, debug: bool = False):\n        \"\"\"\n        Initialize the application.\n        Args:\n            robot_ip (str): IP address of Mecademic robot\n            vision_ip (str): IP address of SICK PLOC 2D system\n            debug (bool): Enable debug output\n        \"\"\"\n        self.robot_ip = robot_ip\n        self.vision_ip = vision_ip\n        self.debug = debug\n        self.app = VisionGuidedPick(robot_ip, vision_ip, debug=debug)\n        self.job_id = 1\n        self.pick_offset = 5.0  # mm\n        self.place_offset = 10.0  # mm\n        self.robot_speed = 25.0  # %\n        self.place_positions = [\n            (-120, 100, 0, 180, 0, 180),   # Position 1\n            (-120, 120, 0, 180, 0, 180),   # Position 2  \n            (-120, 140, 0, 180, 0, 180),   # Position 3\n        ]\n        self.current_place_index = 0\n        self.cycle_count = 0\n        self.total_cycle_time = 0.0\n        self.successful_picks = 0\n        self.failed_picks = 0\n        self._setup_logging()\n        self.logger.info(f\"Application initialized - Robot: {robot_ip}, Vision: {vision_ip}\")", "hash": "dd5547e6aaf3", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot_ip: str, vision_ip: str, debug: bool = False)", "docstring": "Initialize the application.\n        \n        Args:\n            robot_ip (str): IP address of Mecademic robot\n            vision_ip (str): IP address of SICK PLOC 2D system\n            debug (bool): Enable debug output", "chunk_size_bytes": 1117, "original_size_bytes": 1358, "start_byte": 1009, "end_byte": 2367}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:97f8d8924bd7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_setup_logging", "qualified_name": "SickPloc2DApplication._setup_logging", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [79, 89], "text": "def _setup_logging(self) -> None:\n        \"\"\"Setup logging configuration.\"\"\"\n        logging.basicConfig(\n            level=logging.INFO if not self.debug else logging.DEBUG,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            handlers=[\n                logging.FileHandler('sick_ploc2d_application.log'),\n                logging.StreamHandler(sys.stdout)\n            ]\n        )\n        self.logger = logging.getLogger(__name__)", "hash": "97f8d8924bd7", "chunk_type": "method", "node_type": "function_definition", "signature": "_setup_logging(self)", "docstring": "Setup logging configuration.", "chunk_size_bytes": 453, "original_size_bytes": 453, "start_byte": 2377, "end_byte": 2830}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:e62476767386", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "initialize_systems", "qualified_name": "SickPloc2DApplication.initialize_systems", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [91, 122], "text": "def initialize_systems(self) -> bool:\n        \"\"\"\n        Initialize robot and vision systems.\n        Returns:\n            bool: True if initialization successful, False otherwise\n        \"\"\"\n        self.logger.info(\"Initializing systems...\")\n        try:\n            if not self.app.init_robot():\n                self.logger.error(\"Robot initialization failed\")\n                return False\n            self.logger.info(\"Robot initialized successfully\")\n            if not self.app.init_vision():\n                self.logger.error(\"Vision system initialization failed\")\n                return False\n            self.logger.info(\"Vision system initialized successfully\")\n            self.app.set_offset(self.pick_offset, self.place_offset)\n            self.app.set_speed(self.robot_speed)\n            self.logger.info(f\"Systems initialized - Pick offset: {self.pick_offset}mm, Speed: {self.robot_speed}%\")\n            return True\n        except Exception as e:\n            self.logger.error(f\"System initialization error: {e}\")\n            return False", "hash": "e62476767386", "chunk_type": "method", "node_type": "function_definition", "signature": "initialize_systems(self)", "docstring": "Initialize robot and vision systems.\n        \n        Returns:\n            bool: True if initialization successful, False otherwise", "chunk_size_bytes": 1054, "original_size_bytes": 1241, "start_byte": 2840, "end_byte": 4081}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:022be4977e9f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "perform_calibration", "qualified_name": "SickPloc2DApplication.perform_calibration", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [124, 147], "text": "def perform_calibration(self, calibration_method: str = \"single_point\") -> bool:\n        \"\"\"\n        Perform vision-robot calibration.\n        Args:\n            calibration_method (str): \"single_point\" or \"three_point\"\n        Returns:\n            bool: True if calibration successful, False otherwise\n        \"\"\"\n        self.logger.info(f\"Starting {calibration_method} calibration...\")\n        try:\n            if calibration_method == \"single_point\":\n                return self._single_point_calibration()\n            elif calibration_method == \"three_point\":\n                return self._three_point_calibration()\n            else:\n                self.logger.error(f\"Unknown calibration method: {calibration_method}\")\n                return False\n        except Exception as e:\n            self.logger.error(f\"Calibration error: {e}\")\n            return False", "hash": "022be4977e9f", "chunk_type": "method", "node_type": "function_definition", "signature": "perform_calibration(self, calibration_method: str = \"single_point\")", "docstring": "Perform vision-robot calibration.\n        \n        Args:\n            calibration_method (str): \"single_point\" or \"three_point\"\n            \n        Returns:\n            bool: True if calibration successful, False otherwise", "chunk_size_bytes": 865, "original_size_bytes": 913, "start_byte": 4091, "end_byte": 5004}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:6b9b3bc04dc2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_single_point_calibration", "qualified_name": "SickPloc2DApplication._single_point_calibration", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [149, 163], "text": "def _single_point_calibration(self) -> bool:\n        \"\"\"\n        Perform single-point calibration (simplified method).\n        Returns:\n            bool: True if calibration successful, False otherwise\n        \"\"\"\n        ref_x, ref_y, ref_z = 100.0, 50.0, 25.0\n        ref_rx, ref_ry, ref_rz = 0.0, 0.0, 0.0\n        self.app.set_vision_ref(ref_x, ref_y, ref_z, ref_rx, ref_ry, ref_rz)\n        self.logger.info(f\"Single-point calibration completed at ({ref_x}, {ref_y}, {ref_z})\")\n        return True", "hash": "6b9b3bc04dc2", "chunk_type": "method", "node_type": "function_definition", "signature": "_single_point_calibration(self)", "docstring": "Perform single-point calibration (simplified method).\n        \n        Returns:\n            bool: True if calibration successful, False otherwise", "chunk_size_bytes": 500, "original_size_bytes": 573, "start_byte": 5014, "end_byte": 5587}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:934a4cee71be", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_three_point_calibration", "qualified_name": "SickPloc2DApplication._three_point_calibration", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [165, 214], "text": "def _three_point_calibration(self) -> bool:\n        \"\"\"\n        Perform three-point calibration for high accuracy.\n        Returns:\n            bool: True if calibration successful, False otherwise\n        \"\"\"\n        self.logger.info(\"Starting interactive 3-point calibration...\")\n        robot_points = [\n            (100.0, 100.0, 25.0),  # Point 1\n            (200.0, 100.0, 25.0),  # Point 2\n            (150.0, 200.0, 25.0)   # Point 3\n        ]\n        vision_points = []\n        for i, (x, y, z) in enumerate(robot_points):\n            self.logger.info(f\"Moving to calibration point {i+1}: ({x}, {y}, {z})\")\n            self.app.robot.MoveCartPoint(x, y, z, 0, 0, 0)\n            self.app.robot.WaitMovementCompletion()\n            print(f\"\\nRobot positioned at calibration point {i+1}\")\n            print(f\"Robot coordinates: ({x:.1f}, {y:.1f}, {z:.1f})\")\n            print(\"Please observe the corresponding coordinates in the vision system and enter them below:\")\n            try:\n                vision_x = float(input(f\"Vision X coordinate for point {i+1}: \"))\n                vision_y = float(input(f\"Vision Y coordinate for point {i+1}: \"))\n                vision_points.append((vision_x, vision_y))\n                self.logger.info(f\"Point {i+1} - Robot: ({x}, {y}, {z}), Vision: ({vision_x}, {vision_y})\")\n            except ValueError:\n                self.logger.error(\"Invalid coordinate input\")\n                return False\n        success = self.app.calibrate_3_point(robot_points, vision_points)\n        if success:\n            self.logger.info(\"3-point calibration completed successfully\")\n            return True\n        else:\n            self.logger.error(\"3-point calibration failed\")\n            return False", "hash": "934a4cee71be", "chunk_type": "method", "node_type": "function_definition", "signature": "_three_point_calibration(self)", "docstring": "Perform three-point calibration for high accuracy.\n        \n        Returns:\n            bool: True if calibration successful, False otherwise", "chunk_size_bytes": 1734, "original_size_bytes": 2067, "start_byte": 5597, "end_byte": 7664}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:020181b9c24f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run_production_cycle", "qualified_name": "SickPloc2DApplication.run_production_cycle", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [216, 266], "text": "def run_production_cycle(self) -> bool:\n        \"\"\"\n        Run a single production cycle (detect and process all visible parts).\n        Returns:\n            bool: True if cycle completed, False if error occurred\n        \"\"\"\n        cycle_start_time = time.time()\n        try:\n            count = self.app.get_count(self.job_id)\n            if count is None:\n                self.logger.warning(\"Failed to get part count from vision system\")\n                return False\n            if count == 0:\n                if self.debug:\n                    self.logger.debug(\"No parts detected\")\n                return True\n            self.logger.info(f\"Processing {count} parts\")\n            for i in range(1, count + 1):\n                if not self._process_single_part(i):\n                    self.logger.warning(f\"Failed to process part {i}\")\n                    self.failed_picks += 1\n                else:\n                    self.successful_picks += 1\n                    self.current_place_index = (self.current_place_index + 1) % len(self.place_positions)\n            cycle_time = time.time() - cycle_start_time\n            self.cycle_count += 1\n            self.total_cycle_time += cycle_time\n            avg_cycle_time = self.total_cycle_time / self.cycle_count\n            success_rate = (self.successful_picks / (self.successful_picks + self.failed_picks)) * 100\n            self.logger.info(f\"Cycle {self.cycle_count} completed in {cycle_time:.2f}s \"\n                           f\"(avg: {avg_cycle_time:.2f}s, success rate: {success_rate:.1f}%)\")\n            return True\n        except Exception as e:\n            self.logger.error(f\"Production cycle error: {e}\")\n            return False", "hash": "020181b9c24f", "chunk_type": "method", "node_type": "function_definition", "signature": "run_production_cycle(self)", "docstring": "Run a single production cycle (detect and process all visible parts).\n        \n        Returns:\n            bool: True if cycle completed, False if error occurred", "chunk_size_bytes": 1695, "original_size_bytes": 2023, "start_byte": 7674, "end_byte": 9697}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:6c7bb66bf7f7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_process_single_part", "qualified_name": "SickPloc2DApplication._process_single_part", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [268, 301], "text": "def _process_single_part(self, part_index: int) -> bool:\n        \"\"\"\n        Process a single part (pick and place).\n        Args:\n            part_index (int): Index of part to process (1-based)\n        Returns:\n            bool: True if part processed successfully, False otherwise\n        \"\"\"\n        try:\n            part_start_time = time.time()\n            if not self.app.pick_index(self.job_id, part_index):\n                self.logger.warning(f\"Failed to pick part {part_index}\")\n                return False\n            place_coords = self.place_positions[self.current_place_index]\n            if not self.app.place(*place_coords):\n                self.logger.warning(f\"Failed to place part {part_index}\")\n                return False\n            part_time = time.time() - part_start_time\n            self.logger.info(f\"Part {part_index} processed successfully in {part_time:.2f}s\")\n            return True\n        except Exception as e:\n            self.logger.error(f\"Part processing error: {e}\")\n            return False", "hash": "6c7bb66bf7f7", "chunk_type": "method", "node_type": "function_definition", "signature": "_process_single_part(self, part_index: int)", "docstring": "Process a single part (pick and place).\n        \n        Args:\n            part_index (int): Index of part to process (1-based)\n            \n        Returns:\n            bool: True if part processed successfully, False otherwise", "chunk_size_bytes": 1033, "original_size_bytes": 1222, "start_byte": 9707, "end_byte": 10929}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:bcc815f2e454", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run_continuous_operation", "qualified_name": "SickPloc2DApplication.run_continuous_operation", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [303, 342], "text": "def run_continuous_operation(self, max_cycles: Optional[int] = None, \n                               cycle_delay: float = 1.0) -> None:\n        \"\"\"\n        Run continuous production operation.\n        Args:\n            max_cycles (Optional[int]): Maximum number of cycles (None for infinite)\n            cycle_delay (float): Delay between cycles in seconds\n        \"\"\"\n        self.logger.info(\"Starting continuous operation...\")\n        cycles_completed = 0\n        try:\n            while max_cycles is None or cycles_completed < max_cycles:\n                success = self.run_production_cycle()\n                if not success:\n                    self.logger.warning(\"Production cycle failed - attempting recovery\")\n                    if not self._attempt_recovery():\n                        self.logger.error(\"Recovery failed - stopping operation\")\n                        break\n                cycles_completed += 1\n                if cycle_delay > 0:\n                    time.sleep(cycle_delay)\n        except KeyboardInterrupt:\n            self.logger.info(\"Operation interrupted by user\")\n        except Exception as e:\n            self.logger.error(f\"Continuous operation error: {e}\")\n        finally:\n            self.logger.info(f\"Continuous operation completed - {cycles_completed} cycles\")\n            self._print_statistics()", "hash": "bcc815f2e454", "chunk_type": "method", "node_type": "function_definition", "signature": "run_continuous_operation(self, max_cycles: Optional[int] = None, \n                               cycle_delay: float = 1.0)", "docstring": "Run continuous production operation.\n        \n        Args:\n            max_cycles (Optional[int]): Maximum number of cycles (None for infinite)\n            cycle_delay (float): Delay between cycles in seconds", "chunk_size_bytes": 1339, "original_size_bytes": 1594, "start_byte": 10939, "end_byte": 12533}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:ac4035a1c27c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_attempt_recovery", "qualified_name": "SickPloc2DApplication._attempt_recovery", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [344, 377], "text": "def _attempt_recovery(self) -> bool:\n        \"\"\"\n        Attempt to recover from system errors.\n        Returns:\n            bool: True if recovery successful, False otherwise\n        \"\"\"\n        self.logger.info(\"Attempting system recovery...\")\n        try:\n            if not self.app.vision_initialized:\n                self.logger.info(\"Reinitializing vision system...\")\n                if not self.app.init_vision():\n                    return False\n            if not self.app.robot_initialized:\n                self.logger.info(\"Reinitializing robot...\")\n                if not self.app.init_robot():\n                    return False\n            count = self.app.get_count(self.job_id)\n            if count is None:\n                self.logger.warning(\"Vision system still not responding\")\n                return False\n            self.logger.info(\"System recovery successful\")\n            return True\n        except Exception as e:\n            self.logger.error(f\"Recovery attempt failed: {e}\")\n            return False", "hash": "ac4035a1c27c", "chunk_type": "method", "node_type": "function_definition", "signature": "_attempt_recovery(self)", "docstring": "Attempt to recover from system errors.\n        \n        Returns:\n            bool: True if recovery successful, False otherwise", "chunk_size_bytes": 1027, "original_size_bytes": 1218, "start_byte": 12543, "end_byte": 13761}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:c1babd76ee10", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_print_statistics", "qualified_name": "SickPloc2DApplication._print_statistics", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [379, 399], "text": "def _print_statistics(self) -> None:\n        \"\"\"Print operation statistics.\"\"\"\n        if self.cycle_count > 0:\n            avg_cycle_time = self.total_cycle_time / self.cycle_count\n            total_parts = self.successful_picks + self.failed_picks\n            if total_parts > 0:\n                success_rate = (self.successful_picks / total_parts) * 100\n            else:\n                success_rate = 0.0\n            print(\"\\n\" + \"=\"*50)\n            print(\"OPERATION STATISTICS\")\n            print(\"=\"*50)\n            print(f\"Cycles completed: {self.cycle_count}\")\n            print(f\"Total cycle time: {self.total_cycle_time:.2f}s\")\n            print(f\"Average cycle time: {avg_cycle_time:.2f}s\")\n            print(f\"Successful picks: {self.successful_picks}\")\n            print(f\"Failed picks: {self.failed_picks}\")\n            print(f\"Success rate: {success_rate:.1f}%\")\n            print(\"=\"*50)", "hash": "c1babd76ee10", "chunk_type": "method", "node_type": "function_definition", "signature": "_print_statistics(self)", "docstring": "Print operation statistics.", "chunk_size_bytes": 904, "original_size_bytes": 930, "start_byte": 13771, "end_byte": 14701}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:a98982b2cbdd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "run_test_sequence", "qualified_name": "SickPloc2DApplication.run_test_sequence", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [401, 428], "text": "def run_test_sequence(self) -> None:\n        \"\"\"\n        Run a comprehensive test sequence to verify system functionality.\n        \"\"\"\n        self.logger.info(\"Starting test sequence...\")\n        tests = [\n            (\"Vision System Communication\", self._test_vision_communication),\n            (\"Robot Movement\", self._test_robot_movement),\n            (\"Coordinate Transformation\", self._test_coordinate_transformation),\n            (\"Pick and Place Operation\", self._test_pick_place),\n        ]\n        passed_tests = 0\n        for test_name, test_function in tests:\n            self.logger.info(f\"Running test: {test_name}\")\n            try:\n                if test_function():\n                    self.logger.info(f\"\u2713 {test_name} PASSED\")\n                    passed_tests += 1\n                else:\n                    self.logger.error(f\"\u2717 {test_name} FAILED\")\n            except Exception as e:\n                self.logger.error(f\"\u2717 {test_name} FAILED with exception: {e}\")\n        self.logger.info(f\"Test sequence completed: {passed_tests}/{len(tests)} tests passed\")", "hash": "a98982b2cbdd", "chunk_type": "method", "node_type": "function_definition", "signature": "run_test_sequence(self)", "docstring": "Run a comprehensive test sequence to verify system functionality.", "chunk_size_bytes": 1077, "original_size_bytes": 1138, "start_byte": 14711, "end_byte": 15843}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:9597abe85ae9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "vision_communication(self)", "qualified_name": "SickPloc2DApplication.vision_communication(self)", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [430, 433], "text": "est_vision_communication(self) -> bool:\n        \"\"\"Test vision system communication.\"\"\"\n        status = self.app.vision.get_system_status()\n        return status['connected']", "hash": "9597abe85ae9", "chunk_type": "method", "node_type": "function_definition", "signature": "vision_communication(self) -> bo", "docstring": "t vision system communication.\"\"\"", "chunk_size_bytes": 175, "original_size_bytes": 181, "start_byte": 15853, "end_byte": 16034}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:717d712b09f0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "robot_movement(self)", "qualified_name": "SickPloc2DApplication.robot_movement(self)", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [435, 441], "text": "est_robot_movement(self) -> bool:\n        \"\"\"Test robot movement capability.\"\"\"\n        test_position = (150.0, 150.0, 50.0, 0.0, 0.0, 0.0)\n        self.app.robot.MoveCartPoint(*test_position)\n        self.app.robot.WaitMovementCompletion()\n        return True", "hash": "717d712b09f0", "chunk_type": "method", "node_type": "function_definition", "signature": "robot_movement(self) -> bo", "docstring": "t robot movement capability.\"\"\"", "chunk_size_bytes": 260, "original_size_bytes": 305, "start_byte": 16044, "end_byte": 16349}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:051a2c79f36b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "coordinate_transformation(self)", "qualified_name": "SickPloc2DApplication.coordinate_transformation(self)", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [443, 447], "text": "est_coordinate_transformation(self) -> bool:\n        \"\"\"Test coordinate transformation accuracy.\"\"\"\n        return True  # Simplified for example", "hash": "051a2c79f36b", "chunk_type": "method", "node_type": "function_definition", "signature": "coordinate_transformation(self) -> bo", "docstring": "t coordinate transformation accuracy.\"\"\"", "chunk_size_bytes": 145, "original_size_bytes": 264, "start_byte": 16359, "end_byte": 16623}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:27c0b209cd4d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pick_place(self)", "qualified_name": "SickPloc2DApplication.pick_place(self)", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [449, 456], "text": "est_pick_place(self) -> bool:\n        \"\"\"Test pick and place operation.\"\"\"\n        count = self.app.get_count(self.job_id)\n        if count and count > 0:\n            return self._process_single_part(1)\n        else:\n            self.logger.warning(\"No parts available for pick/place test\")\n            return False", "hash": "27c0b209cd4d", "chunk_type": "method", "node_type": "function_definition", "signature": "pick_place(self) -> bo", "docstring": "t pick and place operation.\"\"\"", "chunk_size_bytes": 315, "original_size_bytes": 321, "start_byte": 16633, "end_byte": 16954}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:f38fbe5572e9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "wn(self)", "qualified_name": "SickPloc2DApplication.wn(self)", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [458, 468], "text": "utdown(self) -> None:\n        \"\"\"Safely shutdown the application.\"\"\"\n        self.logger.info(\"Shutting down application...\")\n        try:\n            self.app.shutdown()\n            self._print_statistics()\n            self.logger.info(\"Application shutdown completed\")\n        except Exception as e:\n            self.logger.error(f\"Shutdown error: {e}\")\ndef", "hash": "f38fbe5572e9", "chunk_type": "method", "node_type": "function_definition", "signature": "wn(self) -> No", "docstring": "ely shutdown the application.\"\"\"", "chunk_size_bytes": 359, "original_size_bytes": 383, "start_byte": 16964, "end_byte": 17347}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py:77f3b8299505", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": ":\n  ", "qualified_name": ":\n  ", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/example_application.py", "loc": [471, 524], "text": "in():\n    \"\"\"Main application entry point.\"\"\"\n    parser = argparse.ArgumentParser(description='SICK PLOC 2D Vision-Guided Pick and Place Application')\n    parser.add_argument('--robot-ip', default='192.168.0.100', \n                       help='IP address of Mecademic robot (default: 192.168.0.100)')\n    parser.add_argument('--vision-ip', default='192.168.0.1',\n                       help='IP address of SICK PLOC 2D system (default: 192.168.0.1)')\n    parser.add_argument('--debug', action='store_true',\n                       help='Enable debug output')\n    parser.add_argument('--calibration', choices=['single', 'three'], default='single',\n                       help='Calibration method (default: single)')\n    parser.add_argument('--mode', choices=['test', 'production', 'continuous'], default='production',\n                       help='Operation mode (default: production)')\n    parser.add_argument('--max-cycles', type=int, default=None,\n                       help='Maximum number of cycles for continuous mode')\n    parser.add_argument('--cycle-delay', type=float, default=1.0,\n                       help='Delay between cycles in seconds (default: 1.0)')\n    args = parser.parse_args()\n    app = SickPloc2DApplication(args.robot_ip, args.vision_ip, args.debug)\n    try:\n        if not app.initialize_systems():\n            print(\"System initialization failed\")\n            return 1\n        calibration_method = \"single_point\" if args.calibration == \"single\" else \"three_point\"\n        if not app.perform_calibration(calibration_method):\n            print(\"Calibration failed\")\n            return 1\n        if args.mode == \"test\":\n            app.run_test_sequence()\n        elif args.mode == \"production\":\n            app.run_production_cycle()\n        elif args.mode == \"continuous\":\n            app.run_continuous_operation(args.max_cycles, args.cycle_delay)\n        return 0\n    except KeyboardInterrupt:\n        print(\"\\nApplication interrupted by user\")\n        return 0\n    except Exception as e:\n        print(f\"Application error: {e}\")\n        return 1\n    finally:\n        app.shutdown()\nif ", "hash": "77f3b8299505", "chunk_type": "function", "node_type": "function_definition", "signature": ":\n    ", "docstring": "n application entry point.\"\"\"\n    p", "chunk_size_bytes": 2114, "original_size_bytes": 2293, "start_byte": 17350, "end_byte": 19643}
