{"chunk_id": "meca_samples:meca500-accessories/flexibowl/python/flexibowl_plugin.py:d11613a5082c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "socket", "qualified_name": "socket", "source_path": "meca500-accessories/flexibowl/python/flexibowl_plugin.py", "loc": [12, 12], "text": "import socket", "hash": "d11613a5082c", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 13, "original_size_bytes": 13, "start_byte": 364, "end_byte": 377}
{"chunk_id": "meca_samples:meca500-accessories/flexibowl/python/flexibowl_plugin.py:e3fe2efec582", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "sleep", "qualified_name": "sleep", "source_path": "meca500-accessories/flexibowl/python/flexibowl_plugin.py", "loc": [13, 13], "text": "from time import sleep", "hash": "e3fe2efec582", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 22, "original_size_bytes": 22, "start_byte": 378, "end_byte": 400}
{"chunk_id": "meca_samples:meca500-accessories/flexibowl/python/flexibowl_plugin.py:83d8e9e427df", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "sys", "qualified_name": "sys", "source_path": "meca500-accessories/flexibowl/python/flexibowl_plugin.py", "loc": [14, 14], "text": "import sys", "hash": "83d8e9e427df", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 10, "original_size_bytes": 10, "start_byte": 401, "end_byte": 411}
{"chunk_id": "meca_samples:meca500-accessories/flexibowl/python/flexibowl_plugin.py:c0c5bc1cb9ba", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "in_allarm", "qualified_name": "in_allarm", "source_path": "meca500-accessories/flexibowl/python/flexibowl_plugin.py", "loc": [17, 64], "text": "def in_allarm(ip):\n    \"\"\"\n    Check if the FlexiBowl device is in alarm state.\n    Args:\n        ip (str): IP address of the FlexiBowl device\n    Returns:\n        bool: True if device is operational (no alarms), False if in alarm state or connection failed\n    \"\"\"\n    assert type(ip) is str\n    TCP_IP = ip\n    TCP_PORT = 7776\n    BUFFER_SIZE = 1024\n    command = \"AL\"\n    MESSAGE = chr(0)+chr(7)+command+chr(13)\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((TCP_IP, TCP_PORT))\n        s.send(MESSAGE.encode())\n        data = s.recv(BUFFER_SIZE)\n        print(\"Message send: \" + MESSAGE)\n        print(\"Message recive: \" + str(data))\n        sleep(0.1)  # Brief delay for message processing\n    except :\n        print(\"Not Connected1\")\n        s.close()\n        return False\n    my_hexdata = data[5:None]\n    print(my_hexdata)\n    scale = 16  # Hexadecimal base\n    num_of_bits = 16\n    binary_string = bin(int(my_hexdata, scale))[2:].zfill(num_of_bits)\n    print(binary_string)\n    error_decimal = int(binary_string, 2)\n    if(error_decimal > 0):\n        s.close()\n        return False\n    else:\n        s.close()\n        return True", "hash": "c0c5bc1cb9ba", "chunk_type": "function", "node_type": "function_definition", "signature": "in_allarm(ip)", "docstring": "Check if the FlexiBowl device is in alarm state.\n    \n    Args:\n        ip (str): IP address of the FlexiBowl device\n        \n    Returns:\n        bool: True if device is operational (no alarms), False if in alarm state or connection failed", "chunk_size_bytes": 1176, "original_size_bytes": 1492, "start_byte": 414, "end_byte": 1906}
{"chunk_id": "meca_samples:meca500-accessories/flexibowl/python/flexibowl_plugin.py:c102585f31d2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "move_flb1", "qualified_name": "move_flb1", "source_path": "meca500-accessories/flexibowl/python/flexibowl_plugin.py", "loc": [66, 167], "text": "def move_flb1(ip, command):\n    \"\"\"\n    Send movement commands to the FlexiBowl device.\n    Args:\n        ip (str): IP address of the FlexiBowl device\n        command (str): Command to execute. Valid commands:\n            - \"MOVE\": Basic movement\n            - \"MOVE FLIP\": Move with flip action\n            - \"MOVE BLOW FLIP\": Move with blow and flip\n            - \"MOVE BLOW\": Move with blow action\n            - \"SHAKE\": Shake the bowl\n            - \"LIGHT ON\": Turn on illumination\n            - \"LIGHT OFF\": Turn off illumination\n            - \"FLIP\": Flip action only\n            - \"BLOW\": Blow action only\n            - \"QUICK EMPTY OPTION\": Quick empty sequence\n    Returns:\n        bool: True if command executed successfully, False otherwise\n    \"\"\"\n    assert type(command) is str\n    assert type(ip) is str\n    TCP_IP = ip\n    TCP_PORT = 7776\n    BUFFER_SIZE = 1024\n    if(command==\"MOVE\"):\n        command=\"QX2\"\n    elif (command==\"MOVE FLIP\"):\n        command=\"QX3\"\n    elif (command==\"MOVE BLOW FLIP\"):\n        command=\"QX4\"\n    elif (command==\"MOVE BLOW\"):\n        command=\"QX5\"\n    elif (command==\"SHAKE\"):\n        command=\"QX6\"\n    elif (command==\"LIGHT ON\"):\n        command=\"QX7\"\n    elif (command==\"LIGHT OFF\"):\n        command=\"QX8\"\n    elif (command==\"FLIP\"):\n        command=\"QX10\"\n    elif (command==\"BLOW\"):\n        command=\"QX9\"\n    elif (command==\"QUICK EMPTY OPTION\"):\n        command=\"QX11\"\n    else:\n        command=\"QX60\"  # Invalid command - will cause device to reject\n    MESSAGE = chr(0)+chr(7)+command+chr(13)\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n    try:\n        s.connect((TCP_IP, TCP_PORT))\n        s.send(MESSAGE.encode())\n        data = s.recv(BUFFER_SIZE)\n        print(\"Message send: \" + MESSAGE)\n        print(\"Message recive: \" + str(data))\n        sleep(0.1)  # Brief delay for message processing\n        if(b\"%\" in data):\n            print(\"Command accepted, waiting for completion...\")\n            moving = 1\n            while True:\n                if(command==\"QX11\") or (command==\"QX10\") or (command==\"QX4\") or (command==\"QX3\"):\n                    print(\"Checking device busy status...\")\n                    sleep(0.1)\n                    MESSAGE = chr(0)+chr(7)+\"IO\"+chr(13)  # IO status query\n                    s.send(MESSAGE.encode())\n                    data = s.recv(BUFFER_SIZE)\n                    print(data)\n                    moving = data[12:-1]  # Extract busy status from response\n                    print(moving)\n                    if int(moving) == 1:  # Device reports not busy (operation complete)\n                        sleep(0.1)\n                        break\n                else:\n                    MESSAGE = chr(0)+chr(7)+\"SC\"+chr(13)  # Status check query\n                    s.send(MESSAGE.encode())\n                    data = s.recv(BUFFER_SIZE)\n                    moving = data[7:-2]  # Extract status from response\n                    if int(moving) == 0:  # Operation completed\n                        sleep(0.1)\n                        break\n                sleep(0.1)  # Polling interval for status checks\n            s.close()\n            return True\n        else:\n            s.close()\n            return False\n    except :\n        print(\"Not Connected2\")\n        s.close()\n        return False", "hash": "c102585f31d2", "chunk_type": "function", "node_type": "function_definition", "signature": "move_flb1(ip, command)", "docstring": "Send movement commands to the FlexiBowl device.\n    \n    Args:\n        ip (str): IP address of the FlexiBowl device\n        command (str): Command to execute. Valid commands:\n            - \"MOVE\": Basic movement\n            - \"MOVE FLIP\": Move with flip action\n            - \"MOVE BLOW FLIP\": Move with blow and flip\n            - \"MOVE BLOW\": Move with blow action\n            - \"SHAKE\": Shake the bowl\n            - \"LIGHT ON\": Turn on illumination\n            - \"LIGHT OFF\": Turn off illumination\n            - \"FLIP\": Flip action only\n            - \"BLOW\": Blow action only\n            - \"QUICK EMPTY OPTION\": Quick empty sequence\n            \n    Returns:\n        bool: True if command executed successfully, False otherwise", "chunk_size_bytes": 3327, "original_size_bytes": 3836, "start_byte": 1908, "end_byte": 5744}
