{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:d42248803e60", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [1, 2], "text": "#include <stdio.h>", "hash": "d42248803e60", "chunk_type": "other", "node_type": "preproc_include", "signature": null, "docstring": null, "chunk_size_bytes": 18, "original_size_bytes": 19, "start_byte": 0, "end_byte": 19}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:8cfc3009fef9", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [2, 3], "text": "#include <stdlib.h>", "hash": "8cfc3009fef9", "chunk_type": "other", "node_type": "preproc_include", "signature": null, "docstring": null, "chunk_size_bytes": 19, "original_size_bytes": 20, "start_byte": 19, "end_byte": 39}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:48c76989895e", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [3, 4], "text": "#include \"socket_comm.h\"", "hash": "48c76989895e", "chunk_type": "other", "node_type": "preproc_include", "signature": null, "docstring": null, "chunk_size_bytes": 24, "original_size_bytes": 25, "start_byte": 39, "end_byte": 64}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:8ad4fe2d1df8", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [8, 8], "text": "static int socket_system_user_count = 0;", "hash": "8ad4fe2d1df8", "chunk_type": "other", "node_type": "declaration", "signature": null, "docstring": null, "chunk_size_bytes": 40, "original_size_bytes": 40, "start_byte": 135, "end_byte": 175}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:612b9aa20769", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "unknown", "qualified_name": "unknown", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [10, 10], "text": "static WSADATA wsaData;", "hash": "612b9aa20769", "chunk_type": "other", "node_type": "declaration", "signature": null, "docstring": null, "chunk_size_bytes": 23, "original_size_bytes": 23, "start_byte": 219, "end_byte": 242}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:5672ac5e4d25", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "init_socket_system", "qualified_name": "init_socket_system", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [16, 31], "text": "int init_socket_system()\n{\n    if (socket_system_user_count == 0)\n    {\n        printf(\"Init WSA\\r\\n\");\n        int result = WSAStartup(MAKEWORD(2, 2), &wsaData);\n        if (result != 0)\n        {\n            printf(\"WSAStartup failed with error: %d\\r\\n\", result);\n            cleanup_socket_system();\n            return -1;\n        }\n    }\n    socket_system_user_count++;\n    return 0;\n}", "hash": "5672ac5e4d25", "chunk_type": "function", "node_type": "function_definition", "signature": "unknown", "docstring": null, "chunk_size_bytes": 389, "original_size_bytes": 389, "start_byte": 447, "end_byte": 836}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:e23763546155", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "cleanup_socket_system", "qualified_name": "cleanup_socket_system", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [34, 42], "text": "void cleanup_socket_system()\n{\n    socket_system_user_count--;\n    if (socket_system_user_count == 0)\n    {\n        printf(\"Closing WSA\\r\\n\");\n        WSACleanup();\n    }\n}", "hash": "e23763546155", "chunk_type": "function", "node_type": "function_definition", "signature": "unknown", "docstring": null, "chunk_size_bytes": 172, "original_size_bytes": 172, "start_byte": 890, "end_byte": 1062}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:e73c8a3b3416", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "tcpip_connect", "qualified_name": "tcpip_connect", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [46, 97], "text": "int tcpip_connect(const char *address, const char *port, tcpip_connection *connection)\n{\n    int result = 0;\n    result = init_socket_system();\n    if (result != 0)\n    {\n        return -1;\n    }\n    struct addrinfo hints, *addr_result;\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    result = getaddrinfo(address, port, &hints, &addr_result);\n    if (result != 0)\n    {\n        printf(\"getaddrinfo failed with error: %d\\r\\n\", result);\n        cleanup_socket_system();\n        return -1;\n    }\n    connection->socket_ = socket(addr_result->ai_family,\n                                 addr_result->ai_socktype,\n                                 addr_result->ai_protocol);\n    if (connection->socket_ == INVALID_SOCKET)\n    {\n        printf(\"socket failed with error: %ld\\r\\n\", WSAGetLastError());\n        cleanup_socket_system();\n        return -1;\n    }\n    result = connect(connection->socket_,\n                     addr_result->ai_addr,\n                     (int)addr_result->ai_addrlen);\n    if (result == SOCKET_ERROR)\n    {\n        closesocket(connection->socket_);\n        cleanup_socket_system();\n        connection->socket_ = INVALID_SOCKET;\n        return -1;\n    }\n    freeaddrinfo(addr_result);\n    return 0;\n}", "hash": "e73c8a3b3416", "chunk_type": "function", "node_type": "function_definition", "signature": "unknown", "docstring": null, "chunk_size_bytes": 1322, "original_size_bytes": 1490, "start_byte": 1147, "end_byte": 2637}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:6d889a8ef3f2", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "tcpip_disconnect", "qualified_name": "tcpip_disconnect", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [101, 109], "text": "void tcpip_disconnect(tcpip_connection *connection)\n{\n    if (socket_system_user_count == 0)\n    {\n        return;\n    }\n    closesocket(connection->socket_);\n    cleanup_socket_system();\n}", "hash": "6d889a8ef3f2", "chunk_type": "function", "node_type": "function_definition", "signature": "unknown", "docstring": null, "chunk_size_bytes": 189, "original_size_bytes": 189, "start_byte": 2722, "end_byte": 2911}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:ff94227130d9", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "tcpip_send", "qualified_name": "tcpip_send", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [113, 138], "text": "int tcpip_send(const char *buffer, int len, tcpip_connection *connection)\n{\n    EXIT_ON_SYSTEM_NOT_INITED();\n#ifdef DEBUG\n    printf(\"Sending: %s\\r\\n\", buffer);\n#endif\n    int send_result = send(connection->socket_, buffer, len, 0);\n    if (send_result == SOCKET_ERROR)\n    {\n        printf(\"send failed with error: %d\\r\\n\", WSAGetLastError());\n        closesocket(connection->socket_);\n        cleanup_socket_system();\n        return -1;\n    }\n    if (send_result != len)\n    {\n        return send_result;\n    }\n    return 0;\n}", "hash": "ff94227130d9", "chunk_type": "function", "node_type": "function_definition", "signature": "unknown", "docstring": null, "chunk_size_bytes": 528, "original_size_bytes": 661, "start_byte": 2996, "end_byte": 3657}
{"chunk_id": "meca_samples:sample-programs/C/basic-tcp-communication/socket_comm.c:16c7ac2d7f27", "repo": "meca_samples", "commit": "806f144", "lang": "c", "symbol": "tcpip_receive", "qualified_name": "tcpip_receive", "source_path": "sample-programs/C/basic-tcp-communication/socket_comm.c", "loc": [142, 165], "text": "int tcpip_receive(char *buffer, int len, tcpip_connection *connection)\n{\n    EXIT_ON_SYSTEM_NOT_INITED();\n    int recv_result = recv(connection->socket_, buffer, len, 0);\n    if (recv_result == 0) // Closing connection case\n    {\n        printf(\"Connection closed\\r\\n\");\n        closesocket(connection->socket_);\n        cleanup_socket_system();\n        return 0;\n    }\n    else if (recv_result < 0) // Error case\n    {\n        printf(\"recv failed with error: %d\\r\\n\", WSAGetLastError());\n        return -1;\n    }\n#ifdef DEBUG\n    printf(\"Receiving: %s\\r\\n\", buffer);\n#endif\n    return recv_result;\n}", "hash": "16c7ac2d7f27", "chunk_type": "function", "node_type": "function_definition", "signature": "unknown", "docstring": null, "chunk_size_bytes": 600, "original_size_bytes": 647, "start_byte": 3742, "end_byte": 4389}
