{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [12, 12], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 367, "end_byte": 378}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:bcab709e15be", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "numpy as np", "qualified_name": "numpy as np", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [13, 13], "text": "import numpy as np", "hash": "bcab709e15be", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 18, "original_size_bytes": 18, "start_byte": 379, "end_byte": 397}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:530efc5158fe", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "List", "qualified_name": "List", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [14, 14], "text": "from typing import List, Tuple, Optional, Dict, Any", "hash": "530efc5158fe", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 398, "end_byte": 449}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:f678863b31fe", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "VisionController", "qualified_name": "VisionController", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [15, 15], "text": "from vision_controller import VisionController", "hash": "f678863b31fe", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 46, "original_size_bytes": 46, "start_byte": 450, "end_byte": 496}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:12989b56f9f8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "VisionGuidedPick", "qualified_name": "VisionGuidedPick", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [25, 559], "text": "class VisionGuidedPick:\n    \"\"\"\n    High-level integration class combining SICK PLOC 2D vision system with Mecademic robot control.\n    This class provides methods for vision-guided pick and place operations, including calibration,\n    coordinate transformation, and automated workflow execution.\n    Attributes:\n        robot_ip (str): IP address of Mecademic robot\n        vision_ip (str): IP address of SICK PLOC 2D system\n        robot: Mecademic robot instance\n        vision (VisionController): Vision system controller\n        vision_ref_frame (np.ndarray): Vision reference frame transformation matrix\n        pick_offset (float): Z-axis offset for pick operations (mm)\n        place_offset (float): Z-axis offset for place operations (mm)\n        speed (float): Robot movement speed percentage\n        debug (bool): Enable debug output\n    \"\"\"", "hash": "12989b56f9f8", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "High-level integration class combining SICK PLOC 2D vision system with Mecademic robot control.\n    \n    This class provides methods for vision-guided pick and place operations, including calibration,\n    coordinate transformation, and automated workflow execution.\n    \n    Attributes:\n        robot_ip (str): IP address of Mecademic robot\n        vision_ip (str): IP address of SICK PLOC 2D system\n        robot: Mecademic robot instance\n        vision (VisionController): Vision system controller\n        vision_ref_frame (np.ndarray): Vision reference frame transformation matrix\n        pick_offset (float): Z-axis offset for pick operations (mm)\n        place_offset (float): Z-axis offset for place operations (mm)\n        speed (float): Robot movement speed percentage\n        debug (bool): Enable debug output", "chunk_size_bytes": 852, "original_size_bytes": 862, "start_byte": 697, "end_byte": 20545}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:c923d26a4865", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "VisionGuidedPick.__init__", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [44, 73], "text": "def __init__(self, robot_ip: str, vision_ip: str, debug: bool = False):\n        \"\"\"\n        Initialize VisionGuidedPick integration system.\n        Args:\n            robot_ip (str): IP address of Mecademic robot\n            vision_ip (str): IP address of SICK PLOC 2D vision system\n            debug (bool): Enable debug output for troubleshooting\n        \"\"\"\n        self.robot_ip = robot_ip\n        self.vision_ip = vision_ip\n        self.debug = debug\n        self.robot = None\n        self.vision = VisionController(vision_ip, debug=debug)\n        self.vision_ref_frame = np.eye(4)  # 4x4 identity matrix\n        self.pick_offset = 5.0  # Default 5mm pick offset\n        self.place_offset = 10.0  # Default 10mm place offset\n        self.speed = 25.0  # Default 25% speed\n        self.robot_initialized = False\n        self.vision_initialized = False\n        self.calibrated = False\n        if self.debug:\n            print(f\"VisionGuidedPick initialized - Robot: {robot_ip}, Vision: {vision_ip}\")", "hash": "c923d26a4865", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, robot_ip: str, vision_ip: str, debug: bool = False)", "docstring": "Initialize VisionGuidedPick integration system.\n        \n        Args:\n            robot_ip (str): IP address of Mecademic robot\n            vision_ip (str): IP address of SICK PLOC 2D vision system\n            debug (bool): Enable debug output for troubleshooting", "chunk_size_bytes": 1001, "original_size_bytes": 1148, "start_byte": 1569, "end_byte": 2717}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:66c8045c4888", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "init_robot", "qualified_name": "VisionGuidedPick.init_robot", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [75, 123], "text": "def init_robot(self) -> bool:\n        \"\"\"\n        Initialize connection to Mecademic robot.\n        Returns:\n            bool: True if robot initialization successful, False otherwise\n        \"\"\"\n        if not MECADEMIC_AVAILABLE:\n            print(\"Error: Mecademic package not available\")\n            return False\n        try:\n            self.robot = mecademic.Robot()\n            self.robot.Connect(address=self.robot_ip)\n            timeout = 10.0\n            start_time = time.time()\n            while not self.robot.GetStatusRobot().Connected and (time.time() - start_time) < timeout:\n                time.sleep(0.1)\n            if not self.robot.GetStatusRobot().Connected:\n                if self.debug:\n                    print(f\"Failed to connect to robot at {self.robot_ip}\")\n                return False\n            self.robot.ActivateRobot()\n            self.robot.Home()\n            self.robot.WaitHomed()\n            self.robot.SetCartLinVel(self.speed)\n            self.robot.SetCartAngVel(self.speed)\n            self.robot_initialized = True\n            if self.debug:\n                print(\"Robot initialized and homed successfully\")\n            return True\n        except Exception as e:\n            if self.debug:\n                print(f\"Robot initialization error: {e}\")\n            return False", "hash": "66c8045c4888", "chunk_type": "method", "node_type": "function_definition", "signature": "init_robot(self)", "docstring": "Initialize connection to Mecademic robot.\n        \n        Returns:\n            bool: True if robot initialization successful, False otherwise", "chunk_size_bytes": 1320, "original_size_bytes": 1643, "start_byte": 2727, "end_byte": 4370}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:b223e6824e11", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "init_vision", "qualified_name": "VisionGuidedPick.init_vision", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [125, 152], "text": "def init_vision(self) -> bool:\n        \"\"\"\n        Initialize connection to SICK PLOC 2D vision system.\n        Returns:\n            bool: True if vision system initialization successful, False otherwise\n        \"\"\"\n        try:\n            success = self.vision.connect()\n            if success:\n                status = self.vision.get_system_status()\n                if status['connected']:\n                    self.vision_initialized = True\n                    if self.debug:\n                        print(\"Vision system initialized successfully\")\n                    return True\n            if self.debug:\n                print(\"Failed to initialize vision system\")\n            return False\n        except Exception as e:\n            if self.debug:\n                print(f\"Vision initialization error: {e}\")\n            return False", "hash": "b223e6824e11", "chunk_type": "method", "node_type": "function_definition", "signature": "init_vision(self)", "docstring": "Initialize connection to SICK PLOC 2D vision system.\n        \n        Returns:\n            bool: True if vision system initialization successful, False otherwise", "chunk_size_bytes": 837, "original_size_bytes": 945, "start_byte": 4380, "end_byte": 5325}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:6005849b3c13", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_vision_ref", "qualified_name": "VisionGuidedPick.set_vision_ref", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [154, 178], "text": "def set_vision_ref(self, x: float, y: float, z: float, rx: float, ry: float, rz: float) -> None:\n        \"\"\"\n        Set vision reference frame coordinates (calibration point).\n        This method establishes the transformation between vision coordinates and robot coordinates\n        using a reference point that is visible to both systems.\n        Args:\n            x, y, z (float): Robot coordinates of reference point (mm)\n            rx, ry, rz (float): Robot orientation of reference point (degrees)\n        \"\"\"\n        self.vision_ref_x = x\n        self.vision_ref_y = y\n        self.vision_ref_z = z\n        self.vision_ref_rx = rx\n        self.vision_ref_ry = ry\n        self.vision_ref_rz = rz\n        self.vision_ref_frame = self._create_transform_matrix(x, y, z, rx, ry, rz)\n        self.calibrated = True\n        if self.debug:\n            print(f\"Vision reference frame set: ({x:.2f}, {y:.2f}, {z:.2f}, {rx:.2f}, {ry:.2f}, {rz:.2f})\")", "hash": "6005849b3c13", "chunk_type": "method", "node_type": "function_definition", "signature": "set_vision_ref(self, x: float, y: float, z: float, rx: float, ry: float, rz: float)", "docstring": "Set vision reference frame coordinates (calibration point).\n        \n        This method establishes the transformation between vision coordinates and robot coordinates\n        using a reference point that is visible to both systems.\n        \n        Args:\n            x, y, z (float): Robot coordinates of reference point (mm)\n            rx, ry, rz (float): Robot orientation of reference point (degrees)", "chunk_size_bytes": 948, "original_size_bytes": 1125, "start_byte": 5335, "end_byte": 6460}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:edfa7cfad5a1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "calibrate_3_point", "qualified_name": "VisionGuidedPick.calibrate_3_point", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [180, 232], "text": "def calibrate_3_point(self, robot_points: List[Tuple[float, float, float]], \n                         vision_points: List[Tuple[float, float]]) -> bool:\n        \"\"\"\n        Perform 3-point calibration to establish vision-to-robot coordinate transformation.\n        Args:\n            robot_points (List[Tuple[float, float, float]]): Three robot coordinates (x, y, z)\n            vision_points (List[Tuple[float, float]]): Corresponding vision coordinates (x, y)\n        Returns:\n            bool: True if calibration successful, False otherwise\n        \"\"\"\n        if len(robot_points) != 3 or len(vision_points) != 3:\n            if self.debug:\n                print(\"Error: Exactly 3 points required for calibration\")\n            return False\n        try:\n            robot_pts = np.array(robot_points)\n            vision_pts = np.array(vision_points)\n            vision_homo = np.column_stack([vision_pts, np.ones(3)])\n            transform_x = np.linalg.lstsq(vision_homo, robot_pts[:, 0], rcond=None)[0]\n            transform_y = np.linalg.lstsq(vision_homo, robot_pts[:, 1], rcond=None)[0]\n            self.vision_to_robot_transform = np.array([\n                [transform_x[0], transform_x[1], transform_x[2]],\n                [transform_y[0], transform_y[1], transform_y[2]]\n            ])\n            self.average_z = np.mean(robot_pts[:, 2])\n            self.calibrated = True\n            if self.debug:\n                print(\"3-point calibration completed successfully\")\n                print(f\"Transformation matrix:\\n{self.vision_to_robot_transform}\")\n            return True\n        except Exception as e:\n            if self.debug:\n                print(f\"Calibration error: {e}\")\n            return False", "hash": "edfa7cfad5a1", "chunk_type": "method", "node_type": "function_definition", "signature": "calibrate_3_point(self, robot_points: List[Tuple[float, float, float]], \n                         vision_points: List[Tuple[float, float]])", "docstring": "Perform 3-point calibration to establish vision-to-robot coordinate transformation.\n        \n        Args:\n            robot_points (List[Tuple[float, float, float]]): Three robot coordinates (x, y, z)\n            vision_points (List[Tuple[float, float]]): Corresponding vision coordinates (x, y)\n            \n        Returns:\n            bool: True if calibration successful, False otherwise", "chunk_size_bytes": 1719, "original_size_bytes": 2275, "start_byte": 6470, "end_byte": 8745}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:2257e8fa9ead", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_offset", "qualified_name": "VisionGuidedPick.set_offset", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [234, 246], "text": "def set_offset(self, pick_offset: float, place_offset: Optional[float] = None) -> None:\n        \"\"\"\n        Set Z-axis offsets for pick and place operations.\n        Args:\n            pick_offset (float): Pick height offset in mm (positive = above part)\n            place_offset (Optional[float]): Place height offset in mm (uses pick_offset if None)\n        \"\"\"\n        self.pick_offset = pick_offset\n        self.place_offset = place_offset if place_offset is not None else pick_offset\n        if self.debug:\n            print(f\"Offsets set - Pick: {self.pick_offset}mm, Place: {self.place_offset}mm\")", "hash": "2257e8fa9ead", "chunk_type": "method", "node_type": "function_definition", "signature": "set_offset(self, pick_offset: float, place_offset: Optional[float] = None)", "docstring": "Set Z-axis offsets for pick and place operations.\n        \n        Args:\n            pick_offset (float): Pick height offset in mm (positive = above part)\n            place_offset (Optional[float]): Place height offset in mm (uses pick_offset if None)", "chunk_size_bytes": 603, "original_size_bytes": 621, "start_byte": 8755, "end_byte": 9376}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:4fddedb1d59a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_speed", "qualified_name": "VisionGuidedPick.set_speed", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [248, 262], "text": "def set_speed(self, speed: float) -> None:\n        \"\"\"\n        Set robot movement speed.\n        Args:\n            speed (float): Speed percentage (1-100)\n        \"\"\"\n        self.speed = max(1.0, min(100.0, speed))  # Clamp to 1-100%\n        if self.robot_initialized and self.robot:\n            self.robot.SetCartLinVel(self.speed)\n            self.robot.SetCartAngVel(self.speed)\n        if self.debug:\n            print(f\"Speed set to {self.speed}%\")", "hash": "4fddedb1d59a", "chunk_type": "method", "node_type": "function_definition", "signature": "set_speed(self, speed: float)", "docstring": "Set robot movement speed.\n        \n        Args:\n            speed (float): Speed percentage (1-100)", "chunk_size_bytes": 454, "original_size_bytes": 481, "start_byte": 9386, "end_byte": 9867}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:1d44e1254bb4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_count", "qualified_name": "VisionGuidedPick.get_count", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [264, 279], "text": "def get_count(self, job_id: int) -> Optional[int]:\n        \"\"\"\n        Get number of parts detected by vision system.\n        Args:\n            job_id (int): Vision job ID to query\n        Returns:\n            Optional[int]: Number of detected parts, None if query failed\n        \"\"\"\n        if not self.vision_initialized:\n            if self.debug:\n                print(\"Vision system not initialized\")\n            return None\n        return self.vision.get_part_count(job_id)", "hash": "1d44e1254bb4", "chunk_type": "method", "node_type": "function_definition", "signature": "get_count(self, job_id: int)", "docstring": "Get number of parts detected by vision system.\n        \n        Args:\n            job_id (int): Vision job ID to query\n            \n        Returns:\n            Optional[int]: Number of detected parts, None if query failed", "chunk_size_bytes": 479, "original_size_bytes": 510, "start_byte": 9877, "end_byte": 10387}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:8e7d5605c365", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "pick_index", "qualified_name": "VisionGuidedPick.pick_index", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [281, 322], "text": "def pick_index(self, job_id: int, part_index: int) -> bool:\n        \"\"\"\n        Pick part at specified index using vision guidance.\n        Args:\n            job_id (int): Vision job ID\n            part_index (int): Index of part to pick (1-based)\n        Returns:\n            bool: True if pick operation successful, False otherwise\n        \"\"\"\n        if not self._check_system_ready():\n            return False\n        try:\n            part_data = self.vision.locate_by_index(job_id, part_index)\n            if not part_data:\n                if self.debug:\n                    print(f\"Failed to get coordinates for part {part_index}\")\n                return False\n            robot_coords = self._transform_vision_to_robot(part_data['x'], part_data['y'])\n            if not robot_coords:\n                if self.debug:\n                    print(\"Coordinate transformation failed\")\n                return False\n            target_x, target_y, target_z = robot_coords\n            target_rz = part_data.get('rz', 0.0)  # Use vision rotation or default to 0\n            if self.debug:\n                print(f\"Picking part {part_index} at ({target_x:.2f}, {target_y:.2f}, {target_z:.2f}, rz={target_rz:.2f})\")\n            return self._execute_pick(target_x, target_y, target_z, 0, 0, target_rz)\n        except Exception as e:\n            if self.debug:\n                print(f\"Pick operation error: {e}\")\n            return False", "hash": "8e7d5605c365", "chunk_type": "method", "node_type": "function_definition", "signature": "pick_index(self, job_id: int, part_index: int)", "docstring": "Pick part at specified index using vision guidance.\n        \n        Args:\n            job_id (int): Vision job ID\n            part_index (int): Index of part to pick (1-based)\n            \n        Returns:\n            bool: True if pick operation successful, False otherwise", "chunk_size_bytes": 1427, "original_size_bytes": 1677, "start_byte": 10397, "end_byte": 12074}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:cac923046f03", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "place", "qualified_name": "VisionGuidedPick.place", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [324, 350], "text": "def place(self, x: float, y: float, z: float, rx: float, ry: float, rz: float) -> bool:\n        \"\"\"\n        Place part at specified coordinates.\n        Args:\n            x, y, z (float): Target coordinates (mm)\n            rx, ry, rz (float): Target orientation (degrees)\n        Returns:\n            bool: True if place operation successful, False otherwise\n        \"\"\"\n        if not self.robot_initialized:\n            if self.debug:\n                print(\"Robot not initialized\")\n            return False\n        try:\n            if self.debug:\n                print(f\"Placing part at ({x:.2f}, {y:.2f}, {z:.2f}, {rx:.2f}, {ry:.2f}, {rz:.2f})\")\n            return self._execute_place(x, y, z, rx, ry, rz)\n        except Exception as e:\n            if self.debug:\n                print(f\"Place operation error: {e}\")\n            return False", "hash": "cac923046f03", "chunk_type": "method", "node_type": "function_definition", "signature": "place(self, x: float, y: float, z: float, rx: float, ry: float, rz: float)", "docstring": "Place part at specified coordinates.\n        \n        Args:\n            x, y, z (float): Target coordinates (mm)\n            rx, ry, rz (float): Target orientation (degrees)\n            \n        Returns:\n            bool: True if place operation successful, False otherwise", "chunk_size_bytes": 845, "original_size_bytes": 939, "start_byte": 12084, "end_byte": 13023}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:a72ce77c08b7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_check_system_ready", "qualified_name": "VisionGuidedPick._check_system_ready", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [352, 374], "text": "def _check_system_ready(self) -> bool:\n        \"\"\"\n        Check if both robot and vision systems are ready for operation.\n        Returns:\n            bool: True if systems are ready, False otherwise\n        \"\"\"\n        if not self.robot_initialized:\n            if self.debug:\n                print(\"Robot not initialized\")\n            return False\n        if not self.vision_initialized:\n            if self.debug:\n                print(\"Vision system not initialized\")\n            return False\n        if not self.calibrated:\n            if self.debug:\n                print(\"System not calibrated\")\n            return False\n        return True", "hash": "a72ce77c08b7", "chunk_type": "method", "node_type": "function_definition", "signature": "_check_system_ready(self)", "docstring": "Check if both robot and vision systems are ready for operation.\n        \n        Returns:\n            bool: True if systems are ready, False otherwise", "chunk_size_bytes": 648, "original_size_bytes": 684, "start_byte": 13033, "end_byte": 13717}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:99d6a17216d2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_transform_vision_to_robot", "qualified_name": "VisionGuidedPick._transform_vision_to_robot", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [376, 406], "text": "def _transform_vision_to_robot(self, vision_x: float, vision_y: float) -> Optional[Tuple[float, float, float]]:\n        \"\"\"\n        Transform vision coordinates to robot coordinates.\n        Args:\n            vision_x, vision_y (float): Vision system coordinates\n        Returns:\n            Optional[Tuple[float, float, float]]: Robot coordinates (x, y, z), None if failed\n        \"\"\"\n        try:\n            if hasattr(self, 'vision_to_robot_transform'):\n                vision_homo = np.array([vision_x, vision_y, 1.0])\n                robot_x = np.dot(self.vision_to_robot_transform[0], vision_homo)\n                robot_y = np.dot(self.vision_to_robot_transform[1], vision_homo)\n                robot_z = self.average_z\n            else:\n                robot_x = self.vision_ref_x + (vision_x * 0.1)  # Scale factor example\n                robot_y = self.vision_ref_y + (vision_y * 0.1)\n                robot_z = self.vision_ref_z\n            return (robot_x, robot_y, robot_z)\n        except Exception as e:\n            if self.debug:\n                print(f\"Coordinate transformation error: {e}\")\n            return None", "hash": "99d6a17216d2", "chunk_type": "method", "node_type": "function_definition", "signature": "_transform_vision_to_robot(self, vision_x: float, vision_y: float)", "docstring": "Transform vision coordinates to robot coordinates.\n        \n        Args:\n            vision_x, vision_y (float): Vision system coordinates\n            \n        Returns:\n            Optional[Tuple[float, float, float]]: Robot coordinates (x, y, z), None if failed", "chunk_size_bytes": 1130, "original_size_bytes": 1433, "start_byte": 13727, "end_byte": 15160}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:f14cee26268f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_execute_pick", "qualified_name": "VisionGuidedPick._execute_pick", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [408, 449], "text": "def _execute_pick(self, x: float, y: float, z: float, rx: float, ry: float, rz: float) -> bool:\n        \"\"\"\n        Execute pick sequence at specified coordinates.\n        Args:\n            x, y, z (float): Target coordinates (mm)\n            rx, ry, rz (float): Target orientation (degrees)\n        Returns:\n            bool: True if pick successful, False otherwise\n        \"\"\"\n        try:\n            approach_z = z + self.pick_offset\n            self.robot.MoveCartPoint(x, y, approach_z, rx, ry, rz)\n            self.robot.WaitMovementCompletion()\n            self.robot.MoveCartPoint(x, y, z, rx, ry, rz)\n            self.robot.WaitMovementCompletion()\n            if self.debug:\n                print(\"Gripper activated (placeholder)\")\n            time.sleep(0.5)\n            self.robot.MoveCartPoint(x, y, approach_z, rx, ry, rz)\n            self.robot.WaitMovementCompletion()\n            if self.debug:\n                print(\"Pick sequence completed\")\n            return True\n        except Exception as e:\n            if self.debug:\n                print(f\"Pick execution error: {e}\")\n            return False", "hash": "f14cee26268f", "chunk_type": "method", "node_type": "function_definition", "signature": "_execute_pick(self, x: float, y: float, z: float, rx: float, ry: float, rz: float)", "docstring": "Execute pick sequence at specified coordinates.\n        \n        Args:\n            x, y, z (float): Target coordinates (mm)\n            rx, ry, rz (float): Target orientation (degrees)\n            \n        Returns:\n            bool: True if pick successful, False otherwise", "chunk_size_bytes": 1121, "original_size_bytes": 1592, "start_byte": 15170, "end_byte": 16762}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:62ecf2367b67", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_execute_place", "qualified_name": "VisionGuidedPick._execute_place", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [451, 492], "text": "def _execute_place(self, x: float, y: float, z: float, rx: float, ry: float, rz: float) -> bool:\n        \"\"\"\n        Execute place sequence at specified coordinates.\n        Args:\n            x, y, z (float): Target coordinates (mm)\n            rx, ry, rz (float): Target orientation (degrees)\n        Returns:\n            bool: True if place successful, False otherwise\n        \"\"\"\n        try:\n            approach_z = z + self.place_offset\n            self.robot.MoveCartPoint(x, y, approach_z, rx, ry, rz)\n            self.robot.WaitMovementCompletion()\n            self.robot.MoveCartPoint(x, y, z, rx, ry, rz)\n            self.robot.WaitMovementCompletion()\n            if self.debug:\n                print(\"Gripper deactivated (placeholder)\")\n            time.sleep(0.5)\n            self.robot.MoveCartPoint(x, y, approach_z, rx, ry, rz)\n            self.robot.WaitMovementCompletion()\n            if self.debug:\n                print(\"Place sequence completed\")\n            return True\n        except Exception as e:\n            if self.debug:\n                print(f\"Place execution error: {e}\")\n            return False", "hash": "62ecf2367b67", "chunk_type": "method", "node_type": "function_definition", "signature": "_execute_place(self, x: float, y: float, z: float, rx: float, ry: float, rz: float)", "docstring": "Execute place sequence at specified coordinates.\n        \n        Args:\n            x, y, z (float): Target coordinates (mm)\n            rx, ry, rz (float): Target orientation (degrees)\n            \n        Returns:\n            bool: True if place successful, False otherwise", "chunk_size_bytes": 1129, "original_size_bytes": 1607, "start_byte": 16772, "end_byte": 18379}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:693eb26d7771", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_create_transform_matrix", "qualified_name": "VisionGuidedPick._create_transform_matrix", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [494, 531], "text": "def _create_transform_matrix(self, x: float, y: float, z: float, rx: float, ry: float, rz: float) -> np.ndarray:\n        \"\"\"\n        Create 4x4 transformation matrix from position and orientation.\n        Args:\n            x, y, z (float): Position coordinates\n            rx, ry, rz (float): Rotation angles in degrees\n        Returns:\n            np.ndarray: 4x4 transformation matrix\n        \"\"\"\n        rx_rad = np.radians(rx)\n        ry_rad = np.radians(ry)\n        rz_rad = np.radians(rz)\n        Rx = np.array([[1, 0, 0],\n                       [0, np.cos(rx_rad), -np.sin(rx_rad)],\n                       [0, np.sin(rx_rad), np.cos(rx_rad)]])\n        Ry = np.array([[np.cos(ry_rad), 0, np.sin(ry_rad)],\n                       [0, 1, 0],\n                       [-np.sin(ry_rad), 0, np.cos(ry_rad)]])\n        Rz = np.array([[np.cos(rz_rad), -np.sin(rz_rad), 0],\n                       [np.sin(rz_rad), np.cos(rz_rad), 0],\n                       [0, 0, 1]])\n        R = Rz @ Ry @ Rx\n        T = np.eye(4)\n        T[0:3, 0:3] = R\n        T[0:3, 3] = [x, y, z]\n        return T", "hash": "693eb26d7771", "chunk_type": "method", "node_type": "function_definition", "signature": "_create_transform_matrix(self, x: float, y: float, z: float, rx: float, ry: float, rz: float)", "docstring": "Create 4x4 transformation matrix from position and orientation.\n        \n        Args:\n            x, y, z (float): Position coordinates\n            rx, ry, rz (float): Rotation angles in degrees\n            \n        Returns:\n            np.ndarray: 4x4 transformation matrix", "chunk_size_bytes": 1080, "original_size_bytes": 1305, "start_byte": 18389, "end_byte": 19694}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:0b5c5c4670fc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "shutdown", "qualified_name": "VisionGuidedPick.shutdown", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [533, 551], "text": "def shutdown(self) -> None:\n        \"\"\"\n        Safely shutdown robot and vision systems.\n        \"\"\"\n        try:\n            if self.robot_initialized and self.robot:\n                self.robot.DeactivateRobot()\n                self.robot.Disconnect()\n                if self.debug:\n                    print(\"Robot disconnected\")\n            if self.vision_initialized:\n                self.vision.disconnect()\n                if self.debug:\n                    print(\"Vision system disconnected\")\n        except Exception as e:\n            if self.debug:\n                print(f\"Shutdown error: {e}\")", "hash": "0b5c5c4670fc", "chunk_type": "method", "node_type": "function_definition", "signature": "shutdown(self)", "docstring": "Safely shutdown robot and vision systems.", "chunk_size_bytes": 604, "original_size_bytes": 638, "start_byte": 19704, "end_byte": 20342}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:1e2d08806a38", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__enter__", "qualified_name": "VisionGuidedPick.__enter__", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [553, 555], "text": "def __enter__(self):\n        \"\"\"Context manager entry.\"\"\"\n        return self", "hash": "1e2d08806a38", "chunk_type": "method", "node_type": "function_definition", "signature": "__enter__(self)", "docstring": "Context manager entry.", "chunk_size_bytes": 77, "original_size_bytes": 77, "start_byte": 20352, "end_byte": 20429}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:bee5a1139e54", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__exit__", "qualified_name": "VisionGuidedPick.__exit__", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [557, 559], "text": "def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Context manager exit.\"\"\"\n        self.shutdown()", "hash": "bee5a1139e54", "chunk_type": "method", "node_type": "function_definition", "signature": "__exit__(self, exc_type, exc_val, exc_tb)", "docstring": "Context manager exit.", "chunk_size_bytes": 106, "original_size_bytes": 106, "start_byte": 20439, "end_byte": 20545}
{"chunk_id": "meca_samples:meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py:202ca8d520f0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "example_pick_and_place", "qualified_name": "example_pick_and_place", "source_path": "meca500-accessories/vision-systems/sick-ploc-2d/python/vision_guided_pick.py", "loc": [563, 612], "text": "def example_pick_and_place():\n    \"\"\"\n    Example demonstrating vision-guided pick and place workflow.\n    \"\"\"\n    robot_ip = \"192.168.0.100\"\n    vision_ip = \"192.168.0.1\"\n    print(\"Starting vision-guided pick and place example\")\n    with VisionGuidedPick(robot_ip, vision_ip, debug=True) as app:\n        if not app.init_robot():\n            print(\"Failed to initialize robot\")\n            return\n        if not app.init_vision():\n            print(\"Failed to initialize vision system\")\n            return\n        app.set_vision_ref(100, 50, 25, 0, 0, 0)\n        app.set_offset(5.0)  # 5mm pick offset\n        app.set_speed(25.0)  # 25% speed\n        job_id = 1\n        count = app.get_count(job_id)\n        if count and count > 0:\n            print(f\"Found {count} parts to process\")\n            for i in range(1, count + 1):\n                print(f\"Processing part {i}/{count}\")\n                if app.pick_index(job_id, i):\n                    target_coords = (-120, 100, 0, 180, 0, 180)\n                    if app.place(*target_coords):\n                        print(f\"Part {i} completed successfully\")\n                    else:\n                        print(f\"Failed to place part {i}\")\n                else:\n                    print(f\"Failed to pick part {i}\")\n        else:\n            print(\"No parts detected\")\n    print(\"Example completed\")", "hash": "202ca8d520f0", "chunk_type": "function", "node_type": "function_definition", "signature": "example_pick_and_place()", "docstring": "Example demonstrating vision-guided pick and place workflow.", "chunk_size_bytes": 1352, "original_size_bytes": 1682, "start_byte": 20573, "end_byte": 22255}
