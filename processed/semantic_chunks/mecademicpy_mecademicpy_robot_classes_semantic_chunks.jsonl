{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f2f4a1237dbd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "json", "qualified_name": "json", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [9, 9], "text": "import json", "hash": "f2f4a1237dbd", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 444, "end_byte": 455}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:c307405b3f5d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "re", "qualified_name": "re", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [10, 10], "text": "import re", "hash": "c307405b3f5d", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 9, "original_size_bytes": 9, "start_byte": 456, "end_byte": 465}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:818111220442", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "threading", "qualified_name": "threading", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [11, 11], "text": "import threading", "hash": "818111220442", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 16, "original_size_bytes": 16, "start_byte": 466, "end_byte": 482}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e6125c442fc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "time", "qualified_name": "time", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [12, 12], "text": "import time", "hash": "e6125c442fc3", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 11, "original_size_bytes": 11, "start_byte": 483, "end_byte": 494}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:36e534a3ad48", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Callable", "qualified_name": "Callable", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [13, 13], "text": "from typing import Callable, Optional, Union", "hash": "36e534a3ad48", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 44, "original_size_bytes": 44, "start_byte": 495, "end_byte": 539}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:6c3ff3d6ecd9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "mecademicpy.tools as tools", "qualified_name": "mecademicpy.tools as tools", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [15, 15], "text": "import mecademicpy.tools as tools", "hash": "6c3ff3d6ecd9", "chunk_type": "import", "node_type": "import_statement", "signature": null, "docstring": null, "chunk_size_bytes": 33, "original_size_bytes": 33, "start_byte": 541, "end_byte": 574}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f6466ac7b775", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "unknown", "qualified_name": "unknown", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [18, 18], "text": "from .mx_robot_def import *", "hash": "f6466ac7b775", "chunk_type": "import", "node_type": "import_from_statement", "signature": null, "docstring": null, "chunk_size_bytes": 27, "original_size_bytes": 27, "start_byte": 633, "end_byte": 660}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:5b9494ed61a0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RtDataUpdateType", "qualified_name": "RtDataUpdateType", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [30, 34], "text": "class RtDataUpdateType(IntEnum):\n    MX_RT_DATA_UPDATE_TYPE_UNAVAILABLE = 0  # Data is not available\n    MX_RT_DATA_UPDATE_TYPE_CYCLICAL = 1  # Data is sent every cycle\n    MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL = 2  # Data sent every cycle when configured through SetRealTimeMonitoring\n    MX_RT_DATA_UPDATE_TYPE_EVENT_BASED = 3  # Data is sent upon connection and updated when its values change", "hash": "5b9494ed61a0", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": null, "chunk_size_bytes": 398, "original_size_bytes": 398, "start_byte": 927, "end_byte": 1325}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:eca1ac3a07ee", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "Message", "qualified_name": "Message", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [40, 106], "text": "class Message:\n    \"\"\"Class for storing a response message from a Mecademic robot.\n    Attributes\n    ----------\n    id : integer\n        The id of the message, representing the type of message.\n    data : string\n        The raw payload of the message.\n    json_data : JSON data parsed as a dictionary. None if message is not JSON format.\n                Robot JSON message format is:\n                {\n                   MX_JSON_KEY_CODE:int,\n                   MX_JSON_KEY_META_DATA:{\n                       MX_JSON_KEY_MSG_TYPE:int\n                   },\n                   MX_JSON_KEY_DATA:{\n                       (per-code JSON arguments/values)\n                   }\n\"\"\"", "hash": "eca1ac3a07ee", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing a response message from a Mecademic robot.\n\n    Attributes\n    ----------\n    id : integer\n        The id of the message, representing the type of message.\n    data : string\n        The raw payload of the message.\n    json_data : JSON data parsed as a dictionary. None if message is not JSON format.\n                Robot JSON message format is:\n                {\n                   MX_JSON_KEY_CODE:int,\n                   MX_JSON_KEY_META_DATA:{\n                       MX_JSON_KEY_MSG_TYPE:int\n                   },\n                   MX_JSON_KEY_DATA:{\n                       (per-code JSON arguments/values)\n                   }", "chunk_size_bytes": 675, "original_size_bytes": 676, "start_byte": 1539, "end_byte": 3601}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:7abe21a92b7b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "Message.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [62, 65], "text": "def __init__(self, id: int, data: str, json_data: dict | None = None):\n        self.id = id\n        self.data = data\n        self.json_data = json_data", "hash": "7abe21a92b7b", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, id: int, data: str, json_data: dict | None = None)", "docstring": null, "chunk_size_bytes": 151, "original_size_bytes": 151, "start_byte": 2261, "end_byte": 2412}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b377a9c9b206", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "Message.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [67, 68], "text": "def __repr__(self):\n        return f\"Message with id={self.id}, data={self.data}\"", "hash": "b377a9c9b206", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 81, "original_size_bytes": 81, "start_byte": 2418, "end_byte": 2499}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:2efa47a24f6f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "from_string", "qualified_name": "Message.from_string", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [71, 106], "text": "def from_string(cls, input: str):\n        \"\"\"Construct message object from raw string input.\n        Parameters\n        ----------\n        input : string\n            Input string to convert to message.\n        \"\"\"\n        id = 0\n        data = \"\"\n        json_data = {}\n        if len(input) == 0:\n            pass\n        elif input[0] == '{':\n            json_data = json.loads(input)\n            id = json_data[MX_JSON_KEY_CODE]\n            data = input\n        else:\n            id_start = input.find('[') + 1\n            id_end = input.find(']', id_start)\n            id = int(input[id_start:id_end])\n            data_start = input.find('[', id_end) + 1\n            data_end = input.rfind(']')\n            data = ''\n            if data_start != -1 and data_end != -1:\n                data = input[data_start:data_end]\n        return cls(id, data, json_data)", "hash": "2efa47a24f6f", "chunk_type": "method", "node_type": "function_definition", "signature": "from_string(cls, input: str)", "docstring": "Construct message object from raw string input.\n\n        Parameters\n        ----------\n        input : string\n            Input string to convert to message.", "chunk_size_bytes": 862, "original_size_bytes": 1079, "start_byte": 2522, "end_byte": 3601}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:9f53d3ecf5f9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MecademicException", "qualified_name": "MecademicException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [114, 128], "text": "class MecademicException(Exception):\n    \"\"\"Base exception class for Mecademic-related exceptions.\n\"\"\"", "hash": "9f53d3ecf5f9", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Base exception class for Mecademic-related exceptions.", "chunk_size_bytes": 102, "original_size_bytes": 102, "start_byte": 3827, "end_byte": 4183}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d88a350be3c2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "MecademicException.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [118, 126], "text": "def __init__(self, message: str):\n        \"\"\" Initialize this base exception\n        Args:\n            message (str):\n                User message to print\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)", "hash": "d88a350be3c2", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, message: str)", "docstring": "Initialize this base exception\n\n        Args:\n            message (str):\n                User message to print", "chunk_size_bytes": 237, "original_size_bytes": 238, "start_byte": 3935, "end_byte": 4173}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:217c9d960595", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MecademicFatalException", "qualified_name": "MecademicFatalException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [131, 134], "text": "class MecademicFatalException(MecademicException):\n    \"\"\"Class for all mecademic exceptions that should be considered fatal (stack trace should be printed).\n\"\"\"", "hash": "217c9d960595", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for all mecademic exceptions that should be considered fatal (stack trace should be printed).", "chunk_size_bytes": 161, "original_size_bytes": 161, "start_byte": 4186, "end_byte": 4356}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:c34acb679267", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "MecademicNonFatalException", "qualified_name": "MecademicNonFatalException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [137, 141], "text": "class MecademicNonFatalException(MecademicException):\n    \"\"\"Class for all mecademic exceptions that should be considered non fatal (can be catch, error printed, and\n       application may continue).\n\"\"\"", "hash": "c34acb679267", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for all mecademic exceptions that should be considered non fatal (can be catch, error printed, and\n       application may continue).", "chunk_size_bytes": 203, "original_size_bytes": 203, "start_byte": 4359, "end_byte": 4571}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:8b31f0353a97", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InvalidStateError", "qualified_name": "InvalidStateError", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [144, 147], "text": "class InvalidStateError(MecademicNonFatalException):\n    \"\"\"The internal state of the instance is invalid.\n\"\"\"", "hash": "8b31f0353a97", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "The internal state of the instance is invalid.", "chunk_size_bytes": 110, "original_size_bytes": 110, "start_byte": 4574, "end_byte": 4693}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:cc2f2fb3edfd", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InvalidConfigError", "qualified_name": "InvalidConfigError", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [150, 153], "text": "class InvalidConfigError(MecademicNonFatalException):\n    \"\"\"Invalid config is used.\n    \"\"\"", "hash": "cc2f2fb3edfd", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Invalid config is used.", "chunk_size_bytes": 92, "original_size_bytes": 92, "start_byte": 4696, "end_byte": 4797}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:5ed66804872c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "CommunicationError", "qualified_name": "CommunicationError", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [156, 159], "text": "class CommunicationError(MecademicNonFatalException):\n    \"\"\"There is a communication issue with the robot.\n\"\"\"", "hash": "5ed66804872c", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "There is a communication issue with the robot.", "chunk_size_bytes": 111, "original_size_bytes": 111, "start_byte": 4800, "end_byte": 4920}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:6a0dc23f424f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "DisconnectError", "qualified_name": "DisconnectError", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [162, 165], "text": "class DisconnectError(MecademicNonFatalException):\n    \"\"\"A non-nominal disconnection has occurred.\n\"\"\"", "hash": "6a0dc23f424f", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "A non-nominal disconnection has occurred.", "chunk_size_bytes": 103, "original_size_bytes": 103, "start_byte": 4923, "end_byte": 5035}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:da2a7f3845d7", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InterruptException", "qualified_name": "InterruptException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [168, 171], "text": "class InterruptException(MecademicNonFatalException):\n    \"\"\"An event has encountered an error. Perhaps it will never be set.\n\"\"\"", "hash": "da2a7f3845d7", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "An event has encountered an error. Perhaps it will never be set.", "chunk_size_bytes": 129, "original_size_bytes": 129, "start_byte": 5038, "end_byte": 5176}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:bec33463c061", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "TimeoutException", "qualified_name": "TimeoutException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [174, 177], "text": "class TimeoutException(MecademicNonFatalException):\n    \"\"\"Requested timeout during a blocking operation (synchronous mode or Wait* functions) has been reached.\n       (raised by InterruptableEvent)\"\"\"", "hash": "bec33463c061", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Requested timeout during a blocking operation (synchronous mode or Wait* functions) has been reached.\n       (raised by InterruptableEvent)", "chunk_size_bytes": 201, "original_size_bytes": 201, "start_byte": 5179, "end_byte": 5389}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e6395ed3a7c0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "NotFoundException", "qualified_name": "NotFoundException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [180, 182], "text": "class NotFoundException(MecademicNonFatalException):\n    \"\"\"A method, variable or object was not found\"\"\"\n    pass", "hash": "e6395ed3a7c0", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "A method, variable or object was not found", "chunk_size_bytes": 114, "original_size_bytes": 114, "start_byte": 5392, "end_byte": 5506}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:326b0ba1d7a4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ArgErrorException", "qualified_name": "ArgErrorException", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [185, 187], "text": "class ArgErrorException(MecademicNonFatalException):\n    \"\"\"An argument was invalid, the operation could not be completed\"\"\"\n    pass", "hash": "326b0ba1d7a4", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "An argument was invalid, the operation could not be completed", "chunk_size_bytes": 133, "original_size_bytes": 133, "start_byte": 5509, "end_byte": 5642}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:538794028b52", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotCallbacks", "qualified_name": "RobotCallbacks", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [190, 366], "text": "class RobotCallbacks:\n    \"\"\"Class for storing possible status events for the Mecademic robot.\n    Attributes\n    ----------\n        on_connected : function object\n            Function to be called once connected.\n        on_disconnected : function object\n            Function to be called once disconnected.\n        on_status_updated : function object\n            Function to be called once robot status is updated.\n        on_status_gripper_updated : function object\n            Function to be called once gripper status is updated (legacy, use following external tools callbacks).\n        on_external_tool_status_updated: function object\n            Function to be called once external tool status is updated.\n        on_gripper_state_updated: function object\n            Function to be called once gripper state is updated.\n        on_valve_state_updated: function object\n            Function to be called once valve state is updated.\n        on_output_state_updated: function object\n            Function to be called when digital outputs changed.\n        on_input_state_updated: function object\n            Function to be called when digital inputs changed.\n        on_vacuum_state_updated: function object\n            Function to be called once vacuum state is updated.\n        on_activated : function object\n            Function to be called once activated.\n        on_deactivated : function object\n            Function to be called once deactivated.\n        on_homed : function object\n            Function to be called once homing is complete.\n        on_error : function object\n            Function to be called if robot enters an error state.\n        on_error_reset : function object\n            Function to be called once error is reset.\n        on_safety_stop : function object\n            Function to be called when the robot enters safety stop state following a raised safety stop conditions\n            (EStop, PStop1, PStop2, etc.).\n            Note that on_safety_stop_state_change can be used to be notified of more safety stop conditions that change\n            while the robot is already in safety stop.\n        on_safety_stop_reset : function object\n            Function to be called when all safety stop conditions (EStop, PStop1, PStop2, ...) are cleared (reset)\n        on_safety_stop_resettable : function object\n            Function to be called when all safety stop conditions (EStop, PStop1, PStop2, ...) can be reset\n            i.e. the safety stop conditions are no more present and need a reset (Power supply reset button in some\n            cases, or simply ResumeMotion in other cases)\n        on_safety_stop_state_change : function object\n            Function to be called when any safety stop state change (see RobotSafetyStatus)\n        on_pstop2 : function object\n            Function to be called if PStop2 is activated.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_pstop2_resettable : function object\n            Function to be called when PStop2 condition can be reset\n            (i.e. the power supply PStop2 signal is no more asserted)\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_pstop2_reset : function object\n            Function to be called if PStop2 is reset.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_estop : function object\n            Function to be called if EStop is activated.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_estop_reset : function object\n            Function to be called if EStop is reset.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_estop_resettable : function object\n            Function to be called when EStop condition can be reset\n            (i.e. the power supply EStop signal is no more asserted)\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_motion_paused : function object\n            Function to be called once motion is paused.\n        on_motion_cleared : function object\n            Function to be called once motion is cleared.\n        on_motion_resumed : function object\n            Function to be called once motion is resumed.\n        on_checkpoint_reached : function object\n            Function to be called if a checkpoint is reached.\n        on_checkpoint_discarded : function object\n            Function to be called if a checkpoint is discarded\n            (due to motion cleared, robot deactivated, robot in error, safety stop, etc.).\n        on_activate_sim : function object\n            Function to be called once sim mode is activated.\n        on_deactivate_sim : function object\n            Function to be called once sim mode is deactivated.\n        on_activate_ext_tool_sim : function object\n            Function to be called once gripper sim mode is activated.\n        on_deactivate_ext_tool_sim : function object\n            Function to be called once gripper sim mode is deactivated.\n        on_io_sim_enabled : function object\n            Function to be called once IO simulation mode is enabled.\n        on_io_sim_disabled : function object\n            Function to be called once IO simulation mode is disabled.\n        on_activate_recovery_mode : function object\n            Function to be called once recovery mode is activated.\n        on_deactivate_recovery_mode : function object\n            Function to be called once recovery mode is deactivated.\n        on_command_message : function object\n            Function to be called each time a command response is received.\n        on_monitor_message : function object\n            Function to be called each time an event is received on the monitoring port.\n            Only available when connected to the robot in monitoring mode.\n            Note that on_monitor_message may not be very useful. We suggest to use on_end_of_cycle instead\n            (which works for both monitoring or control mode connections).\n        on_offline_program_state : function object\n            Function to be called each time an offline program starts or fails to start.\n        on_end_of_cycle : function object\n            Function to be called each time end of cycle is reached.\n            It's called once all real-time data for current monitoring interval has been received.\n            At this moment, all robot real-time data is coherent (belongs to the same cycle).\n            \"\"\"", "hash": "538794028b52", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing possible status events for the Mecademic robot.\n\n    Attributes\n    ----------\n        on_connected : function object\n            Function to be called once connected.\n        on_disconnected : function object\n            Function to be called once disconnected.\n        on_status_updated : function object\n            Function to be called once robot status is updated.\n\n        on_status_gripper_updated : function object\n            Function to be called once gripper status is updated (legacy, use following external tools callbacks).\n        on_external_tool_status_updated: function object\n            Function to be called once external tool status is updated.\n        on_gripper_state_updated: function object\n            Function to be called once gripper state is updated.\n        on_valve_state_updated: function object\n            Function to be called once valve state is updated.\n\n        on_output_state_updated: function object\n            Function to be called when digital outputs changed.\n        on_input_state_updated: function object\n            Function to be called when digital inputs changed.\n        on_vacuum_state_updated: function object\n            Function to be called once vacuum state is updated.\n\n        on_activated : function object\n            Function to be called once activated.\n        on_deactivated : function object\n            Function to be called once deactivated.\n        on_homed : function object\n            Function to be called once homing is complete.\n        on_error : function object\n            Function to be called if robot enters an error state.\n        on_error_reset : function object\n            Function to be called once error is reset.\n\n        on_safety_stop : function object\n            Function to be called when the robot enters safety stop state following a raised safety stop conditions\n            (EStop, PStop1, PStop2, etc.).\n            Note that on_safety_stop_state_change can be used to be notified of more safety stop conditions that change\n            while the robot is already in safety stop.\n        on_safety_stop_reset : function object\n            Function to be called when all safety stop conditions (EStop, PStop1, PStop2, ...) are cleared (reset)\n        on_safety_stop_resettable : function object\n            Function to be called when all safety stop conditions (EStop, PStop1, PStop2, ...) can be reset\n            i.e. the safety stop conditions are no more present and need a reset (Power supply reset button in some\n            cases, or simply ResumeMotion in other cases)\n        on_safety_stop_state_change : function object\n            Function to be called when any safety stop state change (see RobotSafetyStatus)\n\n        on_pstop2 : function object\n            Function to be called if PStop2 is activated.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_pstop2_resettable : function object\n            Function to be called when PStop2 condition can be reset\n            (i.e. the power supply PStop2 signal is no more asserted)\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_pstop2_reset : function object\n            Function to be called if PStop2 is reset.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_estop : function object\n            Function to be called if EStop is activated.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_estop_reset : function object\n            Function to be called if EStop is reset.\n            *** DEPRECATED (replaced by on_safety_stop_state)\n        on_estop_resettable : function object\n            Function to be called when EStop condition can be reset\n            (i.e. the power supply EStop signal is no more asserted)\n            *** DEPRECATED (replaced by on_safety_stop_state)\n\n        on_motion_paused : function object\n            Function to be called once motion is paused.\n        on_motion_cleared : function object\n            Function to be called once motion is cleared.\n        on_motion_resumed : function object\n            Function to be called once motion is resumed.\n        on_checkpoint_reached : function object\n            Function to be called if a checkpoint is reached.\n        on_checkpoint_discarded : function object\n            Function to be called if a checkpoint is discarded\n            (due to motion cleared, robot deactivated, robot in error, safety stop, etc.).\n\n        on_activate_sim : function object\n            Function to be called once sim mode is activated.\n        on_deactivate_sim : function object\n            Function to be called once sim mode is deactivated.\n        on_activate_ext_tool_sim : function object\n            Function to be called once gripper sim mode is activated.\n        on_deactivate_ext_tool_sim : function object\n            Function to be called once gripper sim mode is deactivated.\n        on_io_sim_enabled : function object\n            Function to be called once IO simulation mode is enabled.\n        on_io_sim_disabled : function object\n            Function to be called once IO simulation mode is disabled.\n\n        on_activate_recovery_mode : function object\n            Function to be called once recovery mode is activated.\n        on_deactivate_recovery_mode : function object\n            Function to be called once recovery mode is deactivated.\n\n        on_command_message : function object\n            Function to be called each time a command response is received.\n        on_monitor_message : function object\n            Function to be called each time an event is received on the monitoring port.\n            Only available when connected to the robot in monitoring mode.\n            Note that on_monitor_message may not be very useful. We suggest to use on_end_of_cycle instead\n            (which works for both monitoring or control mode connections).\n\n        on_offline_program_state : function object\n            Function to be called each time an offline program starts or fails to start.\n\n        on_end_of_cycle : function object\n            Function to be called each time end of cycle is reached.\n            It's called once all real-time data for current monitoring interval has been received.\n            At this moment, all robot real-time data is coherent (belongs to the same cycle).", "chunk_size_bytes": 6402, "original_size_bytes": 6414, "start_byte": 5645, "end_byte": 14564}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:331ab024daf6", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotCallbacks.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [311, 366], "text": "def __init__(self):\n        self.on_connected: Callable[[], None] = None\n        self.on_disconnected: Callable[[], None] = None\n        self.on_status_updated: Callable[[], None] = None\n        self.on_status_gripper_updated: Callable[[], None] = None\n        self.on_external_tool_status_updated: Callable[[], None] = None\n        self.on_gripper_state_updated: Callable[[], None] = None\n        self.on_valve_state_updated: Callable[[], None] = None\n        self.on_output_state_updated: Callable[[], None] = None\n        self.on_input_state_updated: Callable[[], None] = None\n        self.on_vacuum_state_updated: Callable[[], None] = None\n        self.on_activated: Callable[[], None] = None\n        self.on_deactivated: Callable[[], None] = None\n        self.on_homed: Callable[[], None] = None\n        self.on_error: Callable[[], None] = None\n        self.on_error_reset: Callable[[], None] = None\n        self.on_safety_stop_resettable: Callable[[], None] = None\n        self.on_safety_stop_reset: Callable[[], None] = None\n        self.on_safety_stop_state_change: Callable[[], None] = None\n        self.on_pstop2: Callable[[], None] = None\n        self.on_pstop2_resettable: Callable[[], None] = None\n        self.on_pstop2_reset: Callable[[], None] = None\n        self.on_estop: Callable[[], None] = None\n        self.on_estop_resettable: Callable[[], None] = None\n        self.on_estop_reset: Callable[[], None] = None\n        self.on_motion_paused: Callable[[], None] = None\n        self.on_motion_cleared: Callable[[], None] = None\n        self.on_motion_resumed: Callable[[], None] = None\n        self.on_checkpoint_reached: Callable[[int], None] = None\n        self.on_checkpoint_discarded: Callable[[int], None] = None\n        self.on_activate_sim: Callable[[], None] = None\n        self.on_deactivate_sim: Callable[[], None] = None\n        self.on_activate_ext_tool_sim: Callable[[], None] = None\n        self.on_deactivate_ext_tool_sim: Callable[[], None] = None\n        self.on_io_sim_enabled: Callable[[], None] = None\n        self.on_io_sim_disabled: Callable[[], None] = None\n        self.on_activate_recovery_mode: Callable[[], None] = None\n        self.on_deactivate_recovery_mode: Callable[[], None] = None\n        self.on_command_message: Callable[[Message], None] = None\n        self.on_monitor_message: Callable[[Message], None] = None\n        self.on_offline_program_state: Callable[[], None] = None\n        self.on_end_of_cycle: Callable[[], None] = None", "hash": "331ab024daf6", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 2485, "original_size_bytes": 2499, "start_byte": 12065, "end_byte": 14564}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:39d79ae7bf73", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "InterruptableEvent", "qualified_name": "InterruptableEvent", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [369, 505], "text": "class InterruptableEvent:\n    \"\"\"Extend default event class to also be able to unblock and raise an exception in case the event becomes\n       irrelevant and will not occur (for example: Waiting on a checkpoint when robot is in error)\n    Attributes\n    ----------\n    id : int or None\n        Id for event.\n    _event : event object\n        A standard event-type object.\n    _lock : lock object\n        Used to ensure atomic operations.\n    _interrupted : boolean\n        If true, event is in an error state.\n    _interrupted_msg : string\n        User message that explains the reason of interruption.\n    _abort_on_error : bool\n        Tells if this event must be awakened if the robot falls into error state, by default False\n    _abort_on_clear_motion : bool\n        Tells if this event must be awakened if the robot's motion queue is cleared\n        Note that this also includes PStop2 condition and robot deactivation (which also cause the motion queue\n        to be cleared)\n\"\"\"", "hash": "39d79ae7bf73", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Extend default event class to also be able to unblock and raise an exception in case the event becomes\n       irrelevant and will not occur (for example: Waiting on a checkpoint when robot is in error)\n\n    Attributes\n    ----------\n    id : int or None\n        Id for event.\n    _event : event object\n        A standard event-type object.\n    _lock : lock object\n        Used to ensure atomic operations.\n    _interrupted : boolean\n        If true, event is in an error state.\n    _interrupted_msg : string\n        User message that explains the reason of interruption.\n    _abort_on_error : bool\n        Tells if this event must be awakened if the robot falls into error state, by default False\n    _abort_on_clear_motion : bool\n        Tells if this event must be awakened if the robot's motion queue is cleared\n        Note that this also includes PStop2 condition and robot deactivation (which also cause the motion queue\n        to be cleared)", "chunk_size_bytes": 985, "original_size_bytes": 986, "start_byte": 14567, "end_byte": 19318}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e8468291a97b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "InterruptableEvent.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [394, 402], "text": "def __init__(self, id=None, data=None, abort_on_error=False, abort_on_clear_motion=False):\n        self._id = id\n        self._data = data\n        self._event = threading.Event()\n        self._lock = threading.Lock()\n        self._interrupted = False\n        self._interrupted_msg = \"\"\n        self._abort_on_error = abort_on_error\n        self._abort_on_clear_motion = abort_on_clear_motion", "hash": "e8468291a97b", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, id=None, data=None, abort_on_error=False, abort_on_clear_motion=False)", "docstring": null, "chunk_size_bytes": 391, "original_size_bytes": 391, "start_byte": 15599, "end_byte": 15990}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:bf97da0b9579", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "check_interrupted", "qualified_name": "InterruptableEvent.check_interrupted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [404, 409], "text": "def check_interrupted(self):\n        if self._interrupted:\n            if self._interrupted_msg != \"\":\n                raise InterruptException(self._interrupted_msg)\n            else:\n                raise InterruptException('Event interrupted, possibly because event will never be triggered.')", "hash": "bf97da0b9579", "chunk_type": "method", "node_type": "function_definition", "signature": "check_interrupted(self)", "docstring": null, "chunk_size_bytes": 295, "original_size_bytes": 295, "start_byte": 15996, "end_byte": 16291}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:ffad705f4e24", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "wait", "qualified_name": "InterruptableEvent.wait", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [411, 441], "text": "def wait(self, timeout: float = None) -> Message:\n        \"\"\"Block until event is set or should raise an exception (InterruptException or TimeoutException).\n           InterruptException is raised if waiting for the event has become irrelevant, like waiting for\n           a checkpoint while robot is in error.\n        Attributes\n        ----------\n        timeout : float\n            Maximum duration to wait in seconds.\n        Return\n        ------\n        data : object\n            Return the data object (or None for events not returning any data)\n        \"\"\"\n        with self._lock:\n            self.check_interrupted()\n        start_time = time.monotonic()\n        partial_timeout = 0.1 if timeout is None else min(timeout, 0.1)\n        while True:\n            is_set = self._event.wait(timeout=partial_timeout)\n            if is_set:\n                break\n            self.check_interrupted()\n            if timeout is not None and time.monotonic() - start_time > timeout:\n                raise TimeoutException(\"Timeout waiting for interruptable event\")\n        with self._lock:\n            self.check_interrupted()\n            return self._data", "hash": "ffad705f4e24", "chunk_type": "method", "node_type": "function_definition", "signature": "wait(self, timeout: float = None)", "docstring": "Block until event is set or should raise an exception (InterruptException or TimeoutException).\n           InterruptException is raised if waiting for the event has become irrelevant, like waiting for\n           a checkpoint while robot is in error.\n\n        Attributes\n        ----------\n        timeout : float\n            Maximum duration to wait in seconds.\n\n        Return\n        ------\n        data : object\n            Return the data object (or None for events not returning any data)", "chunk_size_bytes": 1155, "original_size_bytes": 1245, "start_byte": 16297, "end_byte": 17542}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:c3dd1ad4bebb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set", "qualified_name": "InterruptableEvent.set", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [443, 449], "text": "def set(self, data: Message = None):\n        \"\"\"Set the event and unblock all waits. Optionally modify data before setting.\n        \"\"\"\n        with self._lock:\n            self._data = data\n            self._event.set()", "hash": "c3dd1ad4bebb", "chunk_type": "method", "node_type": "function_definition", "signature": "set(self, data: Message = None)", "docstring": "Set the event and unblock all waits. Optionally modify data before setting.", "chunk_size_bytes": 220, "original_size_bytes": 221, "start_byte": 17548, "end_byte": 17769}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a1048a60feea", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "abort", "qualified_name": "InterruptableEvent.abort", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [451, 460], "text": "def abort(self, message=\"\"):\n        \"\"\"Unblock any waits and raise an exception.\n        \"\"\"\n        with self._lock:\n            if not self._event.is_set():\n                self._interrupted_msg = message\n                self._interrupted = True\n                self._event.set()  # Awake all threads\n                self._event.clear()  # Restore previous state (important to keep state even if interrupted)", "hash": "a1048a60feea", "chunk_type": "method", "node_type": "function_definition", "signature": "abort(self, message=\"\")", "docstring": "Unblock any waits and raise an exception.", "chunk_size_bytes": 411, "original_size_bytes": 412, "start_byte": 17775, "end_byte": 18187}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:ae93b2cf914a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear", "qualified_name": "InterruptableEvent.clear", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [462, 468], "text": "def clear(self):\n        \"\"\"Reset the event to its initial state.\n        \"\"\"\n        with self._lock:\n            self._interrupted = False\n            self._event.clear()", "hash": "ae93b2cf914a", "chunk_type": "method", "node_type": "function_definition", "signature": "clear(self)", "docstring": "Reset the event to its initial state.", "chunk_size_bytes": 172, "original_size_bytes": 173, "start_byte": 18193, "end_byte": 18366}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:877a19c8af55", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_set", "qualified_name": "InterruptableEvent.is_set", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [470, 483], "text": "def is_set(self) -> bool:\n        \"\"\"Checks if the event is set.\n        Return\n        ------\n        boolean\n            False if event is not set or instance should '_interrupted'. True otherwise.\n        \"\"\"\n        with self._lock:\n            if self._interrupted:\n                return False\n            else:\n                return self._event.is_set()", "hash": "877a19c8af55", "chunk_type": "method", "node_type": "function_definition", "signature": "is_set(self)", "docstring": "Checks if the event is set.\n\n        Return\n        ------\n        boolean\n            False if event is not set or instance should '_interrupted'. True otherwise.", "chunk_size_bytes": 361, "original_size_bytes": 363, "start_byte": 18372, "end_byte": 18735}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:95f66fa111e3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_abort", "qualified_name": "InterruptableEvent.clear_abort", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [485, 491], "text": "def clear_abort(self):\n        \"\"\"Clears the abort to make waiting for the event blocking again.\n        \"\"\"\n        with self._lock:\n            if self._interrupted:\n                self._interrupted = False", "hash": "95f66fa111e3", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_abort(self)", "docstring": "Clears the abort to make waiting for the event blocking again.", "chunk_size_bytes": 209, "original_size_bytes": 210, "start_byte": 18741, "end_byte": 18951}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d3748115e0dc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "id", "qualified_name": "InterruptableEvent.id", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [494, 498], "text": "def id(self) -> int:\n        \"\"\"Make id a read-only property since it should not be changed after instantiation.\n        \"\"\"\n        return self._id", "hash": "d3748115e0dc", "chunk_type": "method", "node_type": "function_definition", "signature": "id(self)", "docstring": "Make id a read-only property since it should not be changed after instantiation.", "chunk_size_bytes": 148, "original_size_bytes": 149, "start_byte": 18971, "end_byte": 19120}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a3028aef5aad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "data", "qualified_name": "InterruptableEvent.data", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [501, 505], "text": "def data(self) -> Message:\n        \"\"\"Make data a read-only property and enforce that it is only assignable at construction or using set().\n        \"\"\"\n        return self._data", "hash": "a3028aef5aad", "chunk_type": "method", "node_type": "function_definition", "signature": "data(self)", "docstring": "Make data a read-only property and enforce that it is only assignable at construction or using set().", "chunk_size_bytes": 177, "original_size_bytes": 178, "start_byte": 19140, "end_byte": 19318}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b301bb62f3e4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotVersion", "qualified_name": "RobotVersion", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [508, 655], "text": "class RobotVersion:\n    \"\"\"\n        Robot utility class to handle firmware version.\n    Attributes\n    ----------\n    build : integer\n        Firmware build number, None if unavailable\n    extra : string\n        Firmware version 'extra' name, None if unavailable\n    full_version : string\n        Full firmware version containing major.minor.patch.build-extra\n    major : integer\n        Major firmware version value\n    minor : integer\n        Minor firmware version value\n    patch : integer\n        Patch firmware version value\n    short_version : string\n        Firmware version containing major.minor.patch only\n    \"\"\"", "hash": "b301bb62f3e4", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Robot utility class to handle firmware version.\n\n    Attributes\n    ----------\n\n    build : integer\n        Firmware build number, None if unavailable\n\n    extra : string\n        Firmware version 'extra' name, None if unavailable\n\n    full_version : string\n        Full firmware version containing major.minor.patch.build-extra\n\n    major : integer\n        Major firmware version value\n\n    minor : integer\n        Minor firmware version value\n\n    patch : integer\n        Patch firmware version value\n\n    short_version : string\n        Firmware version containing major.minor.patch only", "chunk_size_bytes": 624, "original_size_bytes": 633, "start_byte": 19321, "end_byte": 23755}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:5e0610dbab3e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotVersion.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [540, 546], "text": "def __init__(self, version: str):\n        \"\"\"Creates\n        :param version: version of firmware. See update_version for supported formats\n        \"\"\"\n        self.full_version = version\n        self.update_version(self.full_version)", "hash": "5e0610dbab3e", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, version: str)", "docstring": "Creates\n\n        :param version: version of firmware. See update_version for supported formats", "chunk_size_bytes": 233, "original_size_bytes": 234, "start_byte": 20050, "end_byte": 20284}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:8650f87b32ce", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "RobotVersion.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [548, 549], "text": "def __str__(self) -> str:\n        return self.full_version", "hash": "8650f87b32ce", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 58, "original_size_bytes": 58, "start_byte": 20290, "end_byte": 20348}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b269d1546f6a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__lt__", "qualified_name": "RobotVersion.__lt__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [551, 554], "text": "def __lt__(self, other: RobotVersion) -> bool:\n        \"\"\"\" Less than implementation\n        \"\"\"\n        return not self.is_at_least(other.major, other.minor, other.patch, other.build)", "hash": "b269d1546f6a", "chunk_type": "method", "node_type": "function_definition", "signature": "__lt__(self, other: RobotVersion)", "docstring": "Less than implementation", "chunk_size_bytes": 184, "original_size_bytes": 184, "start_byte": 20354, "end_byte": 20538}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:49ae3fea72c3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_str", "qualified_name": "RobotVersion.get_str", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [556, 576], "text": "def get_str(self, build=False, extra=False) -> str:\n        \"\"\"Get version string\n        Parameters\n        ----------\n        build : bool, optional\n            Include the build number in the version (ex:9.3.0.4739), by default False\n        extra : bool, optional\n            Include the build 'extra in the version (ex:9.3.0.4739-master), by default False\n        Returns\n        -------\n        str\n            Formatted version string\n        \"\"\"\n        version_to_return = self.short_version\n        if build and self.build:\n            version_to_return += f'.{self.build}'\n        if extra and self.extra:\n            version_to_return += f'-{self.extra}'\n        return version_to_return", "hash": "49ae3fea72c3", "chunk_type": "method", "node_type": "function_definition", "signature": "get_str(self, build=False, extra=False)", "docstring": "Get version string\n\n        Parameters\n        ----------\n        build : bool, optional\n            Include the build number in the version (ex:9.3.0.4739), by default False\n        extra : bool, optional\n            Include the build 'extra in the version (ex:9.3.0.4739-master), by default False\n\n        Returns\n        -------\n        str\n            Formatted version string", "chunk_size_bytes": 699, "original_size_bytes": 701, "start_byte": 20544, "end_byte": 21245}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:39336b05ed60", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "update_version", "qualified_name": "RobotVersion.update_version", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [578, 604], "text": "def update_version(self, version: str):\n        \"\"\"Update object firmware version values by parsing a version string.\n        :param version: string\n            New version of firmware. Supports multiple version formats\n            ie. 8.1.9, 8.4.3.1805-official\n        \"\"\"\n        self.short_version = '0.0.0'\n        regex_version = re.search(self.REGEX_VERSION_BUILD, version)\n        if regex_version is None:\n            raise ValueError(f'Invalid version format: \"{version}\"')\n        if regex_version.group(\"version\"):\n            self.short_version = regex_version.group(\"version\")\n        splitted_version = self.short_version.split(\".\")\n        self.major = int(splitted_version[0])\n        self.minor = int(splitted_version[1])\n        self.patch = int(splitted_version[2])\n        self.build = None\n        self.extra = None\n        if regex_version.group(\"build\"):\n            self.build = int(regex_version.group(\"build\"))\n        if regex_version.group(\"extra\"):\n            self.extra = regex_version.group(\"extra\")\n        self.full_version = self.get_str(build=True, extra=True)", "hash": "39336b05ed60", "chunk_type": "method", "node_type": "function_definition", "signature": "update_version(self, version: str)", "docstring": "Update object firmware version values by parsing a version string.\n\n        :param version: string\n            New version of firmware. Supports multiple version formats\n            ie. 8.1.9, 8.4.3.1805-official", "chunk_size_bytes": 1097, "original_size_bytes": 1101, "start_byte": 21251, "end_byte": 22352}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e353e80bbdad", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_at_least", "qualified_name": "RobotVersion.is_at_least", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [606, 655], "text": "def is_at_least(self, major, minor=0, patch=0, build=0) -> bool:\n        \"\"\"Tells if this RobotInfo instance's version is at least the specified version\n        Parameters\n        ----------\n        major : integer\n            Minimum desired major version\n        minor : integer\n            Minimum desired minor version\n        patch : integer\n            Minimum desired patch version\n        build : integer\n            Minimum desired build version\n        Returns\n        -------\n        boolean\n            True if this RobotInfo instance's version is at least the specified version\n        \"\"\"\n        if self.major > major:\n            return True\n        elif self.major < major:\n            return False\n        if self.minor > minor:\n            return True\n        elif self.minor < minor:\n            return False\n        if self.patch > patch:\n            return True\n        elif self.patch < patch:\n            return False\n        if build == 0 or build is None:\n            return True\n        if self.build is not None:\n            if self.build >= build:\n                return True\n        else:\n            return False\n        return False", "hash": "e353e80bbdad", "chunk_type": "method", "node_type": "function_definition", "signature": "is_at_least(self, major, minor=0, patch=0, build=0)", "docstring": "Tells if this RobotInfo instance's version is at least the specified version\n\n        Parameters\n        ----------\n        major : integer\n            Minimum desired major version\n        minor : integer\n            Minimum desired minor version\n        patch : integer\n            Minimum desired patch version\n        build : integer\n            Minimum desired build version\n\n        Returns\n        -------\n        boolean\n            True if this RobotInfo instance's version is at least the specified version", "chunk_size_bytes": 1164, "original_size_bytes": 1397, "start_byte": 22358, "end_byte": 23755}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:fe90e2e607ee", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotInfo", "qualified_name": "RobotInfo", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [658, 905], "text": "class RobotInfo:\n    \"\"\"Class for storing metadata about a robot.\n    Attributes\n    ----------\n    robot_model: MxRobotModel\n        Model of robot\n    model : string\n        Model of robot (legacy, use robot_model instead since it's an enum with well-known values)\n    revision : int\n        Robot revision.\n    is_virtual : bool\n        True if is a virtual robot.\n    is_safe_boot : bool\n        True if is booted in safe-boot mode.\n    version : str\n        robot firmware revision number as received from the connection string.\n    serial : string\n        Serial identifier of robot.\n    ip_address : string\n        IP address of this robot.\n    rt_message_capable : bool\n        True if robot is capable of sending real-time monitoring messages.\n    rt_on_ctrl_port_capable : bool\n        True if robot is capable of sending real-time monitoring messages on control port (SetCtrlPortMonitoring).\n    sidecar_capable : bool\n        True if robot supports running the sidecar scripting engine.\n    num_joints : int\n        Number of joints on the robot.\n    requires_homing : bool\n        Tells if this robot requires homing.\n    supports_ext_tool : bool\n        Tells if this robot supports connecting external tools (gripper or valve box).\n    supports_io_module : bool\n        Tells if this robot supports IO expansion module.\n    supports_manual_mode : bool\n        Tells if this robot supports manual mode.\n    gripper_pos_ctrl_capable : bool\n        Tells if this robot supports gripper position control.\n    ext_tool_version_capable : bool\n        Tells if this robot supports external tool fw version fetch.\n    ext_tool_version : str\n        External tool firmware revision number as received from the connection string.\n        Version 0.0.0.0 if device isn't connected or ext_tool_version_capable == False.\n    supports_joint_vel_limit : bool\n        Tells if this robot supports SetJointVelLimit\n    supports_set_payload : bool\n        Tells if this robot supports SetPayload\n    supports_torque_limits : bool\n        Tells if this robot supports SetTorqueLimits and SetTorqueLimitsCfg\n    supports_conf_turn : bool\n        Tells if this robot supports SetConfTurn\n    supports_time_scaling : bool\n        Tells if this robot supports SetTimeScaling\n    supports_checkpoint_discarded : bool\n        Tells if this robot supports reporting discarded checkpoints (MX_ST_CHECKPOINT_DISCARDED)\n    supports_move_duration : bool\n        Tells if this robot supports time-based movements (SetMoveDuration, SetMoveMode, ...)\n\"\"\"", "hash": "fe90e2e607ee", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing metadata about a robot.\n\n    Attributes\n    ----------\n    robot_model: MxRobotModel\n        Model of robot\n    model : string\n        Model of robot (legacy, use robot_model instead since it's an enum with well-known values)\n    revision : int\n        Robot revision.\n    is_virtual : bool\n        True if is a virtual robot.\n    is_safe_boot : bool\n        True if is booted in safe-boot mode.\n    version : str\n        robot firmware revision number as received from the connection string.\n    serial : string\n        Serial identifier of robot.\n    ip_address : string\n        IP address of this robot.\n    rt_message_capable : bool\n        True if robot is capable of sending real-time monitoring messages.\n    rt_on_ctrl_port_capable : bool\n        True if robot is capable of sending real-time monitoring messages on control port (SetCtrlPortMonitoring).\n    sidecar_capable : bool\n        True if robot supports running the sidecar scripting engine.\n    num_joints : int\n        Number of joints on the robot.\n    requires_homing : bool\n        Tells if this robot requires homing.\n    supports_ext_tool : bool\n        Tells if this robot supports connecting external tools (gripper or valve box).\n    supports_io_module : bool\n        Tells if this robot supports IO expansion module.\n    supports_manual_mode : bool\n        Tells if this robot supports manual mode.\n    gripper_pos_ctrl_capable : bool\n        Tells if this robot supports gripper position control.\n    ext_tool_version_capable : bool\n        Tells if this robot supports external tool fw version fetch.\n    ext_tool_version : str\n        External tool firmware revision number as received from the connection string.\n        Version 0.0.0.0 if device isn't connected or ext_tool_version_capable == False.\n    supports_joint_vel_limit : bool\n        Tells if this robot supports SetJointVelLimit\n    supports_set_payload : bool\n        Tells if this robot supports SetPayload\n    supports_torque_limits : bool\n        Tells if this robot supports SetTorqueLimits and SetTorqueLimitsCfg\n    supports_conf_turn : bool\n        Tells if this robot supports SetConfTurn\n    supports_time_scaling : bool\n        Tells if this robot supports SetTimeScaling\n    supports_checkpoint_discarded : bool\n        Tells if this robot supports reporting discarded checkpoints (MX_ST_CHECKPOINT_DISCARDED)\n    supports_move_duration : bool\n        Tells if this robot supports time-based movements (SetMoveDuration, SetMoveMode, ...)", "chunk_size_bytes": 2537, "original_size_bytes": 2538, "start_byte": 23758, "end_byte": 34335}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:6f26f6c87e3d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotInfo.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [718, 819], "text": "def __init__(self,\n                 model: str = 'Unknown',\n                 revision: int = 0,\n                 is_virtual: bool = False,\n                 is_safe_boot: bool = False,\n                 version: str = '0.0.0',\n                 serial: str = '',\n                 ext_tool_version: str = '0.0.0.0'):\n        self.robot_model = MxRobotModel.MX_ROBOT_MODEL_UNKNOWN\n        self.model = model\n        self.revision = revision\n        self.is_virtual = is_virtual\n        self.is_safe_boot = is_safe_boot\n        self.version = RobotVersion(version)\n        self.serial = serial\n        self.ip_address = None  # Set later\n        self.rt_message_capable = False\n        self.rt_on_ctrl_port_capable = False\n        self.sidecar_capable = False\n        self.gripper_pos_ctrl_capable = False\n        self.ext_tool_version_capable = False\n        self.ext_tool_version = RobotVersion(ext_tool_version)\n        self.supports_io_module = False\n        self.supports_manual_mode = False\n        self.supports_joint_vel_limit = False\n        self.supports_set_payload = False\n        self.supports_torque_limits = False\n        self.supports_conf_turn = False\n        self.supports_time_scaling = False\n        self.supports_checkpoint_discarded = False\n        self.supports_move_duration = False\n        if self.model.upper() == MX_ROBOT_MODEL_OFFICIAL_NAME_M500.upper():\n            if self.revision == 1:\n                self.robot_model = MxRobotModel.MX_ROBOT_MODEL_M500_R1\n            elif self.revision == 2:\n                self.robot_model = MxRobotModel.MX_ROBOT_MODEL_M500_R2\n            elif self.revision == 3:\n                self.robot_model = MxRobotModel.MX_ROBOT_MODEL_M500_R3\n            elif self.revision == 4:\n                self.robot_model = MxRobotModel.MX_ROBOT_MODEL_M500_R4\n            self.num_joints = 6\n            self.requires_homing = True\n            self.supports_ext_tool = True\n            self.supports_io_module = False\n        elif self.model.upper() == MX_ROBOT_MODEL_OFFICIAL_NAME_MCS500.upper():\n            self.robot_model = MxRobotModel.MX_ROBOT_MODEL_MCS500_R1\n            self.num_joints = 4\n            self.requires_homing = False\n            self.supports_ext_tool = False\n            self.supports_io_module = True\n            self.supports_manual_mode = True\n        elif self.model.upper() == MX_ROBOT_MODEL_OFFICIAL_NAME_MCA250.upper():\n            self.robot_model = MxRobotModel.MX_ROBOT_MODEL_MCA250_R1\n            self.num_joints = 6\n            self.requires_homing = False\n            self.supports_ext_tool = False\n            self.supports_io_module = True\n            self.supports_manual_mode = True\n        elif self.model.upper() == MX_ROBOT_MODEL_OFFICIAL_NAME_MCA1000.upper():\n            self.robot_model = MxRobotModel.MX_ROBOT_MODEL_MCA1000_R1\n            self.num_joints = 6\n            self.requires_homing = False\n            self.supports_ext_tool = False\n            self.supports_io_module = True\n            self.supports_manual_mode = True\n        elif self.model.upper() == 'UNKNOWN':\n            self.robot_model = MxRobotModel.MX_ROBOT_MODEL_UNKNOWN\n            self.num_joints = 1\n            self.requires_homing = False\n            self.supports_ext_tool = False\n            self.supports_ext_tool = False\n        else:\n            self.robot_model = MxRobotModel.MX_ROBOT_MODEL_UNKNOWN\n            raise ValueError(f'Invalid robot model: {self.model}')\n        if self.version.is_at_least(8, 4):\n            self.rt_message_capable = True\n        if self.version.is_at_least(9, 0):\n            self.rt_on_ctrl_port_capable = True\n        if self.version.is_at_least(11, 1, 3):\n            self.sidecar_capable = True\n        if self.version.is_at_least(9, 1):\n            self.gripper_pos_ctrl_capable = True\n        if self.version.is_at_least(9, 1, 5):\n            self.ext_tool_version_capable = True\n        if self.version.is_at_least(9, 3):\n            self.supports_joint_vel_limit = True\n            self.supports_set_payload = True\n            self.supports_torque_limits = True\n            self.supports_conf_turn = True\n        if self.version.is_at_least(10, 0, 1):\n            self.supports_time_scaling = True\n        if self.version.is_at_least(10, 2, 1):\n            self.supports_checkpoint_discarded = True\n        if self.version.is_at_least(11, 1, 2):\n            self.supports_move_duration = True", "hash": "6f26f6c87e3d", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self,\n                 model: str = 'Unknown',\n                 revision: int = 0,\n                 is_virtual: bool = False,\n                 is_safe_boot: bool = False,\n                 version: str = '0.0.0',\n                 serial: str = '',\n                 ext_tool_version: str = '0.0.0.0')", "docstring": null, "chunk_size_bytes": 4411, "original_size_bytes": 4753, "start_byte": 26302, "end_byte": 31055}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:ee81f210a535", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "RobotInfo.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [821, 824], "text": "def __str__(self):\n        safe_boot_str = \" SAFE-BOOT\" if self.is_safe_boot else \"\"\n        return (f\"Connected to {self.ip_address}: \"\n                f\"{self.model} R{self.revision} {self.serial} v{self.version}{safe_boot_str}\")", "hash": "ee81f210a535", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 231, "original_size_bytes": 231, "start_byte": 31061, "end_byte": 31292}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:21a989a1ae7d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "RobotInfo.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [826, 827], "text": "def __repr__(self):\n        return str(self)", "hash": "21a989a1ae7d", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 44, "original_size_bytes": 44, "start_byte": 31298, "end_byte": 31342}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:74b250a5c6b5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "from_command_response_string", "qualified_name": "RobotInfo.from_command_response_string", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [830, 867], "text": "def from_command_response_string(cls, input_string: str):\n        \"\"\"Generate robot information from standard robot connection response string.\n        String format should be \"Connected to {model} R{revision}{-virtual} v{fw_major_num}.{fw_minor_num}.{patch_num}\"\n        Parameters\n        ----------\n        input_string : string\n            Input string to be parsed.\n        \"\"\"\n        connection_string_regex = r\"Connected to (?P<model>[\\w|-]+) ?R?(?P<revision>\\d)?\"\n        connection_string_regex += r\"(?P<virtual>-virtual)?(?P<safe_boot>-safe-boot)?( v|_)?(?P<version>\\d+\\.\\d+\\.\\d+)\"\n        model: str = \"Unknown\"\n        revision = 0\n        virtual = False\n        safe_boot = False\n        try:\n            robot_info_regex = re.search(connection_string_regex, input_string)\n            if robot_info_regex is None:\n                raise ValueError(f'Could not parse robot info string \"{input_string}\"')\n            if robot_info_regex.group('model'):\n                model = robot_info_regex.group('model')\n            if robot_info_regex.group('revision'):\n                revision = int(robot_info_regex.group('revision'))\n            if robot_info_regex.group('virtual'):\n                virtual = True\n            if robot_info_regex.group('safe_boot'):\n                safe_boot = True\n            return cls(model=model,\n                       revision=revision,\n                       is_virtual=virtual,\n                       is_safe_boot=safe_boot,\n                       version=robot_info_regex.group('version'))\n        except Exception as exception:\n            raise ValueError(f'Could not parse robot info string \"{input_string}\", error: {exception}') from exception", "hash": "74b250a5c6b5", "chunk_type": "method", "node_type": "function_definition", "signature": "from_command_response_string(cls, input_string: str)", "docstring": "Generate robot information from standard robot connection response string.\n\n        String format should be \"Connected to {model} R{revision}{-virtual} v{fw_major_num}.{fw_minor_num}.{patch_num}\"\n\n        Parameters\n        ----------\n        input_string : string\n            Input string to be parsed.", "chunk_size_bytes": 1696, "original_size_bytes": 1701, "start_byte": 31365, "end_byte": 33066}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e0cd6e2bb453", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "get_serial_digit", "qualified_name": "RobotInfo.get_serial_digit", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [869, 889], "text": "def get_serial_digit(self) -> int:\n        \"\"\"Returns robot serial digits.\n           ie. M500-0123 -> 123 (for Meca500)\n            or\n           ie. 0123 -> 123 (for other)\n        Returns\n        -------\n        int\n            Returns robot serial digits\n        \"\"\"\n        if self.robot_model == MxRobotModel.MX_ROBOT_MODEL_M500_R4:\n            serial_digit = self._get_meca500_serial_digits()\n        elif self.robot_model == MxRobotModel.MX_ROBOT_MODEL_M500_R3:\n            serial_digit = self._get_meca500_serial_digits()\n        elif self.robot_model == MxRobotModel.MX_ROBOT_MODEL_M500_R2:\n            serial_digit = self._get_meca500_serial_digits()\n        else:\n            serial_digit = int(self.serial)\n        return serial_digit", "hash": "e0cd6e2bb453", "chunk_type": "method", "node_type": "function_definition", "signature": "get_serial_digit(self)", "docstring": "Returns robot serial digits.\n           ie. M500-0123 -> 123 (for Meca500)\n            or\n           ie. 0123 -> 123 (for other)\n\n        Returns\n        -------\n        int\n            Returns robot serial digits", "chunk_size_bytes": 747, "original_size_bytes": 816, "start_byte": 33072, "end_byte": 33888}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:062efb139f5f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_get_meca500_serial_digits", "qualified_name": "RobotInfo._get_meca500_serial_digits", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [891, 905], "text": "def _get_meca500_serial_digits(self) -> int:\n        \"\"\"Returns robot serial digits.\n           ie. M500-0123 -> 123\n        Returns\n        -------\n        int\n            Returns robot serial digits\n        \"\"\"\n        serial_split = self.serial.split('-')\n        if len(serial_split) != 2:\n            raise ValueError(f'Invalid serial number string received: {self.serial}, expecting \"M500-1234\"')\n        return int(serial_split[1])", "hash": "062efb139f5f", "chunk_type": "method", "node_type": "function_definition", "signature": "_get_meca500_serial_digits(self)", "docstring": "Returns robot serial digits.\n           ie. M500-0123 -> 123\n\n        Returns\n        -------\n        int\n            Returns robot serial digits", "chunk_size_bytes": 438, "original_size_bytes": 441, "start_byte": 33894, "end_byte": 34335}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:80d3fcd295a2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "UpdateProgress", "qualified_name": "UpdateProgress", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [908, 943], "text": "class UpdateProgress:\n    \"\"\"Class for storing the robot's firmware update status.\n    Attributes\n    ----------\n    in_progress : bool\n        Firmware update is in progress\n    complete : bool\n        Firmware update has completed\n    version : str\n        The firmware version being installed\n    error : boolean\n        Tells if the update failed\n    error_msg : str\n        Message that explains why the update failed\n    progress : str\n        Update progress message received from robot\n    step : str\n        String that describes the current firmware update step being performed\n    _last_print_timestamp : float\n        Last time we have printed the firmware update status\n\"\"\"", "hash": "80d3fcd295a2", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the robot's firmware update status.\n\n    Attributes\n    ----------\n    in_progress : bool\n        Firmware update is in progress\n    complete : bool\n        Firmware update has completed\n    version : str\n        The firmware version being installed\n    error : boolean\n        Tells if the update failed\n    error_msg : str\n        Message that explains why the update failed\n    progress : str\n        Update progress message received from robot\n    step : str\n        String that describes the current firmware update step being performed\n\n    _last_print_timestamp : float\n        Last time we have printed the firmware update status", "chunk_size_bytes": 686, "original_size_bytes": 688, "start_byte": 34338, "end_byte": 35383}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:251eeca57abc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "UpdateProgress.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [932, 943], "text": "def __init__(self):\n        self.in_progress = False\n        self.complete = False\n        self.version = \"\"\n        self.error = False\n        self.error_msg = \"\"\n        self.progress = 0.0\n        self.progress_str = \"\"  # For legacy update\n        self.step = \"\"\n        self._last_print_timestamp = 0.0", "hash": "251eeca57abc", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 307, "original_size_bytes": 351, "start_byte": 35032, "end_byte": 35383}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:3b9524a99a03", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "TimestampedData", "qualified_name": "TimestampedData", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [946, 1073], "text": "class TimestampedData:\n    \"\"\" Class for storing timestamped data (real-time data received from the robot)\n    Attributes\n    ----------\n    timestamp : number-like\n        Monotonic timestamp associated with data (in microseconds since robot last reboot)\n        This timestamp is stamped by the robot so it is not affected by host/network jitter\n    data : object\n        Data to be stored.\n    update_type : RtDataUpdateType\n        Update type of the TimestampedData. Refer to RtDataUpdateType for the various update types.\n\"\"\"", "hash": "3b9524a99a03", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing timestamped data (real-time data received from the robot)\n\n    Attributes\n    ----------\n    timestamp : number-like\n        Monotonic timestamp associated with data (in microseconds since robot last reboot)\n        This timestamp is stamped by the robot so it is not affected by host/network jitter\n    data : object\n        Data to be stored.\n    update_type : RtDataUpdateType\n        Update type of the TimestampedData. Refer to RtDataUpdateType for the various update types.", "chunk_size_bytes": 531, "original_size_bytes": 532, "start_byte": 35386, "end_byte": 39757}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b1c61153e995", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "TimestampedData.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [960, 965], "text": "def __init__(self, timestamp: int, data: list[float], update_type: RtDataUpdateType):\n        self.timestamp = timestamp\n        self.data = data\n        self.update_type = update_type\n        self.enabled = False if (update_type == RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL\n                                 or update_type == RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_UNAVAILABLE) else True", "hash": "b1c61153e995", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, timestamp: int, data: list[float], update_type: RtDataUpdateType)", "docstring": null, "chunk_size_bytes": 404, "original_size_bytes": 404, "start_byte": 35924, "end_byte": 36328}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:0e06a20dc782", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "TimestampedData.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [967, 968], "text": "def __str__(self):\n        return str([self.timestamp] + self.data)", "hash": "0e06a20dc782", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 67, "original_size_bytes": 67, "start_byte": 36334, "end_byte": 36401}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:21a989a1ae7d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "TimestampedData.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [970, 971], "text": "def __repr__(self):\n        return str(self)", "hash": "21a989a1ae7d", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 44, "original_size_bytes": 44, "start_byte": 36407, "end_byte": 36451}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d5a301cbf0e0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_if_disabled", "qualified_name": "TimestampedData.clear_if_disabled", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [973, 978], "text": "def clear_if_disabled(self):\n        \"\"\"Clear timestamp and data if not reported by the robot (not part of enabled real-time monitoring events)\n        \"\"\"\n        if not self.enabled:\n            self.timestamp = 0\n            self.data = TimestampedData.zeros(len(self.data), self.update_type).data", "hash": "d5a301cbf0e0", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_if_disabled(self)", "docstring": "Clear timestamp and data if not reported by the robot (not part of enabled real-time monitoring events)", "chunk_size_bytes": 300, "original_size_bytes": 300, "start_byte": 36457, "end_byte": 36757}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:828b89cf994a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "update_from_csv", "qualified_name": "TimestampedData.update_from_csv", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [980, 1007], "text": "def update_from_csv(self, input_string: str, allowed_nb_val: list[int] = None):\n        \"\"\"Update from comma-separated string, only if timestamp is newer.\n        Parameters\n        ----------\n        input_string : string\n            Comma-separated string. First value is timestamp, rest is data.\n        allowed_nb_val : list[int]\n            Optional list of accepted number of values. If not provided, input_string must contain at least as many\n            values as current contents of self.data.\n        \"\"\"\n        numbs = tools.string_to_numbers(input_string)\n        nb_values = len(numbs) - 1\n        if allowed_nb_val is None:\n            if (nb_values) < len(self.data):\n                raise ValueError(f'Cannot update TimestampedData, too few values received ({nb_values}).')\n            elif (nb_values) > len(self.data):\n                numbs = numbs[0:len(self.data) + 1]\n        else:\n            if nb_values not in allowed_nb_val:\n                raise ValueError(f'Cannot update TimestampedData, incorrect number of values received ({nb_values}).')\n        if numbs[0] >= self.timestamp:\n            self.timestamp = numbs[0]\n            self.data = numbs[1:]\n            self.enabled = True", "hash": "828b89cf994a", "chunk_type": "method", "node_type": "function_definition", "signature": "update_from_csv(self, input_string: str, allowed_nb_val: list[int] = None)", "docstring": "Update from comma-separated string, only if timestamp is newer.\n\n        Parameters\n        ----------\n        input_string : string\n            Comma-separated string. First value is timestamp, rest is data.\n        allowed_nb_val : list[int]\n            Optional list of accepted number of values. If not provided, input_string must contain at least as many\n            values as current contents of self.data.", "chunk_size_bytes": 1213, "original_size_bytes": 1217, "start_byte": 36763, "end_byte": 37980}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d3b7b15f8f37", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "update_from_data", "qualified_name": "TimestampedData.update_from_data", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1009, 1023], "text": "def update_from_data(self, timestamp: int, data: list[float]):\n        \"\"\"Update with data unless timestamp is older\n        Parameters\n        ----------\n        timestamp : number-like\n            Timestamp associated with data.\n        data : object\n            Data to be stored if timestamp is newer.\n        \"\"\"\n        if timestamp >= self.timestamp:\n            self.timestamp = timestamp\n            self.data = data\n            self.enabled = True", "hash": "d3b7b15f8f37", "chunk_type": "method", "node_type": "function_definition", "signature": "update_from_data(self, timestamp: int, data: list[float])", "docstring": "Update with data unless timestamp is older\n\n        Parameters\n        ----------\n        timestamp : number-like\n            Timestamp associated with data.\n        data : object\n            Data to be stored if timestamp is newer.", "chunk_size_bytes": 457, "original_size_bytes": 459, "start_byte": 37986, "end_byte": 38445}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:748428c47805", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "zeros", "qualified_name": "TimestampedData.zeros", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1026, 1041], "text": "def zeros(cls, length: int, update_type: RtDataUpdateType):\n        \"\"\" Construct empty TimestampedData object of specified length.\n        Parameters\n        ----------\n        length : int\n            Length of data to construct.\n        update_type : RtDataUpdateType\n            Update type of monitored data. Refer to RtDataUpdateType for the various update types\n        Return\n        ------\n        TimestampedData object\n        \"\"\"\n        return cls(0, [0.] * length, update_type)", "hash": "748428c47805", "chunk_type": "method", "node_type": "function_definition", "signature": "zeros(cls, length: int, update_type: RtDataUpdateType)", "docstring": "Construct empty TimestampedData object of specified length.\n\n        Parameters\n        ----------\n        length : int\n            Length of data to construct.\n        update_type : RtDataUpdateType\n            Update type of monitored data. Refer to RtDataUpdateType for the various update types\n\n        Return\n        ------\n        TimestampedData object", "chunk_size_bytes": 491, "original_size_bytes": 494, "start_byte": 38468, "end_byte": 38962}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:6bc9a345bb5e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__eq__", "qualified_name": "TimestampedData.__eq__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1043, 1057], "text": "def __eq__(self, other):\n        \"\"\" Return true if other object has identical timestamp and data.\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n        Return\n        ------\n        bool\n            True if objects have same timestamp and data.\n        \"\"\"\n        return other.timestamp == self.timestamp and other.data == self.data and other.update_type == self.update_type", "hash": "6bc9a345bb5e", "chunk_type": "method", "node_type": "function_definition", "signature": "__eq__(self, other)", "docstring": "Return true if other object has identical timestamp and data.\n\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n\n        Return\n        ------\n        bool\n            True if objects have same timestamp and data.", "chunk_size_bytes": 430, "original_size_bytes": 433, "start_byte": 38968, "end_byte": 39401}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:231437da534b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__ne__", "qualified_name": "TimestampedData.__ne__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1059, 1073], "text": "def __ne__(self, other):\n        \"\"\" Return true if other object has different timestamp or data.\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n        Return\n        ------\n        bool\n            True if objects have different timestamp or data.\n        \"\"\"\n        return not self == other", "hash": "231437da534b", "chunk_type": "method", "node_type": "function_definition", "signature": "__ne__(self, other)", "docstring": "Return true if other object has different timestamp or data.\n\n        Parameters\n        ----------\n        other : object\n            Object to compare against.\n\n        Return\n        ------\n        bool\n            True if objects have different timestamp or data.", "chunk_size_bytes": 347, "original_size_bytes": 350, "start_byte": 39407, "end_byte": 39757}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a15687b32422", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotRtData", "qualified_name": "RobotRtData", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1076, 1351], "text": "class RobotRtData:\n    \"\"\"Class for storing the internal real-time data of a Mecademic robot.\n    Most real-time data query methods from the programming guide were not implemented explicitly in Python.\n    The information, however, are available using the GetRobotRtData() method.\n    The attribute corresponding programming method is shown between parentheses.\n    The frequency and availability of real-time data depends on the monitoring interval and which monitoring\n    events are enabled. Monitoring events can be configured using SetMonitoringInterval() and SetRealTimeMonitoring().\n    Attributes\n    ----------\n    cycle_count : int\n        Number of real-time data updates received from the robot. The robot will send real-time data updates at\n        the interval defined by SetMonitoringInterval (16.6 milliseconds by default)\n    rt_target_joint_pos : TimestampedData\n        Controller desired joint positions in degrees [theta_1...6] (GetRtTargetJointPos).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_target_cart_pos : TimestampedData\n        Controller desired end effector pose [x, y, z, alpha, beta, gamma] (GetRtTargetCartPos).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_target_joint_vel : TimestampedData\n        Controller desired joint velocity in degrees/second [theta_dot_1...6] (GetRtTargetJointVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_TARGET_JOINT_VEL).\n    rt_target_cart_vel : TimestampedData\n        Controller desired end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z] (GetRtTargetCartVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_TARGET_CART_VEL).\n    rt_target_joint_torq : TimestampedData\n        Controller estimated torque ratio as a percent of maximum [torque_1...6] (GetRtJointTorq).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_TARGET_JOINT_TORQ).\n    rt_target_conf : TimestampedData\n        Controller joint configuration that corresponds to desired joint positions (GetRtTargetConf).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_target_conf_turn : TimestampedData\n        Controller last joint turn number that corresponds to desired joint positions (GetRtTargetConfTurn).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_joint_pos : TimestampedData\n        Drive-measured joint positions in degrees [theta_1...6] (GetRtJointPos).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_JOINT_POS).\n    rt_cart_pos : TimestampedData\n        Drive-measured end effector pose [x, y, z, alpha, beta, gamma] (GetRtCartPos).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CART_POS).\n    rt_joint_vel : TimestampedData\n        Drive-measured joint velocity in degrees/second [theta_dot_1...6] (GetRtJointVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_JOINT_VEL).\n    rt_joint_torq : TimestampedData\n        Drive-measured torque ratio as a percent of maximum [torque_1...6] (GetRtJointTorq).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_JOINT_TORQ).\n    rt_cart_vel : TimestampedData\n        Drive-measured end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z] (GetRtCartVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CART_VEL).\n    rt_conf : TimestampedData\n        Controller joint configuration that corresponds to drives-measured joint positions (GetRtConf).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CONF).\n    rt_conf_turn : TimestampedData\n        Controller last joint turn number that corresponds to drives-measured joint positions (GetRtConfTurn).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CONF_TURN).\n    rt_accelerometer : TimestampedData\n        Raw accelerometer measurements [accelerometer_id, x, y, z]. 16000 = 1g (GetRtAccelerometer).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_ACCELEROMETER).\n    rt_effective_time_scaling : TimestampedData\n        Effective time scaling ratio (GetRtEffectiveTimeScaling).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_EFFECTIVE_TIME_SCALING).\n    rt_vm : TimestampedData\n        Motor voltage readings (GetRtVm).\n        Contains: [Baseboard VM, Psu VM, SafeMcu VM, Drive 1 VM, Drive 1 VM, ..., Drive N VM]\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_VM).\n    rt_current : TimestampedData\n        Motor current readings (GetRtIm).\n        Contains: [Baseboard current]\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CURRENT).\n    rt_external_tool_status : TimestampedData\n        External tool status [sim_tool_type, physical_tool_type, homing_state, error_status, overload_error]\n        (GetRtExtToolStatus).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_valve_state : TimestampedData\n        Valve state [valve_opened[0], valve_opened[1]] (GetRtValveState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_gripper_state : TimestampedData\n        Gripper state [holding_part, target_pos_reached, opened, closed] (GetRtGripperState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_gripper_force : TimestampedData\n        Gripper force in % of maximum force (GetRtGripperForce).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_GRIPPER_FORCE).\n    rt_gripper_pos : TimestampedData\n        Gripper position in mm. (GetRtGripperPos)\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_GRIPPER_POS).\n    rt_io_module_status : TimestampedData\n        IO module status [bank_id, present, sim_mode, error_code] (GetRtIoStatus).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_io_module_outputs : TimestampedData\n        IO module's digital outputs state [output[0], output[1], ...] (GetRtOutputState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_io_module_inputs : TimestampedData\n        IO module's digital inputs state [input[0], input[1], ...] (GetRtInputState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_vacuum_state : TimestampedData\n        IO module's vacuum gripper state [vacuum_on, purge_on, holding_part] (GetRtVacuumState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_vacuum_pressure: TimestampedData\n        IO module's vacuum current pressure in kPa (GetRtVacuumPressure).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_VACUUM_PRESSURE).\n    rt_wrf : TimestampedData\n        Current definition of the WRF w.r.t. the BRF with timestamp. Cartesian data are in mm, Euler angles in degrees.\n        [cartesian coordinates x, y, z, Euler angles omega-x, omega-y, omega-z] (GetRtWrf)\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_trf : TimestampedData\n        Current definition of the TRF w.r.t. the FRF with timestamp. cartesian data are in mm, Euler angles in degrees.\n        [cartesian coordinates x, y, z, Euler angles omega-x, omega-y, omega-z] (GetRtTrf)\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_checkpoint : TimestampedData\n        Last executed checkpoint with timestamp. (GetCheckpoint)\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n\"\"\"", "hash": "a15687b32422", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the internal real-time data of a Mecademic robot.\n\n    Most real-time data query methods from the programming guide were not implemented explicitly in Python.\n    The information, however, are available using the GetRobotRtData() method.\n    The attribute corresponding programming method is shown between parentheses.\n\n    The frequency and availability of real-time data depends on the monitoring interval and which monitoring\n    events are enabled. Monitoring events can be configured using SetMonitoringInterval() and SetRealTimeMonitoring().\n\n    Attributes\n    ----------\n    cycle_count : int\n        Number of real-time data updates received from the robot. The robot will send real-time data updates at\n        the interval defined by SetMonitoringInterval (16.6 milliseconds by default)\n    rt_target_joint_pos : TimestampedData\n        Controller desired joint positions in degrees [theta_1...6] (GetRtTargetJointPos).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_target_cart_pos : TimestampedData\n        Controller desired end effector pose [x, y, z, alpha, beta, gamma] (GetRtTargetCartPos).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_target_joint_vel : TimestampedData\n        Controller desired joint velocity in degrees/second [theta_dot_1...6] (GetRtTargetJointVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_TARGET_JOINT_VEL).\n    rt_target_cart_vel : TimestampedData\n        Controller desired end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z] (GetRtTargetCartVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_TARGET_CART_VEL).\n    rt_target_joint_torq : TimestampedData\n        Controller estimated torque ratio as a percent of maximum [torque_1...6] (GetRtJointTorq).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_TARGET_JOINT_TORQ).\n    rt_target_conf : TimestampedData\n        Controller joint configuration that corresponds to desired joint positions (GetRtTargetConf).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_target_conf_turn : TimestampedData\n        Controller last joint turn number that corresponds to desired joint positions (GetRtTargetConfTurn).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n\n    rt_joint_pos : TimestampedData\n        Drive-measured joint positions in degrees [theta_1...6] (GetRtJointPos).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_JOINT_POS).\n    rt_cart_pos : TimestampedData\n        Drive-measured end effector pose [x, y, z, alpha, beta, gamma] (GetRtCartPos).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CART_POS).\n    rt_joint_vel : TimestampedData\n        Drive-measured joint velocity in degrees/second [theta_dot_1...6] (GetRtJointVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_JOINT_VEL).\n    rt_joint_torq : TimestampedData\n        Drive-measured torque ratio as a percent of maximum [torque_1...6] (GetRtJointTorq).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_JOINT_TORQ).\n    rt_cart_vel : TimestampedData\n        Drive-measured end effector velocity with timestamp. Linear values in mm/s, angular in deg/s.\n        [linear_velocity_vector x, y, z, angular_velocity_vector omega-x, omega-y, omega-z] (GetRtCartVel).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CART_VEL).\n    rt_conf : TimestampedData\n        Controller joint configuration that corresponds to drives-measured joint positions (GetRtConf).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CONF).\n    rt_conf_turn : TimestampedData\n        Controller last joint turn number that corresponds to drives-measured joint positions (GetRtConfTurn).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CONF_TURN).\n\n    rt_accelerometer : TimestampedData\n        Raw accelerometer measurements [accelerometer_id, x, y, z]. 16000 = 1g (GetRtAccelerometer).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_ACCELEROMETER).\n    rt_effective_time_scaling : TimestampedData\n        Effective time scaling ratio (GetRtEffectiveTimeScaling).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_EFFECTIVE_TIME_SCALING).\n    rt_vm : TimestampedData\n        Motor voltage readings (GetRtVm).\n        Contains: [Baseboard VM, Psu VM, SafeMcu VM, Drive 1 VM, Drive 1 VM, ..., Drive N VM]\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_VM).\n    rt_current : TimestampedData\n        Motor current readings (GetRtIm).\n        Contains: [Baseboard current]\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_CURRENT).\n\n    rt_external_tool_status : TimestampedData\n        External tool status [sim_tool_type, physical_tool_type, homing_state, error_status, overload_error]\n        (GetRtExtToolStatus).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_valve_state : TimestampedData\n        Valve state [valve_opened[0], valve_opened[1]] (GetRtValveState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_gripper_state : TimestampedData\n        Gripper state [holding_part, target_pos_reached, opened, closed] (GetRtGripperState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_gripper_force : TimestampedData\n        Gripper force in % of maximum force (GetRtGripperForce).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_GRIPPER_FORCE).\n    rt_gripper_pos : TimestampedData\n        Gripper position in mm. (GetRtGripperPos)\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_GRIPPER_POS).\n\n    rt_io_module_status : TimestampedData\n        IO module status [bank_id, present, sim_mode, error_code] (GetRtIoStatus).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_io_module_outputs : TimestampedData\n        IO module's digital outputs state [output[0], output[1], ...] (GetRtOutputState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_io_module_inputs : TimestampedData\n        IO module's digital inputs state [input[0], input[1], ...] (GetRtInputState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_vacuum_state : TimestampedData\n        IO module's vacuum gripper state [vacuum_on, purge_on, holding_part] (GetRtVacuumState).\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_vacuum_pressure: TimestampedData\n        IO module's vacuum current pressure in kPa (GetRtVacuumPressure).\n        *** Not enabled by default. To enable it, use SetRealTimeMonitoring(MX_ST_RT_VACUUM_PRESSURE).\n\n    rt_wrf : TimestampedData\n        Current definition of the WRF w.r.t. the BRF with timestamp. Cartesian data are in mm, Euler angles in degrees.\n        [cartesian coordinates x, y, z, Euler angles omega-x, omega-y, omega-z] (GetRtWrf)\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_trf : TimestampedData\n        Current definition of the TRF w.r.t. the FRF with timestamp. cartesian data are in mm, Euler angles in degrees.\n        [cartesian coordinates x, y, z, Euler angles omega-x, omega-y, omega-z] (GetRtTrf)\n        Always enabled and available (regardless of SetRealTimeMonitoring options).\n    rt_checkpoint : TimestampedData\n        Last executed checkpoint with timestamp. (GetCheckpoint)\n        Always enabled and available (regardless of SetRealTimeMonitoring options).", "chunk_size_bytes": 8192, "original_size_bytes": 8200, "start_byte": 39760, "end_byte": 57149}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:64b75b844255", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotRtData.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1198, 1201], "text": "def __init__(self, num_joints: int):\n        self._init_timestamped_data(num_joints)\n        self.max_queue_size = 0\n        self.cycle_count = 0", "hash": "64b75b844255", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, num_joints: int)", "docstring": null, "chunk_size_bytes": 145, "original_size_bytes": 145, "start_byte": 47966, "end_byte": 48111}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:332d2bc87758", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_init_timestamped_data", "qualified_name": "RobotRtData._init_timestamped_data", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1203, 1296], "text": "def _init_timestamped_data(self, num_joints: int):\n        \"\"\"Initialize timestamped data class members according to detected robot model (number of joints)\"\"\"\n        nb_cart_val = num_joints  # 4 degrees of liberty for 4 joints robots, 6 for 6 joint robots\n        nb_conf_val = 3 if num_joints == 6 else 1  # 4 degrees of liberty for 4 joints robots, 6 for 6 joint robots\n        self.rt_target_joint_pos = TimestampedData.zeros(\n            num_joints, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL)  # microseconds timestamp, degrees\n        self.rt_target_cart_pos = TimestampedData.zeros(\n            nb_cart_val, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL)  # microseconds timestamp, mm and degrees\n        self.rt_target_joint_vel = TimestampedData.zeros(\n            num_joints,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, degrees/second\n        self.rt_target_cart_vel = TimestampedData.zeros(\n            nb_cart_val,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, mm/s and deg/s\n        self.rt_target_joint_torq = TimestampedData.zeros(\n            num_joints,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, percent of maximum\n        self.rt_target_conf = TimestampedData.zeros(nb_conf_val, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n        self.rt_target_conf_turn = TimestampedData.zeros(1, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n        self.rt_joint_pos = TimestampedData.zeros(\n            num_joints, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, degrees\n        self.rt_cart_pos = TimestampedData.zeros(\n            nb_cart_val,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, mm and degrees\n        self.rt_joint_vel = TimestampedData.zeros(\n            num_joints,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, degrees/second\n        self.rt_joint_torq = TimestampedData.zeros(\n            num_joints,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, percent of maximum\n        self.rt_cart_vel = TimestampedData.zeros(\n            nb_cart_val,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, mm/s and deg/s\n        self.rt_conf = TimestampedData.zeros(nb_conf_val, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n        self.rt_conf_turn = TimestampedData.zeros(1, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n        self.rt_effective_time_scaling = TimestampedData.zeros(1,\n                                                               RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL\n                                                               )  # microseconds timestamp, effective time scaling ratio\n        self.rt_vm = TimestampedData.zeros(\n            num_joints + 3, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL\n        )  # microseconds timestamp, Baseboard VM, Psu VM, SafeMcu Vm, Drive 1 VM, Drive 2 Vm, ...\n        self.rt_current = TimestampedData.zeros(\n            1, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, Baseboard current\n        self.rt_abs_joint_pos = TimestampedData.zeros(\n            num_joints, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, degrees\n        self.rt_accelerometer: dict[int, TimestampedData] = dict()  # 16000 = 1g\n        self.rt_external_tool_status = TimestampedData.zeros(\n            5, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED\n        )  # microseconds timestamp, sim tool type, physical tool type, homed, error, overload\n        self.rt_valve_state = TimestampedData.zeros(\n            MX_EXT_TOOL_MPM500_NB_VALVES,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # microseconds timestamp, valve1 opened, valve2 opened\n        self.rt_gripper_state = TimestampedData.zeros(\n            4, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED\n        )  # microseconds timestamp, holding part, target pos reached, closed, opened\n        self.rt_gripper_force = TimestampedData.zeros(\n            1, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, gripper force [%]\n        self.rt_gripper_pos = TimestampedData.zeros(\n            1,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, gripper position [mm]\n        self.rt_io_module_status = TimestampedData.zeros(4, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n        self.rt_io_module_outputs = TimestampedData.zeros(\n            0, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # Resized later\n        self.rt_io_module_inputs = TimestampedData.zeros(\n            0, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # Resized later\n        self.rt_vacuum_state = TimestampedData.zeros(3, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED\n                                                     )  # microseconds timestamp, vacuum on/off, purge on/off, holding\n        self.rt_vacuum_pressure = TimestampedData.zeros(\n            1,\n            RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_CYCLICAL_OPTIONAL)  # microseconds timestamp, vacuum pressure [kPa]\n        self.rt_sig_gen_status = TimestampedData.zeros(4, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)\n        self.rt_sig_gen_outputs = TimestampedData.zeros(\n            0, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # Resized later\n        self.rt_sig_gen_inputs = TimestampedData.zeros(\n            0, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # Resized later\n        self.rt_wrf = TimestampedData.zeros(\n            nb_cart_val, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # microseconds timestamp, mm and degrees\n        self.rt_trf = TimestampedData.zeros(\n            nb_cart_val, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # microseconds timestamp, mm and degrees\n        self.rt_checkpoint = TimestampedData.zeros(\n            1, RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED)  # microseconds timestamp, checkpointId", "hash": "332d2bc87758", "chunk_type": "method", "node_type": "function_definition", "signature": "_init_timestamped_data(self, num_joints: int)", "docstring": "Initialize timestamped data class members according to detected robot model (number of joints)", "chunk_size_bytes": 6351, "original_size_bytes": 6715, "start_byte": 48117, "end_byte": 54832}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:8c9a2d7e6d3e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_for_each_rt_data", "qualified_name": "RobotRtData._for_each_rt_data", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1298, 1313], "text": "def _for_each_rt_data(self):\n        \"\"\"Iterates for each TimestampedData type member of this class (rt_joint_pos, rt_cart_pos, etc.)\n        \"\"\"\n        member_names = vars(self)\n        for member_name in member_names:\n            if not member_name.startswith('rt_'):\n                continue\n            member = getattr(self, member_name)\n            if isinstance(member, TimestampedData):\n                yield member\n            elif isinstance(member, dict):\n                for sub_member in member.values():\n                    yield sub_member", "hash": "8c9a2d7e6d3e", "chunk_type": "method", "node_type": "function_definition", "signature": "_for_each_rt_data(self)", "docstring": "Iterates for each TimestampedData type member of this class (rt_joint_pos, rt_cart_pos, etc.)", "chunk_size_bytes": 555, "original_size_bytes": 740, "start_byte": 54838, "end_byte": 55578}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:df2267c8fd91", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_reset_enabled", "qualified_name": "RobotRtData._reset_enabled", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1315, 1322], "text": "def _reset_enabled(self):\n        \"\"\"Clear the \"enabled\" flag of each member of this class of type TimestampedData\n        \"\"\"\n        for rt_data in self._for_each_rt_data():\n            rt_data.enabled = False\n        self.rt_accelerometer.clear()", "hash": "df2267c8fd91", "chunk_type": "method", "node_type": "function_definition", "signature": "_reset_enabled(self)", "docstring": "Clear the \"enabled\" flag of each member of this class of type TimestampedData", "chunk_size_bytes": 249, "original_size_bytes": 299, "start_byte": 55584, "end_byte": 55883}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:473e8bedda98", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "_clear_accelerometer_data_if_disabled", "qualified_name": "RobotRtData._clear_accelerometer_data_if_disabled", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1324, 1329], "text": "def _clear_accelerometer_data_if_disabled(self):\n        \"\"\"Clear the accelerometer data dictionary member\n        \"\"\"\n        for accelerometer_idx in list(self.rt_accelerometer.keys()):\n            if self.rt_accelerometer[accelerometer_idx].enabled is False:\n                del self.rt_accelerometer[accelerometer_idx]", "hash": "473e8bedda98", "chunk_type": "method", "node_type": "function_definition", "signature": "_clear_accelerometer_data_if_disabled(self)", "docstring": "Clear the accelerometer data dictionary member", "chunk_size_bytes": 322, "original_size_bytes": 322, "start_byte": 55889, "end_byte": 56211}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a49e5ba1df61", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_if_outdated", "qualified_name": "RobotRtData.clear_if_outdated", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1331, 1343], "text": "def clear_if_outdated(self):\n        \"\"\"Clear the TimestampedData of each member if the data is outdated\n        \"\"\"\n        reference_timestamp = self.rt_target_joint_pos.timestamp  # Present at every cycle\n        for rt_data in self._for_each_rt_data():\n            if (rt_data.timestamp != reference_timestamp\n                    and rt_data.update_type != RtDataUpdateType.MX_RT_DATA_UPDATE_TYPE_EVENT_BASED):\n                rt_data.enabled = False\n                rt_data.clear_if_disabled()\n        self._clear_accelerometer_data_if_disabled()", "hash": "a49e5ba1df61", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_if_outdated(self)", "docstring": "Clear the TimestampedData of each member if the data is outdated", "chunk_size_bytes": 551, "original_size_bytes": 622, "start_byte": 56217, "end_byte": 56839}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:060a4dd2a018", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "clear_if_disabled", "qualified_name": "RobotRtData.clear_if_disabled", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1345, 1351], "text": "def clear_if_disabled(self):\n        \"\"\"Clear real-time values that are disabled (not reported by robot's current real-time monitoring configuration)\n        \"\"\"\n        for rt_data in self._for_each_rt_data():\n            rt_data.clear_if_disabled()\n        self._clear_accelerometer_data_if_disabled()", "hash": "060a4dd2a018", "chunk_type": "method", "node_type": "function_definition", "signature": "clear_if_disabled(self)", "docstring": "Clear real-time values that are disabled (not reported by robot's current real-time monitoring configuration)", "chunk_size_bytes": 303, "original_size_bytes": 304, "start_byte": 56845, "end_byte": 57149}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:baab357cf9de", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotStatus", "qualified_name": "RobotStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1354, 1433], "text": "class RobotStatus:\n    \"\"\"Class for storing the status of a Mecademic robot.\n    Attributes\n    ----------\n    activation_state : bool\n        True if the robot is activated.\n    homing_state : bool\n        True if the robot is homed.\n    simulation_mode : MxRobotSimulationMode\n        True if the robot is in simulation-only mode (fast or real-time)\n    recovery_mode : bool\n        True if the robot is in recovery mode.\n    error_status : bool\n        True if the robot is in error.\n    error_code : int\n        Current robot error code, or 0 if the robot is not in error state.\n        Note: Only supported if connecting to the on port MX_ROBOT_TCP_PORT_CONTROL_JSON or MX_ROBOT_TCP_PORT_FEED_JSON.\n              Otherwise error_code will be None (unknown).\n    pstop2State : MxStopState\n        *** IMPORTANT NOTE: PStop2 is not safety-rated on Meca500 robots ***\n        *** Deprecated. Use RobotSafetyStatus.pstop2_state instead.\n        Current PStop2 status.\n    estopState : MxStopState\n        *** Deprecated. Use RobotSafetyStatus.estop_state instead.\n        Current EStop status.\n        Note that Meca500 revision 3 or older never report this condition because these robots's power supply\n        will be shutdown completely in case of EStop (and thus this API will get disconnected from the robot instead).\n    pause_motion_status : bool\n        True if motion is currently paused.\n    end_of_block_status : bool\n        True if robot is not moving and motion queue is empty.\n        Note: We recommend not using end_of_block_status to detect when robot has finished executing previously sent\n              commands. Some posted commands may still be transient (on the network for example) and the robot may,\n              in some cases, declare end-of-block in-between two commands.\n              Instead, we recommend using checkpoints or the WaitIdle method.\n    brakes_engaged : bool\n        True if robot brakes are engaged.\n        This is relevant only when robot is deactivated (brakes are automatically disengaged upon robot activation).\n    connection_watchdog_enabled : bool\n        True if the connection watchdog is currently enabled/active (see ConnectionWatchdog API call)\n\"\"\"", "hash": "baab357cf9de", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the status of a Mecademic robot.\n\n    Attributes\n    ----------\n    activation_state : bool\n        True if the robot is activated.\n    homing_state : bool\n        True if the robot is homed.\n    simulation_mode : MxRobotSimulationMode\n        True if the robot is in simulation-only mode (fast or real-time)\n    recovery_mode : bool\n        True if the robot is in recovery mode.\n    error_status : bool\n        True if the robot is in error.\n    error_code : int\n        Current robot error code, or 0 if the robot is not in error state.\n        Note: Only supported if connecting to the on port MX_ROBOT_TCP_PORT_CONTROL_JSON or MX_ROBOT_TCP_PORT_FEED_JSON.\n              Otherwise error_code will be None (unknown).\n    pstop2State : MxStopState\n        *** IMPORTANT NOTE: PStop2 is not safety-rated on Meca500 robots ***\n        *** Deprecated. Use RobotSafetyStatus.pstop2_state instead.\n        Current PStop2 status.\n    estopState : MxStopState\n        *** Deprecated. Use RobotSafetyStatus.estop_state instead.\n        Current EStop status.\n        Note that Meca500 revision 3 or older never report this condition because these robots's power supply\n        will be shutdown completely in case of EStop (and thus this API will get disconnected from the robot instead).\n    pause_motion_status : bool\n        True if motion is currently paused.\n    end_of_block_status : bool\n        True if robot is not moving and motion queue is empty.\n        Note: We recommend not using end_of_block_status to detect when robot has finished executing previously sent\n              commands. Some posted commands may still be transient (on the network for example) and the robot may,\n              in some cases, declare end-of-block in-between two commands.\n              Instead, we recommend using checkpoints or the WaitIdle method.\n    brakes_engaged : bool\n        True if robot brakes are engaged.\n        This is relevant only when robot is deactivated (brakes are automatically disengaged upon robot activation).\n    connection_watchdog_enabled : bool\n        True if the connection watchdog is currently enabled/active (see ConnectionWatchdog API call)", "chunk_size_bytes": 2208, "original_size_bytes": 2209, "start_byte": 57152, "end_byte": 61145}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:4e3d3dbb2b16", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1397, 1412], "text": "def __init__(self):\n        self.activation_state = False\n        self.homing_state = False\n        self.simulation_mode = MxRobotSimulationMode.MX_SIM_MODE_DISABLED\n        self.recovery_mode = False\n        self.error_status = False\n        self.error_code: Optional[int] = None\n        self.pstop2State = MxStopState.MX_STOP_STATE_RESET  # Deprecated, moved to RobotSafetyStatus.pstop2_state\n        self.estopState = MxStopState.MX_STOP_STATE_RESET  # Deprecated, moved to RobotSafetyStatus.estop_state\n        self.pause_motion_status = False\n        self.end_of_block_status = False\n        self.brakes_engaged = False\n        self.connection_watchdog_enabled = False", "hash": "4e3d3dbb2b16", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 673, "original_size_bytes": 756, "start_byte": 59367, "end_byte": 60123}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:3788b6f37d25", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "RobotStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1414, 1425], "text": "def __str__(self) -> str:\n        error_str = f'{self.error_status}' if (self.error_code is None\n                                               or self.error_code == 0) else f'{self.error_code}'\n        return (f\"Activated: {self.activation_state}, \"\n                f\"homed: {self.homing_state}, \"\n                f\"sim: {self.simulation_mode}, \"\n                f\"recovery mode: {self.recovery_mode}, \"\n                f\"error: {error_str}, \"\n                f\"pause motion: {str(self.pause_motion_status)}, \"\n                f\"EOB: {self.end_of_block_status}, \"\n                f\"brakes engaged: {self.brakes_engaged}, \"\n                f\"connection watchdog: {'enabled' if self.connection_watchdog_enabled else 'disabled'}\")", "hash": "3788b6f37d25", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 728, "original_size_bytes": 728, "start_byte": 60129, "end_byte": 60857}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a352eff962de", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "can_move", "qualified_name": "RobotStatus.can_move", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1427, 1433], "text": "def can_move(self) -> bool:\n        \"\"\"Tells if robot can currently be moved (state is homed, or activated in recovery mode)\n        Returns:\n            bool: true if robot can be moved\n        \"\"\"\n        return self.homing_state or (self.activation_state and self.recovery_mode)", "hash": "a352eff962de", "chunk_type": "method", "node_type": "function_definition", "signature": "can_move(self)", "docstring": "Tells if robot can currently be moved (state is homed, or activated in recovery mode)\n\n        Returns:\n            bool: true if robot can be moved", "chunk_size_bytes": 281, "original_size_bytes": 282, "start_byte": 60863, "end_byte": 61145}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f12b1f513f81", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotStaticSafetyStopMasks", "qualified_name": "RobotStaticSafetyStopMasks", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1436, 1457], "text": "class RobotStaticSafetyStopMasks:\n    \"\"\"Various useful bit masks used to categorize safety signals\n    Attributes\n    ----------\n    clearedByPsu : int\n        Bit mask to identify safety signals that must be reset using the power supply reset function.\n    withVmOff : int\n        Bit mask to identify safety signals that cause motor voltage to be removed.\n        These are category 1 safety stop signals (Estop, PStop1, etc.).\n    maskedInManualMode : int\n        Bit mask to identify safety signals masked when the robot is in \"manual\" operation mode (PStop1, PStop2)\n    \"\"\"", "hash": "f12b1f513f81", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Various useful bit masks used to categorize safety signals\n\n    Attributes\n    ----------\n    clearedByPsu : int\n        Bit mask to identify safety signals that must be reset using the power supply reset function.\n    withVmOff : int\n        Bit mask to identify safety signals that cause motor voltage to be removed.\n        These are category 1 safety stop signals (Estop, PStop1, etc.).\n    maskedInManualMode : int\n        Bit mask to identify safety signals masked when the robot is in \"manual\" operation mode (PStop1, PStop2)", "chunk_size_bytes": 580, "original_size_bytes": 582, "start_byte": 61148, "end_byte": 62058}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:7484ce0f14f8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotStaticSafetyStopMasks.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1451, 1457], "text": "def __init__(self):\n        self.clearedByPsu = 0\n        self.withVmOff = 0\n        self.maskedInManualMode = 0", "hash": "7484ce0f14f8", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 112, "original_size_bytes": 322, "start_byte": 61736, "end_byte": 62058}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a77a0be60b60", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotPowerSupplyInputs", "qualified_name": "RobotPowerSupplyInputs", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1460, 1563], "text": "class RobotPowerSupplyInputs:\n    \"\"\" Class for storing robot's power supply physical input states\n        Attributes\n        ----------\n        psu_input_mask : int\n            Bit mask that summarizes all power supply input states. Use bits from MxPsuInputMask\n        estop_asserted : bool\n            Indicate if the EStop (emergency stop) signal on the power supply is asserted (robot will stop)\n        pstop1_asserted : bool\n            Indicate if the PStop1 (protective stop category 1) signal on the power supply is asserted (robot will stop)\n        pstop2_asserted : bool\n            Indicate if the PStop2 (protective stop category 2) signal on the power supply is asserted (robot will stop)\n        reset_ext_asserted : bool\n            Indicate if the 'reset' input signal on the power supply is asserted (requesting for a reset)\n        reset_keypad_pressed : bool\n            Indicate if the 'reset' keypad button on the power supply is pressed\n        enabling_device_asserted : bool\n            Indicate if the enabling device power supply input indicates that the enabling device is pressed\n    \"\"\"", "hash": "a77a0be60b60", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing robot's power supply physical input states\n\n        Attributes\n        ----------\n        psu_input_mask : int\n            Bit mask that summarizes all power supply input states. Use bits from MxPsuInputMask\n        estop_asserted : bool\n            Indicate if the EStop (emergency stop) signal on the power supply is asserted (robot will stop)\n        pstop1_asserted : bool\n            Indicate if the PStop1 (protective stop category 1) signal on the power supply is asserted (robot will stop)\n        pstop2_asserted : bool\n            Indicate if the PStop2 (protective stop category 2) signal on the power supply is asserted (robot will stop)\n        reset_ext_asserted : bool\n            Indicate if the 'reset' input signal on the power supply is asserted (requesting for a reset)\n        reset_keypad_pressed : bool\n            Indicate if the 'reset' keypad button on the power supply is pressed\n        enabling_device_asserted : bool\n            Indicate if the enabling device power supply input indicates that the enabling device is pressed", "chunk_size_bytes": 1118, "original_size_bytes": 1119, "start_byte": 62061, "end_byte": 67141}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e1ed8c7c5006", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotPowerSupplyInputs.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1481, 1488], "text": "def __init__(self):\n        self.psu_input_mask = 0\n        self.estop_asserted = False\n        self.pstop1_asserted = False\n        self.pstop2_asserted = False\n        self.reset_ext_asserted = False\n        self.reset_keypad_pressed = False\n        self.enabling_device_asserted = False", "hash": "e1ed8c7c5006", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 289, "original_size_bytes": 289, "start_byte": 63186, "end_byte": 63475}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:9c16a7e7af62", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_psu_input_mask", "qualified_name": "RobotPowerSupplyInputs.set_psu_input_mask", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1490, 1506], "text": "def set_psu_input_mask(self, input_mask: Union[MxPsuInputMask, int]):\n        \"\"\"Update the power supply input mask, and update corresponding individual booleans (estop_asserted, etc.)\n        Parameters\n        ----------\n        input_mask : Union[MxPsuInputMask,int]\n            Power supply input mask to set\n        \"\"\"\n        self.psu_input_mask = int(input_mask)\n        self.estop_asserted = (self.psu_input_mask & MxPsuInputMask.MX_PSU_INPUT_ESTOP) != 0\n        self.pstop1_asserted = (self.psu_input_mask & MxPsuInputMask.MX_PSU_INPUT_PSTOP1) != 0\n        self.pstop2_asserted = (self.psu_input_mask & MxPsuInputMask.MX_PSU_INPUT_PSTOP2) != 0\n        self.reset_ext_asserted = (self.psu_input_mask & MxPsuInputMask.MX_PSU_INPUT_RESET_EXT) != 0\n        self.reset_keypad_pressed = (self.psu_input_mask & MxPsuInputMask.MX_PSU_INPUT_RESET_KEYPAD) != 0\n        self.enabling_device_asserted = (self.psu_input_mask & MxPsuInputMask.MX_PSU_INPUT_ENABLING_DEVICE) != 0", "hash": "9c16a7e7af62", "chunk_type": "method", "node_type": "function_definition", "signature": "set_psu_input_mask(self, input_mask: Union[MxPsuInputMask, int])", "docstring": "Update the power supply input mask, and update corresponding individual booleans (estop_asserted, etc.)\n\n        Parameters\n        ----------\n        input_mask : Union[MxPsuInputMask,int]\n            Power supply input mask to set", "chunk_size_bytes": 973, "original_size_bytes": 1012, "start_byte": 63481, "end_byte": 64493}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:bf4b668562d1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_estop_asserted", "qualified_name": "RobotPowerSupplyInputs.set_estop_asserted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1508, 1514], "text": "def set_estop_asserted(self, state: bool):\n        \"\"\" Update estop_asserted and update the mask (psuInputMask) accordingly \"\"\"\n        self.estop_asserted = state\n        if state:\n            self.psu_input_mask |= MxPsuInputMask.MX_PSU_INPUT_ESTOP\n        else:\n            self.psu_input_mask &= ~MxPsuInputMask.MX_PSU_INPUT_ESTOP", "hash": "bf4b668562d1", "chunk_type": "method", "node_type": "function_definition", "signature": "set_estop_asserted(self, state: bool)", "docstring": "Update estop_asserted and update the mask (psuInputMask) accordingly", "chunk_size_bytes": 334, "original_size_bytes": 334, "start_byte": 64499, "end_byte": 64833}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e4c1604384cc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_pstop1_asserted", "qualified_name": "RobotPowerSupplyInputs.set_pstop1_asserted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1516, 1522], "text": "def set_pstop1_asserted(self, state: bool):\n        \"\"\" Update pstop1_asserted and update the mask (psuInputMask) accordingly \"\"\"\n        self.pstop1_asserted = state\n        if state:\n            self.psu_input_mask |= MxPsuInputMask.MX_PSU_INPUT_PSTOP1\n        else:\n            self.psu_input_mask &= ~MxPsuInputMask.MX_PSU_INPUT_PSTOP1", "hash": "e4c1604384cc", "chunk_type": "method", "node_type": "function_definition", "signature": "set_pstop1_asserted(self, state: bool)", "docstring": "Update pstop1_asserted and update the mask (psuInputMask) accordingly", "chunk_size_bytes": 339, "original_size_bytes": 339, "start_byte": 64839, "end_byte": 65178}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e1a4f8992058", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_pstop2_asserted", "qualified_name": "RobotPowerSupplyInputs.set_pstop2_asserted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1524, 1530], "text": "def set_pstop2_asserted(self, state: bool):\n        \"\"\" Update pstop2_asserted and update the mask (psuInputMask) accordingly \"\"\"\n        self.pstop2_asserted = state\n        if state:\n            self.psu_input_mask |= MxPsuInputMask.MX_PSU_INPUT_PSTOP2\n        else:\n            self.psu_input_mask &= ~MxPsuInputMask.MX_PSU_INPUT_PSTOP2", "hash": "e1a4f8992058", "chunk_type": "method", "node_type": "function_definition", "signature": "set_pstop2_asserted(self, state: bool)", "docstring": "Update pstop2_asserted and update the mask (psuInputMask) accordingly", "chunk_size_bytes": 339, "original_size_bytes": 339, "start_byte": 65184, "end_byte": 65523}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:197179500eb0", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_reset_ext_asserted", "qualified_name": "RobotPowerSupplyInputs.set_reset_ext_asserted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1532, 1538], "text": "def set_reset_ext_asserted(self, state: bool):\n        \"\"\" Update reset_ext_asserted and update the mask (psuInputMask) accordingly \"\"\"\n        self.reset_ext_asserted = state\n        if state:\n            self.psu_input_mask |= MxPsuInputMask.MX_PSU_INPUT_RESET_EXT\n        else:\n            self.psu_input_mask &= ~MxPsuInputMask.MX_PSU_INPUT_RESET_EXT", "hash": "197179500eb0", "chunk_type": "method", "node_type": "function_definition", "signature": "set_reset_ext_asserted(self, state: bool)", "docstring": "Update reset_ext_asserted and update the mask (psuInputMask) accordingly", "chunk_size_bytes": 354, "original_size_bytes": 354, "start_byte": 65529, "end_byte": 65883}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:7b94e79a0cb4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_reset_keypad_asserted", "qualified_name": "RobotPowerSupplyInputs.set_reset_keypad_asserted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1540, 1546], "text": "def set_reset_keypad_asserted(self, state: bool):\n        \"\"\" Update reset_keypad_asserted and update the mask (psuInputMask) accordingly \"\"\"\n        self.reset_keypad_pressed = state\n        if state:\n            self.psu_input_mask |= MxPsuInputMask.MX_PSU_INPUT_RESET_KEYPAD\n        else:\n            self.psu_input_mask &= ~MxPsuInputMask.MX_PSU_INPUT_RESET_KEYPAD", "hash": "7b94e79a0cb4", "chunk_type": "method", "node_type": "function_definition", "signature": "set_reset_keypad_asserted(self, state: bool)", "docstring": "Update reset_keypad_asserted and update the mask (psuInputMask) accordingly", "chunk_size_bytes": 368, "original_size_bytes": 368, "start_byte": 65889, "end_byte": 66257}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:fc77a61519a3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_enabling_device_asserted", "qualified_name": "RobotPowerSupplyInputs.set_enabling_device_asserted", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1548, 1554], "text": "def set_enabling_device_asserted(self, state: bool):\n        \"\"\" Update enabling_device_asserted and update the mask (psuInputMask) accordingly \"\"\"\n        self.enabling_device_asserted = state\n        if state:\n            self.psu_input_mask |= MxPsuInputMask.MX_PSU_INPUT_ENABLING_DEVICE\n        else:\n            self.psu_input_mask &= ~MxPsuInputMask.MX_PSU_INPUT_ENABLING_DEVICE", "hash": "fc77a61519a3", "chunk_type": "method", "node_type": "function_definition", "signature": "set_enabling_device_asserted(self, state: bool)", "docstring": "Update enabling_device_asserted and update the mask (psuInputMask) accordingly", "chunk_size_bytes": 384, "original_size_bytes": 384, "start_byte": 66263, "end_byte": 66647}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:3eef56f4320e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "RobotPowerSupplyInputs.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1556, 1563], "text": "def __str__(self) -> str:\n        return (f\"psu_input_mask: {hex(self.psu_input_mask)} -> \"\n                f\"estop_asserted: {self.estop_asserted}, \"\n                f\"pstop1_asserted: {self.pstop1_asserted}, \"\n                f\"pstop2_asserted: {self.pstop2_asserted}, \"\n                f\"reset_ext_asserted: {self.reset_ext_asserted}, \"\n                f\"reset_keypad_pressed: {self.reset_keypad_pressed}, \"\n                f\"enabling_device_asserted: {self.enabling_device_asserted}\")", "hash": "3eef56f4320e", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 488, "original_size_bytes": 488, "start_byte": 66653, "end_byte": 67141}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:cea4830e39da", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotSafetyStatus", "qualified_name": "RobotSafetyStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1566, 1836], "text": "class RobotSafetyStatus:\n    \"\"\"Class for storing the safety stop status of a Mecademic robot.\n    Attributes\n    ----------\n    robot_operation_mode : MxRobotOperationMode\n        The current robot operation mode, based on the the power supply key position (not supported on Meca500 robots).\n        When the key is not in \"automatic\" position, restrictions will apply for using the robot.\n    reset_ready : bool\n        Not yet implemented. Future implementation will:\n        Indicate if it's currently possible to reset safety stop conditions that are linked to the power supply reset\n        button because they remove motor power (EStop, PStop1, Operation mode change, robot reboot, etc.)\n    stop_mask : int\n        Bit mask that summarizes all safety stop conditions on the robot (including both active or resettable signals).\n        Use bits from MxSafeStopCategory.\n        Note: Also available as individual signal states (estop_state, pstop1_state, etc...)\n    stop_resettable_mask : int\n        Bit mask that summarizes all safety stop conditions that are currently resettable.\n        Use bits from MxSafeStopCategory.\n        Note: Also available as individual signal states (estop_state, pstop1_state, etc...)\n    estop_state : MxStopState\n        Current EStop status.\n        Note that Meca500 revision 3 or older never report this condition because these robots's power supply\n        will be shutdown completely in case of EStop (and thus this API will get disconnected from the robot instead).\n    pstop1_state : MxStopState\n        Current PStop1 status\n    pstop2_state : MxStopState\n        Current PStop2 status\n        *** IMPORTANT NOTE: PStop2 is not safety-rated on Meca500 robots ***\n    operation_mode_stop_state : MxStopState\n        Current status for \"operation mode\" safety stop condition (upon mode changes or when mode is locked)\n    enabling_device_released_stop_state : MxStopState\n        Current status for \"enabling device\" safety stop condition\n    voltage_fluctuation_stop_state : MxStopState\n        Current status for \"voltage fluctuation\" safety stop condition\n    reboot_stop_state : MxStopState\n        Current status for \"robot just rebooted\" safety stop condition\n    redundancy_fault_stop_state : MxStopState\n        Current status for \"redundancy fault\" safety stop condition\n    standstill_fault_stop_state : MxStopState\n        Current status for \"standstill fault\" safety stop condition\n    connection_dropped_stop_state : MxStopState\n        Current status for \"connection dropped\" safety stop condition\n    minor_error_stop_state : MxStopState\n        Current status for \"minor error\" safety stop condition, which is triggered if robot removes motor voltage\n        for any internal reason other than the safety stop signals above (thus generally due to a minor internal error).\n        If this happens, see the robot logs for details.\n    static_masks : RobotStaticSafetyStopMasks\n        Useful masks to categorize safety stop signals from stop_mask\n\"\"\"", "hash": "cea4830e39da", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the safety stop status of a Mecademic robot.\n\n    Attributes\n    ----------\n    robot_operation_mode : MxRobotOperationMode\n        The current robot operation mode, based on the the power supply key position (not supported on Meca500 robots).\n        When the key is not in \"automatic\" position, restrictions will apply for using the robot.\n    reset_ready : bool\n        Not yet implemented. Future implementation will:\n        Indicate if it's currently possible to reset safety stop conditions that are linked to the power supply reset\n        button because they remove motor power (EStop, PStop1, Operation mode change, robot reboot, etc.)\n    stop_mask : int\n        Bit mask that summarizes all safety stop conditions on the robot (including both active or resettable signals).\n        Use bits from MxSafeStopCategory.\n        Note: Also available as individual signal states (estop_state, pstop1_state, etc...)\n    stop_resettable_mask : int\n        Bit mask that summarizes all safety stop conditions that are currently resettable.\n        Use bits from MxSafeStopCategory.\n        Note: Also available as individual signal states (estop_state, pstop1_state, etc...)\n    estop_state : MxStopState\n        Current EStop status.\n        Note that Meca500 revision 3 or older never report this condition because these robots's power supply\n        will be shutdown completely in case of EStop (and thus this API will get disconnected from the robot instead).\n    pstop1_state : MxStopState\n        Current PStop1 status\n    pstop2_state : MxStopState\n        Current PStop2 status\n        *** IMPORTANT NOTE: PStop2 is not safety-rated on Meca500 robots ***\n    operation_mode_stop_state : MxStopState\n        Current status for \"operation mode\" safety stop condition (upon mode changes or when mode is locked)\n    enabling_device_released_stop_state : MxStopState\n        Current status for \"enabling device\" safety stop condition\n    voltage_fluctuation_stop_state : MxStopState\n        Current status for \"voltage fluctuation\" safety stop condition\n    reboot_stop_state : MxStopState\n        Current status for \"robot just rebooted\" safety stop condition\n    redundancy_fault_stop_state : MxStopState\n        Current status for \"redundancy fault\" safety stop condition\n    standstill_fault_stop_state : MxStopState\n        Current status for \"standstill fault\" safety stop condition\n    connection_dropped_stop_state : MxStopState\n        Current status for \"connection dropped\" safety stop condition\n    minor_error_stop_state : MxStopState\n        Current status for \"minor error\" safety stop condition, which is triggered if robot removes motor voltage\n        for any internal reason other than the safety stop signals above (thus generally due to a minor internal error).\n        If this happens, see the robot logs for details.\n    static_masks : RobotStaticSafetyStopMasks\n        Useful masks to categorize safety stop signals from stop_mask", "chunk_size_bytes": 3014, "original_size_bytes": 3015, "start_byte": 67144, "end_byte": 79435}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:5bbbf867eba3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotSafetyStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1617, 1635], "text": "def __init__(self):\n        self.robot_operation_mode = MxRobotOperationMode.MX_ROBOT_OPERATION_MODE_AUTO\n        self.reset_ready = False\n        self.stop_mask = 0\n        self.stop_resettable_mask = 0\n        self.estop_state = MxStopState.MX_STOP_STATE_RESET\n        self.pstop1_state = MxStopState.MX_STOP_STATE_RESET\n        self.pstop2_state = MxStopState.MX_STOP_STATE_RESET\n        self.operation_mode_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.enabling_device_released_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.voltage_fluctuation_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.reboot_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.redundancy_fault_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.standstill_fault_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.connection_dropped_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.minor_error_stop_state = MxStopState.MX_STOP_STATE_RESET\n        self.static_masks = RobotStaticSafetyStopMasks()", "hash": "5bbbf867eba3", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 1035, "original_size_bytes": 1089, "start_byte": 70165, "end_byte": 71254}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:640157607b50", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_estop_state", "qualified_name": "RobotSafetyStatus.set_estop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1637, 1645], "text": "def set_estop_state(self, stop_state: MxStopState):\n        \"\"\"Change the EStop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            EStop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_ESTOP, stop_state)", "hash": "640157607b50", "chunk_type": "method", "node_type": "function_definition", "signature": "set_estop_state(self, stop_state: MxStopState)", "docstring": "Change the EStop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            EStop state to set", "chunk_size_bytes": 278, "original_size_bytes": 279, "start_byte": 71260, "end_byte": 71539}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:7f27916c4e10", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_pstop1_state", "qualified_name": "RobotSafetyStatus.set_pstop1_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1647, 1655], "text": "def set_pstop1_state(self, stop_state: MxStopState):\n        \"\"\"Change the PStop1 state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            PStop1 state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_PSTOP1, stop_state)", "hash": "7f27916c4e10", "chunk_type": "method", "node_type": "function_definition", "signature": "set_pstop1_state(self, stop_state: MxStopState)", "docstring": "Change the PStop1 state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            PStop1 state to set", "chunk_size_bytes": 282, "original_size_bytes": 283, "start_byte": 71545, "end_byte": 71828}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:545f6580105c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_pstop2_state", "qualified_name": "RobotSafetyStatus.set_pstop2_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1657, 1665], "text": "def set_pstop2_state(self, stop_state: MxStopState):\n        \"\"\"Change the PStop2 state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            PStop2 state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_PSTOP2, stop_state)", "hash": "545f6580105c", "chunk_type": "method", "node_type": "function_definition", "signature": "set_pstop2_state(self, stop_state: MxStopState)", "docstring": "Change the PStop2 state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            PStop2 state to set", "chunk_size_bytes": 282, "original_size_bytes": 283, "start_byte": 71834, "end_byte": 72117}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:71fe0f37ab3c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_operation_mode_stop_state", "qualified_name": "RobotSafetyStatus.set_operation_mode_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1667, 1675], "text": "def set_operation_mode_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"operation mode\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_OPERATION_MODE, stop_state)", "hash": "71fe0f37ab3c", "chunk_type": "method", "node_type": "function_definition", "signature": "set_operation_mode_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"operation mode\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 330, "original_size_bytes": 331, "start_byte": 72123, "end_byte": 72454}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d2abd7634bd4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_enabling_device_released_stop_state", "qualified_name": "RobotSafetyStatus.set_enabling_device_released_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1677, 1685], "text": "def set_enabling_device_released_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"enabling device\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_ENABLING_DEVICE_RELEASED, stop_state)", "hash": "d2abd7634bd4", "chunk_type": "method", "node_type": "function_definition", "signature": "set_enabling_device_released_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"enabling device\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 351, "original_size_bytes": 352, "start_byte": 72460, "end_byte": 72812}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:5fd03fcb6f07", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_voltage_fluctuation_stop_state", "qualified_name": "RobotSafetyStatus.set_voltage_fluctuation_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1687, 1695], "text": "def set_voltage_fluctuation_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"voltage fluctuation\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_VOLTAGE_FLUCTUATION, stop_state)", "hash": "5fd03fcb6f07", "chunk_type": "method", "node_type": "function_definition", "signature": "set_voltage_fluctuation_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"voltage fluctuation\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 345, "original_size_bytes": 346, "start_byte": 72818, "end_byte": 73164}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b81bc77d130f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_reboot_stop_state", "qualified_name": "RobotSafetyStatus.set_reboot_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1697, 1705], "text": "def set_reboot_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"robot just rebooted\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_REBOOT, stop_state)", "hash": "b81bc77d130f", "chunk_type": "method", "node_type": "function_definition", "signature": "set_reboot_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"robot just rebooted\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 319, "original_size_bytes": 320, "start_byte": 73170, "end_byte": 73490}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:730d2b20ce7d", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_redundancy_fault_stop_state", "qualified_name": "RobotSafetyStatus.set_redundancy_fault_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1707, 1715], "text": "def set_redundancy_fault_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"redundancy fault\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_REDUNDANCY_FAULT, stop_state)", "hash": "730d2b20ce7d", "chunk_type": "method", "node_type": "function_definition", "signature": "set_redundancy_fault_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"redundancy fault\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 336, "original_size_bytes": 337, "start_byte": 73496, "end_byte": 73833}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:8b4472e71838", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_standstill_fault_stop_state", "qualified_name": "RobotSafetyStatus.set_standstill_fault_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1717, 1725], "text": "def set_standstill_fault_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"standstill fault\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_STANDSTILL_FAULT, stop_state)", "hash": "8b4472e71838", "chunk_type": "method", "node_type": "function_definition", "signature": "set_standstill_fault_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"standstill fault\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 336, "original_size_bytes": 337, "start_byte": 73839, "end_byte": 74176}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:fc652d97fb44", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_connection_dropped_stop_state", "qualified_name": "RobotSafetyStatus.set_connection_dropped_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1727, 1735], "text": "def set_connection_dropped_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"connection dropped\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_CONNECTION_DROPPED, stop_state)", "hash": "fc652d97fb44", "chunk_type": "method", "node_type": "function_definition", "signature": "set_connection_dropped_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"connection dropped\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 342, "original_size_bytes": 343, "start_byte": 74182, "end_byte": 74525}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:5c8c82cd796e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_minor_error_stop_state", "qualified_name": "RobotSafetyStatus.set_minor_error_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1737, 1745], "text": "def set_minor_error_stop_state(self, stop_state: MxStopState):\n        \"\"\"Change the \"minor error\" safety stop state\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        self.set_stop_state(MxSafeStopCategory.MX_SAFE_STOP_MINOR_ERROR, stop_state)", "hash": "5c8c82cd796e", "chunk_type": "method", "node_type": "function_definition", "signature": "set_minor_error_stop_state(self, stop_state: MxStopState)", "docstring": "Change the \"minor error\" safety stop state\n\n        Parameters\n        ----------\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 321, "original_size_bytes": 322, "start_byte": 74531, "end_byte": 74853}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f5ac0708f1b4", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_stop_state", "qualified_name": "RobotSafetyStatus.set_stop_state", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1747, 1793], "text": "def set_stop_state(self, stop_category: MxSafeStopCategory, stop_state: MxStopState):\n        \"\"\"Change a safety stop state\n        Parameters\n        ----------\n        stop_category : MxSafeStopCategory\n            Safety stop category to change state for\n        stop_state : MxStopState\n            Safety stop state to set\n        \"\"\"\n        stop_state = MxStopState(stop_state)\n        if stop_category == MxSafeStopCategory.MX_SAFE_STOP_ESTOP:\n            self.estop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_PSTOP1:\n            self.pstop1_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_PSTOP2:\n            self.pstop2_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_OPERATION_MODE:\n            self.operation_mode_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_ENABLING_DEVICE_RELEASED:\n            self.enabling_device_released_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_VOLTAGE_FLUCTUATION:\n            self.voltage_fluctuation_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_REBOOT:\n            self.reboot_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_REDUNDANCY_FAULT:\n            self.redundancy_fault_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_STANDSTILL_FAULT:\n            self.standstill_fault_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_CONNECTION_DROPPED:\n            self.connection_dropped_stop_state = stop_state\n        elif stop_category == MxSafeStopCategory.MX_SAFE_STOP_MINOR_ERROR:\n            self.minor_error_stop_state = stop_state\n        if stop_state == MxStopState.MX_STOP_STATE_ACTIVE:\n            self.stop_mask |= stop_category\n            self.stop_resettable_mask &= ~stop_category\n        elif stop_state == MxStopState.MX_STOP_STATE_RESETTABLE:\n            self.stop_mask |= stop_category\n            self.stop_resettable_mask |= stop_category\n        else:\n            self.stop_mask &= ~stop_category\n            self.stop_resettable_mask &= ~stop_category", "hash": "f5ac0708f1b4", "chunk_type": "method", "node_type": "function_definition", "signature": "set_stop_state(self, stop_category: MxSafeStopCategory, stop_state: MxStopState)", "docstring": "Change a safety stop state\n\n        Parameters\n        ----------\n        stop_category : MxSafeStopCategory\n            Safety stop category to change state for\n        stop_state : MxStopState\n            Safety stop state to set", "chunk_size_bytes": 2253, "original_size_bytes": 2399, "start_byte": 74859, "end_byte": 77258}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:4eedb0bd2564", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "mask_to_string", "qualified_name": "RobotSafetyStatus.mask_to_string", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1796, 1828], "text": "def mask_to_string(cls, mask: int) -> str:\n        \"\"\"Format as a string a safety stop mask (detailing each safety stop signal that is active in the mask)\n        Args:\n            mask (int): Mask to print as detailed string\n        Returns:\n            str: Detailed string that represents all active safety stop signals in the mask\n        \"\"\"\n        status_masks: list[str] = []\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_ESTOP):\n            status_masks.append('EStop')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_PSTOP1):\n            status_masks.append('PStop1')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_PSTOP2):\n            status_masks.append('PStop2')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_OPERATION_MODE):\n            status_masks.append('Operation mode')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_ENABLING_DEVICE_RELEASED):\n            status_masks.append('Enabling device released')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_VOLTAGE_FLUCTUATION):\n            status_masks.append('Voltage fluctuation')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_REBOOT):\n            status_masks.append('Robot rebooted')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_REDUNDANCY_FAULT):\n            status_masks.append('Redundancy fault')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_STANDSTILL_FAULT):\n            status_masks.append('Standstill fault')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_CONNECTION_DROPPED):\n            status_masks.append('Connection dropped')\n        if mask & int(MxSafeStopCategory.MX_SAFE_STOP_MINOR_ERROR):\n            status_masks.append('Minor error')\n        return ', '.join(status_masks)", "hash": "4eedb0bd2564", "chunk_type": "method", "node_type": "function_definition", "signature": "mask_to_string(cls, mask: int)", "docstring": "Format as a string a safety stop mask (detailing each safety stop signal that is active in the mask)\n\n        Args:\n            mask (int): Mask to print as detailed string\n\n        Returns:\n            str: Detailed string that represents all active safety stop signals in the mask", "chunk_size_bytes": 1735, "original_size_bytes": 1737, "start_byte": 77281, "end_byte": 79018}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b9e6cc87a656", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "RobotSafetyStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1830, 1836], "text": "def __str__(self) -> str:\n        return (\n            f\"operation mode: {tools.robot_operation_mode_to_string(self.robot_operation_mode)}, \"\n            f\"reset_ready: {self.reset_ready}, \"\n            f\"stop_mask: {hex(self.stop_mask)} ({self.mask_to_string(self.stop_mask)}), \"\n            f\"stop_resettable_mask: {hex(self.stop_resettable_mask)} ({self.mask_to_string(self.stop_resettable_mask)})\"\n        )", "hash": "b9e6cc87a656", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 411, "original_size_bytes": 411, "start_byte": 79024, "end_byte": 79435}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:1d1e7ac78157", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GripperStatus", "qualified_name": "GripperStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1839, 1867], "text": "class GripperStatus:\n    \"\"\"Class for storing the Mecademic robot's gripper status.\n       LEGACY, use ExtToolStatus and GripperState instead.\n    Attributes\n    ----------\n    present : bool\n        True if the gripper is present on the robot.\n    homing_state : bool\n        True if the gripper has been homed (ready to be used).\n    holding_part : bool\n        True if the gripper is currently holding a part.\n    target_pos_reached : bool\n        True if the gripper is at target position or at a limit (fully opened or closed).\n    error_status : bool\n        True if the gripper is in error state.\n    overload_error : bool\n        True if the gripper is in overload error state.\n\"\"\"", "hash": "1d1e7ac78157", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's gripper status.\n       LEGACY, use ExtToolStatus and GripperState instead.\n\n    Attributes\n    ----------\n    present : bool\n        True if the gripper is present on the robot.\n    homing_state : bool\n        True if the gripper has been homed (ready to be used).\n    holding_part : bool\n        True if the gripper is currently holding a part.\n    target_pos_reached : bool\n        True if the gripper is at target position or at a limit (fully opened or closed).\n    error_status : bool\n        True if the gripper is in error state.\n    overload_error : bool\n        True if the gripper is in overload error state.", "chunk_size_bytes": 689, "original_size_bytes": 690, "start_byte": 79438, "end_byte": 80404}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:cbe5e34a8999", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "GripperStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1859, 1867], "text": "def __init__(self):\n        self.present = False\n        self.homing_state = False\n        self.holding_part = False\n        self.target_pos_reached = False\n        self.error_status = False\n        self.overload_error = False", "hash": "cbe5e34a8999", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 226, "original_size_bytes": 270, "start_byte": 80134, "end_byte": 80404}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:fa7d85f9208a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "NetworkConfig", "qualified_name": "NetworkConfig", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1870, 1909], "text": "class NetworkConfig:\n    \"\"\"Class for storing the Mecademic robot's network configuration.\n    Attributes\n    ----------\n    name : str\n        Robot name for DHCP requests\n    dhcp : bool\n        DHCP mode enabled for automatic IP assignment by DHCP server\n    ip : str\n        IPv4 address (ex: '192.168.0.100')\n    mask : str\n        Network mask (ex: '255.255.255.0')\n    gateway : str\n        Gateway IP address (ex: '192.168.0.1')\n    mac : str\n        Robot read-only MAC address (ex: '20:B0:F7:06:E4:80')\n\"\"\"", "hash": "fa7d85f9208a", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's network configuration.\n\n    Attributes\n    ----------\n    name : str\n        Robot name for DHCP requests\n    dhcp : bool\n        DHCP mode enabled for automatic IP assignment by DHCP server\n    ip : str\n        IPv4 address (ex: '192.168.0.100')\n    mask : str\n        Network mask (ex: '255.255.255.0')\n    gateway : str\n        Gateway IP address (ex: '192.168.0.1')\n    mac : str\n        Robot read-only MAC address (ex: '20:B0:F7:06:E4:80')", "chunk_size_bytes": 516, "original_size_bytes": 518, "start_byte": 80407, "end_byte": 81482}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:8778b6353334", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "NetworkConfig.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1890, 1898], "text": "def __init__(self):\n        self.name = ''\n        self.dhcp = False\n        self.ip = '192.168.0.100'\n        self.mask = '255.255.255.0'\n        self.gateway = ''\n        self.mac = ''", "hash": "8778b6353334", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 186, "original_size_bytes": 230, "start_byte": 80931, "end_byte": 81161}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:17698478ed8f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "NetworkConfig.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1900, 1906], "text": "def __str__(self) -> str:\n        return (f\"Name: {self.name}, \"\n                f\"DHCP: {self.dhcp}, \"\n                f\"ip: {self.ip}, \"\n                f\"mask: {self.mask}, \"\n                f\"gateway: {self.gateway}, \"\n                f\"mac: {self.mac}\")", "hash": "17698478ed8f", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 258, "original_size_bytes": 258, "start_byte": 81167, "end_byte": 81425}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "NetworkConfig.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1908, 1909], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 81431, "end_byte": 81482}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:103f2567ac88", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ExtToolStatus", "qualified_name": "ExtToolStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1912, 2017], "text": "class ExtToolStatus:\n    \"\"\"Class for storing the Mecademic robot's external tool status.\n    Attributes\n    ----------\n    sim_tool_type : int\n        Simulated tool type.\n         0: MxExtToolType.MX_EXT_TOOL_NONE\n        10: MxExtToolType.MX_EXT_TOOL_MEGP25_SHORT\n        11: MxExtToolType.MX_EXT_TOOL_MEGP25_LONG\n        20: MxExtToolType.MX_EXT_TOOL_VBOX_2VALVES\n    physical_tool_type : int\n        Physical external tool type (same values as mentioned above).\n    homing_state : bool\n        True if the gripper is homed.\n    error_status : bool\n        True if the gripper is in error state.\n    overload_error : bool\n        True if the gripper is in overload error state.\n    comm_err_warning : bool\n        True if some communication errors were detected with the external tool.\n        This could mean that the cable may be damaged and must be replaced,\n        or that the cable may simply not be screwed tight enough on either side.\n\"\"\"", "hash": "103f2567ac88", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's external tool status.\n\n    Attributes\n    ----------\n    sim_tool_type : int\n        Simulated tool type.\n         0: MxExtToolType.MX_EXT_TOOL_NONE\n        10: MxExtToolType.MX_EXT_TOOL_MEGP25_SHORT\n        11: MxExtToolType.MX_EXT_TOOL_MEGP25_LONG\n        20: MxExtToolType.MX_EXT_TOOL_VBOX_2VALVES\n    physical_tool_type : int\n        Physical external tool type (same values as mentioned above).\n    homing_state : bool\n        True if the gripper is homed.\n    error_status : bool\n        True if the gripper is in error state.\n    overload_error : bool\n        True if the gripper is in overload error state.\n    comm_err_warning : bool\n        True if some communication errors were detected with the external tool.\n        This could mean that the cable may be damaged and must be replaced,\n        or that the cable may simply not be screwed tight enough on either side.", "chunk_size_bytes": 950, "original_size_bytes": 951, "start_byte": 81485, "end_byte": 85195}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:678ce024a627", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "ExtToolStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1937, 1945], "text": "def __init__(self):\n        self.sim_tool_type = MxExtToolType.MX_EXT_TOOL_NONE\n        self.physical_tool_type = MxExtToolType.MX_EXT_TOOL_NONE\n        self.homing_state = False\n        self.error_status = False\n        self.overload_error = False\n        self.comm_err_warning = False", "hash": "678ce024a627", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 286, "original_size_bytes": 330, "start_byte": 82442, "end_byte": 82772}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b7c005ee1c31", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "ExtToolStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1947, 1952], "text": "def __str__(self) -> str:\n        return (f\"Sim tool type: {self.sim_tool_type}, \"\n                f\"Physical tool type: {self.physical_tool_type}, \"\n                f\"homed: {self.homing_state}, \"\n                f\"error: {self.error_status}, \"\n                f\"overload: {self.overload_error}\")", "hash": "b7c005ee1c31", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 297, "original_size_bytes": 297, "start_byte": 82778, "end_byte": 83075}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "ExtToolStatus.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1954, 1955], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 83081, "end_byte": 83132}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:3e28787b7a7b", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "current_tool_type", "qualified_name": "ExtToolStatus.current_tool_type", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1957, 1965], "text": "def current_tool_type(self) -> int:\n        \"\"\"Returns current external tool type (simulated or physical)\n        Returns\n        -------\n        int\n            Current external tool\n        \"\"\"\n        return self.sim_tool_type if self.sim_tool_type != MxExtToolType.MX_EXT_TOOL_NONE else self.physical_tool_type", "hash": "3e28787b7a7b", "chunk_type": "method", "node_type": "function_definition", "signature": "current_tool_type(self)", "docstring": "Returns current external tool type (simulated or physical)\n\n        Returns\n        -------\n        int\n            Current external tool", "chunk_size_bytes": 314, "original_size_bytes": 315, "start_byte": 83138, "end_byte": 83453}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:885aea2f390c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_physical_tool_present", "qualified_name": "ExtToolStatus.is_physical_tool_present", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1967, 1975], "text": "def is_physical_tool_present(self) -> bool:\n        \"\"\"Returns if physical tool is connected\n        Returns\n        -------\n        bool\n            True if physical gripper is connected, False otherwise\n        \"\"\"\n        return self.physical_tool_type != MxExtToolType.MX_EXT_TOOL_NONE", "hash": "885aea2f390c", "chunk_type": "method", "node_type": "function_definition", "signature": "is_physical_tool_present(self)", "docstring": "Returns if physical tool is connected\n\n        Returns\n        -------\n        bool\n            True if physical gripper is connected, False otherwise", "chunk_size_bytes": 289, "original_size_bytes": 290, "start_byte": 83459, "end_byte": 83749}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f87b6e0e0ddb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_tool_sim", "qualified_name": "ExtToolStatus.is_tool_sim", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1977, 1985], "text": "def is_tool_sim(self) -> bool:\n        \"\"\"Returns if tool is simulated or not\n        Returns\n        -------\n        bool\n            True if tool is simulated, False otherwise\n        \"\"\"\n        return self.sim_tool_type != MxExtToolType.MX_EXT_TOOL_NONE", "hash": "f87b6e0e0ddb", "chunk_type": "method", "node_type": "function_definition", "signature": "is_tool_sim(self)", "docstring": "Returns if tool is simulated or not\n\n        Returns\n        -------\n        bool\n            True if tool is simulated, False otherwise", "chunk_size_bytes": 257, "original_size_bytes": 258, "start_byte": 83755, "end_byte": 84013}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:118036777c1a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_gripper", "qualified_name": "ExtToolStatus.is_gripper", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [1987, 2001], "text": "def is_gripper(self, physical: bool = False) -> bool:\n        \"\"\"Returns if current external tool (simulated or physical) is a gripper\n        Parameters\n        ----------\n        physical : bool\n            True check physical gripper, False use current one (simulated or physical)\n        Returns\n        -------\n        bool\n            True if tool is a gripper, False otherwise\n        \"\"\"\n        tool_type = self.physical_tool_type if physical else self.current_tool_type()\n        return tool_type in [MxExtToolType.MX_EXT_TOOL_MEGP25_SHORT, MxExtToolType.MX_EXT_TOOL_MEGP25_LONG]", "hash": "118036777c1a", "chunk_type": "method", "node_type": "function_definition", "signature": "is_gripper(self, physical: bool = False)", "docstring": "Returns if current external tool (simulated or physical) is a gripper\n\n        Parameters\n        ----------\n        physical : bool\n            True check physical gripper, False use current one (simulated or physical)\n\n        Returns\n        -------\n        bool\n            True if tool is a gripper, False otherwise", "chunk_size_bytes": 589, "original_size_bytes": 591, "start_byte": 84019, "end_byte": 84610}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:402b3cfae3cc", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "is_pneumatic_module", "qualified_name": "ExtToolStatus.is_pneumatic_module", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2003, 2017], "text": "def is_pneumatic_module(self, physical: bool = False) -> bool:\n        \"\"\"Returns if current external tool (simulated or physical) is a pneumatic module\n        Parameters\n        ----------\n        physical : bool\n            True check physical gripper, False use current one (simulated or physical)\n        Returns\n        -------\n        bool\n            True if tool is a pneumatic module, False otherwise\n        \"\"\"\n        tool_type = self.physical_tool_type if physical else self.current_tool_type()\n        return tool_type in [MxExtToolType.MX_EXT_TOOL_VBOX_2VALVES]", "hash": "402b3cfae3cc", "chunk_type": "method", "node_type": "function_definition", "signature": "is_pneumatic_module(self, physical: bool = False)", "docstring": "Returns if current external tool (simulated or physical) is a pneumatic module\n\n        Parameters\n        ----------\n        physical : bool\n            True check physical gripper, False use current one (simulated or physical)\n\n        Returns\n        -------\n        bool\n            True if tool is a pneumatic module, False otherwise", "chunk_size_bytes": 577, "original_size_bytes": 579, "start_byte": 84616, "end_byte": 85195}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:a57abf5bf808", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "IoStatus", "qualified_name": "IoStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2020, 2063], "text": "class IoStatus:\n    \"\"\"Class for storing the Mecademic robot's IO modules status.\n    Attributes\n    ----------\n    bank_id : int\n        Type of this IO module.\n        1: MxIoBankId.MX_IO_BANK_ID_IO_MODULE\n    present : bool\n        True if an IO module of this type is present on the robot.\n    nb_inputs : int\n        Number of digital inputs supported by this IO module.\n    nb_outputs : int\n        Number of digital outputs supported by this IO module.\n    sim_mode : bool\n        True if the IO module is in simulation mode.\n    error : int\n        Error code of the IO module (0 if no error).\n    timestamp : int\n        Monotonic timestamp associated with data (in microseconds since robot last reboot)\n        This timestamp is stamped by the robot so it is not affected by host/network jitter\n\"\"\"", "hash": "a57abf5bf808", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's IO modules status.\n\n    Attributes\n    ----------\n    bank_id : int\n        Type of this IO module.\n        1: MxIoBankId.MX_IO_BANK_ID_IO_MODULE\n    present : bool\n        True if an IO module of this type is present on the robot.\n    nb_inputs : int\n        Number of digital inputs supported by this IO module.\n    nb_outputs : int\n        Number of digital outputs supported by this IO module.\n    sim_mode : bool\n        True if the IO module is in simulation mode.\n    error : int\n        Error code of the IO module (0 if no error).\n    timestamp : int\n        Monotonic timestamp associated with data (in microseconds since robot last reboot)\n        This timestamp is stamped by the robot so it is not affected by host/network jitter", "chunk_size_bytes": 808, "original_size_bytes": 809, "start_byte": 85198, "end_byte": 86690}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:26004732fdc3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "IoStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2043, 2052], "text": "def __init__(self):\n        self.bank_id = MxIoBankId.MX_IO_BANK_ID_UNDEFINED\n        self.present = False\n        self.nb_inputs = 0\n        self.nb_outputs = 0\n        self.sim_mode = False\n        self.error = 0\n        self.timestamp = 0", "hash": "26004732fdc3", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 241, "original_size_bytes": 285, "start_byte": 86013, "end_byte": 86298}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d95b61c1b732", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "IoStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2054, 2060], "text": "def __str__(self) -> str:\n        return (f\"BankId: {self.bank_id}, \"\n                f\"Physically present: {self.present}, \"\n                f\"Digital inputs: {self.nb_inputs}, \"\n                f\"Digital outputs: {self.nb_outputs}, \"\n                f\"Simulation mode: {self.sim_mode}, \"\n                f\"error: {self.error}\")", "hash": "d95b61c1b732", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 329, "original_size_bytes": 329, "start_byte": 86304, "end_byte": 86633}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "IoStatus.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2062, 2063], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 86639, "end_byte": 86690}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f1cd3e9a6c3c", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "ValveState", "qualified_name": "ValveState", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2066, 2078], "text": "class ValveState:\n    \"\"\"Class for storing the Mecademic robot's pneumatic module valve states.\n    Attributes\n    ----------\n    valve_opened : list[int]\n        List of valve state: MX_VALVE_STATE_CLOSE or MX_VALVE_STATE_OPENED\n\"\"\"", "hash": "f1cd3e9a6c3c", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's pneumatic module valve states.\n\n    Attributes\n    ----------\n    valve_opened : list[int]\n        List of valve state: MX_VALVE_STATE_CLOSE or MX_VALVE_STATE_OPENED", "chunk_size_bytes": 233, "original_size_bytes": 234, "start_byte": 86693, "end_byte": 87060}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:6d9112e8e502", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "ValveState.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2075, 2078], "text": "def __init__(self):\n        self.valve_opened = [int] * MX_EXT_TOOL_VBOX_MAX_VALVES", "hash": "6d9112e8e502", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 83, "original_size_bytes": 127, "start_byte": 86933, "end_byte": 87060}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:0ee3601c98e9", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "GripperState", "qualified_name": "GripperState", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2081, 2114], "text": "class GripperState:\n    \"\"\"Class for storing the Mecademic robot's gripper state.\n    Attributes\n    ----------\n    holding_part : bool\n        True if the gripper is currently holding a part.\n    target_pos_reached : bool\n        True if the gripper is at requested position:\n          - At configured opened/closed position following GripperOpen/GripperClose.\n          - At requested position after MoveGripper.\n    closed : bool\n        True if the gripper is at the configured 'close' position (ref SetGripperRanger) or less.\n    opened : bool\n        True if the gripper is at the configured 'open' position (ref SetGripperRanger) or more.\n\"\"\"", "hash": "0ee3601c98e9", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's gripper state.\n\n    Attributes\n    ----------\n    holding_part : bool\n        True if the gripper is currently holding a part.\n    target_pos_reached : bool\n        True if the gripper is at requested position:\n          - At configured opened/closed position following GripperOpen/GripperClose.\n          - At requested position after MoveGripper.\n    closed : bool\n        True if the gripper is at the configured 'close' position (ref SetGripperRanger) or less.\n    opened : bool\n        True if the gripper is at the configured 'open' position (ref SetGripperRanger) or more.", "chunk_size_bytes": 649, "original_size_bytes": 651, "start_byte": 87063, "end_byte": 88185}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f388c71e4883", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "GripperState.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2099, 2105], "text": "def __init__(self):\n        self.holding_part = False\n        self.target_pos_reached = False\n        self.closed = False\n        self.opened = False", "hash": "f388c71e4883", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 149, "original_size_bytes": 193, "start_byte": 87720, "end_byte": 87913}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:531f8fdc9925", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "GripperState.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2107, 2111], "text": "def __str__(self):\n        return (f'holding={self.holding_part}, '\n                f'pos_reached={self.target_pos_reached}, '\n                f'closed={self.closed}, '\n                f'opened={self.opened}')", "hash": "531f8fdc9925", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 209, "original_size_bytes": 209, "start_byte": 87919, "end_byte": 88128}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "GripperState.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2113, 2114], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 88134, "end_byte": 88185}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:1fe97a93deeb", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "VacuumState", "qualified_name": "VacuumState", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2117, 2147], "text": "class VacuumState:\n    \"\"\"Class for storing the Mecademic robot's IO module vacuum state.\n    Attributes\n    ----------\n    vacuum_on : bool\n        True if the vacuum is currently 'on' (trying to pick or holding part).\n    purge_on: bool\n        True if currently pushing air to release part (see SetVacuumPurgeDuration).\n    holding_part : bool\n        True if currently holding part (based on configured pressure thresholds, see SetVacuumThreshold ).\n    timestamp : int\n        Monotonic timestamp associated with data (in microseconds since robot last reboot)\n        This timestamp is stamped by the robot so it is not affected by host/network jitter\n\"\"\"", "hash": "1fe97a93deeb", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's IO module vacuum state.\n\n    Attributes\n    ----------\n    vacuum_on : bool\n        True if the vacuum is currently 'on' (trying to pick or holding part).\n    purge_on: bool\n        True if currently pushing air to release part (see SetVacuumPurgeDuration).\n    holding_part : bool\n        True if currently holding part (based on configured pressure thresholds, see SetVacuumThreshold ).\n    timestamp : int\n        Monotonic timestamp associated with data (in microseconds since robot last reboot)\n        This timestamp is stamped by the robot so it is not affected by host/network jitter", "chunk_size_bytes": 660, "original_size_bytes": 661, "start_byte": 88188, "end_byte": 89310}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:b975b0d262e2", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "VacuumState.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2133, 2139], "text": "def __init__(self):\n        self.vacuum_on = False\n        self.purge_on = False\n        self.holding_part = False\n        self.timestamp = 0", "hash": "b975b0d262e2", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 141, "original_size_bytes": 185, "start_byte": 88855, "end_byte": 89040}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:2e6d35a7b173", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "VacuumState.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2141, 2144], "text": "def __str__(self) -> str:\n        return (f\"Vacuum: {'on' if self.vacuum_on else 'off'}, \"\n                f\"Purge: {'on' if self.purge_on else 'off'}, \"\n                f\"Holding part: {self.holding_part}\")", "hash": "2e6d35a7b173", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 207, "original_size_bytes": 207, "start_byte": 89046, "end_byte": 89253}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "VacuumState.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2146, 2147], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 89259, "end_byte": 89310}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:4473672e95ee", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "CollisionObject", "qualified_name": "CollisionObject", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2150, 2207], "text": "class CollisionObject:\n    \"\"\"Class that represents one object that can enter in collision with another or with the work zone boundary.\n       A collision object is defined by its group (MxCollisionGroup) and, in some cases, an index (like the joint)\n    Attributes\n    ----------\n    group : MxCollisionGroup\n        The group (type) of this object\n    index: int\n        The index of the object within the group (for groups that can have multiple objects).\n        Available indices for groups are:\n        - MxCollisionGroup.MX_COLLISION_GROUP_ROBOT:     Use index values from MxCollisionGroupRobotIdx.\n        - MxCollisionGroup.MX_COLLISION_GROUP_FCP:       Index is not used (always 0).\n        - MxCollisionGroup.MX_COLLISION_GROUP_TOOL:      Always 0 when tool sphere is used.\n                                                         Future versions may support multiple tool objects.\n        - MxCollisionGroup.MX_COLLISION_GROUP_ENV_OBJ:   User-defined index of the user-defined environment objects.\n                                                         (not supported yet)\n        - MxCollisionGroup.MX_COLLISION_GROUP_WORK_ZONE: Index is not used (always 0).\n\"\"\"", "hash": "4473672e95ee", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class that represents one object that can enter in collision with another or with the work zone boundary.\n       A collision object is defined by its group (MxCollisionGroup) and, in some cases, an index (like the joint)\n\n    Attributes\n    ----------\n    group : MxCollisionGroup\n        The group (type) of this object\n    index: int\n        The index of the object within the group (for groups that can have multiple objects).\n        Available indices for groups are:\n        - MxCollisionGroup.MX_COLLISION_GROUP_ROBOT:     Use index values from MxCollisionGroupRobotIdx.\n        - MxCollisionGroup.MX_COLLISION_GROUP_FCP:       Index is not used (always 0).\n        - MxCollisionGroup.MX_COLLISION_GROUP_TOOL:      Always 0 when tool sphere is used.\n                                                         Future versions may support multiple tool objects.\n        - MxCollisionGroup.MX_COLLISION_GROUP_ENV_OBJ:   User-defined index of the user-defined environment objects.\n                                                         (not supported yet)\n        - MxCollisionGroup.MX_COLLISION_GROUP_WORK_ZONE: Index is not used (always 0).", "chunk_size_bytes": 1177, "original_size_bytes": 1178, "start_byte": 89313, "end_byte": 92112}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:85497abfc569", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "CollisionObject.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2170, 2173], "text": "def __init__(self,\n                 group=MxCollisionGroup.MX_COLLISION_GROUP_ROBOT,\n                 index=MxCollisionGroupRobotIdx.MX_COLLISION_GROUP_ROBOT_BASE):\n        self.set(group, index)", "hash": "85497abfc569", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self,\n                 group=MxCollisionGroup.MX_COLLISION_GROUP_ROBOT,\n                 index=MxCollisionGroupRobotIdx.MX_COLLISION_GROUP_ROBOT_BASE)", "docstring": null, "chunk_size_bytes": 195, "original_size_bytes": 195, "start_byte": 90497, "end_byte": 90692}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:0f923a21c0d5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set", "qualified_name": "CollisionObject.set", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2175, 2185], "text": "def set(self, group: MxCollisionGroup, index: int):\n        \"\"\" Setter function \"\"\"\n        self.group = group\n        if self.group == MxCollisionGroup.MX_COLLISION_GROUP_ROBOT:\n            self.index = MxCollisionGroupRobotIdx(index)\n        elif self.group == MxCollisionGroup.MX_COLLISION_GROUP_TOOL:\n            self.index = MxCollisionGroupToolIdx(index)\n        else:\n            self.index = int(index)", "hash": "0f923a21c0d5", "chunk_type": "method", "node_type": "function_definition", "signature": "set(self, group: MxCollisionGroup, index: int)", "docstring": "Setter function", "chunk_size_bytes": 410, "original_size_bytes": 520, "start_byte": 90698, "end_byte": 91218}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:db2757e0ca9e", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_from_response", "qualified_name": "CollisionObject.set_from_response", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2187, 2190], "text": "def set_from_response(self, response_args: list[int]) -> list[int]:\n        \"\"\" Set CollisionObject from parsed reply message argument \"\"\"\n        self.set(MxCollisionGroup(response_args.pop(0)), response_args.pop(0))\n        return response_args", "hash": "db2757e0ca9e", "chunk_type": "method", "node_type": "function_definition", "signature": "set_from_response(self, response_args: list[int])", "docstring": "Set CollisionObject from parsed reply message argument", "chunk_size_bytes": 246, "original_size_bytes": 246, "start_byte": 91224, "end_byte": 91470}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:de6053fa0a08", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__eq__", "qualified_name": "CollisionObject.__eq__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2192, 2201], "text": "def __eq__(self, other):\n        if int(self.group) != int(other.group):\n            return False\n        if (self.group == MxCollisionGroup.MX_COLLISION_GROUP_ROBOT\n                or self.group == MxCollisionGroup.MX_COLLISION_GROUP_TOOL\n                or self.group == MxCollisionGroup.MX_COLLISION_GROUP_ENV_OBJ):\n            if int(self.index) != int(other.index):\n                return False\n        return True", "hash": "de6053fa0a08", "chunk_type": "method", "node_type": "function_definition", "signature": "__eq__(self, other)", "docstring": null, "chunk_size_bytes": 419, "original_size_bytes": 471, "start_byte": 91476, "end_byte": 91947}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e6947ce7bbb1", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "CollisionObject.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2203, 2204], "text": "def __str__(self) -> str:\n        return tools.robot_collision_group_to_string(self.group, self.index)", "hash": "e6947ce7bbb1", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 102, "original_size_bytes": 102, "start_byte": 91953, "end_byte": 92055}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "CollisionObject.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2206, 2207], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 92061, "end_byte": 92112}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:17c2d14cbdda", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "SelfCollisionStatus", "qualified_name": "SelfCollisionStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2210, 2254], "text": "class SelfCollisionStatus:\n    \"\"\"Class for storing the Mecademic robot's self collision status.\n       This is used when robot collision detection has been activated (with SetCollisionCfg).\n    Attributes\n    ----------\n    collision_detected : bool\n        True if the robot has detected a collision with itself.\n        Note that when the collision severity is set to MX_EVENT_SEVERITY_PAUSE_MOTION or greater\n        the robot will have stopped just before the collision actually occurs and collision_detected will be True\n        until ResumeMotion is called.\n        When collision severity is set to MX_EVENT_SEVERITY_WARNING the robot will actually continue to move and the\n        collision will actually occur. This can damage the robot or the tool.\n    object1 : MxCollisionGroup\n        When collision is detected, indicates the first of the two objects that caused the collision\n        (a part of the robot or the tool)\n    object2 : MxCollisionGroup\n        When collision is detected, indicates the second of the two objects that caused the collision\n        (a part of the robot or the tool)\n\"\"\"", "hash": "17c2d14cbdda", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's self collision status.\n       This is used when robot collision detection has been activated (with SetCollisionCfg).\n\n    Attributes\n    ----------\n    collision_detected : bool\n        True if the robot has detected a collision with itself.\n        Note that when the collision severity is set to MX_EVENT_SEVERITY_PAUSE_MOTION or greater\n        the robot will have stopped just before the collision actually occurs and collision_detected will be True\n        until ResumeMotion is called.\n        When collision severity is set to MX_EVENT_SEVERITY_WARNING the robot will actually continue to move and the\n        collision will actually occur. This can damage the robot or the tool.\n    object1 : MxCollisionGroup\n        When collision is detected, indicates the first of the two objects that caused the collision\n        (a part of the robot or the tool)\n    object2 : MxCollisionGroup\n        When collision is detected, indicates the second of the two objects that caused the collision\n        (a part of the robot or the tool)", "chunk_size_bytes": 1112, "original_size_bytes": 1113, "start_byte": 92115, "end_byte": 94266}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:144817081ef5", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "SelfCollisionStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2231, 2238], "text": "def __init__(self,\n                 collision_detected: bool = False,\n                 collision_object1: CollisionObject = CollisionObject(),\n                 collision_object2: CollisionObject = CollisionObject()):\n        self.collision_detected = collision_detected\n        self.object1 = collision_object1\n        self.object2 = collision_object2", "hash": "144817081ef5", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self,\n                 collision_detected: bool = False,\n                 collision_object1: CollisionObject = CollisionObject(),\n                 collision_object2: CollisionObject = CollisionObject())", "docstring": null, "chunk_size_bytes": 351, "original_size_bytes": 394, "start_byte": 93234, "end_byte": 93628}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:f7000479e18f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_from_response", "qualified_name": "SelfCollisionStatus.set_from_response", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2240, 2245], "text": "def set_from_response(self, response_args: list[int]) -> list[int]:\n        \"\"\" Set CollisionObject from parsed reply message argument \"\"\"\n        self.collision_detected = bool(response_args.pop(0))\n        response_args = self.object1.set_from_response(response_args)\n        response_args = self.object2.set_from_response(response_args)\n        return response_args", "hash": "f7000479e18f", "chunk_type": "method", "node_type": "function_definition", "signature": "set_from_response(self, response_args: list[int])", "docstring": "Set CollisionObject from parsed reply message argument", "chunk_size_bytes": 368, "original_size_bytes": 368, "start_byte": 93634, "end_byte": 94002}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:531772721f51", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "SelfCollisionStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2247, 2251], "text": "def __str__(self) -> str:\n        if self.collision_detected:\n            return f'Collision detected between {self.object1} and {self.object2}'\n        else:\n            return 'No collision detected'", "hash": "531772721f51", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 201, "original_size_bytes": 201, "start_byte": 94008, "end_byte": 94209}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "SelfCollisionStatus.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2253, 2254], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 94215, "end_byte": 94266}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:3abe5d79559f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "WorkZoneStatus", "qualified_name": "WorkZoneStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2257, 2292], "text": "class WorkZoneStatus:\n    \"\"\"Class for storing the Mecademic robot's \"in work zone\" status.\n       This is used when robot work zone has been defined and enabled (with SetWorkZoneCfg).\n    Attributes\n    ----------\n    outside_work_zone : bool\n        True if the a part of the robot or the tool have reached the work zone boundary.\n        Note that when the collision severity is set to MX_EVENT_SEVERITY_PAUSE_MOTION or greater\n        the robot will have stopped just before the robot moves outside the work zone but flag outside_work_zone will\n        still be set to True until ResumeMotion is called.\n        When collision severity is set to MX_EVENT_SEVERITY_WARNING the flag outside_work_zone will report whether the\n        robot is currently outside the work zone.\n    object : MxCollisionGroup\n        Indicate the object that reached the work zone boundary (a part of the robot, or the tool)\n\"\"\"", "hash": "3abe5d79559f", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's \"in work zone\" status.\n       This is used when robot work zone has been defined and enabled (with SetWorkZoneCfg).\n\n    Attributes\n    ----------\n    outside_work_zone : bool\n        True if the a part of the robot or the tool have reached the work zone boundary.\n        Note that when the collision severity is set to MX_EVENT_SEVERITY_PAUSE_MOTION or greater\n        the robot will have stopped just before the robot moves outside the work zone but flag outside_work_zone will\n        still be set to True until ResumeMotion is called.\n        When collision severity is set to MX_EVENT_SEVERITY_WARNING the flag outside_work_zone will report whether the\n        robot is currently outside the work zone.\n    object : MxCollisionGroup\n        Indicate the object that reached the work zone boundary (a part of the robot, or the tool)", "chunk_size_bytes": 909, "original_size_bytes": 910, "start_byte": 94269, "end_byte": 95977}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d73833e77615", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "WorkZoneStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2274, 2277], "text": "def __init__(self, outside_work_zone: bool = False, collision_object: CollisionObject = CollisionObject()):\n        self.outside_work_zone = outside_work_zone\n        self.object = collision_object", "hash": "d73833e77615", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self, outside_work_zone: bool = False, collision_object: CollisionObject = CollisionObject())", "docstring": null, "chunk_size_bytes": 197, "original_size_bytes": 240, "start_byte": 95185, "end_byte": 95425}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:d4fd77c06b65", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "set_from_response", "qualified_name": "WorkZoneStatus.set_from_response", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2279, 2283], "text": "def set_from_response(self, response_args: list[int]) -> list[int]:\n        \"\"\" Set CollisionObject from parsed reply message argument \"\"\"\n        self.outside_work_zone = bool(response_args.pop(0))\n        response_args = self.object.set_from_response(response_args)\n        return response_args", "hash": "d4fd77c06b65", "chunk_type": "method", "node_type": "function_definition", "signature": "set_from_response(self, response_args: list[int])", "docstring": "Set CollisionObject from parsed reply message argument", "chunk_size_bytes": 296, "original_size_bytes": 296, "start_byte": 95431, "end_byte": 95727}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:8a27ec1b8a9f", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "WorkZoneStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2285, 2289], "text": "def __str__(self) -> str:\n        if self.outside_work_zone:\n            return f'Work zone boundary reached by {self.object}'\n        else:\n            return 'Robot is inside work zone'", "hash": "8a27ec1b8a9f", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 187, "original_size_bytes": 187, "start_byte": 95733, "end_byte": 95920}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "WorkZoneStatus.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2291, 2292], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 95926, "end_byte": 95977}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:311fb38ae1ae", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "CollisionStatus", "qualified_name": "CollisionStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2295, 2319], "text": "class CollisionStatus:\n    \"\"\"Class for storing the Mecademic robot's collision status (collision with self or work zone boundary).\n       This is used when robot collision detection has been activated (with SetCollisionCfg) or\n       work zone has been enabled (with SetWorkZoneCfg)\n    Attributes\n    ----------\n    self_collision_status : SelfCollisionStatus\n        Current self collision status\n    work_zone_status : WorkZoneStatus\n        Current \"inside work zone\" status\n\"\"\"", "hash": "311fb38ae1ae", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the Mecademic robot's collision status (collision with self or work zone boundary).\n       This is used when robot collision detection has been activated (with SetCollisionCfg) or\n       work zone has been enabled (with SetWorkZoneCfg)\n\n    Attributes\n    ----------\n    self_collision_status : SelfCollisionStatus\n        Current self collision status\n    work_zone_status : WorkZoneStatus\n        Current \"inside work zone\" status", "chunk_size_bytes": 483, "original_size_bytes": 484, "start_byte": 95980, "end_byte": 96977}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:51849bbd6e38", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "CollisionStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2308, 2313], "text": "def __init__(self,\n                 self_collision_status: SelfCollisionStatus = SelfCollisionStatus(),\n                 work_zone_status: WorkZoneStatus = WorkZoneStatus()):\n        self.self_collision_status = self_collision_status\n        self.work_zone_status = work_zone_status", "hash": "51849bbd6e38", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self,\n                 self_collision_status: SelfCollisionStatus = SelfCollisionStatus(),\n                 work_zone_status: WorkZoneStatus = WorkZoneStatus())", "docstring": null, "chunk_size_bytes": 282, "original_size_bytes": 325, "start_byte": 96470, "end_byte": 96795}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:e72597b19ee3", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "CollisionStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2315, 2316], "text": "def __str__(self) -> str:\n        return f'Collision status: [ {self.self_collision_status}, {self.work_zone_status} ]'", "hash": "e72597b19ee3", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 119, "original_size_bytes": 119, "start_byte": 96801, "end_byte": 96920}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:078c4bf4772a", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__repr__", "qualified_name": "CollisionStatus.__repr__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2318, 2319], "text": "def __repr__(self) -> str:\n        return str(self)", "hash": "078c4bf4772a", "chunk_type": "method", "node_type": "function_definition", "signature": "__repr__(self)", "docstring": null, "chunk_size_bytes": 51, "original_size_bytes": 51, "start_byte": 96926, "end_byte": 96977}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:0d3652cea368", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "RobotSidecarStatus", "qualified_name": "RobotSidecarStatus", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2322, 2350], "text": "class RobotSidecarStatus:\n    \"\"\"Class for storing the status of a \"sidecar\" scripting engine connected to the robot.\n    Attributes\n    ----------\n    embedded : bool\n        True if this sidecar instance is running embedded inside the robot.\n    remote_ip : str\n        The IP address of this sidecar instance.\n    registered_functions : list[str]\n        List of functions registered by this sidecar instance.\n\"\"\"", "hash": "0d3652cea368", "chunk_type": "class", "node_type": "class_definition", "signature": null, "docstring": "Class for storing the status of a \"sidecar\" scripting engine connected to the robot.\n\n    Attributes\n    ----------\n    embedded : bool\n        True if this sidecar instance is running embedded inside the robot.\n    remote_ip : str\n        The IP address of this sidecar instance.\n    registered_functions : list[str]\n        List of functions registered by this sidecar instance.", "chunk_size_bytes": 416, "original_size_bytes": 417, "start_byte": 96980, "end_byte": 97936}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:1268821e1da8", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__init__", "qualified_name": "RobotSidecarStatus.__init__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2335, 2341], "text": "def __init__(self):\n        self.id: Optional[int] = None\n        self.embedded = False\n        self.remote_ip = \"\"\n        self.registered_functions: list[str] = []", "hash": "1268821e1da8", "chunk_type": "method", "node_type": "function_definition", "signature": "__init__(self)", "docstring": null, "chunk_size_bytes": 165, "original_size_bytes": 209, "start_byte": 97403, "end_byte": 97612}
{"chunk_id": "meca_samples:mecademicpy/mecademicpy/robot_classes.py:924de3319403", "repo": "meca_samples", "commit": "806f144", "lang": "python", "symbol": "__str__", "qualified_name": "RobotSidecarStatus.__str__", "source_path": "mecademicpy/mecademicpy/robot_classes.py", "loc": [2343, 2350], "text": "def __str__(self) -> str:\n        ip = \"\"\n        if not self.embedded:\n            ip = f\", IP: {self.remote_ip}\"\n        return ((f\"Id: {self.id}, \"\n                 f\"Embedded: {self.embedded}, \"\n                 f\"Ip: {self.remote_ip}{ip}, \"\n                 f\"functions: [{','.join(self.registered_functions)}]\"))", "hash": "924de3319403", "chunk_type": "method", "node_type": "function_definition", "signature": "__str__(self)", "docstring": null, "chunk_size_bytes": 318, "original_size_bytes": 318, "start_byte": 97618, "end_byte": 97936}
