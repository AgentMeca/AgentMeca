[
  {
    "snippet": "import React, { useState } from 'react'",
    "span": [
      1,
      1
    ],
    "start_byte": 0,
    "end_byte": 39,
    "node_type": "import_statement",
    "language": "javascript",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/MecaDashboard/src/components/CardHolder/CardHolder.js"
  },
  {
    "snippet": "import RobotCard from '../RobotCard/RobotCard'",
    "span": [
      2,
      2
    ],
    "start_byte": 40,
    "end_byte": 86,
    "node_type": "import_statement",
    "language": "javascript",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/MecaDashboard/src/components/CardHolder/CardHolder.js"
  },
  {
    "snippet": "import styles from './CardHolder.module.css'",
    "span": [
      3,
      3
    ],
    "start_byte": 87,
    "end_byte": 131,
    "node_type": "import_statement",
    "language": "javascript",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/MecaDashboard/src/components/CardHolder/CardHolder.js"
  },
  {
    "snippet": "import plus from './AddCardButton/imgs/plus.png'",
    "span": [
      4,
      4
    ],
    "start_byte": 132,
    "end_byte": 180,
    "node_type": "import_statement",
    "language": "javascript",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/MecaDashboard/src/components/CardHolder/CardHolder.js"
  },
  {
    "snippet": "import AddRobotDialog from './AddRobotDialog/AddRobotDialog'",
    "span": [
      5,
      5
    ],
    "start_byte": 181,
    "end_byte": 241,
    "node_type": "import_statement",
    "language": "javascript",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/MecaDashboard/src/components/CardHolder/CardHolder.js"
  },
  {
    "snippet": "export default function CardHolder(props) {\n    const [numCards, setNumCards] = useState([])\n    const [isOpen, setIsOpen] = useState(false)\n\n    const openModal = () => {\n        setIsOpen(true)\n    }\n\n    const closeModal = () => {\n        setIsOpen(false)\n    }\n\n    async function onClickHandle(name, ipaddress) {\n        if (!numCards.filter(e => e.ip === ipaddress).length > 0) {\n            if (props.connect) {\n                var connection = false;\n                const response = await fetch('/registerRobot', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ ip: ipaddress })\n                })\n                const connectionStatus = await response.json()\n                console.log(connectionStatus)\n                connection = connectionStatus\n                console.log(connection)\n                if (connection) {\n                    setNumCards(prevNumCards => {\n                        return [...prevNumCards, {\n                            'ip': ipaddress,\n                            'card': <RobotCard name={name} ipaddress={ipaddress} connect={props.connect} deleteCard={removeRobotHandle} />\n                        }]\n                    })\n                    closeModal()\n                } else {\n                    alert('Could not connect to this address')\n                }\n            } else {\n                setNumCards(prevNumCards => {\n                    return [...prevNumCards, {\n                        'ip': ipaddress,\n                        'card': <RobotCard name={name} ipaddress={ipaddress} connect={props.connect} deleteCard={removeRobotHandle} />\n                    }]\n                })\n                closeModal()\n            }\n        } else {\n            alert('This IP address is already in use')\n        }\n    }\n\n\n    async function removeRobotHandle(ipaddress) {\n        if (!props.connect) {\n            setNumCards(prevNumCards => {\n                const newNumCards = prevNumCards.filter(card => card.ip !== ipaddress)\n                return newNumCards\n            })\n        }\n    }\n\n\n    return (\n        <div className={styles.cardholder}>\n            {numCards.map((item) => {\n                return item.card\n            })}\n            <button className={styles.addbutton} onClick={openModal}><img className={styles.plussign} src={plus} alt='PlusSign' /></button>\n            {isOpen && (\n                <AddRobotDialog createRobotHandle={onClickHandle} closeDialogHandle={closeModal} />\n            )}\n\n        </div>\n    )\n}",
    "span": [
      8,
      83
    ],
    "start_byte": 244,
    "end_byte": 2888,
    "node_type": "export_statement",
    "language": "javascript",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/MecaDashboard/src/components/CardHolder/CardHolder.js"
  }
]