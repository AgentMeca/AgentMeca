[
  {
    "snippet": "from mecademicpy.robot import Robot",
    "span": [
      1,
      1
    ],
    "start_byte": 0,
    "end_byte": 35,
    "node_type": "import_from_statement",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Glove_Box/backend/backend.py"
  },
  {
    "snippet": "from scipy.spatial.transform import Rotation",
    "span": [
      2,
      2
    ],
    "start_byte": 36,
    "end_byte": 80,
    "node_type": "import_from_statement",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Glove_Box/backend/backend.py"
  },
  {
    "snippet": "import numpy as np",
    "span": [
      3,
      3
    ],
    "start_byte": 81,
    "end_byte": 99,
    "node_type": "import_statement",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Glove_Box/backend/backend.py"
  },
  {
    "snippet": "class MainRack():\n    def __init__(self, n) -> None:\n        self.rack_status = [True]*n       # True if vial is present False if not\n        self.rack_position = list()     # List of positions for every rack point\n        self.rack_pick_dir = list()\n        self.vial_selected = [False]*n\n\n        for i in range(n):\n            self.rack_position.append([0,0,0,0,0,0])\n            self.rack_pick_dir.append(True)             # True for regular False for front pick\n    \n    def update_position(self, n, pos):\n        self.rack_position[n] = pos\n\n    def update_status(self, n, status):\n        self.rack_status[n] = status",
    "span": [
      6,
      21
    ],
    "start_byte": 102,
    "end_byte": 726,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Glove_Box/backend/backend.py",
    "name": "MainRack"
  },
  {
    "snippet": "class Centrifuge():\n    def __init__(self, n) -> None:\n        self.rack_status = [False]*n        # True if vial is present False if not\n        self.rack_position = list()         # List of positions for every rack point\n        self.cent_status = True             # True if ready to be loaded\n        \n        for i in range(n):\n            self.rack_position.append([0,0,0,0,0,0])\n\n    def update_position(self, n, pos):\n        self.rack_position[n] = pos\n\n    def update_status(self, n, status):\n        self.rack_status[n] = status",
    "span": [
      24,
      37
    ],
    "start_byte": 733,
    "end_byte": 1271,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Glove_Box/backend/backend.py",
    "name": "Centrifuge"
  },
  {
    "snippet": "def projectvector(mov_vect, rot_vect):\n    rot_mat = Rotation.from_euler('ZYX', rot_vect)\n    rot_mat_num = rot_mat.as_matrix().transpose()\n    return np.dot(rot_mat_num, mov_vect)",
    "span": [
      40,
      43
    ],
    "start_byte": 1274,
    "end_byte": 1454,
    "node_type": "function_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Glove_Box/backend/backend.py",
    "name": "projectvector"
  }
]