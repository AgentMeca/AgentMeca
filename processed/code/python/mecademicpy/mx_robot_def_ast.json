[
  {
    "snippet": "from enum import IntEnum",
    "span": [
      6,
      6
    ],
    "start_byte": 265,
    "end_byte": 289,
    "node_type": "import_from_statement",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py"
  },
  {
    "snippet": "class MxRobotMsgType(IntEnum):\n    MX_ROBOT_MSG_TYPE_REQUEST = 0  # Request from the user\n    MX_ROBOT_MSG_TYPE_REQUEST_INTERNAL = 1  # Internal request from the user\n    MX_ROBOT_MSG_TYPE_RESPONSE = 10  # Response to user request\n    MX_ROBOT_MSG_TYPE_RESPONSE_INTERNAL = 11  # Response to user request that was identified as \"internal\" by user\n    MX_ROBOT_MSG_TYPE_CTRL_EVENT = 20  # Event spontaneously sent by the robot (control port)\n    MX_ROBOT_MSG_TYPE_MON_EVENT = 21  # Event spontaneously sent by the robot (monitoring port)\n    MX_ROBOT_MSG_TYPE_MON_EVENT_PERIODIC = 22  # Periodic (frequent) event spontaneously sent by the robot",
    "span": [
      43,
      50
    ],
    "start_byte": 2285,
    "end_byte": 2927,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxRobotMsgType"
  },
  {
    "snippet": "class MxRobotModel(IntEnum):\n    MX_ROBOT_MODEL_UNKNOWN = 0\n    MX_ROBOT_MODEL_M500_R1 = 1\n    MX_ROBOT_MODEL_M500_R2 = 2\n    MX_ROBOT_MODEL_M500_R3 = 3\n    MX_ROBOT_MODEL_M500_R4 = 4\n    MX_ROBOT_MODEL_MCS500_R1 = 20\n    MX_ROBOT_MODEL_MCA250_R1 = 30\n    MX_ROBOT_MODEL_MCA1000_R1 = 40",
    "span": [
      58,
      66
    ],
    "start_byte": 3395,
    "end_byte": 3681,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxRobotModel"
  },
  {
    "snippet": "class MxMoveMode(IntEnum):\n    MX_MOVE_MODE_VELOCITY = 0  # Velocity-based moves (SetJointVel, SetCartLinVel, SetCartAngVel)\n    MX_MOVE_MODE_DURATION = 1  # Time-based moves (SetMoveDuration)",
    "span": [
      69,
      71
    ],
    "start_byte": 3684,
    "end_byte": 3876,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxMoveMode"
  },
  {
    "snippet": "class MxEventSeverity(IntEnum):\n    MX_EVENT_SEVERITY_SILENT = 0  # Trace event in robot log\n    MX_EVENT_SEVERITY_WARNING = 1  # Send status code on event\n    MX_EVENT_SEVERITY_PAUSE_MOTION = 2  # Send status code and pause motion on event\n    MX_EVENT_SEVERITY_CLEAR_MOTION = 3  # Send status code, pause and clear motion on event\n    MX_EVENT_SEVERITY_ERROR = 4  # Send status code, pause, clear motion and go in error mode on event\n    MX_EVENT_SEVERITY_INVALID = 0xFFFFFFFF  # Set consistent sizeof(MxEventSeverity)",
    "span": [
      74,
      80
    ],
    "start_byte": 3879,
    "end_byte": 4399,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxEventSeverity"
  },
  {
    "snippet": "class MxTorqueLimitsMode(IntEnum):\n    MX_TORQUE_LIMITS_MODE_ABSOLUTE = 0  # Absolute torque must be within limits\n    MX_TORQUE_LIMITS_MODE_ABSOLUTE_SKIP_ACCEL = 1  # Absolute torque within limits except during acceleration\n    MX_TORQUE_LIMITS_MODE_DELTA_WITH_EXPECTED = 2  # Difference with expected torque within limits\n    MX_TORQUE_LIMITS_MODE_INVALID = 0xFFFFFFFF  # Set consistent sizeof(MxTorqueLimitsMode)\n    MX_TORQUE_LIMITS_DETECT_ALL = 0\n    MX_TORQUE_LIMITS_DETECT_SKIP_ACCEL = 1",
    "span": [
      83,
      89
    ],
    "start_byte": 4402,
    "end_byte": 4896,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxTorqueLimitsMode"
  },
  {
    "snippet": "class MxIoBankId(IntEnum):\n    MX_IO_BANK_ID_UNDEFINED = 0\n    MX_IO_BANK_ID_IO_MODULE = 1  # IOs from the IO expansion module. API string: 'IoModule'\n    MX_IO_BANK_ID_GRIPPER_MODULE = 2  # IOs from the gripper expansion module. API string: 'GripperModule'\n    MX_IO_BANK_ID_SIG_GEN = 99  # IOs from the test signal generator module. API string: 'SigGen'\n    MX_IO_BANK_ID_FTDI_PSU = 100  # IOs from the FTDI device for the PSU safety port. API string: 'FtdiPsu'",
    "span": [
      92,
      97
    ],
    "start_byte": 4899,
    "end_byte": 5362,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxIoBankId"
  },
  {
    "snippet": "class MxDigitalIoState(IntEnum):\n    MX_DIGITAL_IO_STATE_STAY = -1  # Leave previous state\n    MX_DIGITAL_IO_STATE_0 = 0  # Set digital output value to 0\n    MX_DIGITAL_IO_STATE_1 = 1  # Set digital output value to 1",
    "span": [
      104,
      107
    ],
    "start_byte": 5655,
    "end_byte": 5871,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxDigitalIoState"
  },
  {
    "snippet": "class MxWorkZoneMode(IntEnum):\n    MX_WORK_ZONE_MODE_FCP_IN_WORK_ZONE = 1  # Flange center point must remain in the work zone\n    MX_WORK_ZONE_MODE_TOOL_IN_WORK_ZONE = 2  # Robot tool must remain in the work zone\n    MX_WORK_ZONE_MODE_ROBOT_AND_TOOL_IN_WORK_ZONE = 3  # Entire robot and tool must remain in the work zone",
    "span": [
      110,
      113
    ],
    "start_byte": 5874,
    "end_byte": 6194,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxWorkZoneMode"
  },
  {
    "snippet": "class MxCollisionGroup(IntEnum):\n    MX_COLLISION_GROUP_ROBOT = 0  # The robot itself (base and links)\n    MX_COLLISION_GROUP_FCP = 1  # The robot flange center point\n    MX_COLLISION_GROUP_TOOL = 2  # The robot tool (if defined with tools sphere APIs)\n    MX_COLLISION_GROUP_ENV_OBJ = 3  # A user-defined object in the environment (not yet supported)\n    MX_COLLISION_GROUP_WORK_ZONE = 4  # The robot work zone, as defined with the work zone APIs",
    "span": [
      116,
      121
    ],
    "start_byte": 6197,
    "end_byte": 6644,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxCollisionGroup"
  },
  {
    "snippet": "class MxCollisionGroupRobotIdx(IntEnum):\n    MX_COLLISION_GROUP_ROBOT_BASE = 0  # The robot base\n    MX_COLLISION_GROUP_ROBOT_LINK_1 = 1  # Link between joint 1 and joint 2\n    MX_COLLISION_GROUP_ROBOT_LINK_2 = 2  # Link between joint 2 and joint 3\n    MX_COLLISION_GROUP_ROBOT_LINK_3 = 3  # Meca500: Link between joint 3 and joint 4, Mcs500: vertical rod\n    MX_COLLISION_GROUP_ROBOT_LINK_4 = 4  # Meca500: Link between joint 4 and joint 5\n    MX_COLLISION_GROUP_ROBOT_LINK_5 = 5  # Meca500: Link between joint 5 and joint 6\n    MX_COLLISION_GROUP_ROBOT_LINK_6 = 6  # Meca500: Rotating plate where the tool is attached",
    "span": [
      124,
      131
    ],
    "start_byte": 6647,
    "end_byte": 7266,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxCollisionGroupRobotIdx"
  },
  {
    "snippet": "class MxCollisionGroupToolIdx(IntEnum):\n    MX_COLLISION_GROUP_TOOL_SPHERE = 0  # The tool sphere\n    MX_COLLISION_GROUP_TOOL_MPM500 = 10000  # Meca500 valve box\n    MX_COLLISION_GROUP_TOOL_MVK01 = 20000  # Mcs500, Mca250 and Mca1000 IO/vacuum module",
    "span": [
      134,
      137
    ],
    "start_byte": 7269,
    "end_byte": 7519,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxCollisionGroupToolIdx"
  },
  {
    "snippet": "class MxSafeStopCategory(IntEnum):\n    MX_SAFE_STOP_NONE = 0x00\n    MX_SAFE_STOP_ESTOP = 0x01  # Emergency stop (VM removed)\n    MX_SAFE_STOP_PSTOP1 = 0x02  # Safe stop category 1 (VM removed)\n    MX_SAFE_STOP_PSTOP2 = 0x04  # Safe stop category 2 (Standstill if VM is on)\n    MX_SAFE_STOP_OPERATION_MODE = 0x10  # Operation mode change or mode Locked mode (VM removed)\n    MX_SAFE_STOP_ENABLING_DEVICE_RELEASED = 0x20  # Enabling device released while manual mode.\n    MX_SAFE_STOP_VOLTAGE_FLUCTUATION = 0x40  # Power supply external voltage fluctuation (VM removed)\n    MX_SAFE_STOP_REBOOT = 0x80  # Robot just rebooted, waiting Reset to restore VM\n    MX_SAFE_STOP_REDUNDANCY_FAULT = 0x100  # Redundancy fault between master/slave branches (fatal)\n    MX_SAFE_STOP_STANDSTILL_FAULT = 0x200  # Standstill fault (robot moved while standstill)\n    MX_SAFE_STOP_CONNECTION_DROPPED = 0x400  # Timeout in connection to host\n    MX_SAFE_STOP_MINOR_ERROR = 0x800  # Minor error occurred caused VM removal (other than the above)",
    "span": [
      140,
      152
    ],
    "start_byte": 7522,
    "end_byte": 8544,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxSafeStopCategory"
  },
  {
    "snippet": "class MxStopState(IntEnum):\n    MX_STOP_STATE_RESET = 0  # Safety stop condition is not active\n    MX_STOP_STATE_ACTIVE = 1  # Safety stop condition is active (robot is stopped/deactivated)\n    MX_STOP_STATE_RESETTABLE = 2  # Safety stop condition is cleared but awaiting ack (ResetPStop)",
    "span": [
      155,
      158
    ],
    "start_byte": 8547,
    "end_byte": 8835,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxStopState"
  },
  {
    "snippet": "class MxRobotOperationMode(IntEnum):\n    MX_ROBOT_OPERATION_MODE_LOCKED = 0  # Operation mode is \"Locked\". VM off, can't activate robot.\n    MX_ROBOT_OPERATION_MODE_AUTO = 1  # Operation mode is \"Automatic\". No restriction.\n    MX_ROBOT_OPERATION_MODE_MANUAL = 2  # Operation mode is \"Manual\", speed is limited.\n    MX_ROBOT_OPERATION_MODE_INVALID = 3  # Operation mode is invalid.",
    "span": [
      161,
      165
    ],
    "start_byte": 8838,
    "end_byte": 9219,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxRobotOperationMode"
  },
  {
    "snippet": "class MxPsuInputMask(IntEnum):\n    MX_PSU_INPUT_ESTOP = 0x01  # Set (1) when at least one of the two power supply EStop inputs is asserted.\n    MX_PSU_INPUT_PSTOP1 = 0x02  # Set (1) when at least one of the two power supply PStop1 inputs is asserted.\n    MX_PSU_INPUT_PSTOP2 = 0x04  # Set (1) when at least one of the two power supply PStop2 inputs is asserted.\n    MX_PSU_INPUT_RESET_EXT = 0x08  # Set (1) when the power supply 'reset' input is asserted.\n    MX_PSU_INPUT_RESET_KEYPAD = 0x10  # Set (1) when the power supply keypad reset button is pressed.\n    MX_PSU_INPUT_ENABLING_DEVICE = 0x20  # Set (1) when both enabling device inputs are asserted (i.e. pressed).",
    "span": [
      168,
      174
    ],
    "start_byte": 9222,
    "end_byte": 9892,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxPsuInputMask"
  },
  {
    "snippet": "class MxGetLogsMode(IntEnum):\n    MX_GET_LOGS_MODE_FULL = 0  # Get all logs + configuration files\n    MX_GET_LOGS_MODE_QUICK = 1  # Get minimal logs + configuration files\n    MX_GET_LOGS_MODE_LATEST_ONLY = 2  # Get only latest robot log file\n    MX_GET_LOGS_MODE_USER_LOG_ONLY = 3  # Get only the latest user log\n    MX_GET_LOGS_MODE_FLIGHT_RECORDER = 4  # Get only the flight recorder",
    "span": [
      177,
      182
    ],
    "start_byte": 9895,
    "end_byte": 10280,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxGetLogsMode"
  },
  {
    "snippet": "class MxDiagStatus(IntEnum):\n    MX_DIAG_STATUS_UNKNOWN = 0  # Diagnostic status is unknown\n    MX_DIAG_STATUS_PASS = 1  # Diagnostic status is \"Valid\" (no error found)\n    MX_DIAG_STATUS_WARNING = 2  # Diagnostic status is \"warning\" (some minor problem detected)\n    MX_DIAG_STATUS_ERROR = 3  # Diagnostic status is \"error\" (an error was detected, but possibly non-fatal)\n    MX_DIAG_STATUS_FATAL_ERROR = 4  # Diagnostic status is \"fatal-error\" (a fatal error, i.e. robot cannot be used)",
    "span": [
      185,
      190
    ],
    "start_byte": 10283,
    "end_byte": 10771,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxDiagStatus"
  },
  {
    "snippet": "class MxDiagLevel(IntEnum):\n    MX_DIAG_LVL_BASIC = 0  # Basic level, always visible\n    MX_DIAG_LVL_ADVANCED = 5  # Advanced level, not shown by default\n    MX_DIAG_LVL_DEBUG = 10  # Debug level, only available in dev mode",
    "span": [
      193,
      196
    ],
    "start_byte": 10774,
    "end_byte": 10997,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxDiagLevel"
  },
  {
    "snippet": "class MxMotionCmdType(IntEnum):\n    MX_MOTION_CMD_TYPE_NO_MOVE = 0  # No movement (noop)\n    MX_MOTION_CMD_TYPE_MOVEJOINTS = 1  # Move each joint to given absolute position in degrees\n    MX_MOTION_CMD_TYPE_MOVEPOSE = 2  # Move to a position relative to WRF (x-y-z in mm, a-b-c in degrees)\n    MX_MOTION_CMD_TYPE_MOVELIN = 3  # Move to a position relative to WRF (x-y-z in mm, a-b-c in degrees)\n    MX_MOTION_CMD_TYPE_MOVELINRELTRF = 4  # Relative movement (relative to the current TRF position)\n    MX_MOTION_CMD_TYPE_MOVELINRELWRF = 5  # Relative movement (relative to the current WRF position)\n    MX_MOTION_CMD_TYPE_DELAY = 6  # Delay in seconds before processing the next command\n    MX_MOTION_CMD_TYPE_SETBLENDING = 7  # Set blending ration (in percent) between consecutive move commands\n    MX_MOTION_CMD_TYPE_SETJOINTVEL = 8  # Set joint target velocity in percent (for MovePost and MoveJoint only)\n    MX_MOTION_CMD_TYPE_SETJOINTACC = 9  # Set joint acceleration in percent (for MovePost and MoveJoint only)\n    MX_MOTION_CMD_TYPE_SETCARTANGVEL = 10  # Set the max angular velocity for MoveLinX commands, in deg/s\n    MX_MOTION_CMD_TYPE_SETCARTLINVEL = 11  # Set the max linear velocity for MoveLinX commands in mm/s\n    MX_MOTION_CMD_TYPE_SETCARTACC = 12  # Set maximum cartesian acceleration (linear and angular) in percent\n    MX_MOTION_CMD_TYPE_SETTRF = 13  # Set the pose of the RTF with respect of the FRF\n    MX_MOTION_CMD_TYPE_SETWRF = 14  # Set the pose of the WRF with respect of the BRF\n    MX_MOTION_CMD_TYPE_SETCONF = 15  # Set the desired inverse kinematic config for MovePose.\n    MX_MOTION_CMD_TYPE_SETAUTOCONF = 16  # Enable or disable automatic configuration for inverse kinematic\n    MX_MOTION_CMD_TYPE_SETCHECKPOINT = 17  # Inserts a \"set checkpoint\" command between two moves, so robot status\n    MX_MOTION_CMD_TYPE_GRIPPEROPENCLOSE = 18  # Open or close the gripper\n    MX_MOTION_CMD_TYPE_GRIPPERVEL = 19  # Limit the velocity of the gripper fingers in percent\n    MX_MOTION_CMD_TYPE_GRIPPERFORCE = 20  # Limit the grip force of the gripper in percent\n    MX_MOTION_CMD_TYPE_MOVEJOINTSVEL = 21  # Set current mode to \"join velocity mode\"\n    MX_MOTION_CMD_TYPE_MOVELINVELWRF = 22  # Set current mode to \"Cartesian WRF velocity mode\"\n    MX_MOTION_CMD_TYPE_MOVELINVELTRF = 23  # Set current mode to \"Cartesian TRF velocity mode\"\n    MX_MOTION_CMD_TYPE_SETVELTIMEOUT = 24  # Timeout for current velocity mode\n    MX_MOTION_CMD_TYPE_SETCONFTURN = 25  # Set the last joint turn conf (i.e. which turn should be used\n    MX_MOTION_CMD_TYPE_SETAUTOCONFTURN = 26  # Enable or disable automatic last joint turn selection\n    MX_MOTION_CMD_TYPE_SETTORQUELIMITS = 27  # Set torque limits for current motion\n    MX_MOTION_CMD_TYPE_SETTORQUELIMITSCFG = 28  # Set torque limits configuration for current motion\n    MX_MOTION_CMD_TYPE_MOVEJOINTSREL = 29  # Move each joint relative to current joint position\n    MX_MOTION_CMD_TYPE_SETVALVESTATE = 30  # Set valve box valves states\n    MX_MOTION_CMD_TYPE_GRIPPERRANGE = 31  # Set the Close and Open position that will be used when calling\n    MX_MOTION_CMD_TYPE_GRIPPERPOS = 32  # Move gripper to a specific position, in mm from the most closed\n    MX_MOTION_CMD_TYPE_SETJOINTVELLIMIT = 33  # Max allowed joint vel (max for SetJointVel and linear moves).\n    MX_MOTION_CMD_TYPE_SETOUTPUTSTATE = 34  # Set digital output states (through motion queue)\n    MX_MOTION_CMD_TYPE_SETOUTPUTSTATE_IMMEDIATE = 35  # Set digital output states (immediate, bypass motion queue)\n    MX_MOTION_CMD_TYPE_SETIOSIM = 36  # Set (or clear) IO simulation mode\n    MX_MOTION_CMD_TYPE_VACUMMGRIP = 37  # Apply vacuum in order to attempt to grip part\n    MX_MOTION_CMD_TYPE_VACUMMGRIP_IMMEDIATE = 38  # Same as above but immediate, bypass motion queue\n    MX_MOTION_CMD_TYPE_VACUMMRELEASE = 39  # Same as above but immediate, bypass motion queue\n    MX_MOTION_CMD_TYPE_VACUMMRELEASE_IMMEDIATE = 40  # Same as above but immediate, bypass motion queue\n    MX_MOTION_CMD_TYPE_SETVACUUMTHRESHOLD = 41  # Set vacuum threshold configuration\n    MX_MOTION_CMD_TYPE_SETVACUUMTHRESHOLD_IMMEDIATE = 42  # Set vacuum threshold configuration\n    MX_MOTION_CMD_TYPE_SETVACUUMPURGEDURATION = 43  # Set vacuum purge duration\n    MX_MOTION_CMD_TYPE_SETVACUUMPURGEDURATION_IMMEDIATE = 44  # Same as above but immediate, bypass motion queue\n    MX_MOTION_CMD_TYPE_MOVEJUMP = 45  # Similar to MovePose with addition of start/end jump\n    MX_MOTION_CMD_TYPE_SET_MOVEJUMP_HEIGHT = 46  # Configure the height of MoveJump\n    MX_MOTION_CMD_TYPE_SET_MOVEJUMP_APPROACH_VEL = 47  # Configure the final approach velocity of MoveJump\n    MX_MOTION_CMD_TYPE_SET_TIME_SCALING = 48  # Set program execution time scaling\n    MX_MOTION_CMD_TYPE_SET_MOVE_MODE = 49  # Equivalent to TCP command SetMoveMode\n    MX_MOTION_CMD_TYPE_SET_MOVE_DURATION_CFG = 50  # Equivalent to TCP command SetMoveDurationCfg\n    MX_MOTION_CMD_TYPE_SET_MOVE_DURATION = 51  # Equivalent to TCP command SetMoveDuration\n    MX_MOTION_CMD_TYPE_SET_PAYLOAD = 60  # Equivalent to TCP command SetPayload\n    MX_MOTION_CMD_TYPE_START_OFFLINE_PROGRAM = 100  # Start an offline program with specified id\n    MX_MOTION_CMD_TYPE_SET_JOINT_LIMITS = 150  # Equivalent to TCP command SetJointLimits\n    MX_MOTION_CMD_TYPE_SET_JOINT_LIMITS_CFG = 151  # Equivalent to TCP command SetJointLimitsCfg\n    MX_MOTION_CMD_TYPE_SET_WORK_ZONE_CFG = 152  # Equivalent to TCP command SetWorkZoneCfg\n    MX_MOTION_CMD_TYPE_SET_WORK_ZONE_LIMITS = 153  # Equivalent to TCP command SetWorkZoneLimits\n    MX_MOTION_CMD_TYPE_SET_COLLISION_CFG = 154  # Equivalent to TCP command SetCollisionCfg\n    MX_MOTION_CMD_TYPE_SET_TOOL_SPHERE = 155  # Equivalent to TCP command SetToolSphere\n    MX_MOTION_CMD_TYPE_SET_CALIBRATION_CFG = 156  # Equivalent to TCP command SetCalibrationCfg\n    MX_MOTION_CMD_TYPE_REBOOT_ROBOT = 200  # Reboot the robot\n    MX_MOTION_CMD_TYPE_SHUTDOWN_ROBOT = 201  # Shutdown the robot (Mg2 robots only)\n    MX_MOTION_CMD_TYPE_SETDBG = 1000  # Enable debug options on the robot. For Mecademic use only.\n    MX_MOTION_CMD_TYPE_MG2BUSDBG = 1001  # Send custom command on Mg2 bus. For Mecademic use only.\n    MX_MOTION_CMD_TYPE_CLEAR_HOMING = 1002  # Robot will need to be homed again after next activation",
    "span": [
      199,
      265
    ],
    "start_byte": 11000,
    "end_byte": 17275,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxMotionCmdType"
  },
  {
    "snippet": "class MxEip_DynamicType(IntEnum):\n    MX_EIP_DYNAMIC_AUTO = 0\n    MX_EIP_DYNAMIC_CFG_FW_VERSION = 1\n    MX_EIP_DYNAMIC_CFG_PRODUCT_TYPE = 2\n    MX_EIP_DYNAMIC_CFG_ROBOT_SERIAL = 3\n    MX_EIP_DYNAMIC_CFG_ROBOT_DH_MODEL_1 = 5\n    MX_EIP_DYNAMIC_CFG_ROBOT_DH_MODEL_2 = 6\n    MX_EIP_DYNAMIC_CFG_ROBOT_DH_MODEL_3 = 7\n    MX_EIP_DYNAMIC_CFG_ROBOT_DH_MODEL_4 = 8\n    MX_EIP_DYNAMIC_CFG_ROBOT_DH_MODEL_5 = 9\n    MX_EIP_DYNAMIC_CFG_ROBOT_DH_MODEL_6 = 10\n    MX_EIP_DYNAMIC_CFG_JOINT_LIMITS_CFG = 11\n    MX_EIP_DYNAMIC_CFG_MODEL_JOINT_LIMITS_1_2_3 = 12\n    MX_EIP_DYNAMIC_CFG_MODEL_JOINT_LIMITS_4_5_6 = 13\n    MX_EIP_DYNAMIC_CFG_JOINT_LIMITS_1_2_3 = 14\n    MX_EIP_DYNAMIC_CFG_JOINT_LIMITS_4_5_6 = 15\n    MX_EIP_DYNAMIC_CFG_EXT_TOOL_FW_VERSION = 16\n    MX_EIP_DYNAMIC_CFG_WORK_ZONE_CFG = 17\n    MX_EIP_DYNAMIC_CFG_WORK_ZONE_LIMITS = 18\n    MX_EIP_DYNAMIC_CFG_TOOL_SPHERE = 19\n    MX_EIP_DYNAMIC_CFG_CALIBRATION = 30\n    MX_EIP_DYNAMIC_CFG_COLLISION_CFG = 36\n    MX_EIP_DYNAMIC_MQ_CONF = 20\n    MX_EIP_DYNAMIC_MQ_PARAMS = 21\n    MX_EIP_DYNAMIC_MQ_VEL_ACCEL = 22\n    MX_EIP_DYNAMIC_MQ_GRIPPER_CFG = 23\n    MX_EIP_DYNAMIC_MQ_TORQUE_LIMITS_CFG = 24\n    MX_EIP_DYNAMIC_MQ_TORQUE_LIMITS = 25\n    MX_EIP_DYNAMIC_MQ_VACUUM_GRIP_CFG = 26\n    MX_EIP_DYNAMIC_MQ_MOVEJUMP_HEIGHT = 27\n    MX_EIP_DYNAMIC_MQ_MOVEJUMP_APPROACH_VEL = 28\n    MX_EIP_DYNAMIC_MQ_MOVE_DURATION_CFG = 29\n    MX_EIP_DYNAMIC_MQ_PAYLOAD = 31\n    MX_EIP_DYNAMIC_RT_TARGET_JOINT_POS = 30  # Present in basic PDOs already\n    MX_EIP_DYNAMIC_RT_TARGET_CART_POS = 31  # Present in basic PDOs already\n    MX_EIP_DYNAMIC_RT_TARGET_JOINT_VEL = 32\n    MX_EIP_DYNAMIC_RT_TARGET_JOINT_TORQ = 33\n    MX_EIP_DYNAMIC_RT_TARGET_CART_VEL = 34\n    MX_EIP_DYNAMIC_RT_TARGET_CONF = 35  # Present in basic PDOs already\n    MX_EIP_DYNAMIC_RT_COLLISION_STATUS = 37\n    MX_EIP_DYNAMIC_RT_WORK_ZONE_STATUS = 38\n    MX_EIP_DYNAMIC_RT_JOINT_POS = 40\n    MX_EIP_DYNAMIC_RT_CART_POS = 41\n    MX_EIP_DYNAMIC_RT_JOINT_VEL = 42\n    MX_EIP_DYNAMIC_RT_JOINT_TORQ = 43\n    MX_EIP_DYNAMIC_RT_CART_VEL = 44\n    MX_EIP_DYNAMIC_RT_CONF = 45\n    MX_EIP_DYNAMIC_RT_ACCELEROMETER_5 = 46\n    MX_EIP_DYNAMIC_RT_WRF = 50  # Present in basic PDOs already\n    MX_EIP_DYNAMIC_RT_TRF = 51  # Present in basic PDOs already\n    MX_EIP_DYNAMIC_RT_EXTTOOL_STATUS = 52\n    MX_EIP_DYNAMIC_RT_GRIPPER_VALVE_STATE = 53\n    MX_EIP_DYNAMIC_TIME_SCALING = 54\n    MX_EIP_DYNAMIC_RT_IO_MODULE_IO_STATE = 72  # Digital IOs from the IO module\n    MX_EIP_DYNAMIC_RT_VACUUM_GRIP_STATE = 73  # Vacuum gripper state from the IO module\n    MX_EIP_DYNAMIC_RT_GRIPPER_MODULE_IO_STATE = 74  # Digital IOs from the gripper module\n    MX_EIP_DYNAMIC_RT_SIG_GEN_IO_STATE = 78  # Digital IOs from the signal generator\n    MX_EIP_DYNAMIC_RT_FTDI_PSU_IO_STATE = 79  # Digital IOs from FTDI connected to the PSU safety port\n    MX_EIP_DYNAMIC_FORCE_32_BITS = 0xFFFFFFFF",
    "span": [
      272,
      330
    ],
    "start_byte": 17662,
    "end_byte": 20501,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxEip_DynamicType"
  },
  {
    "snippet": "class MxCyclicProtocolMode(IntEnum):\n    MX_CYCLIC_PROTOCOL_DISABLED = 0  # Protocol is disabled. Robot does not listen on socket for connections.\n    MX_CYCLIC_PROTOCOL_ENABLED = 1  # Protocol is enabled and robot can be controlled.\n    MX_CYCLIC_PROTOCOL_ENABLED_MONITORING = 2  # Protocol is enabled for monitoring the robot only (output ignored)",
    "span": [
      333,
      336
    ],
    "start_byte": 20504,
    "end_byte": 20853,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxCyclicProtocolMode"
  },
  {
    "snippet": "class MxRobotStatusCode(IntEnum):\n    MX_ST_NONE = 0\n    MX_ST_BUFFER_FULL = 1000  # Maximum number of queued commands reached. Try sending fewer at a time.\n    MX_ST_UNKNOWN_CMD = 1001  # Unknown or empty command.\n    MX_ST_SYNTAX_ERR = 1002  # A parenthesis or a comma has been omitted.\n    MX_ST_ARG_ERR = 1003  # Wrong number of arguments or invalid input (e.g. value out of range).\n    MX_ST_NOT_ACTIVATED = 1005  # Robot is not activated, must be activated before using that command.\n    MX_ST_NOT_HOMED = 1006  # Robot is not homed, must be homed before using that command.\n    MX_ST_JOINT_OVER_LIMIT = 1007  # Requested position would cause joints to be over limit.\n    MX_ST_BLOCKED_BY_180_DEG_PROT = 1010  # Requested move blocked because some joints would move more than 180 deg\n    MX_ST_ALREADY_ERR = 1011  # Robot is in error, command can't be processed. Reset errors then retry.\n    MX_ST_SINGULARITY_ERR = 1012  # Move command would require to go through a singularity. Not allowed.\n    MX_ST_ACTIVATION_ERR = 1013  # Activation fail. You may try again.\n    MX_ST_HOMING_ERR = 1014  # Homing failed. You may try again.\n    MX_ST_MASTER_ERR = 1015  # Mastering failed. See log for details.\n    MX_ST_OUT_OF_REACH = 1016  # Requested joint set or pose is out of reach for this robot.\n    MX_ST_OFFLINE_SAVE_ERR = 1022  # Not saving a program, thus can't stop saving.\n    MX_ST_IGNORE_CMD_OFFLINE = 1023  # This command cannot be executed in the offline program.\n    MX_ST_MASTERING_NEEDED = 1024  # Mastering was loss. Contact Mecademic support team.\n    MX_ST_IMPOSSIBLE_RESET_ERR = 1025  # This error cannot be reset. Power cycle the robot to recover.\n    MX_ST_MUST_BE_DEACTIVATED = 1026  # This command is available only when the robot is deactivated.\n    MX_ST_SIM_MUST_DEACTIVATED = 1027  # Enabling simulation mode is only possible when the robot is deactivated.\n    MX_ST_OFFLINE_FULL = 1029  # Offline program memory is full (13,000 commands). Saving stopped.\n    MX_ST_ALREADY_SAVING = 1030  # Offline program saving is already in progress.\n    MX_ST_ILLEGAL_WHILE_SAVING = 1031  # This command is illegal while saving an offline program.\n    MX_ST_HOMING_JOINTS_OUT_OF_RANGE = 1032  # DEPRECATED. Was used only on release 8.X\n    MX_ST_START_CONF_MISMATCH = 1033  # Requested move blocked because start pos is not in requested conf\n    MX_ST_NO_GRIPPER = 1038  # No gripper is connected, command can't be executed.\n    MX_ST_CMD_FAILED = 1040  # Command failed (generic response for various simple commands)\n    MX_ST_NO_VBOX = 1041  # No pneumatic module is connected.\n    MX_ST_EXT_TOOL_SIM_MUST_DEACTIVATED = 1042  # Switching external tool type is only possible when the robot\n    MX_ST_INVALID_BANK_ID = 1043  # The specified IO bank is not present on this robot.\n    MX_ST_NO_VACUUM_MODULE_ID = 1044  # No Vacuum module present on this robot.\n    MX_ST_API_LOCKED = 1045  # The API is locked.\n    MX_ST_LIST_FILES_ERR = 1500  # Failed \"ListFiles\" API command\n    MX_ST_LOAD_FILE_ERR = 1501  # Failed \"LoadFile\" API command\n    MX_ST_SAVE_FILE_ERR = 1502  # Failed \"SaveFile\" API command\n    MX_ST_DELETE_FILE_ERR = 1503  # Failed \"DeleteFile\" API command\n    MX_ST_SAVE_ROBOT_CONFIG_ERR = 1504  # Failed to save robot config file\n    MX_ST_UPDATE_LOADED_MECASCRIPTS_ERR = 1505  # Failed to update loaded MecaScripts\n    MX_ST_LIST_VARIABLES_ERR = 1550  # Failed \"ListVariable\" API command\n    MX_ST_GET_VARIABLE_ERR = 1551  # Failed \"GetVariable\" API command\n    MX_ST_CREATE_VARIABLE_ERR = 1552  # Failed \"CreateVariable\" API command\n    MX_ST_DELETE_VARIABLE_ERR = 1553  # Failed \"DeleteVariable\" API command\n    MX_ST_SET_VARIABLE_ERR = 1554  # Failed \"SetVariable\" API command\n    MX_ST_ACTIVATED = 2000  # Motors were successfully activated\n    MX_ST_HOME_DONE = 2002  # Homing done.\n    MX_ST_DEACTIVATED = 2004  # Motors deactivated.\n    MX_ST_ERROR_RESET = 2005  # The error was reset. Commands can now be sent again.\n    MX_ST_NO_ERROR_RESET = 2006  # There was no error to reset.\n    MX_ST_GET_STATUS_ROBOT = 2007  # This event reports the status of the robot.\n    MX_ST_BRAKES_OFF = 2008  # All brakes are now released.\n    MX_ST_MASTER_DONE = 2009  # Mastering now done.\n    MX_ST_BRAKES_ON = 2010  # All brakes are now set.\n    MX_ST_JOGGING_MODE = 2011  # Response to SetJoggingMode\n    MX_ST_GET_WRF = 2013  # Response to GetWrf\n    MX_ST_GET_TRF = 2014  # Response to GetTrf\n    MX_ST_TIME_SCALING = 2015  # Response to GetTimeScaling and monitoring event when it changes\n    MX_ST_GET_JOINTS = 2026  # \"GetJoints\" response (current joint angles in degrees).\n    MX_ST_GET_POSE = 2027  # \"GetPose\" response (current position in mm, Euler angles in degrees).\n    MX_ST_GET_AUTO_CONF = 2028\n    MX_ST_GET_CONF = 2029  # \"GetConf\" response (current shoulder, elbow, wrist conf)\n    MX_ST_GET_AUTO_CONF_TURN = 2031\n    MX_ST_GET_CONF_TURN = 2036  # \"GetConfTurn\" response\n    MX_ST_PAUSE_MOTION = 2042  # Motion paused.\n    MX_ST_RESUME_MOTION = 2043  # Motion resumed.\n    MX_ST_CLEAR_MOTION = 2044  # Motion was cleared.\n    MX_ST_SIM_ON = 2045  # Simulation mode is now enabled.\n    MX_ST_SIM_OFF = 2046  # Simulation mode is now disabled.\n    MX_ST_EXTTOOL_SIM = 2047  # External tool simulation mode has changed.\n    MX_ST_RECOVERY_MODE_ON = 2049  # Robot is now in recovery mode.\n    MX_ST_RECOVERY_MODE_OFF = 2050  # Robot is no more in recovery mode.\n    MX_ST_RECOVERY_VEL_CAP = 2051  # Recovery mode has capped velocity.\n    MX_ST_EOM_ON = 2052  # End of movement events are enabled.\n    MX_ST_EOM_OFF = 2053  # End of movement events are disabled.\n    MX_ST_EOB_ON = 2054  # End of block events are enabled.\n    MX_ST_EOB_OFF = 2055  # End of block events are enabled.\n    MX_ST_IO_SIM = 2056  # Response to GetIoSim.\n    MX_ST_START_SAVING = 2060  # Offline program saving now started.\n    MX_ST_N_CMD_SAVED = 2061  # Offline program saving done (reports number of saved commands)\n    MX_ST_OFFLINE_START = 2063  # Offline program started to run.\n    MX_ST_OFFLINE_LOOP_ON = 2064  # Offline program loop is enabled.\n    MX_ST_OFFLINE_LOOP_OFF = 2065  # Offline program loop is disabled.\n    MX_ST_MASTERING_ALREADY_DONE = 2072  # Mastering already done. Special op needed to override it.\n    MX_ST_GET_ETHERNET_IP_ENABLED = 2073  # Response to GetEtherNetIpEnabled\n    MX_ST_GET_PROFINET_ENABLED = 2074  # Response to GetProfinetEnabled\n    MX_ST_GET_STATUS_GRIPPER = 2079  # \"GetStatusGripper\" response (see pdf doc for response fields meaning).\n    MX_ST_GET_CMD_PENDING_COUNT = 2080  # Number of pending commands in the queue.\n    MX_ST_GET_FW_VERSION = 2081  # The firmware version running on the robot.\n    MX_ST_GET_FW_VERSION_FULL = 2082  # More detailed info about the firmware version running on the robot.\n    MX_ST_GET_ROBOT_SERIAL = 2083  # Current robot serial number (response to GetRobotSerial and SetRobotSerial)\n    MX_ST_GET_PRODUCT_TYPE = 2084  # Current product type (Meca500...)\n    MX_ST_CMD_SUCCESSFUL = 2085  # Command successful (generic response for various simple commands)\n    MX_ST_GET_EXT_TOOL_FW_VERSION = 2086  # \"GetExtToolFwVersion\" response with current gripper firmware version.\n    MX_ST_GET_EXT_PORT_COMM_ERRORS = 2087  # \"GetExtPortCommErrors\" response.\n    MX_ST_GET_EXT_TOOL_COMM_ERRORS = 2088  # \"GetExtToolCommErrors\" response.\n    MX_ST_GET_NETWORK_CFG = 2089  # \"GetNetworkCfg\" response (JSON format)\n    MX_ST_GET_JOINT_LIMITS = 2090  # \"GetJointLimits\" response (joint nb, min, max)\n    MX_ST_GET_NETWORK_STATUS = 2091  # \"GetNetworkStatus\" response (JSON format)\n    MX_ST_SET_JOINT_LIMITS = 2092  # \"SetJointLimits\" success response\n    MX_ST_SET_JOINT_LIMITS_CFG = 2093  # \"SetJointLimitsCfg\" success response (joint limits enabled)\n    MX_ST_GET_JOINT_LIMITS_CFG = 2094  # \"GetJointLimitsCfg\" response\n    MX_ST_GET_ROBOT_NAME = 2095  # \"GetRobotName\" response\n    MX_ST_SET_CTRL_PORT_MONIT = 2096  # \"SetCtrlPortMonitoring\" response\n    MX_ST_SYNC_CMD_QUEUE = 2097  # \"SyncCmdQueue\" response\n    MX_ST_GET_DETECTED_DRIVES = 2098  # \"GetDetectedDrives\" response\n    MX_ST_GET_DRIVE_ENC_INDEX = 2099  # \"GetDriveEncIndex\" response\n    MX_ST_GET_MODEL_VEL_LIMITS = 2108  # \"GetModelVelLimits\" response (in JSON)\n    MX_ST_GET_CMD_DEF = 2109  # \"GetCmdDef\" response (in JSON)\n    MX_ST_GET_ROBOT_KIN_MODEL = 2110  # \"GetRobotKinModel\" response\n    MX_ST_GET_CALIBRATION_DH_MODEL = 2111  # \"GetCalibrationDhModel\" response\n    MX_ST_GET_JOINT_OFFSET = 2112  # \"GetJointOffset\" response\n    MX_ST_GET_MODEL_JOINT_LIMITS = 2113  # \"GetModelJointLimits\" response\n    MX_ST_GET_TEST_BENCH_MODE = 2114  # \"GetTestBenchMode\" response\n    MX_ST_GET_MOTION_OPTIONS = 2115  # \"GetMotionOptions\" response\n    MX_ST_GET_MONITORING_INTERVAL = 2116  # \"GetMonitoringInterval\" response\n    MX_ST_GET_REAL_TIME_MONITORING = 2117  # \"GetRealTimeMonitoring\" response\n    MX_ST_GET_NETWORK_OPTIONS = 2119  # \"GetNetworkOptions\" response\n    MX_ST_GET_CALIBRATION_BRF_OFFSET = 2120  # \"GetCalibrationBrfOffset\" response\n    MX_ST_GET_CALIBRATION_FRF_OFFSET = 2121  # \"GetCalibrationFrfOffset\" response\n    MX_ST_GET_ROBOT_CALIBRATED = 2122  # \"GetRobotCalibrated\" response\n    MX_ST_GET_CALIBRATION_KMOTOR_RATIO = 2123  # \"GetCalibrationKMotorRatio\" response\n    MX_ST_GET_CALIBRATION_Q23456_RATIO = 2124  # \"GetCalibrationQ23456Ratio\" response\n    MX_ST_GET_CALIBRATION_STIFFNESS_RATIO = 2125  # \"GetCalibrationStiffnessRatio\" response\n    MX_ST_GET_CALIBRATION_BACKLASH = 2126  # \"GetCalibrationBacklash\" response\n    MX_ST_GET_STATION_ALIAS = 2130  # \"GetStationAlias\" response\n    MX_ST_GET_ROBOT_PROD_INFO = 2131  # \"GetRobotProdInfo\" response\n    MX_ST_GET_RTC = 2140  # \"GetRtc\" response\n    MX_ST_GET_ROBOT_STATS = 2141  # GetRobotStats response\n    MX_ST_GET_CHECKPOINT_DISCARDED = 2149  # \"GetCheckpointDiscarded\" response\n    MX_ST_GET_BLENDING = 2150  # \"GetBlending\" response\n    MX_ST_GET_VEL_TIMEOUT = 2151  # \"GetVelTimeout\" response\n    MX_ST_GET_JOINT_VEL = 2152  # \"GetJointVel\" response\n    MX_ST_GET_JOINT_ACC = 2153  # \"GetJointAcc\" response\n    MX_ST_GET_CART_LIN_VEL = 2154  # \"GetCartLinVel\" response\n    MX_ST_GET_CART_ANG_VEL = 2155  # \"GetCartAngVel\" response\n    MX_ST_GET_CART_ACC = 2156  # \"GetCartAcc\" response\n    MX_ST_GET_CHECKPOINT = 2157  # \"GetCheckpoint\" response\n    MX_ST_GET_GRIPPER_FORCE = 2158  # \"GetGipperForce\" response\n    MX_ST_GET_GRIPPER_VEL = 2159  # \"GetGipperVel\" response\n    MX_ST_GET_TORQUE_LIMITS_CFG = 2160  # \"GetTorqueLimitsCfg\" response\n    MX_ST_GET_TORQUE_LIMITS = 2161  # \"GetTorqueLimits\" response\n    MX_ST_GET_GRIPPER_RANGE = 2162  # \"GetGipperRange\" response\n    MX_ST_GET_WORK_ZONE_CFG = 2163  # \"GetWorkZoneCfg\" response\n    MX_ST_SET_WORK_ZONE_CFG = 2164  # \"SetWorkZoneCfg\" response\n    MX_ST_GET_WORK_ZONE_LIMITS = 2165  # \"GetWorkZoneLimits\" response\n    MX_ST_SET_WORK_ZONE_LIMITS = 2166  # \"SetWorkZoneLimits\" response\n    MX_ST_GET_TOOL_SPHERE = 2167  # \"GetToolSphere\" response\n    MX_ST_SET_TOOL_SPHERE = 2168  # \"SetToolSphere\" response\n    MX_ST_GET_JOINT_VEL_LIMIT = 2169  # \"GetJointVelLimit\" response\n    MX_ST_SET_CALIBRATION_CFG = 2170  # \"SetCalibrationCfg\" response\n    MX_ST_GET_CALIBRATION_CFG = 2171  # \"GetCalibrationCfg\" response\n    MX_ST_GET_VACUUM_THRESHOLD = 2172  # \"GetVacuumThreshold\" response\n    MX_ST_GET_VACUUM_PURGE_DURATION = 2173  # \"GetVacuumPurgeDuration\" response\n    MX_ST_GET_MOVEJUMP_HEIGHT = 2174  # \"GetMoveJumpHeight\" response\n    MX_ST_GET_MOVEJUMP_APPROACH_VEL = 2175  # \"GetMoveJumpApproachVel\" response\n    MX_ST_GET_OPERATION_MODE = 2176  # \"GetOperationMode\" response (\\ref MxRobotOperationMode)\n    MX_ST_CONNECTION_WATCHDOG = 2177  # \"ConnectionWatchdog\" response\n    MX_ST_SET_PSTOP2_CFG = 2178  # \"SetPStop2Cfg\" response\n    MX_ST_GET_PSTOP2_CFG = 2179  # \"GetPStop2Cfg\" response\n    MX_ST_SET_COLLISION_CFG = 2180  # \"SetCollisionCfg\" response\n    MX_ST_GET_COLLISION_CFG = 2181  # \"GetCollisionCfg\" response\n    MX_ST_GET_COLLISION_STATUS = 2182  # \"GetCollisionStatus\" response\n    MX_ST_GET_WORK_ZONE_STATUS = 2183  # \"GetWorkZoneStatus\" response\n    MX_ST_GET_BRAKES_STATE = 2184  # \"GetBrakesState\" response\n    MX_ST_SET_CALIBRATION_MODE = 2185  # \"SetCalibrationMode\" response\n    MX_ST_GET_CALIBRATION_MODE = 2186  # \"GetCalibrationMode\" response\n    MX_ST_GET_SIM_MODE_CFG = 2187  # \"GetSimModeCfg\" response\n    MX_ST_SET_SIM_MODE_CFG = 2188  # \"SetSimModeCfg\" response\n    MX_ST_GET_MOVE_MODE = 2189  # \"GetMoveMode\" response\n    MX_ST_GET_MOVE_DURATION_CFG = 2190  # \"GetMoveDurationCfg\" response\n    MX_ST_GET_MOVE_DURATION = 2191  # \"GetMoveDuration\" response\n    MX_ST_GET_PAYLOAD = 2192  # \"GetPayload\" response\n    MX_ST_RT_TARGET_JOINT_POS = 2200  # Timestamp + joint positions in degrees\n    MX_ST_RT_TARGET_CART_POS = 2201  # Timestamp + Cartesian position (in mm, Euler angles in degrees).\n    MX_ST_RT_TARGET_JOINT_VEL = 2202  # Timestamp + joint velocity in degrees per second\n    MX_ST_RT_TARGET_JOINT_TORQ = 2203  # Timestamp + joint torque ratio in percent\n    MX_ST_RT_TARGET_CART_VEL = 2204  # Timestamp + Cartesian velocity (in mm, Euler angles in degrees per sec).\n    MX_ST_RT_TARGET_CONF = 2208  # Timestamp + conf that corresponds to MX_ST_RT_TARGET_JOINT_POS\n    MX_ST_RT_TARGET_CONF_TURN = 2209  # Timestamp + last joint turn that corresponds to MX_ST_RT_TARGET_JOINT_POS\n    MX_ST_RT_JOINT_POS = 2210  # Timestamp + joint positions in degrees\n    MX_ST_RT_CART_POS = 2211  # Timestamp + Cartesian position (in mm, Euler angles in degrees).\n    MX_ST_RT_JOINT_VEL = 2212  # Timestamp + joint velocity in degrees per second\n    MX_ST_RT_JOINT_TORQ = 2213  # Timestamp + joint torque ratio in percent\n    MX_ST_RT_CART_VEL = 2214  # Timestamp + Cartesian velocity (in mm/deg per second)\n    MX_ST_RT_CONF = 2218  # Timestamp + conf that corresponds to drives position\n    MX_ST_RT_CONF_TURN = 2219  # Timestamp + current last joint drive turn\n    MX_ST_RT_ACCELEROMETER = 2220  # Timestamp + end-effector acceleration (x/y/z)\n    MX_ST_RT_ABS_JOINT_POS = 2221  # Timestamp + joint positions from absolute encoders (less precise)\n    MX_ST_RT_EFFECTIVE_TIME_SCALING = 2222  # Timestamp + effective time scaling ratio\n    MX_ST_RT_VM = 2223  # Timestamp + motor voltages (Baseboard, PSU, SafeMcu, drive 1, 2, ...)\n    MX_ST_RT_CURRENT = 2224  # Timestamp + motor current (Baseboard)\n    MX_ST_RT_HARD_DECEL_STATUS = 2226  # Timestamp + HardDecelInProgress(1/0) + linDistMm + angDistDeg\n    MX_ST_RT_CHECKPOINT = 2227  # Timestamp + end-effector acceleration (x/y/z)\n    MX_ST_RT_WRF = 2228  # Timestamp + WRF\n    MX_ST_RT_TRF = 2229  # Timestamp + TRF\n    MX_ST_RT_CYCLE_END = 2230  # Timestamp of the real-time cycle which has just ended.\n    MX_ST_RT_EXTTOOL_STATUS = 2300  # Timestamp + external tool status\n    MX_ST_RT_VALVE_STATE = 2310  # Timestamp + valve state\n    MX_ST_RT_GRIPPER_STATE = 2320  # Timestamp + gripper state\n    MX_ST_RT_GRIPPER_FORCE = 2321  # Timestamp + gripper force in percent\n    MX_ST_RT_GRIPPER_POS = 2322  # Timestamp + gripper position in percent\n    MX_ST_RT_GRIPPER_VEL = 2323  # Timestamp + gripper speed in percent\n    MX_ST_RT_IO_STATUS = 2330  # Timestamp + IO module status\n    MX_ST_RT_OUTPUT_STATE = 2340  # Timestamp + bankId + output states\n    MX_ST_RT_INPUT_STATE = 2341  # Timestamp + bankId + input states\n    MX_ST_RT_VACUUM_STATE = 2342  # Timestamp + vacuum on/off, purge on/off, holding part\n    MX_ST_RT_VACUUM_PRESSURE = 2343  # Timestamp + vacuum pressure in kPa\n    MX_ST_RT_DIAG_MG2_ROBOT = 2400  # Robot diagnostic status.\n    MX_ST_RT_DIAG_MG2_SAFE_MCU = 2401  # Safe MCU diagnostic status.\n    MX_ST_RT_DIAG_MG2_DRIVES = 2402  # Drives diagnostic status.\n    MX_ST_RT_DIAG_MG2_PSU = 2403  # PSU diagnostic status.\n    MX_ST_RT_DIAG_MG2_IO_MODULE = 2404  # Io module diagnostic status.\n    MX_ST_RT_DIAG_MG2_SIG_GEN = 2405  # Signal generator diagnostic status.\n    MX_ST_RT_DIAG_MG2_GRIPPER_MODULE = 2406  # Gripper module diagnostic status.\n    MX_ST_LIST_FILES = 2500  # Success response to \"ListFiles\" API command\n    MX_ST_LOAD_FILE = 2501  # Success response to \"LoadFile\" API command\n    MX_ST_SAVE_FILE = 2502  # Success response to \"SaveFile\" API command\n    MX_ST_DELETE_FILE = 2503  # Success response to \"DeleteFile\" API command\n    MX_ST_OFFLINE_PROGRAM_RUNNING_DEMO_MODE = 2504  # Success response to \"StartDemoProgram\" API command.\n    MX_ST_LIST_VARIABLES = 2550  # Success response to \"ListVariable\" API command\n    MX_ST_GET_VARIABLE = 2551  # Success response to \"GetVariable\" API command\n    MX_ST_CREATE_VARIABLE = 2552  # Success response to \"CreateVariable\" API command\n    MX_ST_DELETE_VARIABLE = 2553  # Success response to \"DeleteVariable\" API command\n    MX_ST_SET_VARIABLE = 2554  # Success response to \"SetVariable\" API command\n    MX_ST_SET_VARIABLES_MONIT = 2555  # \"SetVariablesMonitoring\" response\n    MX_ST_REGISTER_FCT_SUCCESS = 2600  # Success response to SidecarRegisterFct\n    MX_ST_REGISTER_FCT_FAILURE = 2601  # Failure response to SidecarUnregisterFct\n    MX_ST_SET_DICT_MONITORING = 2602  # \"SetDictMonitoring\" response\n    MX_ST_GET_LOADED_MECASCRIPTS = 2610  # Response to \"GetLoadedMecaScripts\" API command\n    MX_ST_CONNECTED = 3000  # Confirms connection to robot.\n    MX_ST_USER_ALREADY = 3001  # Another user is already connected to the robot (current connection refused).\n    MX_ST_UPGRADE_IN_PROGRESS = 3002  # A firmware upgrade is in progress (current connection refused).\n    MX_ST_CMD_TOO_LONG = 3003  # Command string is too long (or missing NUL character).\n    MX_ST_EOM = 3004  # The robot has stopped moving.\n    MX_ST_ERROR_MOTION = 3005  # Motion error (probably collision or overload). This error can be reset.\n    MX_ST_ERROR_DRIVE_COMM = 3006  # Comm error with drives. This error cannot be reset.\n    MX_ST_INIT_FAILED = 3009  # Startup procedure error. Try power cycle, then contact Mecademic support.\n    MX_ST_EOB = 3012  # No more motion command are in queue and robot is no more moving.\n    MX_ST_END_OFFLINE = 3013  # The offline program has finished.\n    MX_ST_CANT_SAVE_OFFLINE = 3014  # There was a problem saving the offline program.\n    MX_ST_IGNORING_CMD = 3016  # Legacy, no more used\n    MX_ST_NO_OFFLINE_SAVED = 3017  # The specified offline program does not exist.\n    MX_ST_OFFLINE_LOOP = 3018  # The offline program is being restarted (looped).\n    MX_ST_OFFLINE_INVALID = 3020  # The offline program is invalid and can't be played\n    MX_ST_DEV_MODE = 3021  # The robot is running in developer mode (non official binary)\n    MX_ST_USER_LOG_TRACE = 3022  # A \"live\" trace from the user log\n    MX_ST_SELF_DIAG_FAILED = 3024  # Self diagnostic detected a hardware problem. Contact Mecademic support.\n    MX_ST_ERROR_GRIPPER = 3025  # The gripper reported an error.\n    MX_ST_MAINTENANCE_CHECK = 3026  # A hardware problem was detected. Contact Mecademic support.\n    MX_ST_INTERNAL_ERROR = 3027  # Unknown internal error occurred.\n    MX_ST_TORQUE_LIMIT_STATUS = 3028  # \"GetTorqueLimitsStatus\" response and torque limit status update.\n    MX_ST_TORQUE_LIMIT_ERROR = 3029  # Excessive torque error occurred.\n    MX_ST_CHECKPOINT_REACHED = 3030  # A previously set checkpoint (with given id) was just reached.\n    MX_ST_TEXT_API_ERROR = 3031  # A previously received text API command was incorrect.\n    MX_ST_PSTOP2 = 3032  # A PStop2 was requested\n    MX_ST_NO_VALID_CFG = 3033  # Robot has not valid JSON configuration. Must contact support!\n    MX_ST_TRACE_LVL_CHANGED = 3034  # Robotctrl or uidaemon trace level has been changed\n    MX_ST_TCP_DUMP_STARTED = 3035  # TCPDump has started\n    MX_ST_TCP_DUMP_DONE = 3036  # TCPDump has ended\n    MX_ST_ERROR_VBOX = 3037  # The pneumatic module reported an error\n    MX_ST_FW_UPDATE_PROGRESS = 3038  # Firmware update progress (JSON format)\n    MX_ST_EXT_TOOL_NEED_UPDATE = 3039  # The external tool need a firmware update.\n    MX_ST_CHECKPOINT_DISCARDED = 3040  # A previously set checkpoint (with given id) was discarded.\n    MX_ST_COLLISION_ERROR = 3041  # Collision error occurred.\n    MX_ST_FW_NEED_REINSTALL = 3042  # Firmware must be reinstalled again.\n    MX_ST_EXT_TOOL_COMM_ERR = 3043  # Excessive communication errors with external tool.\n    MX_ST_EXT_PORT_COMM_ERR = 3044  # Abnormal communication error with external port.\n    MX_ST_PSU_ERROR = 3046  # Robot power supply has non-resettable error.\n    MX_ST_FAILED_TO_MOUNT_EMMC_SD = 3047  # Robot (uBoot) fails to mount emmc or sd card\n    MX_ST_DRIVES_NEAR_OVERLOAD = 3048  # Drive near overload (1/0 for for each drive)\n    MX_ST_WORK_ZONE_ERROR = 3049  # Robot work zone error occurred due to robot reaching work zone boundary.\n    MX_ST_PSU_POWER_LOSS = 3050  # Robot power supply has lost power.\n    MX_ST_DURATION_TOO_SHORT_ERROR = 3051  # Requested move duration is too short (error severity)\n    MX_ST_PSTOP1 = 3069  # The PStop1 state changed\n    MX_ST_ESTOP = 3070  # The EStop state changed\n    MX_ST_SAFE_STOP_OPERATION_MODE = 3080  # The \"operation mode change\" safety stop state changed\n    MX_ST_SAFE_STOP_ENABLING_DEVICE_RELEASED = 3081  # The \"enabling device\" safety stop state changed\n    MX_ST_SAFE_STOP_VOLTAGE_FLUCTUATION = 3082  # The \"voltage fluctuation\" safety stop state changed\n    MX_ST_SAFE_STOP_REBOOT = 3083  # Robot just rebooted, waiting Reset to enable VM\n    MX_ST_SAFE_STOP_REDUNDANCY_FAULT = 3084  # Redundant safety signal mismatch. Fatal.\n    MX_ST_SAFE_STOP_STANDSTILL_FAULT = 3085  # Move detected while robot shall be standstill\n    MX_ST_SAFE_STOP_CONNECTION_DROPPED = 3086  # Connection with host application was dropped\n    MX_ST_SAFE_STOP_MINOR_ERROR = 3087  # Minor error occurred, causing VM removal (other than the above)\n    MX_ST_DICT_CMD_ADDED = 3210  # Robot command (built-in or sidecar) pushed to controlling application\n    MX_ST_DICT_CMD_REMOVED = 3211  # Robot command removed from the robot\n    MX_ST_SIDECAR_CMD_EXEC = 3212  # Request to a sidecar module to execute a registered function\n    MX_ST_SIDECAR_STATUS = 3220  # General status report for the sidecar scripting engine\n    MX_ST_UPDATE_LOADED_MECASCRIPTS = 3221  # Updated list of loaded MecaScripts\n    MX_ST_VARIABLE_ADDED = 3310  # A robot variable has been created (also used to sync at connection)\n    MX_ST_VARIABLE_REMOVED = 3311  # A robot variable has been deleted\n    MX_ST_INVALID = 0xFFFFFFFF",
    "span": [
      340,
      631
    ],
    "start_byte": 20924,
    "end_byte": 43244,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxRobotStatusCode"
  },
  {
    "snippet": "class MxRobotState(IntEnum):\n    MX_ROBOT_STATE_UNKNOWN = 0\n    MX_ROBOT_STATE_INIT = 1\n    MX_ROBOT_STATE_POWERED = 2\n    MX_ROBOT_STATE_ACTIVATING = 3\n    MX_ROBOT_STATE_ACTIVATED = 4\n    MX_ROBOT_STATE_HOMING = 5\n    MX_ROBOT_STATE_MASTERING = 6\n    MX_ROBOT_STATE_RUN = 7\n    MX_ROBOT_STATE_DEACTIVATING = 9",
    "span": [
      635,
      644
    ],
    "start_byte": 43276,
    "end_byte": 43587,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxRobotState"
  },
  {
    "snippet": "class MxJointCalibrationMethod(IntEnum):\n    MX_JOINT_CALIB_METHOD_DH_PARAMS = 0  # Apply joint-space calibration as Theta offset in DH params\n    MX_JOINT_CALIB_METHOD_DRIVE_DATA = 1  # Apply joint-space calibration during communication with drives\n    MX_JOINT_CALIB_METHOD_DRIVE_DATA_RT = 2  # Apply during comm with drives, and adjust using real-time data\n    MX_JOINT_CALIB_METHOD_DRIVE_DATA_DYN_MODEL = 3  # Apply during comm with drives, and adjust using dyn model",
    "span": [
      647,
      651
    ],
    "start_byte": 43590,
    "end_byte": 44061,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxJointCalibrationMethod"
  },
  {
    "snippet": "class MxRobotSimulationMode(IntEnum):\n    MX_SIM_MODE_DISABLED = 0  # Simulation mode is disabled (robot will move)\n    MX_SIM_MODE_REAL_TIME = 1  # Using real-time sim mode (robot will execute commands without physically moving)\n    MX_SIM_MODE_FAST = 2  # Using fast simulation mode (robot will simulate commands as fast as possible)\n    MX_SIM_MODE_FAST_SAFE = 3  # Fast mode without optimizations (ex: Checking collision every loop)",
    "span": [
      654,
      658
    ],
    "start_byte": 44064,
    "end_byte": 44500,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxRobotSimulationMode"
  },
  {
    "snippet": "class MxArgType(IntEnum):\n    MX_ARG_TYPE_ANY = 0\n    MX_ARG_TYPE_INTEGER = 1\n    MX_ARG_TYPE_FLOAT = 2\n    MX_ARG_TYPE_STRING = 3",
    "span": [
      661,
      665
    ],
    "start_byte": 44503,
    "end_byte": 44633,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxArgType"
  },
  {
    "snippet": "class MxArgUnit(IntEnum):\n    MX_UNIT_NONE = 0  # no units\n    MX_UNIT_DEG = 1  # degrees\n    MX_UNIT_RAD = 2  # radians\n    MX_UNIT_PER = 3  # %\n    MX_UNIT_MM = 4  # mm\n    MX_UNIT_MS = 5  # ms\n    MX_UNIT_SEC = 6  # sec\n    MX_UNIT_ANGVEL = 7  # deg/s\n    MX_UNIT_LINVEL = 8  # mm/s\n    MX_UNIT_KG = 9  # kilograms\n    MX_UNIT_KPA = 10  # kilopascals\n    MX_UNIT_NEWTON = 11  # newtons",
    "span": [
      668,
      680
    ],
    "start_byte": 44636,
    "end_byte": 45024,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxArgUnit"
  },
  {
    "snippet": "class RobotStatusCodeInfo:\n\n    def __init__(self, code, name, is_error, is_resettable):\n        \"\"\"This class contains information bout a robot status codes above (ex: MX_ST_BUFFER_FULL)\n\n        Parameters\n        ----------\n        code : integer\n            The integer value (ex: 1001)\n        name : string\n            The code name (ex: \"MX_ST_BUFFER_FULL\"\n        is_error : bool\n            True if this is an error code\n        is_resettable : bool\n            True if this is error code can be reset\n        \"\"\"\n        self.code = code\n        self.name = name\n        self.is_error = is_error\n        self.is_resettable = is_resettable",
    "span": [
      901,
      920
    ],
    "start_byte": 61341,
    "end_byte": 61989,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "RobotStatusCodeInfo"
  },
  {
    "snippet": "class MxExtToolType(IntEnum):\n    MX_EXT_TOOL_NONE = 0  # No external tool connected\n    MX_EXT_TOOL_CURRENT = 1  # Use in SetExtToolSim in order to simulate current external tool\n    MX_EXT_TOOL_MEGP25_SHORT = 10  # MEGP25 electrical gripper\n    MX_EXT_TOOL_MEGP25_LONG = 11  # MEGP25 electrical gripper long stroke\n    MX_EXT_TOOL_VBOX_2VALVES = 20  # MPM500 pneumatic module with 2 valves\n    MX_EXT_TOOL_UGRIPPER = 30  # Mca250 micro gripper\n    MX_EXT_TOOL_TYPE_INVALID = 0xFFFFFFFF  # Set consistent sizeof(MxExtToolType)",
    "span": [
      1518,
      1525
    ],
    "start_byte": 114740,
    "end_byte": 115267,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxExtToolType"
  },
  {
    "snippet": "class MxExtToolMode(IntEnum):\n    MX_EXT_TOOL_COMPLEMENTARY = 0  # Valves states are complementary\n    MX_EXT_TOOL_INDEPENDENT = 1  # Valves states are independent\n    MX_EXT_TOOL_POSITION = 2  # Position control\n    MX_EXT_TOOL_MODE_INVALID = 0xFFFFFFFF  # Set consistent sizeof(MxExtToolMode)",
    "span": [
      1528,
      1532
    ],
    "start_byte": 115270,
    "end_byte": 115564,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxExtToolMode"
  },
  {
    "snippet": "class MxCmdValveState(IntEnum):\n    MX_VALVE_STATE_STAY = -1  # Leave previous valve state\n    MX_VALVE_STATE_CLOSE = 0  # Close valve\n    MX_VALVE_STATE_OPEN = 1  # Open valve",
    "span": [
      1535,
      1538
    ],
    "start_byte": 115567,
    "end_byte": 115743,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxCmdValveState"
  },
  {
    "snippet": "class MxUserTrace(IntEnum):\n    MX_USER_TRACE_NONE = 0\n    MX_USER_TRACE_CONNECTED = 10\n    MX_USER_TRACE_DISCONNECTED = 11\n    MX_USER_TRACE_CONNECT_SYNC_STARTED = 12\n    MX_USER_TRACE_CONNECT_SYNC_DONE = 13\n    MX_USER_TRACE_CONTROL_GRANTED = 20\n    MX_USER_TRACE_CONTROL_RELEASED = 21\n    MX_USER_TRACE_CONTROL_REFUSED = 22\n    MX_USER_TRACE_API_LOCKED = 23\n    MX_USER_TRACE_SIDE_CAR_REGISTRATION = 50  # Registration or un-registration\n    MX_USER_TRACE_SIDE_CAR_LOG_TRACE = 51\n    MX_USER_TRACE_SIDE_CAR_ERROR = 52\n    MX_USER_TRACE_ROBOT_INITIALIZING = 100\n    MX_USER_TRACE_ROBOT_REBOOTING = 101\n    MX_USER_TRACE_ROBOT_SHUTDOWN = 102\n    MX_USER_TRACE_ROBOT_TERMINATING = 110\n    MX_USER_TRACE_ROBOT_TERMINATED = 111\n    MX_USER_TRACE_STATE_DEACTIVATED = 200\n    MX_USER_TRACE_STATE_ACTIVATING = 201\n    MX_USER_TRACE_STATE_ACTIVATED = 202\n    MX_USER_TRACE_STATE_HOMING = 203\n    MX_USER_TRACE_STATE_MASTERING = 204\n    MX_USER_TRACE_STATE_RUNNING = 205\n    MX_USER_TRACE_STATE_DEACTIVATING = 206\n    MX_USER_TRACE_MODE_SIM_ACTIVATED = 300\n    MX_USER_TRACE_MODE_SIM_DEACTIVATED = 301\n    MX_USER_TRACE_MODE_EOAT_SIM_ACTIVATED = 302\n    MX_USER_TRACE_MODE_EOAT_SIM_DEACTIVATED = 303\n    MX_USER_TRACE_MODE_RECOVERY_ACTIVATED = 304\n    MX_USER_TRACE_MODE_RECOVERY_DEACTIVATED = 305\n    MX_USER_TRACE_MODE_BRAKES_ENGAGED = 306\n    MX_USER_TRACE_MODE_BRAKES_DISENGAGED = 307\n    MX_USER_TRACE_MODE_JOGGING_ACTIVATED = 308\n    MX_USER_TRACE_MODE_JOGGING_DEACTIVATED = 309\n    MX_USER_TRACE_MOTION_PAUSED = 400\n    MX_USER_TRACE_MOTION_RESUMED = 401\n    MX_USER_TRACE_MOTION_CLEARED = 402\n    MX_USER_TRACE_MOTION_ERROR_RESET = 403\n    MX_USER_TRACE_MOTION_START_OF_MOTION = 410\n    MX_USER_TRACE_MOTION_END_OF_MOTION = 411\n    MX_USER_TRACE_MOTION_START_OF_BLOCK = 412\n    MX_USER_TRACE_MOTION_END_OF_BLOCK = 413\n    MX_USER_TRACE_MOTION_TORQUE_LIMIT = 414\n    MX_USER_TRACE_MOTION_COLLISION = 415\n    MX_USER_TRACE_MOTION_COLLISION_CLEARED = 416\n    MX_USER_TRACE_MOTION_WORK_ZONE = 417\n    MX_USER_TRACE_MOTION_WORK_ZONE_CLEARED = 418\n    MX_USER_TRACE_CFG_NETWORK_CHANGED = 500\n    MX_USER_TRACE_CFG_JOINT_LIMITS_CHANGED = 501\n    MX_USER_TRACE_CFG_JOINT_LIMITS_CFG_CHANGED = 502\n    MX_USER_TRACE_CFG_WORK_ZONE_LIMITS_CHANGED = 503\n    MX_USER_TRACE_CFG_WORK_ZONE_CFG_CHANGED = 504\n    MX_USER_TRACE_CFG_COLLISION_CFG_CHANGED = 505\n    MX_USER_TRACE_CFG_TOOL_SPHERE_CHANGED = 506\n    MX_USER_TRACE_PROGRAM_SAVED = 600\n    MX_USER_TRACE_PROGRAM_DELETED = 601\n    MX_USER_TRACE_PROGRAM_STARTED = 602\n    MX_USER_TRACE_PROGRAM_TERMINATED = 603\n    MX_USER_TRACE_PROGRAM_ABORTED = 604\n    MX_USER_TRACE_PROGRAM_COMMAND = 605\n    MX_USER_TRACE_SIDECAR_COMMAND = 606\n    MX_USER_TRACE_PLAY_BUTTON = 607\n    MX_USER_TRACE_ERROR_UNKNOWN_COMMAND = 700\n    MX_USER_TRACE_ERROR_INVALID_ARGUMENT = 701\n    MX_USER_TRACE_ERROR_COMMAND_PARSING = 703\n    MX_USER_TRACE_ERROR_COMMAND_FAILED = 704\n    MX_USER_TRACE_ERROR_MOTION_COMMAND = 720\n    MX_USER_TRACE_ERROR_MOTION = 721\n    MX_USER_TRACE_WARNING_DURATION_TOO_SHORT = 722\n    MX_USER_TRACE_SAFETY_SIGNAL = 800\n    MX_USER_TRACE_SAFETY_VM_ON = 811\n    MX_USER_TRACE_SAFETY_VM_OFF = 812\n    MX_USER_TRACE_SAFETY_OPERATION_MODE_LOCKED = 820\n    MX_USER_TRACE_SAFETY_OPERATION_MODE_MANUAL = 821\n    MX_USER_TRACE_SAFETY_OPERATION_MODE_AUTOMATIC = 822\n    MX_USER_TRACE_SAFETY_ERROR = 823\n    MX_USER_TRACE_MOTION_CMD_RECEIVED = 900\n    MX_USER_TRACE_MOTION_CMD_COMPILED = 901\n    MX_USER_TRACE_MOTION_CMD_PROCESSING = 902\n    MX_USER_TRACE_MOTION_CMD_ABORTED = 903\n    MX_USER_TRACE_GRIPPER_OPENED = 950\n    MX_USER_TRACE_GRIPPER_CLOSED = 951\n    MX_USER_TRACE_GRIPPER_MOVING = 952\n    MX_USER_TRACE_GRIPPER_TARGET_REACHED = 953\n    MX_USER_TRACE_GRIPPER_HOLDING_PART = 954\n    MX_USER_TRACE_GRIPPER_RELEASED_PART = 955\n    MX_USER_TRACE_USER_LOG_TRACE = 1000\n    MX_USER_TRACE_USER_LOG_TRACE_NON_MASKABLE = 1001\n    MX_USER_TRACE_API_REQUEST = 1010  # All other user requests not covered by the above\n    MX_USER_TRACE_API_RESPONSE = 1020\n    MX_USER_TRACE_API_RESPONSE_JSON = 1021\n    MX_USER_TRACE_API_EVENT_CTRL = 1030\n    MX_USER_TRACE_API_EVENT_CTRL_JSON = 1031\n    MX_USER_TRACE_API_EVENT_MONITOR = 1040\n    MX_USER_TRACE_API_EVENT_MONITOR_JSON = 1041\n    MX_USER_TRACE_CYCLIC_API_EVENT = 1050",
    "span": [
      1544,
      1640
    ],
    "start_byte": 115796,
    "end_byte": 120044,
    "node_type": "class_definition",
    "language": "python",
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/mecademicpy/mecademicpy/mx_robot_def.py",
    "name": "MxUserTrace"
  }
]