[
  {
    "snippet": "from pymodbus.client.sync import ModbusTcpClient",
    "span": [
      1,
      1
    ],
    "start_byte": 0,
    "end_byte": 48,
    "node_type": "import_from_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "ModbusTcpClient",
    "qualified_name": "ModbusTcpClient",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 48,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "class MoxaE1212:\n    \"\"\"Class to interface with the MOXA ioLogik E1212 External IO Module.\n    https://www.moxa.com/en/products/industrial-edge-connectivity/controllers-and-ios/universal-controllers-and-i-os/iologik-e1200-series/iologik-e1212\n\n    Attributes\n    ----------\n    modbusConnection : ModbusTcpClient object\n        The Modbus object from the pymodbus library used to communicate with the device.\n    outputStatus : list of bool\n        The current status of the digital outputs of the MOXA E1212.\n    address : string\n        The IP address of the device.\n\n    \"\"\"",
    "span": [
      3,
      146
    ],
    "start_byte": 50,
    "end_byte": 4845,
    "node_type": "class_definition",
    "chunk_type": "class",
    "language": "python",
    "name": "MoxaE1212",
    "qualified_name": "MoxaE1212",
    "docstring": "Class to interface with the MOXA ioLogik E1212 External IO Module.\n    https://www.moxa.com/en/products/industrial-edge-connectivity/controllers-and-ios/universal-controllers-and-i-os/iologik-e1200-series/iologik-e1212\n\n    Attributes\n    ----------\n    modbusConnection : ModbusTcpClient object\n        The Modbus object from the pymodbus library used to communicate with the device.\n    outputStatus : list of bool\n        The current status of the digital outputs of the MOXA E1212.\n    address : string\n        The IP address of the device.",
    "chunk_size_bytes": 577,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def __init__(self, address):\n        \"\"\"Constructor for an instance of the MoxaE1212 class.\"\"\"\n        self.address = address\n        self.modbusConnection = ModbusTcpClient(address)\n        self.outputStatus = [False, False, False, False, False, False, False, False]\n\n        self.connect()\n        self._getoutputstatus()",
    "span": [
      17,
      24
    ],
    "start_byte": 632,
    "end_byte": 955,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "__init__",
    "signature": "__init__(self, address)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212.__init__",
    "docstring": "Constructor for an instance of the MoxaE1212 class.",
    "chunk_size_bytes": 323,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def _getoutputstatus(self):\n        \"\"\"Private method to get the actual status of the digital outputs. This is done once in the constructor.\"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return\n        rq = self.modbusConnection.read_coils(0, 8)\n        if rq.isError():\n            print(\"Could not get the values\")\n        self.outputStatus = rq.bits\n        return",
    "span": [
      26,
      36
    ],
    "start_byte": 961,
    "end_byte": 1413,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "_getoutputstatus",
    "signature": "_getoutputstatus(self)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212._getoutputstatus",
    "docstring": "Private method to get the actual status of the digital outputs. This is done once in the constructor.",
    "chunk_size_bytes": 452,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def connect(self):\n        \"\"\"Attempts to connect to the device.\n        Return\n        ------\n        Bool\n            True if connected, False otherwise.\n        \"\"\"\n        r = self.modbusConnection.connect()\n        if not r:\n            print(\"Could not connect to the module.\")\n            return r\n        return r",
    "span": [
      38,
      49
    ],
    "start_byte": 1419,
    "end_byte": 1740,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "connect",
    "signature": "connect(self)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212.connect",
    "docstring": "Attempts to connect to the device.\n        Return\n        ------\n        Bool\n            True if connected, False otherwise.",
    "chunk_size_bytes": 321,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def setsingleoutput(self, pos, value):\n        \"\"\"Sets a single output to the desired value.\n        Parameters\n        ----------\n        pos : int\n            Number of the output to set.\n        value : Bool\n            True to set to High, False to set to Low.\n\n        Return\n        ------\n        Bool\n            True if output was set correctly, False otherwise.\n        \"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return False\n        try:\n            self.outputStatus[pos] = value\n        except IndexError:\n            print(\"Index Error: Not a valid output position\")\n            return False\n        rq = self.modbusConnection.write_coils(0, self.outputStatus)\n        if rq.isError():\n            print(\"Could not set the value properly\")\n            return not rq.isError()\n        return not rq.isError()",
    "span": [
      51,
      78
    ],
    "start_byte": 1746,
    "end_byte": 2656,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "setsingleoutput",
    "signature": "setsingleoutput(self, pos, value)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212.setsingleoutput",
    "docstring": "Sets a single output to the desired value.\n        Parameters\n        ----------\n        pos : int\n            Number of the output to set.\n        value : Bool\n            True to set to High, False to set to Low.\n\n        Return\n        ------\n        Bool\n            True if output was set correctly, False otherwise.",
    "chunk_size_bytes": 910,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def readsingleinput(self, pos):\n        \"\"\"Read a single digital input from the MOXA E1212.\n\n        Parameters\n        ----------\n        pos : number of the IO to read.\n\n        Return\n        ------\n        Bool or None\n            True if High, False if Low, None if an error has occurred.\n        \"\"\"\n        if pos > 7:\n            print(\"Not a valid input position\")\n            return None\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return None\n        rq = self.modbusConnection.read_discrete_inputs(0,8)\n        if rq.isError():\n            print(\"Could not read the value\")\n            return None\n        return rq.bits[pos]",
    "span": [
      80,
      103
    ],
    "start_byte": 2662,
    "end_byte": 3383,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "readsingleinput",
    "signature": "readsingleinput(self, pos)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212.readsingleinput",
    "docstring": "Read a single digital input from the MOXA E1212.\n\n        Parameters\n        ----------\n        pos : number of the IO to read.\n\n        Return\n        ------\n        Bool or None\n            True if High, False if Low, None if an error has occurred.",
    "chunk_size_bytes": 721,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def setalloutputs(self, values):\n        \"\"\"Set the value of all the digital outputs of the MOXA E1212.\n        Parameters\n        ----------\n        values : List of bool.\n            A list of 8 elements where True is High and False is Low.\n        Return\n        ------\n        Bool\n            True if the values were set correctly, False otherwise.\n        \"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return False\n        try:\n            self.outputStatus = values\n        except IndexError:\n            print(\"Index Error: Not a valid output position\")\n            return False\n        rq = self.modbusConnection.write_coils(0, self.outputStatus)\n        if rq.isError():\n            print(\"Could not set the value properly\")\n            return not rq.isError()\n        return not rq.isError()",
    "span": [
      105,
      129
    ],
    "start_byte": 3389,
    "end_byte": 4277,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "setalloutputs",
    "signature": "setalloutputs(self, values)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212.setalloutputs",
    "docstring": "Set the value of all the digital outputs of the MOXA E1212.\n        Parameters\n        ----------\n        values : List of bool.\n            A list of 8 elements where True is High and False is Low.\n        Return\n        ------\n        Bool\n            True if the values were set correctly, False otherwise.",
    "chunk_size_bytes": 888,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  },
  {
    "snippet": "def readallinputs(self):\n        \"\"\"Reads all the inputs of the MOXA E1212\n        Return\n        ------\n        List of bool or None\n            A list of bool where True is High and False is Low or None if an error has occurred\n        \"\"\"\n        if not self.modbusConnection.is_socket_open():\n            ret = self.connect()\n            if not ret:\n                return None\n        rq = self.modbusConnection.read_discrete_inputs(0, 8)\n        if rq.isError():\n            print(\"Could not read the values\")\n            return None\n        return rq.bits",
    "span": [
      131,
      146
    ],
    "start_byte": 4283,
    "end_byte": 4845,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "readallinputs",
    "signature": "readallinputs(self)",
    "parent_class": "MoxaE1212",
    "qualified_name": "MoxaE1212.readallinputs",
    "docstring": "Reads all the inputs of the MOXA E1212\n        Return\n        ------\n        List of bool or None\n            A list of bool where True is High and False is Low or None if an error has occurred",
    "chunk_size_bytes": 562,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/utilities/MOXAE1212.py",
    "normalized_path": "utilities/MOXAE1212.py"
  }
]