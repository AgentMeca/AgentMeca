[
  {
    "snippet": "from PyQt5 import QtGui",
    "span": [
      1,
      1
    ],
    "start_byte": 0,
    "end_byte": 23,
    "node_type": "import_from_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "QtGui",
    "qualified_name": "QtGui",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 23,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QVBoxLayout",
    "span": [
      2,
      2
    ],
    "start_byte": 24,
    "end_byte": 94,
    "node_type": "import_from_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "QWidget",
    "qualified_name": "QWidget",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 70,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "from PyQt5.QtGui import QPixmap",
    "span": [
      3,
      3
    ],
    "start_byte": 95,
    "end_byte": 126,
    "node_type": "import_from_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "QPixmap",
    "qualified_name": "QPixmap",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 31,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "import sys",
    "span": [
      4,
      4
    ],
    "start_byte": 127,
    "end_byte": 137,
    "node_type": "import_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "sys",
    "qualified_name": "sys",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 10,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "import cv2",
    "span": [
      5,
      5
    ],
    "start_byte": 138,
    "end_byte": 148,
    "node_type": "import_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "cv2",
    "qualified_name": "cv2",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 10,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread",
    "span": [
      6,
      6
    ],
    "start_byte": 149,
    "end_byte": 207,
    "node_type": "import_from_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "pyqtSignal",
    "qualified_name": "pyqtSignal",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 58,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "import numpy as np",
    "span": [
      7,
      7
    ],
    "start_byte": 208,
    "end_byte": 226,
    "node_type": "import_statement",
    "chunk_type": "import",
    "language": "python",
    "name": "numpy as np",
    "qualified_name": "numpy as np",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 18,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "class VideoThread(QThread):\n    change_pixmap_signal = pyqtSignal(np.ndarray)\n\n    def run(self):\n        # capture from web cam\n        self.cap = cv2.VideoCapture(0)\n        while True:\n            ret, cv_img = self.cap.read()\n            if ret:\n                self.change_pixmap_signal.emit(cv_img)\n",
    "span": [
      10,
      22
    ],
    "start_byte": 229,
    "end_byte": 614,
    "node_type": "class_definition",
    "chunk_type": "class",
    "language": "python",
    "name": "VideoThread",
    "qualified_name": "VideoThread",
    "docstring": null,
    "chunk_size_bytes": 305,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "def run(self):\n        # capture from web cam\n        self.cap = cv2.VideoCapture(0)\n        while True:\n            ret, cv_img = self.cap.read()\n            if ret:\n                self.change_pixmap_signal.emit(cv_img)",
    "span": [
      13,
      19
    ],
    "start_byte": 312,
    "end_byte": 533,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "run",
    "signature": "run(self)",
    "parent_class": "VideoThread",
    "qualified_name": "VideoThread.run",
    "docstring": null,
    "chunk_size_bytes": 221,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "def change_capture(self, value):\n        self.cap = cv2.VideoCapture(value)",
    "span": [
      21,
      22
    ],
    "start_byte": 539,
    "end_byte": 614,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "change_capture",
    "signature": "change_capture(self, value)",
    "parent_class": "VideoThread",
    "qualified_name": "VideoThread.change_capture",
    "docstring": null,
    "chunk_size_bytes": 75,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "class VideoPlayer(QWidget):\n    def __init__(self, args, *kwargs):\n        super().__init__(args, *kwargs)\n        self.disply_width = 1024\n        self.display_height = 768\n        self.cameraIndex = 0\n        # create the label that holds the image\n        self.image_label = QLabel(self)\n        self.image_label.resize(self.disply_width, self.display_height)\n\n        # create the video capture thread",
    "span": [
      25,
      61
    ],
    "start_byte": 617,
    "end_byte": 2035,
    "node_type": "class_definition",
    "chunk_type": "class",
    "language": "python",
    "name": "VideoPlayer",
    "qualified_name": "VideoPlayer",
    "docstring": null,
    "chunk_size_bytes": 405,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "def __init__(self, args, *kwargs):\n        super().__init__(args, *kwargs)\n        self.disply_width = 1024\n        self.display_height = 768\n        self.cameraIndex = 0\n        # create the label that holds the image\n        self.image_label = QLabel(self)\n        self.image_label.resize(self.disply_width, self.display_height)\n\n        # create the video capture thread\n        self.thread = VideoThread()\n        # connect its signal to the update_image slot\n        self.thread.change_pixmap_signal.connect(self.update_image)\n        # start the thread\n        self.thread.start()",
    "span": [
      26,
      40
    ],
    "start_byte": 649,
    "end_byte": 1235,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "__init__",
    "signature": "__init__(self, args, *kwargs)",
    "parent_class": "VideoPlayer",
    "qualified_name": "VideoPlayer.__init__",
    "docstring": null,
    "chunk_size_bytes": 586,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "def change_capture(self, value):\n        self.cameraIndex = value\n        self.thread.change_capture(value)",
    "span": [
      42,
      44
    ],
    "start_byte": 1245,
    "end_byte": 1352,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "change_capture",
    "signature": "change_capture(self, value)",
    "parent_class": "VideoPlayer",
    "qualified_name": "VideoPlayer.change_capture",
    "docstring": null,
    "chunk_size_bytes": 107,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "def update_image(self, cv_img):\n        \"\"\"Updates the image_label with a new opencv image\"\"\"\n        qt_img = self.convert_cv_qt(cv_img)\n        self.image_label.setPixmap(qt_img)",
    "span": [
      49,
      52
    ],
    "start_byte": 1386,
    "end_byte": 1566,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "update_image",
    "signature": "update_image(self, cv_img)",
    "parent_class": "VideoPlayer",
    "qualified_name": "VideoPlayer.update_image",
    "docstring": "Updates the image_label with a new opencv image",
    "chunk_size_bytes": 180,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  },
  {
    "snippet": "def convert_cv_qt(self, cv_img):\n        \"\"\"Convert from an opencv image to QPixmap\"\"\"\n        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)\n        h, w, ch = rgb_image.shape\n        bytes_per_line = ch * w\n        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)\n        p = convert_to_Qt_format.scaled(self.disply_width, self.display_height, Qt.KeepAspectRatio)\n        return QPixmap.fromImage(p)",
    "span": [
      54,
      61
    ],
    "start_byte": 1576,
    "end_byte": 2035,
    "node_type": "function_definition",
    "chunk_type": "method",
    "language": "python",
    "name": "convert_cv_qt",
    "signature": "convert_cv_qt(self, cv_img)",
    "parent_class": "VideoPlayer",
    "qualified_name": "VideoPlayer.convert_cv_qt",
    "docstring": "Convert from an opencv image to QPixmap",
    "chunk_size_bytes": 459,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/Demo_Microscope/frontend/VideoPlayer.py",
    "normalized_path": "Demo_Microscope/frontend/VideoPlayer.py"
  }
]