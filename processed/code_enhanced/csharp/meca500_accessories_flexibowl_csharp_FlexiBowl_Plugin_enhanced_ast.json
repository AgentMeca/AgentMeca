[
  {
    "snippet": "using System;",
    "span": [
      1,
      1
    ],
    "start_byte": 0,
    "end_byte": 13,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 13,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.Collections.Generic;",
    "span": [
      2,
      2
    ],
    "start_byte": 14,
    "end_byte": 47,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 33,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.Linq;",
    "span": [
      3,
      3
    ],
    "start_byte": 48,
    "end_byte": 66,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 18,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.Text;",
    "span": [
      4,
      4
    ],
    "start_byte": 67,
    "end_byte": 85,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 18,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.Threading.Tasks;",
    "span": [
      5,
      5
    ],
    "start_byte": 86,
    "end_byte": 115,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 29,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.Net;",
    "span": [
      6,
      6
    ],
    "start_byte": 116,
    "end_byte": 133,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 17,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.Net.Sockets;",
    "span": [
      7,
      7
    ],
    "start_byte": 134,
    "end_byte": 159,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 25,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "using System.IO;",
    "span": [
      8,
      8
    ],
    "start_byte": 160,
    "end_byte": 176,
    "node_type": "using_directive",
    "chunk_type": "other",
    "language": "csharp",
    "name": "unknown",
    "qualified_name": "unknown",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 16,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  },
  {
    "snippet": "namespace Mecademic_Plugin\n{\n    /// <summary>\n    /// FlexiBowl Plugin for Mecademic robots\n    /// Provides UDP communication with FlexiBowl feeder systems\n    /// </summary>\n    class Flexibowl_Plugin\n    {\n        UdpClient m_udpClient = new UdpClient(7777);\n        TcpClient m_tcpClient;\n        NetworkStream m_tcpStream;\n        bool m_useTcp = false;\n        \n        // Command mapping dictionary\n        private static readonly Dictionary<string, string> CommandMap = new Dictionary<string, string>\n        {\n            {\"MOVE\", \"QX2\"},\n            {\"MOVE FLIP\", \"QX3\"},\n            {\"MOVE BLOW FLIP\", \"QX4\"},\n            {\"MOVE BLOW\", \"QX5\"},\n            {\"SHAKE\", \"QX6\"},\n            {\"LIGHT ON\", \"QX7\"},\n            {\"LIGHT OFF\", \"QX8\"},\n            {\"FLIP\", \"QX10\"},\n            {\"BLOW\", \"QX9\"},\n            {\"QUICK EMPTY OPTION\", \"QX11\"}\n        };\n\n        /// <summary>\n        /// Constructor - defaults to UDP communication\n        /// </summary>\n        public Flexibowl_Plugin() : this(false) { }\n        \n        /// <summary>\n        /// Constructor with protocol selection\n        /// </summary>\n        /// <param name=\"useTcp\">True for TCP connection (port 7776), False for UDP (port 7775)</param>\n        public Flexibowl_Plugin(bool useTcp)\n        {\n            m_useTcp = useTcp;\n            if (useTcp)\n            {\n                m_tcpClient = new TcpClient();\n                m_tcpClient.ReceiveTimeout = 2000;\n                m_tcpClient.SendTimeout = 2000;\n            }\n        }\n\n        /// <summary>\n        /// Check FlexiBowl alarm status\n        /// </summary>\n        /// <param name=\"ipAddress\">FlexiBowl IP address</param>\n        /// <returns>True if no alarm, False if in alarm state</returns>\n        public bool CheckAlarmStatus(string ipAddress)\n        {\n            try\n            {\n                string response = SendTcpCommand(ipAddress, \"AL\");\n                if (string.IsNullOrEmpty(response) || response.Length < 8)\n                    return false;\n\n                // Extract hex data starting from position 5 (like Python my_hexdata = data[5:None])\n                string hexData = response.Substring(5).Trim('\\r', '\\n', '\\0');\n                \n                // Convert hex to binary and check for errors\n                if (int.TryParse(hexData, System.Globalization.NumberStyles.HexNumber, null, out int hexValue))\n                {\n                    // Convert to 16-bit binary\n                    string binary = Convert.ToString(hexValue, 2).PadLeft(16, '0');\n                    int errorDecimal = Convert.ToInt32(binary, 2);\n                    return errorDecimal == 0; // False if error (>0), True if no error (0)\n                }\n                return false;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Send command using friendly name (e.g., \"MOVE\", \"LIGHT ON\")\n        /// </summary>\n        /// <param name=\"ipAddress\">FlexiBowl IP address</param>\n        /// <param name=\"friendlyCommand\">Friendly command name</param>\n        /// <returns>Response string or error message</returns>\n        public string FlexibowlFriendly(string ipAddress, string friendlyCommand)\n        {\n            string sclCommand = CommandMap.ContainsKey(friendlyCommand.ToUpper()) \n                ? CommandMap[friendlyCommand.ToUpper()] \n                : \"QX60\"; // Invalid command\n            \n            return m_useTcp ? SendTcpCommand(ipAddress, sclCommand) : Flexibowl(ipAddress, sclCommand);\n        }\n\n        /// <summary>\n        /// Send command to FlexiBowl and receive response\n        /// </summary>\n        /// <param name=\"ipAddress\">FlexiBowl IP address (e.g., \"192.168.0.130\")</param>\n        /// <param name=\"command\">SCL command (e.g., \"QX2\", \"AL\")</param>\n        /// <returns>Response string or error message</returns>\n        public string Flexibowl(string ipAddress, string command)\n        {\n            string m_IpAddress = ipAddress;\n            string m_command = command;\n            string receiveString = \"\";\n            string ReturnFlexibowl = \"\";\n            int byteSent = 0;\n\n            IPEndPoint ep = new IPEndPoint(0, 0);\n            try\n            {\n                ep = new IPEndPoint(IPAddress.Parse(m_IpAddress), 7775);\n                m_udpClient.Connect(ep);\n                m_udpClient.Client.SendTimeout = 500;\n                m_udpClient.Client.ReceiveTimeout = 500;\n            }\n            catch (Exception ex)\n            {\n                ReturnFlexibowl = ex.ToString();\n                return ReturnFlexibowl;\n            }\n\n            string dataToSend = m_command.ToUpper();\n            try\n            {\n                // Create SCL packet: header + command + terminator\n                Byte[] SCLstring = Encoding.ASCII.GetBytes(dataToSend);\n                Byte[] sendBytes = new Byte[SCLstring.Length + 3];\n                sendBytes[0] = 0;  // Header byte 1\n                sendBytes[1] = 7;  // Header byte 2\n                System.Array.Copy(SCLstring, 0, sendBytes, 2, SCLstring.Length);\n                sendBytes[sendBytes.Length - 1] = 13; // CR terminator\n                \n                byteSent = m_udpClient.Send(sendBytes, sendBytes.Length);\n                var receivedData = m_udpClient.Receive(ref ep);\n                receiveString = Encoding.ASCII.GetString(receivedData);\n\n                // Handle movement commands that return \"%\" (motion in progress)\n                if ((receiveString.Contains(\"%\")) && (dataToSend.Contains(\"Q\")))\n                {\n                    bool moving = true;\n                    while (moving == true)\n                    {\n                        string statusCommand;\n                        // Use different status commands based on the operation (matching Python logic)\n                        if (dataToSend == \"QX11\" || dataToSend == \"QX10\" || dataToSend == \"QX4\" || dataToSend == \"QX3\")\n                        {\n                            statusCommand = \"IO\";\n                        }\n                        else\n                        {\n                            statusCommand = \"SC\";\n                        }\n                        \n                        SCLstring = Encoding.ASCII.GetBytes(statusCommand);\n                        sendBytes = new Byte[SCLstring.Length + 3];\n                        sendBytes[0] = 0;\n                        sendBytes[1] = 7;\n                        System.Array.Copy(SCLstring, 0, sendBytes, 2, SCLstring.Length);\n                        sendBytes[sendBytes.Length - 1] = 13; // CR\n                        \n                        byteSent = m_udpClient.Send(sendBytes, sendBytes.Length);\n                        receivedData = m_udpClient.Receive(ref ep);\n                        receiveString = Encoding.ASCII.GetString(receivedData);\n                        \n                        // Parse status based on command type (matching Python logic)\n                        if (statusCommand == \"IO\")\n                        {\n                            // For IO command, check data[12:-1] == 1 to break (Python logic)\n                            if (receivedData.Length > 13)\n                            {\n                                string movingStatus = Encoding.ASCII.GetString(receivedData, 12, receivedData.Length - 13);\n                                if (int.TryParse(movingStatus, out int status) && status == 1)\n                                {\n                                    moving = false;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            // For SC command, check data[7:-2] == 0 to break (Python logic)\n                            if (receivedData.Length > 9)\n                            {\n                                string movingStatus = Encoding.ASCII.GetString(receivedData, 7, receivedData.Length - 9);\n                                if (int.TryParse(movingStatus, out int status) && status == 0)\n                                {\n                                    moving = false;\n                                }\n                            }\n                        }\n                        \n                        System.Threading.Thread.Sleep(100);\n                    }\n                    System.Threading.Thread.Sleep(100);\n                    ReturnFlexibowl = \"Done\";\n                    return ReturnFlexibowl;\n                }\n                else\n                {\n                    // Extract response without header\n                    SCLstring = new Byte[receivedData.Length - 3];\n                    System.Array.Copy(receivedData, 2, SCLstring, 0, SCLstring.Length);\n                    receiveString = Encoding.ASCII.GetString(SCLstring);\n                    ReturnFlexibowl = receiveString;\n                }\n                return ReturnFlexibowl;\n            }\n            catch (Exception ex)\n            {\n                ReturnFlexibowl = ex.ToString();\n                return ReturnFlexibowl;\n            }\n        }\n\n        /// <summary>\n        /// Send TCP command to FlexiBowl\n        /// </summary>\n        /// <param name=\"ipAddress\">FlexiBowl IP address</param>\n        /// <param name=\"command\">SCL command</param>\n        /// <returns>Response string</returns>\n        private string SendTcpCommand(string ipAddress, string command)\n        {\n            try\n            {\n                if (!m_tcpClient.Connected)\n                {\n                    m_tcpClient.Connect(ipAddress, 7776);\n                    m_tcpStream = m_tcpClient.GetStream();\n                }\n\n                // Create SCL packet: header + command + terminator\n                byte[] commandBytes = Encoding.ASCII.GetBytes(command.ToUpper());\n                byte[] message = new byte[commandBytes.Length + 3];\n                message[0] = 0;  // Header byte 1\n                message[1] = 7;  // Header byte 2\n                Array.Copy(commandBytes, 0, message, 2, commandBytes.Length);\n                message[message.Length - 1] = 13; // CR terminator\n\n                m_tcpStream.Write(message, 0, message.Length);\n                \n                // Read response\n                byte[] buffer = new byte[1024];\n                int bytesRead = m_tcpStream.Read(buffer, 0, buffer.Length);\n                \n                if (bytesRead > 0)\n                {\n                    return Encoding.ASCII.GetString(buffer, 0, bytesRead);\n                }\n                return \"\";\n            }\n            catch (Exception ex)\n            {\n                return ex.ToString();\n            }\n        }\n\n        /// <summary>\n        /// Close connections and dispose resources\n        /// </summary>\n        public void Flexibowl_Close()\n        {\n            if (m_useTcp)\n            {\n                m_tcpStream?.Close();\n                m_tcpClient?.Close();\n            }\n            else\n            {\n                m_udpClient?.Dispose();\n            }\n        }\n    }\n\n    /// <summary>\n    /// Example usage of FlexiBowl Plugin\n    /// </summary>\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"///////////FLEXIBOWL PLUGIN EXAMPLE MECADEMIC/////////////\");\n            string returnFlbString = \"\";\n            \n            // Example using TCP connection (like Python version)\n            Flexibowl_Plugin Fb = new Flexibowl_Plugin(true);\n            \n            // Also demonstrate UDP version\n            // Flexibowl_Plugin Fb = new Flexibowl_Plugin(false);\n            \n            // Check alarm status using dedicated method\n            bool alarmStatus = Fb.CheckAlarmStatus(\"192.168.0.161\");\n            Console.WriteLine($\"Alarm Status: {(alarmStatus ? \"OK\" : \"ALARM\")}\");\n            \n            // Execute move command using friendly names\n            returnFlbString = Fb.FlexibowlFriendly(\"192.168.0.161\", \"MOVE\");\n            Console.WriteLine($\"Move Result: {returnFlbString}\");\n            \n            // Execute move with flip using friendly name\n            returnFlbString = Fb.FlexibowlFriendly(\"192.168.0.161\", \"MOVE FLIP\");\n            Console.WriteLine($\"Move-Flip Result: {returnFlbString}\");\n            \n            // Execute light control\n            returnFlbString = Fb.FlexibowlFriendly(\"192.168.0.161\", \"LIGHT ON\");\n            Console.WriteLine($\"Light On Result: {returnFlbString}\");\n            \n            System.Threading.Thread.Sleep(1000);\n            \n            returnFlbString = Fb.FlexibowlFriendly(\"192.168.0.161\", \"LIGHT OFF\");\n            Console.WriteLine($\"Light Off Result: {returnFlbString}\");\n            \n            // Close connection\n            Fb.Flexibowl_Close();\n            Console.ReadLine();\n        }\n    }\n}",
    "span": [
      10,
      326
    ],
    "start_byte": 178,
    "end_byte": 13038,
    "node_type": "namespace_declaration",
    "chunk_type": "other",
    "language": "csharp",
    "name": "Mecademic_Plugin",
    "qualified_name": "Mecademic_Plugin",
    "signature": null,
    "docstring": null,
    "chunk_size_bytes": 12860,
    "file_path": "/mnt/d/OneDrive/OneDrive - purdue.edu/Documents/Work/Mecademic/AgentMeca/repos/meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs",
    "normalized_path": "meca500-accessories/flexibowl/csharp/FlexiBowl_Plugin.cs"
  }
]