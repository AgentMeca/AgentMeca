{"id": "meca500_programming_manual_0", "text": "Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 0, "length": 24, "hash": "3e1ee01cb6ad224929fbe4d58fe60135"}
{"id": "meca500_programming_manual_1", "text": "Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1, "length": 24, "hash": "3e1ee01cb6ad224929fbe4d58fe60135"}
{"id": "meca500_programming_manual_2", "text": "1 Programming Manual for the Meca500 Industrial Robot", "source": "meca500_programming_manual", "chunk_index": 2, "length": 53, "hash": "3f6150f26c6da9ba824f733e282ff14d"}
{"id": "meca500_programming_manual_3", "text": "1 Programming Manual for the Meca500 Industrial Robot", "source": "meca500_programming_manual", "chunk_index": 3, "length": 53, "hash": "3f6150f26c6da9ba824f733e282ff14d"}
{"id": "meca500_programming_manual_4", "text": "3 Basic theory and definitions", "source": "meca500_programming_manual", "chunk_index": 4, "length": 30, "hash": "b3a9fe00857dcc34eeddc795e7020c16"}
{"id": "meca500_programming_manual_5", "text": "3 Basic theory and definitions", "source": "meca500_programming_manual", "chunk_index": 5, "length": 30, "hash": "b3a9fe00857dcc34eeddc795e7020c16"}
{"id": "meca500_programming_manual_6", "text": "4 TCP/IP communication", "source": "meca500_programming_manual", "chunk_index": 6, "length": 22, "hash": "4a85daa19035fdbbf7d00faeeb2031cc"}
{"id": "meca500_programming_manual_7", "text": "4 TCP/IP communication", "source": "meca500_programming_manual", "chunk_index": 7, "length": 22, "hash": "4a85daa19035fdbbf7d00faeeb2031cc"}
{"id": "meca500_programming_manual_8", "text": "5 Communicating over cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 8, "length": 37, "hash": "013cacd99876a9473d2883a03c3f58c8"}
{"id": "meca500_programming_manual_9", "text": "5 Communicating over cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 9, "length": 37, "hash": "013cacd99876a9473d2883a03c3f58c8"}
{"id": "meca500_programming_manual_10", "text": "6 EtherCAT communication", "source": "meca500_programming_manual", "chunk_index": 10, "length": 24, "hash": "771ba5cc59f954bcf960c428e45641e2"}
{"id": "meca500_programming_manual_11", "text": "6 EtherCAT communication", "source": "meca500_programming_manual", "chunk_index": 11, "length": 24, "hash": "771ba5cc59f954bcf960c428e45641e2"}
{"id": "meca500_programming_manual_12", "text": "7 EtherNet/IP communication", "source": "meca500_programming_manual", "chunk_index": 12, "length": 27, "hash": "d3e3c2ec57df40c39084c95e41704308"}
{"id": "meca500_programming_manual_13", "text": "7 EtherNet/IP communication", "source": "meca500_programming_manual", "chunk_index": 13, "length": 27, "hash": "d3e3c2ec57df40c39084c95e41704308"}
{"id": "meca500_programming_manual_14", "text": "8 PROFINET communication", "source": "meca500_programming_manual", "chunk_index": 14, "length": 24, "hash": "7fa237f6d37d1c5dc5808b9eb18afba4"}
{"id": "meca500_programming_manual_15", "text": "8 PROFINET communication", "source": "meca500_programming_manual", "chunk_index": 15, "length": 24, "hash": "7fa237f6d37d1c5dc5808b9eb18afba4"}
{"id": "meca500_programming_manual_16", "text": "11 Robot control commands", "source": "meca500_programming_manual", "chunk_index": 16, "length": 25, "hash": "ec4ecf4464766758ec898ffe0ec69ad4"}
{"id": "meca500_programming_manual_17", "text": "11 Robot control commands", "source": "meca500_programming_manual", "chunk_index": 17, "length": 25, "hash": "ec4ecf4464766758ec898ffe0ec69ad4"}
{"id": "meca500_programming_manual_18", "text": "12 Data request commands", "source": "meca500_programming_manual", "chunk_index": 18, "length": 24, "hash": "48ad678c1eb112af65db33fad55ca99a"}
{"id": "meca500_programming_manual_19", "text": "12 Data request commands", "source": "meca500_programming_manual", "chunk_index": 19, "length": 24, "hash": "48ad678c1eb112af65db33fad55ca99a"}
{"id": "meca500_programming_manual_20", "text": "13 Real-time data request commands", "source": "meca500_programming_manual", "chunk_index": 20, "length": 34, "hash": "aea0f48f0a5e6aaf36f22e4dcb5ad209"}
{"id": "meca500_programming_manual_21", "text": "13 Real-time data request commands", "source": "meca500_programming_manual", "chunk_index": 21, "length": 34, "hash": "aea0f48f0a5e6aaf36f22e4dcb5ad209"}
{"id": "meca500_programming_manual_22", "text": "14Work zone supervision and collision prevention commands", "source": "meca500_programming_manual", "chunk_index": 22, "length": 57, "hash": "d9e11f698c0fb8a7dc9ae3f4d46225c3"}
{"id": "meca500_programming_manual_23", "text": "14Work zone supervision and collision prevention commands", "source": "meca500_programming_manual", "chunk_index": 23, "length": 57, "hash": "d9e11f698c0fb8a7dc9ae3f4d46225c3"}
{"id": "meca500_programming_manual_24", "text": "15 Commands for optional accessories", "source": "meca500_programming_manual", "chunk_index": 24, "length": 36, "hash": "026b0bf29dfe1ab4fca388904a4e7d78"}
{"id": "meca500_programming_manual_25", "text": "15 Commands for optional accessories", "source": "meca500_programming_manual", "chunk_index": 25, "length": 36, "hash": "026b0bf29dfe1ab4fca388904a4e7d78"}
{"id": "meca500_programming_manual_26", "text": "16 Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 26, "length": 41, "hash": "d624bdfef7c8737188756779937e0934"}
{"id": "meca500_programming_manual_27", "text": "16 Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 27, "length": 41, "hash": "d624bdfef7c8737188756779937e0934"}
{"id": "meca500_programming_manual_28", "text": "Programming Manual for the Meca500\nIndustrial Robot", "source": "meca500_programming_manual", "chunk_index": 28, "length": 51, "hash": "a4d216a3d8617ce24f3118df92d11dc6"}
{"id": "meca500_programming_manual_29", "text": "Programming Manual for the Meca500\nIndustrial Robot", "source": "meca500_programming_manual", "chunk_index": 29, "length": 51, "hash": "a4d216a3d8617ce24f3118df92d11dc6"}
{"id": "meca500_programming_manual_30", "text": "For firmware version: 11.1", "source": "meca500_programming_manual", "chunk_index": 30, "length": 26, "hash": "8c70d92066cce009a3518e69870faf67"}
{"id": "meca500_programming_manual_31", "text": "For firmware version:", "source": "meca500_programming_manual", "chunk_index": 31, "length": 21, "hash": "e8e8c3f76e46f705b65684a15d80aaee"}
{"id": "meca500_programming_manual_32", "text": "Document revision: B", "source": "meca500_programming_manual", "chunk_index": 32, "length": 20, "hash": "d5adb606f8281c0cdde16793570f795f"}
{"id": "meca500_programming_manual_33", "text": "Online release date: July 17, 2025", "source": "meca500_programming_manual", "chunk_index": 33, "length": 34, "hash": "91129f7decb78b3504e16dd523d76c63"}
{"id": "meca500_programming_manual_34", "text": "Online release date:", "source": "meca500_programming_manual", "chunk_index": 34, "length": 20, "hash": "fc004596958ea3293160974dd18771d9"}
{"id": "meca500_programming_manual_35", "text": "Document ID: MC-PM-MECA500", "source": "meca500_programming_manual", "chunk_index": 35, "length": 26, "hash": "0be48fe0080891234584754488418474"}
{"id": "meca500_programming_manual_36", "text": "The information contained herein is the property of Mecademic Inc.\nand shall not be\nreproduced in whole or in part without prior written approval of Mecademic Inc. The\ninformation herein is subject to change without notice and should not be construed as a\ncommitment by Mecademic Inc. This manual will be periodically reviewed and revised.", "source": "meca500_programming_manual", "chunk_index": 36, "length": 339, "hash": "eeb14c23f65df920fcc954f0a8f56265"}
{"id": "meca500_programming_manual_37", "text": "The information contained herein is the property of Mecademic Inc.\nand shall not be\nreproduced in whole or in part without prior written approval of Mecademic Inc. The\ninformation herein is subject to change without notice and should not be construed as a\ncommitment by Mecademic Inc. This manual will be periodically reviewed and revised.", "source": "meca500_programming_manual", "chunk_index": 37, "length": 339, "hash": "eeb14c23f65df920fcc954f0a8f56265"}
{"id": "meca500_programming_manual_38", "text": "Mecademic Inc. assumes no responsibility for any errors or omissions in this document.", "source": "meca500_programming_manual", "chunk_index": 38, "length": 86, "hash": "675a09e90bcea6c374de1e99d63fd0b9"}
{"id": "meca500_programming_manual_39", "text": "Mecademic Inc. assumes no responsibility for any errors or omissions in this document.", "source": "meca500_programming_manual", "chunk_index": 39, "length": 86, "hash": "675a09e90bcea6c374de1e99d63fd0b9"}
{"id": "meca500_programming_manual_40", "text": "\u00a9 Copyright 2025, Mecademic Inc.", "source": "meca500_programming_manual", "chunk_index": 40, "length": 32, "hash": "4454ec9905accd633601b68418c5c719"}
{"id": "meca500_programming_manual_41", "text": "\u00a9 Copyright 2025, Mecademic Inc.", "source": "meca500_programming_manual", "chunk_index": 41, "length": 32, "hash": "4454ec9905accd633601b68418c5c719"}
{"id": "meca500_programming_manual_42", "text": "This manual describes the key concepts for industrial robots and the communication methods\nused with our robots through an Ethernet-enabled computing device (IPC, PLC, PC, Mac,\nRaspberry Pi, etc.): using either TCP/IP, EtherCAT, EtherNet/IP, or PROFINET protocols. To\nmaximize flexibility, we do not use a proprietary programming language. Instead, we provide\na set of robot-related instructions, an API, making it possible to use any modern programming\nlanguage that can run on your computing device.", "source": "meca500_programming_manual", "chunk_index": 42, "length": 501, "hash": "9258476771ef72f374964665a3b3530e"}
{"id": "meca500_programming_manual_43", "text": "This manual describes the key concepts for industrial robots and the communication methods\nused with our robots through an Ethernet-enabled computing device (IPC, PLC, PC, Mac,\nRaspberry Pi, etc.): using either TCP/IP, EtherCAT, EtherNet/IP, or PROFINET protocols. To\nmaximize flexibility, we do not use a proprietary programming language. Instead, we provide\na set of robot-related instructions, an API, making it possible to use any modern programming\nlanguage that can run on your computing device.", "source": "meca500_programming_manual", "chunk_index": 43, "length": 501, "hash": "9258476771ef72f374964665a3b3530e"}
{"id": "meca500_programming_manual_44", "text": "The default communication protocol for Mecademic robots is TCP/IP; it consists of a set of\ntext-based motion and request commands sent to and returned by the robot. Additional\ncyclic communication protocols (EtherCAT, EtherNet/IP, and PROFINET) are also available\nand described in this manual. However, even if you do not intend to use the TCP/IP protocol,\nit is necessary to read the chapter that describes its text-based commands.", "source": "meca500_programming_manual", "chunk_index": 44, "length": 432, "hash": "4681af3a3f2c5b7ca550816b817f22de"}
{"id": "meca500_programming_manual_45", "text": "The default communication protocol for Mecademic robots is TCP/IP; it consists of a set of\ntext-based motion and request commands sent to and returned by the robot. Additional\ncyclic communication protocols (EtherCAT, EtherNet/IP, and PROFINET) are also available\nand described in this manual. However, even if you do not intend to use the TCP/IP protocol,", "source": "meca500_programming_manual", "chunk_index": 45, "length": 356, "hash": "ac61c6272c9d16e28f82a81813ef252a"}
{"id": "meca500_programming_manual_46", "text": "it is necessary to read the chapter that describes its text-based commands.", "source": "meca500_programming_manual", "chunk_index": 46, "length": 75, "hash": "417a2d7086ffa445fef965b97b4c3154"}
{"id": "meca500_programming_manual_47", "text": "Furthermore, we offer a fully-fledged Python API, available from our GitHub account. That\nAPI is self-documented, but you still need to read the present programming manual.", "source": "meca500_programming_manual", "chunk_index": 47, "length": 172, "hash": "d2d6166ab53051055c96b774c3d148bc"}
{"id": "meca500_programming_manual_48", "text": "Furthermore, we offer a fully-fledged Python API, available from our GitHub account. That\nAPI is self-documented, but you still need to read the present programming manual.", "source": "meca500_programming_manual", "chunk_index": 48, "length": 172, "hash": "d2d6166ab53051055c96b774c3d148bc"}
{"id": "meca500_programming_manual_49", "text": "Reading the user manual of your robot (MC-UM-MECA500) and understanding the robot\u2019s\noperating principles is a prerequisite to reading this programming manual.", "source": "meca500_programming_manual", "chunk_index": 49, "length": 158, "hash": "2a062564ad0f46a895e12df043069538"}
{"id": "meca500_programming_manual_50", "text": "Reading the user manual of your robot (MC-UM-MECA500) and understanding the robot\u2019s\noperating principles is a prerequisite to reading this programming manual.", "source": "meca500_programming_manual", "chunk_index": 50, "length": 158, "hash": "2a062564ad0f46a895e12df043069538"}
{"id": "meca500_programming_manual_51", "text": "For\nAll of our robot models are programmed similarly, with only minor differences.\ninstance, certain commands and messages are specific to particular models and their optional\naccessories. To streamline your experience, this programming manual has been tailored\nspecifically for the Meca500 robot and its accessories.", "source": "meca500_programming_manual", "chunk_index": 51, "length": 317, "hash": "5cc6e9c36c339d92afbc1c4fb133d074"}
{"id": "meca500_programming_manual_52", "text": "For\nAll of our robot models are programmed similarly, with only minor differences.\ninstance, certain commands and messages are specific to particular models and their optional\naccessories. To streamline your experience, this programming manual has been tailored\nspecifically for the Meca500 robot and its accessories.", "source": "meca500_programming_manual", "chunk_index": 52, "length": 317, "hash": "5cc6e9c36c339d92afbc1c4fb133d074"}
{"id": "meca500_programming_manual_53", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 53, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_54", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 54, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_55", "text": "The following table lists the symbols that may be used in Mecademic documents to denote\ncertain conditions. Particular attention must be paid to the warning and danger messages in\nthis manual.", "source": "meca500_programming_manual", "chunk_index": 55, "length": 192, "hash": "0973feaa29e681e2fe68673684a51ffb"}
{"id": "meca500_programming_manual_56", "text": "The following table lists the symbols that may be used in Mecademic documents to denote\ncertain conditions. Particular attention must be paid to the warning and danger messages in\nthis manual.", "source": "meca500_programming_manual", "chunk_index": 56, "length": 192, "hash": "0973feaa29e681e2fe68673684a51ffb"}
{"id": "meca500_programming_manual_57", "text": "Identifies information that requires special consideration.", "source": "meca500_programming_manual", "chunk_index": 57, "length": 59, "hash": "a5b45361b036c8a0f7ffc23277ddb253"}
{"id": "meca500_programming_manual_58", "text": "Identifies information that requires special consideration.", "source": "meca500_programming_manual", "chunk_index": 58, "length": 59, "hash": "a5b45361b036c8a0f7ffc23277ddb253"}
{"id": "meca500_programming_manual_59", "text": "Provides indications that must be respected in order to avoid equipment or work (data) on\nthe system being damaged or lost.", "source": "meca500_programming_manual", "chunk_index": 59, "length": 123, "hash": "d113d381a4a86307a8206f113a7474a6"}
{"id": "meca500_programming_manual_60", "text": "Provides indications that must be respected in order to avoid equipment or work (data) on", "source": "meca500_programming_manual", "chunk_index": 60, "length": 89, "hash": "99c6313e8154ca91599348a8dff0723d"}
{"id": "meca500_programming_manual_61", "text": "the system being damaged or lost.", "source": "meca500_programming_manual", "chunk_index": 61, "length": 33, "hash": "27af36328c1f2ea913d8854d934c397c"}
{"id": "meca500_programming_manual_62", "text": "Provides indications that must be respected in order to avoid a potentially hazardous\nsituation, which could result in injury.", "source": "meca500_programming_manual", "chunk_index": 62, "length": 126, "hash": "93ed603b5dcb402ebc3036659e14671b"}
{"id": "meca500_programming_manual_63", "text": "Provides indications that must be respected in order to avoid a potentially hazardous\nsituation, which could result in injury.", "source": "meca500_programming_manual", "chunk_index": 63, "length": 126, "hash": "93ed603b5dcb402ebc3036659e14671b"}
{"id": "meca500_programming_manual_64", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 64, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_65", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 65, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_66", "text": "The firmware that is installed on Mecademic products has the following numbering\nconvention:", "source": "meca500_programming_manual", "chunk_index": 66, "length": 92, "hash": "24a5c198605e4ba3e16719e105ab0725"}
{"id": "meca500_programming_manual_67", "text": "The firmware that is installed on Mecademic products has the following numbering\nconvention:", "source": "meca500_programming_manual", "chunk_index": 67, "length": 92, "hash": "24a5c198605e4ba3e16719e105ab0725"}
{"id": "meca500_programming_manual_68", "text": "{major}.{minor}.{patch}.{build}", "source": "meca500_programming_manual", "chunk_index": 68, "length": 31, "hash": "27b339360b1f079ddfe4477ee5b0ca81"}
{"id": "meca500_programming_manual_69", "text": "{major}.{minor}.{patch}.{build}", "source": "meca500_programming_manual", "chunk_index": 69, "length": 31, "hash": "27b339360b1f079ddfe4477ee5b0ca81"}
{"id": "meca500_programming_manual_70", "text": "Each Mecademic manual is written for a specific {major}.{minor}.{*}.{*} firmware version.\nOn a regular basis, we revise each manual, adding further information and improving certain\nexplanations. We only provide the latest revision for each {major}.{minor}.{*}.{*} firmware\nversion. Below is a summary of the changes made in each revision.", "source": "meca500_programming_manual", "chunk_index": 70, "length": 339, "hash": "b271f7bc8c4061cc4962bdcf7d043186"}
{"id": "meca500_programming_manual_71", "text": "Each Mecademic manual is written for a specific {major}.{minor}.{*}.{*} firmware version.\nOn a regular basis, we revise each manual, adding further information and improving certain\nexplanations. We only provide the latest revision for each {major}.{minor}.{*}.{*} firmware\nversion. Below is a summary of the changes made in each revision.", "source": "meca500_programming_manual", "chunk_index": 71, "length": 339, "hash": "b271f7bc8c4061cc4962bdcf7d043186"}
{"id": "meca500_programming_manual_72", "text": "Substantial revision of Sections 3 and 4.", "source": "meca500_programming_manual", "chunk_index": 72, "length": 41, "hash": "ebd037876773b4b34834f3e52b1c188d"}
{"id": "meca500_programming_manual_73", "text": "Substantial revision of Sections 3 and 4.", "source": "meca500_programming_manual", "chunk_index": 73, "length": 41, "hash": "ebd037876773b4b34834f3e52b1c188d"}
{"id": "meca500_programming_manual_74", "text": "Addition of Cyclic protocols subsection to every API\ncommand.", "source": "meca500_programming_manual", "chunk_index": 74, "length": 61, "hash": "04b11204d87204c17b3a64beaddb6ed0"}
{"id": "meca500_programming_manual_75", "text": "subsection to every API\ncommand.", "source": "meca500_programming_manual", "chunk_index": 75, "length": 32, "hash": "2a9c73f15d07bd922356bb2cffdcdaf7"}
{"id": "meca500_programming_manual_76", "text": "The document ID for each Mecademic manual in a particular language is the same, regardless\nof the firmware version and the revision number.", "source": "meca500_programming_manual", "chunk_index": 76, "length": 139, "hash": "888e4855158ebd7c79e2c094a426b0a3"}
{"id": "meca500_programming_manual_77", "text": "The document ID for each Mecademic manual in a particular language is the same, regardless\nof the firmware version and the revision number.", "source": "meca500_programming_manual", "chunk_index": 77, "length": 139, "hash": "888e4855158ebd7c79e2c094a426b0a3"}
{"id": "meca500_programming_manual_78", "text": "Basic theory and definitions", "source": "meca500_programming_manual", "chunk_index": 78, "length": 28, "hash": "f64a6c28bcf45309829ae91f1cb3a9da"}
{"id": "meca500_programming_manual_79", "text": "Basic theory and definitions", "source": "meca500_programming_manual", "chunk_index": 79, "length": 28, "hash": "f64a6c28bcf45309829ae91f1cb3a9da"}
{"id": "meca500_programming_manual_80", "text": "We place a high value on technical accuracy, detail, and consistency, and use terminology\nthat may not always align with standard industry terms. Therefore, it is important to read\nthis section carefully, even if you have prior experience with industrial robot arms.", "source": "meca500_programming_manual", "chunk_index": 80, "length": 266, "hash": "fcc5dbdc93e9d7028bc91dc2cf88ec92"}
{"id": "meca500_programming_manual_81", "text": "We place a high value on technical accuracy, detail, and consistency, and use terminology\nthat may not always align with standard industry terms. Therefore, it is important to read\nthis section carefully, even if you have prior experience with industrial robot arms.", "source": "meca500_programming_manual", "chunk_index": 81, "length": 266, "hash": "fcc5dbdc93e9d7028bc91dc2cf88ec92"}
{"id": "meca500_programming_manual_82", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 82, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_83", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 83, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_84", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 84, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_85", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 85, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_86", "text": "Distances that are displaced to or defined by the user are in millimeters (mm), angles are in\ndegrees (\u00b0) and time is in seconds (s), except for timestamps.", "source": "meca500_programming_manual", "chunk_index": 86, "length": 156, "hash": "21aa172e7484db2c4c14f397019b9602"}
{"id": "meca500_programming_manual_87", "text": "Distances that are displaced to or defined by the user are in millimeters (mm), angles are in\ndegrees (\u00b0) and time is in seconds (s), except for timestamps.", "source": "meca500_programming_manual", "chunk_index": 87, "length": 156, "hash": "21aa172e7484db2c4c14f397019b9602"}
{"id": "meca500_programming_manual_88", "text": "The joints of the Meca500 are numbered in ascending order, starting from the base, as shown\nin Figure 1a. Figure 1 also shows the zero joint positions. In that \u201czero\u201d robot position, the\naxis of joint 3 intersects the axis of joint 1, the axes of joints 4 and 6 are aligned and normal\nto the axis of joint 1, and the axes of joints 2, 3, and 5 are parallel. Finally, note the location\nof the small screw in the robot\u2019s flange, which is the 20-mm disk with threaded holes at the\nextremity of the robot arm.", "source": "meca500_programming_manual", "chunk_index": 88, "length": 505, "hash": "c637e97bc7129b495125123cd8e8674a"}
{"id": "meca500_programming_manual_89", "text": "The joints of the Meca500 are numbered in ascending order, starting from the base, as shown\nin Figure 1a. Figure 1 also shows the zero joint positions. In that \u201czero\u201d robot position, the\naxis of joint 3 intersects the axis of joint 1, the axes of joints 4 and 6 are aligned and normal\nto the axis of joint 1, and the axes of joints 2, 3, and 5 are parallel. Finally, note the location\nof the small screw in the robot\u2019s flange, which is the 20-mm disk with threaded holes at the", "source": "meca500_programming_manual", "chunk_index": 89, "length": 477, "hash": "42ccfdbb85acaf1791df66c6fe0c6cca"}
{"id": "meca500_programming_manual_90", "text": "extremity of the robot arm.", "source": "meca500_programming_manual", "chunk_index": 90, "length": 27, "hash": "e629f4156742f8634ee4f0e392f7eccb"}
{"id": "meca500_programming_manual_91", "text": "(a) robot with all\ndegrees", "source": "meca500_programming_manual", "chunk_index": 91, "length": 26, "hash": "f9918f07f03f05dbe9fa911745a6d7d0"}
{"id": "meca500_programming_manual_92", "text": "(a) robot with all\ndegrees", "source": "meca500_programming_manual", "chunk_index": 92, "length": 26, "hash": "f9918f07f03f05dbe9fa911745a6d7d0"}
{"id": "meca500_programming_manual_93", "text": "joints numbered and at zero", "source": "meca500_programming_manual", "chunk_index": 93, "length": 27, "hash": "58b19c4d852cb85677cea2a91e2c89cf"}
{"id": "meca500_programming_manual_94", "text": "joints numbered and at zero", "source": "meca500_programming_manual", "chunk_index": 94, "length": 27, "hash": "58b19c4d852cb85677cea2a91e2c89cf"}
{"id": "meca500_programming_manual_95", "text": "(b) robot's flange with joint 6 at zero degrees", "source": "meca500_programming_manual", "chunk_index": 95, "length": 47, "hash": "2c0b03da0b8450ac16176d3eb87039c8"}
{"id": "meca500_programming_manual_96", "text": "(b) robot's flange with joint 6 at zero degrees", "source": "meca500_programming_manual", "chunk_index": 96, "length": 47, "hash": "2c0b03da0b8450ac16176d3eb87039c8"}
{"id": "meca500_programming_manual_97", "text": "Figure 1: Meca500\u2019s joint numbering and zero-degree joint position", "source": "meca500_programming_manual", "chunk_index": 97, "length": 66, "hash": "f20592fba2564a92995af680dee46817"}
{"id": "meca500_programming_manual_98", "text": "Figure 1: Meca500\u2019s joint numbering and zero-degree joint position", "source": "meca500_programming_manual", "chunk_index": 98, "length": 66, "hash": "f20592fba2564a92995af680dee46817"}
{"id": "meca500_programming_manual_99", "text": "We use right-handed Cartesian coordinate systems (reference frames). There are only four\nof them that you need to be familiar with, as shown in Figure 2 (x axes are red, y axes are\ngreen, and z axes are blue). These four reference frames and the key term related to them\nare:", "source": "meca500_programming_manual", "chunk_index": 99, "length": 275, "hash": "ee9dc8d1cae2e5ecbb41d52d555aa04a"}
{"id": "meca500_programming_manual_100", "text": "We use right-handed Cartesian coordinate systems (reference frames). There are only four\nof them that you need to be familiar with, as shown in Figure 2 (x axes are red, y axes are\ngreen, and z axes are blue). These four reference frames and the key term related to them\nare:", "source": "meca500_programming_manual", "chunk_index": 100, "length": 275, "hash": "ee9dc8d1cae2e5ecbb41d52d555aa04a"}
{"id": "meca500_programming_manual_101", "text": "\u2022 BRF (page 357): Base reference frame (page 357). Static reference frame fixed to the\nrobot base. Its z axis coincides with the axis of joint 1 and points upwards, its origin lies\non the bottom of the robot base, and its x axis is normal to the base front edge and points\nforward.", "source": "meca500_programming_manual", "chunk_index": 101, "length": 281, "hash": "0e55dae00c41fad836bb7a50484040eb"}
{"id": "meca500_programming_manual_102", "text": "Base reference frame", "source": "meca500_programming_manual", "chunk_index": 102, "length": 20, "hash": "a7b1a00f89b0b7504a502b92e8db969a"}
{"id": "meca500_programming_manual_103", "text": "(page 357). Static reference frame fixed to the\nrobot base. Its z axis coincides with the axis of joint 1 and points upwards, its origin lies\non the bottom of the robot base, and its x axis is normal to the base front edge and points\nforward.", "source": "meca500_programming_manual", "chunk_index": 103, "length": 242, "hash": "7aaeb8359b7ded01873ec678a3a39793"}
{"id": "meca500_programming_manual_104", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 104, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_105", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 105, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_106", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 106, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_107", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 107, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_108", "text": "\u2022 WRF (page 359): World reference frame (page 359). The main static reference frame\ncoincides with the BRF by default. It can be defined with respect to the BRF using the\nSetWrf (page 181) command.", "source": "meca500_programming_manual", "chunk_index": 108, "length": 197, "hash": "3d230bb3a39636a372a64372a573ee66"}
{"id": "meca500_programming_manual_109", "text": "World reference frame", "source": "meca500_programming_manual", "chunk_index": 109, "length": 21, "hash": "c8f896c1b02da97170862de0c8a578a5"}
{"id": "meca500_programming_manual_110", "text": "(page 359). The main static reference frame\ncoincides with the BRF by default. It can be defined with respect to the BRF using the", "source": "meca500_programming_manual", "chunk_index": 110, "length": 130, "hash": "d17d8dc1e70aef3f8973128670f584ac"}
{"id": "meca500_programming_manual_111", "text": "\u2022 FRF (page 357): Flange reference frame (page 357). Mobile reference frame fixed to\nthe robot\u2019s flange. The z axis coincides with the axis of joint 6, and points outwards. Its\norigin lies on the plane passing through the flange\u2019s mating surface. Finally, when all\njoints are at zero, the y axis of the FRF has the same direction as the y axis of the BRF.", "source": "meca500_programming_manual", "chunk_index": 111, "length": 355, "hash": "e83eeafe71edcd5eb6a961d95d187032"}
{"id": "meca500_programming_manual_112", "text": "Flange reference frame", "source": "meca500_programming_manual", "chunk_index": 112, "length": 22, "hash": "044f9ddc58a1113c131296604ad45e08"}
{"id": "meca500_programming_manual_113", "text": "(page 357). Mobile reference frame fixed to\nthe robot\u2019s flange. The z axis coincides with the axis of joint 6, and points outwards. Its\norigin lies on the plane passing through the flange\u2019s mating surface. Finally, when all\njoints are at zero, the y axis of the FRF has the same direction as the y axis of the BRF.", "source": "meca500_programming_manual", "chunk_index": 113, "length": 314, "hash": "6ecf42aa874b1fede2ae1fbfa3194da2"}
{"id": "meca500_programming_manual_114", "text": "\u2022 FCP (page 357): Flange center point (page 357). Origin of the FRF.", "source": "meca500_programming_manual", "chunk_index": 114, "length": 68, "hash": "c2184e694edaa714b58221b5d29a1e11"}
{"id": "meca500_programming_manual_115", "text": "(page 357). Origin of the FRF.", "source": "meca500_programming_manual", "chunk_index": 115, "length": 30, "hash": "f8281ee1d8b2b34a7c83544cc2378171"}
{"id": "meca500_programming_manual_116", "text": "\u2022 TRF (page 359): Tool reference frame (page 359).", "source": "meca500_programming_manual", "chunk_index": 116, "length": 50, "hash": "9641e24a1e25e16a33abd68f1efe20c8"}
{"id": "meca500_programming_manual_117", "text": "Tool reference frame", "source": "meca500_programming_manual", "chunk_index": 117, "length": 20, "hash": "423b552d0adcf86e2facf5fd50e65ad1"}
{"id": "meca500_programming_manual_118", "text": "The mobile reference frame\nassociated with the robot\u2019s end-effector. By default, the TRF coincides with the FRF.\nIt can be defined with respect to the FRF with the SetTrf (page 179) command.", "source": "meca500_programming_manual", "chunk_index": 118, "length": 190, "hash": "1f82ad725c5679e2b0cf70a4f71d7013"}
{"id": "meca500_programming_manual_119", "text": "The mobile reference frame\nassociated with the robot\u2019s end-effector. By default, the TRF coincides with the FRF.\nIt can be defined with respect to the FRF with the", "source": "meca500_programming_manual", "chunk_index": 119, "length": 163, "hash": "b35553b75158587bd3d99f181f1d2c12"}
{"id": "meca500_programming_manual_120", "text": "\u2022 TCP (page 359): Tool center point (page 359). Origin of the TRF. (Not to be confused\nwith the Transmission Control Protocol acronym, which is also used in this document.)", "source": "meca500_programming_manual", "chunk_index": 120, "length": 172, "hash": "6154e0144363de822c9e325c7dbda225"}
{"id": "meca500_programming_manual_121", "text": "(page 359). Origin of the TRF. (Not to be confused\nwith the Transmission Control Protocol acronym, which is also used in this document.)", "source": "meca500_programming_manual", "chunk_index": 121, "length": 136, "hash": "a4a7059ec338c00c6c616aaa01457fc2"}
{"id": "meca500_programming_manual_122", "text": "(b) Flange Reference Frame (FRF)", "source": "meca500_programming_manual", "chunk_index": 122, "length": 32, "hash": "ee4d7bca71e600a35f6744f8f0170337"}
{"id": "meca500_programming_manual_123", "text": "(b) Flange Reference Frame (FRF)", "source": "meca500_programming_manual", "chunk_index": 123, "length": 32, "hash": "ee4d7bca71e600a35f6744f8f0170337"}
{"id": "meca500_programming_manual_124", "text": "Figure 2: Reference frames for the Meca500", "source": "meca500_programming_manual", "chunk_index": 124, "length": 42, "hash": "a0af007b6b727f080d8018bb635094e5"}
{"id": "meca500_programming_manual_125", "text": "Figure 2: Reference frames for the Meca500", "source": "meca500_programming_manual", "chunk_index": 125, "length": 42, "hash": "a0af007b6b727f080d8018bb635094e5"}
{"id": "meca500_programming_manual_126", "text": "Pose and Euler angles", "source": "meca500_programming_manual", "chunk_index": 126, "length": 21, "hash": "f213d3a5231dcbb3e750e7fa73cb3dee"}
{"id": "meca500_programming_manual_127", "text": "Pose and Euler angles", "source": "meca500_programming_manual", "chunk_index": 127, "length": 21, "hash": "f213d3a5231dcbb3e750e7fa73cb3dee"}
{"id": "meca500_programming_manual_128", "text": "Some Mecademic commands accept pose (page 358) (position and orientation of one\nreference frame with respect to another) as arguments. In these commands, and in the the\nMecaPortal web interface, a pose consists of a Cartesian position, {x, y, z}, and an orientation\nspecified in Euler angles (page 357), {\u03b1, \u03b2, \u03b3}, according to the mobile XYZ convention (also\nreferred to as XYZ instrinsic rotations, RxRyRz, or XY\u2019Z\u2019\u2019). In this convention, if the orientation\nof a frame F1 with respect to a frame F0 is described by the Euler angles {\u03b1, \u03b2, \u03b3}, it means\nthat if you align a frame Fm with frame F0, then rotate Fm about its x axis by \u03b1 (alpha) degrees,\nthen about its y axis by \u03b2 (beta) degrees, and finally about its z axis by \u03b3 (gamma) degrees,\nthe final orientation of frame Fm will be the same as that of frame F1.", "source": "meca500_programming_manual", "chunk_index": 128, "length": 817, "hash": "a3ad858148e84e0a50485207f4528cb8"}
{"id": "meca500_programming_manual_129", "text": "Some Mecademic commands accept", "source": "meca500_programming_manual", "chunk_index": 129, "length": 30, "hash": "a342bff06f258baf309ddcec89dff2ab"}
{"id": "meca500_programming_manual_130", "text": "(page 358) (position and orientation of one\nreference frame with respect to another) as arguments. In these commands, and in the the\nMecaPortal web interface, a pose consists of a Cartesian position, {x, y, z}, and an orientation\nspecified in", "source": "meca500_programming_manual", "chunk_index": 130, "length": 242, "hash": "da0b7ac0dcc70a125f7f8c1bb31678fe"}
{"id": "meca500_programming_manual_131", "text": "(page 357), {\u03b1, \u03b2, \u03b3}, according to the", "source": "meca500_programming_manual", "chunk_index": 131, "length": 39, "hash": "d41147725ddc7a31c631edc85d81c1f8"}
{"id": "meca500_programming_manual_132", "text": "mobile XYZ convention", "source": "meca500_programming_manual", "chunk_index": 132, "length": 21, "hash": "a1763f2f749ab42496e5ee22367534b2"}
{"id": "meca500_programming_manual_133", "text": "(also\nreferred to as XYZ instrinsic rotations, RxRyRz, or XY\u2019Z\u2019\u2019). In this convention, if the orientation\nof a frame F", "source": "meca500_programming_manual", "chunk_index": 133, "length": 118, "hash": "504d1847d535341bb58aee3c01634841"}
{"id": "meca500_programming_manual_134", "text": "with respect to a frame F", "source": "meca500_programming_manual", "chunk_index": 134, "length": 25, "hash": "6130b081d60e79e5dc919cb7bf5405a8"}
{"id": "meca500_programming_manual_135", "text": "is described by the Euler angles {\u03b1, \u03b2, \u03b3}, it means", "source": "meca500_programming_manual", "chunk_index": 135, "length": 52, "hash": "a6046dd6fe408a614c0179aa4c05c176"}
{"id": "meca500_programming_manual_136", "text": "that if you align a frame F", "source": "meca500_programming_manual", "chunk_index": 136, "length": 27, "hash": "2152e525e4ed949061e70420b106cb66"}
{"id": "meca500_programming_manual_137", "text": "about its x axis by \u03b1 (alpha) degrees,\nthen about its y axis by \u03b2 (beta) degrees, and finally about its z axis by \u03b3 (gamma) degrees,\nthe final orientation of frame F", "source": "meca500_programming_manual", "chunk_index": 137, "length": 165, "hash": "a618b86a5adff9c47e4da5728cb1263f"}
{"id": "meca500_programming_manual_138", "text": "will be the same as that of frame F", "source": "meca500_programming_manual", "chunk_index": 138, "length": 35, "hash": "8216bdf24dadf1c68755f518b28e9135"}
{"id": "meca500_programming_manual_139", "text": "Figure 3 shows an example of specifying orientation using the mobile XYZ Euler angle", "source": "meca500_programming_manual", "chunk_index": 139, "length": 84, "hash": "14369da5c95986c187e18994772ef4c6"}
{"id": "meca500_programming_manual_140", "text": "Figure 3 shows an example of specifying orientation using the mobile XYZ Euler angle", "source": "meca500_programming_manual", "chunk_index": 140, "length": 84, "hash": "14369da5c95986c187e18994772ef4c6"}
{"id": "meca500_programming_manual_141", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 141, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_142", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 142, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_143", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 143, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_144", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 144, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_145", "text": "convention. The diagram on the right shows the black reference frame orientation with\nrespect to the gray reference frame with the Euler angles {45\u00b0, \u221260\u00b0, 90\u00b0}.", "source": "meca500_programming_manual", "chunk_index": 145, "length": 161, "hash": "644a28ab2910ed1b506d13d6a091db75"}
{"id": "meca500_programming_manual_146", "text": "convention. The diagram on the right shows the black reference frame orientation with\nrespect to the gray reference frame with the Euler angles {45\u00b0, \u221260\u00b0, 90\u00b0}.", "source": "meca500_programming_manual", "chunk_index": 146, "length": 161, "hash": "644a28ab2910ed1b506d13d6a091db75"}
{"id": "meca500_programming_manual_147", "text": "(a) rotate 45\u00b0 about the x axis", "source": "meca500_programming_manual", "chunk_index": 147, "length": 31, "hash": "48fea3480bccd51db7b5cf03143d6e78"}
{"id": "meca500_programming_manual_148", "text": "(a) rotate 45\u00b0 about the x axis", "source": "meca500_programming_manual", "chunk_index": 148, "length": 31, "hash": "48fea3480bccd51db7b5cf03143d6e78"}
{"id": "meca500_programming_manual_149", "text": "(b) rotate \u221260\u00b0 about the new y\naxis", "source": "meca500_programming_manual", "chunk_index": 149, "length": 36, "hash": "13e2e03b857830135d464cfd98dba910"}
{"id": "meca500_programming_manual_150", "text": "(b) rotate \u221260\u00b0 about the new y\naxis", "source": "meca500_programming_manual", "chunk_index": 150, "length": 36, "hash": "13e2e03b857830135d464cfd98dba910"}
{"id": "meca500_programming_manual_151", "text": "Figure 3: The three consecutive rotations associated with the Euler angles {45\u00b0, \u221260\u00b0, 90\u00b0}", "source": "meca500_programming_manual", "chunk_index": 151, "length": 91, "hash": "f1654bb92dfad648e23ab8beec5c381c"}
{"id": "meca500_programming_manual_152", "text": "Figure 3: The three consecutive rotations associated with the Euler angles {45\u00b0, \u221260\u00b0, 90\u00b0}", "source": "meca500_programming_manual", "chunk_index": 152, "length": 91, "hash": "f1654bb92dfad648e23ab8beec5c381c"}
{"id": "meca500_programming_manual_153", "text": "(c) rotate 90\u00b0 about the new z axis", "source": "meca500_programming_manual", "chunk_index": 153, "length": 35, "hash": "11014c9f303af3892c019708c697d3fa"}
{"id": "meca500_programming_manual_154", "text": "(c) rotate 90\u00b0 about the new z axis", "source": "meca500_programming_manual", "chunk_index": 154, "length": 35, "hash": "11014c9f303af3892c019708c697d3fa"}
{"id": "meca500_programming_manual_155", "text": "Because there are infinitely many sets of Euler angles that define a given orientation, the\ncommands that accept a pose as arguments, accept any numerical value for the three Euler\nangles (e.g., the set {378.34\u00b0, \u2212567.32\u00b0, 745.03\u00b0}). However, we output only the equivalent\nEuler angle set {\u03b1, \u03b2, \u03b3}, for which \u2212180\u00b0 \u2264 \u03b1 \u2264 180\u00b0, \u221290\u00b0 \u2264 \u03b2 \u2264 90\u00b0 and \u2212180\u00b0 \u2264 \u03b3 \u2264 180\u00b0.\nFurthermore, if you specify the Euler angles {\u03b1, \u00b190\u00b0, \u03b3}, the controller will always return\nan equivalent Euler angle set with \u03b1 = 0. Thus, it is perfectly normal that the Euler angles\nused to specify an orientation are not the same as the Euler angles returned by the controller,\nonce that orientation has been attained (see our tutorial on Euler angles).", "source": "meca500_programming_manual", "chunk_index": 155, "length": 722, "hash": "ab45af2f4681d2a71de326d4b3ed8185"}
{"id": "meca500_programming_manual_156", "text": "Because there are infinitely many sets of Euler angles that define a given orientation, the\ncommands that accept a pose as arguments, accept any numerical value for the three Euler", "source": "meca500_programming_manual", "chunk_index": 156, "length": 180, "hash": "2b4343abdb1bfa46d38f7f9b46bbf13a"}
{"id": "meca500_programming_manual_157", "text": "angles (e.g., the set {378.34\u00b0, \u2212567.32\u00b0, 745.03\u00b0}). However, we output only the equivalent\nEuler angle set {\u03b1, \u03b2, \u03b3}, for which \u2212180\u00b0 \u2264 \u03b1 \u2264 180\u00b0, \u221290\u00b0 \u2264 \u03b2 \u2264 90\u00b0 and \u2212180\u00b0 \u2264 \u03b3 \u2264 180\u00b0.\nFurthermore, if you specify the Euler angles {\u03b1, \u00b190\u00b0, \u03b3}, the controller will always return\nan equivalent Euler angle set with \u03b1 = 0.", "source": "meca500_programming_manual", "chunk_index": 157, "length": 318, "hash": "fb80d4d6a3918593c9f78030b6296595"}
{"id": "meca500_programming_manual_158", "text": "Thus, it is perfectly normal that the Euler angles\nused to specify an orientation are not the same as the Euler angles returned by the controller,\nonce that orientation has been attained", "source": "meca500_programming_manual", "chunk_index": 158, "length": 186, "hash": "35a47154fd4caab3e50e9f4eafd4561e"}
{"id": "meca500_programming_manual_159", "text": "(see our tutorial on Euler angles).", "source": "meca500_programming_manual", "chunk_index": 159, "length": 35, "hash": "15aafe75ce5bec2b9efa28043c101718"}
{"id": "meca500_programming_manual_160", "text": "Joint positions and last joint turn configuration", "source": "meca500_programming_manual", "chunk_index": 160, "length": 49, "hash": "210e6be3a0e71364e50accd1b534e3b4"}
{"id": "meca500_programming_manual_161", "text": "Joint positions and last joint turn configuration", "source": "meca500_programming_manual", "chunk_index": 161, "length": 49, "hash": "210e6be3a0e71364e50accd1b534e3b4"}
{"id": "meca500_programming_manual_162", "text": "The angle associated with a rotational joint i, \u03b8i, will be referred to as joint position (page 358)\ni. Since the last joint of the robot (joint 6) can rotate more than one revolution, you should\nthink of the joint angle as a motor angle, rather than as the angle between two consecutive\nrobot links. Unless you attach an end-effector with cabling to the robot flange, there is no", "source": "meca500_programming_manual", "chunk_index": 162, "length": 380, "hash": "fa9e39dccce101c51a3b2227b0b4ddba"}
{"id": "meca500_programming_manual_163", "text": "The angle associated with a rotational joint i, \u03b8", "source": "meca500_programming_manual", "chunk_index": 163, "length": 49, "hash": "bb2847a01ac0f238373e33474f947356"}
{"id": "meca500_programming_manual_164", "text": ", will be referred to as", "source": "meca500_programming_manual", "chunk_index": 164, "length": 24, "hash": "faecdc41b5b1ef034e3c82f5b1a9619b"}
{"id": "meca500_programming_manual_165", "text": "(page 358)\ni. Since the last joint of the robot (joint 6) can rotate more than one revolution, you should\nthink of the joint angle as a motor angle, rather than as the angle between two consecutive\nrobot links. Unless you attach an end-effector with cabling to the robot flange, there is no", "source": "meca500_programming_manual", "chunk_index": 165, "length": 290, "hash": "30250d4324e6d3087047a4439866eccf"}
{"id": "meca500_programming_manual_166", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 166, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_167", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 167, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_168", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 168, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_169", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 169, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_170", "text": "way of knowing the value of the last joint angle just by observing the robot.", "source": "meca500_programming_manual", "chunk_index": 170, "length": 77, "hash": "6c92f1e5987b60568f921280ac972a34"}
{"id": "meca500_programming_manual_171", "text": "way of knowing the value of the last joint angle just by observing the robot.", "source": "meca500_programming_manual", "chunk_index": 171, "length": 77, "hash": "6c92f1e5987b60568f921280ac972a34"}
{"id": "meca500_programming_manual_172", "text": "Note that the directions of rotation for each joint are engraved on the robot\u2019s body. As\npreviously mentioned, all joint positions are zero in Figure 1.", "source": "meca500_programming_manual", "chunk_index": 172, "length": 152, "hash": "f487d4efe7f51c4d8e064ea3964a613f"}
{"id": "meca500_programming_manual_173", "text": "Note that the directions of rotation for each joint are engraved on the robot\u2019s body. As\npreviously mentioned, all joint positions are zero in Figure 1.", "source": "meca500_programming_manual", "chunk_index": 173, "length": 152, "hash": "f487d4efe7f51c4d8e064ea3964a613f"}
{"id": "meca500_programming_manual_174", "text": "The mechanical limits of the first five joints of the Meca500 are as follows:", "source": "meca500_programming_manual", "chunk_index": 174, "length": 77, "hash": "2caf61e5daba102fbe63d26e3a2e2b9c"}
{"id": "meca500_programming_manual_175", "text": "The mechanical limits of the first five joints of the Meca500 are as follows:", "source": "meca500_programming_manual", "chunk_index": 175, "length": 77, "hash": "2caf61e5daba102fbe63d26e3a2e2b9c"}
{"id": "meca500_programming_manual_176", "text": "\u2212175\u00b0 \u2264 \u03b81 \u2264 175\u00b0,\n\u221270\u00b0 \u2264 \u03b82 \u2264 90\u00b0,\n\u2212135\u00b0 \u2264 \u03b83 \u2264 70\u00b0,\n\u2212170\u00b0 \u2264 \u03b84 \u2264 170\u00b0,\n\u2212115\u00b0 \u2264 \u03b85 \u2264 115\u00b0.", "source": "meca500_programming_manual", "chunk_index": 176, "length": 91, "hash": "22bebebef42528d57dffd7ab6ed68f80"}
{"id": "meca500_programming_manual_177", "text": "Joint 6 has no mechanical limits, but its software limits are \u00b1100 turns. Finally, we define the\ninteger ct as the joint 6 turn configuration parameter (page 359), so that", "source": "meca500_programming_manual", "chunk_index": 177, "length": 171, "hash": "5f4af45fb240274d3dff525953df7c00"}
{"id": "meca500_programming_manual_178", "text": "Joint 6 has no mechanical limits, but its software limits are \u00b1100 turns. Finally, we define the\ninteger c", "source": "meca500_programming_manual", "chunk_index": 178, "length": 106, "hash": "40cf7efa3bf44f95cf90c0cc3c788ce1"}
{"id": "meca500_programming_manual_179", "text": "turn configuration parameter", "source": "meca500_programming_manual", "chunk_index": 179, "length": 28, "hash": "a30bb88e7239bd8dafc0dae4dbaebbd5"}
{"id": "meca500_programming_manual_180", "text": "\u2212180\u00b0 + ct360\u00b0 < \u03b86 \u2264 180\u00b0 + ct360\u00b0.", "source": "meca500_programming_manual", "chunk_index": 180, "length": 36, "hash": "57a0eddcdd1c35325ee070f8a4a6fd3a"}
{"id": "meca500_programming_manual_181", "text": "Joints can be further constrained using the SetJointLimits (page 203) command (or via the\nMecaPortal).", "source": "meca500_programming_manual", "chunk_index": 181, "length": 102, "hash": "f96370c34573853ac79d034c86e3101c"}
{"id": "meca500_programming_manual_182", "text": "Joints can be further constrained using the", "source": "meca500_programming_manual", "chunk_index": 182, "length": 43, "hash": "00b1def770100e203f70a3e80f171305"}
{"id": "meca500_programming_manual_183", "text": "(page 203) command (or via the\nMecaPortal).", "source": "meca500_programming_manual", "chunk_index": 183, "length": 43, "hash": "be61ee79f87a5ea0115125c91418456f"}
{"id": "meca500_programming_manual_184", "text": "Joint set and robot posture", "source": "meca500_programming_manual", "chunk_index": 184, "length": 27, "hash": "4d0d22207ce3b1ff05a6959cb68a5900"}
{"id": "meca500_programming_manual_185", "text": "Joint set and robot posture", "source": "meca500_programming_manual", "chunk_index": 185, "length": 27, "hash": "4d0d22207ce3b1ff05a6959cb68a5900"}
{"id": "meca500_programming_manual_186", "text": "There are several possible solutions for joint positions, for a desired pose of the robot end-\neffector with respect to the robot base, i.e., several possible sets {\u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86}. The\nsimplest way to describe how the robot is postured, is by giving its set of joint positions. This\nset will be referred to as the joint set (page 358).", "source": "meca500_programming_manual", "chunk_index": 186, "length": 344, "hash": "31ecfcca7705cd88456e698da04c16af"}
{"id": "meca500_programming_manual_187", "text": "There are several possible solutions for joint positions, for a desired pose of the robot end-\neffector with respect to the robot base, i.e., several possible sets {\u03b8", "source": "meca500_programming_manual", "chunk_index": 187, "length": 166, "hash": "a157d43034c7ddbb255b7463c36ee036"}
{"id": "meca500_programming_manual_188", "text": "}. The\nsimplest way to describe how the robot is postured, is by giving its set of joint positions. This\nset will be referred to as the", "source": "meca500_programming_manual", "chunk_index": 188, "length": 135, "hash": "91cbfd7228c3b66efaed6aeace2a5332"}
{"id": "meca500_programming_manual_189", "text": "A joint set completely defines the relative poses of each pair of adjacent links, i.e., the robot\nposture (page 359). However, the joint sets {\u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86} and {\u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86\n+ ct 360\u00b0}, where \u2212180\u00b0 < \u03b86 \u2264 180\u00b0 and ct is the turn configuration for joint 6, define the\nsame robot posture.", "source": "meca500_programming_manual", "chunk_index": 189, "length": 307, "hash": "61935a86fc795a5b0e9bf18228922195"}
{"id": "meca500_programming_manual_190", "text": "A joint set completely defines the relative poses of each pair of adjacent links, i.e., the", "source": "meca500_programming_manual", "chunk_index": 190, "length": 91, "hash": "cf96d2b24385cf6c24b8b82c8ea5f461"}
{"id": "meca500_programming_manual_191", "text": "(page 359). However, the joint sets {\u03b8", "source": "meca500_programming_manual", "chunk_index": 191, "length": 38, "hash": "ba82d7bc20bac10b65c1a627849e052a"}
{"id": "meca500_programming_manual_192", "text": "360\u00b0}, where \u2212180\u00b0 < \u03b8", "source": "meca500_programming_manual", "chunk_index": 192, "length": 22, "hash": "83d5120aa2c513b4dda44c02d11c1424"}
{"id": "meca500_programming_manual_193", "text": "is the turn configuration for joint 6, define the\nsame robot posture.", "source": "meca500_programming_manual", "chunk_index": 193, "length": 69, "hash": "5b36bca9e7d1990a302c2290254ce161"}
{"id": "meca500_programming_manual_194", "text": "Therefore, a joint set conveys the same information as a robot posture AND the turn\nconfiguration of the last joint.", "source": "meca500_programming_manual", "chunk_index": 194, "length": 116, "hash": "cde0987f8f36b26e2fa3cd923fe4e38f"}
{"id": "meca500_programming_manual_195", "text": "a joint set conveys the same information as a robot posture AND the turn\nconfiguration of the last joint", "source": "meca500_programming_manual", "chunk_index": 195, "length": 104, "hash": "a5e4955c56b6968c14cc2a901373b272"}
{"id": "meca500_programming_manual_196", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 196, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_197", "text": "Definitions and conventions", "source": "meca500_programming_manual", "chunk_index": 197, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "meca500_programming_manual_198", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 198, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_199", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 199, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_200", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 200, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_201", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 201, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_202", "text": "Inverse kinematic solutions and configuration parameters", "source": "meca500_programming_manual", "chunk_index": 202, "length": 56, "hash": "854155d2149733b5623f02c3d271c5e8"}
{"id": "meca500_programming_manual_203", "text": "Inverse kinematic solutions and configuration parameters", "source": "meca500_programming_manual", "chunk_index": 203, "length": 56, "hash": "854155d2149733b5623f02c3d271c5e8"}
{"id": "meca500_programming_manual_204", "text": "The inverse kinematics (page 358) is the problem of obtaining the robot joint sets that\ncorrespond to a desired end-effector pose.", "source": "meca500_programming_manual", "chunk_index": 204, "length": 130, "hash": "ed18ffadc9e9d844c1b00a827f003607"}
{"id": "meca500_programming_manual_205", "text": "(page 358) is the problem of obtaining the robot joint sets that\ncorrespond to a desired end-effector pose.", "source": "meca500_programming_manual", "chunk_index": 205, "length": 107, "hash": "ce9522896d14bcd4fb640ef9278e2e8a"}
{"id": "meca500_programming_manual_206", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 206, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_207", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 207, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_208", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 208, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_209", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 209, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_210", "text": "Figure 5: An example showing all eight possible robot postures of the Meca500 for the same\nend-effector pose", "source": "meca500_programming_manual", "chunk_index": 210, "length": 108, "hash": "1840fd973341ac5379b1b9e2caaed8be"}
{"id": "meca500_programming_manual_211", "text": "Figure 5: An example showing all eight possible robot postures of the Meca500 for the same\nend-effector pose", "source": "meca500_programming_manual", "chunk_index": 211, "length": 108, "hash": "1840fd973341ac5379b1b9e2caaed8be"}
{"id": "meca500_programming_manual_212", "text": "The inverse kinematics of our six-axis robots provide up to eight feasible robot postures for\na desired pose of the TRF with respect to the WRF, as shown in Figure 5, and many more\njoint sets (since if \u03b86 is a solution, then \u03b86 \u00b1 m360\u00b0, where m is an integer, is also a solution).\nEach of these solutions is associated with a different combination of three binary parameters\ncalled the robot posture configuration parameters (page 358): cs, ce and cw. Each of these\nparameters corresponds to a specific geometric condition on the robot posture:", "source": "meca500_programming_manual", "chunk_index": 212, "length": 544, "hash": "a397821e20c9615298780e6a5e0651f4"}
{"id": "meca500_programming_manual_213", "text": "The inverse kinematics of our six-axis robots provide up to eight feasible robot postures for\na desired pose of the TRF with respect to the WRF, as shown in Figure 5, and many more\njoint sets (since if \u03b8", "source": "meca500_programming_manual", "chunk_index": 213, "length": 203, "hash": "f22b0f2caf0c6dd6949e5575b2217ddf"}
{"id": "meca500_programming_manual_214", "text": "is a solution, then \u03b8", "source": "meca500_programming_manual", "chunk_index": 214, "length": 21, "hash": "803569e6ba82db405cd58eaf918e3ef4"}
{"id": "meca500_programming_manual_215", "text": "\u00b1 m360\u00b0, where m is an integer, is also a solution).\nEach of these solutions is associated with a different combination of three binary parameters", "source": "meca500_programming_manual", "chunk_index": 215, "length": 146, "hash": "3e5f3acd02104496d4fe3c32e6fc2842"}
{"id": "meca500_programming_manual_216", "text": "robot posture configuration parameters", "source": "meca500_programming_manual", "chunk_index": 216, "length": 38, "hash": "a5c5c404c86468be6da8b9866800754a"}
{"id": "meca500_programming_manual_217", "text": ". Each of these\nparameters corresponds to a specific geometric condition on the robot posture:", "source": "meca500_programming_manual", "chunk_index": 217, "length": 94, "hash": "19dfb8cc61b13caa4459464b274ae265"}
{"id": "meca500_programming_manual_218", "text": "\u2022 cs (shoulder configuration parameter)", "source": "meca500_programming_manual", "chunk_index": 218, "length": 39, "hash": "f53d1b50c93aefb9ffeed367d94e2774"}
{"id": "meca500_programming_manual_219", "text": "(shoulder configuration parameter)", "source": "meca500_programming_manual", "chunk_index": 219, "length": 34, "hash": "12a039157498232e71e48be9152ddcc6"}
{"id": "meca500_programming_manual_220", "text": "\u2013 cs = 1, if the wrist center (page 359) (where the axes of joints 4, 5, and 6 intersect)\nis on the \u201cfront\u201d side of the plane passing through the axes of joints 1 and 2 (see\nFigure 8a).", "source": "meca500_programming_manual", "chunk_index": 220, "length": 185, "hash": "992bde165cc88da0f33b6d6709848dce"}
{"id": "meca500_programming_manual_221", "text": "(page 359) (where the axes of joints 4, 5, and 6 intersect)\nis on the \u201cfront\u201d side of the plane passing through the axes of joints 1 and 2 (see\nFigure 8a).", "source": "meca500_programming_manual", "chunk_index": 221, "length": 155, "hash": "fbe310f22e9a397bb109f10e073eab3a"}
{"id": "meca500_programming_manual_222", "text": "\u2013 cs = \u22121, if the wrist center is on the \u201cback\u201d side of this plane (see Figure 8c).", "source": "meca500_programming_manual", "chunk_index": 222, "length": 83, "hash": "25a5874741f9873099fdb4eed109fce0"}
{"id": "meca500_programming_manual_223", "text": "= \u22121, if the wrist center is on the \u201cback\u201d side of this plane (see Figure 8c).", "source": "meca500_programming_manual", "chunk_index": 223, "length": 78, "hash": "d1b54d4e3e274b2a938e5c290b95970d"}
{"id": "meca500_programming_manual_224", "text": "\u2022 ce (elbow configuration parameter)", "source": "meca500_programming_manual", "chunk_index": 224, "length": 36, "hash": "58bf48c900501bd5570da0485c8772a8"}
{"id": "meca500_programming_manual_225", "text": "(elbow configuration parameter)", "source": "meca500_programming_manual", "chunk_index": 225, "length": 31, "hash": "ba993028dcabe94b255351cbc08cb48d"}
{"id": "meca500_programming_manual_226", "text": "\u2013 ce = 1, if \u03b83 > \u2212arctan(60/19) \u2248 \u221272.43\u00b0 (\u201celbow up\u201d condition, see Figure 8d);", "source": "meca500_programming_manual", "chunk_index": 226, "length": 81, "hash": "19b3f7f0e8e5c3c54ed1cd7bcdb0b923"}
{"id": "meca500_programming_manual_227", "text": "> \u2212arctan(60/19) \u2248 \u221272.43\u00b0 (\u201celbow up\u201d condition, see Figure 8d);", "source": "meca500_programming_manual", "chunk_index": 227, "length": 65, "hash": "bb9ee1cd3d413f5eeab4e7f49e90eeb2"}
{"id": "meca500_programming_manual_228", "text": "\u2013 ce = \u22121, if \u03b83 < \u2212arctan(60/19) \u2248 \u221272.43\u00b0 (\u201celbow down\u201d condition, see Figure 8f).", "source": "meca500_programming_manual", "chunk_index": 228, "length": 84, "hash": "bc4d781b989cb01583d6bc85d3fb749b"}
{"id": "meca500_programming_manual_229", "text": "= \u22121, if \u03b83 < \u2212arctan(60/19) \u2248 \u221272.43\u00b0 (\u201celbow down\u201d condition, see Figure 8f).", "source": "meca500_programming_manual", "chunk_index": 229, "length": 79, "hash": "4204f07c800bdb16721b2885c2cc8bb0"}
{"id": "meca500_programming_manual_230", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 230, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_231", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 231, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_232", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 232, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_233", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 233, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_234", "text": "\u2022 cw (wrist configuration parameter)", "source": "meca500_programming_manual", "chunk_index": 234, "length": 36, "hash": "9323242ea42c0cc53d32d9af3b138929"}
{"id": "meca500_programming_manual_235", "text": "(wrist configuration parameter)", "source": "meca500_programming_manual", "chunk_index": 235, "length": 31, "hash": "b958586f3e57d95ed82fa4deb89d0f5c"}
{"id": "meca500_programming_manual_236", "text": "\u2013 cw = 1, if \u03b85 > 0\u00b0 (\u201cno flip\u201d condition, see Figure 8g);", "source": "meca500_programming_manual", "chunk_index": 236, "length": 58, "hash": "e2ad9dcd348f0e9ab0fec2c73316c7ca"}
{"id": "meca500_programming_manual_237", "text": "> 0\u00b0 (\u201cno flip\u201d condition, see Figure 8g);", "source": "meca500_programming_manual", "chunk_index": 237, "length": 42, "hash": "643f30fe34a3c0fb59202a0601282560"}
{"id": "meca500_programming_manual_238", "text": "\u2013 cw = \u22121, if \u03b85 < 0\u00b0 (\u201cflip\u201d condition, see Figure 8i).", "source": "meca500_programming_manual", "chunk_index": 238, "length": 56, "hash": "816e58e332c054840200a0b7c34b1a85"}
{"id": "meca500_programming_manual_239", "text": "< 0\u00b0 (\u201cflip\u201d condition, see Figure 8i).", "source": "meca500_programming_manual", "chunk_index": 239, "length": 39, "hash": "1c035b8eded2c6c24400b24267592279"}
{"id": "meca500_programming_manual_240", "text": "Figure 5 shows an example with all eight possible robot postures, described by the posture\nconfiguration parameters {cs, ce, cw}, for the pose {77 mm, 210 mm, 300 mm, \u2212103\u00b0, 36\u00b0,\n175\u00b0} of the FRF with respect to the BRF.", "source": "meca500_programming_manual", "chunk_index": 240, "length": 220, "hash": "93434fb667d7e8d06a50d29cfc6691d1"}
{"id": "meca500_programming_manual_241", "text": "Figure 5 shows an example with all eight possible robot postures, described by the posture\nconfiguration parameters {c", "source": "meca500_programming_manual", "chunk_index": 241, "length": 118, "hash": "eb767f007d57a316283fe72e9a32ada8"}
{"id": "meca500_programming_manual_242", "text": "}, for the pose {77 mm, 210 mm, 300 mm, \u2212103\u00b0, 36\u00b0,\n175\u00b0} of the FRF with respect to the BRF.", "source": "meca500_programming_manual", "chunk_index": 242, "length": 93, "hash": "49a7175fa468f5de5188f0f62d103e91"}
{"id": "meca500_programming_manual_243", "text": "Figure 8 shows an example of each robot posture configuration parameter, and limit\nconditions, which are called singularities (page 359). (We will discuss singularities in the next\nsection.) Note that the popular terms front/back and elbow-up/elbow-down are misleading as\nthey are not relative to the robot base but to specific planes that move when some of the robot\njoints rotate.", "source": "meca500_programming_manual", "chunk_index": 243, "length": 382, "hash": "4026642bb49fa2630b6163f95011d669"}
{"id": "meca500_programming_manual_244", "text": "Figure 8 shows an example of each robot posture configuration parameter, and limit\nconditions, which are called", "source": "meca500_programming_manual", "chunk_index": 244, "length": 111, "hash": "95cf33733af52754d8bbb461a768d66e"}
{"id": "meca500_programming_manual_245", "text": "(page 359). (We will discuss singularities in the next\nsection.) Note that the popular terms front/back and elbow-up/elbow-down are misleading as\nthey are not relative to the robot base but to specific planes that move when some of the robot\njoints rotate.", "source": "meca500_programming_manual", "chunk_index": 245, "length": 256, "hash": "a5620f746dcd0e7d42ce8c0ee529ca36"}
{"id": "meca500_programming_manual_246", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 246, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_247", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 247, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_248", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 248, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_249", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 249, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_250", "text": "(b) shoulder singularity", "source": "meca500_programming_manual", "chunk_index": 250, "length": 24, "hash": "0fdad1d55ab3440ce6d279e1a5887d06"}
{"id": "meca500_programming_manual_251", "text": "(b) shoulder singularity", "source": "meca500_programming_manual", "chunk_index": 251, "length": 24, "hash": "0fdad1d55ab3440ce6d279e1a5887d06"}
{"id": "meca500_programming_manual_252", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 252, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_253", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 253, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_254", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 254, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_255", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 255, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_256", "text": "(d) c\u2091 = 1, elbow up", "source": "meca500_programming_manual", "chunk_index": 256, "length": 20, "hash": "f546dd5b8f9cf36eb4523fce79868b96"}
{"id": "meca500_programming_manual_257", "text": "(d) c\u2091 = 1, elbow up", "source": "meca500_programming_manual", "chunk_index": 257, "length": 20, "hash": "f546dd5b8f9cf36eb4523fce79868b96"}
{"id": "meca500_programming_manual_258", "text": "(e) elbow singularity", "source": "meca500_programming_manual", "chunk_index": 258, "length": 21, "hash": "a6e8662d85644b8c3d1b5ec24787d929"}
{"id": "meca500_programming_manual_259", "text": "(e) elbow singularity", "source": "meca500_programming_manual", "chunk_index": 259, "length": 21, "hash": "a6e8662d85644b8c3d1b5ec24787d929"}
{"id": "meca500_programming_manual_260", "text": "(f) c\u2091 = \u22121, elbow down", "source": "meca500_programming_manual", "chunk_index": 260, "length": 23, "hash": "a73e4e31e9ab7cd7116b13143a2af41f"}
{"id": "meca500_programming_manual_261", "text": "(f) c\u2091 = \u22121, elbow down", "source": "meca500_programming_manual", "chunk_index": 261, "length": 23, "hash": "a73e4e31e9ab7cd7116b13143a2af41f"}
{"id": "meca500_programming_manual_262", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 262, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_263", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 263, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_264", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 264, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_265", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 265, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_266", "text": "(h) wrist singularity", "source": "meca500_programming_manual", "chunk_index": 266, "length": 21, "hash": "c07d3a227940da6a7ec78717e67c96ef"}
{"id": "meca500_programming_manual_267", "text": "(h) wrist singularity", "source": "meca500_programming_manual", "chunk_index": 267, "length": 21, "hash": "c07d3a227940da6a7ec78717e67c96ef"}
{"id": "meca500_programming_manual_268", "text": "Figure 8: Posture configuration parameters and the three singularity types for the Meca500", "source": "meca500_programming_manual", "chunk_index": 268, "length": 90, "hash": "708380c7883fd60a8cc94bd38d19f49a"}
{"id": "meca500_programming_manual_269", "text": "Figure 8: Posture configuration parameters and the three singularity types for the Meca500", "source": "meca500_programming_manual", "chunk_index": 269, "length": 90, "hash": "708380c7883fd60a8cc94bd38d19f49a"}
{"id": "meca500_programming_manual_270", "text": "The robot calculates the solution to the inverse kinematics that corresponds to the desired\nposture configuration, {cs, ce, cw}, defined by the SetConf (page 157) command. In addition, it\nsolves \u03b86 by choosing the angle that corresponds to the desired turn configuration, ct, defined\nby the SetConfTurn (page 159) command. The turn is therefore the last inverse kinematics\nconfiguration parameter.", "source": "meca500_programming_manual", "chunk_index": 270, "length": 397, "hash": "b51da1a8e6bc59c2089e1eef8f33f0fa"}
{"id": "meca500_programming_manual_271", "text": "The robot calculates the solution to the inverse kinematics that corresponds to the desired\nposture configuration, {c", "source": "meca500_programming_manual", "chunk_index": 271, "length": 117, "hash": "84cd908fd0d06b5b70c191dbbfda595b"}
{"id": "meca500_programming_manual_272", "text": "(page 157) command. In addition, it\nsolves \u03b8", "source": "meca500_programming_manual", "chunk_index": 272, "length": 44, "hash": "b72b664a28440ad79fae9e2df4dd4525"}
{"id": "meca500_programming_manual_273", "text": "by choosing the angle that corresponds to the desired turn configuration, c", "source": "meca500_programming_manual", "chunk_index": 273, "length": 75, "hash": "6cf61f2899b822b6d90e6100b8995312"}
{"id": "meca500_programming_manual_274", "text": "(page 159) command. The turn is therefore the last inverse kinematics\nconfiguration parameter.", "source": "meca500_programming_manual", "chunk_index": 274, "length": 94, "hash": "c55617c8a4ff0e1f80f579ab4606e3d7"}
{"id": "meca500_programming_manual_275", "text": "Both the turn configuration and the set of robot posture configuration parameters are\nneeded to pinpoint the solution to the robot inverse kinematics (i.e., to pinpoint the joint set\ncorresponding to the desired pose). However, there are major differences between the turn\nand robot posture configuration parameters; mainly that the change of turn does not involve\nsingularities. This is why different commands are used (SetConf (page 157) and SetConfTurn\n(page 159), SetAutoConf (page 149) and SetAutoConfTurn (page 150), etc.).", "source": "meca500_programming_manual", "chunk_index": 275, "length": 529, "hash": "810dd532f357c76ced2920893f56e02a"}
{"id": "meca500_programming_manual_276", "text": "Both the turn configuration and the set of robot posture configuration parameters are\nneeded to pinpoint the solution to the robot inverse kinematics", "source": "meca500_programming_manual", "chunk_index": 276, "length": 149, "hash": "9630dcc924fcb17a3d643c91cd70800e"}
{"id": "meca500_programming_manual_277", "text": "(i.e., to pinpoint the joint set", "source": "meca500_programming_manual", "chunk_index": 277, "length": 32, "hash": "c5b33cf03730a39883a14ab28ee65af6"}
{"id": "meca500_programming_manual_278", "text": "corresponding to the desired pose). However, there are major differences between the turn\nand robot posture configuration parameters; mainly that the change of turn does not involve\nsingularities. This is why different commands are used (", "source": "meca500_programming_manual", "chunk_index": 278, "length": 238, "hash": "4391ee6f08a897a78b39d3308d778eb7"}
{"id": "meca500_programming_manual_279", "text": "Although it is possible to calculate the optimal inverse kinematic solution (the shortest\nmove from the current robot position) using the commands SetAutoConf (page 149) and\nSetAutoConfTurn (page 150), we strongly recommend always specifying the desired values\nfor the configuration parameters with SetConf (page 157) and SetConfTurn (page 159). This\nshould be done for every Cartesian motion command (e.g., MovePose (page 147) and the\nvarious MoveLin* commands) when programming your robot in online mode programming\n(page 358).", "source": "meca500_programming_manual", "chunk_index": 279, "length": 529, "hash": "55ade5ffda7315f1ea9ca2ff1143b167"}
{"id": "meca500_programming_manual_280", "text": "Although it is possible to calculate the optimal inverse kinematic solution (the shortest\nmove from the current robot position) using the commands", "source": "meca500_programming_manual", "chunk_index": 280, "length": 146, "hash": "c240f79517ec2d692bb71a88698498f7"}
{"id": "meca500_programming_manual_281", "text": "(page 150), we strongly recommend always specifying the desired values\nfor the configuration parameters with", "source": "meca500_programming_manual", "chunk_index": 281, "length": 108, "hash": "1cee7ef1bd4df04c88a3c2849b3cd056"}
{"id": "meca500_programming_manual_282", "text": "should be done for every Cartesian motion command (e.g.,", "source": "meca500_programming_manual", "chunk_index": 282, "length": 56, "hash": "98751053e293898be3ef2b21077e0d8e"}
{"id": "meca500_programming_manual_283", "text": "(page 147) and the\nvarious MoveLin* commands) when programming your robot in", "source": "meca500_programming_manual", "chunk_index": 283, "length": 76, "hash": "a24147962116e19ded52eea6eb55d3b0"}
{"id": "meca500_programming_manual_284", "text": "online mode programming", "source": "meca500_programming_manual", "chunk_index": 284, "length": 23, "hash": "0132caa04a6bfe2e90f1b439db743e28"}
{"id": "meca500_programming_manual_285", "text": "If you are teaching the robot position (page 359) and later want the end-effector to move", "source": "meca500_programming_manual", "chunk_index": 285, "length": 89, "hash": "67ded051e3f826a58bf175aea0995265"}
{"id": "meca500_programming_manual_286", "text": "If you are teaching the", "source": "meca500_programming_manual", "chunk_index": 286, "length": 23, "hash": "d305eaeeee48ae90af5b1d9b088007a0"}
{"id": "meca500_programming_manual_287", "text": "(page 359) and later want the end-effector to move", "source": "meca500_programming_manual", "chunk_index": 287, "length": 50, "hash": "92303d8989a5865ccc79e25eb3a64ae8"}
{"id": "meca500_programming_manual_288", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 288, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_289", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 289, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_290", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 290, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_291", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 291, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_292", "text": "to the current pose along a linear path, you must record not only the current pose of the\nTRF relative to the WRF (using GetRtCartPos (page 272)), but also the definitions of both\nthe TRF and the WRF (using GetTrf (page 264) and GetWrf (page 266)). Additionally, you\nneed to capture the corresponding configuration parameters (using GetRtConf (page 274)\nand GetRtConfTurn (page 275)). Then, to ensure accurate execution of the command MoveLin\n(page 141) when approaching the previously recorded robot position from a starting position,\nyou must verify that the robot is already in the same posture configuration and that \u03b86 is\nwithin half a revolution of the desired value. If you do not require the robot\u2019s TCP to follow\na linear trajectory, it is preferable to retrieve only the current joint set using GetRtJointPos\n(page 276). You can later move the robot to that joint set with the MoveJoints (page 135)\ncommand, eliminating the need to record or specify the four configuration parameters and\nthe definitions of the TRF and WRF.", "source": "meca500_programming_manual", "chunk_index": 292, "length": 1033, "hash": "3590a00ba4d2fc7be097f76db7ee555d"}
{"id": "meca500_programming_manual_293", "text": "to the current pose along a linear path, you must record not only the current pose of the\nTRF relative to the WRF (using", "source": "meca500_programming_manual", "chunk_index": 293, "length": 120, "hash": "adccfb92c21e635c7887c7b576f5a17c"}
{"id": "meca500_programming_manual_294", "text": "(page 272)), but also the definitions of both\nthe TRF and the WRF (using", "source": "meca500_programming_manual", "chunk_index": 294, "length": 72, "hash": "99d30d9e016646e04efb609680b092a1"}
{"id": "meca500_programming_manual_295", "text": "(page 266)). Additionally, you\nneed to capture the corresponding configuration parameters (using", "source": "meca500_programming_manual", "chunk_index": 295, "length": 96, "hash": "586191842fa453f4a0e77a264269146c"}
{"id": "meca500_programming_manual_296", "text": "(page 275)). Then, to ensure accurate execution of the command", "source": "meca500_programming_manual", "chunk_index": 296, "length": 62, "hash": "71695191e5b221a6ad36932726f91c1d"}
{"id": "meca500_programming_manual_297", "text": "(page 141) when approaching the previously recorded robot position from a starting position,\nyou must verify that the robot is already in the same posture configuration and that \u03b8", "source": "meca500_programming_manual", "chunk_index": 297, "length": 179, "hash": "187cfb33807f78e8e99eec5f3342d5df"}
{"id": "meca500_programming_manual_298", "text": "is\nwithin half a revolution of the desired value. If you do not require the robot\u2019s TCP to follow\na linear trajectory, it is preferable to retrieve only the current joint set using", "source": "meca500_programming_manual", "chunk_index": 298, "length": 180, "hash": "f742d0417d01b68c32d8c827bce8a870"}
{"id": "meca500_programming_manual_299", "text": "(page 276). You can later move the robot to that joint set with the", "source": "meca500_programming_manual", "chunk_index": 299, "length": 67, "hash": "34867026f6ce371c06c518a4ad2447c9"}
{"id": "meca500_programming_manual_300", "text": "(page 135)\ncommand, eliminating the need to record or specify the four configuration parameters and\nthe definitions of the TRF and WRF.", "source": "meca500_programming_manual", "chunk_index": 300, "length": 135, "hash": "5e054ef0719756b1d6650a4f0fefe2d5"}
{"id": "meca500_programming_manual_301", "text": "Automatic configuration selection", "source": "meca500_programming_manual", "chunk_index": 301, "length": 33, "hash": "f1d385522cc3be2e5eb93a5fdd50b479"}
{"id": "meca500_programming_manual_302", "text": "Automatic configuration selection", "source": "meca500_programming_manual", "chunk_index": 302, "length": 33, "hash": "f1d385522cc3be2e5eb93a5fdd50b479"}
{"id": "meca500_programming_manual_303", "text": "The automatic configuration selection should only be used once you understand how this\nselection is done, and mainly while programming and testing. For example, when jogging in\nCartesian space with the MecaPortal, the automatic configuration selection is always enabled.\nOr, if a target pose is identified in real-time based on input from a sensor (e.g., a camera),\nenabling the automatic configuration selection will increase your chances of reaching that\npose, and in the fastest way.", "source": "meca500_programming_manual", "chunk_index": 303, "length": 486, "hash": "ffbb1c706fcd2ac3ed4356153538290f"}
{"id": "meca500_programming_manual_304", "text": "The automatic configuration selection should only be used once you understand how this\nselection is done, and mainly while programming and testing. For example, when jogging in\nCartesian space with the MecaPortal, the automatic configuration selection is always enabled.\nOr, if a target pose is identified in real-time based on input from a sensor (e.g., a camera),\nenabling the automatic configuration selection will increase your chances of reaching that\npose, and in the fastest way.", "source": "meca500_programming_manual", "chunk_index": 304, "length": 486, "hash": "ffbb1c706fcd2ac3ed4356153538290f"}
{"id": "meca500_programming_manual_305", "text": "Figure 9: Effect of configuration parameters on robot movement commands", "source": "meca500_programming_manual", "chunk_index": 305, "length": 71, "hash": "e10b3f880b37d42da49f5b2d64fb1971"}
{"id": "meca500_programming_manual_306", "text": "Figure 9: Effect of configuration parameters on robot movement commands", "source": "meca500_programming_manual", "chunk_index": 306, "length": 71, "hash": "e10b3f880b37d42da49f5b2d64fb1971"}
{"id": "meca500_programming_manual_307", "text": "Figure 9 illustrates how the automatic and manual configuration selections work, with the\nfollowing five remarks:", "source": "meca500_programming_manual", "chunk_index": 307, "length": 113, "hash": "3ed94aaa134ac81786c52cf39793f7ec"}
{"id": "meca500_programming_manual_308", "text": "Figure 9 illustrates how the automatic and manual configuration selections work, with the\nfollowing five remarks:", "source": "meca500_programming_manual", "chunk_index": 308, "length": 113, "hash": "3ed94aaa134ac81786c52cf39793f7ec"}
{"id": "meca500_programming_manual_309", "text": "1. Setting a desired posture or turn configuration (with SetConf (page 157) or SetConfTurn\nrespectively) disables the automatic posture or turn configuration\n(page 159),\nselection, respectively, which are both set by default.\nInversely, enabling the\nautomatic posture or turn configuration selection, with SetAutoConf(1) (page 149)\nor SetAutoConfTurn(1) (page 150), respectively, removes the desired posture or\nif SetAutoConf(0) (page 149) or\nturn configuration, respectively. At any moment,\nSetAutoConfTurn(0) (page 150) is executed, the robot posture or turn configuration\nof the current robot position is set as the desired posture or turn configuration,", "source": "meca500_programming_manual", "chunk_index": 309, "length": 657, "hash": "27ff17371de3574e1972ac064ff8d121"}
{"id": "meca500_programming_manual_310", "text": "1. Setting a desired posture or turn configuration (with", "source": "meca500_programming_manual", "chunk_index": 310, "length": 56, "hash": "2f028fb469aaa91eda59e9b95e63ea2e"}
{"id": "meca500_programming_manual_311", "text": "respectively) disables the automatic posture or turn configuration\n(page 159),\nselection, respectively, which are both set by default.\nInversely, enabling the\nautomatic posture or turn configuration selection, with", "source": "meca500_programming_manual", "chunk_index": 311, "length": 214, "hash": "872d9fe493355253691e4e5e195c428d"}
{"id": "meca500_programming_manual_312", "text": "(page 150), respectively, removes the desired posture or\nif", "source": "meca500_programming_manual", "chunk_index": 312, "length": 59, "hash": "25ce1eed0db7386cfbc1d9a7ce465ced"}
{"id": "meca500_programming_manual_313", "text": "(page 149) or\nturn configuration, respectively. At any moment,", "source": "meca500_programming_manual", "chunk_index": 313, "length": 62, "hash": "e9cfd31994519d08a75faa4bd39836d1"}
{"id": "meca500_programming_manual_314", "text": "(page 150) is executed, the robot posture or turn configuration\nof the current robot position is set as the desired posture or turn configuration,", "source": "meca500_programming_manual", "chunk_index": 314, "length": 146, "hash": "22403f38f52b21ec4c98d93ca0a9558d"}
{"id": "meca500_programming_manual_315", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 315, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_316", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 316, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_317", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 317, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_318", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 318, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_319", "text": "2. The commands MoveJoints (page 135), MoveJointsRel (page 137), and MoveJointsVel\n(page 138) ignore the automatic and manual configuration selections. Thus, the robot\nmay end up in a posture or turn configuration different from the desired ones, if such\nwere set. If you want to update the desired configurations with the current ones, simply\nexecute the commands SetAutoConf(0) (page 149) or SetAutoConfTurn(0) (page 150).", "source": "meca500_programming_manual", "chunk_index": 319, "length": 424, "hash": "019caf40a5b9db14dd80b5b6aee1b090"}
{"id": "meca500_programming_manual_320", "text": "(page 138) ignore the automatic and manual configuration selections. Thus, the robot\nmay end up in a posture or turn configuration different from the desired ones, if such\nwere set. If you want to update the desired configurations with the current ones, simply\nexecute the commands", "source": "meca500_programming_manual", "chunk_index": 320, "length": 281, "hash": "4f15c257273b643d085c92bc32767e98"}
{"id": "meca500_programming_manual_321", "text": "3. The command MovePose (page 147) respects any desired posture or turn configuration,\nas long as the desired robot position is reachable. In contrast, if automatic posture and/or\nturn configuration selection is enabled, MovePose (page 147) will choose the joint set\ncorresponding to the desired end-effector pose, that is fastest to reach and that satisfies\nthe desired posture or turn configuration, if any.", "source": "meca500_programming_manual", "chunk_index": 321, "length": 409, "hash": "57c6d0fe5fb506861fd19035829726db"}
{"id": "meca500_programming_manual_322", "text": "(page 147) respects any desired posture or turn configuration,\nas long as the desired robot position is reachable. In contrast, if automatic posture and/or\nturn configuration selection is enabled,", "source": "meca500_programming_manual", "chunk_index": 322, "length": 196, "hash": "0a344dab6fa594c515d6ed90173ee419"}
{"id": "meca500_programming_manual_323", "text": "(page 147) will choose the joint set\ncorresponding to the desired end-effector pose, that is fastest to reach and that satisfies\nthe desired posture or turn configuration, if any.", "source": "meca500_programming_manual", "chunk_index": 323, "length": 179, "hash": "fbe4b5ce46e873d5bd4d07671f55faa6"}
{"id": "meca500_programming_manual_324", "text": "4. In the case of MoveLin* commands, the desired posture and turn configurations will\nforce the linear move to remain within the specified posture and turn configurations.\nThis means that a MoveLin (page 141) or MoveLinRel* command will be executed only if\nthe posture and turn configurations of the initial and final robot positions are the same\nas the desired configurations. In the case of MoveLinVel*, the robot will start to move\nonly if the posture and turn configurations of the initial and final robot positions are the\nsame as the desired configurations, and will stop if desired configuration parameter has\nto change.", "source": "meca500_programming_manual", "chunk_index": 324, "length": 627, "hash": "1ac10c7b3c63d379f826a6c314c0d771"}
{"id": "meca500_programming_manual_325", "text": "4. In the case of MoveLin* commands, the desired posture and turn configurations will\nforce the linear move to remain within the specified posture and turn configurations.", "source": "meca500_programming_manual", "chunk_index": 325, "length": 171, "hash": "88fd002d9460683337dac028d0340df9"}
{"id": "meca500_programming_manual_326", "text": "(page 141) or MoveLinRel* command will be executed only if", "source": "meca500_programming_manual", "chunk_index": 326, "length": 58, "hash": "3b9524344ccac7732e5fb2d921aac40b"}
{"id": "meca500_programming_manual_327", "text": "the posture and turn configurations of the initial and final robot positions are the same\nas the desired configurations. In the case of MoveLinVel*, the robot will start to move\nonly if the posture and turn configurations of the initial and final robot positions are the\nsame as the desired configurations, and will stop if desired configuration parameter has\nto change.", "source": "meca500_programming_manual", "chunk_index": 327, "length": 370, "hash": "5eacd59acc2bfc17150825aa4cf1b376"}
{"id": "meca500_programming_manual_328", "text": "5. When automatic configuration selection is enabled, a MoveLin* command may lead\nto changing the posture (if passing through a wrist or shoulder singularity) or turn\nconfiguration along the path.", "source": "meca500_programming_manual", "chunk_index": 328, "length": 196, "hash": "dcdcf3963f2f4ef48d6fba837d856f3e"}
{"id": "meca500_programming_manual_329", "text": "5. When automatic configuration selection is enabled, a MoveLin* command may lead\nto changing the posture (if passing through a wrist or shoulder singularity) or turn\nconfiguration along the path.", "source": "meca500_programming_manual", "chunk_index": 329, "length": 196, "hash": "dcdcf3963f2f4ef48d6fba837d856f3e"}
{"id": "meca500_programming_manual_330", "text": "Finally, note that there is currently no way of specifying only one of the posture configuration\nparameters and leaving the choice of the others to the robot controller. However, there is an\nindirect way to specify the elbow and wrist configurations, though this can\u2019t be done \u201con the\nfly\u201d. Indeed, if you prefer to always stick to one of the two possible wrist configurations in the\nMeca500, you can simply limit the range of joint 5, to either positive or non-negative values,\nusing the command SetJointLimits (page 203). Similarly, you can fix the elbow configuration\nparameter by setting the range of joint 3 to be always smaller or larger than \u2212arctan(60/19)\n\u2248 \u221272.43\u00b0.", "source": "meca500_programming_manual", "chunk_index": 330, "length": 674, "hash": "4e40795d07e8403f7069cbb5d0888622"}
{"id": "meca500_programming_manual_331", "text": "Finally, note that there is currently no way of specifying only one of the posture configuration\nparameters and leaving the choice of the others to the robot controller. However, there is an\nindirect way to specify the elbow and wrist configurations, though this can\u2019t be done \u201con the\nfly\u201d. Indeed, if you prefer to always stick to one of the two possible wrist configurations in the\nMeca500, you can simply limit the range of joint 5, to either positive or non-negative values,\nusing the command", "source": "meca500_programming_manual", "chunk_index": 331, "length": 496, "hash": "36f89c8dbe55a48114074502edc006df"}
{"id": "meca500_programming_manual_332", "text": "(page 203). Similarly, you can fix the elbow configuration\nparameter by setting the range of joint 3 to be always smaller or larger than \u2212arctan(60/19)\n\u2248 \u221272.43\u00b0.", "source": "meca500_programming_manual", "chunk_index": 332, "length": 162, "hash": "99ef9f29bd249b76b4063320a0077e61"}
{"id": "meca500_programming_manual_333", "text": "Workspace and singularities", "source": "meca500_programming_manual", "chunk_index": 333, "length": 27, "hash": "8d7a83138e67d0087a6ad631922a5259"}
{"id": "meca500_programming_manual_334", "text": "Workspace and singularities", "source": "meca500_programming_manual", "chunk_index": 334, "length": 27, "hash": "8d7a83138e67d0087a6ad631922a5259"}
{"id": "meca500_programming_manual_335", "text": "Users often oversimplify the workspace of a six-axis robot arm as a sphere with a radius\nequal to the robot\u2019s reach (page 358) (the maximum distance between the axis of joint 1 and\nthe center of the robot\u2019s wrist). However, the actual Cartesian workspace (page 359) of a\nsix-axis industrial robot is a six-dimensional entity, encompassing all attainable end-effector\nposes (refer to our tutorial on workspace, available on our main website). This means the\nworkspace depends on the choice of the Tool Reference Frame (TRF).", "source": "meca500_programming_manual", "chunk_index": 335, "length": 523, "hash": "76a92deb8de755db7434b8eac46c6b5c"}
{"id": "meca500_programming_manual_336", "text": "Users often oversimplify the workspace of a six-axis robot arm as a sphere with a radius\nequal to the robot\u2019s", "source": "meca500_programming_manual", "chunk_index": 336, "length": 109, "hash": "cc1a646e4b2c505b52eee53a62c3b1ef"}
{"id": "meca500_programming_manual_337", "text": "(page 358) (the maximum distance between the axis of joint 1 and\nthe center of the robot\u2019s wrist). However, the actual Cartesian", "source": "meca500_programming_manual", "chunk_index": 337, "length": 128, "hash": "bf0f5736099584667937a11aaa9037a1"}
{"id": "meca500_programming_manual_338", "text": "(page 359) of a\nsix-axis industrial robot is a six-dimensional entity, encompassing all attainable end-effector\nposes (refer to our tutorial on workspace, available on our main website). This means the\nworkspace depends on the choice of the Tool Reference Frame (TRF).", "source": "meca500_programming_manual", "chunk_index": 338, "length": 268, "hash": "da3fda9d5b2505df2f50a2cb12d1eedc"}
{"id": "meca500_programming_manual_339", "text": "Complicating matters further, as discussed in the preceding section, a given end-effector pose\ncan generally correspond to eight distinct robot postures (see Figure 5). Thus, the Cartesian\nworkspace of a six-axis robot is the union of eight workspace subsets, each corresponding to\none of these postures. While these subsets share overlapping regions, there are also areas", "source": "meca500_programming_manual", "chunk_index": 339, "length": 372, "hash": "f55e3fabc2aa9f85337ff6b8fbc46ce4"}
{"id": "meca500_programming_manual_340", "text": "Complicating matters further, as discussed in the preceding section, a given end-effector pose\ncan generally correspond to eight distinct robot postures (see Figure 5). Thus, the Cartesian\nworkspace of a six-axis robot is the union of eight workspace subsets, each corresponding to\none of these postures. While these subsets share overlapping regions, there are also areas", "source": "meca500_programming_manual", "chunk_index": 340, "length": 372, "hash": "f55e3fabc2aa9f85337ff6b8fbc46ce4"}
{"id": "meca500_programming_manual_341", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 341, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_342", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 342, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_343", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 343, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_344", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 344, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_345", "text": "exclusive to a a single subset \u2014 poses that are accessible in only one posture due to joint\nlimits. To fully exploit the robot\u2019s workspace, it is often necessary to transition between\nthese subsets. These transitions involve singularities, which can pose challenges when the\nrobot\u2019s end-effector is required to follow a specific Cartesian path.", "source": "meca500_programming_manual", "chunk_index": 345, "length": 344, "hash": "30763d844467a52742a1094e6003ee65"}
{"id": "meca500_programming_manual_346", "text": "exclusive to a a single subset \u2014 poses that are accessible in only one posture due to joint\nlimits. To fully exploit the robot\u2019s workspace, it is often necessary to transition between\nthese subsets. These transitions involve singularities, which can pose challenges when the\nrobot\u2019s end-effector is required to follow a specific Cartesian path.", "source": "meca500_programming_manual", "chunk_index": 346, "length": 344, "hash": "30763d844467a52742a1094e6003ee65"}
{"id": "meca500_programming_manual_347", "text": "Every six-axis industrial robot arm encounters singularities (refer to our tutorial on\nsingularities). However, a notable advantage of six-axis robots like ours is that the axes\nof the last three joints intersect at a single point \u2014 the center of the robot\u2019s wrist. This\ndesign makes these singularities straightforward to describe geometrically (see Figure 8).\nAs a result, determining whether a robot posture is near a singularity is significantly easier\nfor our robots compared to other designs.", "source": "meca500_programming_manual", "chunk_index": 347, "length": 498, "hash": "773d61227d91dc800274caa71eb500de"}
{"id": "meca500_programming_manual_348", "text": "Every six-axis industrial robot arm encounters singularities (refer to our tutorial on\nsingularities). However, a notable advantage of six-axis robots like ours is that the axes\nof the last three joints intersect at a single point \u2014 the center of the robot\u2019s wrist. This\ndesign makes these singularities straightforward to describe geometrically (see Figure 8).\nAs a result, determining whether a robot posture is near a singularity is significantly easier\nfor our robots compared to other designs.", "source": "meca500_programming_manual", "chunk_index": 348, "length": 498, "hash": "773d61227d91dc800274caa71eb500de"}
{"id": "meca500_programming_manual_349", "text": "In a singular robot posture, some of the joint set solutions corresponding to the pose of the\nTRF may coincide, or there may be infinitely many joint sets. The problem with singularities\nis that at a singular robot posture, the robot\u2019s end-effector cannot move in certain directions.\nThis is a physical blockage, not a controller problem. Thus, singularities are one type of\nworkspace boundary (the other type occurs when a joint is at its limit, or when two links\ninterfere mechanically).", "source": "meca500_programming_manual", "chunk_index": 349, "length": 489, "hash": "90e13345919031b117050ab03c233b1c"}
{"id": "meca500_programming_manual_350", "text": "In a singular robot posture, some of the joint set solutions corresponding to the pose of the\nTRF may coincide, or there may be infinitely many joint sets. The problem with singularities\nis that at a singular robot posture, the robot\u2019s end-effector cannot move in certain directions.\nThis is a physical blockage, not a controller problem. Thus, singularities are one type of", "source": "meca500_programming_manual", "chunk_index": 350, "length": 374, "hash": "1069a031487da2005b1bacb525c58806"}
{"id": "meca500_programming_manual_351", "text": "workspace boundary (the other type occurs when a joint is at its limit, or when two links\ninterfere mechanically).", "source": "meca500_programming_manual", "chunk_index": 351, "length": 114, "hash": "cb4eb4fc7a46ca4191b4448b31a278d3"}
{"id": "meca500_programming_manual_352", "text": "Take the Meca500, for example, at its zero robot posture (Figure 1). At this robot posture, the\nend-effector cannot be moved laterally (i.e., parallel to the y axis of the BRF); it is physically\nblocked. In order to move in that direction, it would need to rotate joints 4 and 6 a quarter of\nturn in opposite directions first. Thus, singularities are not some kind of purely mathematical\nproblem. They represent actual physical limits.", "source": "meca500_programming_manual", "chunk_index": 352, "length": 435, "hash": "656e2e09f298effa40db11b28e5662fa"}
{"id": "meca500_programming_manual_353", "text": "Take the Meca500, for example, at its zero robot posture (Figure 1). At this robot posture, the\nend-effector cannot be moved laterally (i.e., parallel to the y axis of the BRF); it is physically\nblocked. In order to move in that direction, it would need to rotate joints 4 and 6 a quarter of\nturn in opposite directions first. Thus, singularities are not some kind of purely mathematical\nproblem. They represent actual physical limits.", "source": "meca500_programming_manual", "chunk_index": 353, "length": 435, "hash": "656e2e09f298effa40db11b28e5662fa"}
{"id": "meca500_programming_manual_354", "text": "There are three types of singular robot positions, and these correspond to the conditions\nunder which the configuration parameters cs, ce, and cw are not defined. The most common\nsingular robot posture is called a wrist singularity and occurs when \u03b85 = 0\u00b0 (Figure 8h). In\nthis singularity, joints 4 and 6 can rotate in opposite directions at equal velocities while the\nend-effector remains stationary. You will run into this singularity frequently. The second\ntype of singularity is called an elbow singularity (Figure 8e). It occurs when the arm is fully\nstretched (i.e., when the wrist center is in one plane with the axes of joints 2 and 3). In the\nMeca500, this singularity occurs when \u03b83 = \u2212arctan(60/19) \u2248 \u221272.43\u00b0. You will run into this\nsingularity when you try to reach poses that are too far from the robot base. The third type\nof singularity is called a shoulder singularity (Figure 8b). It occurs when the center of the\nrobot\u2019s wrist lies on the axis of joint 1. You will run into this singularity when you work too\nclose to the axis of joint 1.", "source": "meca500_programming_manual", "chunk_index": 354, "length": 1056, "hash": "77ac551fb719e6bcf5b38c580687fcc8"}
{"id": "meca500_programming_manual_355", "text": "There are three types of singular robot positions, and these correspond to the conditions\nunder which the configuration parameters c", "source": "meca500_programming_manual", "chunk_index": 355, "length": 132, "hash": "23f410b9e9dcce3c840faa155b65b404"}
{"id": "meca500_programming_manual_356", "text": "are not defined. The most common\nsingular robot posture is called a wrist singularity and occurs when \u03b8", "source": "meca500_programming_manual", "chunk_index": 356, "length": 103, "hash": "1bd5680790b48646385db70b4775dfe5"}
{"id": "meca500_programming_manual_357", "text": "= 0\u00b0 (Figure 8h). In\nthis singularity, joints 4 and 6 can rotate in opposite directions at equal velocities while the\nend-effector remains stationary. You will run into this singularity frequently. The second\ntype of singularity is called an elbow singularity (Figure 8e). It occurs when the arm is fully\nstretched (i.e., when the wrist center is in one plane with the axes of joints 2 and 3). In the\nMeca500, this singularity occurs when \u03b8", "source": "meca500_programming_manual", "chunk_index": 357, "length": 440, "hash": "9ac76e341df5f4a77294dd954a6040ef"}
{"id": "meca500_programming_manual_358", "text": "= \u2212arctan(60/19) \u2248 \u221272.43\u00b0. You will run into this\nsingularity when you try to reach poses that are too far from the robot base. The third type", "source": "meca500_programming_manual", "chunk_index": 358, "length": 143, "hash": "e39b4ee4f0b8e6743b3f310ea24f0c58"}
{"id": "meca500_programming_manual_359", "text": "of singularity is called a shoulder singularity (Figure 8b). It occurs when the center of the\nrobot\u2019s wrist lies on the axis of joint 1. You will run into this singularity when you work too\nclose to the axis of joint 1.", "source": "meca500_programming_manual", "chunk_index": 359, "length": 219, "hash": "dd6084fd3c1804eb14d202376e7e069b"}
{"id": "meca500_programming_manual_360", "text": "Crossing singularities with linear Cartesian-space movements", "source": "meca500_programming_manual", "chunk_index": 360, "length": 60, "hash": "34a42a77fadc00a5283cdee37c35593c"}
{"id": "meca500_programming_manual_361", "text": "Crossing singularities with linear Cartesian-space movements", "source": "meca500_programming_manual", "chunk_index": 361, "length": 60, "hash": "34a42a77fadc00a5283cdee37c35593c"}
{"id": "meca500_programming_manual_362", "text": "Although singularities can be a nuisance when controlling the robot in Cartesian space and\nshould usually be avoided in production mode, we have made it possible to cross them to\nfacilitate programming our robots. With the release of firmware 9.1, the Meca500 can start\nat or pass through wrist and shoulder singularities, while executing any MoveLin* command,\nor end at any singularity while executing a MoveLin* or MovePose (page 147) command.\nFurthermore, the passage respects the posture configuration selection settings (Figure 9).\nFigure 10 illustrates how this feature makes it possible to follow longer linear paths. In that", "source": "meca500_programming_manual", "chunk_index": 362, "length": 632, "hash": "1901ae3106da5b2eade291fd1618748d"}
{"id": "meca500_programming_manual_363", "text": "singularities can be a nuisance when controlling the robot in Cartesian space and\nshould usually be avoided in production mode", "source": "meca500_programming_manual", "chunk_index": 363, "length": 126, "hash": "39d83f19d6644e6e5f1d58cdb80ab696"}
{"id": "meca500_programming_manual_364", "text": ", we have made it possible to cross them to\nfacilitate programming our robots. With the release of firmware 9.1, the Meca500 can start", "source": "meca500_programming_manual", "chunk_index": 364, "length": 134, "hash": "2f63e4be5410f194aa95337896758d17"}
{"id": "meca500_programming_manual_365", "text": "at or pass through wrist and shoulder singularities, while executing any MoveLin* command,\nor end at any singularity while executing a MoveLin* or", "source": "meca500_programming_manual", "chunk_index": 365, "length": 146, "hash": "df999183df260c5ed2eedc409fc86156"}
{"id": "meca500_programming_manual_366", "text": "(page 147) command.\nFurthermore, the passage respects the posture configuration selection settings (Figure 9).\nFigure 10 illustrates how this feature makes it possible to follow longer linear paths. In that", "source": "meca500_programming_manual", "chunk_index": 366, "length": 206, "hash": "6bf5096cf58490310f31aaee9603ee0e"}
{"id": "meca500_programming_manual_367", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 367, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_368", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 368, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_369", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 369, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_370", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 370, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_371", "text": "figure, we start from an elbow singularity, pass through a wrist singularity, then through a\nshoulder singularity, and then end at another elbow singularity, all with a single MoveLin*\ncommand, and in \u201cAutoConf\u201d.", "source": "meca500_programming_manual", "chunk_index": 371, "length": 212, "hash": "7bfa19d8de0820e83e5e7e94a77a7081"}
{"id": "meca500_programming_manual_372", "text": "figure, we start from an elbow singularity, pass through a wrist singularity, then through a\nshoulder singularity, and then end at another elbow singularity, all with a single MoveLin*\ncommand, and in \u201cAutoConf\u201d.", "source": "meca500_programming_manual", "chunk_index": 372, "length": 212, "hash": "7bfa19d8de0820e83e5e7e94a77a7081"}
{"id": "meca500_programming_manual_373", "text": "Figure 10: By crossing singularities, the Meca500 can execute longer linear movements", "source": "meca500_programming_manual", "chunk_index": 373, "length": 85, "hash": "85c5bf0db26c138245d8519cb0c74c2f"}
{"id": "meca500_programming_manual_374", "text": "Figure 10: By crossing singularities, the Meca500 can execute longer linear movements", "source": "meca500_programming_manual", "chunk_index": 374, "length": 85, "hash": "85c5bf0db26c138245d8519cb0c74c2f"}
{"id": "meca500_programming_manual_375", "text": "There are two possible situations when crossing a wrist singularity. Consider Figure 12a,\nwhere \u201cAutoConf\u201d is enabled, the robot starts from robot position A, passes without any\ninterruption through the singular configuration Z1 (where all joints are at zero degrees) and\ngoes to robot position B, all with a single MoveLin* command.\nIn the process, the robot\nchanges the posture parameter cw from 1 to \u22121. However, if you execute SetConf(1,1,1)\n(page 157), then request the robot to move with MoveLin* to the end-effector pose B, starting\nfrom robot position A, the robot will refuse the motion, since that would require joint 4 to\nrotate 180\u00b0 or \u2212180\u00b0 when reaching robot position Z1. This is impossible as the range of\njoint 4 is \u00b1170\u00b0.", "source": "meca500_programming_manual", "chunk_index": 375, "length": 739, "hash": "d1d492e669895685cd1cd2a82b66f05c"}
{"id": "meca500_programming_manual_376", "text": "There are two possible situations when crossing a wrist singularity. Consider Figure 12a,\nwhere \u201cAutoConf\u201d is enabled, the robot starts from robot position A, passes without any\ninterruption through the singular configuration Z1 (where all joints are at zero degrees) and\ngoes to robot position B, all with a single MoveLin* command.\nIn the process, the robot\nchanges the posture parameter c", "source": "meca500_programming_manual", "chunk_index": 376, "length": 391, "hash": "c9a48282e5274b4f1576a568bb27d102"}
{"id": "meca500_programming_manual_377", "text": "from 1 to \u22121. However, if you execute", "source": "meca500_programming_manual", "chunk_index": 377, "length": 37, "hash": "b92eb9eabaae0a5f0ba581310c0f6de5"}
{"id": "meca500_programming_manual_378", "text": "(page 157), then request the robot to move with MoveLin* to the end-effector pose B, starting\nfrom robot position A, the robot will refuse the motion, since that would require joint 4 to\nrotate 180\u00b0 or \u2212180\u00b0 when reaching robot position Z1. This is impossible as the range of\njoint 4 is \u00b1170\u00b0.", "source": "meca500_programming_manual", "chunk_index": 378, "length": 293, "hash": "5434d3c19f3fb9b60db62c37315a84f9"}
{"id": "meca500_programming_manual_379", "text": "The following video illustrates the examples described above:", "source": "meca500_programming_manual", "chunk_index": 379, "length": 61, "hash": "82e06b6803a07fc6b193fb9bbda38d03"}
{"id": "meca500_programming_manual_380", "text": "The following video illustrates the examples described above:", "source": "meca500_programming_manual", "chunk_index": 380, "length": 61, "hash": "82e06b6803a07fc6b193fb9bbda38d03"}
{"id": "meca500_programming_manual_381", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 381, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_382", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 382, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_383", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 383, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_384", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 384, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_385", "text": "Figure 11: https://youtu.be/MA_tsx0i6DM?rel=0", "source": "meca500_programming_manual", "chunk_index": 385, "length": 45, "hash": "ca22ff3994a8cd61f3825085f5793329"}
{"id": "meca500_programming_manual_386", "text": "Figure 11: https://youtu.be/MA_tsx0i6DM?rel=0", "source": "meca500_programming_manual", "chunk_index": 386, "length": 45, "hash": "ca22ff3994a8cd61f3825085f5793329"}
{"id": "meca500_programming_manual_387", "text": "Similarly, consider Figure 12b, where \u201cAutoConf\u201d is enabled, the robot starts from position C,\npasses without any interruption through the singular configuration Z2 (where \u03b81 = \u03b82 = \u03b83\n= \u03b85 = 0\u00b0, \u03b84 = 90\u00b0, \u03b86 = \u221290\u00b0) and goes to robot position D1, all with a single MoveLin\n(page 141) command. In the process, the robot changes posture < parameter cw from \u22121 to\n1. However, as shown in Figure 12c, if you execute SetConf(1,1,\u22121) (page 157), then request\nthe robot to move to the end-effector pose D1, starting from robot position C, the robot will\nexecute the MoveLin (page 141) command, but when it reaches configuration Z2, joint 4 will\nrotate \u2212180\u00b0 and joint 6 will rotate 180\u00b0, at the same time while the end-effector will remain\nstationary. After that, the robot will continue its linear motion and reach the robot position D2\n(which corresponds to the same pose as D1).", "source": "meca500_programming_manual", "chunk_index": 387, "length": 875, "hash": "b451f99b764f0b92ee25d43af4c54e57"}
{"id": "meca500_programming_manual_388", "text": "Similarly, consider Figure 12b, where \u201cAutoConf\u201d is enabled, the robot starts from position C,\npasses without any interruption through the singular configuration Z2 (where \u03b8", "source": "meca500_programming_manual", "chunk_index": 388, "length": 173, "hash": "7f6081c8e31fd59422dd808dbc6bcff0"}
{"id": "meca500_programming_manual_389", "text": "= \u221290\u00b0) and goes to robot position D1, all with a single", "source": "meca500_programming_manual", "chunk_index": 389, "length": 56, "hash": "847b950ef626f1eab10fd8d0911cb98a"}
{"id": "meca500_programming_manual_390", "text": "(page 141) command. In the process, the robot changes posture < parameter c", "source": "meca500_programming_manual", "chunk_index": 390, "length": 75, "hash": "ffaaba9e632ec4ebdd6a706da68af1dc"}
{"id": "meca500_programming_manual_391", "text": "from \u22121 to\n1. However, as shown in Figure 12c, if you execute", "source": "meca500_programming_manual", "chunk_index": 391, "length": 61, "hash": "676c59d44aa6109b0eeabd461c0b3c8f"}
{"id": "meca500_programming_manual_392", "text": "(page 157), then request\nthe robot to move to the end-effector pose D1, starting from robot position C, the robot will\nexecute the", "source": "meca500_programming_manual", "chunk_index": 392, "length": 130, "hash": "2de956bf403a7126de4ca7994089196f"}
{"id": "meca500_programming_manual_393", "text": "(page 141) command, but when it reaches configuration Z2, joint 4 will\nrotate \u2212180\u00b0 and joint 6 will rotate 180\u00b0, at the same time while the end-effector will remain\nstationary. After that, the robot will continue its linear motion and reach the robot position D2\n(which corresponds to the same pose as D1).", "source": "meca500_programming_manual", "chunk_index": 393, "length": 307, "hash": "2095bb32899c1744673d692f98561e5d"}
{"id": "meca500_programming_manual_394", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 394, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_395", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 395, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_396", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 396, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_397", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 397, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_398", "text": "(a) A\u2194B via Z1, only possible with\nAutoConf(1)", "source": "meca500_programming_manual", "chunk_index": 398, "length": 46, "hash": "d6d7773d62c48186c9f7b2c1928f835d"}
{"id": "meca500_programming_manual_399", "text": "(a) A\u2194B via Z1, only possible with", "source": "meca500_programming_manual", "chunk_index": 399, "length": 34, "hash": "efdb133aaa3a7ec8d6291bde1d44a685"}
{"id": "meca500_programming_manual_400", "text": "(b) C\u2194D1 via Z2, when using\nAutoConf(1)", "source": "meca500_programming_manual", "chunk_index": 400, "length": 39, "hash": "e7bc271b33b50b3553fd40aa1976c760"}
{"id": "meca500_programming_manual_401", "text": "(b) C\u2194D1 via Z2, when using", "source": "meca500_programming_manual", "chunk_index": 401, "length": 27, "hash": "265fd676371471fc69867cc009ae05d4"}
{"id": "meca500_programming_manual_402", "text": "(c) C\u2194D2 via Z2 and stationary re-\norientation, with SetConf(1,1,\u22121)", "source": "meca500_programming_manual", "chunk_index": 402, "length": 68, "hash": "275c770ebdf9203b7e2647e59418401c"}
{"id": "meca500_programming_manual_403", "text": "(c) C\u2194D2 via Z2 and stationary re-\norientation, with SetConf(1,1,\u22121)", "source": "meca500_programming_manual", "chunk_index": 403, "length": 68, "hash": "275c770ebdf9203b7e2647e59418401c"}
{"id": "meca500_programming_manual_404", "text": "Figure 12: Crossing a wrist singularity with SetAutoConf(1) (page 149) or with a desired\nposture configuration", "source": "meca500_programming_manual", "chunk_index": 404, "length": 110, "hash": "005a3535770d27f753f53ec6bc66c531"}
{"id": "meca500_programming_manual_405", "text": "Figure 12: Crossing a wrist singularity with", "source": "meca500_programming_manual", "chunk_index": 405, "length": 44, "hash": "b13f338ac28571171179af14262a0e29"}
{"id": "meca500_programming_manual_406", "text": "(page 149) or with a desired\nposture configuration", "source": "meca500_programming_manual", "chunk_index": 406, "length": 50, "hash": "f6912599ee870a2973ab7d747df67ab2"}
{"id": "meca500_programming_manual_407", "text": "In contrast, since shoulder singularities are much less frequent, yet much more complex\nto handle, the robot can currently cross them only in \u201cAutoConf\u201d. More precisely, when\nexecuting a linear move, the robot will never stop at a shoulder singularity to reorient its\njoints 1, 4 and 6 while keeping the end-effector stationary. Thus, the motion sequence\nshown in Figure 13a cannot be executed with a single MoveLin* command, whatever the\nstate of posture configuration selection. However, in \u201cAutoConf\u201d, you can cross a shoulder\nsingularity, as shown in Figure 13b. To experiment with shoulder singularities, simply\nexecute SetTRF(0,0,\u221270,0,0,0) (page 179), to bring the TCP at the wrist center, then\nSetWRF(0,0,0,0,0,0) (page 181), and then bring the TCP to a position where its coordinates\nx and y are zero.", "source": "meca500_programming_manual", "chunk_index": 407, "length": 810, "hash": "5cd8facd4c707bfebcfbf99bab75a71c"}
{"id": "meca500_programming_manual_408", "text": "In contrast, since shoulder singularities are much less frequent, yet much more complex\nto handle, the robot can currently cross them only in \u201cAutoConf\u201d. More precisely, when\nexecuting a linear move, the robot will never stop at a shoulder singularity to reorient its\njoints 1, 4 and 6 while keeping the end-effector stationary. Thus, the motion sequence\nshown in Figure 13a cannot be executed with a single MoveLin* command, whatever the\nstate of posture configuration selection. However, in \u201cAutoConf\u201d, you can cross a shoulder\nsingularity, as shown in Figure 13b. To experiment with shoulder singularities, simply\nexecute", "source": "meca500_programming_manual", "chunk_index": 408, "length": 624, "hash": "15b0f1ec6194bbdc33fe0166b88e076b"}
{"id": "meca500_programming_manual_409", "text": "SetTRF(0,0,\u221270,0,0,0)", "source": "meca500_programming_manual", "chunk_index": 409, "length": 21, "hash": "b74af6cc96e856a2cca030c85cb09e34"}
{"id": "meca500_programming_manual_410", "text": "(page 179), to bring the TCP at the wrist center, then", "source": "meca500_programming_manual", "chunk_index": 410, "length": 54, "hash": "c628dd72aad66e39615b307b84ae063e"}
{"id": "meca500_programming_manual_411", "text": "(page 181), and then bring the TCP to a position where its coordinates", "source": "meca500_programming_manual", "chunk_index": 411, "length": 70, "hash": "e910db313002ceed4129f61010d00e1b"}
{"id": "meca500_programming_manual_412", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 412, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_413", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 413, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_414", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 414, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_415", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 415, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_416", "text": "(a) Impossible sequence with a single MoveLin", "source": "meca500_programming_manual", "chunk_index": 416, "length": 45, "hash": "9daebc7b8d0595030102a35a1fa200b1"}
{"id": "meca500_programming_manual_417", "text": "(a) Impossible sequence with a single MoveLin", "source": "meca500_programming_manual", "chunk_index": 417, "length": 45, "hash": "9daebc7b8d0595030102a35a1fa200b1"}
{"id": "meca500_programming_manual_418", "text": "(b) I\u2194J via H, with AutoConf(1)", "source": "meca500_programming_manual", "chunk_index": 418, "length": 31, "hash": "2e5c529f7fa935600a8aec25a55af629"}
{"id": "meca500_programming_manual_419", "text": "(b) I\u2194J via H, with AutoConf(1)", "source": "meca500_programming_manual", "chunk_index": 419, "length": 31, "hash": "2e5c529f7fa935600a8aec25a55af629"}
{"id": "meca500_programming_manual_420", "text": "Figure 13: Crossing a shoulder singularity can only be done with SetAutoConf(1) (page 149)\nand implies a change of the posture parameter cs", "source": "meca500_programming_manual", "chunk_index": 420, "length": 139, "hash": "7dc72939c3eb74f14fc34f9bce80c700"}
{"id": "meca500_programming_manual_421", "text": "Figure 13: Crossing a shoulder singularity can only be done with", "source": "meca500_programming_manual", "chunk_index": 421, "length": 64, "hash": "86ab860829f7d987fc06f93e197de6b2"}
{"id": "meca500_programming_manual_422", "text": "(page 149)\nand implies a change of the posture parameter c", "source": "meca500_programming_manual", "chunk_index": 422, "length": 58, "hash": "4c013fbb19b1298d357bca20573ec862"}
{"id": "meca500_programming_manual_423", "text": "Passing exactly through singularities could be beneficial for some applications, but you must\nfully understand the concept. Otherwise, you might end-up with highly suboptimal robot\nmotions. For example, consider the motion shown in Figure 13b. If you try to follow the same\nlinear path, but one micrometer closer to the z axis of the WRF, joints 4 and 6, or joints 1, 4 and\n6, will rotate very fast while the end-effector\u2019s speed will be significantly reduced, in a motion\nsimilar to what is shown in Figure 13a. Indeed, passing through or close to singularities often\nleads to longer cycle times, and should be avoided in production mode.", "source": "meca500_programming_manual", "chunk_index": 423, "length": 639, "hash": "29cfe9c6fde80968453cb496372bd4d4"}
{"id": "meca500_programming_manual_424", "text": "Passing exactly through singularities could be beneficial for some applications, but you must\nfully understand the concept. Otherwise, you might end-up with highly suboptimal robot\nmotions. For example, consider the motion shown in Figure 13b. If you try to follow the same\nlinear path, but one micrometer closer to the z axis of the WRF, joints 4 and 6, or joints 1, 4 and\n6, will rotate very fast while the end-effector\u2019s speed will be significantly reduced, in a motion\nsimilar to what is shown in Figure 13a. Indeed, passing through or close to singularities often\nleads to longer cycle times, and should be avoided in production mode.", "source": "meca500_programming_manual", "chunk_index": 424, "length": 639, "hash": "29cfe9c6fde80968453cb496372bd4d4"}
{"id": "meca500_programming_manual_425", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 425, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_426", "text": "Configurations, singularities and workspace", "source": "meca500_programming_manual", "chunk_index": 426, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "meca500_programming_manual_427", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 427, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_428", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 428, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_429", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 429, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_430", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 430, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_431", "text": "At power-up, the robot knows the approximate angle of each of its joints, with a couple of\ndegrees of uncertainty. Each motor must make one full revolution to accurately find the\nexact joint angles. This motion is the essential part of a procedure called homing.", "source": "meca500_programming_manual", "chunk_index": 431, "length": 262, "hash": "432299236b8851b348309d9aaaef4a93"}
{"id": "meca500_programming_manual_432", "text": "At power-up, the robot knows the approximate angle of each of its joints, with a couple of\ndegrees of uncertainty. Each motor must make one full revolution to accurately find the\nexact joint angles. This motion is the essential part of a procedure called homing.", "source": "meca500_programming_manual", "chunk_index": 432, "length": 262, "hash": "432299236b8851b348309d9aaaef4a93"}
{"id": "meca500_programming_manual_433", "text": "During homing, joints too close to a physical limit first rotate slightly away. Then, all joints\nrotate simultaneously in the positive direction: 3.6\u00b0 for joints 1, 2, and 3, 7.2\u00b0 for joint 4,\n10.8\u00b0 for joint 5, and 12\u00b0 for joint 6. Finally, they return to their initial angles. The\nentire sequence lasts three seconds. Make sure there is nothing that restricts these joint\nmovements, or the homing process will fail. Homing will also fail if any of the robot joints\nare outside their user-defined limits (SetJointLimits (page 203)), if the work zone has been\nbreached (SetWorkZoneLimits (page 305), SetWorkZoneCfg (page 303)) or if a collision has\nbeen software detected (SetCollisionCfg (page 301)).", "source": "meca500_programming_manual", "chunk_index": 433, "length": 701, "hash": "2f7349025f21815a131457cfbb2e2142"}
{"id": "meca500_programming_manual_434", "text": "During homing, joints too close to a physical limit first rotate slightly away. Then, all joints\nrotate simultaneously in the positive direction: 3.6\u00b0 for joints 1, 2, and 3, 7.2\u00b0 for joint 4,\n10.8\u00b0 for joint 5, and 12\u00b0 for joint 6. Finally, they return to their initial angles. The\nentire sequence lasts three seconds. Make sure there is nothing that restricts these joint\nmovements, or the homing process will fail. Homing will also fail if any of the robot joints\nare outside their user-defined limits (", "source": "meca500_programming_manual", "chunk_index": 434, "length": 506, "hash": "c01b4b2a1c205b6f3f19a014dcfbb5c1"}
{"id": "meca500_programming_manual_435", "text": "(page 203)), if the work zone has been\nbreached (", "source": "meca500_programming_manual", "chunk_index": 435, "length": 49, "hash": "a2905437782990c1f3eb2387ddc82fbc"}
{"id": "meca500_programming_manual_436", "text": "(page 303)) or if a collision has", "source": "meca500_programming_manual", "chunk_index": 436, "length": 33, "hash": "0069b97e162f115a04f0afa8b3a480b1"}
{"id": "meca500_programming_manual_437", "text": "been software detected (", "source": "meca500_programming_manual", "chunk_index": 437, "length": 24, "hash": "b64836a120c0d0ded4f788223f205dc1"}
{"id": "meca500_programming_manual_438", "text": "Finally, if your Meca500 is equipped with a MEGP 25* gripper, the robot controller will\nautomatically detect it and home it in parallel with the robot joints, by fully opening, then\nfully closing the gripper. Make sure there is nothing that restricts the full range of motion of\nthe gripper, except its fingers, while it is being homed.", "source": "meca500_programming_manual", "chunk_index": 438, "length": 336, "hash": "2ab097547351ffa403fc54ea2fc1ae38"}
{"id": "meca500_programming_manual_439", "text": "Finally, if your Meca500 is equipped with a MEGP 25* gripper, the robot controller will\nautomatically detect it and home it in parallel with the robot joints, by fully opening, then\nfully closing the gripper. Make sure there is nothing that restricts the full range of motion of\nthe gripper, except its fingers, while it is being homed.", "source": "meca500_programming_manual", "chunk_index": 439, "length": 336, "hash": "2ab097547351ffa403fc54ea2fc1ae38"}
{"id": "meca500_programming_manual_440", "text": "The range of the absolute encoder of joint 6 is only \u00b1420\u00b0. Therefore, you must always\nrotate joint 6 within that range before deactivating the robot. Failure to do so may lead\nto an offset of \u00b1120\u00b0 in joint 6. If this happens, unpower the robot and disconnect your\ntooling. Then, power up and activate the robot, perform its homing, and zero joint 6. If\nthe screw on the robot\u2019s flange is not as in Figure 1, then rotate joint 6 to +720\u00b0, and\ndeactivate the robot. Next, reactivate it with the command ActivateRobot(1) (page 184),\nwhich reinitializes the drives, then home the robot, and zero joint 6 again. Repeat one\nmore time if the problem is not solved.", "source": "meca500_programming_manual", "chunk_index": 440, "length": 659, "hash": "e9bbe1d0fcde45a3a4b7cdf29828cc6b"}
{"id": "meca500_programming_manual_441", "text": "The range of the absolute encoder of joint 6 is only \u00b1420\u00b0.", "source": "meca500_programming_manual", "chunk_index": 441, "length": 59, "hash": "781e2dbec824c1efee02e98530744409"}
{"id": "meca500_programming_manual_442", "text": "Therefore, you must always\nrotate joint 6 within that range before deactivating the robot.", "source": "meca500_programming_manual", "chunk_index": 442, "length": 90, "hash": "bd56434f6e11513dec493a2b2f0e6d89"}
{"id": "meca500_programming_manual_443", "text": "Failure to do so may lead\nto an offset of \u00b1120\u00b0 in joint 6. If this happens, unpower the robot and disconnect your\ntooling. Then, power up and activate the robot, perform its homing, and zero joint 6. If\nthe screw on the robot\u2019s flange is not as in Figure 1, then rotate joint 6 to +720\u00b0, and\ndeactivate the robot. Next, reactivate it with the command", "source": "meca500_programming_manual", "chunk_index": 443, "length": 351, "hash": "1a5cb4d06462116fe89eb7b292ddd8ed"}
{"id": "meca500_programming_manual_444", "text": "(page 184),\nwhich reinitializes the drives, then home the robot, and zero joint 6 again. Repeat one\nmore time if the problem is not solved.", "source": "meca500_programming_manual", "chunk_index": 444, "length": 139, "hash": "596fb7c31aed05b4b192e94c70208320"}
{"id": "meca500_programming_manual_445", "text": "Once the robot is homed, you do not need to home it again, even if you deactivate it, and then\nreactivate it, unless you use the optional argument 1, i.e., ActivateRobot(1) (page 184). In\nMeca500 R4, after an E-Stop has been reset, you do not need to run the homing procedure\nagain, unless the robot is equipped with an MEGP 25* gripper (in that case, only the gripper\nis homed actually). If you call the homing process, but homing was not needed, the robot\nwill simply ignore the command (though it will still respond with the [2002][Homing done.]\nIf homing was needed only for the MEGP 25* gripper, the gripper fingers will\nmessage).\nmove, but not the robot.", "source": "meca500_programming_manual", "chunk_index": 445, "length": 660, "hash": "c41c8a5a0d76e6f72907e7c5e0ad58fa"}
{"id": "meca500_programming_manual_446", "text": "Once the robot is homed, you do not need to home it again, even if you deactivate it, and then\nreactivate it, unless you use the optional argument 1, i.e.,", "source": "meca500_programming_manual", "chunk_index": 446, "length": 155, "hash": "1934e9898fe6d5cbf523a94d1eae17a0"}
{"id": "meca500_programming_manual_447", "text": "(page 184). In\nMeca500 R4, after an E-Stop has been reset, you do not need to run the homing procedure\nagain, unless the robot is equipped with an MEGP 25* gripper (in that case, only the gripper\nis homed actually). If you call the homing process, but homing was not needed, the robot\nwill simply ignore the command (though it will still respond with the [2002][Homing done.]\nIf homing was needed only for the MEGP 25* gripper, the gripper fingers will\nmessage).\nmove, but not the robot.", "source": "meca500_programming_manual", "chunk_index": 447, "length": 487, "hash": "9c36e549a920479d6529612a5d4645a9"}
{"id": "meca500_programming_manual_448", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 448, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_449", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 449, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_450", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 450, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_451", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 451, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_452", "text": "Once activated, if the robot is outside the user-defined joint limits (SetJointLimits (page 203)),\nif the work zone has been breached (SetWorkZoneLimits (page 305), SetWorkZoneCfg\n(page 303)), if a collision has been detected (SetCollisionCfg (page 301)), or if the robot\nis too close to an obstacle, it may be necessary to move the robot to a secure position even\nif these conditions prevent activating the robot or resuming motion. We have implemented\nthe recovery mode (see the command SetRecoveryMode (page 211)) for these situations. In\nthis mode, virtually all motion commands are permitted without restrictions such as software\njoint limits, work zone boundaries, self-collision avoidance, or torque overload protection, as\nlong as the robot is activated. However, joint speeds are significantly reduced.", "source": "meca500_programming_manual", "chunk_index": 452, "length": 811, "hash": "f954ce3227aff80842f60114bb35ea27"}
{"id": "meca500_programming_manual_453", "text": "Once activated, if the robot is outside the user-defined joint limits (", "source": "meca500_programming_manual", "chunk_index": 453, "length": 71, "hash": "667dec4f961c2feaac86f4282e5c18f8"}
{"id": "meca500_programming_manual_454", "text": "(page 203)),\nif the work zone has been breached (", "source": "meca500_programming_manual", "chunk_index": 454, "length": 49, "hash": "ae1869f704a18c988e6bad5cb6c1f081"}
{"id": "meca500_programming_manual_455", "text": "(page 303)), if a collision has been detected (", "source": "meca500_programming_manual", "chunk_index": 455, "length": 47, "hash": "d4d4767d500073283d24fdde2d4f0eea"}
{"id": "meca500_programming_manual_456", "text": "(page 301)), or if the robot\nis too close to an obstacle, it may be necessary to move the robot to a secure position even\nif these conditions prevent activating the robot or resuming motion. We have implemented\nthe recovery mode (see the command", "source": "meca500_programming_manual", "chunk_index": 456, "length": 245, "hash": "78e6e6670bf474dd3745be51196f6a60"}
{"id": "meca500_programming_manual_457", "text": "(page 211)) for these situations. In\nthis mode, virtually all motion commands are permitted without restrictions such as software\njoint limits, work zone boundaries, self-collision avoidance, or torque overload protection, as\nlong as the robot is activated. However,", "source": "meca500_programming_manual", "chunk_index": 457, "length": 266, "hash": "351454db61b01d6b1c96509ad64c3f66"}
{"id": "meca500_programming_manual_458", "text": "joint speeds are significantly reduced", "source": "meca500_programming_manual", "chunk_index": 458, "length": 38, "hash": "167bb5fb1663a8a00c30217ead49db73"}
{"id": "meca500_programming_manual_459", "text": "Enabling the recovery mode will significantly limit the joint and Cartesian velocities and\naccelerations, for safety reasons.", "source": "meca500_programming_manual", "chunk_index": 459, "length": 125, "hash": "09bfbaa49decc068e3a39d0925bb6068"}
{"id": "meca500_programming_manual_460", "text": "Enabling the recovery mode will significantly limit the joint and Cartesian velocities and\naccelerations, for safety reasons.", "source": "meca500_programming_manual", "chunk_index": 460, "length": 125, "hash": "09bfbaa49decc068e3a39d0925bb6068"}
{"id": "meca500_programming_manual_461", "text": "Industrial robots are most often controlled in position mode (page 358), using two groups of\ncommands:", "source": "meca500_programming_manual", "chunk_index": 461, "length": 102, "hash": "99b046b2bd3f0a410bed717360698a57"}
{"id": "meca500_programming_manual_462", "text": "Industrial robots are most often controlled in", "source": "meca500_programming_manual", "chunk_index": 462, "length": 46, "hash": "a73cc55b73e8a1ec2c2cbc84cc80f4e7"}
{"id": "meca500_programming_manual_463", "text": "(page 358), using two groups of\ncommands:", "source": "meca500_programming_manual", "chunk_index": 463, "length": 41, "hash": "e2de3f954ff42e45f154ec3f0df1896c"}
{"id": "meca500_programming_manual_464", "text": "\u2022 With Cartesian-space (page 357) commands (MoveLin (page 141), MoveLinRelWrf\n(page 144), MoveLinRelTrf (page 143)), the robot is instructed to move its end-effector\ntowards a target pose along a specified Cartesian path. To follow a complex Cartesian\npath, it must be broken down into small linear segments and executed using multiple\nCartesian-space commands. Recall that singularities can pose challenges when using\nCartesian-space commands.", "source": "meca500_programming_manual", "chunk_index": 464, "length": 444, "hash": "c5c4975d968c1e8e8bc0e8ee61d0bde8"}
{"id": "meca500_programming_manual_465", "text": "(page 357) commands (", "source": "meca500_programming_manual", "chunk_index": 465, "length": 21, "hash": "e09acbada1a494122aee3b12cbc4c6eb"}
{"id": "meca500_programming_manual_466", "text": "(page 143)), the robot is instructed to move its end-effector\ntowards a target pose along a specified Cartesian path. To follow a complex Cartesian\npath, it must be broken down into small linear segments and executed using multiple\nCartesian-space commands. Recall that singularities can pose challenges when using\nCartesian-space commands.", "source": "meca500_programming_manual", "chunk_index": 466, "length": 340, "hash": "9f2cd90c95a89a7e53a8a687b8e56195"}
{"id": "meca500_programming_manual_467", "text": "\u2022 with joint-space (page 358) commands (MoveJoints (page 135), MoveJointsRel\n(page 137), MovePose (page 147), MoveJump (page 140)), the robot is instructed \u2014\ndirectly or indirectly \u2014 to move its joints linearly towards a target joint set. Recall\nthat when using joint-space commands, singularities are generally not an issue (except\npossibly for the MovePose (page 147) command).", "source": "meca500_programming_manual", "chunk_index": 467, "length": 379, "hash": "9c2be2a1487bc122e34ed473ac7f85fd"}
{"id": "meca500_programming_manual_468", "text": "(page 358) commands (", "source": "meca500_programming_manual", "chunk_index": 468, "length": 21, "hash": "70862f7ee19cd36c87588216bcb723c7"}
{"id": "meca500_programming_manual_469", "text": "(page 140)), the robot is instructed \u2014\ndirectly or indirectly \u2014 to move its joints linearly towards a target joint set. Recall\nthat when using joint-space commands, singularities are generally not an issue (except\npossibly for the", "source": "meca500_programming_manual", "chunk_index": 469, "length": 230, "hash": "14083fea4b509fed7768a1157c06f1f9"}
{"id": "meca500_programming_manual_470", "text": "(page 147) command).", "source": "meca500_programming_manual", "chunk_index": 470, "length": 20, "hash": "a99ce19c961870bd669d0647bacfdb38"}
{"id": "meca500_programming_manual_471", "text": "Often, the target poses or joint sets act as \u201cvia points,\u201d where the goal is not to reach the\ntarget precisely but simply to pass near it. Blending enables the robot to transition smoothly\nbetween motion segments instead of stopping at the end of each segment and making sharp\nchanges in direction. Blending can be thought of as taking a rounded shortcut.", "source": "meca500_programming_manual", "chunk_index": 471, "length": 355, "hash": "aa1687930ce2b35238828cc8e8d3016f"}
{"id": "meca500_programming_manual_472", "text": "Often, the target poses or joint sets act as \u201cvia points,\u201d where the goal is not to reach the\ntarget precisely but simply to pass near it. Blending enables the robot to transition smoothly", "source": "meca500_programming_manual", "chunk_index": 472, "length": 188, "hash": "52f068e627b65da8d684549fca79cb2e"}
{"id": "meca500_programming_manual_473", "text": "between motion segments instead of stopping at the end of each segment and making sharp\nchanges in direction. Blending can be thought of as taking a rounded shortcut.", "source": "meca500_programming_manual", "chunk_index": 473, "length": 166, "hash": "a5f286bf6d631d4784c4575f26593ae0"}
{"id": "meca500_programming_manual_474", "text": "Blending allows the trajectory planner to maintain the end-effector\u2019s acceleration to a\nminimum between two position-mode joint-space movements or two position-mode Cartesian-\nspace movements. When blending is activated, the trajectory planner will transition between\nthe two paths using a blended curve (Figure 14). The higher the TCP speed, the more rounded\nthe transition will be (the radius of the blending cannot be explicitly controlled, only the\nblending duration is configurable).", "source": "meca500_programming_manual", "chunk_index": 474, "length": 488, "hash": "a2d76c2600a23e8d87f9646e3795f93c"}
{"id": "meca500_programming_manual_475", "text": "Blending allows the trajectory planner to maintain the end-effector\u2019s acceleration to a\nminimum between two position-mode joint-space movements or two position-mode Cartesian-\nspace movements. When blending is activated, the trajectory planner will transition between\nthe two paths using a blended curve (Figure 14).", "source": "meca500_programming_manual", "chunk_index": 475, "length": 316, "hash": "4ca97260005a096fbf04a54f7487e25c"}
{"id": "meca500_programming_manual_476", "text": "The higher the TCP speed, the more rounded\nthe transition will be", "source": "meca500_programming_manual", "chunk_index": 476, "length": 65, "hash": "050f22df87688c81c8f43eeb3cfcd54f"}
{"id": "meca500_programming_manual_477", "text": "(the radius of the blending cannot be explicitly controlled, only the\nblending duration is configurable).", "source": "meca500_programming_manual", "chunk_index": 477, "length": 105, "hash": "b4acfed940fb006c0ef6f27a38eb3ee7"}
{"id": "meca500_programming_manual_478", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 478, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_479", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 479, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_480", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 480, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_481", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 481, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_482", "text": "Figure 14: TCP path for two consecutive linear movements, with and without blending", "source": "meca500_programming_manual", "chunk_index": 482, "length": 83, "hash": "5741eaee15f5c36cf1524575b8db9789"}
{"id": "meca500_programming_manual_483", "text": "Figure 14: TCP path for two consecutive linear movements, with and without blending", "source": "meca500_programming_manual", "chunk_index": 483, "length": 83, "hash": "5741eaee15f5c36cf1524575b8db9789"}
{"id": "meca500_programming_manual_484", "text": "Even if blending is enabled, the robot will come to a full stop after a joint-space movement that\nis followed by a Cartesian-space movement, or vice-versa. When blending is disabled, each\nmotion will begin from a full stop and end in a full stop. Blending is enabled by default. It can\nbe completely disabled or only partially enabled with the SetBlending (page 151) command.", "source": "meca500_programming_manual", "chunk_index": 484, "length": 375, "hash": "275a9c61297cdddfc1d5245388aa6b6b"}
{"id": "meca500_programming_manual_485", "text": "Even if blending is enabled, the robot will come to a full stop after a joint-space movement that\nis followed by a Cartesian-space movement, or vice-versa. When blending is disabled, each\nmotion will begin from a full stop and end in a full stop. Blending is enabled by default. It can\nbe completely disabled or only partially enabled with the", "source": "meca500_programming_manual", "chunk_index": 485, "length": 343, "hash": "4ba14b7303140e5dce98ab0ccda715d5"}
{"id": "meca500_programming_manual_486", "text": "Furthermore, if blending is enabled, the gripper motion commands (MoveGripper (page 326),\nGripperOpen (page 325), GripperClose (page 324)) will not cause the robot to stop between\ntwo position-mode joint-space commands (blending will occur normally). However, the\ngripper motion commands will force the robot to stop when used between two position-mode\nCartesian-space commands. Once the robot has come to a stop, the gripper\u2019s fingers will\nstart moving at the same time as the subsequent Cartesian-space movement. In contrast,\nthe SetValveState (page 340) command will not cause the robot to stop. Blending will occur\nnormally, and the SetValveState (page 340) command will be executed at the beginning of\nthe blending path.", "source": "meca500_programming_manual", "chunk_index": 486, "length": 725, "hash": "89257e20b963d51d14fffdbb3e49407f"}
{"id": "meca500_programming_manual_487", "text": "Furthermore, if blending is enabled, the gripper motion commands (", "source": "meca500_programming_manual", "chunk_index": 487, "length": 66, "hash": "c843ef5fbf2b9adb48ec6393b6035341"}
{"id": "meca500_programming_manual_488", "text": "(page 324)) will not cause the robot to stop between\ntwo position-mode joint-space commands (blending will occur normally). However, the\ngripper motion commands will force the robot to stop when used between two position-mode\nCartesian-space commands. Once the robot has come to a stop, the gripper\u2019s fingers will\nstart moving at the same time as the subsequent Cartesian-space movement. In contrast,\nthe", "source": "meca500_programming_manual", "chunk_index": 488, "length": 404, "hash": "02255ecd0f555df010313090bdf6aa55"}
{"id": "meca500_programming_manual_489", "text": "(page 340) command will not cause the robot to stop. Blending will occur\nnormally, and the", "source": "meca500_programming_manual", "chunk_index": 489, "length": 90, "hash": "063e735f90844025e1e1da1cf337e03a"}
{"id": "meca500_programming_manual_490", "text": "(page 340) command will be executed at the beginning of\nthe blending path.", "source": "meca500_programming_manual", "chunk_index": 490, "length": 74, "hash": "2d1cc8857096a17e524dd9ff74d1c32f"}
{"id": "meca500_programming_manual_491", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 491, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_492", "text": "Key concepts for Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 492, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "meca500_programming_manual_493", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 493, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_494", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 494, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_495", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 495, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_496", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 496, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_497", "text": "As mentioned in the previous section, the conventional method for moving an industrial\nrobot involves either commanding its end-effector to reach a desired pose along a specified\nCartesian path or directing its joints to rotate to a desired joint set. This basic control method\nis called position mode (page 358). If the robot needs to follow a linear path, the Cartesian-\nspace motion commands MoveLin (page 141), MoveLinRelTrf (page 143), and MoveLinRelWrf\n(page 144) should be used. To move the robot\u2019s end-effector to a specific pose (without\nconcern for the path followed by the end-effector) or to rotate the robot\u2019s joints to a given\njoint set or by a specified amount, the joint-space motion commands MovePose (page 147),\nMoveJoints (page 135), or MoveJointsRel (page 137) should be used, respectively.", "source": "meca500_programming_manual", "chunk_index": 497, "length": 810, "hash": "cca618afe85a41169a8dd8b0c675b5fe"}
{"id": "meca500_programming_manual_498", "text": "As mentioned in the previous section, the conventional method for moving an industrial\nrobot involves either commanding its end-effector to reach a desired pose along a specified\nCartesian path or directing its joints to rotate to a desired joint set. This basic control method\nis called", "source": "meca500_programming_manual", "chunk_index": 498, "length": 287, "hash": "02de525d63c9ed77c97a1ccc89394b69"}
{"id": "meca500_programming_manual_499", "text": "(page 358). If the robot needs to follow a linear path, the Cartesian-\nspace motion commands", "source": "meca500_programming_manual", "chunk_index": 499, "length": 92, "hash": "d417e558ffc83cae8a445d87203b0aae"}
{"id": "meca500_programming_manual_500", "text": "(page 144) should be used. To move the robot\u2019s end-effector to a specific pose (without\nconcern for the path followed by the end-effector) or to rotate the robot\u2019s joints to a given\njoint set or by a specified amount, the joint-space motion commands", "source": "meca500_programming_manual", "chunk_index": 500, "length": 249, "hash": "50d271c9e6fca4be06da03ad63bb0b6b"}
{"id": "meca500_programming_manual_501", "text": "(page 137) should be used, respectively.", "source": "meca500_programming_manual", "chunk_index": 501, "length": 40, "hash": "9bbe5a5b784274771936a0833ef41bfe"}
{"id": "meca500_programming_manual_502", "text": "In position mode, with Cartesian-space motion commands,\nit is possible to specify the\nmaximum linear and angular velocities, and the maximum accelerations for the end-effector.\nAlternatively, you can specify the time duration of your movement. However, you cannot\nset a limit on the joint accelerations. Thus, if the robot executes a Cartesian-space motion\ncommand and passes very close to a singular robot posture, even if its end-effector speed\nand accelerations are very small, some joints may rotate at maximum speed (as defined\nby SetJointVelLimit (page 165)) and with maximum acceleration. Similarly, with joint-space\nmotion commands, it is possible to specify the maximum velocity and acceleration of the joints\nor the time duration of the movement. However, it is impossible to limit either the velocity or\nthe acceleration of the robot\u2019s end-effector. Figure 15 summarizes the possible settings for\nthe velocity and acceleration in position mode.", "source": "meca500_programming_manual", "chunk_index": 502, "length": 955, "hash": "ffb87debc94df319113c777046b7a675"}
{"id": "meca500_programming_manual_503", "text": "In position mode, with Cartesian-space motion commands,\nit is possible to specify the\nmaximum linear and angular velocities, and the maximum accelerations for the end-effector.\nAlternatively, you can specify the time duration of your movement. However, you cannot", "source": "meca500_programming_manual", "chunk_index": 503, "length": 263, "hash": "d21e49aac768c783ef76ec80317c2437"}
{"id": "meca500_programming_manual_504", "text": "set a limit on the joint accelerations. Thus, if the robot executes a Cartesian-space motion\ncommand and passes very close to a singular robot posture, even if its end-effector speed\nand accelerations are very small, some joints may rotate at maximum speed (as defined\nby", "source": "meca500_programming_manual", "chunk_index": 504, "length": 271, "hash": "ea173e7e48b967e7b82a05543f6fbd4f"}
{"id": "meca500_programming_manual_505", "text": "(page 165)) and with maximum acceleration. Similarly, with joint-space\nmotion commands, it is possible to specify the maximum velocity and acceleration of the joints\nor the time duration of the movement. However, it is impossible to limit either the velocity or\nthe acceleration of the robot\u2019s end-effector. Figure 15 summarizes the possible settings for\nthe velocity and acceleration in position mode.", "source": "meca500_programming_manual", "chunk_index": 505, "length": 402, "hash": "1e7dae5635124172222683e910a56dee"}
{"id": "meca500_programming_manual_506", "text": "As mentioned, in position mode, you can specify either the desired velocities (SetJointVel\n(page 163) or SetCartLinVel (page 154) and SetCartAngVel (page 153)) or the movement\u2019s\ntime duration (SetMoveDuration (page 167)). This choice is made using the SetMoveMode\n(page 172) command.\nIn velocity-based position mode, the robot attempts to follow the\nspecified velocities without exceeding them while respecting acceleration limits. However,\nportions of the movement may not maintain the exact desired velocities, and the robot\nwill NOT notify you of these deviations.\nIn time-based position mode, you can use\nSetMoveDurationCfg (page 168) to define how the robot should respond if it cannot complete\nthe movement within the specified duration.", "source": "meca500_programming_manual", "chunk_index": 506, "length": 743, "hash": "f9b10ffa4dd0145346d22f05d16f638e"}
{"id": "meca500_programming_manual_507", "text": "As mentioned, in position mode, you can specify either the desired velocities (", "source": "meca500_programming_manual", "chunk_index": 507, "length": 79, "hash": "841c0c53e46507a1d1c78e63d1dbdc22"}
{"id": "meca500_programming_manual_508", "text": "(page 153)) or the movement\u2019s\ntime duration (", "source": "meca500_programming_manual", "chunk_index": 508, "length": 45, "hash": "83010875182bab35209fc8268737eb2e"}
{"id": "meca500_programming_manual_509", "text": "(page 167)). This choice is made using the", "source": "meca500_programming_manual", "chunk_index": 509, "length": 42, "hash": "a48fef53e6a4a299d5deaf2a0f93f0c1"}
{"id": "meca500_programming_manual_510", "text": "(page 172) command.\nIn", "source": "meca500_programming_manual", "chunk_index": 510, "length": 22, "hash": "0aed56d5ab907d30f8ee554674f44df1"}
{"id": "meca500_programming_manual_511", "text": "velocity-based position mode", "source": "meca500_programming_manual", "chunk_index": 511, "length": 28, "hash": "c3e619ba4c927af5346cbc6a00620fe7"}
{"id": "meca500_programming_manual_512", "text": ", the robot attempts to follow the\nspecified velocities without exceeding them while respecting acceleration limits. However,\nportions of the movement may not maintain the exact desired velocities, and the robot\nwill NOT notify you of these deviations.\nIn", "source": "meca500_programming_manual", "chunk_index": 512, "length": 255, "hash": "1699b62c56679f307a82a940a1c7c8e1"}
{"id": "meca500_programming_manual_513", "text": "time-based position mode", "source": "meca500_programming_manual", "chunk_index": 513, "length": 24, "hash": "e370cbfc995bfa6c23819c2b2718fdd6"}
{"id": "meca500_programming_manual_514", "text": "(page 168) to define how the robot should respond if it cannot complete\nthe movement within the specified duration.", "source": "meca500_programming_manual", "chunk_index": 514, "length": 115, "hash": "60718577d3f428d031dd46d8c80cf658"}
{"id": "meca500_programming_manual_515", "text": "There is a second method to control a Mecademic robot, by defining either its end-effector\nvelocity or its joint velocities. This robot control method is called the velocity mode (page 359).\nVelocity mode is designed for advanced applications such as force control, dynamic path\ncorrections, or telemanipulation (for example, the jogging feature in the MecaPortal is\nimplemented using velocity-mode commands).", "source": "meca500_programming_manual", "chunk_index": 515, "length": 409, "hash": "731dbd0eeb0a6418e204502bd8c33e19"}
{"id": "meca500_programming_manual_516", "text": "There is a second method to control a Mecademic robot, by defining either its end-effector\nvelocity or its joint velocities. This robot control method is called the", "source": "meca500_programming_manual", "chunk_index": 516, "length": 164, "hash": "f97ff20320faa386fcd1c31792f0e828"}
{"id": "meca500_programming_manual_517", "text": "(page 359).\nVelocity mode is designed for advanced applications such as force control, dynamic path\ncorrections, or telemanipulation (for example, the jogging feature in the MecaPortal is\nimplemented using velocity-mode commands).", "source": "meca500_programming_manual", "chunk_index": 517, "length": 230, "hash": "e67c4c4125c8d7dda9961e3074016cdd"}
{"id": "meca500_programming_manual_518", "text": "(page 138), MoveLinVelTrf", "source": "meca500_programming_manual", "chunk_index": 518, "length": 25, "hash": "9d71786f6b355c270c7a5e19f0a756b9"}
{"id": "meca500_programming_manual_519", "text": "Controlling the robot in velocity mode requires one of the three velocity-mode motion\n(page 145) or MoveLinVelWrf\ncommands: MoveJointsVel\n(page 146). Note that the effect from a velocity-mode motion command lasts the time specified\nin the SetVelTimeout (page 180) command or until a new velocity-mode command is received.\nThis timeout must be very small (the default value is 0.05 s, and the maximum value 1 s). For\nthe robot to continue moving after this timeout, another velocity-mode command can be sent\nbefore this timeout. This new command will immediately replace the previous command and", "source": "meca500_programming_manual", "chunk_index": 519, "length": 594, "hash": "b9a0b4ffd826e304273cc53ed23e8951"}
{"id": "meca500_programming_manual_520", "text": "Controlling the robot in velocity mode requires one of the three velocity-mode motion\n(page 145) or", "source": "meca500_programming_manual", "chunk_index": 520, "length": 99, "hash": "17ca0eb001b6d0f6a18606b271001054"}
{"id": "meca500_programming_manual_521", "text": "(page 146). Note that the effect from a velocity-mode motion command lasts the time specified", "source": "meca500_programming_manual", "chunk_index": 521, "length": 93, "hash": "8a71f8b1be83d6669db706166f58cee2"}
{"id": "meca500_programming_manual_522", "text": "(page 180) command or until a new velocity-mode command is received.\nThis timeout must be very small (the default value is 0.05 s, and the maximum value 1 s). For\nthe robot to continue moving after this timeout, another velocity-mode command can be sent\nbefore this timeout. This new command will immediately replace the previous command and", "source": "meca500_programming_manual", "chunk_index": 522, "length": 341, "hash": "0a871fadd6ddd6bf1d826b1169d560fb"}
{"id": "meca500_programming_manual_523", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 523, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_524", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 524, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_525", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 525, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_526", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 526, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_527", "text": "restart the timeout. Position-mode and velocity-mode motion commands can be sent to the\nrobot, in any order. However, if the robot is moving in velocity mode, the only commands that\nwill be executed immediately, rather than after the velocity timeout, are other velocity-mode\nmotion commands and SetCheckpoint (page 155), GripperOpen (page 325) and GripperClose\n(page 324) commands.", "source": "meca500_programming_manual", "chunk_index": 527, "length": 382, "hash": "59ccc762dc655d07baab5773d183d746"}
{"id": "meca500_programming_manual_528", "text": "restart the timeout. Position-mode and velocity-mode motion commands can be sent to the\nrobot, in any order. However, if the robot is moving in velocity mode, the only commands that\nwill be executed immediately, rather than after the velocity timeout, are other velocity-mode\nmotion commands and", "source": "meca500_programming_manual", "chunk_index": 528, "length": 295, "hash": "572d935b6c6614283801bd638be22142"}
{"id": "meca500_programming_manual_529", "text": "(page 324) commands.", "source": "meca500_programming_manual", "chunk_index": 529, "length": 20, "hash": "7e404b133da98e351d2f9a6921e1e46b"}
{"id": "meca500_programming_manual_530", "text": "There is a significant difference in the behavior of position- and velocity-mode motion\ncommands. In position mode, if a Cartesian-space motion command cannot be completely\nperformed due to a singularity or a joint limit, the motion will normally not start and a\nmotion error will be raised, that must be reset.", "source": "meca500_programming_manual", "chunk_index": 530, "length": 311, "hash": "9566bdcb1cf6c6e7c29d717d427c33dd"}
{"id": "meca500_programming_manual_531", "text": "There is a significant difference in the behavior of position- and velocity-mode motion\ncommands. In position mode, if a Cartesian-space motion command cannot be completely\nperformed due to a singularity or a joint limit, the motion will normally not start and a\nmotion error will be raised, that must be reset.", "source": "meca500_programming_manual", "chunk_index": 531, "length": 311, "hash": "9566bdcb1cf6c6e7c29d717d427c33dd"}
{"id": "meca500_programming_manual_532", "text": "In velocity mode, if the robot runs into a singularity that cannot be crossed or a joint limit,\nit will simply stop without raising an error. Furthermore, the velocity of the robot\u2019s end-\neffector or of the robot joints is directly controlled, but is subject to the constraint set\nby the SetJointVelLimit (page 165) command. The SetJointVelLimit (page 165) command\naffects the position-mode commands too. See Figure 15 for a complete description of how\nvelocity and acceleration settings affect the two modes.", "source": "meca500_programming_manual", "chunk_index": 532, "length": 509, "hash": "d4c8a025d92ae654ac960349a4feb664"}
{"id": "meca500_programming_manual_533", "text": "In velocity mode, if the robot runs into a singularity that cannot be crossed or a joint limit,\nit will simply stop without raising an error. Furthermore, the velocity of the robot\u2019s end-", "source": "meca500_programming_manual", "chunk_index": 533, "length": 187, "hash": "bcc688df6ed90b75497d1898251cf5e2"}
{"id": "meca500_programming_manual_534", "text": "effector or of the robot joints is directly controlled, but is subject to the constraint set\nby the", "source": "meca500_programming_manual", "chunk_index": 534, "length": 99, "hash": "d787356c463124e54de4c383edc7bbe0"}
{"id": "meca500_programming_manual_535", "text": "(page 165) command. The", "source": "meca500_programming_manual", "chunk_index": 535, "length": 23, "hash": "0c8abe5d703c20fc8a5729b7917bd230"}
{"id": "meca500_programming_manual_536", "text": "(page 165) command\naffects the position-mode commands too. See Figure 15 for a complete description of how\nvelocity and acceleration settings affect the two modes.", "source": "meca500_programming_manual", "chunk_index": 536, "length": 163, "hash": "8e4104678a2e5b8606adc158226a0436"}
{"id": "meca500_programming_manual_537", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 537, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_538", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 538, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_539", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 539, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_540", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 540, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_541", "text": "Figure 15: Settings that influence the robot motion in position and velocity modes. (Note:\nMoveJump (page 140) is always executed in velocity-based position mode)", "source": "meca500_programming_manual", "chunk_index": 541, "length": 162, "hash": "458d7347978279c1fe6c4105f2b2faec"}
{"id": "meca500_programming_manual_542", "text": "Figure 15: Settings that influence the robot motion in position and velocity modes. (Note:", "source": "meca500_programming_manual", "chunk_index": 542, "length": 90, "hash": "37e0b1c5690e151c4da16657bb3d9560"}
{"id": "meca500_programming_manual_543", "text": "(page 140) is always executed in velocity-based position mode)", "source": "meca500_programming_manual", "chunk_index": 543, "length": 62, "hash": "bec2db76d49693b420756613efb8b811"}
{"id": "meca500_programming_manual_544", "text": "The instantaneous command SetTimeScaling (page 215) affects all velocities,\naccelerations and even time durations (including the timeout set with SetVelTimeout\n(page 180) and the pause set with the Delay (page 134) command).", "source": "meca500_programming_manual", "chunk_index": 544, "length": 224, "hash": "e37d0f9a43b921b878ae7b4cdc13a128"}
{"id": "meca500_programming_manual_545", "text": "The instantaneous command", "source": "meca500_programming_manual", "chunk_index": 545, "length": 25, "hash": "609c5104198af4b2201da3377ba57e51"}
{"id": "meca500_programming_manual_546", "text": "(page 215) affects all velocities,\naccelerations and even time durations (including the timeout set with", "source": "meca500_programming_manual", "chunk_index": 546, "length": 104, "hash": "c15d3b9aeed1f706ab84b6c6f0625df3"}
{"id": "meca500_programming_manual_547", "text": "(page 180) and the pause set with the", "source": "meca500_programming_manual", "chunk_index": 547, "length": 37, "hash": "0ddc9f9d26b48750cc55afa9d919c443"}
{"id": "meca500_programming_manual_548", "text": "(page 134) command).", "source": "meca500_programming_manual", "chunk_index": 548, "length": 20, "hash": "cb0a8da077d79c6550cb16f3f8cef118"}
{"id": "meca500_programming_manual_549", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 549, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_550", "text": "Position and velocity modes", "source": "meca500_programming_manual", "chunk_index": 550, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "meca500_programming_manual_551", "text": "TCP/IP communication", "source": "meca500_programming_manual", "chunk_index": 551, "length": 20, "hash": "0c0aa463c82953a4ce9d66b63dd1a4a9"}
{"id": "meca500_programming_manual_552", "text": "TCP/IP communication", "source": "meca500_programming_manual", "chunk_index": 552, "length": 20, "hash": "0c0aa463c82953a4ce9d66b63dd1a4a9"}
{"id": "meca500_programming_manual_553", "text": "Mecademic robots must be connected to a computer or to a PLC over Ethernet. API commands\nmay be sent through Mecademic\u2019s web interface, the MecaPortal, or through a custom\ncomputer program using either the TCP/IP protocol, as detailed in the remainder of this\nsection, or any of three cyclic protocols, as detailed in the next three sections. When the\nrobot communicates using the TCP/IP protocol, it uses null-terminated ASCII strings. The\ndefault robot IP address is 192.168.0.100, and its default TCP port is 10000, referred to as\nthe control port (page 357). Commands to and messages from the robot are sent over the\ncontrol port. The robot will periodically send data over TCP port 10001, referred to as the\nmonitoring port (page 358), at the rate specified by the SetMonitoringInterval (page 205)\ncommand. This data includes the joint set and TRF pose (only when it changes), and\nother optional data enabled with the SetRealTimeMonitoring (page 209) command. To avoid\ndesynchronization between the data received from both parts, it is possible to send a copy of\nthe monitoring port data to the control port data with the SetCtrlPortMonitoring (page 200)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 553, "length": 1168, "hash": "b4831223c73cb9e5a3cfbb6965f3d8bf"}
{"id": "meca500_programming_manual_554", "text": "Mecademic robots must be connected to a computer or to a PLC over Ethernet. API commands\nmay be sent through Mecademic\u2019s web interface, the MecaPortal, or through a custom\ncomputer program using either the TCP/IP protocol, as detailed in the remainder of this\nsection, or any of three cyclic protocols, as detailed in the next three sections. When the\nrobot communicates using the TCP/IP protocol, it uses null-terminated ASCII strings.", "source": "meca500_programming_manual", "chunk_index": 554, "length": 436, "hash": "914ea25498265f1669417cf586039097"}
{"id": "meca500_programming_manual_555", "text": "The\ndefault robot IP address is 192.168.0.100, and its default TCP port is 10000", "source": "meca500_programming_manual", "chunk_index": 555, "length": 80, "hash": "8e088d6d7ea35810facb6c1d912f6c33"}
{"id": "meca500_programming_manual_556", "text": ", referred to as\nthe", "source": "meca500_programming_manual", "chunk_index": 556, "length": 20, "hash": "108420139741a1af7c8b84023429567f"}
{"id": "meca500_programming_manual_557", "text": "(page 357). Commands to and messages from the robot are sent over the\ncontrol port. The robot will periodically send data over", "source": "meca500_programming_manual", "chunk_index": 557, "length": 126, "hash": "cb97290440b3469499110d2e1f132c93"}
{"id": "meca500_programming_manual_558", "text": ", referred to as the", "source": "meca500_programming_manual", "chunk_index": 558, "length": 20, "hash": "6b61e4c4e38ef7f0b7f11c8884b239f1"}
{"id": "meca500_programming_manual_559", "text": "(page 358), at the rate specified by the", "source": "meca500_programming_manual", "chunk_index": 559, "length": 40, "hash": "39345f557a3a27cd87f5437724ecface"}
{"id": "meca500_programming_manual_560", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 560, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_561", "text": "(page 205)\ncommand. This data includes the joint set and TRF pose (only when it changes), and\nother optional data enabled with the", "source": "meca500_programming_manual", "chunk_index": 561, "length": 130, "hash": "f1125eae93375d2067eccaf68f7f369a"}
{"id": "meca500_programming_manual_562", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 562, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_563", "text": "(page 209) command. To avoid", "source": "meca500_programming_manual", "chunk_index": 563, "length": 28, "hash": "1e8eb324183209d0847bcd037b476f30"}
{"id": "meca500_programming_manual_564", "text": "desynchronization between the data received from both parts, it is possible to send a copy of\nthe monitoring port data to the control port data with the", "source": "meca500_programming_manual", "chunk_index": 564, "length": 152, "hash": "21b27adb8706cb7071a1a39f5dca3cab"}
{"id": "meca500_programming_manual_565", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 565, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_566", "text": "API commands are regrouped in the following categories, in terms of functionality:", "source": "meca500_programming_manual", "chunk_index": 566, "length": 82, "hash": "44ee47a90bebf47b3a581b77c350ff19"}
{"id": "meca500_programming_manual_567", "text": "API commands are regrouped in the following categories, in terms of functionality:", "source": "meca500_programming_manual", "chunk_index": 567, "length": 82, "hash": "44ee47a90bebf47b3a581b77c350ff19"}
{"id": "meca500_programming_manual_568", "text": "\u2022 motion commands (page 358), which are the commands used to construct the\nrobot trajectory (e.g., Delay (page 134), MoveJoints (page 135), SetTRF (page 179),\nSetBlending (page 151)),", "source": "meca500_programming_manual", "chunk_index": 568, "length": 183, "hash": "428b3d4d172c10c2756a26233f45b7de"}
{"id": "meca500_programming_manual_569", "text": "(page 358), which are the commands used to construct the\nrobot trajectory (e.g.,", "source": "meca500_programming_manual", "chunk_index": 569, "length": 80, "hash": "b97a97f080c722001024ee300386449f"}
{"id": "meca500_programming_manual_570", "text": "\u2022 robot control commands (page 358), which are commands used to control the robot (e.g.,\nActivateRobot (page 184), PauseMotion (page 195), SetNetworkOptions (page 206)),", "source": "meca500_programming_manual", "chunk_index": 570, "length": 169, "hash": "48a8cfddd913308d8dad08c807cfd546"}
{"id": "meca500_programming_manual_571", "text": "robot control commands", "source": "meca500_programming_manual", "chunk_index": 571, "length": 22, "hash": "76125ada5f59cf4007423506c75d1afe"}
{"id": "meca500_programming_manual_572", "text": "(page 358), which are commands used to control the robot (e.g.,", "source": "meca500_programming_manual", "chunk_index": 572, "length": 63, "hash": "e42a228ad5cb9b65b0cc661bf6768276"}
{"id": "meca500_programming_manual_573", "text": "\u2022 data request commands (page 357), which are commands used to request some data\nregarding the robot (e.g., GetTRF (page 264), GetBlending (page 228), GetJointVel\n(page 242)),", "source": "meca500_programming_manual", "chunk_index": 573, "length": 175, "hash": "68e97e34086d46aec99f3302ddc5dc8a"}
{"id": "meca500_programming_manual_574", "text": "data request commands", "source": "meca500_programming_manual", "chunk_index": 574, "length": 21, "hash": "98619a04001f4cb3e796fb1870e56f10"}
{"id": "meca500_programming_manual_575", "text": "(page 357), which are commands used to request some data\nregarding the robot (e.g.,", "source": "meca500_programming_manual", "chunk_index": 575, "length": 83, "hash": "3a5cae6b12bcef695dcb6e0aa790c41c"}
{"id": "meca500_programming_manual_576", "text": "\u2022 real-time data request commands (page 358), which are commands used to request some\nreal-time data regarding the robot (e.g., GetRtTrf (page 286), GetRtCartPos (page 272),\nGetStatusRobot (page 290)),", "source": "meca500_programming_manual", "chunk_index": 576, "length": 201, "hash": "baff369b7d5344022dd091a5fb48d8b4"}
{"id": "meca500_programming_manual_577", "text": "real-time data request commands", "source": "meca500_programming_manual", "chunk_index": 577, "length": 31, "hash": "4f75e7b3ce56efd38db92f8a466049e1"}
{"id": "meca500_programming_manual_578", "text": "(page 358), which are commands used to request some\nreal-time data regarding the robot (e.g.,", "source": "meca500_programming_manual", "chunk_index": 578, "length": 93, "hash": "4a44d6471411f0d738626583a49eb5f0"}
{"id": "meca500_programming_manual_579", "text": "\u2022 work zone supervision and collision detection commands, which are commands used to\nset a bounding box for the robot and its tooling and define collision conditions, and query\nthese settings and related statuses,", "source": "meca500_programming_manual", "chunk_index": 579, "length": 213, "hash": "dcfd077f3499d86cc5fcbf97c4bdf952"}
{"id": "meca500_programming_manual_580", "text": "\u2022 work zone supervision and collision detection commands, which are commands used to\nset a bounding box for the robot and its tooling and define collision conditions, and query\nthese settings and related statuses,", "source": "meca500_programming_manual", "chunk_index": 580, "length": 213, "hash": "dcfd077f3499d86cc5fcbf97c4bdf952"}
{"id": "meca500_programming_manual_581", "text": "\u2022 optional accessories commands, which are commands used to control or request data\nfrom the optional tools and modules for our robots (i.e., the electric grippers and\npneumatic module).", "source": "meca500_programming_manual", "chunk_index": 581, "length": 186, "hash": "57edd848d84b92bff1f1b342a12baddb"}
{"id": "meca500_programming_manual_582", "text": "\u2022 optional accessories commands, which are commands used to control or request data\nfrom the optional tools and modules for our robots (i.e., the electric grippers and\npneumatic module).", "source": "meca500_programming_manual", "chunk_index": 582, "length": 186, "hash": "57edd848d84b92bff1f1b342a12baddb"}
{"id": "meca500_programming_manual_583", "text": "\u2022 commands for managing variables, which allow the definition and management of", "source": "meca500_programming_manual", "chunk_index": 583, "length": 79, "hash": "9698a0e701fbe0565aadcf1524609a0b"}
{"id": "meca500_programming_manual_584", "text": "\u2022 commands for managing variables, which allow the definition and management of", "source": "meca500_programming_manual", "chunk_index": 584, "length": 79, "hash": "9698a0e701fbe0565aadcf1524609a0b"}
{"id": "meca500_programming_manual_585", "text": "persistent variables.", "source": "meca500_programming_manual", "chunk_index": 585, "length": 21, "hash": "24c701d2bb8b8c529b912b12169d85a7"}
{"id": "meca500_programming_manual_586", "text": "persistent variables.", "source": "meca500_programming_manual", "chunk_index": 586, "length": 21, "hash": "24c701d2bb8b8c529b912b12169d85a7"}
{"id": "meca500_programming_manual_587", "text": "However, commands can also be categorized in terms of whether they are executed\nimmediately or not. Queued commands (page 358) are placed in a motion queue (page 358),\nonce received by the robot, and are executed on a FIFO basis. All motion commands and", "source": "meca500_programming_manual", "chunk_index": 587, "length": 253, "hash": "54c074b4e0ff16625be2afaea35796fd"}
{"id": "meca500_programming_manual_588", "text": "However, commands can also be categorized in terms of whether they are executed\nimmediately or not.", "source": "meca500_programming_manual", "chunk_index": 588, "length": 99, "hash": "755caa1715f043399623bca28a893c96"}
{"id": "meca500_programming_manual_589", "text": "(page 358) are placed in a", "source": "meca500_programming_manual", "chunk_index": 589, "length": 26, "hash": "660987f63b55e37f2775f35ff2709f8f"}
{"id": "meca500_programming_manual_590", "text": "(page 358),\nonce received by the robot, and are executed on a FIFO basis. All motion commands and", "source": "meca500_programming_manual", "chunk_index": 590, "length": 97, "hash": "4e49e7bb7b185181064c8a25afb95a8a"}
{"id": "meca500_programming_manual_591", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 591, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_592", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 592, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_593", "text": "some external tool commands are queued. Instantaneous commands (page 357) are executed\nimmediately, as soon as received by the robot. All data request commands (Get*), all robot\ncontrol commands, all Work zone supervision and collision prevention commands and some\noptional accessories (*_Immediate) are instantaneous.", "source": "meca500_programming_manual", "chunk_index": 593, "length": 318, "hash": "44aa18f8f0989817a562bebf279987d3"}
{"id": "meca500_programming_manual_594", "text": "some external tool commands are queued.", "source": "meca500_programming_manual", "chunk_index": 594, "length": 39, "hash": "22ba437274ae30dd70f27904a8bc1af6"}
{"id": "meca500_programming_manual_595", "text": "Instantaneous commands", "source": "meca500_programming_manual", "chunk_index": 595, "length": 22, "hash": "ec6f18fbbd80c18879195a711a2e0f10"}
{"id": "meca500_programming_manual_596", "text": "(page 357) are executed\nimmediately, as soon as received by the robot. All data request commands (Get*), all robot\ncontrol commands, all Work zone supervision and collision prevention commands and some\noptional accessories (*_Immediate) are instantaneous.", "source": "meca500_programming_manual", "chunk_index": 596, "length": 255, "hash": "214d46441f817d797a8d153438d36459"}
{"id": "meca500_programming_manual_597", "text": "Finally, some command descriptions refer to default values (page 357): these are essentially\nvariables that are initialized every time the robot boots. Of these, those that correspond\nto motion commands are also initialized every time the robot is deactivated (e.g., after an\nemergency stop). In contrast, certain parameter values are persistent (page 358): they have\nmanufacturer\u2019s default values, but the changes you make to these are written on an SD drive\nand persist even if you power off the robot.", "source": "meca500_programming_manual", "chunk_index": 597, "length": 504, "hash": "fcc9da180dacab77625e8b0a3fe79867"}
{"id": "meca500_programming_manual_598", "text": "Finally, some command descriptions refer to", "source": "meca500_programming_manual", "chunk_index": 598, "length": 43, "hash": "4b98594824e42b412c993ab85377fc75"}
{"id": "meca500_programming_manual_599", "text": "(page 357): these are essentially\nvariables that are initialized every time the robot boots. Of these, those that correspond\nto motion commands are also initialized every time the robot is deactivated (e.g., after an\nemergency stop). In contrast, certain parameter values are", "source": "meca500_programming_manual", "chunk_index": 599, "length": 275, "hash": "194a1ac6b6369fe7c99f1c522cf9fa25"}
{"id": "meca500_programming_manual_600", "text": "(page 358): they have\nmanufacturer\u2019s default values, but the changes you make to these are written on an SD drive\nand persist even if you power off the robot.", "source": "meca500_programming_manual", "chunk_index": 600, "length": 158, "hash": "1fab964f740e58aa8dcfc89efc142fb9"}
{"id": "meca500_programming_manual_601", "text": "For convenience, since TCP API commands used in the TCP/IP protocol form the backbone\nof other communication protocols, they are presented in a separate part of this manual.", "source": "meca500_programming_manual", "chunk_index": 601, "length": 173, "hash": "389630ed737f15e0941e7a7187a93080"}
{"id": "meca500_programming_manual_602", "text": "For convenience, since TCP API commands used in the TCP/IP protocol form the backbone", "source": "meca500_programming_manual", "chunk_index": 602, "length": 85, "hash": "6659a6982444921242b282cf5ccf863f"}
{"id": "meca500_programming_manual_603", "text": "of other communication protocols, they are presented in a separate part of this manual.", "source": "meca500_programming_manual", "chunk_index": 603, "length": 87, "hash": "7e8d1e2a32d625fc8d9f9db77de66c68"}
{"id": "meca500_programming_manual_604", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 604, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_605", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 605, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_606", "text": "Responses and messages", "source": "meca500_programming_manual", "chunk_index": 606, "length": 22, "hash": "878d9bb08875e220cd26c11bb7206a6c"}
{"id": "meca500_programming_manual_607", "text": "Responses and messages", "source": "meca500_programming_manual", "chunk_index": 607, "length": 22, "hash": "878d9bb08875e220cd26c11bb7206a6c"}
{"id": "meca500_programming_manual_608", "text": "Every Mecademic robot sends responses and messages over its control port in various\nsituations: when it encounters an error, receives a request or certain motion commands,\nor experiences a status change. Additionally, the robot periodically or occasionally sends\nsimilar responses and messages, along with other information, on its monitoring port.", "source": "meca500_programming_manual", "chunk_index": 608, "length": 348, "hash": "5d64a0f95e4f143914c5dc2a9ccabab6"}
{"id": "meca500_programming_manual_609", "text": "Every Mecademic robot sends responses and messages over its control port in various\nsituations: when it encounters an error, receives a request or certain motion commands,\nor experiences a status change. Additionally, the robot periodically or occasionally sends\nsimilar responses and messages, along with other information, on its monitoring port.", "source": "meca500_programming_manual", "chunk_index": 609, "length": 348, "hash": "5d64a0f95e4f143914c5dc2a9ccabab6"}
{"id": "meca500_programming_manual_610", "text": "All responses and messages from the robot are formatted as ASCII strings in the following\nstructure:", "source": "meca500_programming_manual", "chunk_index": 610, "length": 100, "hash": "be14471781585ff6bd71d6f0715f6d06"}
{"id": "meca500_programming_manual_611", "text": "All responses and messages from the robot are formatted as ASCII strings in the following\nstructure:", "source": "meca500_programming_manual", "chunk_index": 611, "length": 100, "hash": "be14471781585ff6bd71d6f0715f6d06"}
{"id": "meca500_programming_manual_612", "text": "[4-digit code][text message OR comma-separated return values]", "source": "meca500_programming_manual", "chunk_index": 612, "length": 61, "hash": "1ccf4326dc193a6f6a79424e13db0441"}
{"id": "meca500_programming_manual_613", "text": "[4-digit code][text message OR comma-separated return values]", "source": "meca500_programming_manual", "chunk_index": 613, "length": 61, "hash": "1ccf4326dc193a6f6a79424e13db0441"}
{"id": "meca500_programming_manual_614", "text": "The second part of a response or message consists of either a descriptive text or a set of\ncomma-separated return values. Descriptive text is intended to provide information to the\nuser and is subject to change without prior notice. For example, the description \u201cHoming\nfailed\u201d may later be updated to \u201cHoming has failed.\u201d Therefore, you should rely solely on the\nfour-digit code when processing messages.", "source": "meca500_programming_manual", "chunk_index": 614, "length": 405, "hash": "d18d211809dec4c2f243689d658b706d"}
{"id": "meca500_programming_manual_615", "text": "The second part of a response or message consists of either a descriptive text or a set of\ncomma-separated return values. Descriptive text is intended to provide information to the", "source": "meca500_programming_manual", "chunk_index": 615, "length": 180, "hash": "9378b02b3a06d5dec78d99b751e64005"}
{"id": "meca500_programming_manual_616", "text": "user and is subject to change without prior notice. For example, the description \u201cHoming\nfailed\u201d may later be updated to \u201cHoming has failed.\u201d Therefore, you should rely solely on the\nfour-digit code when processing messages.", "source": "meca500_programming_manual", "chunk_index": 616, "length": 224, "hash": "af3d14c81de87573a880e848dd41ba33"}
{"id": "meca500_programming_manual_617", "text": "Any changes to these codes or the format of comma-separated return values will always be\ndocumented in the firmware upgrade manual. Return values are provided as either integers\nor IEEE-754 floating-point numbers with up to nine decimal places.", "source": "meca500_programming_manual", "chunk_index": 617, "length": 244, "hash": "4c5fcc421408a36e27da599b4b3c50ae"}
{"id": "meca500_programming_manual_618", "text": "Any changes to these codes or the format of comma-separated return values will always be\ndocumented in the firmware upgrade manual. Return values are provided as either integers\nor IEEE-754 floating-point numbers with up to nine decimal places.", "source": "meca500_programming_manual", "chunk_index": 618, "length": 244, "hash": "4c5fcc421408a36e27da599b4b3c50ae"}
{"id": "meca500_programming_manual_619", "text": "When the robot encounters an error while executing a command, it goes into error mode. See\nSection 4 for details on how to manage these errors. The following table lists all command\nerror messages. These messages are sent on the control port.", "source": "meca500_programming_manual", "chunk_index": 619, "length": 242, "hash": "dacf514c6efc2b0efe66e6f7a9ca5f04"}
{"id": "meca500_programming_manual_620", "text": "When the robot encounters an error while executing a command, it goes into error mode. See\nSection 4 for details on how to manage these errors. The following table lists all command\nerror messages.", "source": "meca500_programming_manual", "chunk_index": 620, "length": 197, "hash": "637f30d2891d3c191ad659dba76a8337"}
{"id": "meca500_programming_manual_621", "text": "These messages are sent on the control port.", "source": "meca500_programming_manual", "chunk_index": 621, "length": 44, "hash": "4bd7852bc1202ee3601f802e52530b27"}
{"id": "meca500_programming_manual_622", "text": "Table 1: Error messages; sent on the control port only", "source": "meca500_programming_manual", "chunk_index": 622, "length": 54, "hash": "cccd707add6e7378788fcd0cf8008c87"}
{"id": "meca500_programming_manual_623", "text": "Table 1: Error messages; sent on the control port only", "source": "meca500_programming_manual", "chunk_index": 623, "length": 54, "hash": "cccd707add6e7378788fcd0cf8008c87"}
{"id": "meca500_programming_manual_624", "text": "[1000][Command buffer is full.]", "source": "meca500_programming_manual", "chunk_index": 624, "length": 31, "hash": "e472c6b8c5586caf6085ed6ca4c0aefa"}
{"id": "meca500_programming_manual_625", "text": "[1000][Command buffer is full.]", "source": "meca500_programming_manual", "chunk_index": 625, "length": 31, "hash": "e472c6b8c5586caf6085ed6ca4c0aefa"}
{"id": "meca500_programming_manual_626", "text": "or\n[1001][Empty\nunrecognized. - Command: \u2018\u2026\u2019]\n[1002][Syntax error, symbol missing.\nCommand: \u2018\u2026\u2019]\n[1003][Argument error. - Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 626, "length": 135, "hash": "44e5a4b324d1380e4fd09e5db36f06e3"}
{"id": "meca500_programming_manual_627", "text": "or\n[1001][Empty\nunrecognized. - Command: \u2018\u2026\u2019]\n[1002][Syntax error, symbol missing.\nCommand: \u2018\u2026\u2019]\n[1003][Argument error. - Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 627, "length": 135, "hash": "44e5a4b324d1380e4fd09e5db36f06e3"}
{"id": "meca500_programming_manual_628", "text": "[1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 628, "length": 35, "hash": "aa65790704b5c4fb6e74d95977bfd1ee"}
{"id": "meca500_programming_manual_629", "text": "[1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 629, "length": 35, "hash": "aa65790704b5c4fb6e74d95977bfd1ee"}
{"id": "meca500_programming_manual_630", "text": "Maximum number of queued commands\nreached. Retry by sending commands at a\nslower rate.\nUnknown or empty command.", "source": "meca500_programming_manual", "chunk_index": 630, "length": 112, "hash": "8c14a1012e84654ff8a670530dd4d41f"}
{"id": "meca500_programming_manual_631", "text": "Maximum number of queued commands\nreached. Retry by sending commands at a\nslower rate.\nUnknown or empty command.", "source": "meca500_programming_manual", "chunk_index": 631, "length": 112, "hash": "8c14a1012e84654ff8a670530dd4d41f"}
{"id": "meca500_programming_manual_632", "text": "A parenthesis or a comma has been omitted.", "source": "meca500_programming_manual", "chunk_index": 632, "length": 42, "hash": "401843938cab854d10af6dfeb738823b"}
{"id": "meca500_programming_manual_633", "text": "A parenthesis or a comma has been omitted.", "source": "meca500_programming_manual", "chunk_index": 633, "length": 42, "hash": "401843938cab854d10af6dfeb738823b"}
{"id": "meca500_programming_manual_634", "text": "Wrong number of arguments or invalid input\n(e.g., the argument is out of range).\nThe robot must be activated,\nbefore\nexecuting the command that caused this\nerror.", "source": "meca500_programming_manual", "chunk_index": 634, "length": 162, "hash": "7e2b05ef5c770237a349a613ed0e614d"}
{"id": "meca500_programming_manual_635", "text": "Wrong number of arguments or invalid input\n(e.g., the argument is out of range).", "source": "meca500_programming_manual", "chunk_index": 635, "length": 80, "hash": "228ef41208504d4789e284bcfca48ed6"}
{"id": "meca500_programming_manual_636", "text": "The robot must be activated,\nbefore\nexecuting the command that caused this\nerror.", "source": "meca500_programming_manual", "chunk_index": 636, "length": 81, "hash": "7254940d112d5b0458632e29a4cf51d8"}
{"id": "meca500_programming_manual_637", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 637, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_638", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 638, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_639", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 639, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_640", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 640, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_641", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 641, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_642", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 642, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_643", "text": "[1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 643, "length": 31, "hash": "2678e68db28c245332539e8a4f72c7aa"}
{"id": "meca500_programming_manual_644", "text": "[1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 644, "length": 31, "hash": "2678e68db28c245332539e8a4f72c7aa"}
{"id": "meca500_programming_manual_645", "text": "[1007][Joint over limit (\u2026 is not in range\n[\u2026,\u2026] for joint \u2026). - Command: \u2018\u2026\u2019.]", "source": "meca500_programming_manual", "chunk_index": 645, "length": 79, "hash": "ed59a8ba434ecbfcda71e9afb9cc11b1"}
{"id": "meca500_programming_manual_646", "text": "[1007][Joint over limit (\u2026 is not in range\n[\u2026,\u2026] for joint \u2026). - Command: \u2018\u2026\u2019.]", "source": "meca500_programming_manual", "chunk_index": 646, "length": 79, "hash": "ed59a8ba434ecbfcda71e9afb9cc11b1"}
{"id": "meca500_programming_manual_647", "text": "[1010][Linear move is blocked because a\n-\njoint would rotate by more than 180deg.\nCommand: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 647, "length": 95, "hash": "7ef4c8537cd1ef63b48c98964c05346a"}
{"id": "meca500_programming_manual_648", "text": "[1010][Linear move is blocked because a\n-\njoint would rotate by more than 180deg.\nCommand: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 648, "length": 95, "hash": "7ef4c8537cd1ef63b48c98964c05346a"}
{"id": "meca500_programming_manual_649", "text": "[1011][The robot is in error.]", "source": "meca500_programming_manual", "chunk_index": 649, "length": 30, "hash": "55a6a617d265973729905c1762fe6341"}
{"id": "meca500_programming_manual_650", "text": "[1011][The robot is in error.]", "source": "meca500_programming_manual", "chunk_index": 650, "length": 30, "hash": "55a6a617d265973729905c1762fe6341"}
{"id": "meca500_programming_manual_651", "text": "[1012][Linear move is blocked because it\nrequires a reorientation of 180 degrees of\nthe end- effector - Command: \u2018\u2026\u2019.]", "source": "meca500_programming_manual", "chunk_index": 651, "length": 118, "hash": "8aaf05e9e1a90af61b4cb0bc3c511a6d"}
{"id": "meca500_programming_manual_652", "text": "[1012][Linear move is blocked because it\nrequires a reorientation of 180 degrees of\nthe end- effector - Command: \u2018\u2026\u2019.]", "source": "meca500_programming_manual", "chunk_index": 652, "length": 118, "hash": "8aaf05e9e1a90af61b4cb0bc3c511a6d"}
{"id": "meca500_programming_manual_653", "text": "[1013][Activation failed.]", "source": "meca500_programming_manual", "chunk_index": 653, "length": 26, "hash": "25677f32ea33285f8e0655d6883bbc1c"}
{"id": "meca500_programming_manual_654", "text": "[1013][Activation failed.]", "source": "meca500_programming_manual", "chunk_index": 654, "length": 26, "hash": "25677f32ea33285f8e0655d6883bbc1c"}
{"id": "meca500_programming_manual_655", "text": "[1014][Homing failed.]", "source": "meca500_programming_manual", "chunk_index": 655, "length": 22, "hash": "530ee7c89d930646f81b406cd1ab94df"}
{"id": "meca500_programming_manual_656", "text": "[1014][Homing failed.]", "source": "meca500_programming_manual", "chunk_index": 656, "length": 22, "hash": "530ee7c89d930646f81b406cd1ab94df"}
{"id": "meca500_programming_manual_657", "text": "[1016][Destination pose out of reach for\nany configuration. - Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 657, "length": 75, "hash": "f5d2fb78803ba110e4700c9c82beeea3"}
{"id": "meca500_programming_manual_658", "text": "[1016][Destination pose out of reach for\nany configuration. - Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 658, "length": 75, "hash": "f5d2fb78803ba110e4700c9c82beeea3"}
{"id": "meca500_programming_manual_659", "text": "[1016][Destination pose out of reach for\nselected conf(\u2026,\u2026,\u2026 turn \u2026). - Command:\n\u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 659, "length": 85, "hash": "72b180227dbd5dccb0097df41c77a22c"}
{"id": "meca500_programming_manual_660", "text": "[1016][Destination pose out of reach for\nselected conf(\u2026,\u2026,\u2026 turn \u2026). - Command:\n\u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 660, "length": 85, "hash": "72b180227dbd5dccb0097df41c77a22c"}
{"id": "meca500_programming_manual_661", "text": "[1016][The requested linear move is not\npossible due to a pose out of reach along\nthe path. - Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 661, "length": 107, "hash": "bb9d12b2babec2cfe6eeab0898c35c67"}
{"id": "meca500_programming_manual_662", "text": "[1016][The requested linear move is not\npossible due to a pose out of reach along\nthe path. - Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 662, "length": 107, "hash": "bb9d12b2babec2cfe6eeab0898c35c67"}
{"id": "meca500_programming_manual_663", "text": "[1022][Robot was not saving the program.]", "source": "meca500_programming_manual", "chunk_index": 663, "length": 41, "hash": "c4e2f81e277a011c5351d5b00c00bc57"}
{"id": "meca500_programming_manual_664", "text": "[1022][Robot was not saving the program.]", "source": "meca500_programming_manual", "chunk_index": 664, "length": 41, "hash": "c4e2f81e277a011c5351d5b00c00bc57"}
{"id": "meca500_programming_manual_665", "text": "The robot must be homed, before executing\nthe command that cased this error.\nThe robot cannot execute the MoveJoints\n(page 135) or MoveJointsRel (page 137)\ncommand because at least one joint is either\ncurrently outside or will move beyond the\nuser-defined limits.\nThe linear motion cannot be executed\nbecause it requires a reorientation of 180\u00b0\nof the end-effector, and there may be two\npossible paths.\nA command has been sent but the robot is\nin error mode and cannot process it until a\nResetError (page 197) command is sent.\nThe MoveLin (page 141) or MoveLinRel*\ncommand sent requires that the robot pass\nthrough a singularity that cannot be crossed\nor pass too close to a singularity with\nexcessive joint rotations.\nActivation failed (for example, because the\nSWStop is active).\nHoming procedure failed. Try again.\nrequested in the MoveLin\nThe pose\n(page\n141), MoveLinRel*, MovePose\n(page 147) or MoveJump (page 140)\ncommand is out of reach, with the desired\n(or with any) configurations.\nIn the case\nof the MoveLin (page 141) command, this\nerror code is also produced if a pose along\nthe path is out of reach.", "source": "meca500_programming_manual", "chunk_index": 665, "length": 1113, "hash": "ff50d2fa362eb23a629d5b9545457f14"}
{"id": "meca500_programming_manual_666", "text": "The robot must be homed, before executing\nthe command that cased this error.\nThe robot cannot execute the", "source": "meca500_programming_manual", "chunk_index": 666, "length": 105, "hash": "b8c3663cfbd54ae167d25cf79d49e977"}
{"id": "meca500_programming_manual_667", "text": "(page 137)\ncommand because at least one joint is either\ncurrently outside or will move beyond the\nuser-defined limits.\nThe linear motion cannot be executed\nbecause it requires a reorientation of 180\u00b0\nof the end-effector, and there may be two\npossible paths.\nA command has been sent but the robot is", "source": "meca500_programming_manual", "chunk_index": 667, "length": 298, "hash": "7cf79e33cfcecf189e049ef18ab730d9"}
{"id": "meca500_programming_manual_668", "text": "in error mode and cannot process it until a", "source": "meca500_programming_manual", "chunk_index": 668, "length": 43, "hash": "ffab78f0fd5fd82a17b1ca15ad140f84"}
{"id": "meca500_programming_manual_669", "text": "(page 197) command is sent.\nThe", "source": "meca500_programming_manual", "chunk_index": 669, "length": 31, "hash": "d9f9ae9e4c5d82dd8bd99549421a056a"}
{"id": "meca500_programming_manual_670", "text": "command sent requires that the robot pass\nthrough a singularity that cannot be crossed\nor pass too close to a singularity with\nexcessive joint rotations.\nActivation failed (for example, because the\nSWStop is active).\nHoming procedure failed. Try again.\nrequested in the", "source": "meca500_programming_manual", "chunk_index": 670, "length": 269, "hash": "2902dc905046ab92b27b6ac1429c2606"}
{"id": "meca500_programming_manual_671", "text": "The pose\n(page\n141), MoveLinRel*,", "source": "meca500_programming_manual", "chunk_index": 671, "length": 33, "hash": "d028f8974139a80ccbe34a14b5c25a3a"}
{"id": "meca500_programming_manual_672", "text": "(page 140)\ncommand is out of reach, with the desired\n(or with any) configurations.\nIn the case\nof the", "source": "meca500_programming_manual", "chunk_index": 672, "length": 101, "hash": "8429456c4d7a89bc06d38cc99c7088f0"}
{"id": "meca500_programming_manual_673", "text": "(page 141) command, this\nerror code is also produced if a pose along", "source": "meca500_programming_manual", "chunk_index": 673, "length": 68, "hash": "6d2ca7cdad1dc0e7c365761e320761ec"}
{"id": "meca500_programming_manual_674", "text": "the path is out of reach.", "source": "meca500_programming_manual", "chunk_index": 674, "length": 25, "hash": "fd22cf1922f8f9340918be684560d78d"}
{"id": "meca500_programming_manual_675", "text": "The StopSaving (page 219) command was\nsent, but\nthe robot was not saving a\nprogram.\nThe command cannot be executed in the\noffline program.", "source": "meca500_programming_manual", "chunk_index": 675, "length": 138, "hash": "ca75e4d939c69e06a53811d98ad482d5"}
{"id": "meca500_programming_manual_676", "text": "(page 219) command was\nsent, but\nthe robot was not saving a\nprogram.\nThe command cannot be executed in the\noffline program.", "source": "meca500_programming_manual", "chunk_index": 676, "length": 123, "hash": "d3984f4474f19fb6c847e57079c8abd3"}
{"id": "meca500_programming_manual_677", "text": "[1023][Ignoring command for offline mode.\n- Command: \u2018\u2026\u2019]\n[1024][Mastering needed. - Command: \u2018\u2026\u2019] Mastering was lost. Contact Mecademic.\n[1025][Impossible to reset the error. Please,\npower-cycle the robot.]", "source": "meca500_programming_manual", "chunk_index": 677, "length": 207, "hash": "0d46e319ba1f9f01aee7abb9c7d038d0"}
{"id": "meca500_programming_manual_678", "text": "[1023][Ignoring command for offline mode.\n- Command: \u2018\u2026\u2019]", "source": "meca500_programming_manual", "chunk_index": 678, "length": 57, "hash": "892426b51f3f2e87ae4ac15578b55580"}
{"id": "meca500_programming_manual_679", "text": "[1024][Mastering needed. - Command: \u2018\u2026\u2019] Mastering was lost. Contact Mecademic.\n[1025][Impossible to reset the error. Please,\npower-cycle the robot.]", "source": "meca500_programming_manual", "chunk_index": 679, "length": 149, "hash": "db16255e8adcb31360b954e83d68a2a2"}
{"id": "meca500_programming_manual_680", "text": "Deactivate and reactivate the robot, in order\nto reset the error.", "source": "meca500_programming_manual", "chunk_index": 680, "length": 65, "hash": "7c44bbaab83eca6920ba46a68563e540"}
{"id": "meca500_programming_manual_681", "text": "Deactivate and reactivate the robot, in order\nto reset the error.", "source": "meca500_programming_manual", "chunk_index": 681, "length": 65, "hash": "7c44bbaab83eca6920ba46a68563e540"}
{"id": "meca500_programming_manual_682", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 682, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_683", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 683, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_684", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 684, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_685", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 685, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_686", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 686, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_687", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 687, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_688", "text": "[1026][Deactivation needed to execute the\ncommand. - Command: \u2018\u2026\u2019]\n[1027][Simulation mode\nenabled/ disabled while the robot\ndeactivated.]\n[1029][Offline program full.\nMaximum\nprogram size is 13,000 commands. Saving\nstopped.]\n[1030][Already saving.]", "source": "meca500_programming_manual", "chunk_index": 688, "length": 248, "hash": "7336be02b538b33078b224b71ea25e42"}
{"id": "meca500_programming_manual_689", "text": "[1026][Deactivation needed to execute the\ncommand. - Command: \u2018\u2026\u2019]\n[1027][Simulation mode\nenabled/ disabled while the robot\ndeactivated.]\n[1029][Offline program full.\nMaximum\nprogram size is 13,000 commands. Saving\nstopped.]\n[1030][Already saving.]", "source": "meca500_programming_manual", "chunk_index": 689, "length": 248, "hash": "7336be02b538b33078b224b71ea25e42"}
{"id": "meca500_programming_manual_690", "text": "[1031][Program saving\nreceiving illegal command.\n\u2018\u2026\u2019]\n[1033][Start conf mismatch]", "source": "meca500_programming_manual", "chunk_index": 690, "length": 81, "hash": "120c358587dad6e30903959d71d26c47"}
{"id": "meca500_programming_manual_691", "text": "[1031][Program saving\nreceiving illegal command.", "source": "meca500_programming_manual", "chunk_index": 691, "length": 48, "hash": "3c4e40eaf70cb8f6bafc89d3ad73bb7c"}
{"id": "meca500_programming_manual_692", "text": "\u2018\u2026\u2019]\n[1033][Start conf mismatch]", "source": "meca500_programming_manual", "chunk_index": 692, "length": 32, "hash": "deb7e057769979504b105d71c10bd1a0"}
{"id": "meca500_programming_manual_693", "text": "[1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 693, "length": 29, "hash": "3f8dd4c27b65b7372c64029b0605699f"}
{"id": "meca500_programming_manual_694", "text": "[1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 694, "length": 29, "hash": "3f8dd4c27b65b7372c64029b0605699f"}
{"id": "meca500_programming_manual_695", "text": "[1040][Command failed.]\n[1041][No Vbox]\n[1042][Ext tool sim must deactivated]", "source": "meca500_programming_manual", "chunk_index": 695, "length": 77, "hash": "3f12fd24f4eddd00eababa8c10fd477c"}
{"id": "meca500_programming_manual_696", "text": "[1040][Command failed.]\n[1041][No Vbox]\n[1042][Ext tool sim must deactivated]", "source": "meca500_programming_manual", "chunk_index": 696, "length": 77, "hash": "3f12fd24f4eddd00eababa8c10fd477c"}
{"id": "meca500_programming_manual_697", "text": "[1043][The specified IO bank is not present\non this robot]\n[1044][There is no vacuum module present\non this robot.]\n[1550][\u2026]", "source": "meca500_programming_manual", "chunk_index": 697, "length": 125, "hash": "146b6a42149341aa2379c9846c7dcc54"}
{"id": "meca500_programming_manual_698", "text": "[1043][The specified IO bank is not present\non this robot]\n[1044][There is no vacuum module present\non this robot.]\n[1550][\u2026]", "source": "meca500_programming_manual", "chunk_index": 698, "length": 125, "hash": "146b6a42149341aa2379c9846c7dcc54"}
{"id": "meca500_programming_manual_699", "text": "The robot must be deactivated in order to\nexecute this command.\nThe robot must be deactivated in order to\nexecute this command.", "source": "meca500_programming_manual", "chunk_index": 699, "length": 127, "hash": "380209c425cb9eb952dad160d4f5d61d"}
{"id": "meca500_programming_manual_700", "text": "The robot must be deactivated in order to\nexecute this command.\nThe robot must be deactivated in order to\nexecute this command.", "source": "meca500_programming_manual", "chunk_index": 700, "length": 127, "hash": "380209c425cb9eb952dad160d4f5d61d"}
{"id": "meca500_programming_manual_701", "text": "The program saving was\ninterrupted\nbecause the limit of 13,000 commands\nwas reached.\nThe robot is already saving a program. Wait\nuntil finished to save another program.\nThe command cannot be executed because\nthe robot is currently saving a program.", "source": "meca500_programming_manual", "chunk_index": 701, "length": 248, "hash": "d7e7fa14759c16be22f5111045e96a61"}
{"id": "meca500_programming_manual_702", "text": "The program saving was\ninterrupted\nbecause the limit of 13,000 commands\nwas reached.\nThe robot is already saving a program. Wait\nuntil finished to save another program.\nThe command cannot be executed because\nthe robot is currently saving a program.", "source": "meca500_programming_manual", "chunk_index": 702, "length": 248, "hash": "d7e7fa14759c16be22f5111045e96a61"}
{"id": "meca500_programming_manual_703", "text": "Requested move blocked because start\nrobot position is not\nin the requested\nconfiguration.\nThe command that generated this error\ncannot be executed because no MEGP 25*\ngripper was detected\nGeneral error for various commands.\nNo pneumatic module connected.\nSwitching external tool type is only possible\nwhen the robot is deactivated.\nNot available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 703, "length": 362, "hash": "f1db3f4a4c6e5da6c442885bad6812f1"}
{"id": "meca500_programming_manual_704", "text": "Requested move blocked because start\nrobot position is not\nin the requested\nconfiguration.\nThe command that generated this error\ncannot be executed because no MEGP 25*\ngripper was detected\nGeneral error for various commands.\nNo pneumatic module connected.\nSwitching external tool type is only possible\nwhen the robot is deactivated.\nNot available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 704, "length": 362, "hash": "f1db3f4a4c6e5da6c442885bad6812f1"}
{"id": "meca500_programming_manual_705", "text": "Not available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 705, "length": 29, "hash": "79378929d0e42b94ba9aad902cdf340a"}
{"id": "meca500_programming_manual_706", "text": "Not available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 706, "length": 29, "hash": "79378929d0e42b94ba9aad902cdf340a"}
{"id": "meca500_programming_manual_707", "text": "listed with\nfor the reason", "source": "meca500_programming_manual", "chunk_index": 707, "length": 26, "hash": "ea39bbed752bd214652454a613d651ee"}
{"id": "meca500_programming_manual_708", "text": "listed with\nfor the reason", "source": "meca500_programming_manual", "chunk_index": 708, "length": 26, "hash": "ea39bbed752bd214652454a613d651ee"}
{"id": "meca500_programming_manual_709", "text": "Variables\nListVariables (page 354)\nspecified in the error message.\nThe variable could not be retrieved with\nGetVariable (page 353)\nfor the reason\nspecified in the error message.\nThe\nwith\ncreation\nCreateVariable (page 351) for the reason\nspecified in the error message.\nwith\ndeletion\nThe\nDeleteVariable (page 352) for the reason\nspecified in the error message.", "source": "meca500_programming_manual", "chunk_index": 709, "length": 359, "hash": "f8002c9bbf029c5b3598b11d0136ad40"}
{"id": "meca500_programming_manual_710", "text": "specified in the error message.\nThe variable could not be retrieved with", "source": "meca500_programming_manual", "chunk_index": 710, "length": 72, "hash": "b05dafe54fe1c7c92ab299bfa68b25c7"}
{"id": "meca500_programming_manual_711", "text": "(page 353)\nfor the reason\nspecified in the error message.\nThe\nwith\ncreation", "source": "meca500_programming_manual", "chunk_index": 711, "length": 75, "hash": "0e513fccfbc5bc85ca35dc7038861fe1"}
{"id": "meca500_programming_manual_712", "text": "(page 351) for the reason\nspecified in the error message.\nwith\ndeletion\nThe", "source": "meca500_programming_manual", "chunk_index": 712, "length": 75, "hash": "27a9ae877b90ce5b11c74b44a13a96b0"}
{"id": "meca500_programming_manual_713", "text": "(page 352) for the reason", "source": "meca500_programming_manual", "chunk_index": 713, "length": 25, "hash": "a1809e7893e3593909daf8a2feaad71b"}
{"id": "meca500_programming_manual_714", "text": "specified in the error message.", "source": "meca500_programming_manual", "chunk_index": 714, "length": 31, "hash": "0a53924d771371c3a74bc0a91805fd60"}
{"id": "meca500_programming_manual_715", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 715, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_716", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 716, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_717", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 717, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_718", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 718, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_719", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 719, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_720", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 720, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_721", "text": "[3001][Another user is already connected,\nclosing connection.]", "source": "meca500_programming_manual", "chunk_index": 721, "length": 62, "hash": "bda281850189c166f7dbb634a0d46560"}
{"id": "meca500_programming_manual_722", "text": "[3001][Another user is already connected,\nclosing connection.]", "source": "meca500_programming_manual", "chunk_index": 722, "length": 62, "hash": "bda281850189c166f7dbb634a0d46560"}
{"id": "meca500_programming_manual_723", "text": "[3002][A firmware upgrade is in progress\n(connection refused).]\n[3003][Command has reached the maximum\nlength.]", "source": "meca500_programming_manual", "chunk_index": 723, "length": 111, "hash": "0ab3f920e44710fdb5c161802f881358"}
{"id": "meca500_programming_manual_724", "text": "[3002][A firmware upgrade is in progress\n(connection refused).]\n[3003][Command has reached the maximum\nlength.]", "source": "meca500_programming_manual", "chunk_index": 724, "length": 111, "hash": "0ab3f920e44710fdb5c161802f881358"}
{"id": "meca500_programming_manual_725", "text": "[3005][Error of motion.]", "source": "meca500_programming_manual", "chunk_index": 725, "length": 24, "hash": "8ef6d522cf4f3aadc85f9e375bcf3a88"}
{"id": "meca500_programming_manual_726", "text": "[3005][Error of motion.]", "source": "meca500_programming_manual", "chunk_index": 726, "length": 24, "hash": "8ef6d522cf4f3aadc85f9e375bcf3a88"}
{"id": "meca500_programming_manual_727", "text": "variable modification failed with\nfor the reason", "source": "meca500_programming_manual", "chunk_index": 727, "length": 48, "hash": "fb51f729421bb69350fc17bc4a7425c6"}
{"id": "meca500_programming_manual_728", "text": "variable modification failed with\nfor the reason", "source": "meca500_programming_manual", "chunk_index": 728, "length": 48, "hash": "fb51f729421bb69350fc17bc4a7425c6"}
{"id": "meca500_programming_manual_729", "text": "The\nSetVariable (page 354)\nspecified in the error message.\nAnother user is already connected to the\nrobot. The robot disconnects from the user\nimmediately after sending this message.\nThe firmware of the robot is being updated.", "source": "meca500_programming_manual", "chunk_index": 729, "length": 226, "hash": "e965e2190eb00483f0725c61f89f220c"}
{"id": "meca500_programming_manual_730", "text": "(page 354)\nspecified in the error message.\nAnother user is already connected to the\nrobot. The robot disconnects from the user\nimmediately after sending this message.\nThe firmware of the robot is being updated.", "source": "meca500_programming_manual", "chunk_index": 730, "length": 210, "hash": "7e72df524bc2ebbe901158aaf519a05d"}
{"id": "meca500_programming_manual_731", "text": "Too many characters before the NULL\ncharacter. Possibly caused by a missing\nNULL character\nMotion error. Possibly caused by a collision\nor overload. Correct the situation and send\nthe ResetError (page 197) command. If the\nmotion error persists, try power-cycling the\nrobot.", "source": "meca500_programming_manual", "chunk_index": 731, "length": 273, "hash": "df4e9944b4b94d2acdd64d4875bf4bc9"}
{"id": "meca500_programming_manual_732", "text": "Too many characters before the NULL\ncharacter. Possibly caused by a missing\nNULL character\nMotion error. Possibly caused by a collision", "source": "meca500_programming_manual", "chunk_index": 732, "length": 135, "hash": "355b57a0a690f8ff28ddedddeff87161"}
{"id": "meca500_programming_manual_733", "text": "or overload. Correct the situation and send\nthe", "source": "meca500_programming_manual", "chunk_index": 733, "length": 47, "hash": "c94c5e5b2e99be7357d02be499629986"}
{"id": "meca500_programming_manual_734", "text": "(page 197) command. If the\nmotion error persists, try power-cycling the\nrobot.", "source": "meca500_programming_manual", "chunk_index": 734, "length": 78, "hash": "1db3e03adc5a1866ae643bfc9f2691cd"}
{"id": "meca500_programming_manual_735", "text": "[3006][Error of communication with drives] This error cannot be reset. The robot needs", "source": "meca500_programming_manual", "chunk_index": 735, "length": 86, "hash": "55c20f6ce9fab4f6e8225031ad9e5e80"}
{"id": "meca500_programming_manual_736", "text": "[3006][Error of communication with drives] This error cannot be reset. The robot needs", "source": "meca500_programming_manual", "chunk_index": 736, "length": 86, "hash": "55c20f6ce9fab4f6e8225031ad9e5e80"}
{"id": "meca500_programming_manual_737", "text": "[3009][Robot initialization failed due to an\ninternal error. Restart the robot.]", "source": "meca500_programming_manual", "chunk_index": 737, "length": 80, "hash": "bd7ff82babd53d49cafb0699dec0cae2"}
{"id": "meca500_programming_manual_738", "text": "[3009][Robot initialization failed due to an\ninternal error. Restart the robot.]", "source": "meca500_programming_manual", "chunk_index": 738, "length": 80, "hash": "bd7ff82babd53d49cafb0699dec0cae2"}
{"id": "meca500_programming_manual_739", "text": "[3014][Problem with saved program, save a\nnew program.]\n[3017][No offline program saved.]\n[3020][Offline program \u2026 is invalid]", "source": "meca500_programming_manual", "chunk_index": 739, "length": 126, "hash": "a03f6bb1009ebb42f8945d4322d0d7c1"}
{"id": "meca500_programming_manual_740", "text": "[3014][Problem with saved program, save a\nnew program.]\n[3017][No offline program saved.]\n[3020][Offline program \u2026 is invalid]", "source": "meca500_programming_manual", "chunk_index": 740, "length": 126, "hash": "a03f6bb1009ebb42f8945d4322d0d7c1"}
{"id": "meca500_programming_manual_741", "text": "[3025][Gripper error.]", "source": "meca500_programming_manual", "chunk_index": 741, "length": 22, "hash": "070d62dfa737f31b45d60c14dd3fbc82"}
{"id": "meca500_programming_manual_742", "text": "[3025][Gripper error.]", "source": "meca500_programming_manual", "chunk_index": 742, "length": 22, "hash": "070d62dfa737f31b45d60c14dd3fbc82"}
{"id": "meca500_programming_manual_743", "text": "[3026][Robot\u2019s maintenance check has\ndiscovered a problem. Mecademic cannot\nguarantee correct movements.\nPlease\ncontact Mecademic.]\n[3027][Internal error occurred.]\n[3029][Excessive torque error occurred]", "source": "meca500_programming_manual", "chunk_index": 743, "length": 204, "hash": "73609a57b86fb86dcbf43e27c9ac9a73"}
{"id": "meca500_programming_manual_744", "text": "[3026][Robot\u2019s maintenance check has\ndiscovered a problem. Mecademic cannot\nguarantee correct movements.\nPlease\ncontact Mecademic.]\n[3027][Internal error occurred.]\n[3029][Excessive torque error occurred]", "source": "meca500_programming_manual", "chunk_index": 744, "length": 204, "hash": "73609a57b86fb86dcbf43e27c9ac9a73"}
{"id": "meca500_programming_manual_745", "text": "to be rebooted to recover from this error.\nError in robot startup procedure. Contact\nour technical support team if restarting the\nrobot did not resolve the issue.\nThere was a problem saving the program.", "source": "meca500_programming_manual", "chunk_index": 745, "length": 202, "hash": "cccb93ed125fefa22da656b9e5006c35"}
{"id": "meca500_programming_manual_746", "text": "to be rebooted to recover from this error.\nError in robot startup procedure. Contact\nour technical support team if restarting the\nrobot did not resolve the issue.\nThere was a problem saving the program.", "source": "meca500_programming_manual", "chunk_index": 746, "length": 202, "hash": "cccb93ed125fefa22da656b9e5006c35"}
{"id": "meca500_programming_manual_747", "text": "There is no program in memory.\nThere was a problem starting a particular\nprogram with StartProgram (page 216).\nIf the gripper was forcing when this message\nappeared, overheating likely occurred. Let\nthe gripper cool down for a few minutes and\nsend the ResetError (page 197) command.\nThe gripper will stop applying a force; if it\nwas holding a part, the part might fall.\nA hardware problem was detected. Contact\nour technical support team.", "source": "meca500_programming_manual", "chunk_index": 747, "length": 438, "hash": "022d242a19bc6dd38aa62beea6ac45ec"}
{"id": "meca500_programming_manual_748", "text": "There is no program in memory.\nThere was a problem starting a particular\nprogram with", "source": "meca500_programming_manual", "chunk_index": 748, "length": 85, "hash": "bfc6396ba871f79482165c162c8afa8c"}
{"id": "meca500_programming_manual_749", "text": "(page 216).\nIf the gripper was forcing when this message\nappeared, overheating likely occurred. Let\nthe gripper cool down for a few minutes and", "source": "meca500_programming_manual", "chunk_index": 749, "length": 143, "hash": "1b8fbf1aa509ad6905a8cdc0954e8d2d"}
{"id": "meca500_programming_manual_750", "text": "(page 197) command.\nThe gripper will stop applying a force; if it\nwas holding a part, the part might fall.\nA hardware problem was detected. Contact\nour technical support team.", "source": "meca500_programming_manual", "chunk_index": 750, "length": 175, "hash": "fa7dedc51c0b47afe2fac8256339389f"}
{"id": "meca500_programming_manual_751", "text": "In case of internal, software error.\nExcessive motor torque was detected.", "source": "meca500_programming_manual", "chunk_index": 751, "length": 73, "hash": "924581dcdac41aa004470ad98e403d60"}
{"id": "meca500_programming_manual_752", "text": "In case of internal, software error.\nExcessive motor torque was detected.", "source": "meca500_programming_manual", "chunk_index": 752, "length": 73, "hash": "924581dcdac41aa004470ad98e403d60"}
{"id": "meca500_programming_manual_753", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 753, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_754", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 754, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_755", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 755, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_756", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 756, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_757", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 757, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_758", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 758, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_759", "text": "[3031][A previously\ncommand was incorrect.]", "source": "meca500_programming_manual", "chunk_index": 759, "length": 43, "hash": "44e62acc728c24e1f5ae6c8aa32e3a77"}
{"id": "meca500_programming_manual_760", "text": "[3031][A previously\ncommand was incorrect.]", "source": "meca500_programming_manual", "chunk_index": 760, "length": 43, "hash": "44e62acc728c24e1f5ae6c8aa32e3a77"}
{"id": "meca500_programming_manual_761", "text": "[3037][Pneumatic module error]", "source": "meca500_programming_manual", "chunk_index": 761, "length": 30, "hash": "d6840ef729d36a41edfba2fb62ec0c28"}
{"id": "meca500_programming_manual_762", "text": "[3037][Pneumatic module error]", "source": "meca500_programming_manual", "chunk_index": 762, "length": 30, "hash": "d6840ef729d36a41edfba2fb62ec0c28"}
{"id": "meca500_programming_manual_763", "text": "[3039][External\nupdated.]", "source": "meca500_programming_manual", "chunk_index": 763, "length": 25, "hash": "da46d9bc156888409869e69b21b72ea0"}
{"id": "meca500_programming_manual_764", "text": "[3039][External\nupdated.]", "source": "meca500_programming_manual", "chunk_index": 764, "length": 25, "hash": "da46d9bc156888409869e69b21b72ea0"}
{"id": "meca500_programming_manual_765", "text": "tool firmware must be", "source": "meca500_programming_manual", "chunk_index": 765, "length": 21, "hash": "e00b0f4aa6cad2fb3a60cd0c31f5f7fd"}
{"id": "meca500_programming_manual_766", "text": "tool firmware must be", "source": "meca500_programming_manual", "chunk_index": 766, "length": 21, "hash": "e00b0f4aa6cad2fb3a60cd0c31f5f7fd"}
{"id": "meca500_programming_manual_767", "text": "[3041][Robot\ncollision.]", "source": "meca500_programming_manual", "chunk_index": 767, "length": 24, "hash": "d488b0a68a5aa56fa3cc6239f9771052"}
{"id": "meca500_programming_manual_768", "text": "[3041][Robot\ncollision.]", "source": "meca500_programming_manual", "chunk_index": 768, "length": 24, "hash": "d488b0a68a5aa56fa3cc6239f9771052"}
{"id": "meca500_programming_manual_769", "text": "[3042][Detected\nfirmware update.\nfirmware again.]\n[3043][Excessive\nwith external tool.]", "source": "meca500_programming_manual", "chunk_index": 769, "length": 87, "hash": "95b81001e09ee430540a5997bce3e3fa"}
{"id": "meca500_programming_manual_770", "text": "[3042][Detected\nfirmware update.\nfirmware again.]\n[3043][Excessive\nwith external tool.]", "source": "meca500_programming_manual", "chunk_index": 770, "length": 87, "hash": "95b81001e09ee430540a5997bce3e3fa"}
{"id": "meca500_programming_manual_771", "text": "in\nPlease re-install", "source": "meca500_programming_manual", "chunk_index": 771, "length": 20, "hash": "e805f35c2d53decaa5bd76b7354719d0"}
{"id": "meca500_programming_manual_772", "text": "in\nPlease re-install", "source": "meca500_programming_manual", "chunk_index": 772, "length": 20, "hash": "e805f35c2d53decaa5bd76b7354719d0"}
{"id": "meca500_programming_manual_773", "text": "[3044][Abnormal communication error with\nexternal port.]", "source": "meca500_programming_manual", "chunk_index": 773, "length": 56, "hash": "e2edecee3ae5b3ba52b28a519b1cff6f"}
{"id": "meca500_programming_manual_774", "text": "[3044][Abnormal communication error with\nexternal port.]", "source": "meca500_programming_manual", "chunk_index": 774, "length": 56, "hash": "e2edecee3ae5b3ba52b28a519b1cff6f"}
{"id": "meca500_programming_manual_775", "text": "[3045][Imminent collision detected, robot\nwill decelerate now.]", "source": "meca500_programming_manual", "chunk_index": 775, "length": 63, "hash": "6403598cc00c0d78e2ebd2683f3e1fb0"}
{"id": "meca500_programming_manual_776", "text": "[3045][Imminent collision detected, robot\nwill decelerate now.]", "source": "meca500_programming_manual", "chunk_index": 776, "length": 63, "hash": "6403598cc00c0d78e2ebd2683f3e1fb0"}
{"id": "meca500_programming_manual_777", "text": "non-\na\n[3046][Power-supply\nPlease check\nresettable power error.\npower connection then power-cycle the\nrobot]\n[3047][Robot failed to mount drive. Please\ntry to power-cycle the robot. If the problem\npersists contact Mecademic support.]\n[3049][Robot error at work zone limit]", "source": "meca500_programming_manual", "chunk_index": 777, "length": 272, "hash": "739b3f7ec56827a30bc9a745df640bfb"}
{"id": "meca500_programming_manual_778", "text": "non-\na\n[3046][Power-supply\nPlease check\nresettable power error.\npower connection then power-cycle the\nrobot]\n[3047][Robot failed to mount drive. Please\ntry to power-cycle the robot. If the problem\npersists contact Mecademic support.]", "source": "meca500_programming_manual", "chunk_index": 778, "length": 233, "hash": "19f812e651479cc3efed9807665f53a9"}
{"id": "meca500_programming_manual_779", "text": "[3049][Robot error at work zone limit]", "source": "meca500_programming_manual", "chunk_index": 779, "length": 38, "hash": "6b4c0631439576d18941351e35a0b665"}
{"id": "meca500_programming_manual_780", "text": "When using EtherNet/IP, this code (received\nin the input tag assembly only) indicates\nthat the last command sent by TCP/IP was\ninvalid.\nA communication error with the pneumatic\nmodule was detected. Contact our technical\nsupport team.\nActivation has failed, because the robot has\ndetected that the firmware of the EOAT is\nolder than the firmware of the robot.\nSent when robot\nin error due to\nis\nimminent collision detected while severity\nis configured to generate an error.\nAn error was detected during the firmware\nupdate. Try to reinstall software.", "source": "meca500_programming_manual", "chunk_index": 780, "length": 549, "hash": "5753da6c29656d15fff97f17426527e3"}
{"id": "meca500_programming_manual_781", "text": "When using EtherNet/IP, this code (received\nin the input tag assembly only) indicates\nthat the last command sent by TCP/IP was\ninvalid.\nA communication error with the pneumatic\nmodule was detected. Contact our technical\nsupport team.\nActivation has failed, because the robot has\ndetected that the firmware of the EOAT is\nolder than the firmware of the robot.\nSent when robot\nin error due to\nis\nimminent collision detected while severity", "source": "meca500_programming_manual", "chunk_index": 781, "length": 436, "hash": "9a1ca88d941193e80f7a41518707ff9b"}
{"id": "meca500_programming_manual_782", "text": "is configured to generate an error.\nAn error was detected during the firmware\nupdate. Try to reinstall software.", "source": "meca500_programming_manual", "chunk_index": 782, "length": 112, "hash": "99308435db5d35b9f2aa3e8db8029601"}
{"id": "meca500_programming_manual_783", "text": "Too many communication errors were\ndetected between the I/O port and the\nEOAT connected to that port. This may\nmean that the cable is damaged and needs\nto be replaced or that it is not screwed\ntightly enough on either side. There may\nalso be a hardware problem with the I/O\nport.\nDetected internal communication errors\nwith the robot\u2019s I/O port. Please contact\nMecademic support for further diagnostic.\nSent when the robot is in error due to\nthe detection of an imminent collision while\nseverity is configured to Pause or Clear\nMotion.", "source": "meca500_programming_manual", "chunk_index": 783, "length": 535, "hash": "ac9db43094d1fb1db67d5c78d68b967f"}
{"id": "meca500_programming_manual_784", "text": "Too many communication errors were\ndetected between the I/O port and the\nEOAT connected to that port. This may\nmean that the cable is damaged and needs\nto be replaced or that it is not screwed\ntightly enough on either side. There may\nalso be a hardware problem with the I/O\nport.\nDetected internal communication errors\nwith the robot\u2019s I/O port. Please contact\nMecademic support for further diagnostic.\nSent when the robot is in error due to\nthe detection of an imminent collision while", "source": "meca500_programming_manual", "chunk_index": 784, "length": 486, "hash": "32d79089dbbeb01dfedb2a1fcd92f960"}
{"id": "meca500_programming_manual_785", "text": "severity is configured to Pause or Clear\nMotion.", "source": "meca500_programming_manual", "chunk_index": 785, "length": 48, "hash": "d79fade317245b81133a6ddcf0802c96"}
{"id": "meca500_programming_manual_786", "text": "Not available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 786, "length": 29, "hash": "79378929d0e42b94ba9aad902cdf340a"}
{"id": "meca500_programming_manual_787", "text": "Not available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 787, "length": 29, "hash": "79378929d0e42b94ba9aad902cdf340a"}
{"id": "meca500_programming_manual_788", "text": "Robot has unexpectedly booted in safe\nmode. Try to power-cycle the robot.", "source": "meca500_programming_manual", "chunk_index": 788, "length": 73, "hash": "9190f60eba83c67f395ff95c13473bb6"}
{"id": "meca500_programming_manual_789", "text": "Robot has unexpectedly booted in safe\nmode. Try to power-cycle the robot.", "source": "meca500_programming_manual", "chunk_index": 789, "length": 73, "hash": "9190f60eba83c67f395ff95c13473bb6"}
{"id": "meca500_programming_manual_790", "text": "Sent when robot\nin error due to\nis\nimminent work zone breach while severity\nis configured to generate an error.", "source": "meca500_programming_manual", "chunk_index": 790, "length": 111, "hash": "e147d77544c2b1d3da8666e4f9ce104c"}
{"id": "meca500_programming_manual_791", "text": "Sent when robot\nin error due to\nis\nimminent work zone breach while severity\nis configured to generate an error.", "source": "meca500_programming_manual", "chunk_index": 791, "length": 111, "hash": "e147d77544c2b1d3da8666e4f9ce104c"}
{"id": "meca500_programming_manual_792", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 792, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_793", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 793, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_794", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 794, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_795", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 795, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_796", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 796, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_797", "text": "Table 1 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 797, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "meca500_programming_manual_798", "text": "[3050][A power lost error was detected,\nrobot is going to shutdown]", "source": "meca500_programming_manual", "chunk_index": 798, "length": 67, "hash": "bd98803276d240d98fa987ad81dac29a"}
{"id": "meca500_programming_manual_799", "text": "[3050][A power lost error was detected,\nrobot is going to shutdown]", "source": "meca500_programming_manual", "chunk_index": 799, "length": 67, "hash": "bd98803276d240d98fa987ad81dac29a"}
{"id": "meca500_programming_manual_800", "text": "Not available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 800, "length": 29, "hash": "79378929d0e42b94ba9aad902cdf340a"}
{"id": "meca500_programming_manual_801", "text": "Not available on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 801, "length": 29, "hash": "79378929d0e42b94ba9aad902cdf340a"}
{"id": "meca500_programming_manual_802", "text": "The following provides a summary of all possible non-error responses to commands sent via\nthe control port. Some of these responses are also transmitted on the monitoring port, as\ndiscussed in the next section. Note that motion commands do not generate any non-error\nresponses, except for the optional EOB and EOM messages and any messages generated by\nthe SetCheckpoint (page 155) command.", "source": "meca500_programming_manual", "chunk_index": 802, "length": 390, "hash": "d59b307a13c9aa6184d3110c4cb256b7"}
{"id": "meca500_programming_manual_803", "text": "The following provides a summary of all possible non-error responses to commands", "source": "meca500_programming_manual", "chunk_index": 803, "length": 80, "hash": "0773f771cfb6abc801eb23b31ea03f6d"}
{"id": "meca500_programming_manual_804", "text": "sent via\nthe control port", "source": "meca500_programming_manual", "chunk_index": 804, "length": 25, "hash": "14d0e8cbc6d99b31c0c62737f21120ba"}
{"id": "meca500_programming_manual_805", "text": ". Some of these responses are also transmitted on the monitoring port, as\ndiscussed in the next section. Note that motion commands do not generate any non-error\nresponses, except for the optional EOB and EOM messages and any messages generated by\nthe", "source": "meca500_programming_manual", "chunk_index": 805, "length": 250, "hash": "d3acedf66a674e4cec87fc22a6122a7d"}
{"id": "meca500_programming_manual_806", "text": "Table 2: Possible responses to commands, sent on the control port", "source": "meca500_programming_manual", "chunk_index": 806, "length": 65, "hash": "bca071cf1e4911e1a1127e90f49fb2e7"}
{"id": "meca500_programming_manual_807", "text": "Table 2: Possible responses to commands, sent on the control port", "source": "meca500_programming_manual", "chunk_index": 807, "length": 65, "hash": "bca071cf1e4911e1a1127e90f49fb2e7"}
{"id": "meca500_programming_manual_808", "text": "[2000][Motors activated.]\n[2002][Homing done.]\n[2004][Motors deactivated.]", "source": "meca500_programming_manual", "chunk_index": 808, "length": 74, "hash": "11eb31a1a3cf2d9d05d469be579d54ae"}
{"id": "meca500_programming_manual_809", "text": "[2000][Motors activated.]\n[2002][Homing done.]\n[2004][Motors deactivated.]", "source": "meca500_programming_manual", "chunk_index": 809, "length": 74, "hash": "11eb31a1a3cf2d9d05d469be579d54ae"}
{"id": "meca500_programming_manual_810", "text": "[2005][The error was reset.]", "source": "meca500_programming_manual", "chunk_index": 810, "length": 28, "hash": "d2d9abf83ef0a464661441c105c90cfb"}
{"id": "meca500_programming_manual_811", "text": "[2005][The error was reset.]", "source": "meca500_programming_manual", "chunk_index": 811, "length": 28, "hash": "d2d9abf83ef0a464661441c105c90cfb"}
{"id": "meca500_programming_manual_812", "text": "[2006][There was no error to reset.]", "source": "meca500_programming_manual", "chunk_index": 812, "length": 36, "hash": "a6a62c0d4f62f8cebfde1882b7c2df06"}
{"id": "meca500_programming_manual_813", "text": "[2006][There was no error to reset.]", "source": "meca500_programming_manual", "chunk_index": 813, "length": 36, "hash": "a6a62c0d4f62f8cebfde1882b7c2df06"}
{"id": "meca500_programming_manual_814", "text": "[2007][as, hs, sm, es, pm, eob, eom]\n[2013][x, y, z , \u03b1, \u03b2, \u03b3]\n[2014][x, y, z , \u03b1, \u03b2, \u03b3]\n[2015][p]", "source": "meca500_programming_manual", "chunk_index": 814, "length": 98, "hash": "528f3f08ae0bf91799c3ad6e86fcdbee"}
{"id": "meca500_programming_manual_815", "text": "[2007][as, hs, sm, es, pm, eob, eom]\n[2013][x, y, z , \u03b1, \u03b2, \u03b3]\n[2014][x, y, z , \u03b1, \u03b2, \u03b3]\n[2015][p]", "source": "meca500_programming_manual", "chunk_index": 815, "length": 98, "hash": "528f3f08ae0bf91799c3ad6e86fcdbee"}
{"id": "meca500_programming_manual_816", "text": "[2028][e]\n[2029][cs, ce, cw]\n[2031][e]\n[2036][c\u209c]\n[2042][Motion paused.]\n[2043][Motion resumed.]\n[2044][The motion was cleared.]\n[2045][The simulation mode is enabled.]\n[2046][The simulation mode is disabled.]\n[2047][External tool simulation mode has changed.]", "source": "meca500_programming_manual", "chunk_index": 816, "length": 260, "hash": "c1da87c4e743c8b359566d80a793e2f3"}
{"id": "meca500_programming_manual_817", "text": "[2031][e]\n[2036][c\u209c]\n[2042][Motion paused.]\n[2043][Motion resumed.]\n[2044][The motion was cleared.]\n[2045][The simulation mode is enabled.]\n[2046][The simulation mode is disabled.]\n[2047][External tool simulation mode has changed.]", "source": "meca500_programming_manual", "chunk_index": 817, "length": 231, "hash": "916b93c7e166e8c96f8cacfae0e0d028"}
{"id": "meca500_programming_manual_818", "text": "[2049][Robot is in recovery mode]", "source": "meca500_programming_manual", "chunk_index": 818, "length": 33, "hash": "3c36043a4385f152dc1326f6d5010ef1"}
{"id": "meca500_programming_manual_819", "text": "[2049][Robot is in recovery mode]", "source": "meca500_programming_manual", "chunk_index": 819, "length": 33, "hash": "3c36043a4385f152dc1326f6d5010ef1"}
{"id": "meca500_programming_manual_820", "text": "[2050][Robot is not in recovery mode]", "source": "meca500_programming_manual", "chunk_index": 820, "length": 37, "hash": "7d980e9fcebba2c6729dd94ada7727f7"}
{"id": "meca500_programming_manual_821", "text": "[2050][Robot is not in recovery mode]", "source": "meca500_programming_manual", "chunk_index": 821, "length": 37, "hash": "7d980e9fcebba2c6729dd94ada7727f7"}
{"id": "meca500_programming_manual_822", "text": "ActivateRobot (page 184)\nHome (page 192)\nDeactivateRobot (page 188)\nResetError (page 197)", "source": "meca500_programming_manual", "chunk_index": 822, "length": 89, "hash": "4e852697e6a10bd0bdf63bd681ffcae9"}
{"id": "meca500_programming_manual_823", "text": "GetStatusRobot (page 290)\nGetWrf (page 266)\nGetTrf (page 264)\nSetTimeScaling\nGetTimeScaling (page 261)\nGetAutoConf (page 226)\nGetConf (page 235)\nGetAutoConfTurn (page 227)\nGetConfTurn (page 236)\nPauseMotion (page 195)\nResumeMotion (page 198)\nClearMotion (page 186)\nActivateSim (page 185)\nDeactivateSim (page 189)\nSetExtToolSim (page 328)\nSetRecoveryMode (page 211)", "source": "meca500_programming_manual", "chunk_index": 823, "length": 364, "hash": "95bb03d379404c8ba3ac5c5f2b90e87e"}
{"id": "meca500_programming_manual_824", "text": "SetTimeScaling\nGetTimeScaling", "source": "meca500_programming_manual", "chunk_index": 824, "length": 29, "hash": "3dcf4be5a98974b5c41ce8186f18a7ee"}
{"id": "meca500_programming_manual_825", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 825, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_826", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 826, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_827", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 827, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_828", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 828, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_829", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 829, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_830", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 830, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_831", "text": "[2051][Joint velocity/acceleration \u2026 will be limited to\n\u2026 due to recovery mode]", "source": "meca500_programming_manual", "chunk_index": 831, "length": 79, "hash": "c16dce713ce7b0452542a0cbffebcd7e"}
{"id": "meca500_programming_manual_832", "text": "[2051][Joint velocity/acceleration \u2026 will be limited to\n\u2026 due to recovery mode]", "source": "meca500_programming_manual", "chunk_index": 832, "length": 79, "hash": "c16dce713ce7b0452542a0cbffebcd7e"}
{"id": "meca500_programming_manual_833", "text": "MoveJointsVel\nMoveLinVelTrf\nSetCartAcc\nMoveLinVelWrf\nSetCartAngVel\n(page\nSetCartAcc\nSetJointAcc\n(page\nSetJointVel (page 163)\nSetEom (page 202)", "source": "meca500_programming_manual", "chunk_index": 833, "length": 142, "hash": "15506566dcf32b26c15116e5d2226750"}
{"id": "meca500_programming_manual_834", "text": "MoveJointsVel\nMoveLinVelTrf\nSetCartAcc\nMoveLinVelWrf\nSetCartAngVel", "source": "meca500_programming_manual", "chunk_index": 834, "length": 66, "hash": "c3e89a911763efe569aeebc8d259867f"}
{"id": "meca500_programming_manual_835", "text": "SetCartAcc\nSetJointAcc", "source": "meca500_programming_manual", "chunk_index": 835, "length": 22, "hash": "d9ea6090b5e2355330e4ce933aa22968"}
{"id": "meca500_programming_manual_836", "text": "138),\n145),\n152),\n146),\n153),\n152),\n161),", "source": "meca500_programming_manual", "chunk_index": 836, "length": 41, "hash": "08694ac8441a880e5f89377ff51c1f2f"}
{"id": "meca500_programming_manual_837", "text": "138),\n145),\n152),\n146),\n153),\n152),\n161),", "source": "meca500_programming_manual", "chunk_index": 837, "length": 41, "hash": "08694ac8441a880e5f89377ff51c1f2f"}
{"id": "meca500_programming_manual_838", "text": "[2052][End of movement is enabled.]", "source": "meca500_programming_manual", "chunk_index": 838, "length": 35, "hash": "aac50a1ef9677b48f08ae4681fdfb264"}
{"id": "meca500_programming_manual_839", "text": "[2052][End of movement is enabled.]", "source": "meca500_programming_manual", "chunk_index": 839, "length": 35, "hash": "aac50a1ef9677b48f08ae4681fdfb264"}
{"id": "meca500_programming_manual_840", "text": "[2053][End of movement is disabled.]", "source": "meca500_programming_manual", "chunk_index": 840, "length": 36, "hash": "51e1497b1ef66af7bbf6049e82ca917a"}
{"id": "meca500_programming_manual_841", "text": "[2053][End of movement is disabled.]", "source": "meca500_programming_manual", "chunk_index": 841, "length": 36, "hash": "51e1497b1ef66af7bbf6049e82ca917a"}
{"id": "meca500_programming_manual_842", "text": "[2054][End of block is enabled.]", "source": "meca500_programming_manual", "chunk_index": 842, "length": 32, "hash": "ede8a83542c6c482b33439b615e377a4"}
{"id": "meca500_programming_manual_843", "text": "[2054][End of block is enabled.]", "source": "meca500_programming_manual", "chunk_index": 843, "length": 32, "hash": "ede8a83542c6c482b33439b615e377a4"}
{"id": "meca500_programming_manual_844", "text": "[2055][End of block is disabled.]", "source": "meca500_programming_manual", "chunk_index": 844, "length": 33, "hash": "8e81e88e13bbbff9aec5669b14bcd792"}
{"id": "meca500_programming_manual_845", "text": "[2055][End of block is disabled.]", "source": "meca500_programming_manual", "chunk_index": 845, "length": 33, "hash": "8e81e88e13bbbff9aec5669b14bcd792"}
{"id": "meca500_programming_manual_846", "text": "[2056][bid, e]\n[2056][bid, e]\n[2060][Start saving program.]\n[2061][n commands saved.]\n[2063][Offline program n started.]", "source": "meca500_programming_manual", "chunk_index": 846, "length": 120, "hash": "18a4550f8817bda5d3146bc11b64992f"}
{"id": "meca500_programming_manual_847", "text": ", e]\n[2060][Start saving program.]\n[2061][n commands saved.]\n[2063][Offline program n started.]", "source": "meca500_programming_manual", "chunk_index": 847, "length": 95, "hash": "73032d46946f18579007aa709fa09f52"}
{"id": "meca500_programming_manual_848", "text": "[2064][Offline program looping is enabled.]", "source": "meca500_programming_manual", "chunk_index": 848, "length": 43, "hash": "471e57514ce9be617a598cb4b90a0cd0"}
{"id": "meca500_programming_manual_849", "text": "[2064][Offline program looping is enabled.]", "source": "meca500_programming_manual", "chunk_index": 849, "length": 43, "hash": "471e57514ce9be617a598cb4b90a0cd0"}
{"id": "meca500_programming_manual_850", "text": "[2065][Offline program looping is disabled.]", "source": "meca500_programming_manual", "chunk_index": 850, "length": 44, "hash": "dd31b1405a13af940992dd05ea7c6f9c"}
{"id": "meca500_programming_manual_851", "text": "[2065][Offline program looping is disabled.]", "source": "meca500_programming_manual", "chunk_index": 851, "length": 44, "hash": "dd31b1405a13af940992dd05ea7c6f9c"}
{"id": "meca500_programming_manual_852", "text": "[2080][n]\n[2081][vx.x.x]\n[2085][Command successful. \u2026]", "source": "meca500_programming_manual", "chunk_index": 852, "length": 54, "hash": "b69cc2ca6ba621d3be650f04932b1e60"}
{"id": "meca500_programming_manual_853", "text": "[2080][n]\n[2081][vx.x.x]", "source": "meca500_programming_manual", "chunk_index": 853, "length": 24, "hash": "5ba3e40517e87bd5b2260882b7a647fd"}
{"id": "meca500_programming_manual_854", "text": "[2085][Command successful. \u2026]", "source": "meca500_programming_manual", "chunk_index": 854, "length": 29, "hash": "09e50136562a310e87558889cfe3fb0a"}
{"id": "meca500_programming_manual_855", "text": "[2088][vx.x.x]\n[2083][robot\u2019s serial number]\n[2084][Meca500]\n[2086][vx.x.x]\n[2090][n, \u03b8n,min, \u03b8n,max]\n[2092][n]", "source": "meca500_programming_manual", "chunk_index": 855, "length": 111, "hash": "a878302b59584d409286ffb9f5aa5e5e"}
{"id": "meca500_programming_manual_856", "text": "[2088][vx.x.x]\n[2083][robot\u2019s serial number]\n[2084][Meca500]\n[2086][vx.x.x]\n[2090][n, \u03b8", "source": "meca500_programming_manual", "chunk_index": 856, "length": 87, "hash": "df4fc27d8b6635ca5029ec04577cd1cc"}
{"id": "meca500_programming_manual_857", "text": "[2093][User-defined joint limits enabled.]", "source": "meca500_programming_manual", "chunk_index": 857, "length": 42, "hash": "4777261ab2ce6280c11e6770f42de60c"}
{"id": "meca500_programming_manual_858", "text": "[2093][User-defined joint limits enabled.]", "source": "meca500_programming_manual", "chunk_index": 858, "length": 42, "hash": "4777261ab2ce6280c11e6770f42de60c"}
{"id": "meca500_programming_manual_859", "text": "[2093][User-defined joint limits disabled.]", "source": "meca500_programming_manual", "chunk_index": 859, "length": 43, "hash": "17255401c27224d47e46e2d0785ab2f0"}
{"id": "meca500_programming_manual_860", "text": "[2093][User-defined joint limits disabled.]", "source": "meca500_programming_manual", "chunk_index": 860, "length": 43, "hash": "17255401c27224d47e46e2d0785ab2f0"}
{"id": "meca500_programming_manual_861", "text": "GetIoSim (page 311)\nSetIoSim (page 333)\nStartSaving (page 217)\nStopSaving (page 219)\nStartProgram (page 216)\nStopSaving (page 219)", "source": "meca500_programming_manual", "chunk_index": 861, "length": 130, "hash": "168d69dd8f649b2ea59d184f00511ca4"}
{"id": "meca500_programming_manual_862", "text": "GetCmdPendingCount (page 269)\nGetFwVersion (page 238)\nResponse to various instantaneous\ncommands\nGetExtToolFwVersion (page 307)\nGetRobotSerial (page 259)\nGetProductType (page 254)\nGetExtToolFwVersion (page 307)\nGetJointLimits (page 240)\nSetJointLimits (page 203)\nSetJointLimitsCfg (page 204)", "source": "meca500_programming_manual", "chunk_index": 862, "length": 291, "hash": "0214021c0cb40813976a7a76df7bd191"}
{"id": "meca500_programming_manual_863", "text": "Response to various instantaneous\ncommands", "source": "meca500_programming_manual", "chunk_index": 863, "length": 42, "hash": "ed56f574a1dacc4de99eda775e3933c2"}
{"id": "meca500_programming_manual_864", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 864, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_865", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 865, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_866", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 866, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_867", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 867, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_868", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 868, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_869", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 869, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_870", "text": "[2094][e]\n[2095][s]\n[2096][Monitoring on control port enabled/disabled]\n[2097][n]\n[2113][q1, q2, q3\u2026]\n[2116][t]\n[2117][n1, n2, \u2026]", "source": "meca500_programming_manual", "chunk_index": 870, "length": 129, "hash": "5d0ccc88fe82102ace8f4fbdf3116e81"}
{"id": "meca500_programming_manual_871", "text": "[2094][e]\n[2095][s]\n[2096][Monitoring on control port enabled/disabled]\n[2097][n]\n[2113][q", "source": "meca500_programming_manual", "chunk_index": 871, "length": 90, "hash": "95361122b19dade5e8be3e23d1c34889"}
{"id": "meca500_programming_manual_872", "text": "\u2026]\n[2116][t]\n[2117][n", "source": "meca500_programming_manual", "chunk_index": 872, "length": 21, "hash": "93268cbe2f79b04c0e95be7f79bd3a14"}
{"id": "meca500_programming_manual_873", "text": "[2119][n1, n2, n3, n4, n5, n6]\n[2140][t]\n[2149][n]", "source": "meca500_programming_manual", "chunk_index": 873, "length": 50, "hash": "71ec23603ab53f2bfb5590b1cca9035a"}
{"id": "meca500_programming_manual_874", "text": "[2150][p]\n[2151][t]\n[2152][p]\n[2153][p]\n[2154][v]\n[2155][\u03c9]\n[2156][n]\n[2157][n]\n[2158][p]\n[2159][p]\n[2160][l, m]\n[2161][\u03c41, \u03c42, \u03c43, \u03c44 , \u03c45, \u03c46]\n[2162][dclosed, dopen]\n[2163][l, m]\n[2164][Workspace configuration set successfully.]\n[2165][xmin, ymin, zmin, xmax, ymax, zmax]\n[2166] [Workspace limits set successfully.]\n[2167][x, y, z, r]\n[2168][Tool sphere set successfully.]\n[2169][p]\n[2172][ph, pr]\n[2173][tp]", "source": "meca500_programming_manual", "chunk_index": 874, "length": 410, "hash": "7f464183c11821724165106603af5706"}
{"id": "meca500_programming_manual_875", "text": "[2150][p]\n[2151][t]\n[2152][p]\n[2153][p]\n[2154][v]\n[2155][\u03c9]\n[2156][n]\n[2157][n]\n[2158][p]\n[2159][p]\n[2160][l, m]\n[2161][\u03c4", "source": "meca500_programming_manual", "chunk_index": 875, "length": 121, "hash": "c560c45e36bbc17d93ac77ecb4519211"}
{"id": "meca500_programming_manual_876", "text": "]\n[2163][l, m]\n[2164][Workspace configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 876, "length": 64, "hash": "1e57a9a705bf539f0e89d36e996b1e73"}
{"id": "meca500_programming_manual_877", "text": "]\n[2166] [Workspace limits set successfully.]\n[2167][x, y, z, r]\n[2168][Tool sphere set successfully.]\n[2169][p]\n[2172][p", "source": "meca500_programming_manual", "chunk_index": 877, "length": 121, "hash": "8365165e4383afb2772a9adcc2813c33"}
{"id": "meca500_programming_manual_878", "text": "[2174][hstart, hend, hmin, hmax]\n[2175][vstart, pstart, vend, pend]", "source": "meca500_programming_manual", "chunk_index": 878, "length": 67, "hash": "209a2c8ba37a7ea43b1c60a20cc9c79d"}
{"id": "meca500_programming_manual_879", "text": "GetJointLimitsCfg (page 241)\nGetRobotName (page 258)\nSetCtrlPortMonitoring (page 200)\nSyncCmdQueue (page 221)\nGetModelJointLimits (page 244)\nGetMonitoringInterval (page 245)\nGetRealTimeMonitoring\n(page\nSetRealTimeMonitoring\n(page 209)\nGetNetworkOptions (page 251)\nGetRtc (page 288)\nGetCheckpointDiscarded\n(page 234)\nGetBlending (page 228)\nGetVelTimeout (page 265)\nGetJointVel (page 242)\nGetJointAcc (page 239)\nGetCartLinVel (page 232)\nGetCartAngVel (page 231)\nGetCartAcc (page 230)\nGetCheckpoint (page 233)\nGetGripperForce (page 308)\nGetGripperVel (page 310)\nGetTorqueLimitsCfg (page 263)\nGetTorqueLimits (page 262)\nGetGripperForce (page 308)\nGetWorkZoneCfg (page 298)\nSetWorkZoneCfg (page 303)\nGetWorkZoneLimits (page 299)\nSetWorkZoneLimits (page 305)\nGetToolSphere (page 297)\nSetToolSphere (page 302)\nGetJointVelLimit (page 243)\nGetVacuumThreshold (page 323)\nGetVacuumPurgeDuration\n(page 322)\nGetMoveJumpHeight (page 249)\nGetMoveJumpApproachVel\n(page 248)\nGetOperationMode (page 270)", "source": "meca500_programming_manual", "chunk_index": 879, "length": 985, "hash": "6b09f08cf801ca114e6c13d2f769a7f7"}
{"id": "meca500_programming_manual_880", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 880, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_881", "text": "GetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 881, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "meca500_programming_manual_882", "text": "GetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 882, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "meca500_programming_manual_883", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 883, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_884", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 884, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_885", "text": "GetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 885, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "meca500_programming_manual_886", "text": "GetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 886, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "meca500_programming_manual_887", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 887, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_888", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 888, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_889", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 889, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_890", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 890, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_891", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 891, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_892", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 892, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_893", "text": "[2177][l]\n[2178][PStop2 configuration set successfully]\n[2179][l]\n[2181][l]\n[2182][v, g1, oid,1, g2, oid,2]\n[2183][v, g, oid]\n[2189][m]\n[2190][s]\n[2191][t]\n[2192][t]\n[2200][t, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]\n[2201][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2202][t, \u03c91, \u03c92, \u03c93, \u03c94, \u03c95, \u03c96]\n[2203][t, \u03c41, \u03c42, \u03c43, \u03c44, \u03c45, \u03c46]\n[2204][t, \u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y, \u03c9z]\n[2208][t, cs, ce, cw]\n[2209][t, ct]\n[2210][t, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]\n[2211][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2212][t, \u03c91, \u03c92, \u03c93, \u03c94, \u03c95, \u03c96]\n[2213][t, \u03c41, \u03c42, \u03c43, \u03c44, \u03c45, \u03c46]\n[2214][t, \u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y \u03c9z]\n[2218][t, cs, ce, cw]\n[2219][t, ct]\n[2220][t, n, ax, ay, az]\n[2228][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2229][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2300][t, simType, phyType, hs, es, oh]\n[2310][t, v1, v2]\n[2320][t, hp, dr, gc, go]\n[2321][t, p]\n[2322][t, d]\n[2330][t, bid, present, simMode, errorCode]\n[2340][t, bid, p1, p2, p3, p4, p5, p6, p7, p8]\n[2341][t, bid, p1, p2, p3, p4, p5, p6, p7, p8]\n[2342][t, v, h, p]\n[2343][t, p]\n[3000][Connected to \u2026 x_x_x.x.x.]\n[3000][Connected to \u2026 x_x_x.x.x.]", "source": "meca500_programming_manual", "chunk_index": 893, "length": 987, "hash": "78276f40366d817559c5a47d0ab32ffb"}
{"id": "meca500_programming_manual_894", "text": "[2177][l]\n[2178][PStop2 configuration set successfully]\n[2179][l]\n[2181][l]\n[2182][v, g", "source": "meca500_programming_manual", "chunk_index": 894, "length": 87, "hash": "02989d263ac5af77769c32fe7c9e11db"}
{"id": "meca500_programming_manual_895", "text": "]\n[2189][m]\n[2190][s]\n[2191][t]\n[2192][t]\n[2200][t, \u03b8", "source": "meca500_programming_manual", "chunk_index": 895, "length": 53, "hash": "45411673cb2c56ad239b5a44cfeef500"}
{"id": "meca500_programming_manual_896", "text": "]\n[2201][t, x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 896, "length": 29, "hash": "59d498faee37305873c0342394420d10"}
{"id": "meca500_programming_manual_897", "text": "]\n[2204][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "meca500_programming_manual", "chunk_index": 897, "length": 22, "hash": "145a5d428eed75377f19b7d2fa449123"}
{"id": "meca500_programming_manual_898", "text": "]\n[2211][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2212][t, \u03c9", "source": "meca500_programming_manual", "chunk_index": 898, "length": 41, "hash": "eb663a7a1829c5e787b015ef6923976d"}
{"id": "meca500_programming_manual_899", "text": "]\n[2214][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "meca500_programming_manual", "chunk_index": 899, "length": 22, "hash": "f7b95467fecb9e739ea396142ac57094"}
{"id": "meca500_programming_manual_900", "text": "]\n[2228][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2229][t, x, y, z, \u03b1, \u03b2, \u03b3]\n[2300][t, simType, phyType, hs, es, oh]\n[2310][t, v", "source": "meca500_programming_manual", "chunk_index": 900, "length": 109, "hash": "f85128964c66bff66e2ecc00f44ca05c"}
{"id": "meca500_programming_manual_901", "text": "[2320][t, hp, dr, gc, go]\n[2321][t, p]\n[2322][t, d]\n[2330][t, b", "source": "meca500_programming_manual", "chunk_index": 901, "length": 63, "hash": "c36f99ed8f6e8b932a7e7449f07c2f65"}
{"id": "meca500_programming_manual_902", "text": ", present, simMode, errorCode]\n[2340][t, b", "source": "meca500_programming_manual", "chunk_index": 902, "length": 42, "hash": "810f040f328f6ffda5849162604927b1"}
{"id": "meca500_programming_manual_903", "text": "]\n[2342][t, v, h, p]\n[2343][t, p]\n[3000][Connected to \u2026 x_x_x.x.x.]", "source": "meca500_programming_manual", "chunk_index": 903, "length": 67, "hash": "f0615125a63b93d456ff09f0c22510f1"}
{"id": "meca500_programming_manual_904", "text": "[3000][Connected to \u2026 x_x_x.x.x.]", "source": "meca500_programming_manual", "chunk_index": 904, "length": 33, "hash": "3dd0277dd838ef6752cdaf962d111285"}
{"id": "meca500_programming_manual_905", "text": "[3004][End of movement.]", "source": "meca500_programming_manual", "chunk_index": 905, "length": 24, "hash": "7850f4a5fcb0962b4461ba105b042d88"}
{"id": "meca500_programming_manual_906", "text": "[3004][End of movement.]", "source": "meca500_programming_manual", "chunk_index": 906, "length": 24, "hash": "7850f4a5fcb0962b4461ba105b042d88"}
{"id": "meca500_programming_manual_907", "text": "ConnectionWatchdog (page 187)\nSetPStop2Cfg (page 208)\nGetPStop2Cfg (page 252)\nGetCollisionCfg (page 295)\nGetCollisionStatus (page 296)\nGetWorkZoneStatus (page 300)\nGetMoveMode (page 250)\nGetMoveDurationCfg (page 247)\nGetMoveDuration (page 246)\nGetPayload (page 253)\nGetRtTargetJointPos (page 283)\nGetRtTargetCartPos (page 279)\nGetRtTargetJointVel (page 285)\nGetRtTargetJointTorq (page 284)\nGetRtTargetCartVel (page 280)\nGetRtTargetConf (page 281)\nGetRtTargetConfTurn (page 282)\nGetRtJointPos (page 276)\nGetRtCartPos (page 272)\nGetRtJointVel (page 278)\nGetRtJointTorq (page 277)\nGetRtCartVel (page 273)\nGetRtConf (page 274)\nGetRtConfTurn (page 275)\nGetRtAccelerometer (page 271)\nGetRtWrf (page 287)\nGetRtTrf (page 286)\nGetRtExtToolStatus (page 312)\nGetRtValveState (page 321)\nGetRtGripperState (page 315)\nGetRtGripperForce (page 313)\nGetRtGripperPos (page 314)\nGetRtIoStatus (page 317)\nGetRtOutputState (page 318)\nGetRtInputState (page 316)\nGetRtVacuumState (page 320)\nGetRtVacuumPressure (page 319)\nConfirms connection to robot.\nConfirms connection to robot. Sent\nonly at initial connection.\nThe robot has stopped moving.", "source": "meca500_programming_manual", "chunk_index": 907, "length": 1121, "hash": "b468f9b2db03ff9a92ed8027fb629752"}
{"id": "meca500_programming_manual_908", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 908, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_909", "text": "(page 319)\nConfirms connection to robot.", "source": "meca500_programming_manual", "chunk_index": 909, "length": 40, "hash": "fd4e604d940a2ba3d2197567757f6a0f"}
{"id": "meca500_programming_manual_910", "text": "Confirms connection to robot. Sent\nonly at initial connection.\nThe robot has stopped moving.", "source": "meca500_programming_manual", "chunk_index": 910, "length": 92, "hash": "bf330a6c6ae72c2775832f0f0c9e128e"}
{"id": "meca500_programming_manual_911", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 911, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_912", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 912, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_913", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 913, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_914", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 914, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_915", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 915, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_916", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 916, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_917", "text": "[3012][End of block.]", "source": "meca500_programming_manual", "chunk_index": 917, "length": 21, "hash": "75ba7b7ff787edf4878a3034613f1261"}
{"id": "meca500_programming_manual_918", "text": "[3012][End of block.]", "source": "meca500_programming_manual", "chunk_index": 918, "length": 21, "hash": "75ba7b7ff787edf4878a3034613f1261"}
{"id": "meca500_programming_manual_919", "text": "[3013][End of offline program.]\n[3028][s]\n[3030][n]\n[3032][2/1/0]", "source": "meca500_programming_manual", "chunk_index": 919, "length": 65, "hash": "b214778c5fa9d2ae1fc16eee1c2fb31b"}
{"id": "meca500_programming_manual_920", "text": "[3013][End of offline program.]\n[3028][s]\n[3030][n]\n[3032][2/1/0]", "source": "meca500_programming_manual", "chunk_index": 920, "length": 65, "hash": "b214778c5fa9d2ae1fc16eee1c2fb31b"}
{"id": "meca500_programming_manual_921", "text": "[3035][TCP dump capture started for x seconds]", "source": "meca500_programming_manual", "chunk_index": 921, "length": 46, "hash": "5bf909f6e3068a49ea9ac89e89897453"}
{"id": "meca500_programming_manual_922", "text": "[3035][TCP dump capture started for x seconds]", "source": "meca500_programming_manual", "chunk_index": 922, "length": 46, "hash": "5bf909f6e3068a49ea9ac89e89897453"}
{"id": "meca500_programming_manual_923", "text": "[3036][TCP dump capture stopped]", "source": "meca500_programming_manual", "chunk_index": 923, "length": 32, "hash": "76c7b335ef9be7330b342ad8fc40749b"}
{"id": "meca500_programming_manual_924", "text": "[3036][TCP dump capture stopped]", "source": "meca500_programming_manual", "chunk_index": 924, "length": 32, "hash": "76c7b335ef9be7330b342ad8fc40749b"}
{"id": "meca500_programming_manual_925", "text": "[3051][Move duration too short: \u2026 is too short.\nFastest possible \u2026 Command: \u2026]", "source": "meca500_programming_manual", "chunk_index": 925, "length": 78, "hash": "147fe91fec430bebe6113ed104844aa8"}
{"id": "meca500_programming_manual_926", "text": "[3051][Move duration too short: \u2026 is too short.\nFastest possible \u2026 Command: \u2026]", "source": "meca500_programming_manual", "chunk_index": 926, "length": 78, "hash": "147fe91fec430bebe6113ed104844aa8"}
{"id": "meca500_programming_manual_927", "text": "[3070][0/1/2]\n[3080][0/1/2]\n[3081][0/1/2]\n[3082][0/1/2]", "source": "meca500_programming_manual", "chunk_index": 927, "length": 55, "hash": "82614a21db4dea11692658bc7c17a4ad"}
{"id": "meca500_programming_manual_928", "text": "[3070][0/1/2]\n[3080][0/1/2]\n[3081][0/1/2]\n[3082][0/1/2]", "source": "meca500_programming_manual", "chunk_index": 928, "length": 55, "hash": "82614a21db4dea11692658bc7c17a4ad"}
{"id": "meca500_programming_manual_929", "text": "No motion command in queue and\nrobot joints do not move.\nThe offline program has finished.\nA torque limit was exceeded.\nCheckpoint n was reached.\nA P-Stop 2 is active (1), is no longer\nactive but needs to be reset (2) or\nis already cleared (0).\nSent to indicate that the requested\nTCP dump capture has started and\nconfirms the maximum duration of\nx seconds.\nSent after a previously started TCP\ndump capture has finished.\nCheckpoint n is discarded before\nreaching it, because motion was\ncleared.\nin time-\nSent by the robot\nrequested\nbased move mode,\nduration\nto meet,\nimpossible\nand severity was set to 4 with\nSetMoveDurationCfg (page 168).\nResponse\nGetSafetyStopStatus(3069)\n(page 289).\nNot available on the Meca500.\nNot available on the Meca500.\nNot available on the Meca500.\nResponse\nGetSafetyStopStatus(3082)\n(page 289).\nResponse\nGetSafetyStopStatus(3083)\n(page 289).\nResponse\nGetSafetyStopStatus(3084)\n(page 289).\nResponse\nGetSafetyStopStatus(3085)\n(page 289).", "source": "meca500_programming_manual", "chunk_index": 929, "length": 964, "hash": "5e4508240a2c29456571ed5c83265c9c"}
{"id": "meca500_programming_manual_930", "text": "No motion command in queue and\nrobot joints do not move.\nThe offline program has finished.\nA torque limit was exceeded.\nCheckpoint n was reached.\nA P-Stop 2 is active (1), is no longer\nactive but needs to be reset (2) or\nis already cleared (0).\nSent to indicate that the requested\nTCP dump capture has started and\nconfirms the maximum duration of\nx seconds.", "source": "meca500_programming_manual", "chunk_index": 930, "length": 357, "hash": "ccc9e78934940c5e5281f02edbc8e44f"}
{"id": "meca500_programming_manual_931", "text": "Sent after a previously started TCP\ndump capture has finished.\nCheckpoint n is discarded before\nreaching it, because motion was\ncleared.\nin time-\nSent by the robot\nrequested\nbased move mode,\nduration\nto meet,\nimpossible\nand severity was set to 4 with", "source": "meca500_programming_manual", "chunk_index": 931, "length": 250, "hash": "e4a36eb3800efe8ee55c0f061182b8d5"}
{"id": "meca500_programming_manual_932", "text": "(page 168).\nResponse", "source": "meca500_programming_manual", "chunk_index": 932, "length": 20, "hash": "7b46eaa631555cf018898a88eb5173fa"}
{"id": "meca500_programming_manual_933", "text": "GetSafetyStopStatus(3069)", "source": "meca500_programming_manual", "chunk_index": 933, "length": 25, "hash": "1f3845e26ac34870912bb38c1c8d2bcb"}
{"id": "meca500_programming_manual_934", "text": "(page 289).\nNot available on the Meca500.\nNot available on the Meca500.\nNot available on the Meca500.\nResponse", "source": "meca500_programming_manual", "chunk_index": 934, "length": 110, "hash": "fd392197d458d7a69936c0cbfdf8f5ba"}
{"id": "meca500_programming_manual_935", "text": "GetSafetyStopStatus(3082)", "source": "meca500_programming_manual", "chunk_index": 935, "length": 25, "hash": "36ec46cbdb9b6dc01f4942901de6e45d"}
{"id": "meca500_programming_manual_936", "text": "(page 289).\nResponse", "source": "meca500_programming_manual", "chunk_index": 936, "length": 20, "hash": "56bdc3b734e2982464f31b4e856862dc"}
{"id": "meca500_programming_manual_937", "text": "GetSafetyStopStatus(3083)", "source": "meca500_programming_manual", "chunk_index": 937, "length": 25, "hash": "77b2e71fe6dd0516c99066239e9ebbd2"}
{"id": "meca500_programming_manual_938", "text": "(page 289).\nResponse", "source": "meca500_programming_manual", "chunk_index": 938, "length": 20, "hash": "56bdc3b734e2982464f31b4e856862dc"}
{"id": "meca500_programming_manual_939", "text": "GetSafetyStopStatus(3084)", "source": "meca500_programming_manual", "chunk_index": 939, "length": 25, "hash": "49b397688b980d614061710b946e30b0"}
{"id": "meca500_programming_manual_940", "text": "(page 289).\nResponse", "source": "meca500_programming_manual", "chunk_index": 940, "length": 20, "hash": "56bdc3b734e2982464f31b4e856862dc"}
{"id": "meca500_programming_manual_941", "text": "GetSafetyStopStatus(3085)", "source": "meca500_programming_manual", "chunk_index": 941, "length": 25, "hash": "ad8769df0898099db5223c4c3e81ec26"}
{"id": "meca500_programming_manual_942", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 942, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_943", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 943, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_944", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 944, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_945", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 945, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_946", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 946, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_947", "text": "Table 2 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 947, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "meca500_programming_manual_948", "text": "Response\nGetSafetyStopStatus(3086)\n(page 289).\nResponse\nGetSafetyStopStatus(3087)\n(page 289).", "source": "meca500_programming_manual", "chunk_index": 948, "length": 93, "hash": "b022260d51039cae8db65a28893c1ae7"}
{"id": "meca500_programming_manual_949", "text": "GetSafetyStopStatus(3086)", "source": "meca500_programming_manual", "chunk_index": 949, "length": 25, "hash": "074105553509eb6b021a461a430a0961"}
{"id": "meca500_programming_manual_950", "text": "(page 289).\nResponse", "source": "meca500_programming_manual", "chunk_index": 950, "length": 20, "hash": "56bdc3b734e2982464f31b4e856862dc"}
{"id": "meca500_programming_manual_951", "text": "GetSafetyStopStatus(3087)", "source": "meca500_programming_manual", "chunk_index": 951, "length": 25, "hash": "75be2a4541067b66a07d061fa35559f3"}
{"id": "meca500_programming_manual_952", "text": "Monitoring port messages", "source": "meca500_programming_manual", "chunk_index": 952, "length": 24, "hash": "14ee218f352317ebff67027896431ec9"}
{"id": "meca500_programming_manual_953", "text": "Monitoring port messages", "source": "meca500_programming_manual", "chunk_index": 953, "length": 24, "hash": "14ee218f352317ebff67027896431ec9"}
{"id": "meca500_programming_manual_954", "text": "Mecademic robots are configured to send immediate feedback over TCP port 10001, also\nknown as the monitoring port. Several types of messages are transmitted via this port, as\nshown in Table 3.", "source": "meca500_programming_manual", "chunk_index": 954, "length": 192, "hash": "e90a80c50b0d2ede87edf2f198b12ecd"}
{"id": "meca500_programming_manual_955", "text": "Mecademic robots are configured to send immediate feedback over TCP port 10001, also\nknown as the monitoring port. Several types of messages are transmitted via this port, as", "source": "meca500_programming_manual", "chunk_index": 955, "length": 174, "hash": "6b41f1f1c3f5a48747710b26e9abff4e"}
{"id": "meca500_programming_manual_956", "text": "Most messages related to state changes are sent either as soon as the state changes or upon\nestablishing a connection. These messages are marked with a tick in the \u201cchg\u201d column of\nTable 3.", "source": "meca500_programming_manual", "chunk_index": 956, "length": 188, "hash": "4ecb4a47b6ed18df44e3a87c9a57bc78"}
{"id": "meca500_programming_manual_957", "text": "Most messages related to state changes are sent either as soon as the state changes or upon\nestablishing a connection. These messages are marked with a tick in the \u201cchg\u201d column of\nTable 3.", "source": "meca500_programming_manual", "chunk_index": 957, "length": 188, "hash": "4ecb4a47b6ed18df44e3a87c9a57bc78"}
{"id": "meca500_programming_manual_958", "text": "Some messages are sent periodically (every 15 ms or as defined by the SetMonitoringInterval\n(page 205) command) and are marked with a tick in the \u201cprd\u201d column of Table 3.", "source": "meca500_programming_manual", "chunk_index": 958, "length": 170, "hash": "d91914af6c54e4191dde1d5ccfb7c452"}
{"id": "meca500_programming_manual_959", "text": "Some messages are sent periodically (every 15 ms or as defined by the", "source": "meca500_programming_manual", "chunk_index": 959, "length": 69, "hash": "9cc397d032165f3f7cc4f1e00ddddc2d"}
{"id": "meca500_programming_manual_960", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 960, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_961", "text": "(page 205) command) and are marked with a tick in the \u201cprd\u201d column of Table 3.", "source": "meca500_programming_manual", "chunk_index": 961, "length": 78, "hash": "de2f49e56b6014908c65f6ea95705da8"}
{"id": "meca500_programming_manual_962", "text": "Other messages, which are neither state-related nor periodic, are sent as appropriate when\nspecific conditions occur on the robot. Some of these messages are also sent upon connection.", "source": "meca500_programming_manual", "chunk_index": 962, "length": 184, "hash": "d003c68769f77b9b404dd619abf26e03"}
{"id": "meca500_programming_manual_963", "text": "Other messages, which are neither state-related nor periodic, are sent as appropriate when\nspecific conditions occur on the robot. Some of these messages are also sent upon connection.", "source": "meca500_programming_manual", "chunk_index": 963, "length": 184, "hash": "d003c68769f77b9b404dd619abf26e03"}
{"id": "meca500_programming_manual_964", "text": "Additionally, note that some messages are optional and will not be sent by default unless\nexplicitly enabled using the SetRealTimeMonitoring (page 209) command. Optional messages\nare marked with a tick in the \u201copt\u201d column of Table 3.", "source": "meca500_programming_manual", "chunk_index": 964, "length": 233, "hash": "034875d6de9eb209a885833cc2ded977"}
{"id": "meca500_programming_manual_965", "text": "Additionally, note that some messages are optional and will not be sent by default unless\nexplicitly enabled using the", "source": "meca500_programming_manual", "chunk_index": 965, "length": 118, "hash": "a45e6ccd6dd9149f159617bb45caef74"}
{"id": "meca500_programming_manual_966", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 966, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_967", "text": "(page 209) command. Optional messages\nare marked with a tick in the \u201copt\u201d column of Table 3.", "source": "meca500_programming_manual", "chunk_index": 967, "length": 92, "hash": "fe25912e5995cfe2fecd37ff56cad001"}
{"id": "meca500_programming_manual_968", "text": "Table 3: Monitoring port messages", "source": "meca500_programming_manual", "chunk_index": 968, "length": 33, "hash": "feea0c175e76b58536171b3a9d1f4fa2"}
{"id": "meca500_programming_manual_969", "text": "Table 3: Monitoring port messages", "source": "meca500_programming_manual", "chunk_index": 969, "length": 33, "hash": "feea0c175e76b58536171b3a9d1f4fa2"}
{"id": "meca500_programming_manual_970", "text": "[2007][as, hs, sm, es, pm, eob,\neom]\n[2015][p]", "source": "meca500_programming_manual", "chunk_index": 970, "length": 46, "hash": "d65a5cb932859943890cf2417a32b4bb"}
{"id": "meca500_programming_manual_971", "text": "[2007][as, hs, sm, es, pm, eob,", "source": "meca500_programming_manual", "chunk_index": 971, "length": 31, "hash": "84c2294d31e56a363038abfb1212cc8a"}
{"id": "meca500_programming_manual_972", "text": "[2026][\u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]", "source": "meca500_programming_manual", "chunk_index": 972, "length": 30, "hash": "644dd6226b0da1e39c85f5c4bf73bb86"}
{"id": "meca500_programming_manual_973", "text": "[2027][x, y, z , \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 973, "length": 25, "hash": "5f288a312759165e3938ae0560215c10"}
{"id": "meca500_programming_manual_974", "text": "[2027][x, y, z , \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 974, "length": 25, "hash": "5f288a312759165e3938ae0560215c10"}
{"id": "meca500_programming_manual_975", "text": "[2044][The\ncleared.]\n[2049][Robot is in recovery\nmode]", "source": "meca500_programming_manual", "chunk_index": 975, "length": 54, "hash": "5d21e5412c4e1a4188b7b1fd488ba291"}
{"id": "meca500_programming_manual_976", "text": "[2044][The\ncleared.]", "source": "meca500_programming_manual", "chunk_index": 976, "length": 20, "hash": "a824133d4c1c2a2b8c1b886dcaaab67d"}
{"id": "meca500_programming_manual_977", "text": "[2049][Robot is in recovery\nmode]", "source": "meca500_programming_manual", "chunk_index": 977, "length": 33, "hash": "a729a6b42046bf76bed4e004570d9e5d"}
{"id": "meca500_programming_manual_978", "text": "response of GetStatusRobot", "source": "meca500_programming_manual", "chunk_index": 978, "length": 26, "hash": "506080d72a5cfc741bb110d05de8c51a"}
{"id": "meca500_programming_manual_979", "text": "response of GetTimeScaling", "source": "meca500_programming_manual", "chunk_index": 979, "length": 26, "hash": "abd18a31578b5e31a4dd2d385373aebb"}
{"id": "meca500_programming_manual_980", "text": "Same\nas\n(page 290)\nSame as\n(page 261)\nThe same as the response of the legacy\ncommand GetPose\nThe same as the response of the legacy\ncommand GetJoints\nSame as response of ClearMotion (page 186)", "source": "meca500_programming_manual", "chunk_index": 980, "length": 192, "hash": "a0af154133fc47355b3641cb1a932070"}
{"id": "meca500_programming_manual_981", "text": "(page 290)\nSame as\n(page 261)\nThe same as the response of the legacy\ncommand GetPose\nThe same as the response of the legacy\ncommand GetJoints\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 981, "length": 161, "hash": "b123c9e2ab40ce5177a83b83a0287a44"}
{"id": "meca500_programming_manual_982", "text": "Same as response of SetRecoveryMode\n(page 211)", "source": "meca500_programming_manual", "chunk_index": 982, "length": 46, "hash": "49cbb3909ddfe65cca54778142a4148e"}
{"id": "meca500_programming_manual_983", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 983, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_984", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 984, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_985", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 985, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_986", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 986, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_987", "text": "Table 3 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 987, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "meca500_programming_manual_988", "text": "Table 3 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 988, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "meca500_programming_manual_989", "text": "[2050][Robot\nrecovery mode]\n[2051][Joint\nvelocity/acceleration \u2026 will be\nlimited to \u2026 due to recovery\nmode]\n[2079][ge, hs, hp, lr, es, oh]", "source": "meca500_programming_manual", "chunk_index": 989, "length": 138, "hash": "6d6abd5dbc47f833da3725a285ac5d40"}
{"id": "meca500_programming_manual_990", "text": "[2050][Robot\nrecovery mode]\n[2051][Joint\nvelocity/acceleration \u2026 will be\nlimited to \u2026 due to recovery\nmode]\n[2079][ge, hs, hp, lr, es, oh]", "source": "meca500_programming_manual", "chunk_index": 990, "length": 138, "hash": "6d6abd5dbc47f833da3725a285ac5d40"}
{"id": "meca500_programming_manual_991", "text": "[2082][vx.x.x.xxxxx]\n[2086][vx.x.x]\n[2095][s]", "source": "meca500_programming_manual", "chunk_index": 991, "length": 45, "hash": "9017364c70ab200143d4fad2f0919c63"}
{"id": "meca500_programming_manual_992", "text": "[2082][vx.x.x.xxxxx]\n[2086][vx.x.x]\n[2095][s]", "source": "meca500_programming_manual", "chunk_index": 992, "length": 45, "hash": "9017364c70ab200143d4fad2f0919c63"}
{"id": "meca500_programming_manual_993", "text": "[2165][xmin, ymin, zmin, xmax,\nymax, zmax]\n[2167][x, y, z, r]", "source": "meca500_programming_manual", "chunk_index": 993, "length": 61, "hash": "436d801a12d75048560731de46fe451a"}
{"id": "meca500_programming_manual_994", "text": "]\n[2167][x, y, z, r]", "source": "meca500_programming_manual", "chunk_index": 994, "length": 20, "hash": "ccb7dfa0c770d8e4c49fed0c994db19a"}
{"id": "meca500_programming_manual_995", "text": "[2182][v, g1, oid,1, g2, oid,2]", "source": "meca500_programming_manual", "chunk_index": 995, "length": 31, "hash": "745544b1f58a059cf8184313d471db5f"}
{"id": "meca500_programming_manual_996", "text": "\u2713 \u2713 [2200][t, \u03b81, \u03b82, \u03b83 \u03b84, \u03b85, \u03b86]", "source": "meca500_programming_manual", "chunk_index": 996, "length": 36, "hash": "cb3f91b496e33db55bde013668b11e70"}
{"id": "meca500_programming_manual_997", "text": "\u2713 \u2713 [2201][t, x, y, z, \u03b1 , \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 997, "length": 32, "hash": "581bd02b673014e67c3477f4e994a843"}
{"id": "meca500_programming_manual_998", "text": "[2201][t, x, y, z, \u03b1 , \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 998, "length": 28, "hash": "c5f41a0c4108bd15d60971ff7f5bed8b"}
{"id": "meca500_programming_manual_999", "text": "\u2713 \u2713 [2202][t, \u03c91, \u03c92, \u03c93, \u03c94, \u03c95,", "source": "meca500_programming_manual", "chunk_index": 999, "length": 33, "hash": "dcdc1de5307e95e25de385b715391514"}
{"id": "meca500_programming_manual_1000", "text": "\u2713 \u2713 [2203][t, \u03c41, \u03c42, \u03c43, \u03c44, \u03c45, \u03c46]", "source": "meca500_programming_manual", "chunk_index": 1000, "length": 37, "hash": "7cf3a8449585d678060fe86bceb81650"}
{"id": "meca500_programming_manual_1001", "text": "\u2713 \u2713 [2204][t, \u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y, \u03c9z]", "source": "meca500_programming_manual", "chunk_index": 1001, "length": 34, "hash": "86b5f4a4b9db5b0480fdd27b7e75fc00"}
{"id": "meca500_programming_manual_1002", "text": "[2204][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "meca500_programming_manual", "chunk_index": 1002, "length": 20, "hash": "da956b26a2e3edf792395e0954fa4d24"}
{"id": "meca500_programming_manual_1003", "text": "[2208][t, cs, ce, cw]", "source": "meca500_programming_manual", "chunk_index": 1003, "length": 21, "hash": "6ef786f0d3e3937c406ad85c8f89672a"}
{"id": "meca500_programming_manual_1004", "text": "Same as response of SetRecoveryMode\n(page 211)\nResponse\nwhen\nvelocity/acceleration is\nrecovery mode", "source": "meca500_programming_manual", "chunk_index": 1004, "length": 99, "hash": "8f9c08e685fdbb0abe9837014fe9070a"}
{"id": "meca500_programming_manual_1005", "text": "(page 211)\nResponse\nwhen\nvelocity/acceleration is\nrecovery mode", "source": "meca500_programming_manual", "chunk_index": 1005, "length": 63, "hash": "f331a0e1f3ad6de52531500acacc7186"}
{"id": "meca500_programming_manual_1006", "text": "requested\nlimited due to", "source": "meca500_programming_manual", "chunk_index": 1006, "length": 24, "hash": "dba1a501818712f9abf172b1be30eeba"}
{"id": "meca500_programming_manual_1007", "text": "requested\nlimited due to", "source": "meca500_programming_manual", "chunk_index": 1007, "length": 24, "hash": "dba1a501818712f9abf172b1be30eeba"}
{"id": "meca500_programming_manual_1008", "text": "Same\nGetStatusGripper\nComplete firmware version of robot\nExternal firmware version\nSame\nas\n(page 258)\nSame as response of GetWorkZoneCfg\n(page 298)\nSame as response of GetWorkZoneLimits\n(page 299)\nSame\nas\n(page 297)\nas\nSame\n(page 295)\nSame as response of GetCollisionStatus\n(page 296)\nSame as response of GetWorkZoneStatus\n(page 300)\nSame\nas\n(page 250)\nSame as response of GetRtTargetJointPos\n(page 283)\nSame as response of GetRtTargetCartPos\n(page 279)\nSame as response of GetRtTargetJointVel\n(page 285)\nSame as response of GetRtTargetJointTorq\n(page 284)\nSame as response of GetRtTargetCartVel\n(page 280)\nSame as\n(page 281)\nSame as response of GetRtTargetConfTurn\n(page 282)", "source": "meca500_programming_manual", "chunk_index": 1008, "length": 676, "hash": "7ab0835ec890af265c0b1132f1036a53"}
{"id": "meca500_programming_manual_1009", "text": "Same\nGetStatusGripper\nComplete firmware version of robot\nExternal firmware version\nSame\nas\n(page 258)", "source": "meca500_programming_manual", "chunk_index": 1009, "length": 101, "hash": "0b2bafae5ed40199cde3983b39410354"}
{"id": "meca500_programming_manual_1010", "text": "(page 298)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1010, "length": 30, "hash": "8f8a5763032e3d3dc2903551fbd87f4d"}
{"id": "meca500_programming_manual_1011", "text": "(page 299)\nSame\nas\n(page 297)\nas\nSame\n(page 295)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1011, "length": 68, "hash": "e876117b36fa74f7701828d06b62991d"}
{"id": "meca500_programming_manual_1012", "text": "(page 296)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1012, "length": 30, "hash": "12623fb3c53f92daca5e3ad3e2826e35"}
{"id": "meca500_programming_manual_1013", "text": "(page 300)\nSame\nas\n(page 250)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1013, "length": 49, "hash": "130a14452f9197e6d4f60a968ca6feff"}
{"id": "meca500_programming_manual_1014", "text": "(page 283)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1014, "length": 30, "hash": "b8f353062f6c40d499a5fd63c89e34f1"}
{"id": "meca500_programming_manual_1015", "text": "(page 279)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1015, "length": 30, "hash": "4c007d133b0618b18b4a04cc077b09e4"}
{"id": "meca500_programming_manual_1016", "text": "(page 285)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1016, "length": 30, "hash": "ece2c3b73575839a9c4ef78d0575537f"}
{"id": "meca500_programming_manual_1017", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 1017, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_1018", "text": "(page 284)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1018, "length": 30, "hash": "76310ba5f7254b6aa568cd4ea5f54686"}
{"id": "meca500_programming_manual_1019", "text": "(page 280)\nSame as\n(page 281)", "source": "meca500_programming_manual", "chunk_index": 1019, "length": 29, "hash": "4e28ce2b275907f7ae72b662ba82b699"}
{"id": "meca500_programming_manual_1020", "text": "response of GetRtTargetConf", "source": "meca500_programming_manual", "chunk_index": 1020, "length": 27, "hash": "3f28d3a53a29a6b8298d53f89d6917bb"}
{"id": "meca500_programming_manual_1021", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1021, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1022", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1022, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1023", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1023, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1024", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1024, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1025", "text": "Table 3 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1025, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "meca500_programming_manual_1026", "text": "Table 3 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1026, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "meca500_programming_manual_1027", "text": "[2226][t,hardDecel,linDistance,angDistance]\n[2227][t,n]", "source": "meca500_programming_manual", "chunk_index": 1027, "length": 55, "hash": "9c2cc886bd96fbb4e155f2c85dd2a412"}
{"id": "meca500_programming_manual_1028", "text": "[2226][t,hardDecel,linDistance,angDistance]\n[2227][t,n]", "source": "meca500_programming_manual", "chunk_index": 1028, "length": 55, "hash": "9c2cc886bd96fbb4e155f2c85dd2a412"}
{"id": "meca500_programming_manual_1029", "text": "\u2713 \u2713 [2210][t, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]", "source": "meca500_programming_manual", "chunk_index": 1029, "length": 37, "hash": "97bec10252fb401b3e80fa66384d7aa2"}
{"id": "meca500_programming_manual_1030", "text": "\u2713 \u2713 [2211][t, x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 1030, "length": 31, "hash": "e75768ffbf073b5c8db144ffdfe73af7"}
{"id": "meca500_programming_manual_1031", "text": "[2211][t, x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 1031, "length": 27, "hash": "f6fe0864213325a6c1efad1d1ec3c996"}
{"id": "meca500_programming_manual_1032", "text": "\u2713 \u2713 [2212][t, \u03c91, \u03c92, \u03c93, \u03c94, \u03c95,", "source": "meca500_programming_manual", "chunk_index": 1032, "length": 33, "hash": "401de9b38bca0aecc31a558b7179696f"}
{"id": "meca500_programming_manual_1033", "text": "\u2713 \u2713 [2213][t, \u03c41, \u03c42, \u03c43, \u03c44, \u03c45, \u03c46]", "source": "meca500_programming_manual", "chunk_index": 1033, "length": 37, "hash": "cd0595466ce89a4bb464fd4e7d64716d"}
{"id": "meca500_programming_manual_1034", "text": "\u2713 \u2713 [2214][t, \u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y \u03c9z]", "source": "meca500_programming_manual", "chunk_index": 1034, "length": 33, "hash": "7b32f516477cd7b2a799bf1b194a5695"}
{"id": "meca500_programming_manual_1035", "text": "[2214][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "meca500_programming_manual", "chunk_index": 1035, "length": 20, "hash": "d888804bdefe0dc34ce4525fc306c0ec"}
{"id": "meca500_programming_manual_1036", "text": "[2218][t, cs, ce, cw]\n[2219][t, ct]", "source": "meca500_programming_manual", "chunk_index": 1036, "length": 35, "hash": "75eba96c2cc1cca85e165a9ead7a9f2f"}
{"id": "meca500_programming_manual_1037", "text": "\u2713 \u2713 [2220][t, n, ax, ay, az]", "source": "meca500_programming_manual", "chunk_index": 1037, "length": 28, "hash": "8241e56c8fad20ed1da0fc40f8004105"}
{"id": "meca500_programming_manual_1038", "text": "\u2713 [2228][t, x, y, z, \u03b1, \u03b2, \u03b3]\n\u2713 [2229][t, x, y, z, \u03b1, \u03b2, \u03b3]\n\u2713 [2230][t]", "source": "meca500_programming_manual", "chunk_index": 1038, "length": 71, "hash": "f38a5a248170bf6aa048793eb793c51b"}
{"id": "meca500_programming_manual_1039", "text": "[2228][t, x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 1039, "length": 27, "hash": "5ee01f32814af7b1487f4a2625b2e10f"}
{"id": "meca500_programming_manual_1040", "text": "[2229][t, x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 1040, "length": 27, "hash": "5059f6091c8ceed9037108e552a5ed2f"}
{"id": "meca500_programming_manual_1041", "text": "[2300][t, simType, phyType,\nhs, es, oh]\n[2310][t, v1, v2]", "source": "meca500_programming_manual", "chunk_index": 1041, "length": 57, "hash": "684b53a929cc65d98135e728bc6037b6"}
{"id": "meca500_programming_manual_1042", "text": "[2300][t, simType, phyType,\nhs, es, oh]\n[2310][t, v", "source": "meca500_programming_manual", "chunk_index": 1042, "length": 51, "hash": "72f6b2a56605181c13c4f30b335038eb"}
{"id": "meca500_programming_manual_1043", "text": "[2320][t, hp, dr, gc, go]", "source": "meca500_programming_manual", "chunk_index": 1043, "length": 25, "hash": "d597f7a6f5fd4da92ca23d93564a8623"}
{"id": "meca500_programming_manual_1044", "text": "[2320][t, hp, dr, gc, go]", "source": "meca500_programming_manual", "chunk_index": 1044, "length": 25, "hash": "d597f7a6f5fd4da92ca23d93564a8623"}
{"id": "meca500_programming_manual_1045", "text": "[2330][t,\nsimMode, errorCode]\n[2340][t, bid, p1, p2, p3, p4, p5,\np6, p7, p8]\n[2341][t, bid, p1, p2, p3, p4, p5,\np6, p7, p8]\n[2342][t, v, h, p]", "source": "meca500_programming_manual", "chunk_index": 1045, "length": 142, "hash": "dad595833768e3426185bafe7b1bd4a1"}
{"id": "meca500_programming_manual_1046", "text": "[2330][t,\nsimMode, errorCode]\n[2340][t, b", "source": "meca500_programming_manual", "chunk_index": 1046, "length": 41, "hash": "b7103202ce2fb8e3e385128f7bc97a98"}
{"id": "meca500_programming_manual_1047", "text": "]\n[2342][t, v, h, p]", "source": "meca500_programming_manual", "chunk_index": 1047, "length": 20, "hash": "af397b09b13055d3b66c9e1f7877b324"}
{"id": "meca500_programming_manual_1048", "text": "Same\nas\n(page 276)\nSame\nas\n(page 272)\nas\nSame\n(page 278)\nSame\nas\n(page 277)\nas\nSame\n(page 273)\nSame as response of GetRtConf (page 274)\nof GetRtConfTurn\nas\nSame\n(page 275)\nSame as response of GetRtAccelerometer\n(page 271)\nWhen starting or finishing hard deceleration\nWhen latest checkpoint reached changes\nSame as response of GetRtWrf (page 287)\nSame as response of GetRtTrf (page 286)\nSame as response of GetRtTrf (page 286)\nSame as response of GetRtExtToolStatus\n(page 312)\nSame as\n(page 321)\nSame as response of GetRtGripperState\n(page 315)\nSame as response of GetRtGripperForce\n(page 313)\nSame as\n(page 314)\nSame\nas\n(page 317)\nSame as response of GetRtOutputState\n(page 318)\nSame as\n(page 316)\nSame as response of GetRtVacuumState\n(page 320)\nSame as response of GetRtVacuumPressure\n(page 319)", "source": "meca500_programming_manual", "chunk_index": 1048, "length": 796, "hash": "e6c22c536c6f8f59c1d569ecdb1a9124"}
{"id": "meca500_programming_manual_1049", "text": "Same\nas\n(page 276)\nSame\nas\n(page 272)\nas\nSame\n(page 278)\nSame\nas\n(page 277)\nas\nSame\n(page 273)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1049, "length": 114, "hash": "767d2d1b457b29c3d57921e5ba52292a"}
{"id": "meca500_programming_manual_1050", "text": "(page 275)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1050, "length": 30, "hash": "c191bc18e91465f82caa353e285ca358"}
{"id": "meca500_programming_manual_1051", "text": "(page 271)\nWhen starting or finishing hard deceleration\nWhen latest checkpoint reached changes\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1051, "length": 114, "hash": "639d512972271195cd3a251ed4cd47e2"}
{"id": "meca500_programming_manual_1052", "text": "(page 287)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1052, "length": 30, "hash": "01c09c1eded95a84f01f606b420796af"}
{"id": "meca500_programming_manual_1053", "text": "(page 286)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1053, "length": 30, "hash": "4de9789784a8735ccfc723fa9186085e"}
{"id": "meca500_programming_manual_1054", "text": "(page 286)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1054, "length": 30, "hash": "4de9789784a8735ccfc723fa9186085e"}
{"id": "meca500_programming_manual_1055", "text": "(page 312)\nSame as\n(page 321)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1055, "length": 49, "hash": "3cd6cbe1f6d1903fbfe69273eedd0ab5"}
{"id": "meca500_programming_manual_1056", "text": "(page 315)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1056, "length": 30, "hash": "2cc9f0de852959a5d7a8d7c7e282c5c3"}
{"id": "meca500_programming_manual_1057", "text": "(page 314)\nSame\nas\n(page 317)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1057, "length": 49, "hash": "cc9e1d8602a2bc1ede5ef66bfa2b1258"}
{"id": "meca500_programming_manual_1058", "text": "(page 318)\nSame as\n(page 316)\nSame as response of", "source": "meca500_programming_manual", "chunk_index": 1058, "length": 49, "hash": "7ad0db40b06df54e3241572424883c70"}
{"id": "meca500_programming_manual_1059", "text": "response of GetRtGripperPos", "source": "meca500_programming_manual", "chunk_index": 1059, "length": 27, "hash": "6fcb78f0d14132af114330c5c6f9ab27"}
{"id": "meca500_programming_manual_1060", "text": "response of GetRtInputState", "source": "meca500_programming_manual", "chunk_index": 1060, "length": 27, "hash": "820ef64e4cca285c4e7cf9c1a5ee8bbf"}
{"id": "meca500_programming_manual_1061", "text": "response of GetRtValveState", "source": "meca500_programming_manual", "chunk_index": 1061, "length": 27, "hash": "284484f1436902c71788887b3422a38a"}
{"id": "meca500_programming_manual_1062", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1062, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1063", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1063, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1064", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1064, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1065", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1065, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1066", "text": "Table 3 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1066, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "meca500_programming_manual_1067", "text": "Table 3 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1067, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "meca500_programming_manual_1068", "text": "[3000][Connected\nx_x_x.x.x.]\n[3028][s]\n[3032][2/1/0]", "source": "meca500_programming_manual", "chunk_index": 1068, "length": 52, "hash": "73b6105957af4b7c2f64c4b407743243"}
{"id": "meca500_programming_manual_1069", "text": "[3000][Connected\nx_x_x.x.x.]\n[3028][s]\n[3032][2/1/0]", "source": "meca500_programming_manual", "chunk_index": 1069, "length": 52, "hash": "73b6105957af4b7c2f64c4b407743243"}
{"id": "meca500_programming_manual_1070", "text": "[3069][0/1/2]\n[3070][0/1/2]", "source": "meca500_programming_manual", "chunk_index": 1070, "length": 27, "hash": "0561256ed0f8c19dfb59995a4d3ad643"}
{"id": "meca500_programming_manual_1071", "text": "[3069][0/1/2]\n[3070][0/1/2]", "source": "meca500_programming_manual", "chunk_index": 1071, "length": 27, "hash": "0561256ed0f8c19dfb59995a4d3ad643"}
{"id": "meca500_programming_manual_1072", "text": "[3080][0/1/2]\n[3081][0/1/2]\n[3082][0/1/2]\n[3083][0/2]", "source": "meca500_programming_manual", "chunk_index": 1072, "length": 53, "hash": "6f19d5f1ba4a08ae441f574c02ee50ec"}
{"id": "meca500_programming_manual_1073", "text": "[3080][0/1/2]\n[3081][0/1/2]\n[3082][0/1/2]\n[3083][0/2]", "source": "meca500_programming_manual", "chunk_index": 1073, "length": 53, "hash": "6f19d5f1ba4a08ae441f574c02ee50ec"}
{"id": "meca500_programming_manual_1074", "text": "[3084][0/1]\n[3085][0/2]\n[3086][0/1/2]", "source": "meca500_programming_manual", "chunk_index": 1074, "length": 37, "hash": "406ff67792e829d2abfdee7472b668bf"}
{"id": "meca500_programming_manual_1075", "text": "[3084][0/1]\n[3085][0/2]\n[3086][0/1/2]", "source": "meca500_programming_manual", "chunk_index": 1075, "length": 37, "hash": "406ff67792e829d2abfdee7472b668bf"}
{"id": "meca500_programming_manual_1076", "text": "Confirms connection to robot", "source": "meca500_programming_manual", "chunk_index": 1076, "length": 28, "hash": "e41d7875e074f049d61de6410ebc5bb0"}
{"id": "meca500_programming_manual_1077", "text": "Confirms connection to robot", "source": "meca500_programming_manual", "chunk_index": 1077, "length": 28, "hash": "e41d7875e074f049d61de6410ebc5bb0"}
{"id": "meca500_programming_manual_1078", "text": "Torque limit exceeded status\nResponse to a change in the state of the P-\nStop 2 safety stop signal.\nSent by the robot whenever a drive is near to\nor in overload. The first value corresponds\nto drive 1, and so on, and it is 1 if the drive\nis near or in overload, and zero otherwise.\nn/a\nResponse to a change in the state of the E-\nStop safety stop signal\nn/a\nn/a\nn/a\nOccurs after robot is rebooted, and after\nReset button is pressed for the first time\nn/a\nn/a\nResponse to a change in the connection drop\nsafety signal change\nn/a", "source": "meca500_programming_manual", "chunk_index": 1078, "length": 527, "hash": "bd0f494d23226ddba6426898f7df1ae4"}
{"id": "meca500_programming_manual_1079", "text": "Torque limit exceeded status\nResponse to a change in the state of the P-\nStop 2 safety stop signal.\nSent by the robot whenever a drive is near to\nor in overload. The first value corresponds\nto drive 1, and so on, and it is 1 if the drive\nis near or in overload, and zero otherwise.\nn/a\nResponse to a change in the state of the E-\nStop safety stop signal", "source": "meca500_programming_manual", "chunk_index": 1079, "length": 353, "hash": "078f03c261a99b4488ab66b0cedb33cd"}
{"id": "meca500_programming_manual_1080", "text": "n/a\nn/a\nn/a\nOccurs after robot is rebooted, and after\nReset button is pressed for the first time\nn/a\nn/a\nResponse to a change in the connection drop\nsafety signal change\nn/a", "source": "meca500_programming_manual", "chunk_index": 1080, "length": 173, "hash": "6db2b9e25cff672cd59be3f76bda55cb"}
{"id": "meca500_programming_manual_1081", "text": "Note that multiple ASCII messages are separated by a single null-character and that there\nare no blank spaces in any of these messages. Here is an example of messages sent over TCP\nport 10001 in one interval (for clarity, the null-characters have been replaced by line breaks):", "source": "meca500_programming_manual", "chunk_index": 1081, "length": 277, "hash": "1eadf3cb2382862b88a44a64b9049ee8"}
{"id": "meca500_programming_manual_1082", "text": "Note that multiple ASCII messages are separated by a single null-character and that there\nare no blank spaces in any of these messages. Here is an example of messages sent over TCP\nport 10001 in one interval (for clarity, the null-characters have been replaced by line breaks):", "source": "meca500_programming_manual", "chunk_index": 1082, "length": 277, "hash": "1eadf3cb2382862b88a44a64b9049ee8"}
{"id": "meca500_programming_manual_1083", "text": "[2026][-102.6011,-0.0000,-78.9239,-0.0000,15.7848,110.3150]", "source": "meca500_programming_manual", "chunk_index": 1083, "length": 59, "hash": "b96b1f886fb1c2e3626e2bf313c28d83"}
{"id": "meca500_programming_manual_1084", "text": "[2026][-102.6011,-0.0000,-78.9239,-0.0000,15.7848,110.3150]", "source": "meca500_programming_manual", "chunk_index": 1084, "length": 59, "hash": "b96b1f886fb1c2e3626e2bf313c28d83"}
{"id": "meca500_programming_manual_1085", "text": "[2027][-3.7936,-16.9703,457.5125,26.3019,-5.6569,9.0367]", "source": "meca500_programming_manual", "chunk_index": 1085, "length": 56, "hash": "ccf33e9ffa06f929302f27bc52c6bfed"}
{"id": "meca500_programming_manual_1086", "text": "[2027][-3.7936,-16.9703,457.5125,26.3019,-5.6569,9.0367]", "source": "meca500_programming_manual", "chunk_index": 1086, "length": 56, "hash": "ccf33e9ffa06f929302f27bc52c6bfed"}
{"id": "meca500_programming_manual_1087", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1087, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1088", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1088, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1089", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1089, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1090", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1090, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1091", "text": "Errors detected by the robot", "source": "meca500_programming_manual", "chunk_index": 1091, "length": 28, "hash": "2b2ccec73d9c1250004941e4b9209c30"}
{"id": "meca500_programming_manual_1092", "text": "Errors detected by the robot", "source": "meca500_programming_manual", "chunk_index": 1092, "length": 28, "hash": "2b2ccec73d9c1250004941e4b9209c30"}
{"id": "meca500_programming_manual_1093", "text": "The robot enters error mode (page 357) when it encounters an issue while executing a\ncommand (see Table 1) or due to a hardware problem (e.g., exceeding a torque limit). When\nthis occurs, the robot sets the value of es (error state) to 1 in the response [2007][as, hs, sm,\nes, pm, eob, eom] of the GetStatusRobot (page 290).", "source": "meca500_programming_manual", "chunk_index": 1093, "length": 324, "hash": "fa0bde9bcc4b45e1fc7ab3169835eb56"}
{"id": "meca500_programming_manual_1094", "text": "(page 357) when it encounters an issue while executing a\ncommand (see Table 1) or due to a hardware problem (e.g., exceeding a torque limit). When\nthis occurs, the robot sets the value of es (error state) to 1 in the response [2007][as, hs, sm,\nes, pm, eob, eom] of the", "source": "meca500_programming_manual", "chunk_index": 1094, "length": 269, "hash": "e984bedd707fc9cd575fc80a9fc5ab05"}
{"id": "meca500_programming_manual_1095", "text": "This message can also be received over the monitoring port (see Section 4). Additionally,\nif you send other commands to the robot while it is in error mode, it will respond with the\nmessage [1011][The robot is in error.].", "source": "meca500_programming_manual", "chunk_index": 1095, "length": 221, "hash": "a2308a90daae7ad7249589fdbcd5e324"}
{"id": "meca500_programming_manual_1096", "text": "This message can also be received over the monitoring port (see Section 4). Additionally,\nif you send other commands to the robot while it is in error mode, it will respond with the\nmessage [1011][The robot is in error.].", "source": "meca500_programming_manual", "chunk_index": 1096, "length": 221, "hash": "a2308a90daae7ad7249589fdbcd5e324"}
{"id": "meca500_programming_manual_1097", "text": "When the robot is in error mode, all pending motion commands are canceled (i.e., the motion\nqueue is cleared). The robot stops and ignores subsequent commands but responds with the\n[1011][The robot is in error.] message until it receives a ResetError (page 197) command.", "source": "meca500_programming_manual", "chunk_index": 1097, "length": 270, "hash": "83219ca71348abee00f01f9528e6c5cf"}
{"id": "meca500_programming_manual_1098", "text": "When the robot is in error mode, all pending motion commands are canceled (i.e., the motion\nqueue is cleared). The robot stops and ignores subsequent commands but responds with the\n[1011][The robot is in error.] message until it receives a", "source": "meca500_programming_manual", "chunk_index": 1098, "length": 239, "hash": "c70606121a5795f56341569916f024e5"}
{"id": "meca500_programming_manual_1099", "text": "After the error is reset, the robot will execute all request commands and begin accumulating\nmotion commands in its motion queue. However, these motion commands will only be\nexecuted once the ResumeMotion (page 198) command is received by the robot.", "source": "meca500_programming_manual", "chunk_index": 1099, "length": 249, "hash": "72acfe904d5cdab3493a6fe743c89cc9"}
{"id": "meca500_programming_manual_1100", "text": "After the error is reset, the robot will execute all request commands and begin accumulating\nmotion commands in its motion queue. However, these motion commands will only be\nexecuted once the", "source": "meca500_programming_manual", "chunk_index": 1100, "length": 191, "hash": "f358f6fa2412f125433cc72e3195034c"}
{"id": "meca500_programming_manual_1101", "text": "(page 198) command is received by the robot.", "source": "meca500_programming_manual", "chunk_index": 1101, "length": 44, "hash": "40f1330c1e0c439e2bdd39b2839ed90f"}
{"id": "meca500_programming_manual_1102", "text": "As soon as the externally wired SWStop is activated (see the robot\u2019s user manual), the robot\nmotion is immediately decelerated to a stop, and the response [3032][1] is sent by the robot.\nThe motors and the EOAT remain active (i.e., the brakes are not applied) but stay immobilized\nuntil the stop is reset.", "source": "meca500_programming_manual", "chunk_index": 1102, "length": 305, "hash": "57ac72ed895592578e428ba67355f1f1"}
{"id": "meca500_programming_manual_1103", "text": "As soon as the externally wired SWStop is activated (see the robot\u2019s user manual), the robot\nmotion is immediately decelerated to a stop, and the response [3032][1] is sent by the robot.\nThe motors and the EOAT remain active (i.e., the brakes are not applied) but stay immobilized\nuntil the stop is reset.", "source": "meca500_programming_manual", "chunk_index": 1103, "length": 305, "hash": "57ac72ed895592578e428ba67355f1f1"}
{"id": "meca500_programming_manual_1104", "text": "If a motion command is sent to the robot while the stop signal is still active (and the robot\nis still activated and homed), the command will be ignored if the P-Stop 2 is configured in\n\u201cClear motion\u201d mode (SetPStop2Cfg (page 208)). In this case, the message [3032][1] will be\nsent again by the robot. However, if the P-Stop 2 is configured in \u201cPause motion\u201d mode, the\ncommands will continue to be accepted (queued) even while the robot is in a P-Stop 2 state.", "source": "meca500_programming_manual", "chunk_index": 1104, "length": 460, "hash": "373c5f5d8379be0368b7f49fa4c566a3"}
{"id": "meca500_programming_manual_1105", "text": "If a motion command is sent to the robot while the stop signal is still active (and the robot\nis still activated and homed), the command will be ignored if the P-Stop 2 is configured in\n\u201cClear motion\u201d mode (", "source": "meca500_programming_manual", "chunk_index": 1105, "length": 207, "hash": "3c86ea5f336479e01f49a448e69d4160"}
{"id": "meca500_programming_manual_1106", "text": "(page 208)). In this case, the message [3032][1] will be\nsent again by the robot. However, if the P-Stop 2 is configured in \u201cPause motion\u201d mode, the\ncommands will continue to be accepted (queued) even while the robot is in a P-Stop 2 state.", "source": "meca500_programming_manual", "chunk_index": 1106, "length": 240, "hash": "c22bc0c3b0278cb84065f8682f7bed19"}
{"id": "meca500_programming_manual_1107", "text": "Once the stop signal is removed, the message [3032][2] is returned. The P-Stop 2 condition\nis now ready to be reset using ResumeMotion (page 198). The robot will then respond with\nthe messages [2043][Motion resumed.] and [3032][0].", "source": "meca500_programming_manual", "chunk_index": 1107, "length": 231, "hash": "922fb11df9252c60fb315341d899bc74"}
{"id": "meca500_programming_manual_1108", "text": "Once the stop signal is removed, the message [3032][2] is returned. The P-Stop 2 condition", "source": "meca500_programming_manual", "chunk_index": 1108, "length": 90, "hash": "b812fb906ae3c9ac24d1056ace09da69"}
{"id": "meca500_programming_manual_1109", "text": "is now ready to be reset using", "source": "meca500_programming_manual", "chunk_index": 1109, "length": 30, "hash": "72c9de0f9da920251245271e51d10788"}
{"id": "meca500_programming_manual_1110", "text": "(page 198). The robot will then respond with\nthe messages [2043][Motion resumed.] and [3032][0].", "source": "meca500_programming_manual", "chunk_index": 1110, "length": 96, "hash": "ca3d1d598908f6aa6bf5789afa8f239a"}
{"id": "meca500_programming_manual_1111", "text": "Currently, the Meca500 cannot differentiate between the E-STOP button on the power supply,\nan externally wired E-Stop (pins E-Stop on the D-SUB connector), or an externally wired\nprotective stop (pins P-Stop 1), as explained in the robot\u2019s user manual.", "source": "meca500_programming_manual", "chunk_index": 1111, "length": 252, "hash": "3779c3c125d9bc40726f70c3d323e13a"}
{"id": "meca500_programming_manual_1112", "text": "Currently, the Meca500 cannot differentiate between the E-STOP button on the power supply,\nan externally wired E-Stop (pins E-Stop on the D-SUB connector), or an externally wired\nprotective stop (pins P-Stop 1), as explained in the robot\u2019s user manual.", "source": "meca500_programming_manual", "chunk_index": 1112, "length": 252, "hash": "3779c3c125d9bc40726f70c3d323e13a"}
{"id": "meca500_programming_manual_1113", "text": "In revision 3 of the Meca500, the E-Stop completely shuts down the robot. In revision 4, when\nthe E-Stop is activated, the robot decelerates to a full stop, power to the motors and the EOAT\nconnected to the robot is cut, the brakes are applied, and the robot is deactivated. The robot\nthen sends the message [3070][1], along with the messages [2044][The motion was cleared.]\nand [2004][Motors deactivated.].", "source": "meca500_programming_manual", "chunk_index": 1113, "length": 407, "hash": "ac2fcbce92cd032322c15f198b4eb544"}
{"id": "meca500_programming_manual_1114", "text": "In revision 3 of the Meca500, the E-Stop completely shuts down the robot. In revision 4, when", "source": "meca500_programming_manual", "chunk_index": 1114, "length": 93, "hash": "38924544b588d4bfb0a8924a2d5b394d"}
{"id": "meca500_programming_manual_1115", "text": "the E-Stop is activated, the robot decelerates to a full stop,", "source": "meca500_programming_manual", "chunk_index": 1115, "length": 62, "hash": "4e15011f0862693b223e014c05f2e4f5"}
{"id": "meca500_programming_manual_1116", "text": "power to the motors and the EOAT\nconnected to the robot is cut", "source": "meca500_programming_manual", "chunk_index": 1116, "length": 62, "hash": "d1e992e6916c41ae8d1994804fc6f5a3"}
{"id": "meca500_programming_manual_1117", "text": ", the brakes are applied, and the robot is", "source": "meca500_programming_manual", "chunk_index": 1117, "length": 42, "hash": "1f0d1da8bf10a340b4251aac670add6a"}
{"id": "meca500_programming_manual_1118", "text": ". The robot\nthen sends the message [3070][1], along with the messages [2044][The motion was cleared.]\nand [2004][Motors deactivated.].", "source": "meca500_programming_manual", "chunk_index": 1118, "length": 134, "hash": "99e8dd48220c0af85b36473ccaf0a84f"}
{"id": "meca500_programming_manual_1119", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1119, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1120", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1120, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1121", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1121, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1122", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1122, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1123", "text": "To reactivate the motors (and the EOAT), you must first clear the E-Stop condition, which will\nproduce the message [3070][2]. Then, press the RESET button or activate the external Reset,\nwhich will produce the message [3070][0]. Afterward, you need to re-activate the robot with\nthe ActivateRobot (page 184) command. If the Meca500 R4 was already homed, re-homing\nis not required, except if an MEGP 25* gripper was connected to the robot\u2019s tool I/O port.", "source": "meca500_programming_manual", "chunk_index": 1123, "length": 454, "hash": "42df7bb16cc0e6ce3f63a20ecc72c708"}
{"id": "meca500_programming_manual_1124", "text": "To reactivate the motors (and the EOAT), you must first clear the E-Stop condition, which will\nproduce the message [3070][2]. Then, press the RESET button or activate the external Reset,\nwhich will produce the message [3070][0]. Afterward, you need to re-activate the robot with\nthe", "source": "meca500_programming_manual", "chunk_index": 1124, "length": 282, "hash": "2a7b74feaee4bc086e66d8dc63821434"}
{"id": "meca500_programming_manual_1125", "text": "(page 184) command. If the Meca500 R4 was already homed, re-homing\nis not required, except if an MEGP 25* gripper was connected to the robot\u2019s tool I/O port.", "source": "meca500_programming_manual", "chunk_index": 1125, "length": 157, "hash": "e37184935995c295f4fe36296bc87642"}
{"id": "meca500_programming_manual_1126", "text": "The Meca500 is not designed for use with an enabling device.", "source": "meca500_programming_manual", "chunk_index": 1126, "length": 60, "hash": "baef8394d40647858972046e3beb0cd5"}
{"id": "meca500_programming_manual_1127", "text": "The Meca500 is not designed for use with an enabling device.", "source": "meca500_programming_manual", "chunk_index": 1127, "length": 60, "hash": "baef8394d40647858972046e3beb0cd5"}
{"id": "meca500_programming_manual_1128", "text": "Operation mode switch", "source": "meca500_programming_manual", "chunk_index": 1128, "length": 21, "hash": "0afb8ea0ebea8ebde37b532506b46cf1"}
{"id": "meca500_programming_manual_1129", "text": "Operation mode switch", "source": "meca500_programming_manual", "chunk_index": 1129, "length": 21, "hash": "0afb8ea0ebea8ebde37b532506b46cf1"}
{"id": "meca500_programming_manual_1130", "text": "The Meca500 does not have an operation mode selector.", "source": "meca500_programming_manual", "chunk_index": 1130, "length": 53, "hash": "5db75204164a0dfe3bf55c32a78f92f9"}
{"id": "meca500_programming_manual_1131", "text": "The Meca500 does not have an operation mode selector.", "source": "meca500_programming_manual", "chunk_index": 1131, "length": 53, "hash": "5db75204164a0dfe3bf55c32a78f92f9"}
{"id": "meca500_programming_manual_1132", "text": "For safety reasons, the robot continuously supervises the TCP connection. If the robot detects\nthat the TCP connection has dropped while it is moving, it will immediately stop the motion\nand send the message [3081][1].", "source": "meca500_programming_manual", "chunk_index": 1132, "length": 218, "hash": "9090b72686113644693746ab361e4ec2"}
{"id": "meca500_programming_manual_1133", "text": "For safety reasons, the robot continuously supervises the TCP connection. If the robot detects\nthat the TCP connection has dropped while it is moving, it will immediately stop the motion\nand send the message [3081][1].", "source": "meca500_programming_manual", "chunk_index": 1133, "length": 218, "hash": "9090b72686113644693746ab361e4ec2"}
{"id": "meca500_programming_manual_1134", "text": "If the connection watchdog is enabled and the robot does not receive a ConnectionWatchdog\n(page 187) message before the established timeout, the robot will drop the TCP connection\nand raise the safety signal [3081][1], regardless of whether the robot is moving or not.", "source": "meca500_programming_manual", "chunk_index": 1134, "length": 268, "hash": "1487af990dd3f4f75d69272b4d2f90c9"}
{"id": "meca500_programming_manual_1135", "text": "If the connection watchdog is enabled and the robot does not receive a", "source": "meca500_programming_manual", "chunk_index": 1135, "length": 70, "hash": "9e56f9651a5bc7e1568bc851621b5a93"}
{"id": "meca500_programming_manual_1136", "text": "(page 187) message before the established timeout, the robot will drop the TCP connection\nand raise the safety signal [3081][1], regardless of whether the robot is moving or not.", "source": "meca500_programming_manual", "chunk_index": 1136, "length": 178, "hash": "28e1631f28c662fbf8e5a958092a4f20"}
{"id": "meca500_programming_manual_1137", "text": "Once a new TCP/IP connection is established, the robot will send the message [3081][2].\nAfterward, you must send the ResumeMotion (page 198) command, to which the robot will\nrespond with the message [3081][0].", "source": "meca500_programming_manual", "chunk_index": 1137, "length": 209, "hash": "ff15937d8b00feeb8dc186c24232dc5c"}
{"id": "meca500_programming_manual_1138", "text": "Once a new TCP/IP connection is established, the robot will send the message [3081][2].\nAfterward, you must send the", "source": "meca500_programming_manual", "chunk_index": 1138, "length": 116, "hash": "419dad4058bf44f1456e941efd2d8316"}
{"id": "meca500_programming_manual_1139", "text": "(page 198) command, to which the robot will\nrespond with the message [3081][0].", "source": "meca500_programming_manual", "chunk_index": 1139, "length": 79, "hash": "6cd7588de7078a514e30e21aecde06ca"}
{"id": "meca500_programming_manual_1140", "text": "Supply voltage fluctuation", "source": "meca500_programming_manual", "chunk_index": 1140, "length": 26, "hash": "109af32a36fc58eeb99198212b28100d"}
{"id": "meca500_programming_manual_1141", "text": "Supply voltage fluctuation", "source": "meca500_programming_manual", "chunk_index": 1141, "length": 26, "hash": "109af32a36fc58eeb99198212b28100d"}
{"id": "meca500_programming_manual_1142", "text": "This section does not apply to the Meca500.", "source": "meca500_programming_manual", "chunk_index": 1142, "length": 43, "hash": "deadccb902587baa2d29e0997ad06e36"}
{"id": "meca500_programming_manual_1143", "text": "This section does not apply to the Meca500.", "source": "meca500_programming_manual", "chunk_index": 1143, "length": 43, "hash": "deadccb902587baa2d29e0997ad06e36"}
{"id": "meca500_programming_manual_1144", "text": "After a reboot, the robot motors are not powered, and the message [3083][2] is sent. Once\nthe Reset button is pressed, the message [3083][0] is sent, and the robot motors are powered.", "source": "meca500_programming_manual", "chunk_index": 1144, "length": 183, "hash": "f7f71bc002a4248f958d6dd2965eef60"}
{"id": "meca500_programming_manual_1145", "text": "After a reboot, the robot motors are not powered, and the message [3083][2] is sent. Once\nthe Reset button is pressed, the message [3083][0] is sent, and the robot motors are powered.", "source": "meca500_programming_manual", "chunk_index": 1145, "length": 183, "hash": "f7f71bc002a4248f958d6dd2965eef60"}
{"id": "meca500_programming_manual_1146", "text": "If a redundant safety signal mismatch is detected for more than 1 second, the robot will\nimmediately decelerate to a full stop, remove power from its motors, and send the message\n[3084][1].", "source": "meca500_programming_manual", "chunk_index": 1146, "length": 189, "hash": "84eb693f5af7e417adefdd160ab9af4a"}
{"id": "meca500_programming_manual_1147", "text": "If a redundant safety signal mismatch is detected for more than 1 second, the robot will\nimmediately decelerate to a full stop, remove power from its motors, and send the message\n[3084][1].", "source": "meca500_programming_manual", "chunk_index": 1147, "length": 189, "hash": "84eb693f5af7e417adefdd160ab9af4a"}
{"id": "meca500_programming_manual_1148", "text": "Redundant safety signals include the E-Stop, the P-Stop 1, and the P-Stop 2.", "source": "meca500_programming_manual", "chunk_index": 1148, "length": 76, "hash": "d43f6779dae36959827f71bc3789b4b6"}
{"id": "meca500_programming_manual_1149", "text": "Redundant safety signals include the E-Stop, the P-Stop 1, and the P-Stop 2.", "source": "meca500_programming_manual", "chunk_index": 1149, "length": 76, "hash": "d43f6779dae36959827f71bc3789b4b6"}
{"id": "meca500_programming_manual_1150", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1150, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1151", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1151, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1152", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1152, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1153", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1153, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1154", "text": "This section does not apply to the Meca500.", "source": "meca500_programming_manual", "chunk_index": 1154, "length": 43, "hash": "deadccb902587baa2d29e0997ad06e36"}
{"id": "meca500_programming_manual_1155", "text": "This section does not apply to the Meca500.", "source": "meca500_programming_manual", "chunk_index": 1155, "length": 43, "hash": "deadccb902587baa2d29e0997ad06e36"}
{"id": "meca500_programming_manual_1156", "text": "This section does not apply to the Meca500.", "source": "meca500_programming_manual", "chunk_index": 1156, "length": 43, "hash": "deadccb902587baa2d29e0997ad06e36"}
{"id": "meca500_programming_manual_1157", "text": "This section does not apply to the Meca500.", "source": "meca500_programming_manual", "chunk_index": 1157, "length": 43, "hash": "deadccb902587baa2d29e0997ad06e36"}
{"id": "meca500_programming_manual_1158", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1158, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1159", "text": "Management of errors and safety stops", "source": "meca500_programming_manual", "chunk_index": 1159, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "meca500_programming_manual_1160", "text": "Communicating over cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 1160, "length": 35, "hash": "4f9e00723a5a5e3e2a89d846360af285"}
{"id": "meca500_programming_manual_1161", "text": "Communicating over cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 1161, "length": 35, "hash": "4f9e00723a5a5e3e2a89d846360af285"}
{"id": "meca500_programming_manual_1162", "text": "Our robots can also be controlled using the following three cyclic protocols: EtherCAT,\nEtherNetIP, and PROFINET. These protocols are described in Section 6, Section 7, and\nSection 8, respectively. While inherently different, they share the same cyclic data format\nand API, so we will cover all common concepts in this section.", "source": "meca500_programming_manual", "chunk_index": 1162, "length": 327, "hash": "247db3227c595ebd0cafac6b06d2dc04"}
{"id": "meca500_programming_manual_1163", "text": "Our robots can also be controlled using the following three cyclic protocols: EtherCAT,\nEtherNetIP, and PROFINET. These protocols are described in Section 6, Section 7, and\nSection 8, respectively. While inherently different, they share the same cyclic data format\nand API, so we will cover all common concepts in this section.", "source": "meca500_programming_manual", "chunk_index": 1163, "length": 327, "hash": "247db3227c595ebd0cafac6b06d2dc04"}
{"id": "meca500_programming_manual_1164", "text": "With cyclic protocols, the robot is controlled using cyclic data fields, which are detailed in\nthis section. PLCs use these fields to activate, configure, move, and monitor the robot. The\ncyclic data payload format is identical across all supported protocols.", "source": "meca500_programming_manual", "chunk_index": 1164, "length": 259, "hash": "f7ba725176b18cf82b1c06163dbfbbbe"}
{"id": "meca500_programming_manual_1165", "text": "With cyclic protocols, the robot is controlled using cyclic data fields, which are detailed in\nthis section. PLCs use these fields to activate, configure, move, and monitor the robot. The\ncyclic data payload format is identical across all supported protocols.", "source": "meca500_programming_manual", "chunk_index": 1165, "length": 259, "hash": "f7ba725176b18cf82b1c06163dbfbbbe"}
{"id": "meca500_programming_manual_1166", "text": "Some TCP/IP commands are not available when using cyclic protocols, such as the command\nSetNetworkOptions (page 206) for changing network settings, or the commands for creating,\nmodifying, and deleting offline programs.", "source": "meca500_programming_manual", "chunk_index": 1166, "length": 219, "hash": "a7a13a6ef8a6e75b5e9931017f6294ba"}
{"id": "meca500_programming_manual_1167", "text": "Some TCP/IP commands are not available when using cyclic protocols, such as the command", "source": "meca500_programming_manual", "chunk_index": 1167, "length": 87, "hash": "4e15452ddea4e52aa58e5b33e07260c1"}
{"id": "meca500_programming_manual_1168", "text": "(page 206) for changing network settings, or the commands for creating,\nmodifying, and deleting offline programs.", "source": "meca500_programming_manual", "chunk_index": 1168, "length": 113, "hash": "dcfe221393ff714b6a8a4af3fd2bfae5"}
{"id": "meca500_programming_manual_1169", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1169, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1170", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1170, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1171", "text": "Types of cyclic protocol commands", "source": "meca500_programming_manual", "chunk_index": 1171, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "meca500_programming_manual_1172", "text": "Types of cyclic protocol commands", "source": "meca500_programming_manual", "chunk_index": 1172, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "meca500_programming_manual_1173", "text": "Cyclic data output is used to control the robot\u2019s state, trigger actions, or send motion-related\ncommands. Cyclic data input provides feedback from the robot such as status and joint\npositions.", "source": "meca500_programming_manual", "chunk_index": 1173, "length": 193, "hash": "71023261daee71bab866207c7f3bb787"}
{"id": "meca500_programming_manual_1174", "text": "Cyclic data output is used to control the robot\u2019s state, trigger actions, or send motion-related\ncommands. Cyclic data input provides feedback from the robot such as status and joint\npositions.", "source": "meca500_programming_manual", "chunk_index": 1174, "length": 193, "hash": "71023261daee71bab866207c7f3bb787"}
{"id": "meca500_programming_manual_1175", "text": "Below, we briefly describe how our cyclic protocol API handles each type of action.", "source": "meca500_programming_manual", "chunk_index": 1175, "length": 83, "hash": "1644e26c69a10181bf862b45bab55df2"}
{"id": "meca500_programming_manual_1176", "text": "Below, we briefly describe how our cyclic protocol API handles each type of action.", "source": "meca500_programming_manual", "chunk_index": 1176, "length": 83, "hash": "1644e26c69a10181bf862b45bab55df2"}
{"id": "meca500_programming_manual_1177", "text": "Status change commands", "source": "meca500_programming_manual", "chunk_index": 1177, "length": 22, "hash": "d935630102b05f5232f8fb215dad0e3c"}
{"id": "meca500_programming_manual_1178", "text": "Status change commands", "source": "meca500_programming_manual", "chunk_index": 1178, "length": 22, "hash": "d935630102b05f5232f8fb215dad0e3c"}
{"id": "meca500_programming_manual_1179", "text": "Some fields (bits) directly control the robot\u2019s state, such as:", "source": "meca500_programming_manual", "chunk_index": 1179, "length": 63, "hash": "2317dbf5d4927c6a6409c6940b90e1c6"}
{"id": "meca500_programming_manual_1180", "text": "Some fields (bits) directly control the robot\u2019s state, such as:", "source": "meca500_programming_manual", "chunk_index": 1180, "length": 63, "hash": "2317dbf5d4927c6a6409c6940b90e1c6"}
{"id": "meca500_programming_manual_1181", "text": "Set these bits to change the robot\u2019s state.\ncorresponding status bit in the cyclic data input (Section 5, Section 5).", "source": "meca500_programming_manual", "chunk_index": 1181, "length": 117, "hash": "c9d6458d9f880784218aa5543e281d1f"}
{"id": "meca500_programming_manual_1182", "text": "Set these bits to change the robot\u2019s state.\ncorresponding status bit in the cyclic data input (Section 5, Section 5).", "source": "meca500_programming_manual", "chunk_index": 1182, "length": 117, "hash": "c9d6458d9f880784218aa5543e281d1f"}
{"id": "meca500_programming_manual_1183", "text": "The robot confirms completion via the", "source": "meca500_programming_manual", "chunk_index": 1183, "length": 37, "hash": "f599a0b1b0ec808c977807348f00114f"}
{"id": "meca500_programming_manual_1184", "text": "The robot confirms completion via the", "source": "meca500_programming_manual", "chunk_index": 1184, "length": 37, "hash": "f599a0b1b0ec808c977807348f00114f"}
{"id": "meca500_programming_manual_1185", "text": "Do not rely on cycle count or time delay to confirm a state change. Always check the\ncorresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the state change.", "source": "meca500_programming_manual", "chunk_index": 1185, "length": 196, "hash": "7a9ee3c102ee864ed2d6608270a8cf3d"}
{"id": "meca500_programming_manual_1186", "text": "Do not rely on cycle count or time delay to confirm a state change. Always check the\ncorresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the state change.", "source": "meca500_programming_manual", "chunk_index": 1186, "length": 196, "hash": "7a9ee3c102ee864ed2d6608270a8cf3d"}
{"id": "meca500_programming_manual_1187", "text": "Some fields (bits) in the cyclic data directly trigger actions on the robot, such as:", "source": "meca500_programming_manual", "chunk_index": 1187, "length": 85, "hash": "1a4239ef12c52559303d88bf8defab5a"}
{"id": "meca500_programming_manual_1188", "text": "Some fields (bits) in the cyclic data directly trigger actions on the robot, such as:", "source": "meca500_programming_manual", "chunk_index": 1188, "length": 85, "hash": "1a4239ef12c52559303d88bf8defab5a"}
{"id": "meca500_programming_manual_1189", "text": "To trigger an action, set the corresponding bit to 1, and clear it (reset it to 0) only after the\naction is completed. Completion is confirmed by the corresponding status bit in the cyclic\ndata input (Section 5, Section 5).", "source": "meca500_programming_manual", "chunk_index": 1189, "length": 223, "hash": "42c1b753c9e750f7788782fa69de80fc"}
{"id": "meca500_programming_manual_1190", "text": "To trigger an action, set the corresponding bit to 1, and clear it (reset it to 0) only after the\naction is completed. Completion is confirmed by the corresponding status bit in the cyclic\ndata input (Section 5, Section 5).", "source": "meca500_programming_manual", "chunk_index": 1190, "length": 223, "hash": "42c1b753c9e750f7788782fa69de80fc"}
{"id": "meca500_programming_manual_1191", "text": "Types of cyclic protocol commands", "source": "meca500_programming_manual", "chunk_index": 1191, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "meca500_programming_manual_1192", "text": "Types of cyclic protocol commands", "source": "meca500_programming_manual", "chunk_index": 1192, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "meca500_programming_manual_1193", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1193, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1194", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1194, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1195", "text": "Do not rely on cycle count or time delay to confirm action completion. Always check\nthe corresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the action.", "source": "meca500_programming_manual", "chunk_index": 1195, "length": 193, "hash": "0212fdc6cd3648618970b3095e731389"}
{"id": "meca500_programming_manual_1196", "text": "Do not rely on cycle count or time delay to confirm action completion. Always check\nthe corresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the action.", "source": "meca500_programming_manual", "chunk_index": 1196, "length": 193, "hash": "0212fdc6cd3648618970b3095e731389"}
{"id": "meca500_programming_manual_1197", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1197, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_1198", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1198, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_1199", "text": "There are three types of motion-related commands that can be sent using cyclic protocols:", "source": "meca500_programming_manual", "chunk_index": 1199, "length": 89, "hash": "4b502a5c6f8578f36976d455469e538e"}
{"id": "meca500_programming_manual_1200", "text": "There are three types of motion-related commands that can be sent using cyclic protocols:", "source": "meca500_programming_manual", "chunk_index": 1200, "length": 89, "hash": "4b502a5c6f8578f36976d455469e538e"}
{"id": "meca500_programming_manual_1201", "text": "\u2022 Instantaneous commands (e.g., SetWorkZoneLimits (page 305)) that are executed", "source": "meca500_programming_manual", "chunk_index": 1201, "length": 79, "hash": "006b94175ef3b497e68654a7215a8615"}
{"id": "meca500_programming_manual_1202", "text": "\u2022 Instantaneous commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1202, "length": 31, "hash": "02e633e890b80e77597d6150766c0a18"}
{"id": "meca500_programming_manual_1203", "text": "(page 305)) that are executed", "source": "meca500_programming_manual", "chunk_index": 1203, "length": 29, "hash": "5644c14e293360db2c45de360cc85798"}
{"id": "meca500_programming_manual_1204", "text": "immediately by the robot;", "source": "meca500_programming_manual", "chunk_index": 1204, "length": 25, "hash": "bd1d08f9fbf619450146890e9f224e8c"}
{"id": "meca500_programming_manual_1205", "text": "immediately by the robot;", "source": "meca500_programming_manual", "chunk_index": 1205, "length": 25, "hash": "bd1d08f9fbf619450146890e9f224e8c"}
{"id": "meca500_programming_manual_1206", "text": "\u2022 Queued commands (e.g., MoveJoints (page 135)) that are queued and executed one after", "source": "meca500_programming_manual", "chunk_index": 1206, "length": 86, "hash": "5d7bf854ab1c88918372c8b496df2904"}
{"id": "meca500_programming_manual_1207", "text": "\u2022 Queued commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1207, "length": 24, "hash": "799e5520a74e2d28da4df845912919eb"}
{"id": "meca500_programming_manual_1208", "text": "(page 135)) that are queued and executed one after", "source": "meca500_programming_manual", "chunk_index": 1208, "length": 50, "hash": "248dce89df859249d018e0722f0d88d7"}
{"id": "meca500_programming_manual_1209", "text": "\u2022 Velocity-mode commands (e.g., MoveJointsVel", "source": "meca500_programming_manual", "chunk_index": 1209, "length": 45, "hash": "f35f7ab3f6983de6df677df97cc31344"}
{"id": "meca500_programming_manual_1210", "text": "\u2022 Velocity-mode commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1210, "length": 31, "hash": "17ce8a99c2d311204e26a9798745ad93"}
{"id": "meca500_programming_manual_1211", "text": "that are executed\ncontinuously until a new command is received (or until the configured velocity\ntimeout is reached).", "source": "meca500_programming_manual", "chunk_index": 1211, "length": 117, "hash": "c2c52e76b1aed3e02b1b56f8368ce926"}
{"id": "meca500_programming_manual_1212", "text": "that are executed\ncontinuously until a new command is received (or until the configured velocity\ntimeout is reached).", "source": "meca500_programming_manual", "chunk_index": 1212, "length": 117, "hash": "c2c52e76b1aed3e02b1b56f8368ce926"}
{"id": "meca500_programming_manual_1213", "text": "The next section provides a detailed explanation of how these motion-related commands are\nused.", "source": "meca500_programming_manual", "chunk_index": 1213, "length": 95, "hash": "01143fdf38c7b939f7469d083c139a60"}
{"id": "meca500_programming_manual_1214", "text": "The next section provides a detailed explanation of how these motion-related commands are\nused.", "source": "meca500_programming_manual", "chunk_index": 1214, "length": 95, "hash": "01143fdf38c7b939f7469d083c139a60"}
{"id": "meca500_programming_manual_1215", "text": "Types of cyclic protocol commands", "source": "meca500_programming_manual", "chunk_index": 1215, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "meca500_programming_manual_1216", "text": "Types of cyclic protocol commands", "source": "meca500_programming_manual", "chunk_index": 1216, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "meca500_programming_manual_1217", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1217, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1218", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1218, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1219", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1219, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1220", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1220, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1221", "text": "Motion-related commands are sent to the robot via:", "source": "meca500_programming_manual", "chunk_index": 1221, "length": 50, "hash": "cb9f8a8463d470dd247d936435ef5359"}
{"id": "meca500_programming_manual_1222", "text": "Motion-related commands are sent to the robot via:", "source": "meca500_programming_manual", "chunk_index": 1222, "length": 50, "hash": "cb9f8a8463d470dd247d936435ef5359"}
{"id": "meca500_programming_manual_1223", "text": "\u2022 three cyclic data fields, MotionCommandID, MoveID, and SetPoint (Table 5 and Table 6),", "source": "meca500_programming_manual", "chunk_index": 1223, "length": 88, "hash": "2d26e42af3216f13fa2ec6fbf63515a1"}
{"id": "meca500_programming_manual_1224", "text": "\u2022 three cyclic data fields,", "source": "meca500_programming_manual", "chunk_index": 1224, "length": 27, "hash": "2a46ba4bad2dad3fdbe615e5bc4c575e"}
{"id": "meca500_programming_manual_1225", "text": "(Table 5 and Table 6),", "source": "meca500_programming_manual", "chunk_index": 1225, "length": 22, "hash": "715b74ece8c75d11e0ccdbe7b9ad5438"}
{"id": "meca500_programming_manual_1226", "text": "\u2022 six command arguments (Table 7).", "source": "meca500_programming_manual", "chunk_index": 1226, "length": 34, "hash": "7457bd5de1911bd624f0c3e7f120036f"}
{"id": "meca500_programming_manual_1227", "text": "\u2022 six command arguments (Table 7).", "source": "meca500_programming_manual", "chunk_index": 1227, "length": 34, "hash": "7457bd5de1911bd624f0c3e7f120036f"}
{"id": "meca500_programming_manual_1228", "text": "Each motion-related command has a unique ID (Table 8).\nMotionCommandID field specifies which command to send.", "source": "meca500_programming_manual", "chunk_index": 1228, "length": 109, "hash": "3748898ada21e7dd27bddff35d6beb37"}
{"id": "meca500_programming_manual_1229", "text": "Each motion-related command has a unique ID (Table 8).", "source": "meca500_programming_manual", "chunk_index": 1229, "length": 54, "hash": "9916f29a1eb8b0e2ec32f19f9ccb0330"}
{"id": "meca500_programming_manual_1230", "text": "field specifies which command to send.", "source": "meca500_programming_manual", "chunk_index": 1230, "length": 38, "hash": "d6da087860ff1f8241d5bf6bb9f35b06"}
{"id": "meca500_programming_manual_1231", "text": "Entering this ID in the", "source": "meca500_programming_manual", "chunk_index": 1231, "length": 23, "hash": "6df19b6b366cf201b7c7c985311c687a"}
{"id": "meca500_programming_manual_1232", "text": "Entering this ID in the", "source": "meca500_programming_manual", "chunk_index": 1232, "length": 23, "hash": "6df19b6b366cf201b7c7c985311c687a"}
{"id": "meca500_programming_manual_1233", "text": "The field name MotionCommandID is retained for historical reasons, although it is also used\nto send commands other than motion commands, such as configuration commands (e.g.,\nSetWorkZoneLimits (page 305)).", "source": "meca500_programming_manual", "chunk_index": 1233, "length": 205, "hash": "61b32c5a7cab3f654ff8fde84336952f"}
{"id": "meca500_programming_manual_1234", "text": "is retained for historical reasons, although it is also used\nto send commands other than motion commands, such as configuration commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1234, "length": 143, "hash": "54900206cdc9f677af1bc311986e7505"}
{"id": "meca500_programming_manual_1235", "text": "The combination of MoveID and SetPoint fields is used to send cyclic or non-cyclic commands\n(Section 5):", "source": "meca500_programming_manual", "chunk_index": 1235, "length": 104, "hash": "cba1c4c22e261863b216439bb3422c50"}
{"id": "meca500_programming_manual_1236", "text": "fields is used to send cyclic or non-cyclic commands\n(Section 5):", "source": "meca500_programming_manual", "chunk_index": 1236, "length": 65, "hash": "18fa1a1df3a803244b9d9e6eaa65887b"}
{"id": "meca500_programming_manual_1237", "text": "\u2022 The SetPoint bit enables or disables command reception by the robot. When cleared,", "source": "meca500_programming_manual", "chunk_index": 1237, "length": 84, "hash": "491df4e18ff8ac1f3af74ecb886dcddc"}
{"id": "meca500_programming_manual_1238", "text": "bit enables or disables command reception by the robot. When cleared,", "source": "meca500_programming_manual", "chunk_index": 1238, "length": 69, "hash": "545cb0d94426475a5db53aa397a20f9d"}
{"id": "meca500_programming_manual_1239", "text": "the robot ignores the MotionCommandID and MoveID fields;", "source": "meca500_programming_manual", "chunk_index": 1239, "length": 56, "hash": "9308f48747ce500f3c3f1a7389997e10"}
{"id": "meca500_programming_manual_1240", "text": "the robot ignores the", "source": "meca500_programming_manual", "chunk_index": 1240, "length": 21, "hash": "0246ec5f42dcf229e2810b313ddaa9a2"}
{"id": "meca500_programming_manual_1241", "text": "\u2022 The MoveID field determines the command type: cyclic (MoveID is 0) or non-cyclic\n(MoveID is not 0, with a new command queued each time the MoveID value changes).", "source": "meca500_programming_manual", "chunk_index": 1241, "length": 163, "hash": "3e97a5f15cabc88055f46ec0dc1c18b9"}
{"id": "meca500_programming_manual_1242", "text": "field determines the command type: cyclic (", "source": "meca500_programming_manual", "chunk_index": 1242, "length": 43, "hash": "cb7bef0ee550ebb530b43505633be6cf"}
{"id": "meca500_programming_manual_1243", "text": "is 0) or non-cyclic\n(", "source": "meca500_programming_manual", "chunk_index": 1243, "length": 21, "hash": "6950c3e6fc5d4ad67b318612f2fcfe6c"}
{"id": "meca500_programming_manual_1244", "text": "is not 0, with a new command queued each time the", "source": "meca500_programming_manual", "chunk_index": 1244, "length": 49, "hash": "951893405b8e49aac5146fd2c3ad9c90"}
{"id": "meca500_programming_manual_1245", "text": "Ensure SetPoint is cleared (0) when connecting to the robot, or it may unexpectedly\nexecute a command.", "source": "meca500_programming_manual", "chunk_index": 1245, "length": 102, "hash": "da588304f93b39f6765fecb1a128da93"}
{"id": "meca500_programming_manual_1246", "text": "is cleared (0) when connecting to the robot, or it may unexpectedly", "source": "meca500_programming_manual", "chunk_index": 1246, "length": 67, "hash": "8746f2e5626ee26c0487af668a242477"}
{"id": "meca500_programming_manual_1247", "text": "Sending non-cyclic commands", "source": "meca500_programming_manual", "chunk_index": 1247, "length": 27, "hash": "05523aac76ce5e2d7eb6f67f58755222"}
{"id": "meca500_programming_manual_1248", "text": "Sending non-cyclic commands", "source": "meca500_programming_manual", "chunk_index": 1248, "length": 27, "hash": "05523aac76ce5e2d7eb6f67f58755222"}
{"id": "meca500_programming_manual_1249", "text": "This section explains how to send non-cyclic commands (i.e., configuration or motion\ncommands). For cyclic commands (i.e., velocity-mode commands), see Section 5.", "source": "meca500_programming_manual", "chunk_index": 1249, "length": 162, "hash": "2c5e54c57f11341333aaab59977d596c"}
{"id": "meca500_programming_manual_1250", "text": "This section explains how to send", "source": "meca500_programming_manual", "chunk_index": 1250, "length": 33, "hash": "4ceb8e120f13a469a2763a3a8302acac"}
{"id": "meca500_programming_manual_1251", "text": "commands (i.e., configuration or motion\ncommands). For cyclic commands (i.e., velocity-mode commands), see Section 5.", "source": "meca500_programming_manual", "chunk_index": 1251, "length": 117, "hash": "ddedd2e3d275693db9ff3c45b5bdf862"}
{"id": "meca500_programming_manual_1252", "text": "Commands are sent by changing the MoveID field to a different non-zero integer (while\nSetPoint is set to 1).", "source": "meca500_programming_manual", "chunk_index": 1252, "length": 108, "hash": "e1b9211b2518f52043b41f45c7884686"}
{"id": "meca500_programming_manual_1253", "text": "Commands are sent by changing the", "source": "meca500_programming_manual", "chunk_index": 1253, "length": 33, "hash": "f70e3a335debb7509c941d92569d9780"}
{"id": "meca500_programming_manual_1254", "text": "field to a different non-zero integer (while", "source": "meca500_programming_manual", "chunk_index": 1254, "length": 44, "hash": "4f2ab6fb3103677ec251c2fb361fb95c"}
{"id": "meca500_programming_manual_1255", "text": "\u2022 Configuration commands (e.g., SetWorkZoneLimits (page 305)) execute immediately.\nThe robot confirms completion by updating its MoveID field (Section 5) to match yours;", "source": "meca500_programming_manual", "chunk_index": 1255, "length": 169, "hash": "17cfe8785b8561eb127b1d786941a873"}
{"id": "meca500_programming_manual_1256", "text": "\u2022 Configuration commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1256, "length": 31, "hash": "27a0f34dbc9d89ffd089a42e997e95bb"}
{"id": "meca500_programming_manual_1257", "text": "(page 305)) execute immediately.\nThe robot confirms completion by updating its", "source": "meca500_programming_manual", "chunk_index": 1257, "length": 78, "hash": "b2fcbf85afa6929d9a88ede085f7c702"}
{"id": "meca500_programming_manual_1258", "text": "field (Section 5) to match yours;", "source": "meca500_programming_manual", "chunk_index": 1258, "length": 33, "hash": "be1983c1b9ba42087d64dfe36acd066e"}
{"id": "meca500_programming_manual_1259", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1259, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1260", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1260, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1261", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1261, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1262", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1262, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1263", "text": "\u2022 Motion commands (e.g., MoveJoints (page 135)) are added to the motion queue and\nprocessed sequentially. The robot confirms that the command was added to the queue\n(not yet executed) by updating its MoveID field (Section 5) to match yours.", "source": "meca500_programming_manual", "chunk_index": 1263, "length": 240, "hash": "de324f2ddce96804c900097b4240fffe"}
{"id": "meca500_programming_manual_1264", "text": "\u2022 Motion commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1264, "length": 24, "hash": "505a56ef41b8043f89d94fb94390ec7e"}
{"id": "meca500_programming_manual_1265", "text": "(page 135)) are added to the motion queue and\nprocessed sequentially. The robot confirms that the command was added to the queue\n(not yet executed) by updating its", "source": "meca500_programming_manual", "chunk_index": 1265, "length": 163, "hash": "21a60abb5ee16afbdde08376abd8a122"}
{"id": "meca500_programming_manual_1266", "text": "field (Section 5) to match yours.", "source": "meca500_programming_manual", "chunk_index": 1266, "length": 33, "hash": "7d253c538b190abb53b88bfcbb3782a2"}
{"id": "meca500_programming_manual_1267", "text": "The following sequence must be followed:", "source": "meca500_programming_manual", "chunk_index": 1267, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "meca500_programming_manual_1268", "text": "The following sequence must be followed:", "source": "meca500_programming_manual", "chunk_index": 1268, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "meca500_programming_manual_1269", "text": "\u2022 At connection, clear both the MoveID and SetPoint fields;", "source": "meca500_programming_manual", "chunk_index": 1269, "length": 59, "hash": "cd1597de91b35044e44f6001abe88c8c"}
{"id": "meca500_programming_manual_1270", "text": "\u2022 At connection, clear both the", "source": "meca500_programming_manual", "chunk_index": 1270, "length": 31, "hash": "846313e9f3ff3141508fdefc8146e16f"}
{"id": "meca500_programming_manual_1271", "text": "\u2022 Then, to add a motion command to the robot\u2019s motion queue:", "source": "meca500_programming_manual", "chunk_index": 1271, "length": 60, "hash": "bb2b7217e7044e83074478939da9beda"}
{"id": "meca500_programming_manual_1272", "text": "\u2022 Then, to add a motion command to the robot\u2019s motion queue:", "source": "meca500_programming_manual", "chunk_index": 1272, "length": 60, "hash": "bb2b7217e7044e83074478939da9beda"}
{"id": "meca500_programming_manual_1273", "text": "\u2013 Set MotionCommandID to the desired command;", "source": "meca500_programming_manual", "chunk_index": 1273, "length": 45, "hash": "de581a5709b44f7a396b67aa35958d14"}
{"id": "meca500_programming_manual_1274", "text": "to the desired command;", "source": "meca500_programming_manual", "chunk_index": 1274, "length": 23, "hash": "1fa38b90e266027dd58eb98b41d82d7c"}
{"id": "meca500_programming_manual_1275", "text": "\u2013 Enter the command arguments;", "source": "meca500_programming_manual", "chunk_index": 1275, "length": 30, "hash": "914c2fc498397bf2068c3d0b372dbd9d"}
{"id": "meca500_programming_manual_1276", "text": "Enter the command arguments;", "source": "meca500_programming_manual", "chunk_index": 1276, "length": 28, "hash": "1f55ab1213972bb3d8d51460c1f03500"}
{"id": "meca500_programming_manual_1277", "text": "\u2013 Change MoveID to a different non-zero integer value;", "source": "meca500_programming_manual", "chunk_index": 1277, "length": 54, "hash": "4575a9a3fbe280a90f3d2dfd12a9f9e7"}
{"id": "meca500_programming_manual_1278", "text": "to a different non-zero integer value;", "source": "meca500_programming_manual", "chunk_index": 1278, "length": 38, "hash": "2c5c43ab354db7e7b9bfeccf24b9d36f"}
{"id": "meca500_programming_manual_1279", "text": "\u2013 Set SetPoint to 1.", "source": "meca500_programming_manual", "chunk_index": 1279, "length": 20, "hash": "605a4dd62a853a2b828c51ac8a911e95"}
{"id": "meca500_programming_manual_1280", "text": "\u2022 To stop the robot immediately, set the PauseMotion or ClearMotion bit.", "source": "meca500_programming_manual", "chunk_index": 1280, "length": 72, "hash": "e5d904c72e5ce39b3a8526220e17e92b"}
{"id": "meca500_programming_manual_1281", "text": "\u2022 To stop the robot immediately, set the", "source": "meca500_programming_manual", "chunk_index": 1281, "length": 40, "hash": "0cfcfd0633ea8ff66b93a3b7098fa965"}
{"id": "meca500_programming_manual_1282", "text": "The MoveID, MotionCommandID, and command arguments (Section 5) must not be changed\nuntil the robot acknowledges the previous command by returning the corresponding\nMoveID (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1282, "length": 183, "hash": "bf33f9daddec496844bad693f7394020"}
{"id": "meca500_programming_manual_1283", "text": ", and command arguments (Section 5) must not be changed\nuntil the robot acknowledges the previous command by returning the corresponding", "source": "meca500_programming_manual", "chunk_index": 1283, "length": 136, "hash": "74a79b5cd9f8340a88ee6ac8f5da22a4"}
{"id": "meca500_programming_manual_1284", "text": "Change the MoveID only after (or in the same cycle as) MotionCommandID and arguments,\nor the robot may receive a mix of old and new MotionCommandID and arguments.", "source": "meca500_programming_manual", "chunk_index": 1284, "length": 162, "hash": "bfc54058a4686032e8e9d5ebaae4c9e5"}
{"id": "meca500_programming_manual_1285", "text": "only after (or in the same cycle as)", "source": "meca500_programming_manual", "chunk_index": 1285, "length": 36, "hash": "da61cd84ef472043c588e4700b850f82"}
{"id": "meca500_programming_manual_1286", "text": "and arguments,\nor the robot may receive a mix of old and new", "source": "meca500_programming_manual", "chunk_index": 1286, "length": 60, "hash": "9a0b41052715732fa82da13a74e5d09b"}
{"id": "meca500_programming_manual_1287", "text": "Sending cyclic commands", "source": "meca500_programming_manual", "chunk_index": 1287, "length": 23, "hash": "f0c4fdb10ab80074a2c03a9d41e08a96"}
{"id": "meca500_programming_manual_1288", "text": "Sending cyclic commands", "source": "meca500_programming_manual", "chunk_index": 1288, "length": 23, "hash": "f0c4fdb10ab80074a2c03a9d41e08a96"}
{"id": "meca500_programming_manual_1289", "text": "Cyclic commands, i.e., velocity-mode commands (MoveJointsVel (page 138), MoveLinVelWrf\n(page 146), and MoveLinVelTrf (page 145)), are executed continuously while MoveID is 0 and\nSetPoint is 1. The desired velocity can be changed at any time during this period.", "source": "meca500_programming_manual", "chunk_index": 1289, "length": 260, "hash": "007595564e2e15deb9e3b1e98e21f40a"}
{"id": "meca500_programming_manual_1290", "text": "Cyclic commands, i.e., velocity-mode commands (", "source": "meca500_programming_manual", "chunk_index": 1290, "length": 47, "hash": "69bb5ed435cab508b7b581f01f40cd03"}
{"id": "meca500_programming_manual_1291", "text": "(page 145)), are executed continuously while", "source": "meca500_programming_manual", "chunk_index": 1291, "length": 44, "hash": "bbfaef28c2484b84bdb8873c1c21184d"}
{"id": "meca500_programming_manual_1292", "text": "is 1. The desired velocity can be changed at any time during this period.", "source": "meca500_programming_manual", "chunk_index": 1292, "length": 73, "hash": "cbc6e48b7085590b8864e009c9b7308e"}
{"id": "meca500_programming_manual_1293", "text": "The following sequence must be followed:", "source": "meca500_programming_manual", "chunk_index": 1293, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "meca500_programming_manual_1294", "text": "The following sequence must be followed:", "source": "meca500_programming_manual", "chunk_index": 1294, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "meca500_programming_manual_1295", "text": "\u2022 At connection, clear both the MoveID and SetPoint fields;", "source": "meca500_programming_manual", "chunk_index": 1295, "length": 59, "hash": "cd1597de91b35044e44f6001abe88c8c"}
{"id": "meca500_programming_manual_1296", "text": "\u2022 At connection, clear both the", "source": "meca500_programming_manual", "chunk_index": 1296, "length": 31, "hash": "846313e9f3ff3141508fdefc8146e16f"}
{"id": "meca500_programming_manual_1297", "text": "\u2022 To start moving the robot:", "source": "meca500_programming_manual", "chunk_index": 1297, "length": 28, "hash": "8efa418a1c36b6bb5dbba5136c5aa72c"}
{"id": "meca500_programming_manual_1298", "text": "\u2022 To start moving the robot:", "source": "meca500_programming_manual", "chunk_index": 1298, "length": 28, "hash": "8efa418a1c36b6bb5dbba5136c5aa72c"}
{"id": "meca500_programming_manual_1299", "text": "\u2013 Set MotionCommandID to the desired velocity-mode command ID;", "source": "meca500_programming_manual", "chunk_index": 1299, "length": 62, "hash": "a254ac6f13b40b951da3a7adb7747a19"}
{"id": "meca500_programming_manual_1300", "text": "to the desired velocity-mode command ID;", "source": "meca500_programming_manual", "chunk_index": 1300, "length": 40, "hash": "d753f5f1ad390cb183209557147101f9"}
{"id": "meca500_programming_manual_1301", "text": "\u2013 Enter the six command arguments;", "source": "meca500_programming_manual", "chunk_index": 1301, "length": 34, "hash": "7a1a8a2804ce14d19beab3303d03272e"}
{"id": "meca500_programming_manual_1302", "text": "Enter the six command arguments;", "source": "meca500_programming_manual", "chunk_index": 1302, "length": 32, "hash": "fee8752173255254d2d73d3eeb574691"}
{"id": "meca500_programming_manual_1303", "text": "\u2013 Set SetPoint to 1.", "source": "meca500_programming_manual", "chunk_index": 1303, "length": 20, "hash": "605a4dd62a853a2b828c51ac8a911e95"}
{"id": "meca500_programming_manual_1304", "text": "\u2022 To change the velocity, modify the six arguments. The robot will apply the new velocities", "source": "meca500_programming_manual", "chunk_index": 1304, "length": 91, "hash": "eb20146cfc2a83aa171f0f737fd0dbb8"}
{"id": "meca500_programming_manual_1305", "text": "\u2022 To change the velocity, modify the six arguments. The robot will apply the new velocities", "source": "meca500_programming_manual", "chunk_index": 1305, "length": 91, "hash": "eb20146cfc2a83aa171f0f737fd0dbb8"}
{"id": "meca500_programming_manual_1306", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1306, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1307", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1307, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1308", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1308, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1309", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1309, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1310", "text": "\u2022 To stop the robot, reset SetPoint to 0, set all velocity arguments to zero, or set the", "source": "meca500_programming_manual", "chunk_index": 1310, "length": 88, "hash": "6ce7c6915aa5d28b9f04cb28e173cfcc"}
{"id": "meca500_programming_manual_1311", "text": "\u2022 To stop the robot, reset", "source": "meca500_programming_manual", "chunk_index": 1311, "length": 26, "hash": "20e67da4c9a8585f31e0429be22ada18"}
{"id": "meca500_programming_manual_1312", "text": "to 0, set all velocity arguments to zero, or set the", "source": "meca500_programming_manual", "chunk_index": 1312, "length": 52, "hash": "25c3533bc49175dbadea237d29c3d03a"}
{"id": "meca500_programming_manual_1313", "text": "PauseMotion or ClearMotion bit.", "source": "meca500_programming_manual", "chunk_index": 1313, "length": 31, "hash": "a2a6c5caf55a856b5035f240dfbf4702"}
{"id": "meca500_programming_manual_1314", "text": "To change to a different velocity-mode command ID, ensure that you change\nMotionCommandID and all the arguments in the same cycle to prevent a command to be\nexecuted with the arguments that belongs to another command. Alternatively, you may\nchange SetPoint to 0 before changing the command and arguments.", "source": "meca500_programming_manual", "chunk_index": 1314, "length": 304, "hash": "d6fcc9b91ce23cdae51580547127f49e"}
{"id": "meca500_programming_manual_1315", "text": "To change to a different velocity-mode command ID, ensure that you change", "source": "meca500_programming_manual", "chunk_index": 1315, "length": 73, "hash": "32db795f4537894ed4db2cb89be169de"}
{"id": "meca500_programming_manual_1316", "text": "and all the arguments", "source": "meca500_programming_manual", "chunk_index": 1316, "length": 21, "hash": "f2d584447f3db8c96c7a21bb6aa63f4f"}
{"id": "meca500_programming_manual_1317", "text": "to prevent a command to be\nexecuted with the arguments that belongs to another command. Alternatively, you may\nchange", "source": "meca500_programming_manual", "chunk_index": 1317, "length": 117, "hash": "4bc08235292b967602e77f80ec2511a1"}
{"id": "meca500_programming_manual_1318", "text": "to 0 before changing the command and arguments.", "source": "meca500_programming_manual", "chunk_index": 1318, "length": 47, "hash": "091ac1dc72f1055892003d6ad9c2e2b1"}
{"id": "meca500_programming_manual_1319", "text": "Using a position-mode command in cyclic mode (e.g., MoveJoints (page 135)), with MoveID\nset to 0 and SetPoint set to 1, will quickly fill the motion queue with copies of the same\ncommand every cycle, which is certainly not the desired result.", "source": "meca500_programming_manual", "chunk_index": 1319, "length": 242, "hash": "b280ca29d5701412bb9b0424dcb3efd6"}
{"id": "meca500_programming_manual_1320", "text": "Using a position-mode command in cyclic mode (e.g.,", "source": "meca500_programming_manual", "chunk_index": 1320, "length": 51, "hash": "17def39f073cb2c8d55189304068f1cb"}
{"id": "meca500_programming_manual_1321", "text": "set to 1, will quickly fill the motion queue with copies of the same\ncommand every cycle, which is certainly not the desired result.", "source": "meca500_programming_manual", "chunk_index": 1321, "length": 132, "hash": "c22e4ca08c816c46f45149f2491f85a2"}
{"id": "meca500_programming_manual_1322", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1322, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1323", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1323, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1324", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1324, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1325", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1325, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1326", "text": "The robot cyclic data includes output fields for sending commands and actions to the robot,\nas well as input fields that report the complete robot status, position, and configuration.", "source": "meca500_programming_manual", "chunk_index": 1326, "length": 183, "hash": "c0cd7013973c6a65f02cef0bb684aaf7"}
{"id": "meca500_programming_manual_1327", "text": "The robot cyclic data includes output fields for sending commands and actions to the robot,\nas well as input fields that report the complete robot status, position, and configuration.", "source": "meca500_programming_manual", "chunk_index": 1327, "length": 183, "hash": "c0cd7013973c6a65f02cef0bb684aaf7"}
{"id": "meca500_programming_manual_1328", "text": "Section 5 and Section 5 provide the necessary details to identify each field across all supported\ncyclic protocols. The binary format of the cyclic data is identical for all protocols.", "source": "meca500_programming_manual", "chunk_index": 1328, "length": 184, "hash": "c172701c6ea488ec73019af10349b23f"}
{"id": "meca500_programming_manual_1329", "text": "Section 5 and Section 5 provide the necessary details to identify each field across all supported\ncyclic protocols. The binary format of the cyclic data is identical for all protocols.", "source": "meca500_programming_manual", "chunk_index": 1329, "length": 184, "hash": "c172701c6ea488ec73019af10349b23f"}
{"id": "meca500_programming_manual_1330", "text": "Protocol-specific details are provided in Section 6, Section 7, and Section 8.", "source": "meca500_programming_manual", "chunk_index": 1330, "length": 78, "hash": "06431d2be8091b3208eb408e3e72fdcf"}
{"id": "meca500_programming_manual_1331", "text": "Protocol-specific details are provided in Section 6, Section 7, and Section 8.", "source": "meca500_programming_manual", "chunk_index": 1331, "length": 78, "hash": "06431d2be8091b3208eb408e3e72fdcf"}
{"id": "meca500_programming_manual_1332", "text": "You will also find standard cyclic protocol definition files in the robot firmware package:", "source": "meca500_programming_manual", "chunk_index": 1332, "length": 91, "hash": "9ba522ac12b807e607eb9e021ac4a09d"}
{"id": "meca500_programming_manual_1333", "text": "You will also find standard cyclic protocol definition files in the robot firmware package:", "source": "meca500_programming_manual", "chunk_index": 1333, "length": 91, "hash": "9ba522ac12b807e607eb9e021ac4a09d"}
{"id": "meca500_programming_manual_1334", "text": "\u2022 EtherNetIP: Meca500_vX.X.X.X.eds", "source": "meca500_programming_manual", "chunk_index": 1334, "length": 34, "hash": "22c46f108d70b3f0a421a78be00d131d"}
{"id": "meca500_programming_manual_1335", "text": "Meca500_vX.X.X.X.eds", "source": "meca500_programming_manual", "chunk_index": 1335, "length": 20, "hash": "507d4018075880ceee58141844810ef8"}
{"id": "meca500_programming_manual_1336", "text": "\u2022 PROFINET: GSDML-V2.42-Mecademic-meca500-XXXXXXXX.xml", "source": "meca500_programming_manual", "chunk_index": 1336, "length": 54, "hash": "8ca892e0fcc043b5a1d0e4e8d25c90b1"}
{"id": "meca500_programming_manual_1337", "text": "GSDML-V2.42-Mecademic-meca500-XXXXXXXX.xml", "source": "meca500_programming_manual", "chunk_index": 1337, "length": 42, "hash": "838f59eaf88c122ed37fd1cb4c1550f7"}
{"id": "meca500_programming_manual_1338", "text": "\u2022 EtherCAT: Meca500_EtherCAT_ESI_vX.X.X.X.xml", "source": "meca500_programming_manual", "chunk_index": 1338, "length": 45, "hash": "5078ef0693a9d2f98d97e12da4ee8a05"}
{"id": "meca500_programming_manual_1339", "text": "Meca500_EtherCAT_ESI_vX.X.X.X.xml", "source": "meca500_programming_manual", "chunk_index": 1339, "length": 33, "hash": "72530031aa188022217bc7a1d85289d6"}
{"id": "meca500_programming_manual_1340", "text": "These files can be imported into your PLC to automatically describe the robot and populate a\nstructure with all its cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 1340, "length": 130, "hash": "50fa2f392853ee68232ea71c2d33044b"}
{"id": "meca500_programming_manual_1341", "text": "These files can be imported into your PLC to automatically describe the robot and populate a\nstructure with all its cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 1341, "length": 130, "hash": "50fa2f392853ee68232ea71c2d33044b"}
{"id": "meca500_programming_manual_1342", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1342, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1343", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1343, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1344", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1344, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1345", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1345, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1346", "text": "The cyclic output (sent to the robot) contains fields for sending commands and actions.", "source": "meca500_programming_manual", "chunk_index": 1346, "length": 87, "hash": "9beb4fdc9d8fe28164726100c1b6a64a"}
{"id": "meca500_programming_manual_1347", "text": "The cyclic output (sent to the robot) contains fields for sending commands and actions.", "source": "meca500_programming_manual", "chunk_index": 1347, "length": 87, "hash": "9beb4fdc9d8fe28164726100c1b6a64a"}
{"id": "meca500_programming_manual_1348", "text": "The total size of the cyclic output is 60 bytes, divided into the following sections:", "source": "meca500_programming_manual", "chunk_index": 1348, "length": 85, "hash": "76bc965d72a2a458c3dc8543d5c19277"}
{"id": "meca500_programming_manual_1349", "text": "The total size of the cyclic output is 60 bytes, divided into the following sections:", "source": "meca500_programming_manual", "chunk_index": 1349, "length": 85, "hash": "76bc965d72a2a458c3dc8543d5c19277"}
{"id": "meca500_programming_manual_1350", "text": "\u2022 Robot control (page 55): Controls the general robot state (activation, simulation mode,", "source": "meca500_programming_manual", "chunk_index": 1350, "length": 89, "hash": "4d7f6e413f064e78989ad13fac6f2562"}
{"id": "meca500_programming_manual_1351", "text": "(page 55): Controls the general robot state (activation, simulation mode,", "source": "meca500_programming_manual", "chunk_index": 1351, "length": 73, "hash": "95469f904f6d4ef5248493daa34b0e91"}
{"id": "meca500_programming_manual_1352", "text": "recovery mode, etc.);", "source": "meca500_programming_manual", "chunk_index": 1352, "length": 21, "hash": "b8270855eca80dcb773990ab1f8eede2"}
{"id": "meca500_programming_manual_1353", "text": "recovery mode, etc.);", "source": "meca500_programming_manual", "chunk_index": 1353, "length": 21, "hash": "b8270855eca80dcb773990ab1f8eede2"}
{"id": "meca500_programming_manual_1354", "text": "\u2022 Motion control (page 58): Controls robot motion (pausing, resuming, sending motion", "source": "meca500_programming_manual", "chunk_index": 1354, "length": 84, "hash": "180c2c567bd97b204aa449647adafdca"}
{"id": "meca500_programming_manual_1355", "text": "(page 58): Controls robot motion (pausing, resuming, sending motion", "source": "meca500_programming_manual", "chunk_index": 1355, "length": 67, "hash": "de90614dc79434c6406bbdde3a322b9e"}
{"id": "meca500_programming_manual_1356", "text": "\u2022 Motion-related commands (page 61): ID and arguments of the command to execute;", "source": "meca500_programming_manual", "chunk_index": 1356, "length": 80, "hash": "2c62c23ebf22b3139d3f8ee7a0a96e49"}
{"id": "meca500_programming_manual_1357", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1357, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_1358", "text": "(page 61): ID and arguments of the command to execute;", "source": "meca500_programming_manual", "chunk_index": 1358, "length": 54, "hash": "35f501de6255769ef7fa59a90a87fdbe"}
{"id": "meca500_programming_manual_1359", "text": "\u2022 Host time (page 65): Synchronizes the robot\u2019s time with the host time;", "source": "meca500_programming_manual", "chunk_index": 1359, "length": 72, "hash": "a1850580aeb5a385305bfc95d609544a"}
{"id": "meca500_programming_manual_1360", "text": "(page 65): Synchronizes the robot\u2019s time with the host time;", "source": "meca500_programming_manual", "chunk_index": 1360, "length": 60, "hash": "9463964fae68756f01977c7d7c1fc3dc"}
{"id": "meca500_programming_manual_1361", "text": "\u2022 Brake control (page 67): Controls the robot\u2019s brakes when deactivated;", "source": "meca500_programming_manual", "chunk_index": 1361, "length": 72, "hash": "af234fa42e6be4d2b7ec3f71ce7a357c"}
{"id": "meca500_programming_manual_1362", "text": "(page 67): Controls the robot\u2019s brakes when deactivated;", "source": "meca500_programming_manual", "chunk_index": 1362, "length": 56, "hash": "a1ac1058a93e95539f9910ff9c8892ef"}
{"id": "meca500_programming_manual_1363", "text": "\u2022 Dynamic data configuration (page 69): Selects which dynamic data the robot reports in", "source": "meca500_programming_manual", "chunk_index": 1363, "length": 87, "hash": "3660b6e381bf751594c738435d8d2e8b"}
{"id": "meca500_programming_manual_1364", "text": "Dynamic data configuration", "source": "meca500_programming_manual", "chunk_index": 1364, "length": 26, "hash": "c3616a5be3c9cc55f5430053c0e1c3a9"}
{"id": "meca500_programming_manual_1365", "text": "(page 69): Selects which dynamic data the robot reports in", "source": "meca500_programming_manual", "chunk_index": 1365, "length": 58, "hash": "f041299b8750e792cb3e17fc7bb9ee69"}
{"id": "meca500_programming_manual_1366", "text": "its cyclic input payload.", "source": "meca500_programming_manual", "chunk_index": 1366, "length": 25, "hash": "fd2a845163c6557939c9338e482ba126"}
{"id": "meca500_programming_manual_1367", "text": "its cyclic input payload.", "source": "meca500_programming_manual", "chunk_index": 1367, "length": 25, "hash": "fd2a845163c6557939c9338e482ba126"}
{"id": "meca500_programming_manual_1368", "text": "The RobotControl section in the cyclic output controls general robot states. Changes to bits\nin this output trigger robot actions, depending on the conditions.", "source": "meca500_programming_manual", "chunk_index": 1368, "length": 159, "hash": "d5f76fec08aa7ff1b8e49a7654010118"}
{"id": "meca500_programming_manual_1369", "text": "section in the cyclic output controls general robot states. Changes to bits\nin this output trigger robot actions, depending on the conditions.", "source": "meca500_programming_manual", "chunk_index": 1369, "length": 142, "hash": "064aa8aba2f507b77e1a552b7c814d75"}
{"id": "meca500_programming_manual_1370", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1370, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1371", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1371, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1372", "text": "Table 4: RobotControl (Offset 0, size 4, EtherCAT index 7200h)", "source": "meca500_programming_manual", "chunk_index": 1372, "length": 62, "hash": "3ca3fccf57f7deb41a9110bd37d0113f"}
{"id": "meca500_programming_manual_1373", "text": "(Offset 0, size 4, EtherCAT index 7200h)", "source": "meca500_programming_manual", "chunk_index": 1373, "length": 40, "hash": "f1b5275c0bbc2f03533676395d027b83"}
{"id": "meca500_programming_manual_1374", "text": "DeactivateRobot Bool", "source": "meca500_programming_manual", "chunk_index": 1374, "length": 20, "hash": "cb31be434bd00750745fa89ee5799c17"}
{"id": "meca500_programming_manual_1375", "text": "Deactivates the robot (see DeactivateRobot\n(page 188)) when set to 1.", "source": "meca500_programming_manual", "chunk_index": 1375, "length": 69, "hash": "3e4176b5a3f04f39a5f187b906116174"}
{"id": "meca500_programming_manual_1376", "text": "Deactivates the robot (see", "source": "meca500_programming_manual", "chunk_index": 1376, "length": 26, "hash": "b736351d9fd6e62fb177d02d6abe8db9"}
{"id": "meca500_programming_manual_1377", "text": "(page 188)) when set to 1.", "source": "meca500_programming_manual", "chunk_index": 1377, "length": 26, "hash": "f5fede16a7666c1886855b978906ed3e"}
{"id": "meca500_programming_manual_1378", "text": "Deactivation is confirmed by the Activated status bit\n(Section 5).", "source": "meca500_programming_manual", "chunk_index": 1378, "length": 66, "hash": "f90c41e0cd4b65785c7410d967a1f3f1"}
{"id": "meca500_programming_manual_1379", "text": "Deactivation is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1379, "length": 32, "hash": "60d85f7afedd2e4f513b21deae4c5fe3"}
{"id": "meca500_programming_manual_1380", "text": "status bit\n(Section 5).", "source": "meca500_programming_manual", "chunk_index": 1380, "length": 23, "hash": "4c0708368080f0f054fb50f492704354"}
{"id": "meca500_programming_manual_1381", "text": "Activates the robot (see ActivateRobot (page 184))\nwhen set to 1, but only if the Deactivate bit is 0.", "source": "meca500_programming_manual", "chunk_index": 1381, "length": 102, "hash": "8082aa5397e6b36535992640efa57a55"}
{"id": "meca500_programming_manual_1382", "text": "Activates the robot (see", "source": "meca500_programming_manual", "chunk_index": 1382, "length": 24, "hash": "10182722e08684a0a4b44a1e2b77f623"}
{"id": "meca500_programming_manual_1383", "text": "(page 184))\nwhen set to 1, but only if the", "source": "meca500_programming_manual", "chunk_index": 1383, "length": 42, "hash": "1016b1b4090ad08445a398000698502b"}
{"id": "meca500_programming_manual_1384", "text": "Activation is confirmed by the Activated status bit\n(Section 5).", "source": "meca500_programming_manual", "chunk_index": 1384, "length": 64, "hash": "ca102e0d34dff7038252aeef2dedb663"}
{"id": "meca500_programming_manual_1385", "text": "Activation is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1385, "length": 30, "hash": "10413c9e885e1ab85741567cdc53ae72"}
{"id": "meca500_programming_manual_1386", "text": "status bit\n(Section 5).", "source": "meca500_programming_manual", "chunk_index": 1386, "length": 23, "hash": "4c0708368080f0f054fb50f492704354"}
{"id": "meca500_programming_manual_1387", "text": "Homes the robot (see Home (page 192)) when set to 1\n(if the robot is activated but not yet homed).", "source": "meca500_programming_manual", "chunk_index": 1387, "length": 98, "hash": "c58107b9abd20309c54f7df6a90d5e5b"}
{"id": "meca500_programming_manual_1388", "text": "Homes the robot (see", "source": "meca500_programming_manual", "chunk_index": 1388, "length": 20, "hash": "3b9306e61ed09fc559c41e5f3a7dd7a7"}
{"id": "meca500_programming_manual_1389", "text": "(page 192)) when set to 1", "source": "meca500_programming_manual", "chunk_index": 1389, "length": 25, "hash": "dfbd65cf83b76a342d004f4a4bead822"}
{"id": "meca500_programming_manual_1390", "text": "(if the robot is activated but not yet homed).", "source": "meca500_programming_manual", "chunk_index": 1390, "length": 46, "hash": "342c9f7ff42a928762208b185dc856a2"}
{"id": "meca500_programming_manual_1391", "text": "Homing is confirmed by the Homed status bit (Section\n5).", "source": "meca500_programming_manual", "chunk_index": 1391, "length": 56, "hash": "ce2e88d89bfdf1c0046a53f901439846"}
{"id": "meca500_programming_manual_1392", "text": "Homing is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1392, "length": 26, "hash": "7d91244de5831969c9be398889f12cfa"}
{"id": "meca500_programming_manual_1393", "text": "status bit (Section\n5).", "source": "meca500_programming_manual", "chunk_index": 1393, "length": 23, "hash": "2723c0a8afefa5d16d279115e1dd2919"}
{"id": "meca500_programming_manual_1394", "text": "Resets the error (see ResetError (page 197)) when set\nto 1.", "source": "meca500_programming_manual", "chunk_index": 1394, "length": 59, "hash": "aad1e424bf4ceef1baf798f2b9afbc00"}
{"id": "meca500_programming_manual_1395", "text": "Resets the error (see", "source": "meca500_programming_manual", "chunk_index": 1395, "length": 21, "hash": "dcc19ca7bf78b75de2e6439a03d211a4"}
{"id": "meca500_programming_manual_1396", "text": "(page 197)) when set\nto 1.", "source": "meca500_programming_manual", "chunk_index": 1396, "length": 26, "hash": "5762bfbc1f82e92e9cf9a1ac77449999"}
{"id": "meca500_programming_manual_1397", "text": "The reset is confirmed when ErrorCode becomes 0\n(Section 5).", "source": "meca500_programming_manual", "chunk_index": 1397, "length": 60, "hash": "c03339e5290ca150edc5e86553a537cf"}
{"id": "meca500_programming_manual_1398", "text": "The reset is confirmed when", "source": "meca500_programming_manual", "chunk_index": 1398, "length": 27, "hash": "c114b436c0125c4432c429ad2c6f85fa"}
{"id": "meca500_programming_manual_1399", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1399, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1400", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1400, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1401", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1401, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1402", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1402, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1403", "text": "Table 4 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1403, "length": 38, "hash": "ab33e80ef362a19b80f340d17ac69a5b"}
{"id": "meca500_programming_manual_1404", "text": "Table 4 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1404, "length": 38, "hash": "ab33e80ef362a19b80f340d17ac69a5b"}
{"id": "meca500_programming_manual_1405", "text": "EnableRecoveryModeBool", "source": "meca500_programming_manual", "chunk_index": 1405, "length": 22, "hash": "a193ecc81c86b1339b1b04bff694b81d"}
{"id": "meca500_programming_manual_1406", "text": "Enables (set to 1) or disables (set to 0) the default\nsimulation mode type (only applies when the robot is\ndeactivated and has no safety stop signal). See\nActivateSim (page 185).", "source": "meca500_programming_manual", "chunk_index": 1406, "length": 178, "hash": "52cbd3165bef2937e0907c02ed6f5adb"}
{"id": "meca500_programming_manual_1407", "text": "Enables (set to 1) or disables (set to 0) the default\nsimulation mode type (only applies when the robot is\ndeactivated and has no safety stop signal). See", "source": "meca500_programming_manual", "chunk_index": 1407, "length": 154, "hash": "e05d6e05ec71283141698fbbac0921a8"}
{"id": "meca500_programming_manual_1408", "text": "The simulation mode status is confirmed by the\nSimActivated bit (Section 5). Note that the type of\nsimulation mode (fast or normal) is not reported in\ncyclic protocols. Also, to change the default simulation\nmode type, use the TCP command SetSimModeCfg\n(page 214).", "source": "meca500_programming_manual", "chunk_index": 1408, "length": 264, "hash": "550f694a59b819494d56a7f2c9de273a"}
{"id": "meca500_programming_manual_1409", "text": "The simulation mode status is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1409, "length": 46, "hash": "a909b8b801948077fa38c2dc4064a5e8"}
{"id": "meca500_programming_manual_1410", "text": "bit (Section 5). Note that the type of\nsimulation mode (fast or normal) is not reported in\ncyclic protocols. Also, to change the default simulation\nmode type, use the TCP command", "source": "meca500_programming_manual", "chunk_index": 1410, "length": 178, "hash": "507ee570205aff44f0849f9bbd684a61"}
{"id": "meca500_programming_manual_1411", "text": "Enables (set to 1) or disables (set to 0) recovery mode\n(see SetRecoveryMode (page 211)).", "source": "meca500_programming_manual", "chunk_index": 1411, "length": 89, "hash": "f0ca77cc9070ea1ee5d16ab8cf377a4d"}
{"id": "meca500_programming_manual_1412", "text": "Enables (set to 1) or disables (set to 0) recovery mode\n(see", "source": "meca500_programming_manual", "chunk_index": 1412, "length": 60, "hash": "92cedd13ffafd3fa16dbab5c2931c076"}
{"id": "meca500_programming_manual_1413", "text": "The recovery mode state is confirmed by the\nRecoveryMode status bit (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1413, "length": 80, "hash": "7edc5047692633f5ad79ff341b97948a"}
{"id": "meca500_programming_manual_1414", "text": "The recovery mode state is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1414, "length": 43, "hash": "585353a4d32aa673106ba6e2f3352267"}
{"id": "meca500_programming_manual_1415", "text": "status bit (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1415, "length": 23, "hash": "eb67769bb3623c60b12add1496731d44"}
{"id": "meca500_programming_manual_1416", "text": "DisableEtherCAT Bool\n(Reserved)", "source": "meca500_programming_manual", "chunk_index": 1416, "length": 31, "hash": "bd2a64d81305cf0b626d5a26dd4010c8"}
{"id": "meca500_programming_manual_1417", "text": "Disables the EtherCAT protocol when set to 1.\nReserved for future use.", "source": "meca500_programming_manual", "chunk_index": 1417, "length": 70, "hash": "077f630fd0864d4e1c589bbe326d73f2"}
{"id": "meca500_programming_manual_1418", "text": "Disables the EtherCAT protocol when set to 1.\nReserved for future use.", "source": "meca500_programming_manual", "chunk_index": 1418, "length": 70, "hash": "077f630fd0864d4e1c589bbe326d73f2"}
{"id": "meca500_programming_manual_1419", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1419, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1420", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1420, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1421", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1421, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1422", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1422, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1423", "text": "The MotionControl section in the cyclic output controls robot motion. Changes to bits in this\noutput trigger robot actions, depending on the conditions.", "source": "meca500_programming_manual", "chunk_index": 1423, "length": 152, "hash": "d00958c3eeedc18151d8f80526293610"}
{"id": "meca500_programming_manual_1424", "text": "section in the cyclic output controls robot motion. Changes to bits in this\noutput trigger robot actions, depending on the conditions.", "source": "meca500_programming_manual", "chunk_index": 1424, "length": 134, "hash": "096b40d08cebab1cdb61c5801bf0aa78"}
{"id": "meca500_programming_manual_1425", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1425, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1426", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1426, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1427", "text": "Table 5: MotionControl (Offset 4, size 4, EtherCAT index 7310h)", "source": "meca500_programming_manual", "chunk_index": 1427, "length": 63, "hash": "4844a0251a6793ded7fea3e0c9094e74"}
{"id": "meca500_programming_manual_1428", "text": "(Offset 4, size 4, EtherCAT index 7310h)", "source": "meca500_programming_manual", "chunk_index": 1428, "length": 40, "hash": "13f0f4c45f1de692d17dcbbc94443e87"}
{"id": "meca500_programming_manual_1429", "text": "A user-defined number. Changing it triggers the\ncommand specified in MotionCommandID to be added to\nthe motion queue.", "source": "meca500_programming_manual", "chunk_index": 1429, "length": 117, "hash": "3df841e10c5eae520c1b45e3a5bf8bed"}
{"id": "meca500_programming_manual_1430", "text": "A user-defined number. Changing it triggers the\ncommand specified in", "source": "meca500_programming_manual", "chunk_index": 1430, "length": 68, "hash": "d6022092f90cc4e773d4cc28c2add154"}
{"id": "meca500_programming_manual_1431", "text": "to be added to\nthe motion queue.", "source": "meca500_programming_manual", "chunk_index": 1431, "length": 32, "hash": "abd7905f295c36cdc05de9b56ea48f22"}
{"id": "meca500_programming_manual_1432", "text": "Reception of the command is confirmed by the MoveID\nstatus bit (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1432, "length": 75, "hash": "a8a820fbe72ed94d33ed4bde9e8f412d"}
{"id": "meca500_programming_manual_1433", "text": "Reception of the command is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1433, "length": 44, "hash": "8fad4b0ab426a576fa4a753fd36e22ca"}
{"id": "meca500_programming_manual_1434", "text": "status bit (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1434, "length": 23, "hash": "eb67769bb3623c60b12add1496731d44"}
{"id": "meca500_programming_manual_1435", "text": "See Section 5 for details.", "source": "meca500_programming_manual", "chunk_index": 1435, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "meca500_programming_manual_1436", "text": "See Section 5 for details.", "source": "meca500_programming_manual", "chunk_index": 1436, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "meca500_programming_manual_1437", "text": "Must be set to 1 for commands to be sent to the robot.", "source": "meca500_programming_manual", "chunk_index": 1437, "length": 54, "hash": "e4d776bc5b7f910cae0a8a42f79c392b"}
{"id": "meca500_programming_manual_1438", "text": "Must be set to 1 for commands to be sent to the robot.", "source": "meca500_programming_manual", "chunk_index": 1438, "length": 54, "hash": "e4d776bc5b7f910cae0a8a42f79c392b"}
{"id": "meca500_programming_manual_1439", "text": "See Section 5 for details.", "source": "meca500_programming_manual", "chunk_index": 1439, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "meca500_programming_manual_1440", "text": "See Section 5 for details.", "source": "meca500_programming_manual", "chunk_index": 1440, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "meca500_programming_manual_1441", "text": "Pauses robot motion without clearing commands in the\nqueue (PauseMotion (page 195)).", "source": "meca500_programming_manual", "chunk_index": 1441, "length": 84, "hash": "ec3c56855174fe00070ee94b051799b5"}
{"id": "meca500_programming_manual_1442", "text": "Pauses robot motion without clearing commands in the", "source": "meca500_programming_manual", "chunk_index": 1442, "length": 52, "hash": "58c30b9ba9a4b136413e921876d319f8"}
{"id": "meca500_programming_manual_1443", "text": "Pause is confirmed by the Paused status bit (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1443, "length": 56, "hash": "c1abdc4c353da8b2a0591495216464f3"}
{"id": "meca500_programming_manual_1444", "text": "Pause is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1444, "length": 25, "hash": "f046418c467d7acde676865ebf27062d"}
{"id": "meca500_programming_manual_1445", "text": "status bit (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1445, "length": 23, "hash": "eb67769bb3623c60b12add1496731d44"}
{"id": "meca500_programming_manual_1446", "text": "Clears the motion queue and pauses the robot\n(ClearMotion (page 186)).", "source": "meca500_programming_manual", "chunk_index": 1446, "length": 70, "hash": "cf078ca162248c3419f3617c62e85eb2"}
{"id": "meca500_programming_manual_1447", "text": "Clears the motion queue and pauses the robot\n(", "source": "meca500_programming_manual", "chunk_index": 1447, "length": 46, "hash": "cbb6aff5c578b8c2a3eb31ba64ff9a97"}
{"id": "meca500_programming_manual_1448", "text": "Clear is confirmed by the Cleared status bit (Section\n5).", "source": "meca500_programming_manual", "chunk_index": 1448, "length": 57, "hash": "1c5a99e0bacdeba25aaefd973f7b2d62"}
{"id": "meca500_programming_manual_1449", "text": "Clear is confirmed by the", "source": "meca500_programming_manual", "chunk_index": 1449, "length": 25, "hash": "918a8f62a4df8919b56995e1533c8572"}
{"id": "meca500_programming_manual_1450", "text": "status bit (Section\n5).", "source": "meca500_programming_manual", "chunk_index": 1450, "length": 23, "hash": "2723c0a8afefa5d16d279115e1dd2919"}
{"id": "meca500_programming_manual_1451", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1451, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1452", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1452, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1453", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1453, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1454", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1454, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1455", "text": "Table 5 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1455, "length": 38, "hash": "3fc15f17417a39dfb115aedce5272564"}
{"id": "meca500_programming_manual_1456", "text": "Table 5 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1456, "length": 38, "hash": "3fc15f17417a39dfb115aedce5272564"}
{"id": "meca500_programming_manual_1457", "text": "A rising edge (value changed from 0 to 1) resumes\nrobot motion (ResumeMotion (page 198)) if the\nfollowing conditions are met:", "source": "meca500_programming_manual", "chunk_index": 1457, "length": 125, "hash": "9adbd1b285d580c125cf84ab60058efe"}
{"id": "meca500_programming_manual_1458", "text": "A rising edge (value changed from 0 to 1) resumes\nrobot motion (", "source": "meca500_programming_manual", "chunk_index": 1458, "length": 64, "hash": "9f11d837b5063751c9129aac6f7fb931"}
{"id": "meca500_programming_manual_1459", "text": "(page 198)) if the\nfollowing conditions are met:", "source": "meca500_programming_manual", "chunk_index": 1459, "length": 48, "hash": "0f3cb485d12fb22248ecce235e066ce3"}
{"id": "meca500_programming_manual_1460", "text": "- PauseMotion and ClearMotion are cleared;", "source": "meca500_programming_manual", "chunk_index": 1460, "length": 42, "hash": "18e1bce245b25dd63109b0bf7e712219"}
{"id": "meca500_programming_manual_1461", "text": "- No safety stop signals are active.", "source": "meca500_programming_manual", "chunk_index": 1461, "length": 36, "hash": "69f8e9be9bdbbf1191960bbd836dacc1"}
{"id": "meca500_programming_manual_1462", "text": "- No safety stop signals are active.", "source": "meca500_programming_manual", "chunk_index": 1462, "length": 36, "hash": "69f8e9be9bdbbf1191960bbd836dacc1"}
{"id": "meca500_programming_manual_1463", "text": "Resuming also clears resettable safety stops (such as\nP-Stop 2 or enabling device released safety stop\nsignals).", "source": "meca500_programming_manual", "chunk_index": 1463, "length": 112, "hash": "44497258aae439a8262f3850d6449e1f"}
{"id": "meca500_programming_manual_1464", "text": "Resuming also clears resettable safety stops (such as\nP-Stop 2 or", "source": "meca500_programming_manual", "chunk_index": 1464, "length": 65, "hash": "7855297c3c246d041aa8dbc5b5efabc9"}
{"id": "meca500_programming_manual_1465", "text": "enabling device released", "source": "meca500_programming_manual", "chunk_index": 1465, "length": 24, "hash": "2368f4ac704eee10741348b773c0ca39"}
{"id": "meca500_programming_manual_1466", "text": "safety stop\nsignals).", "source": "meca500_programming_manual", "chunk_index": 1466, "length": 21, "hash": "21f6ac48679e0b5a93a64c3eb64f1249"}
{"id": "meca500_programming_manual_1467", "text": "It also clears collision and work zone events.", "source": "meca500_programming_manual", "chunk_index": 1467, "length": 46, "hash": "b83c1578bdaba0c7d18ae53325c2c07f"}
{"id": "meca500_programming_manual_1468", "text": "It also clears collision and work zone events.", "source": "meca500_programming_manual", "chunk_index": 1468, "length": 46, "hash": "b83c1578bdaba0c7d18ae53325c2c07f"}
{"id": "meca500_programming_manual_1469", "text": "Motion resume is confirmed when the Paused status\nbit is cleared (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1469, "length": 77, "hash": "13551e16feae5153e52ede851590353f"}
{"id": "meca500_programming_manual_1470", "text": "Motion resume is confirmed when the", "source": "meca500_programming_manual", "chunk_index": 1470, "length": 35, "hash": "99b5f37da3e24db2f2f03be8223cead6"}
{"id": "meca500_programming_manual_1471", "text": "status\nbit is cleared (Section 5).", "source": "meca500_programming_manual", "chunk_index": 1471, "length": 34, "hash": "5fd825a69a0edc90ade1ca454a385e8d"}
{"id": "meca500_programming_manual_1472", "text": "When set, the robot interprets float arguments\n(Section 5) as the cyclic ID of variables to use as\nfunction arguments.", "source": "meca500_programming_manual", "chunk_index": 1472, "length": 118, "hash": "1ea3fe5ce3dd5175e2d9993c573d86c8"}
{"id": "meca500_programming_manual_1473", "text": "When set, the robot interprets float arguments", "source": "meca500_programming_manual", "chunk_index": 1473, "length": 46, "hash": "1125a50c69bc559841f9addf8c413cb4"}
{"id": "meca500_programming_manual_1474", "text": "(Section 5) as the cyclic ID of variables to use as\nfunction arguments.", "source": "meca500_programming_manual", "chunk_index": 1474, "length": 71, "hash": "0ece47d3702d702342c706c46b4e3ae4"}
{"id": "meca500_programming_manual_1475", "text": "See Managing variables with cyclic protocols\n(page 349) for details.", "source": "meca500_programming_manual", "chunk_index": 1475, "length": 68, "hash": "0fe089e3c3bb0213acbd32fbf3d88c1a"}
{"id": "meca500_programming_manual_1476", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 1476, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_1477", "text": "(page 349) for details.", "source": "meca500_programming_manual", "chunk_index": 1477, "length": 23, "hash": "e20491b36a0c9a1b3bb0bb965f8df7d1"}
{"id": "meca500_programming_manual_1478", "text": "Reserved for future use. Must be 0.", "source": "meca500_programming_manual", "chunk_index": 1478, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "meca500_programming_manual_1479", "text": "Reserved for future use. Must be 0.", "source": "meca500_programming_manual", "chunk_index": 1479, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "meca500_programming_manual_1480", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1480, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1481", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1481, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1482", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1482, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1483", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1483, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1484", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1484, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_1485", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1485, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_1486", "text": "The MotionCommand section in the cyclic output is used to specify the command to execute\n(Table 6) and its arguments (Table 7).", "source": "meca500_programming_manual", "chunk_index": 1486, "length": 127, "hash": "9b00906653d005cb57cbb3000638c04e"}
{"id": "meca500_programming_manual_1487", "text": "section in the cyclic output is used to specify the command to execute\n(Table 6) and its arguments (Table 7).", "source": "meca500_programming_manual", "chunk_index": 1487, "length": 109, "hash": "e4a4fa0bb5f297c548ecc94417472c63"}
{"id": "meca500_programming_manual_1488", "text": "The list of valid MotionCommandID values is provided in Table 8, along with the expected\narguments for each command.", "source": "meca500_programming_manual", "chunk_index": 1488, "length": 116, "hash": "a2493bdb51177f13f49e0ba1476aa395"}
{"id": "meca500_programming_manual_1489", "text": "values is provided in Table 8, along with the expected\narguments for each command.", "source": "meca500_programming_manual", "chunk_index": 1489, "length": 82, "hash": "133c83efaa4c4d50c716b2b176e22b79"}
{"id": "meca500_programming_manual_1490", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1490, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1491", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1491, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1492", "text": "Table 6: MotionCommand (Offset 8, size 4, EtherCAT index 7305h)", "source": "meca500_programming_manual", "chunk_index": 1492, "length": 63, "hash": "b840db8e665a11a9a8bc6c03d797bc01"}
{"id": "meca500_programming_manual_1493", "text": "(Offset 8, size 4, EtherCAT index 7305h)", "source": "meca500_programming_manual", "chunk_index": 1493, "length": 40, "hash": "eeeeca49ca83f882f5696748dab6699f"}
{"id": "meca500_programming_manual_1494", "text": "MotionCommandID Integer", "source": "meca500_programming_manual", "chunk_index": 1494, "length": 23, "hash": "a9e13e20e6c7ee7fdf206f949cfd1ceb"}
{"id": "meca500_programming_manual_1495", "text": "The ID of the motion-related command to execute.", "source": "meca500_programming_manual", "chunk_index": 1495, "length": 48, "hash": "59c64370418517813798f2899fca71ff"}
{"id": "meca500_programming_manual_1496", "text": "The ID of the motion-related command to execute.", "source": "meca500_programming_manual", "chunk_index": 1496, "length": 48, "hash": "59c64370418517813798f2899fca71ff"}
{"id": "meca500_programming_manual_1497", "text": "See Table 8 for command IDs and Using motion-related\ncommands (page 51) for more information.", "source": "meca500_programming_manual", "chunk_index": 1497, "length": 93, "hash": "66f06d5cc4e9b40da01443112cfa48cd"}
{"id": "meca500_programming_manual_1498", "text": "See Table 8 for command IDs and", "source": "meca500_programming_manual", "chunk_index": 1498, "length": 31, "hash": "48f04100d843ad6e71ef14cb697cad1e"}
{"id": "meca500_programming_manual_1499", "text": "Using motion-related\ncommands", "source": "meca500_programming_manual", "chunk_index": 1499, "length": 29, "hash": "63d74a05abc9b9a3ca5cd99072976f51"}
{"id": "meca500_programming_manual_1500", "text": "(page 51) for more information.", "source": "meca500_programming_manual", "chunk_index": 1500, "length": 31, "hash": "95da3983717f139d7aae3f070096c4a0"}
{"id": "meca500_programming_manual_1501", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1501, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1502", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1502, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1503", "text": "Table 7: MotionCommandArgs (Offset 12, size 24, EtherCAT index 7306h)", "source": "meca500_programming_manual", "chunk_index": 1503, "length": 69, "hash": "a771f2dacb69979e8d554517cd39069d"}
{"id": "meca500_programming_manual_1504", "text": "(Offset 12, size 24, EtherCAT index 7306h)", "source": "meca500_programming_manual", "chunk_index": 1504, "length": 42, "hash": "79027add359ead23640da8d19b8f3120"}
{"id": "meca500_programming_manual_1505", "text": "First argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.", "source": "meca500_programming_manual", "chunk_index": 1505, "length": 365, "hash": "cc1b8bed086176bc5ca1af0081154137"}
{"id": "meca500_programming_manual_1506", "text": "First argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.", "source": "meca500_programming_manual", "chunk_index": 1506, "length": 365, "hash": "cc1b8bed086176bc5ca1af0081154137"}
{"id": "meca500_programming_manual_1507", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1507, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1508", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1508, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1509", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1509, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1510", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1510, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1511", "text": "Table 8: MotionCommandID numbers", "source": "meca500_programming_manual", "chunk_index": 1511, "length": 32, "hash": "60627d5280cfc7c6a7da5419c0b8f79a"}
{"id": "meca500_programming_manual_1512", "text": "No movement: all six arguments are ignored.\nMoveJoints (page 135)\u2020\nMovePose (page 147)\u2020\nMoveLin (page 141)\u2020\nMoveLinRelTrf (page 143)\u2020\nMoveLinRelWrf (page 144)\u2020\nDelay (page 134)\u2020\nSetBlending (page 151)\u2020\nSetJointVel (page 163)\u2020\nSetJointAcc (page 161)\u2020\nSetCartAngVel (page 153)\u2020\nSetCartLinVel (page 154)\u2020\nSetCartAcc (page 152)\u2020\nSetTrf (page 179)\u2020\nSetWrf (page 181)\u2020\nSetConf (page 157)\nSetAutoConf (page 149)\u2020\nSetCheckpoint (page 155)\u2020\nGripper action: argument 1 is 0 for GripperClose (page 324) and 1 for\nGripperOpen (page 325)", "source": "meca500_programming_manual", "chunk_index": 1512, "length": 524, "hash": "7a747b82cb214be926430820ff5dd1d5"}
{"id": "meca500_programming_manual_1513", "text": "No movement: all six arguments are ignored.", "source": "meca500_programming_manual", "chunk_index": 1513, "length": 43, "hash": "1600c2d88712e03bbd211018b0d0104a"}
{"id": "meca500_programming_manual_1514", "text": "Gripper action: argument 1 is 0 for", "source": "meca500_programming_manual", "chunk_index": 1514, "length": 35, "hash": "8dbf36cb3ede9cc023d4a89273b77a9f"}
{"id": "meca500_programming_manual_1515", "text": "(page 324) and 1 for", "source": "meca500_programming_manual", "chunk_index": 1515, "length": 20, "hash": "9a6f96a2f4a2d1fe6bcf90e209c3f072"}
{"id": "meca500_programming_manual_1516", "text": "SetGripperVel (page 332)\u2020\nSetGripperForce (page 329)\u2020\nMoveJointsVel (page 138)\u2020\nMoveLinVelWrf (page 146)\u2020\nMoveLinVelTrf (page 145)\u2020\nSetVelTimeout (page 180)\u2020\nSetConfTurn (page 159)\u2020\nSetAutoConfTurn (page 150)\u2020\nSetTorqueLimits (page 175)\u2020\nSetTorqueLimitsCfg (page 177)\u2020\nMoveJointsRel (page 137)\u2020\nSetValveState (page 340)\u2020\nSetGripperRange (page 330)\u2020\nMoveGripper (page 326)\u2020\nSetJointVelLimit (page 165)\u2020\nSetOutputState (page 334) (Not available on this robot)\nSetOutputState_Immediate (page 335) (Not available on this robot)\nSetIoSim (page 333) (Not available on this robot)\nVacuumGrip (page 341) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1516, "length": 625, "hash": "a78cd66b6c6d0767fa60fff2ff0caca7"}
{"id": "meca500_programming_manual_1517", "text": "(page 334) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1517, "length": 40, "hash": "d1ea64173598321b51030b21a47221d8"}
{"id": "meca500_programming_manual_1518", "text": "SetOutputState_Immediate", "source": "meca500_programming_manual", "chunk_index": 1518, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "meca500_programming_manual_1519", "text": "(page 335) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1519, "length": 40, "hash": "ab0eff4cab67f33d9633951aba144bac"}
{"id": "meca500_programming_manual_1520", "text": "(page 333) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1520, "length": 40, "hash": "1061fe7ee67b35c76ecbf59e9ab63769"}
{"id": "meca500_programming_manual_1521", "text": "(page 341) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1521, "length": 40, "hash": "60b80dd9b8fc38130ec77a4426bda65e"}
{"id": "meca500_programming_manual_1522", "text": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18", "source": "meca500_programming_manual", "chunk_index": 1522, "length": 46, "hash": "6d6b67610dba76673d7406599cfd0a55"}
{"id": "meca500_programming_manual_1523", "text": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "source": "meca500_programming_manual", "chunk_index": 1523, "length": 22, "hash": "f0f70c52e5fcca490b7dfba5dc585c99"}
{"id": "meca500_programming_manual_1524", "text": "11\n12\n13\n14\n15\n16\n17\n18", "source": "meca500_programming_manual", "chunk_index": 1524, "length": 23, "hash": "c8744104fe3f6c2eb1bddee5357524d2"}
{"id": "meca500_programming_manual_1525", "text": "19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37", "source": "meca500_programming_manual", "chunk_index": 1525, "length": 56, "hash": "98d168a9800732fb84f63fd660eefad5"}
{"id": "meca500_programming_manual_1526", "text": "19\n20\n21\n22\n23\n24\n25", "source": "meca500_programming_manual", "chunk_index": 1526, "length": 20, "hash": "1a3fed5f6998e1cd5ab5e7d41915133f"}
{"id": "meca500_programming_manual_1527", "text": "26\n27\n28\n29\n30\n31\n32\n33\n34", "source": "meca500_programming_manual", "chunk_index": 1527, "length": 26, "hash": "da28f37c7f420bdd9df4fe98839f9ac9"}
{"id": "meca500_programming_manual_1528", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1528, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1529", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1529, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1530", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1530, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1531", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1531, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1532", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1532, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1533", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1533, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1534", "text": "Table 8 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1534, "length": 38, "hash": "27ff40f9c5a5ae3343a1a69cc91966d5"}
{"id": "meca500_programming_manual_1535", "text": "Table 8 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1535, "length": 38, "hash": "27ff40f9c5a5ae3343a1a69cc91966d5"}
{"id": "meca500_programming_manual_1536", "text": "VacuumGrip_Immediate (page 342) (Not available on this robot)\nVacuumRelease (page 343) (Not available on this robot)\nVacuumRelease_Immediate (page 344) (Not available on this robot)\nSetVacuumThreshold (page 338) (Not available on this robot)\nSetVacuumThreshold_Immediate (page 339) (Not available on this robot)\nSetVacuumPurgeDuration (page 336) (Not available on this robot)\nSetVacuumPurgeDuration_Immediate (page 337) (Not available on this robot)\nMoveJump (page 140) (Not available on this robot)\nSetMoveJumpHeight (page 171) (Not available on this robot)\nSetMoveJumpApproachVel (page 170) (Not available on this robot)\nSetTimeScaling (page 215)\u2020\nSetMoveMode (page 172)\u2020\nSetMoveDurationCfg (page 168)\u2020\nSetMoveDuration (page 167)\u2020\nSetPayload (page 173)\u2020\nStartProgram (page 216)\u2020\nSetJointLimits (page 203)\u2020\nSetJointLimitsCfg (page 204)\u2020\nSetWorkZoneCfg (page 303)\u2020\nSetWorkZoneLimits (page 305)\u2020\nSetCollisionCfg (page 301)\u2020\nSetToolSphere (page 302)\u2020\nSetCalibrationCfg (page 199)\u2020\nRebootRobot (page 196)\nSet a robot variable (see Setting a variable (page 349))", "source": "meca500_programming_manual", "chunk_index": 1536, "length": 1058, "hash": "c05dba447ba6bfffa3035465fce49378"}
{"id": "meca500_programming_manual_1537", "text": "VacuumGrip_Immediate", "source": "meca500_programming_manual", "chunk_index": 1537, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "meca500_programming_manual_1538", "text": "(page 342) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1538, "length": 40, "hash": "59ac9fe5af92e9cab2226fd7c8ed8152"}
{"id": "meca500_programming_manual_1539", "text": "(page 343) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1539, "length": 40, "hash": "b3a8c2de00f456febea969715a0bb969"}
{"id": "meca500_programming_manual_1540", "text": "VacuumRelease_Immediate", "source": "meca500_programming_manual", "chunk_index": 1540, "length": 23, "hash": "8b36e69120d10c16f258423e04a4472c"}
{"id": "meca500_programming_manual_1541", "text": "(page 344) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1541, "length": 40, "hash": "0a1f790250ce07f5044c24b34076b2cc"}
{"id": "meca500_programming_manual_1542", "text": "(page 338) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1542, "length": 40, "hash": "da4d85bc974fa0f2a2c2a59c05a0991a"}
{"id": "meca500_programming_manual_1543", "text": "SetVacuumThreshold_Immediate", "source": "meca500_programming_manual", "chunk_index": 1543, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "meca500_programming_manual_1544", "text": "(page 339) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1544, "length": 40, "hash": "b900f9a65c324b3859e66d5225367c2c"}
{"id": "meca500_programming_manual_1545", "text": "SetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 1545, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "meca500_programming_manual_1546", "text": "(page 336) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1546, "length": 40, "hash": "7e60bcbf8a6d383d93fc81146c4716b7"}
{"id": "meca500_programming_manual_1547", "text": "SetVacuumPurgeDuration_Immediate", "source": "meca500_programming_manual", "chunk_index": 1547, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "meca500_programming_manual_1548", "text": "(page 337) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1548, "length": 40, "hash": "7e467082832fe875aa0b051db3290732"}
{"id": "meca500_programming_manual_1549", "text": "(page 140) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1549, "length": 40, "hash": "d9c9cb8ccfe8029cb8a1566d8aff84b8"}
{"id": "meca500_programming_manual_1550", "text": "(page 171) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1550, "length": 40, "hash": "e6a42fccf41a051d7d1dff4214945e38"}
{"id": "meca500_programming_manual_1551", "text": "SetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 1551, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "meca500_programming_manual_1552", "text": "(page 170) (Not available on this robot)", "source": "meca500_programming_manual", "chunk_index": 1552, "length": 40, "hash": "22bf8be799345e9b98bdc79726ac73af"}
{"id": "meca500_programming_manual_1553", "text": "(page 196)\nSet a robot variable (see", "source": "meca500_programming_manual", "chunk_index": 1553, "length": 36, "hash": "46de230c7697af9c24bc9a0d483bfe42"}
{"id": "meca500_programming_manual_1554", "text": "38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n60\n100\n150\n151\n152\n153\n154\n155\n156\n200\n10,000\nto\n19,999", "source": "meca500_programming_manual", "chunk_index": 1554, "length": 97, "hash": "f804d4c1ca061f6720e14619f656ce26"}
{"id": "meca500_programming_manual_1555", "text": "38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49", "source": "meca500_programming_manual", "chunk_index": 1555, "length": 35, "hash": "d55a0a9060fb7a8b0669f79e7397031d"}
{"id": "meca500_programming_manual_1556", "text": "50\n51\n60\n100\n150\n151\n152\n153\n154\n155\n156\n200\n10,000\nto\n19,999", "source": "meca500_programming_manual", "chunk_index": 1556, "length": 61, "hash": "9f3c00f3c970c740059c5ae5696299a7"}
{"id": "meca500_programming_manual_1557", "text": "\u2020 Argument count and type match those of the related TCP/IP command. Extra arguments\nare ignored.", "source": "meca500_programming_manual", "chunk_index": 1557, "length": 97, "hash": "7ba586b16876a17b56c9d593e6596462"}
{"id": "meca500_programming_manual_1558", "text": "Argument count and type match those of the related TCP/IP command. Extra arguments", "source": "meca500_programming_manual", "chunk_index": 1558, "length": 82, "hash": "0ed650657ed5ce5355bba120d25326fb"}
{"id": "meca500_programming_manual_1559", "text": "The HostTime section in the cyclic output synchronizes the robot\u2019s date/time with the host\u2019s\n(see SetRtc (page 213)).", "source": "meca500_programming_manual", "chunk_index": 1559, "length": 117, "hash": "f1bfcbeb8812c7faa6594703b4541da7"}
{"id": "meca500_programming_manual_1560", "text": "section in the cyclic output synchronizes the robot\u2019s date/time with the host\u2019s\n(see", "source": "meca500_programming_manual", "chunk_index": 1560, "length": 84, "hash": "a027959e829f8fc17aec533573b2c260"}
{"id": "meca500_programming_manual_1561", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1561, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1562", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1562, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1563", "text": "Table 9: HostTime (Offset 36, size 4, EtherCAT index 7400h)", "source": "meca500_programming_manual", "chunk_index": 1563, "length": 59, "hash": "7fa371f08885115db204f51e043cb9e3"}
{"id": "meca500_programming_manual_1564", "text": "(Offset 36, size 4, EtherCAT index 7400h)", "source": "meca500_programming_manual", "chunk_index": 1564, "length": 41, "hash": "1e7ffcacb4cccc01100316c4a3e2c35b"}
{"id": "meca500_programming_manual_1565", "text": "Current time in seconds since UNIX epoch (00:00:00\nUTC, January 1, 1970).", "source": "meca500_programming_manual", "chunk_index": 1565, "length": 73, "hash": "a45dcd533f69c7010bd08d6587ca9b55"}
{"id": "meca500_programming_manual_1566", "text": "Current time in seconds since UNIX epoch (00:00:00\nUTC, January 1, 1970).", "source": "meca500_programming_manual", "chunk_index": 1566, "length": 73, "hash": "a45dcd533f69c7010bd08d6587ca9b55"}
{"id": "meca500_programming_manual_1567", "text": "If non-zero, the robot updates its time to this value\n(same as SetRtc (page 213)).", "source": "meca500_programming_manual", "chunk_index": 1567, "length": 82, "hash": "e992aa78193d55ab08b1b8c96f199fb0"}
{"id": "meca500_programming_manual_1568", "text": "If non-zero, the robot updates its time to this value\n(same as", "source": "meca500_programming_manual", "chunk_index": 1568, "length": 62, "hash": "8c936b36c1749d2f089ce5d7c9dcc73e"}
{"id": "meca500_programming_manual_1569", "text": "This ensures accurate timestamps in robot logs, as the\nrobot resets its time on reboot.`", "source": "meca500_programming_manual", "chunk_index": 1569, "length": 88, "hash": "9b298851eb5d848ec37cf130d1ef4a87"}
{"id": "meca500_programming_manual_1570", "text": "This ensures accurate timestamps in robot logs, as the\nrobot resets its time on reboot.`", "source": "meca500_programming_manual", "chunk_index": 1570, "length": 88, "hash": "9b298851eb5d848ec37cf130d1ef4a87"}
{"id": "meca500_programming_manual_1571", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1571, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1572", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1572, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1573", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1573, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1574", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1574, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1575", "text": "The BrakesControl section in the cyclic output controls the robot\u2019s brakes when it is\ndeactivated.", "source": "meca500_programming_manual", "chunk_index": 1575, "length": 98, "hash": "bf6e63b49c25cdec080adb865e32b1e0"}
{"id": "meca500_programming_manual_1576", "text": "section in the cyclic output controls the robot\u2019s brakes when it is\ndeactivated.", "source": "meca500_programming_manual", "chunk_index": 1576, "length": 80, "hash": "b90e030df0bcb1467b8a9f7574fe369c"}
{"id": "meca500_programming_manual_1577", "text": "The robot has brakes on joints 1, 2, and 3.", "source": "meca500_programming_manual", "chunk_index": 1577, "length": 43, "hash": "5569385e1a736b2c3a4785d7f5c14e09"}
{"id": "meca500_programming_manual_1578", "text": "The robot has brakes on joints 1, 2, and 3.", "source": "meca500_programming_manual", "chunk_index": 1578, "length": 43, "hash": "5569385e1a736b2c3a4785d7f5c14e09"}
{"id": "meca500_programming_manual_1579", "text": "The brakes behave as follows:", "source": "meca500_programming_manual", "chunk_index": 1579, "length": 29, "hash": "b57c886df8c2338501eb649738237118"}
{"id": "meca500_programming_manual_1580", "text": "The brakes behave as follows:", "source": "meca500_programming_manual", "chunk_index": 1580, "length": 29, "hash": "b57c886df8c2338501eb649738237118"}
{"id": "meca500_programming_manual_1581", "text": "\u2022 Brakes disengage automatically when the robot is activated (it holds position when not", "source": "meca500_programming_manual", "chunk_index": 1581, "length": 88, "hash": "5af7ef2492fcd2cbc11f064dec711bbf"}
{"id": "meca500_programming_manual_1582", "text": "\u2022 Brakes disengage automatically when the robot is activated (it holds position when not", "source": "meca500_programming_manual", "chunk_index": 1582, "length": 88, "hash": "5af7ef2492fcd2cbc11f064dec711bbf"}
{"id": "meca500_programming_manual_1583", "text": "\u2022 Brakes engage automatically when the robot is deactivated (including safety signals or", "source": "meca500_programming_manual", "chunk_index": 1583, "length": 88, "hash": "c628b585a5f2479c21bb155b9f2ece37"}
{"id": "meca500_programming_manual_1584", "text": "\u2022 Brakes engage automatically when the robot is deactivated (including safety signals or", "source": "meca500_programming_manual", "chunk_index": 1584, "length": 88, "hash": "c628b585a5f2479c21bb155b9f2ece37"}
{"id": "meca500_programming_manual_1585", "text": "\u2022 While deactivated, the brakes can be controlled using the fields in Table 10.", "source": "meca500_programming_manual", "chunk_index": 1585, "length": 79, "hash": "0da778284a928404742dd793507aebc4"}
{"id": "meca500_programming_manual_1586", "text": "\u2022 While deactivated, the brakes can be controlled using the fields in Table 10.", "source": "meca500_programming_manual", "chunk_index": 1586, "length": 79, "hash": "0da778284a928404742dd793507aebc4"}
{"id": "meca500_programming_manual_1587", "text": "Disable brakes with caution; without brakes, all links will collapse downward. The brakes\ncontrol fields will be removed in the upcoming firmware release.", "source": "meca500_programming_manual", "chunk_index": 1587, "length": 154, "hash": "7239c23cd36522c280bab65d76f396e0"}
{"id": "meca500_programming_manual_1588", "text": "Disable brakes with caution; without brakes, all links will collapse downward. The brakes\ncontrol fields will be removed in the upcoming firmware release.", "source": "meca500_programming_manual", "chunk_index": 1588, "length": 154, "hash": "7239c23cd36522c280bab65d76f396e0"}
{"id": "meca500_programming_manual_1589", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1589, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1590", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1590, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1591", "text": "Table 10: BrakesControl (Offset 40, size 4, EtherCAT index 7410h)", "source": "meca500_programming_manual", "chunk_index": 1591, "length": 65, "hash": "09f9cd7fa1df11bca317d4ab02365965"}
{"id": "meca500_programming_manual_1592", "text": "(Offset 40, size 4, EtherCAT index 7410h)", "source": "meca500_programming_manual", "chunk_index": 1592, "length": 41, "hash": "b87dea52a16d7080a72354d4a78c2066"}
{"id": "meca500_programming_manual_1593", "text": "BrakesControlAllowed", "source": "meca500_programming_manual", "chunk_index": 1593, "length": 20, "hash": "92be62653d8f23786af47dd390e6e158"}
{"id": "meca500_programming_manual_1594", "text": "BrakesControlAllowed", "source": "meca500_programming_manual", "chunk_index": 1594, "length": 20, "hash": "92be62653d8f23786af47dd390e6e158"}
{"id": "meca500_programming_manual_1595", "text": "Must be set to 1 to allow brakes control through cyclic\ndata.", "source": "meca500_programming_manual", "chunk_index": 1595, "length": 61, "hash": "059d0dd31e6d95dc15c785fd7992c92a"}
{"id": "meca500_programming_manual_1596", "text": "Must be set to 1 to allow brakes control through cyclic\ndata.", "source": "meca500_programming_manual", "chunk_index": 1596, "length": 61, "hash": "059d0dd31e6d95dc15c785fd7992c92a"}
{"id": "meca500_programming_manual_1597", "text": "This bit ensures that the brakes are not inadvertently\ndisengaged if cyclic data sent to the robot contains all\nzeros.", "source": "meca500_programming_manual", "chunk_index": 1597, "length": 118, "hash": "b07832f1d7075c6bbe923edbc0b03e92"}
{"id": "meca500_programming_manual_1598", "text": "This bit ensures that the brakes are not inadvertently\ndisengaged if cyclic data sent to the robot contains all\nzeros.", "source": "meca500_programming_manual", "chunk_index": 1598, "length": 118, "hash": "b07832f1d7075c6bbe923edbc0b03e92"}
{"id": "meca500_programming_manual_1599", "text": "If set to 1, the brakes are engaged.", "source": "meca500_programming_manual", "chunk_index": 1599, "length": 36, "hash": "34adb9aa1a7db4e14f75861aa400e96e"}
{"id": "meca500_programming_manual_1600", "text": "If set to 1, the brakes are engaged.", "source": "meca500_programming_manual", "chunk_index": 1600, "length": 36, "hash": "34adb9aa1a7db4e14f75861aa400e96e"}
{"id": "meca500_programming_manual_1601", "text": "If 0, the brakes are disengaged, and the robot may fall\nunder the effects of gravity.", "source": "meca500_programming_manual", "chunk_index": 1601, "length": 85, "hash": "222b3e0ea47e54921e28354661ac2def"}
{"id": "meca500_programming_manual_1602", "text": "If 0, the brakes are disengaged, and the robot may fall\nunder the effects of gravity.", "source": "meca500_programming_manual", "chunk_index": 1602, "length": 85, "hash": "222b3e0ea47e54921e28354661ac2def"}
{"id": "meca500_programming_manual_1603", "text": "This bit is ignored if the BrakesControlAllowed bit is\ncleared or if the robot is activated.", "source": "meca500_programming_manual", "chunk_index": 1603, "length": 92, "hash": "1f8b3db4bcc88ae10e5fac605099edb4"}
{"id": "meca500_programming_manual_1604", "text": "This bit is ignored if the", "source": "meca500_programming_manual", "chunk_index": 1604, "length": 26, "hash": "610571d676dbafe6563b053639fb8c78"}
{"id": "meca500_programming_manual_1605", "text": "BrakesControlAllowed", "source": "meca500_programming_manual", "chunk_index": 1605, "length": 20, "hash": "92be62653d8f23786af47dd390e6e158"}
{"id": "meca500_programming_manual_1606", "text": "bit is\ncleared or if the robot is activated.", "source": "meca500_programming_manual", "chunk_index": 1606, "length": 44, "hash": "90e8551de22d27b18dc68771db2842ab"}
{"id": "meca500_programming_manual_1607", "text": "Reserved for future use. Must be 0.", "source": "meca500_programming_manual", "chunk_index": 1607, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "meca500_programming_manual_1608", "text": "Reserved for future use. Must be 0.", "source": "meca500_programming_manual", "chunk_index": 1608, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "meca500_programming_manual_1609", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1609, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1610", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1610, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1611", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1611, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1612", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1612, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1613", "text": "Dynamic data configuration", "source": "meca500_programming_manual", "chunk_index": 1613, "length": 26, "hash": "c3616a5be3c9cc55f5430053c0e1c3a9"}
{"id": "meca500_programming_manual_1614", "text": "Dynamic data configuration", "source": "meca500_programming_manual", "chunk_index": 1614, "length": 26, "hash": "c3616a5be3c9cc55f5430053c0e1c3a9"}
{"id": "meca500_programming_manual_1615", "text": "The DynamicDataConfiguration section in the cyclic output determines which dynamic data\nthe robot reports in each of the 4 available dynamic-data slots in its cyclic input payload.", "source": "meca500_programming_manual", "chunk_index": 1615, "length": 180, "hash": "1f595a3d74a295d872d5df60b4cdc20a"}
{"id": "meca500_programming_manual_1616", "text": "DynamicDataConfiguration", "source": "meca500_programming_manual", "chunk_index": 1616, "length": 24, "hash": "0799f5c97dc873df918a4fa222fd0126"}
{"id": "meca500_programming_manual_1617", "text": "section in the cyclic output determines which dynamic data\nthe robot reports in each of the 4 available dynamic-data slots in its cyclic input payload.", "source": "meca500_programming_manual", "chunk_index": 1617, "length": 151, "hash": "f4e7322ac87f84c82d79d96685b665d4"}
{"id": "meca500_programming_manual_1618", "text": "When a specific dynamic data type is chosen (in Table 11), the robot will return the\ncorresponding values in Table 22, Table 23, Table 24, or Table 25.", "source": "meca500_programming_manual", "chunk_index": 1618, "length": 151, "hash": "aa9f3522d8e3d8ecf590d4be2e7c3389"}
{"id": "meca500_programming_manual_1619", "text": "When a specific dynamic data type is chosen (in Table 11), the robot will return the\ncorresponding values in Table 22, Table 23, Table 24, or Table 25.", "source": "meca500_programming_manual", "chunk_index": 1619, "length": 151, "hash": "aa9f3522d8e3d8ecf590d4be2e7c3389"}
{"id": "meca500_programming_manual_1620", "text": "If dynamic data type 0 (Automatic) is used, the robot cycles through available dynamic data\ntypes, reporting a different type each cycle.", "source": "meca500_programming_manual", "chunk_index": 1620, "length": 137, "hash": "58a47a0139351195922705e7068aa542"}
{"id": "meca500_programming_manual_1621", "text": "If dynamic data type 0 (", "source": "meca500_programming_manual", "chunk_index": 1621, "length": 24, "hash": "33840273e6d8b5da21f42249954057a5"}
{"id": "meca500_programming_manual_1622", "text": ") is used, the robot cycles through available dynamic data\ntypes, reporting a different type each cycle.", "source": "meca500_programming_manual", "chunk_index": 1622, "length": 104, "hash": "582bf98ddb44e1febcffd52c82410bd1"}
{"id": "meca500_programming_manual_1623", "text": "See Table 12 for a list of available dynamic data types.", "source": "meca500_programming_manual", "chunk_index": 1623, "length": 56, "hash": "c97dccc6a2971db595e92a5f69f33980"}
{"id": "meca500_programming_manual_1624", "text": "See Table 12 for a list of available dynamic data types.", "source": "meca500_programming_manual", "chunk_index": 1624, "length": 56, "hash": "c97dccc6a2971db595e92a5f69f33980"}
{"id": "meca500_programming_manual_1625", "text": "A delay of one or two cycles may occur before a change to the requested dynamic data\ntype takes effect.", "source": "meca500_programming_manual", "chunk_index": 1625, "length": 103, "hash": "a218531afff9a2ae75d9462d854478cb"}
{"id": "meca500_programming_manual_1626", "text": "A delay of one or two cycles may occur before a change to the requested dynamic data\ntype takes effect.", "source": "meca500_programming_manual", "chunk_index": 1626, "length": 103, "hash": "a218531afff9a2ae75d9462d854478cb"}
{"id": "meca500_programming_manual_1627", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1627, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1628", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1628, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1629", "text": "Table 11: DynamicDataConfiguration (Offset 44, size 16, EtherCAT indices 7420h, 7421h, 7422h, 7423h)", "source": "meca500_programming_manual", "chunk_index": 1629, "length": 100, "hash": "54b22cb8080588fd5343685ae68be9fe"}
{"id": "meca500_programming_manual_1630", "text": "DynamicDataConfiguration", "source": "meca500_programming_manual", "chunk_index": 1630, "length": 24, "hash": "0799f5c97dc873df918a4fa222fd0126"}
{"id": "meca500_programming_manual_1631", "text": "(Offset 44, size 16, EtherCAT indices 7420h, 7421h, 7422h, 7423h)", "source": "meca500_programming_manual", "chunk_index": 1631, "length": 65, "hash": "51aea9738f7806fdaf962cf8e5819030"}
{"id": "meca500_programming_manual_1632", "text": "DynamicDataTypeID 1Integer\nDynamicDataTypeID 2Integer\nDynamicDataTypeID 3Integer\nDynamicDataTypeID 4Integer", "source": "meca500_programming_manual", "chunk_index": 1632, "length": 107, "hash": "9a3d8b081e22b1a3360139ae1abf9010"}
{"id": "meca500_programming_manual_1633", "text": "1620h:1\n1621h:1\n1622h:1\n1623h:1", "source": "meca500_programming_manual", "chunk_index": 1633, "length": 31, "hash": "9eee929c74adc82e97ac3c45875ba2a6"}
{"id": "meca500_programming_manual_1634", "text": "1620h:1\n1621h:1\n1622h:1\n1623h:1", "source": "meca500_programming_manual", "chunk_index": 1634, "length": 31, "hash": "9eee929c74adc82e97ac3c45875ba2a6"}
{"id": "meca500_programming_manual_1635", "text": "Dynamic data type for index #1 (see Table 12).\nDynamic data type for index #2 (see Table 12).\nDynamic data type for index #3 (see Table 12).\nDynamic data type for index #4 (see Table 12).", "source": "meca500_programming_manual", "chunk_index": 1635, "length": 187, "hash": "707656feaf4c9a23d469c33a555e70e6"}
{"id": "meca500_programming_manual_1636", "text": "Dynamic data type for index #1 (see Table 12).\nDynamic data type for index #2 (see Table 12).\nDynamic data type for index #3 (see Table 12).\nDynamic data type for index #4 (see Table 12).", "source": "meca500_programming_manual", "chunk_index": 1636, "length": 187, "hash": "707656feaf4c9a23d469c33a555e70e6"}
{"id": "meca500_programming_manual_1637", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1637, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1638", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1638, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1639", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1639, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1640", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1640, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1641", "text": "Table 12: List of DynamicDataTypeID values", "source": "meca500_programming_manual", "chunk_index": 1641, "length": 42, "hash": "6dfd998c8fe2b5c117b958efeba10fc5"}
{"id": "meca500_programming_manual_1642", "text": "The robot will automatically choose a dynamic data type and change it every cycle,\ngoing through all of them in around-robin manner.", "source": "meca500_programming_manual", "chunk_index": 1642, "length": 132, "hash": "cd7d1293d720a7c2e17df60a7f4a237a"}
{"id": "meca500_programming_manual_1643", "text": "The robot will automatically choose a dynamic data type and change it every cycle,\ngoing through all of them in around-robin manner.", "source": "meca500_programming_manual", "chunk_index": 1643, "length": 132, "hash": "cd7d1293d720a7c2e17df60a7f4a237a"}
{"id": "meca500_programming_manual_1644", "text": "This is the easiest way for the host to receive all possible values periodically.", "source": "meca500_programming_manual", "chunk_index": 1644, "length": 81, "hash": "80f496b067f3665f6a0ad638c44206ea"}
{"id": "meca500_programming_manual_1645", "text": "This is the easiest way for the host to receive all possible values periodically.", "source": "meca500_programming_manual", "chunk_index": 1645, "length": 81, "hash": "80f496b067f3665f6a0ad638c44206ea"}
{"id": "meca500_programming_manual_1646", "text": "Firmware version (GetFwVersion (page 238)).", "source": "meca500_programming_manual", "chunk_index": 1646, "length": 43, "hash": "d38e03918da0c8695b0febde43e95b41"}
{"id": "meca500_programming_manual_1647", "text": "Values: [major version, minor version, patch version, build number].", "source": "meca500_programming_manual", "chunk_index": 1647, "length": 68, "hash": "6270483d3880b5c1ce7b008ce4c708e6"}
{"id": "meca500_programming_manual_1648", "text": "Values: [major version, minor version, patch version, build number].", "source": "meca500_programming_manual", "chunk_index": 1648, "length": 68, "hash": "6270483d3880b5c1ce7b008ce4c708e6"}
{"id": "meca500_programming_manual_1649", "text": "Product type (GetProductType (page 254)).", "source": "meca500_programming_manual", "chunk_index": 1649, "length": 41, "hash": "dfffc1a67a154b847e49a167e5596cac"}
{"id": "meca500_programming_manual_1650", "text": "Values: [product type] where 3 = Meca500 R3, 4 = Meca500 R4, 20 = MCS500 R1.", "source": "meca500_programming_manual", "chunk_index": 1650, "length": 76, "hash": "81e183a576a9040e926edd6d29809798"}
{"id": "meca500_programming_manual_1651", "text": "Values: [product type] where 3 = Meca500 R3, 4 = Meca500 R4, 20 = MCS500 R1.", "source": "meca500_programming_manual", "chunk_index": 1651, "length": 76, "hash": "81e183a576a9040e926edd6d29809798"}
{"id": "meca500_programming_manual_1652", "text": "Serial number (GetRobotSerial (page 259)).", "source": "meca500_programming_manual", "chunk_index": 1652, "length": 42, "hash": "5bcc9ef6b28ea9bd4c4a4a81dbef0d66"}
{"id": "meca500_programming_manual_1653", "text": "Values: [serial number].", "source": "meca500_programming_manual", "chunk_index": 1653, "length": 24, "hash": "4205162fdb9f98c20c3e1ae2d1f66a3f"}
{"id": "meca500_programming_manual_1654", "text": "Values: [serial number].", "source": "meca500_programming_manual", "chunk_index": 1654, "length": 24, "hash": "4205162fdb9f98c20c3e1ae2d1f66a3f"}
{"id": "meca500_programming_manual_1655", "text": "Joint limits configuration (GetJointLimitsCfg (page 241)).", "source": "meca500_programming_manual", "chunk_index": 1655, "length": 58, "hash": "362b221263edd5bbd84af4cf29b18100"}
{"id": "meca500_programming_manual_1656", "text": "Joint limits configuration", "source": "meca500_programming_manual", "chunk_index": 1656, "length": 26, "hash": "c485542da81b934643bcd4c3a5932d8a"}
{"id": "meca500_programming_manual_1657", "text": "Model joint limits (GetModelJointLimits (page 244)), for joints 1, 2, and 3.", "source": "meca500_programming_manual", "chunk_index": 1657, "length": 76, "hash": "e4a8f113e76e3ac8694bea90055dcd4a"}
{"id": "meca500_programming_manual_1658", "text": "(page 244)), for joints 1, 2, and 3.", "source": "meca500_programming_manual", "chunk_index": 1658, "length": 36, "hash": "4daf48922edb3ae977eacf8bdfb8caa8"}
{"id": "meca500_programming_manual_1659", "text": "Values: [q1,min, q2,min, q3,min, q1,max, q2,max, q3,max], in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1659, "length": 63, "hash": "708f91810bff0ffeed1b1b0911f1931d"}
{"id": "meca500_programming_manual_1660", "text": "Model joint limits (GetModelJointLimits (page 244)), for joints 4, 5, and 6.", "source": "meca500_programming_manual", "chunk_index": 1660, "length": 76, "hash": "0efa570d5673f533f24337f11a9f41eb"}
{"id": "meca500_programming_manual_1661", "text": "(page 244)), for joints 4, 5, and 6.", "source": "meca500_programming_manual", "chunk_index": 1661, "length": 36, "hash": "5ddcec1a96de835338094f0855929c2d"}
{"id": "meca500_programming_manual_1662", "text": "Values: [q4,min, q5,min, q6,min, q4,max, q5,max, q6,max], in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1662, "length": 63, "hash": "510291cfbc73a758ccbf322ac059c273"}
{"id": "meca500_programming_manual_1663", "text": "Effective joint limits (GetJointLimits (page 240)), for joints 1, 2, and 3.", "source": "meca500_programming_manual", "chunk_index": 1663, "length": 75, "hash": "c68bbffb0e43e9d517402c08425bf930"}
{"id": "meca500_programming_manual_1664", "text": "Effective joint limits", "source": "meca500_programming_manual", "chunk_index": 1664, "length": 22, "hash": "f5668ae7799955aca6c0adb64d82a996"}
{"id": "meca500_programming_manual_1665", "text": "(page 240)), for joints 1, 2, and 3.", "source": "meca500_programming_manual", "chunk_index": 1665, "length": 36, "hash": "904928642bcfb58fca020b76e7dbf4b6"}
{"id": "meca500_programming_manual_1666", "text": "Values: [q1,min, q2,min, q3,min, q1,max, q2,max, q3,max], in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1666, "length": 63, "hash": "708f91810bff0ffeed1b1b0911f1931d"}
{"id": "meca500_programming_manual_1667", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1667, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1668", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1668, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1669", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1669, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1670", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1670, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1671", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1671, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1672", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1672, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1673", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1673, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1674", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1674, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1675", "text": "Effective joint limits (GetJointLimits (page 240)), for joints 4, 5, and 6.", "source": "meca500_programming_manual", "chunk_index": 1675, "length": 75, "hash": "316e46b022f20376a43fa968ce6761e9"}
{"id": "meca500_programming_manual_1676", "text": "Effective joint limits", "source": "meca500_programming_manual", "chunk_index": 1676, "length": 22, "hash": "f5668ae7799955aca6c0adb64d82a996"}
{"id": "meca500_programming_manual_1677", "text": "(page 240)), for joints 4, 5, and 6.", "source": "meca500_programming_manual", "chunk_index": 1677, "length": 36, "hash": "d5b840e2631dff1901aea1681e0cd358"}
{"id": "meca500_programming_manual_1678", "text": "Values: [q4,min, q5,min, q6,min, q4,max, q5,max, q6,max], in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1678, "length": 63, "hash": "510291cfbc73a758ccbf322ac059c273"}
{"id": "meca500_programming_manual_1679", "text": "Work zone configuration (GetWorkZoneCfg (page 298)).", "source": "meca500_programming_manual", "chunk_index": 1679, "length": 52, "hash": "d9f341aafca588afdf4913b7d2e589f0"}
{"id": "meca500_programming_manual_1680", "text": "Work zone configuration", "source": "meca500_programming_manual", "chunk_index": 1680, "length": 23, "hash": "044501f0273af11fb3ebb02e36f6dea7"}
{"id": "meca500_programming_manual_1681", "text": "Values: [work zone limits severity, work zone limits detection mode].", "source": "meca500_programming_manual", "chunk_index": 1681, "length": 69, "hash": "091c4c19711b27d760f78a1825e9fd1f"}
{"id": "meca500_programming_manual_1682", "text": "Values: [work zone limits severity, work zone limits detection mode].", "source": "meca500_programming_manual", "chunk_index": 1682, "length": 69, "hash": "091c4c19711b27d760f78a1825e9fd1f"}
{"id": "meca500_programming_manual_1683", "text": "Work zone limits (GetWorkZoneLimits (page 299)).", "source": "meca500_programming_manual", "chunk_index": 1683, "length": 48, "hash": "772ea0d8e255ea6f8813230e699d7cfb"}
{"id": "meca500_programming_manual_1684", "text": "Values: [xmin, ymin, zmin, xmax, ymax, zmax], in mm.", "source": "meca500_programming_manual", "chunk_index": 1684, "length": 52, "hash": "ba2f0a5fb9adbf1598d487afa53a5888"}
{"id": "meca500_programming_manual_1685", "text": "Tool sphere (GetToolSphere (page 297)).", "source": "meca500_programming_manual", "chunk_index": 1685, "length": 39, "hash": "d6e06f0f202097aa1f6384835e85887b"}
{"id": "meca500_programming_manual_1686", "text": "Values: [x, y, z, r], in mm.", "source": "meca500_programming_manual", "chunk_index": 1686, "length": 28, "hash": "8a5907039c5ef784600383b07bfb35b0"}
{"id": "meca500_programming_manual_1687", "text": "Values: [x, y, z, r], in mm.", "source": "meca500_programming_manual", "chunk_index": 1687, "length": 28, "hash": "8a5907039c5ef784600383b07bfb35b0"}
{"id": "meca500_programming_manual_1688", "text": "Conf and Conf turn (GetConf (page 235), GetConfTurn (page 236), GetAutoConf\n(page 226), GetAutoConfTurn (page 227)).", "source": "meca500_programming_manual", "chunk_index": 1688, "length": 116, "hash": "d5cfb87a104dc425e54514a514f8389c"}
{"id": "meca500_programming_manual_1689", "text": "Values: [shoulder \u22121/1/NaN, elbow \u22121/1/NaN, wrist \u22121/1/NaN, last joint turn or\nNaN].", "source": "meca500_programming_manual", "chunk_index": 1689, "length": 84, "hash": "73f91f1b9f418909cd9225f5c16d0294"}
{"id": "meca500_programming_manual_1690", "text": "Values: [shoulder \u22121/1/NaN, elbow \u22121/1/NaN, wrist \u22121/1/NaN, last joint turn or\nNaN].", "source": "meca500_programming_manual", "chunk_index": 1690, "length": 84, "hash": "73f91f1b9f418909cd9225f5c16d0294"}
{"id": "meca500_programming_manual_1691", "text": "NaN indicates auto-conf or auto-conf-turn.", "source": "meca500_programming_manual", "chunk_index": 1691, "length": 42, "hash": "87f85f43ef12c486593b512a36248425"}
{"id": "meca500_programming_manual_1692", "text": "NaN indicates auto-conf or auto-conf-turn.", "source": "meca500_programming_manual", "chunk_index": 1692, "length": 42, "hash": "87f85f43ef12c486593b512a36248425"}
{"id": "meca500_programming_manual_1693", "text": "Motion queue parameters (GetBlending (page 228), GetVelTimeout (page 265)).", "source": "meca500_programming_manual", "chunk_index": 1693, "length": 75, "hash": "9c64f8a3b7bafbe7385083c5886ba207"}
{"id": "meca500_programming_manual_1694", "text": "Motion queue parameters", "source": "meca500_programming_manual", "chunk_index": 1694, "length": 23, "hash": "7781bfcb0a05560c60de2a5d85637b32"}
{"id": "meca500_programming_manual_1695", "text": "Values: [blending ratio percent, velocity timeout in seconds].", "source": "meca500_programming_manual", "chunk_index": 1695, "length": 62, "hash": "a5bae45f9cba9afb5870ce36f3a8de71"}
{"id": "meca500_programming_manual_1696", "text": "Values: [blending ratio percent, velocity timeout in seconds].", "source": "meca500_programming_manual", "chunk_index": 1696, "length": 62, "hash": "a5bae45f9cba9afb5870ce36f3a8de71"}
{"id": "meca500_programming_manual_1697", "text": "Motion queue velocities and accelerations (GetJointVel (page 242),\nGetJointAcc (page 239), GetCartLinVel (page 232), GetCartAngVel (page 231),\nGetCartAcc (page 230), GetJointVelLimit (page 243)).", "source": "meca500_programming_manual", "chunk_index": 1697, "length": 195, "hash": "02c386ecf7e179f49e2aa589e4568ebb"}
{"id": "meca500_programming_manual_1698", "text": "Motion queue velocities and accelerations", "source": "meca500_programming_manual", "chunk_index": 1698, "length": 41, "hash": "b6e4561601274580a381c7938a8e014d"}
{"id": "meca500_programming_manual_1699", "text": "Values: [joint velocity, joint acceleration, Cartesian linear velocity, Cartesian\nangular velocity, Cartesian acceleration, joint velocity limit], in percent.", "source": "meca500_programming_manual", "chunk_index": 1699, "length": 158, "hash": "ed04f1606f59c0dc4a1b8570f9aa2c97"}
{"id": "meca500_programming_manual_1700", "text": "Values: [joint velocity, joint acceleration, Cartesian linear velocity, Cartesian\nangular velocity, Cartesian acceleration, joint velocity limit], in percent.", "source": "meca500_programming_manual", "chunk_index": 1700, "length": 158, "hash": "ed04f1606f59c0dc4a1b8570f9aa2c97"}
{"id": "meca500_programming_manual_1701", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1701, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1702", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1702, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1703", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1703, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1704", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1704, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1705", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1705, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1706", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1706, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1707", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1707, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1708", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1708, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1709", "text": "Gripper parameters (GetGripperForce (page 308), GetGripperVel (page 310),\nGetGripperRange (page 309)).", "source": "meca500_programming_manual", "chunk_index": 1709, "length": 102, "hash": "abbb8fdd7c9f9166ab394446220ab593"}
{"id": "meca500_programming_manual_1710", "text": "Values: [gripper force, gripper velocity, fingers opening corresponding to closed\nstate, fingers opening corresponding to open state].", "source": "meca500_programming_manual", "chunk_index": 1710, "length": 134, "hash": "6b0770a66e6ed33104f6ff3e16b4a3a4"}
{"id": "meca500_programming_manual_1711", "text": "Values: [gripper force, gripper velocity, fingers opening corresponding to closed\nstate, fingers opening corresponding to open state].", "source": "meca500_programming_manual", "chunk_index": 1711, "length": 134, "hash": "6b0770a66e6ed33104f6ff3e16b4a3a4"}
{"id": "meca500_programming_manual_1712", "text": "Arguments 1 and 2 are in percentage, while arguments 3 and 4 are in mm.", "source": "meca500_programming_manual", "chunk_index": 1712, "length": 71, "hash": "754782e5a9cc0f13c9c7c6caed5918a6"}
{"id": "meca500_programming_manual_1713", "text": "Arguments 1 and 2 are in percentage, while arguments 3 and 4 are in mm.", "source": "meca500_programming_manual", "chunk_index": 1713, "length": 71, "hash": "754782e5a9cc0f13c9c7c6caed5918a6"}
{"id": "meca500_programming_manual_1714", "text": "Torque limits configuration (GetTorqueLimitsCfg (page 263)).", "source": "meca500_programming_manual", "chunk_index": 1714, "length": 60, "hash": "4b0798c7686d3383305fb28e67ee075e"}
{"id": "meca500_programming_manual_1715", "text": "Torque limits configuration", "source": "meca500_programming_manual", "chunk_index": 1715, "length": 27, "hash": "242bce2dec3fcc4c7e4d0b7ab2cd09bb"}
{"id": "meca500_programming_manual_1716", "text": "Values: [severity, detection mode].", "source": "meca500_programming_manual", "chunk_index": 1716, "length": 35, "hash": "adcdd4b7f59b060e2951e165345f1039"}
{"id": "meca500_programming_manual_1717", "text": "Values: [severity, detection mode].", "source": "meca500_programming_manual", "chunk_index": 1717, "length": 35, "hash": "adcdd4b7f59b060e2951e165345f1039"}
{"id": "meca500_programming_manual_1718", "text": "Torque limits (GetTorqueLimits (page 262)).", "source": "meca500_programming_manual", "chunk_index": 1718, "length": 43, "hash": "4235efeb096a7a5a12065d398aed67c5"}
{"id": "meca500_programming_manual_1719", "text": "Values: [motor 1 limit, motor 2 limit, \u2026], in percent.", "source": "meca500_programming_manual", "chunk_index": 1719, "length": 54, "hash": "95373a6d970030bec8d8436d19105824"}
{"id": "meca500_programming_manual_1720", "text": "Values: [motor 1 limit, motor 2 limit, \u2026], in percent.", "source": "meca500_programming_manual", "chunk_index": 1720, "length": 54, "hash": "95373a6d970030bec8d8436d19105824"}
{"id": "meca500_programming_manual_1721", "text": "Vacuum configuration (GetVacuumThreshold (page 323),\nGetVacuumPurgeDuration (page 322)).", "source": "meca500_programming_manual", "chunk_index": 1721, "length": 88, "hash": "79beac8e12b77fcf12347eb7a592c780"}
{"id": "meca500_programming_manual_1722", "text": "Vacuum configuration", "source": "meca500_programming_manual", "chunk_index": 1722, "length": 20, "hash": "17ce646235c4420e3e017a9617ef21a6"}
{"id": "meca500_programming_manual_1723", "text": "GetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 1723, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "meca500_programming_manual_1724", "text": "Values: [holdThreshold, releaseThreshold, purgeDuration].", "source": "meca500_programming_manual", "chunk_index": 1724, "length": 57, "hash": "e575ac62c8caa681c13d6fda1ec4d4a0"}
{"id": "meca500_programming_manual_1725", "text": "Values: [holdThreshold, releaseThreshold, purgeDuration].", "source": "meca500_programming_manual", "chunk_index": 1725, "length": 57, "hash": "e575ac62c8caa681c13d6fda1ec4d4a0"}
{"id": "meca500_programming_manual_1726", "text": "Arguments 1 and 2 are in kPa, argument 3 is in seconds.", "source": "meca500_programming_manual", "chunk_index": 1726, "length": 55, "hash": "bf3e4a9bf7b8fa429672fe8c08378977"}
{"id": "meca500_programming_manual_1727", "text": "Arguments 1 and 2 are in kPa, argument 3 is in seconds.", "source": "meca500_programming_manual", "chunk_index": 1727, "length": 55, "hash": "bf3e4a9bf7b8fa429672fe8c08378977"}
{"id": "meca500_programming_manual_1728", "text": "Move jump height (Not available on this robot).\nMove jump approach velocity (Not available on this robot).", "source": "meca500_programming_manual", "chunk_index": 1728, "length": 106, "hash": "6ce91ac53026027e025f36a87001f912"}
{"id": "meca500_programming_manual_1729", "text": "(Not available on this robot).", "source": "meca500_programming_manual", "chunk_index": 1729, "length": 30, "hash": "bc8ce40de6ac7326abe52e5fbb16ed73"}
{"id": "meca500_programming_manual_1730", "text": "Move jump approach velocity", "source": "meca500_programming_manual", "chunk_index": 1730, "length": 27, "hash": "7990c6a6de47484836775fbda7ad8586"}
{"id": "meca500_programming_manual_1731", "text": "(Not available on this robot).", "source": "meca500_programming_manual", "chunk_index": 1731, "length": 30, "hash": "bc8ce40de6ac7326abe52e5fbb16ed73"}
{"id": "meca500_programming_manual_1732", "text": "Move mode configuration (GetMoveMode (page 250), GetMoveDurationCfg\n(page 247), GetMoveDuration (page 246)).", "source": "meca500_programming_manual", "chunk_index": 1732, "length": 108, "hash": "1c9095ab50b68ed2c38abcff70858833"}
{"id": "meca500_programming_manual_1733", "text": "Move mode configuration", "source": "meca500_programming_manual", "chunk_index": 1733, "length": 23, "hash": "93ef9eea2e73a72e4637f25b183d6ab8"}
{"id": "meca500_programming_manual_1734", "text": "Values: [move mode, severity, duration].", "source": "meca500_programming_manual", "chunk_index": 1734, "length": 40, "hash": "628f23a9d18a800c35843431e1bf8f9d"}
{"id": "meca500_programming_manual_1735", "text": "Values: [move mode, severity, duration].", "source": "meca500_programming_manual", "chunk_index": 1735, "length": 40, "hash": "628f23a9d18a800c35843431e1bf8f9d"}
{"id": "meca500_programming_manual_1736", "text": "Robot calibration status (GetCalibrationCfg (page 229), GetRobotCalibrated\n(page 257)).", "source": "meca500_programming_manual", "chunk_index": 1736, "length": 87, "hash": "8928a0f6f2bcb314d2f52d2c6793a416"}
{"id": "meca500_programming_manual_1737", "text": "Robot calibration status", "source": "meca500_programming_manual", "chunk_index": 1737, "length": 24, "hash": "6ae29c62e5c89367d38598f89f6eca1e"}
{"id": "meca500_programming_manual_1738", "text": "Values: [calibrationEnabled, calibrated].", "source": "meca500_programming_manual", "chunk_index": 1738, "length": 41, "hash": "d15dd6d560c85f203e2b863270f75c03"}
{"id": "meca500_programming_manual_1739", "text": "Values: [calibrationEnabled, calibrated].", "source": "meca500_programming_manual", "chunk_index": 1739, "length": 41, "hash": "d15dd6d560c85f203e2b863270f75c03"}
{"id": "meca500_programming_manual_1740", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1740, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1741", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1741, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1742", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1742, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1743", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1743, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1744", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1744, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1745", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1745, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1746", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1746, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1747", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1747, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1748", "text": "Robot payload (GetPayload (page 253)).", "source": "meca500_programming_manual", "chunk_index": 1748, "length": 38, "hash": "56d624994c40d1ad69a0131f88358ae9"}
{"id": "meca500_programming_manual_1749", "text": "Values: [m, cx, cy, cz], in kg or mm.", "source": "meca500_programming_manual", "chunk_index": 1749, "length": 37, "hash": "ae31c3fe1ab3dec19cd1a0d2c791be28"}
{"id": "meca500_programming_manual_1750", "text": "Target real-time joint velocity (GetRtTargetJointVel (page 285)).", "source": "meca500_programming_manual", "chunk_index": 1750, "length": 65, "hash": "2169cd6793bc64701c025449509abe91"}
{"id": "meca500_programming_manual_1751", "text": "Target real-time joint velocity", "source": "meca500_programming_manual", "chunk_index": 1751, "length": 31, "hash": "730cdcfbd1b4eb98ab301387aa51cbb0"}
{"id": "meca500_programming_manual_1752", "text": "Values: [\u03c91, \u03c92, \u2026], in \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 1752, "length": 28, "hash": "bb64106b98e8eb33d1c56ea042373f30"}
{"id": "meca500_programming_manual_1753", "text": "Target real-time joint torque (GetRtTargetJointTorq (page 284)).", "source": "meca500_programming_manual", "chunk_index": 1753, "length": 64, "hash": "a891443436d38b196f245bba82f0bc5e"}
{"id": "meca500_programming_manual_1754", "text": "Target real-time joint torque", "source": "meca500_programming_manual", "chunk_index": 1754, "length": 29, "hash": "606def9c13e32c2843848be7681aa3a2"}
{"id": "meca500_programming_manual_1755", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 1755, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_1756", "text": "Values: [motor 1 torque, motor 2 torque, \u2026], in percent.", "source": "meca500_programming_manual", "chunk_index": 1756, "length": 56, "hash": "bad899e05353aa07441e98d6666dd62b"}
{"id": "meca500_programming_manual_1757", "text": "Values: [motor 1 torque, motor 2 torque, \u2026], in percent.", "source": "meca500_programming_manual", "chunk_index": 1757, "length": 56, "hash": "bad899e05353aa07441e98d6666dd62b"}
{"id": "meca500_programming_manual_1758", "text": "Target real-time Cartesian velocity (GetRtTargetCartVel (page 280)).", "source": "meca500_programming_manual", "chunk_index": 1758, "length": 68, "hash": "a3160ed3367c1ed5b7f3097803785bce"}
{"id": "meca500_programming_manual_1759", "text": "Target real-time Cartesian velocity", "source": "meca500_programming_manual", "chunk_index": 1759, "length": 35, "hash": "7e33b3d99ecff427f5685e287ed384e0"}
{"id": "meca500_programming_manual_1760", "text": "Values: [\u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y, \u03c9z], in mm/s or \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 1760, "length": 46, "hash": "ab0725e03d9a33ad76cb50ed01609d7e"}
{"id": "meca500_programming_manual_1761", "text": "Collision configuration (GetCollisionCfg (page 295)).", "source": "meca500_programming_manual", "chunk_index": 1761, "length": 53, "hash": "673c705c94930fe70c7fc91f0a4767b1"}
{"id": "meca500_programming_manual_1762", "text": "Collision configuration", "source": "meca500_programming_manual", "chunk_index": 1762, "length": 23, "hash": "868297253ff760adfc0dd71c3c3f32aa"}
{"id": "meca500_programming_manual_1763", "text": "Values: [collision severity level].", "source": "meca500_programming_manual", "chunk_index": 1763, "length": 35, "hash": "9b60dd1bc09eda17cd90f766e3f5c7b4"}
{"id": "meca500_programming_manual_1764", "text": "Values: [collision severity level].", "source": "meca500_programming_manual", "chunk_index": 1764, "length": 35, "hash": "9b60dd1bc09eda17cd90f766e3f5c7b4"}
{"id": "meca500_programming_manual_1765", "text": "Collision status (GetCollisionStatus (page 296)).", "source": "meca500_programming_manual", "chunk_index": 1765, "length": 49, "hash": "4635d014bb1d5079add123ab8cd21fc4"}
{"id": "meca500_programming_manual_1766", "text": "Values: [collision boolean state, group of colliding object 1, ID of colliding object\n1, group of colliding object 2, ID of colliding object 2].", "source": "meca500_programming_manual", "chunk_index": 1766, "length": 144, "hash": "b96b27f5b0f512f4730625d2d1cfd815"}
{"id": "meca500_programming_manual_1767", "text": "Values: [collision boolean state, group of colliding object 1, ID of colliding object\n1, group of colliding object 2, ID of colliding object 2].", "source": "meca500_programming_manual", "chunk_index": 1767, "length": 144, "hash": "b96b27f5b0f512f4730625d2d1cfd815"}
{"id": "meca500_programming_manual_1768", "text": "Work zone status (GetWorkZoneStatus (page 300)).", "source": "meca500_programming_manual", "chunk_index": 1768, "length": 48, "hash": "5b24bcd1c6114bf5998cc0f5351e85e8"}
{"id": "meca500_programming_manual_1769", "text": "Values: [work zone breach Boolean state, group of object in breach, ID of object in\nbreach].", "source": "meca500_programming_manual", "chunk_index": 1769, "length": 92, "hash": "89f84acecb32493a528dc8f88bc88cc2"}
{"id": "meca500_programming_manual_1770", "text": "Values: [work zone breach Boolean state, group of object in breach, ID of object in\nbreach].", "source": "meca500_programming_manual", "chunk_index": 1770, "length": 92, "hash": "89f84acecb32493a528dc8f88bc88cc2"}
{"id": "meca500_programming_manual_1771", "text": "Actual joint position (GetRtJointPos (page 276)).", "source": "meca500_programming_manual", "chunk_index": 1771, "length": 49, "hash": "37efe27b053d3b2457d6932d50d3b303"}
{"id": "meca500_programming_manual_1772", "text": "Actual joint position", "source": "meca500_programming_manual", "chunk_index": 1772, "length": 21, "hash": "3e9e3e436e159ce9444256ab730709e1"}
{"id": "meca500_programming_manual_1773", "text": "Values: [q1, q2, q3, \u2026]. Unit is \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1773, "length": 35, "hash": "04035f628e044fe226d9ea0356b474f0"}
{"id": "meca500_programming_manual_1774", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1774, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1775", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1775, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1776", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1776, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1777", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1777, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1778", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1778, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1779", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1779, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1780", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1780, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1781", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1781, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1782", "text": "Actual end-effector pose ( GetRtCartPos (page 272)).", "source": "meca500_programming_manual", "chunk_index": 1782, "length": 52, "hash": "4424f6323bde4ef973bca75e7009ade9"}
{"id": "meca500_programming_manual_1783", "text": "Actual end-effector pose", "source": "meca500_programming_manual", "chunk_index": 1783, "length": 24, "hash": "2ee9fe06d84f79dc3fa4013d0e44fb88"}
{"id": "meca500_programming_manual_1784", "text": "Values: [x, y, z, \u03b1, \u03b2, \u03b3]. Units are mm or \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1784, "length": 46, "hash": "5a8ac95f4c532fc8993e14047828ec8f"}
{"id": "meca500_programming_manual_1785", "text": "Values: [x, y, z, \u03b1, \u03b2, \u03b3]. Units are mm or \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1785, "length": 46, "hash": "5a8ac95f4c532fc8993e14047828ec8f"}
{"id": "meca500_programming_manual_1786", "text": "Actual joint velocity (GetRtJointVel (page 278)).", "source": "meca500_programming_manual", "chunk_index": 1786, "length": 49, "hash": "17f990f80942908d0d1a0d3ea40fdaf7"}
{"id": "meca500_programming_manual_1787", "text": "Actual joint velocity", "source": "meca500_programming_manual", "chunk_index": 1787, "length": 21, "hash": "c58b5c1a5fef111e341a5f329d3abfcc"}
{"id": "meca500_programming_manual_1788", "text": "Values: [\u03c91, \u03c92, \u2026], in \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 1788, "length": 28, "hash": "bb64106b98e8eb33d1c56ea042373f30"}
{"id": "meca500_programming_manual_1789", "text": "Actual joint torque (GetRtJointTorq (page 277)).", "source": "meca500_programming_manual", "chunk_index": 1789, "length": 48, "hash": "80f4c79c7199fcd2b2e6deb91d953ea3"}
{"id": "meca500_programming_manual_1790", "text": "Values: [joint 1 torque, joint 2 torque, \u2026], in percent.", "source": "meca500_programming_manual", "chunk_index": 1790, "length": 56, "hash": "3e2701c4ff312d32a95048ee2ca5847a"}
{"id": "meca500_programming_manual_1791", "text": "Values: [joint 1 torque, joint 2 torque, \u2026], in percent.", "source": "meca500_programming_manual", "chunk_index": 1791, "length": 56, "hash": "3e2701c4ff312d32a95048ee2ca5847a"}
{"id": "meca500_programming_manual_1792", "text": "Actual Cartesian velocity (GetRtCartVel (page 273)).", "source": "meca500_programming_manual", "chunk_index": 1792, "length": 52, "hash": "f043b2c00c9dacfce8e0d623bd73251e"}
{"id": "meca500_programming_manual_1793", "text": "Actual Cartesian velocity", "source": "meca500_programming_manual", "chunk_index": 1793, "length": 25, "hash": "e25856d3b7b14c89eb52a915f9109ac7"}
{"id": "meca500_programming_manual_1794", "text": "Values: [\u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y, \u03c9z], in mm/s or \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 1794, "length": 46, "hash": "ab0725e03d9a33ad76cb50ed01609d7e"}
{"id": "meca500_programming_manual_1795", "text": "Actual conf and conf turn (GetRtConf (page 274), GetRtConfTurn (page 275)).", "source": "meca500_programming_manual", "chunk_index": 1795, "length": 75, "hash": "7b46c5d95167191ad1d367baa77824cb"}
{"id": "meca500_programming_manual_1796", "text": "Actual conf and conf turn", "source": "meca500_programming_manual", "chunk_index": 1796, "length": 25, "hash": "5121cca8434c9691a29ddda7aa80dd4f"}
{"id": "meca500_programming_manual_1797", "text": "Values: [shoulder \u22121/0/1, elbow \u22121/0/1, wrist \u22121/0/1, last joint turn].", "source": "meca500_programming_manual", "chunk_index": 1797, "length": 71, "hash": "807b4f09623973fba47c5ef46d1b34c0"}
{"id": "meca500_programming_manual_1798", "text": "Values: [shoulder \u22121/0/1, elbow \u22121/0/1, wrist \u22121/0/1, last joint turn].", "source": "meca500_programming_manual", "chunk_index": 1798, "length": 71, "hash": "807b4f09623973fba47c5ef46d1b34c0"}
{"id": "meca500_programming_manual_1799", "text": "Accelerometer (GetRtAccelerometer (page 271)).", "source": "meca500_programming_manual", "chunk_index": 1799, "length": 46, "hash": "9932fb0babdf3bce1fbe8bbb5068e0f1"}
{"id": "meca500_programming_manual_1800", "text": "Values: [ax, ay, az], in 1/16,000 of G.", "source": "meca500_programming_manual", "chunk_index": 1800, "length": 39, "hash": "912729e6546915b1debcc4fdc153fb28"}
{"id": "meca500_programming_manual_1801", "text": "], in 1/16,000 of G.", "source": "meca500_programming_manual", "chunk_index": 1801, "length": 20, "hash": "a369e0acf042190885904cfbbfdd726c"}
{"id": "meca500_programming_manual_1802", "text": "External tool status (GetRtExtToolStatus (page 312)).", "source": "meca500_programming_manual", "chunk_index": 1802, "length": 53, "hash": "d3eb989d319550c56b8e8ada1426604b"}
{"id": "meca500_programming_manual_1803", "text": "External tool status", "source": "meca500_programming_manual", "chunk_index": 1803, "length": 20, "hash": "97d058918989db40c940ca8ded236b1d"}
{"id": "meca500_programming_manual_1804", "text": "Values: [type, homing done, error state, overheated].", "source": "meca500_programming_manual", "chunk_index": 1804, "length": 53, "hash": "3f7fe53c86982102ee190210fe0d2478"}
{"id": "meca500_programming_manual_1805", "text": "Values: [type, homing done, error state, overheated].", "source": "meca500_programming_manual", "chunk_index": 1805, "length": 53, "hash": "3f7fe53c86982102ee190210fe0d2478"}
{"id": "meca500_programming_manual_1806", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1806, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1807", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1807, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1808", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1808, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1809", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1809, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1810", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1810, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1811", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1811, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1812", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1812, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1813", "text": "Table 12 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1813, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "meca500_programming_manual_1814", "text": "In the case of a MEGP25* gripper: GetRtGripperState (page 315),\nGetRtGripperForce (page 313), and GetRtGripperPos (page 314).", "source": "meca500_programming_manual", "chunk_index": 1814, "length": 125, "hash": "3aa7e293bb300030969f9dfecf1c19ab"}
{"id": "meca500_programming_manual_1815", "text": "In the case of a MEGP25* gripper:", "source": "meca500_programming_manual", "chunk_index": 1815, "length": 33, "hash": "3c794498c9938051c0034048bb89f31e"}
{"id": "meca500_programming_manual_1816", "text": "Values: [holding part, desired fingers opening reached, gripper closed, gripper\nopen, gripper force, fingers opening].", "source": "meca500_programming_manual", "chunk_index": 1816, "length": 118, "hash": "6d0ba548a9f664a04ae55274c58da7a1"}
{"id": "meca500_programming_manual_1817", "text": "Values: [holding part, desired fingers opening reached, gripper closed, gripper\nopen, gripper force, fingers opening].", "source": "meca500_programming_manual", "chunk_index": 1817, "length": 118, "hash": "6d0ba548a9f664a04ae55274c58da7a1"}
{"id": "meca500_programming_manual_1818", "text": "In the case of the MPM500 pneumatic module: GetRtValveState (page 321).", "source": "meca500_programming_manual", "chunk_index": 1818, "length": 71, "hash": "0b7750a9c04995f18bf61449d4599c02"}
{"id": "meca500_programming_manual_1819", "text": "In the case of the MPM500 pneumatic module:", "source": "meca500_programming_manual", "chunk_index": 1819, "length": 43, "hash": "0dfebdbb38933788be689e2183b0eab3"}
{"id": "meca500_programming_manual_1820", "text": "Values: [valve 1 state, valve 2 state].", "source": "meca500_programming_manual", "chunk_index": 1820, "length": 39, "hash": "0675cf9599fe73535601b713afdda988"}
{"id": "meca500_programming_manual_1821", "text": "Values: [valve 1 state, valve 2 state].", "source": "meca500_programming_manual", "chunk_index": 1821, "length": 39, "hash": "0675cf9599fe73535601b713afdda988"}
{"id": "meca500_programming_manual_1822", "text": "Time scaling (GetTimeScaling (page 261)).", "source": "meca500_programming_manual", "chunk_index": 1822, "length": 41, "hash": "88beedef6de544d361a8b561c4d3b3ae"}
{"id": "meca500_programming_manual_1823", "text": "Values: [p], in percent.", "source": "meca500_programming_manual", "chunk_index": 1823, "length": 24, "hash": "a9913bea92ae41e1641c66002362df5c"}
{"id": "meca500_programming_manual_1824", "text": "Values: [p], in percent.", "source": "meca500_programming_manual", "chunk_index": 1824, "length": 24, "hash": "a9913bea92ae41e1641c66002362df5c"}
{"id": "meca500_programming_manual_1825", "text": "Configured joint limits (GetJointLimits (page 240)), for joints 1, 2, and 3\n(ignored if joint limits are disabled).", "source": "meca500_programming_manual", "chunk_index": 1825, "length": 115, "hash": "4080efa1614b664c19f06388888fb1a8"}
{"id": "meca500_programming_manual_1826", "text": "Configured joint limits", "source": "meca500_programming_manual", "chunk_index": 1826, "length": 23, "hash": "ed3ecd09ff247dac9f4d84f677239260"}
{"id": "meca500_programming_manual_1827", "text": "(page 240)), for joints 1, 2, and 3\n(ignored if joint limits are disabled).", "source": "meca500_programming_manual", "chunk_index": 1827, "length": 75, "hash": "5e947aeb5e04e05016e3103a72bf9d3a"}
{"id": "meca500_programming_manual_1828", "text": "Values: [q1,min, q2,min, q3,min, q1,max, q2,max, q3,max], in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1828, "length": 63, "hash": "708f91810bff0ffeed1b1b0911f1931d"}
{"id": "meca500_programming_manual_1829", "text": "Configured joint limits (GetJointLimits (page 240)), for joints 4, 5, and 6\n(ignored if joint limits are disabled).", "source": "meca500_programming_manual", "chunk_index": 1829, "length": 115, "hash": "c9e0af2c22c6b7724ca8818527b277a1"}
{"id": "meca500_programming_manual_1830", "text": "Configured joint limits", "source": "meca500_programming_manual", "chunk_index": 1830, "length": 23, "hash": "ed3ecd09ff247dac9f4d84f677239260"}
{"id": "meca500_programming_manual_1831", "text": "(page 240)), for joints 4, 5, and 6\n(ignored if joint limits are disabled).", "source": "meca500_programming_manual", "chunk_index": 1831, "length": 75, "hash": "56168a181d9dc8981f1cb1088b773bfe"}
{"id": "meca500_programming_manual_1832", "text": "Values: [q4,min, q5,min, q6,min, q4,max, q5,max, q6,max], in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1832, "length": 63, "hash": "510291cfbc73a758ccbf322ac059c273"}
{"id": "meca500_programming_manual_1833", "text": "Not available on this robot.\nNot available on this robot.", "source": "meca500_programming_manual", "chunk_index": 1833, "length": 57, "hash": "3004a635a9a1e2b37a472d4ccfc88ae9"}
{"id": "meca500_programming_manual_1834", "text": "Not available on this robot.\nNot available on this robot.", "source": "meca500_programming_manual", "chunk_index": 1834, "length": 57, "hash": "3004a635a9a1e2b37a472d4ccfc88ae9"}
{"id": "meca500_programming_manual_1835", "text": "Each DynamicDataTypeID returns six values as defined in Section 5. Unused values are\nset to 0. For example, ID 19 provides four meaningful values, and the last two are 0.", "source": "meca500_programming_manual", "chunk_index": 1835, "length": 170, "hash": "0ddfecf877b8b91c1ccdcf11f8259cfe"}
{"id": "meca500_programming_manual_1836", "text": "returns six values as defined in Section 5. Unused values are\nset to 0. For example, ID 19 provides four meaningful values, and the last two are 0.", "source": "meca500_programming_manual", "chunk_index": 1836, "length": 147, "hash": "ab71bbb9b03b77c322a443dfdb8dbbbb"}
{"id": "meca500_programming_manual_1837", "text": "No dynamic data IDs are defined for information that is already available in other cyclic\ndata fields, such as Target joint set (page 84), Target end-effector pose (page 86), Target\nconfiguration (page 88), Target WRF (page 91), etc. See Cyclic input format (page 77) for\ndetails.", "source": "meca500_programming_manual", "chunk_index": 1837, "length": 280, "hash": "de09299913f9d69806fc39576801766c"}
{"id": "meca500_programming_manual_1838", "text": "No dynamic data IDs are defined for information that is already available in other cyclic\ndata fields, such as", "source": "meca500_programming_manual", "chunk_index": 1838, "length": 110, "hash": "03139134a4976ce51e7aaeb8d1e0a5be"}
{"id": "meca500_programming_manual_1839", "text": "Target end-effector pose", "source": "meca500_programming_manual", "chunk_index": 1839, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "meca500_programming_manual_1840", "text": "Target\nconfiguration", "source": "meca500_programming_manual", "chunk_index": 1840, "length": 20, "hash": "ac9d5e061c5d35576c6725a2b9f5e1da"}
{"id": "meca500_programming_manual_1841", "text": "(page 77) for\ndetails.", "source": "meca500_programming_manual", "chunk_index": 1841, "length": 22, "hash": "44d0f3721deb1ffd4317184db5e02524"}
{"id": "meca500_programming_manual_1842", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1842, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1843", "text": "Cyclic output format", "source": "meca500_programming_manual", "chunk_index": 1843, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "meca500_programming_manual_1844", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1844, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1845", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1845, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1846", "text": "The cyclic input (received from the robot) provides the complete status, position, and\nconfiguration of the robot.", "source": "meca500_programming_manual", "chunk_index": 1846, "length": 114, "hash": "1cb90fa70dfdaa4f153a7b279de3323c"}
{"id": "meca500_programming_manual_1847", "text": "The cyclic input (received from the robot) provides the complete status, position, and\nconfiguration of the robot.", "source": "meca500_programming_manual", "chunk_index": 1847, "length": 114, "hash": "1cb90fa70dfdaa4f153a7b279de3323c"}
{"id": "meca500_programming_manual_1848", "text": "The total size of the cyclic input is 252 bytes, divided into the following sections:", "source": "meca500_programming_manual", "chunk_index": 1848, "length": 85, "hash": "5fc04935e7b4ca7c1a7a407534fb929e"}
{"id": "meca500_programming_manual_1849", "text": "The total size of the cyclic input is 252 bytes, divided into the following sections:", "source": "meca500_programming_manual", "chunk_index": 1849, "length": 85, "hash": "5fc04935e7b4ca7c1a7a407534fb929e"}
{"id": "meca500_programming_manual_1850", "text": "\u2022 Robot status (page 77): General robot state (e.g., activation, simulation mode, recovery", "source": "meca500_programming_manual", "chunk_index": 1850, "length": 90, "hash": "12d728eb06b2e7dbe28e6ff672c20947"}
{"id": "meca500_programming_manual_1851", "text": "(page 77): General robot state (e.g., activation, simulation mode, recovery", "source": "meca500_programming_manual", "chunk_index": 1851, "length": 75, "hash": "5a370c86a8c5b80f70dc092205d2dbf3"}
{"id": "meca500_programming_manual_1852", "text": "\u2022 Motion status (page 79): Robot motion status (e.g., paused state, motion queue status,", "source": "meca500_programming_manual", "chunk_index": 1852, "length": 88, "hash": "f1b22f93164f5399fbd96a7339767b9e"}
{"id": "meca500_programming_manual_1853", "text": "(page 79): Robot motion status (e.g., paused state, motion queue status,", "source": "meca500_programming_manual", "chunk_index": 1853, "length": 72, "hash": "77c2c766b699c87641ac514b2d7fba54"}
{"id": "meca500_programming_manual_1854", "text": "and other motion-related conditions);", "source": "meca500_programming_manual", "chunk_index": 1854, "length": 37, "hash": "94fe073cc0f49e1f94fba6213fed4206"}
{"id": "meca500_programming_manual_1855", "text": "and other motion-related conditions);", "source": "meca500_programming_manual", "chunk_index": 1855, "length": 37, "hash": "94fe073cc0f49e1f94fba6213fed4206"}
{"id": "meca500_programming_manual_1856", "text": "\u2022 Target joint set (page 84): Real-time calculated joint positions (GetRtTargetJointPos", "source": "meca500_programming_manual", "chunk_index": 1856, "length": 87, "hash": "4fb9888c5722844353e13a6c13f69844"}
{"id": "meca500_programming_manual_1857", "text": "(page 84): Real-time calculated joint positions (", "source": "meca500_programming_manual", "chunk_index": 1857, "length": 49, "hash": "77ed7f5261b8a622a117a91d49362dfc"}
{"id": "meca500_programming_manual_1858", "text": "\u2022 Target end-effector pose (page 86):", "source": "meca500_programming_manual", "chunk_index": 1858, "length": 37, "hash": "af02d4c2c394653585e49add39363a51"}
{"id": "meca500_programming_manual_1859", "text": "Target end-effector pose", "source": "meca500_programming_manual", "chunk_index": 1859, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "meca500_programming_manual_1860", "text": "Real-time calculated Cartesian position", "source": "meca500_programming_manual", "chunk_index": 1860, "length": 39, "hash": "ff6b2eedd09f011fb3ed77bf3769f63d"}
{"id": "meca500_programming_manual_1861", "text": "Real-time calculated Cartesian position", "source": "meca500_programming_manual", "chunk_index": 1861, "length": 39, "hash": "ff6b2eedd09f011fb3ed77bf3769f63d"}
{"id": "meca500_programming_manual_1862", "text": "(GetRtTargetCartPos (page 279));", "source": "meca500_programming_manual", "chunk_index": 1862, "length": 32, "hash": "f5b468acebac8b8a327b54778dfb6df5"}
{"id": "meca500_programming_manual_1863", "text": "\u2022 Target configuration (page 88): Real-time calculated shoulder, elbow, wrist, and turn", "source": "meca500_programming_manual", "chunk_index": 1863, "length": 87, "hash": "5a739346b080e6a7a4d84e45d75ffe61"}
{"id": "meca500_programming_manual_1864", "text": "Target configuration", "source": "meca500_programming_manual", "chunk_index": 1864, "length": 20, "hash": "b4b42d35279073d3c644c40f5e5e8178"}
{"id": "meca500_programming_manual_1865", "text": "(page 88): Real-time calculated shoulder, elbow, wrist, and turn", "source": "meca500_programming_manual", "chunk_index": 1865, "length": 64, "hash": "2f249a6ef5744bb8710d5b893e930150"}
{"id": "meca500_programming_manual_1866", "text": "configuration (GetRtTargetConf (page 281) and GetRtTargetConfTurn (page 282));", "source": "meca500_programming_manual", "chunk_index": 1866, "length": 78, "hash": "6557685fa30cd2de43bf8d8535b0d268"}
{"id": "meca500_programming_manual_1867", "text": "\u2022 Target WRF (page 91): World reference frame used in the real-time calculated position", "source": "meca500_programming_manual", "chunk_index": 1867, "length": 87, "hash": "5cba930fc41a438b1e870dbcb2385b77"}
{"id": "meca500_programming_manual_1868", "text": "(page 91): World reference frame used in the real-time calculated position", "source": "meca500_programming_manual", "chunk_index": 1868, "length": 74, "hash": "fa9e1f8fdd6e34bcf1e28f4f8c1abb33"}
{"id": "meca500_programming_manual_1869", "text": "(GetRtWrf (page 287), GetWrf (page 266));", "source": "meca500_programming_manual", "chunk_index": 1869, "length": 41, "hash": "955723c9cc5b0ea588ef284aec810068"}
{"id": "meca500_programming_manual_1870", "text": "\u2022 Target TRF (page 93): Tool reference frame used in the real-time calculated position", "source": "meca500_programming_manual", "chunk_index": 1870, "length": 86, "hash": "85a4ed28661c62b6808313d57072306b"}
{"id": "meca500_programming_manual_1871", "text": "(page 93): Tool reference frame used in the real-time calculated position", "source": "meca500_programming_manual", "chunk_index": 1871, "length": 73, "hash": "636f0c7bb98cad2e5b8b0f9bf23cedd2"}
{"id": "meca500_programming_manual_1872", "text": "(GetRtTrf (page 286), GetTrf (page 264));", "source": "meca500_programming_manual", "chunk_index": 1872, "length": 41, "hash": "516ddb6409e1aa19c9b65701b2ae2182"}
{"id": "meca500_programming_manual_1873", "text": "\u2022 Robot timestamp (page 95): Precise monotonic robot timestamp associated with this", "source": "meca500_programming_manual", "chunk_index": 1873, "length": 83, "hash": "767eceb7f11823b6d3ee3e0b51bf450e"}
{"id": "meca500_programming_manual_1874", "text": "(page 95): Precise monotonic robot timestamp associated with this", "source": "meca500_programming_manual", "chunk_index": 1874, "length": 65, "hash": "5a9740f2b83f96591f98f23192c62f59"}
{"id": "meca500_programming_manual_1875", "text": "cyclic data (GetRtc (page 288));", "source": "meca500_programming_manual", "chunk_index": 1875, "length": 32, "hash": "7f8827c93e702ad62b6a0dd7a62b073b"}
{"id": "meca500_programming_manual_1876", "text": "\u2022 Safety status (page 97): Safety-related information (e.g., safety signals, power supply", "source": "meca500_programming_manual", "chunk_index": 1876, "length": 89, "hash": "8765ce83c45ba7444677810193db75d9"}
{"id": "meca500_programming_manual_1877", "text": "(page 97): Safety-related information (e.g., safety signals, power supply", "source": "meca500_programming_manual", "chunk_index": 1877, "length": 73, "hash": "39b881b404e3827db5af047181e2b9da"}
{"id": "meca500_programming_manual_1878", "text": "states, operating mode);", "source": "meca500_programming_manual", "chunk_index": 1878, "length": 24, "hash": "5e2fa871b933bedda5fd4348e9f89769"}
{"id": "meca500_programming_manual_1879", "text": "states, operating mode);", "source": "meca500_programming_manual", "chunk_index": 1879, "length": 24, "hash": "5e2fa871b933bedda5fd4348e9f89769"}
{"id": "meca500_programming_manual_1880", "text": "\u2022 Dynamic data (page 100): Additional robot information not included in the above;", "source": "meca500_programming_manual", "chunk_index": 1880, "length": 82, "hash": "de06940e2da44eac8c7e9aaf86ec8246"}
{"id": "meca500_programming_manual_1881", "text": "(page 100): Additional robot information not included in the above;", "source": "meca500_programming_manual", "chunk_index": 1881, "length": 67, "hash": "66554ffed5317d3c05a71d6610629e79"}
{"id": "meca500_programming_manual_1882", "text": "The RobotStatus section in the cyclic input reports the general robot state (similar to\nGetStatusRobot (page 290)).", "source": "meca500_programming_manual", "chunk_index": 1882, "length": 115, "hash": "a8ef7ea6c7eeba6ba42f44aeb3f1787f"}
{"id": "meca500_programming_manual_1883", "text": "section in the cyclic input reports the general robot state (similar to", "source": "meca500_programming_manual", "chunk_index": 1883, "length": 71, "hash": "f65ae5d21d236364aadf277d381cd918"}
{"id": "meca500_programming_manual_1884", "text": "BrakesEngaged Bool\nBool\nRecoveryMode", "source": "meca500_programming_manual", "chunk_index": 1884, "length": 36, "hash": "8b264752d5b4f189e40c4a2bd4601f4c"}
{"id": "meca500_programming_manual_1885", "text": "CollisionStatus Bool", "source": "meca500_programming_manual", "chunk_index": 1885, "length": 20, "hash": "26eab84c149848604cb0bc1490d45f72"}
{"id": "meca500_programming_manual_1886", "text": "(Reserved)\nErrorCode", "source": "meca500_programming_manual", "chunk_index": 1886, "length": 20, "hash": "e3bc681659109f51c7250d1bb2e4cce6"}
{"id": "meca500_programming_manual_1887", "text": "Table 13: RobotStatus (Offset 0, size 4, EtherCAT index 6010h)", "source": "meca500_programming_manual", "chunk_index": 1887, "length": 62, "hash": "443a57b9d0b0ed42e89eb671b17f5735"}
{"id": "meca500_programming_manual_1888", "text": "(Offset 0, size 4, EtherCAT index 6010h)", "source": "meca500_programming_manual", "chunk_index": 1888, "length": 40, "hash": "10dbe8496dfd8c0db172d91aa27d7660"}
{"id": "meca500_programming_manual_1889", "text": "True only while the robot is being activated, homed, or\ndeactivated.\nIndicates whether the motors are on (powered).\nIndicates whether the robot is homed and ready to\nreceive motion commands.\nIndicates whether the robot simulation mode is\nactivated.\nIndicates whether the brakes are engaged.\nIndicates whether the robot recovery mode is\nactivated.", "source": "meca500_programming_manual", "chunk_index": 1889, "length": 346, "hash": "74ff4099c1f91096a8f44d1ff8c45f7b"}
{"id": "meca500_programming_manual_1890", "text": "True only while the robot is being activated, homed, or\ndeactivated.\nIndicates whether the motors are on (powered).\nIndicates whether the robot is homed and ready to\nreceive motion commands.\nIndicates whether the robot simulation mode is\nactivated.\nIndicates whether the brakes are engaged.\nIndicates whether the robot recovery mode is\nactivated.", "source": "meca500_programming_manual", "chunk_index": 1890, "length": 346, "hash": "74ff4099c1f91096a8f44d1ff8c45f7b"}
{"id": "meca500_programming_manual_1891", "text": "Indicates whether the emergency stop safety signal is\nactivated.", "source": "meca500_programming_manual", "chunk_index": 1891, "length": 64, "hash": "084bb867f25c8544d1bef948605b6a4d"}
{"id": "meca500_programming_manual_1892", "text": "Indicates whether the emergency stop safety signal is\nactivated.", "source": "meca500_programming_manual", "chunk_index": 1892, "length": 64, "hash": "084bb867f25c8544d1bef948605b6a4d"}
{"id": "meca500_programming_manual_1893", "text": "Deprecated; use EStop bit from SafetyStatus instead.", "source": "meca500_programming_manual", "chunk_index": 1893, "length": 52, "hash": "7d3594373e0fafd8d4756d251b1a3de8"}
{"id": "meca500_programming_manual_1894", "text": "Indicates whether the robot has detected an imminent\ncollision (SetCollisionCfg (page 301)).\nIndicates whether the robot has detected a work zone\nbreach (SetWorkZoneCfg (page 303),\nSetWorkZoneLimits (page 305)).\n1 if this connection with the robot only allows\nmonitoring, not controlling.\nReserved for future use.\nIndicates the error code (see Table 1 and Table 3) or 0,\nif there is no error.", "source": "meca500_programming_manual", "chunk_index": 1894, "length": 392, "hash": "109079d713c254baf0b0b31a4fca5b80"}
{"id": "meca500_programming_manual_1895", "text": "Indicates whether the robot has detected an imminent\ncollision (", "source": "meca500_programming_manual", "chunk_index": 1895, "length": 64, "hash": "a489517cf7cb79059cc0415f98832d82"}
{"id": "meca500_programming_manual_1896", "text": "(page 301)).\nIndicates whether the robot has detected a work zone\nbreach (", "source": "meca500_programming_manual", "chunk_index": 1896, "length": 74, "hash": "b7efbdce09312e87c954c85e75a7cc0c"}
{"id": "meca500_programming_manual_1897", "text": "(page 305)).\n1 if this connection with the robot only allows\nmonitoring, not controlling.\nReserved for future use.\nIndicates the error code (see Table 1 and Table 3) or 0,", "source": "meca500_programming_manual", "chunk_index": 1897, "length": 171, "hash": "7095cf6ad29f2ba99f48dd946b953012"}
{"id": "meca500_programming_manual_1898", "text": "if there is no error.", "source": "meca500_programming_manual", "chunk_index": 1898, "length": 21, "hash": "c87f5e5b376c39db9587f7987784510e"}
{"id": "meca500_programming_manual_1899", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1899, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1900", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1900, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1901", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1901, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1902", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1902, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1903", "text": "The MotionStatus section in the cyclic input reports the robot\u2019s motion status (similar to\nGetStatusRobot (page 290)).", "source": "meca500_programming_manual", "chunk_index": 1903, "length": 118, "hash": "ad5611dabef4c6031d11572db3e883f0"}
{"id": "meca500_programming_manual_1904", "text": "section in the cyclic input reports the robot\u2019s motion status (similar to", "source": "meca500_programming_manual", "chunk_index": 1904, "length": 73, "hash": "040f37fd364f80a1835e1e6bd9ab4337"}
{"id": "meca500_programming_manual_1905", "text": "Table 14: MotionStatus (Offset 4, size 12, EtherCAT index 6015h)", "source": "meca500_programming_manual", "chunk_index": 1905, "length": 64, "hash": "d45ec09ebfd080b3486060faf02417da"}
{"id": "meca500_programming_manual_1906", "text": "(Offset 4, size 12, EtherCAT index 6015h)", "source": "meca500_programming_manual", "chunk_index": 1906, "length": 41, "hash": "062200cbd0913632b55a5b9686450193"}
{"id": "meca500_programming_manual_1907", "text": "CheckpointReachedInteger", "source": "meca500_programming_manual", "chunk_index": 1907, "length": 24, "hash": "db89e1a35963473cab6a6e48bb2c7243"}
{"id": "meca500_programming_manual_1908", "text": "Indicates the last checkpoint number reached\n(GetCheckpoint (page 233)).", "source": "meca500_programming_manual", "chunk_index": 1908, "length": 72, "hash": "f1487a2f72f9f7916af21945395b937d"}
{"id": "meca500_programming_manual_1909", "text": "Indicates the last checkpoint number reached\n(", "source": "meca500_programming_manual", "chunk_index": 1909, "length": 46, "hash": "63332abd344af4e6f9e3b0bcf4e30914"}
{"id": "meca500_programming_manual_1910", "text": "The value remains the same until another checkpoint\nis reached.", "source": "meca500_programming_manual", "chunk_index": 1910, "length": 63, "hash": "4a581cdbadf16cf8388b6038e6d7c611"}
{"id": "meca500_programming_manual_1911", "text": "The value remains the same until another checkpoint\nis reached.", "source": "meca500_programming_manual", "chunk_index": 1911, "length": 63, "hash": "4a581cdbadf16cf8388b6038e6d7c611"}
{"id": "meca500_programming_manual_1912", "text": "Indicates the last checkpoint number discarded\n(GetCheckpointDiscarded (page 234)).", "source": "meca500_programming_manual", "chunk_index": 1912, "length": 83, "hash": "ce5c0a53c5833d723e798891c4f53a74"}
{"id": "meca500_programming_manual_1913", "text": "Indicates the last checkpoint number discarded\n(", "source": "meca500_programming_manual", "chunk_index": 1913, "length": 48, "hash": "c02910a053e427298102f6cf66771285"}
{"id": "meca500_programming_manual_1914", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 1914, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_1915", "text": "The value remains unchanged until another checkpoint\nis discarded.", "source": "meca500_programming_manual", "chunk_index": 1915, "length": 66, "hash": "6f83e0c3efcf190864b2a1ab30841a4f"}
{"id": "meca500_programming_manual_1916", "text": "The value remains unchanged until another checkpoint\nis discarded.", "source": "meca500_programming_manual", "chunk_index": 1916, "length": 66, "hash": "6f83e0c3efcf190864b2a1ab30841a4f"}
{"id": "meca500_programming_manual_1917", "text": "Acknowledges the MoveID of the last command the\nrobot received (Motion control (page 58)).", "source": "meca500_programming_manual", "chunk_index": 1917, "length": 90, "hash": "f59f4a333958eae64e0f9e3b461b8984"}
{"id": "meca500_programming_manual_1918", "text": "of the last command the", "source": "meca500_programming_manual", "chunk_index": 1918, "length": 23, "hash": "0c2bed039f23e73d3263c44ed8167f9c"}
{"id": "meca500_programming_manual_1919", "text": "For details, refer to Using motion-related commands\n(page 51).", "source": "meca500_programming_manual", "chunk_index": 1919, "length": 62, "hash": "98e3b1d2b0b8326f544ba8411b0fe200"}
{"id": "meca500_programming_manual_1920", "text": "For details, refer to", "source": "meca500_programming_manual", "chunk_index": 1920, "length": 21, "hash": "3af9dbd09fc317ce13a919a093461dda"}
{"id": "meca500_programming_manual_1921", "text": "Using motion-related commands", "source": "meca500_programming_manual", "chunk_index": 1921, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "meca500_programming_manual_1922", "text": "The number of commands that can be added to the\nrobot\u2019s motion queue at any time (the maximum is\n13,000).", "source": "meca500_programming_manual", "chunk_index": 1922, "length": 105, "hash": "10fe91ea22099042d9033a955e6b45b4"}
{"id": "meca500_programming_manual_1923", "text": "The number of commands that can be added to the\nrobot\u2019s motion queue at any time (the maximum is\n13,000).", "source": "meca500_programming_manual", "chunk_index": 1923, "length": 105, "hash": "10fe91ea22099042d9033a955e6b45b4"}
{"id": "meca500_programming_manual_1924", "text": "If 0 (too many commands sent), subsequent commands\nwill be ignored.", "source": "meca500_programming_manual", "chunk_index": 1924, "length": 67, "hash": "5b3d971e3c14d7ba75d01524ef24ced5"}
{"id": "meca500_programming_manual_1925", "text": "If 0 (too many commands sent), subsequent commands\nwill be ignored.", "source": "meca500_programming_manual", "chunk_index": 1925, "length": 67, "hash": "5b3d971e3c14d7ba75d01524ef24ced5"}
{"id": "meca500_programming_manual_1926", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1926, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1927", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1927, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1928", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1928, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1929", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1929, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1930", "text": "Table 14 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1930, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "meca500_programming_manual_1931", "text": "Table 14 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1931, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "meca500_programming_manual_1932", "text": "Indicates whether motion is paused.", "source": "meca500_programming_manual", "chunk_index": 1932, "length": 35, "hash": "c3bef2e3bc6f7d961a6b2e1c8a741ccd"}
{"id": "meca500_programming_manual_1933", "text": "Indicates whether motion is paused.", "source": "meca500_programming_manual", "chunk_index": 1933, "length": 35, "hash": "c3bef2e3bc6f7d961a6b2e1c8a741ccd"}
{"id": "meca500_programming_manual_1934", "text": "This bit stays set (and the robot remains paused) until\nmotion is resumed with Motion control (page 58) bit\nResumeMotion.", "source": "meca500_programming_manual", "chunk_index": 1934, "length": 121, "hash": "128bba1b8d5fb2dea58692188a2b8ab0"}
{"id": "meca500_programming_manual_1935", "text": "This bit stays set (and the robot remains paused) until\nmotion is resumed with", "source": "meca500_programming_manual", "chunk_index": 1935, "length": 78, "hash": "26a1b8f33dd38dd099804df96e80d52f"}
{"id": "meca500_programming_manual_1936", "text": "The End of Block (EOB) bit is set when the robot is not\nmoving and there are no motion commands left in the\nqueue.", "source": "meca500_programming_manual", "chunk_index": 1936, "length": 114, "hash": "287184951cc588ee41b7995cb0220dc2"}
{"id": "meca500_programming_manual_1937", "text": ") bit is set when the robot is not\nmoving and there are no motion commands left in the\nqueue.", "source": "meca500_programming_manual", "chunk_index": 1937, "length": 93, "hash": "14e9a71ddd6537762e253e04a53746cf"}
{"id": "meca500_programming_manual_1938", "text": "Note that the EOB bit may occasionally be set before all\ncommands are completed due to network or\nprocessing delays.", "source": "meca500_programming_manual", "chunk_index": 1938, "length": 116, "hash": "f38d1b3a5ae8f94f98dfbffa462f7833"}
{"id": "meca500_programming_manual_1939", "text": "bit may occasionally be set before all\ncommands are completed due to network or\nprocessing delays.", "source": "meca500_programming_manual", "chunk_index": 1939, "length": 98, "hash": "6ceb49d91978c33e2f53f3d928d70412"}
{"id": "meca500_programming_manual_1940", "text": "Therefore, don\u2019t rely on this flag to determine when all\nmovements have finished. Use a checkpoint instead\n(SetCheckpoint (page 155)).", "source": "meca500_programming_manual", "chunk_index": 1940, "length": 134, "hash": "311e49c0607f536c9dfd9aacad6486a2"}
{"id": "meca500_programming_manual_1941", "text": "Therefore, don\u2019t rely on this flag to determine when all\nmovements have finished. Use a checkpoint instead", "source": "meca500_programming_manual", "chunk_index": 1941, "length": 106, "hash": "db5d8fe7fd0a0711b49b540936a277f8"}
{"id": "meca500_programming_manual_1942", "text": "The End of Motion (EOM) bit is set when the robot is not\nmoving.", "source": "meca500_programming_manual", "chunk_index": 1942, "length": 64, "hash": "e0fa4a400507992fec5125bdfc4edda4"}
{"id": "meca500_programming_manual_1943", "text": ") bit is set when the robot is not\nmoving.", "source": "meca500_programming_manual", "chunk_index": 1943, "length": 42, "hash": "d64a6483d67a0f4a37c3095dce63ea9c"}
{"id": "meca500_programming_manual_1944", "text": "Note that the EOM bit may occasionally be set between\ntwo consecutive motion commands.", "source": "meca500_programming_manual", "chunk_index": 1944, "length": 86, "hash": "f21b8c66fed56f17e4afe416876ecfad"}
{"id": "meca500_programming_manual_1945", "text": "bit may occasionally be set between\ntwo consecutive motion commands.", "source": "meca500_programming_manual", "chunk_index": 1945, "length": 68, "hash": "7a27c3c33b7e6571c2c07ed645d86708"}
{"id": "meca500_programming_manual_1946", "text": "Therefore, do not rely on this flag to determine when\nall movements have finished. Use a checkpoint instead\n(SetCheckpoint (page 155)).", "source": "meca500_programming_manual", "chunk_index": 1946, "length": 135, "hash": "0aa07ff07c817da0fd6c8171e2f2a3fc"}
{"id": "meca500_programming_manual_1947", "text": "Therefore, do not rely on this flag to determine when", "source": "meca500_programming_manual", "chunk_index": 1947, "length": 53, "hash": "7e92c4892ff8fea0d6f4869b92258b0f"}
{"id": "meca500_programming_manual_1948", "text": "all movements have finished. Use a checkpoint instead\n(", "source": "meca500_programming_manual", "chunk_index": 1948, "length": 55, "hash": "3a71210e94dacf4dd49b3fca91d3d2cd"}
{"id": "meca500_programming_manual_1949", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1949, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1950", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1950, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1951", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1951, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1952", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1952, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1953", "text": "Table 14 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1953, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "meca500_programming_manual_1954", "text": "Table 14 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1954, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "meca500_programming_manual_1955", "text": "ExcessiveTorque Bool", "source": "meca500_programming_manual", "chunk_index": 1955, "length": 20, "hash": "96bcb38e6b794407b9d050076e4b0112"}
{"id": "meca500_programming_manual_1956", "text": "Indicates whether the motion queue is cleared. If the\nqueue is cleared, the robot is not moving.", "source": "meca500_programming_manual", "chunk_index": 1956, "length": 96, "hash": "1e598c3b221c340328c05581c0560744"}
{"id": "meca500_programming_manual_1957", "text": "Indicates whether the motion queue is cleared. If the\nqueue is cleared, the robot is not moving.", "source": "meca500_programming_manual", "chunk_index": 1957, "length": 96, "hash": "1e598c3b221c340328c05581c0560744"}
{"id": "meca500_programming_manual_1958", "text": "This bit remains set (and the robot remains paused)\nwhen the motion queue is cleared due to the\nClearMotion control bit, robot deactivation, or a safety\nsignal.", "source": "meca500_programming_manual", "chunk_index": 1958, "length": 160, "hash": "32417eeed4df58492a8681dbb20c7457"}
{"id": "meca500_programming_manual_1959", "text": "This bit remains set (and the robot remains paused)\nwhen the motion queue is cleared due to the", "source": "meca500_programming_manual", "chunk_index": 1959, "length": 95, "hash": "8e8fd6eaf5d6cdfec1a6e2d924902d9b"}
{"id": "meca500_programming_manual_1960", "text": "control bit, robot deactivation, or a safety\nsignal.", "source": "meca500_programming_manual", "chunk_index": 1960, "length": 52, "hash": "dfaf25539c52cd3b7f6b7c0192addf2b"}
{"id": "meca500_programming_manual_1961", "text": "It remains set until motion is resumed with Motion\ncontrol (page 58) bit ResumeMotion (if the robot is still\nactivated) or the robot is reactivated (if it was\ndeactivated).", "source": "meca500_programming_manual", "chunk_index": 1961, "length": 172, "hash": "a3603ec7f5abcac2f3bf3abe0d4f9be4"}
{"id": "meca500_programming_manual_1962", "text": "It remains set until motion is resumed with", "source": "meca500_programming_manual", "chunk_index": 1962, "length": 43, "hash": "78b2ff61325486bbd51c0340638161fe"}
{"id": "meca500_programming_manual_1963", "text": "(if the robot is still\nactivated) or the robot is reactivated (if it was\ndeactivated).", "source": "meca500_programming_manual", "chunk_index": 1963, "length": 86, "hash": "b3c6a791ceac5391035d67a9589a55d9"}
{"id": "meca500_programming_manual_1964", "text": "Indicates whether the SWStop safety signal is set.", "source": "meca500_programming_manual", "chunk_index": 1964, "length": 50, "hash": "b7bd35b5ec35ad4c0c22f22db6fdaa86"}
{"id": "meca500_programming_manual_1965", "text": "Indicates whether the SWStop safety signal is set.", "source": "meca500_programming_manual", "chunk_index": 1965, "length": 50, "hash": "b7bd35b5ec35ad4c0c22f22db6fdaa86"}
{"id": "meca500_programming_manual_1966", "text": "Deprecated; use the PStop2 bit from SafetyStatus\ninstead.", "source": "meca500_programming_manual", "chunk_index": 1966, "length": 57, "hash": "03117ac81ba5f6d491d7a44a387a47bc"}
{"id": "meca500_programming_manual_1967", "text": "Indicates whether a joint torque is exceeding the\ncorresponding user-defined torque limit\n(SetTorqueLimits (page 175), GetTorqueLimitsStatus\n(page 291)).", "source": "meca500_programming_manual", "chunk_index": 1967, "length": 153, "hash": "9e3f21355bb6e9e8a484e92fa82dfa0d"}
{"id": "meca500_programming_manual_1968", "text": "Indicates whether a joint torque is exceeding the\ncorresponding user-defined torque limit\n(", "source": "meca500_programming_manual", "chunk_index": 1968, "length": 91, "hash": "dfe5147d8cd31350e0abf6f86f2cfa4b"}
{"id": "meca500_programming_manual_1969", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 1969, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_1970", "text": "Reserved for future use.", "source": "meca500_programming_manual", "chunk_index": 1970, "length": 24, "hash": "933c55bd5b643b15e2a23cdbacbc4c95"}
{"id": "meca500_programming_manual_1971", "text": "Reserved for future use.", "source": "meca500_programming_manual", "chunk_index": 1971, "length": 24, "hash": "933c55bd5b643b15e2a23cdbacbc4c95"}
{"id": "meca500_programming_manual_1972", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1972, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1973", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 1973, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_1974", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1974, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1975", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1975, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1976", "text": "OfflineProgramIDInteger", "source": "meca500_programming_manual", "chunk_index": 1976, "length": 23, "hash": "8326a3e9ae2a78365929cc9a3dd57cfd"}
{"id": "meca500_programming_manual_1977", "text": "Table 14 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1977, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "meca500_programming_manual_1978", "text": "Table 14 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 1978, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "meca500_programming_manual_1979", "text": "ID of the offline program currently running; 0 if none\n(StartProgram (page 216)).", "source": "meca500_programming_manual", "chunk_index": 1979, "length": 81, "hash": "dcb9ac489b665321a4156baf0ee0bf9d"}
{"id": "meca500_programming_manual_1980", "text": "ID of the offline program currently running; 0 if none\n(", "source": "meca500_programming_manual", "chunk_index": 1980, "length": 56, "hash": "2afdb95a799f75808ef0ddcb72325fce"}
{"id": "meca500_programming_manual_1981", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 1981, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_1982", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 1982, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_1983", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1983, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1984", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 1984, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_1985", "text": "The TargetJointSet section in the cyclic input reports the robot\u2019s real-time calculated joint\nposition (similar to GetRtTargetJointPos (page 283)).", "source": "meca500_programming_manual", "chunk_index": 1985, "length": 147, "hash": "e0360a1b3e44cd7f4a6d1e26fe64944f"}
{"id": "meca500_programming_manual_1986", "text": "section in the cyclic input reports the robot\u2019s real-time calculated joint\nposition (similar to", "source": "meca500_programming_manual", "chunk_index": 1986, "length": 95, "hash": "429bce058b7118a69bab8c0258025502"}
{"id": "meca500_programming_manual_1987", "text": "Table 15: TargetJointSet (Offset 16, size 24, EtherCAT index 6030h)", "source": "meca500_programming_manual", "chunk_index": 1987, "length": 67, "hash": "e3f78177abb6c1a63e9601e097923b93"}
{"id": "meca500_programming_manual_1988", "text": "(Offset 16, size 24, EtherCAT index 6030h)", "source": "meca500_programming_manual", "chunk_index": 1988, "length": 42, "hash": "c9a2f87b2cb404592be6bb644e03be7c"}
{"id": "meca500_programming_manual_1989", "text": "Real-time calculated target position for joint 1, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1989, "length": 55, "hash": "986863f9d6846f5051acb9b2ea324d06"}
{"id": "meca500_programming_manual_1990", "text": "Real-time calculated target position for joint 1, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1990, "length": 55, "hash": "986863f9d6846f5051acb9b2ea324d06"}
{"id": "meca500_programming_manual_1991", "text": "Real-time calculated target position for joint 2, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1991, "length": 55, "hash": "06e4aa03e3d23a9eafc929841bd77da0"}
{"id": "meca500_programming_manual_1992", "text": "Real-time calculated target position for joint 2, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1992, "length": 55, "hash": "06e4aa03e3d23a9eafc929841bd77da0"}
{"id": "meca500_programming_manual_1993", "text": "Real-time calculated target position for joint 3, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1993, "length": 55, "hash": "ae1874c6f89372f9dd43b33cea946448"}
{"id": "meca500_programming_manual_1994", "text": "Real-time calculated target position for joint 3, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1994, "length": 55, "hash": "ae1874c6f89372f9dd43b33cea946448"}
{"id": "meca500_programming_manual_1995", "text": "Real-time calculated target position for joint 4, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1995, "length": 55, "hash": "e1c410e76d865bd4485d375050fa5860"}
{"id": "meca500_programming_manual_1996", "text": "Real-time calculated target position for joint 4, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1996, "length": 55, "hash": "e1c410e76d865bd4485d375050fa5860"}
{"id": "meca500_programming_manual_1997", "text": "Real-time calculated target position for joint 5, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1997, "length": 55, "hash": "f6ca9eab2c5b8a4466762802e29ae707"}
{"id": "meca500_programming_manual_1998", "text": "Real-time calculated target position for joint 5, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1998, "length": 55, "hash": "f6ca9eab2c5b8a4466762802e29ae707"}
{"id": "meca500_programming_manual_1999", "text": "Real-time calculated target position for joint 6, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 1999, "length": 55, "hash": "ef0addf3bdbc1d698c1549dc5b7d4f08"}
{"id": "meca500_programming_manual_2000", "text": "Real-time calculated target position for joint 6, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2000, "length": 55, "hash": "ef0addf3bdbc1d698c1549dc5b7d4f08"}
{"id": "meca500_programming_manual_2001", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2001, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2002", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2002, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2003", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2003, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2004", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2004, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2005", "text": "Target end-effector pose", "source": "meca500_programming_manual", "chunk_index": 2005, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "meca500_programming_manual_2006", "text": "Target end-effector pose", "source": "meca500_programming_manual", "chunk_index": 2006, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "meca500_programming_manual_2007", "text": "The TargetEndEffectorPose section in the cyclic input reports the robot\u2019s real-time\ncalculated Cartesian position of the origin of the TRF with respect to the WRF (similar to\nGetRtTargetCartPos (page 279)).", "source": "meca500_programming_manual", "chunk_index": 2007, "length": 206, "hash": "7673a01981c9bc859999a61d973e64c7"}
{"id": "meca500_programming_manual_2008", "text": "TargetEndEffectorPose", "source": "meca500_programming_manual", "chunk_index": 2008, "length": 21, "hash": "196d3a576601ac16b2753c86a3b70da3"}
{"id": "meca500_programming_manual_2009", "text": "section in the cyclic input reports the robot\u2019s real-time\ncalculated Cartesian position of the origin of the TRF with respect to the WRF (similar to", "source": "meca500_programming_manual", "chunk_index": 2009, "length": 148, "hash": "b7447c69376d22d65c44bc0d0be88d2f"}
{"id": "meca500_programming_manual_2010", "text": "Table 16: TargetEndEffectorPose (Offset 40, size 24, EtherCAT index 6031h)", "source": "meca500_programming_manual", "chunk_index": 2010, "length": 74, "hash": "f837702dd382144122e34b4614a50b87"}
{"id": "meca500_programming_manual_2011", "text": "TargetEndEffectorPose", "source": "meca500_programming_manual", "chunk_index": 2011, "length": 21, "hash": "196d3a576601ac16b2753c86a3b70da3"}
{"id": "meca500_programming_manual_2012", "text": "(Offset 40, size 24, EtherCAT index 6031h)", "source": "meca500_programming_manual", "chunk_index": 2012, "length": 42, "hash": "63766af61dadad666418982e482bfad9"}
{"id": "meca500_programming_manual_2013", "text": "X coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2013, "length": 69, "hash": "3643488b8a0145d3c88bd5abd7eb0067"}
{"id": "meca500_programming_manual_2014", "text": "X coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2014, "length": 69, "hash": "3643488b8a0145d3c88bd5abd7eb0067"}
{"id": "meca500_programming_manual_2015", "text": "Y coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2015, "length": 69, "hash": "e9a870d8ee11ef72d0dca52903f6cdab"}
{"id": "meca500_programming_manual_2016", "text": "Y coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2016, "length": 69, "hash": "e9a870d8ee11ef72d0dca52903f6cdab"}
{"id": "meca500_programming_manual_2017", "text": "Z coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2017, "length": 69, "hash": "876e54ea33efd13fd83db13d93f24fd9"}
{"id": "meca500_programming_manual_2018", "text": "Z coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2018, "length": 69, "hash": "876e54ea33efd13fd83db13d93f24fd9"}
{"id": "meca500_programming_manual_2019", "text": "\u03b1 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2019, "length": 84, "hash": "49ff6ba9758f5c0317321a383ecb02bb"}
{"id": "meca500_programming_manual_2020", "text": "\u03b1 Euler angle representing the orientation of the TRF", "source": "meca500_programming_manual", "chunk_index": 2020, "length": 53, "hash": "85353d321887f3a79ab40b66f09a89e4"}
{"id": "meca500_programming_manual_2021", "text": "with respect to the WRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2021, "length": 30, "hash": "aa61a53f49873049a8b1c49c2f127f78"}
{"id": "meca500_programming_manual_2022", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2022, "length": 84, "hash": "cce7124cd013b519865409ecfd210fa4"}
{"id": "meca500_programming_manual_2023", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2023, "length": 84, "hash": "cce7124cd013b519865409ecfd210fa4"}
{"id": "meca500_programming_manual_2024", "text": "\u03b3 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2024, "length": 84, "hash": "6b7f8a86ecfb68cc559650f929fb4985"}
{"id": "meca500_programming_manual_2025", "text": "\u03b3 Euler angle representing the orientation of the TRF", "source": "meca500_programming_manual", "chunk_index": 2025, "length": 53, "hash": "6f4f4b08799eeeca32ab6fc21929d23d"}
{"id": "meca500_programming_manual_2026", "text": "with respect to the WRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2026, "length": 30, "hash": "aa61a53f49873049a8b1c49c2f127f78"}
{"id": "meca500_programming_manual_2027", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2027, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2028", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2028, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2029", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2029, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2030", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2030, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2031", "text": "Target configuration", "source": "meca500_programming_manual", "chunk_index": 2031, "length": 20, "hash": "b4b42d35279073d3c644c40f5e5e8178"}
{"id": "meca500_programming_manual_2032", "text": "Target configuration", "source": "meca500_programming_manual", "chunk_index": 2032, "length": 20, "hash": "b4b42d35279073d3c644c40f5e5e8178"}
{"id": "meca500_programming_manual_2033", "text": "The TargetConfiguration section in the cyclic input reports robot real-time posture and\nturn configurations that correspond to the calculated joint set (GetRtTargetConf (page 281),\nGetRtTargetConfTurn (page 282)). For more details, see Section 3.", "source": "meca500_programming_manual", "chunk_index": 2033, "length": 246, "hash": "749bb5bcbc52c452dd0d11a4ab5c9ad7"}
{"id": "meca500_programming_manual_2034", "text": "section in the cyclic input reports robot real-time posture and\nturn configurations that correspond to the calculated joint set (", "source": "meca500_programming_manual", "chunk_index": 2034, "length": 129, "hash": "7b1062c81c6de752733a2f69717d67fb"}
{"id": "meca500_programming_manual_2035", "text": "(page 282)). For more details, see Section 3.", "source": "meca500_programming_manual", "chunk_index": 2035, "length": 45, "hash": "06d2160f0608ce9a66b78a4e1995ff39"}
{"id": "meca500_programming_manual_2036", "text": "Table 17: TargetConfiguration (Offset 64, size 4, EtherCAT index 6046h)", "source": "meca500_programming_manual", "chunk_index": 2036, "length": 71, "hash": "2e6f7de74dcb12ce11c051a0f023ef0e"}
{"id": "meca500_programming_manual_2037", "text": "(Offset 64, size 4, EtherCAT index 6046h)", "source": "meca500_programming_manual", "chunk_index": 2037, "length": 41, "hash": "4e7a78329295320fcb33940c46fe62b4"}
{"id": "meca500_programming_manual_2038", "text": "Real-time shoulder posture configuration\ncorresponding to the calculated joint position.", "source": "meca500_programming_manual", "chunk_index": 2038, "length": 88, "hash": "5fafca6e2c738543a7d991cb61d150d5"}
{"id": "meca500_programming_manual_2039", "text": "Real-time shoulder posture configuration\ncorresponding to the calculated joint position.", "source": "meca500_programming_manual", "chunk_index": 2039, "length": 88, "hash": "5fafca6e2c738543a7d991cb61d150d5"}
{"id": "meca500_programming_manual_2040", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the shoulder singularity.", "source": "meca500_programming_manual", "chunk_index": 2040, "length": 97, "hash": "b22aa610258d8fee3fbd80aabd7a6fe8"}
{"id": "meca500_programming_manual_2041", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the shoulder singularity.", "source": "meca500_programming_manual", "chunk_index": 2041, "length": 97, "hash": "b22aa610258d8fee3fbd80aabd7a6fe8"}
{"id": "meca500_programming_manual_2042", "text": "Real-time elbow posture configuration corresponding\nto the calculated joint position.", "source": "meca500_programming_manual", "chunk_index": 2042, "length": 85, "hash": "5d9c854b4b7ec129d2d7320333a0c235"}
{"id": "meca500_programming_manual_2043", "text": "Real-time elbow posture configuration corresponding\nto the calculated joint position.", "source": "meca500_programming_manual", "chunk_index": 2043, "length": 85, "hash": "5d9c854b4b7ec129d2d7320333a0c235"}
{"id": "meca500_programming_manual_2044", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the elbow singularity.", "source": "meca500_programming_manual", "chunk_index": 2044, "length": 94, "hash": "80247496d896c3ece9d16cec8102c216"}
{"id": "meca500_programming_manual_2045", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the elbow singularity.", "source": "meca500_programming_manual", "chunk_index": 2045, "length": 94, "hash": "80247496d896c3ece9d16cec8102c216"}
{"id": "meca500_programming_manual_2046", "text": "Real-time wrist posture configuration corresponding to\nthe calculated joint position.", "source": "meca500_programming_manual", "chunk_index": 2046, "length": 85, "hash": "5c96597a4f31e614d3da208ca273531e"}
{"id": "meca500_programming_manual_2047", "text": "Real-time wrist posture configuration corresponding to\nthe calculated joint position.", "source": "meca500_programming_manual", "chunk_index": 2047, "length": 85, "hash": "5c96597a4f31e614d3da208ca273531e"}
{"id": "meca500_programming_manual_2048", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the wrist singularity.", "source": "meca500_programming_manual", "chunk_index": 2048, "length": 94, "hash": "c95780e23253ed60c5e342b5b50124b1"}
{"id": "meca500_programming_manual_2049", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the wrist singularity.", "source": "meca500_programming_manual", "chunk_index": 2049, "length": 94, "hash": "c95780e23253ed60c5e342b5b50124b1"}
{"id": "meca500_programming_manual_2050", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2050, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2051", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2051, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2052", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2052, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2053", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2053, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2054", "text": "Table 17 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2054, "length": 39, "hash": "0a0ca08c73442a759aaed8a8a6655233"}
{"id": "meca500_programming_manual_2055", "text": "Table 17 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2055, "length": 39, "hash": "0a0ca08c73442a759aaed8a8a6655233"}
{"id": "meca500_programming_manual_2056", "text": "Real-time turn configuration for the last joint.", "source": "meca500_programming_manual", "chunk_index": 2056, "length": 48, "hash": "22b5ea62b821c59536b011b053ea3653"}
{"id": "meca500_programming_manual_2057", "text": "Real-time turn configuration for the last joint.", "source": "meca500_programming_manual", "chunk_index": 2057, "length": 48, "hash": "22b5ea62b821c59536b011b053ea3653"}
{"id": "meca500_programming_manual_2058", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2058, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2059", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2059, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2060", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2060, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2061", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2061, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2062", "text": "The TargetWrf section in the cyclic input reports the WRF (with respect of the BRF) used for\nreporting the current end-effector pose (Target end-effector pose (page 86)), similar to the\nGetRtWrf (page 287) and GetWrf (page 266) command.", "source": "meca500_programming_manual", "chunk_index": 2062, "length": 236, "hash": "30fb8941761c21267c13e0f5a9d53baa"}
{"id": "meca500_programming_manual_2063", "text": "section in the cyclic input reports the WRF (with respect of the BRF) used for\nreporting the current end-effector pose (", "source": "meca500_programming_manual", "chunk_index": 2063, "length": 120, "hash": "46e6080cb89dc63cc1fcf69fd694cf56"}
{"id": "meca500_programming_manual_2064", "text": "Target end-effector pose", "source": "meca500_programming_manual", "chunk_index": 2064, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "meca500_programming_manual_2065", "text": "(page 86)), similar to the", "source": "meca500_programming_manual", "chunk_index": 2065, "length": 26, "hash": "80d302d81f459ee956acc51e1816babb"}
{"id": "meca500_programming_manual_2066", "text": "Table 18: TargetWrf (Offset 68, size 24, EtherCAT index 6050h)", "source": "meca500_programming_manual", "chunk_index": 2066, "length": 62, "hash": "94d26ac79bdaf0262c124ff185d312bd"}
{"id": "meca500_programming_manual_2067", "text": "(Offset 68, size 24, EtherCAT index 6050h)", "source": "meca500_programming_manual", "chunk_index": 2067, "length": 42, "hash": "2908abed10ab1747ed4278648ea46523"}
{"id": "meca500_programming_manual_2068", "text": "X coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2068, "length": 69, "hash": "6792ec01f375968f8fc9f31aa023d9a0"}
{"id": "meca500_programming_manual_2069", "text": "X coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2069, "length": 69, "hash": "6792ec01f375968f8fc9f31aa023d9a0"}
{"id": "meca500_programming_manual_2070", "text": "Y coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2070, "length": 69, "hash": "593edc33e42a0bdc604b05b2af84ebe5"}
{"id": "meca500_programming_manual_2071", "text": "Y coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2071, "length": 69, "hash": "593edc33e42a0bdc604b05b2af84ebe5"}
{"id": "meca500_programming_manual_2072", "text": "Z coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2072, "length": 69, "hash": "e5258f739fb0900c1e6d5346a59c4aef"}
{"id": "meca500_programming_manual_2073", "text": "Z coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2073, "length": 69, "hash": "e5258f739fb0900c1e6d5346a59c4aef"}
{"id": "meca500_programming_manual_2074", "text": "\u03b1 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2074, "length": 84, "hash": "c7dfaef531237172774b767b73eef73e"}
{"id": "meca500_programming_manual_2075", "text": "\u03b1 Euler angle representing the orientation of the WRF", "source": "meca500_programming_manual", "chunk_index": 2075, "length": 53, "hash": "7e86bfabd34b34906c03196c4cdc43d8"}
{"id": "meca500_programming_manual_2076", "text": "with respect to the BRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2076, "length": 30, "hash": "eaed98cac65a74ee86369eb67959025e"}
{"id": "meca500_programming_manual_2077", "text": "\u03b2 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2077, "length": 84, "hash": "340f0be7c75e08504386bf4f85c18119"}
{"id": "meca500_programming_manual_2078", "text": "\u03b2 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2078, "length": 84, "hash": "340f0be7c75e08504386bf4f85c18119"}
{"id": "meca500_programming_manual_2079", "text": "\u03b3 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2079, "length": 84, "hash": "ba607ff8a8899c7b1100d3cb45837602"}
{"id": "meca500_programming_manual_2080", "text": "\u03b3 Euler angle representing the orientation of the WRF", "source": "meca500_programming_manual", "chunk_index": 2080, "length": 53, "hash": "08090b120aee6223ee31c8188d96d4fb"}
{"id": "meca500_programming_manual_2081", "text": "with respect to the BRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2081, "length": 30, "hash": "eaed98cac65a74ee86369eb67959025e"}
{"id": "meca500_programming_manual_2082", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2082, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2083", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2083, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2084", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2084, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2085", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2085, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2086", "text": "The TargetTrf section in the cyclic input reports the TRF (with respect of the FRF) used for\nreporting the current end-effector pose (Target end-effector pose (page 86)), similar to the\nGetRtTrf (page 286) and GetTrf (page 264) commands.", "source": "meca500_programming_manual", "chunk_index": 2086, "length": 237, "hash": "5baf5cfbc80f429ff161bc1e232a1547"}
{"id": "meca500_programming_manual_2087", "text": "section in the cyclic input reports the TRF (with respect of the FRF) used for\nreporting the current end-effector pose (", "source": "meca500_programming_manual", "chunk_index": 2087, "length": 120, "hash": "80c8256689d6f5de9707644b26530167"}
{"id": "meca500_programming_manual_2088", "text": "Target end-effector pose", "source": "meca500_programming_manual", "chunk_index": 2088, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "meca500_programming_manual_2089", "text": "(page 86)), similar to the", "source": "meca500_programming_manual", "chunk_index": 2089, "length": 26, "hash": "80d302d81f459ee956acc51e1816babb"}
{"id": "meca500_programming_manual_2090", "text": "(page 264) commands.", "source": "meca500_programming_manual", "chunk_index": 2090, "length": 20, "hash": "c735a0ab39b756bf2d023f06f911dff7"}
{"id": "meca500_programming_manual_2091", "text": "Table 19: TargetTRF (Offset 92, size 24, EtherCAT index 6051h)", "source": "meca500_programming_manual", "chunk_index": 2091, "length": 62, "hash": "eabe987629b91435edff465c37d802b2"}
{"id": "meca500_programming_manual_2092", "text": "(Offset 92, size 24, EtherCAT index 6051h)", "source": "meca500_programming_manual", "chunk_index": 2092, "length": 42, "hash": "8471d9d60f378796f86a24563eb9bd80"}
{"id": "meca500_programming_manual_2093", "text": "X coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2093, "length": 69, "hash": "f511792ef3e5d596d845765edb5d72a9"}
{"id": "meca500_programming_manual_2094", "text": "X coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2094, "length": 69, "hash": "f511792ef3e5d596d845765edb5d72a9"}
{"id": "meca500_programming_manual_2095", "text": "Y coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2095, "length": 69, "hash": "970e20caaede5aee38e3e811410c4a7b"}
{"id": "meca500_programming_manual_2096", "text": "Y coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2096, "length": 69, "hash": "970e20caaede5aee38e3e811410c4a7b"}
{"id": "meca500_programming_manual_2097", "text": "Z coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2097, "length": 69, "hash": "189e44b8d25f9ef8d0c35836b2131abf"}
{"id": "meca500_programming_manual_2098", "text": "Z coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 2098, "length": 69, "hash": "189e44b8d25f9ef8d0c35836b2131abf"}
{"id": "meca500_programming_manual_2099", "text": "\u03b1 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2099, "length": 84, "hash": "1e128192713ce2d884e5b3eb9ab887ab"}
{"id": "meca500_programming_manual_2100", "text": "\u03b1 Euler angle representing the orientation of the TRF", "source": "meca500_programming_manual", "chunk_index": 2100, "length": 53, "hash": "85353d321887f3a79ab40b66f09a89e4"}
{"id": "meca500_programming_manual_2101", "text": "with respect to the FRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2101, "length": 30, "hash": "4ef0e4b77f04f731761bddaca22f2ab4"}
{"id": "meca500_programming_manual_2102", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2102, "length": 84, "hash": "a08b1b410dc7e0ea449eb47aec3e5edc"}
{"id": "meca500_programming_manual_2103", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2103, "length": 84, "hash": "a08b1b410dc7e0ea449eb47aec3e5edc"}
{"id": "meca500_programming_manual_2104", "text": "\u03b3 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2104, "length": 84, "hash": "1a6957e88ec730f7207e4e3791f1abb8"}
{"id": "meca500_programming_manual_2105", "text": "\u03b3 Euler angle representing the orientation of the TRF", "source": "meca500_programming_manual", "chunk_index": 2105, "length": 53, "hash": "6f4f4b08799eeeca32ab6fc21929d23d"}
{"id": "meca500_programming_manual_2106", "text": "with respect to the FRF, in \u00b0.", "source": "meca500_programming_manual", "chunk_index": 2106, "length": 30, "hash": "4ef0e4b77f04f731761bddaca22f2ab4"}
{"id": "meca500_programming_manual_2107", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2107, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2108", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2108, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2109", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2109, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2110", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2110, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2111", "text": "The RobotTimestamp section in the cyclic input reports a precise, monotonic robot timestamp\nassociated with the cyclic data (similar to the command GetRtc (page 288)).", "source": "meca500_programming_manual", "chunk_index": 2111, "length": 167, "hash": "8948c09184bac53866504230c3b94c33"}
{"id": "meca500_programming_manual_2112", "text": "section in the cyclic input reports a precise, monotonic robot timestamp\nassociated with the cyclic data (similar to the command", "source": "meca500_programming_manual", "chunk_index": 2112, "length": 128, "hash": "8a7014108b560e68f66f650021139cc9"}
{"id": "meca500_programming_manual_2113", "text": "Table 20: RobotTimestamp (Offset 116, size 12, EtherCAT index 6060h)", "source": "meca500_programming_manual", "chunk_index": 2113, "length": 68, "hash": "f691cd7540d941d0d285fde82de38f98"}
{"id": "meca500_programming_manual_2114", "text": "(Offset 116, size 12, EtherCAT index 6060h)", "source": "meca500_programming_manual", "chunk_index": 2114, "length": 43, "hash": "d523229873da611149ab153404f0712c"}
{"id": "meca500_programming_manual_2115", "text": "DynamicDataCyclesInteger", "source": "meca500_programming_manual", "chunk_index": 2115, "length": 24, "hash": "db2b1e645f0a823370d18b75a16b61e7"}
{"id": "meca500_programming_manual_2116", "text": "Robot\u2019s monotonic timestamp in seconds, based on an\narbitrary reference.\nRobot\u2019s monotonic timestamp in microseconds, within\nthe current second.", "source": "meca500_programming_manual", "chunk_index": 2116, "length": 144, "hash": "481bab38ef4242f7dc96609234570ec7"}
{"id": "meca500_programming_manual_2117", "text": "Robot\u2019s monotonic timestamp in seconds, based on an\narbitrary reference.\nRobot\u2019s monotonic timestamp in microseconds, within\nthe current second.", "source": "meca500_programming_manual", "chunk_index": 2117, "length": 144, "hash": "481bab38ef4242f7dc96609234570ec7"}
{"id": "meca500_programming_manual_2118", "text": "Incremented each time the robot cycles through all\navailable dynamic data to report.", "source": "meca500_programming_manual", "chunk_index": 2118, "length": 84, "hash": "322fedbfd54885f499b1279dc680edf7"}
{"id": "meca500_programming_manual_2119", "text": "Incremented each time the robot cycles through all\navailable dynamic data to report.", "source": "meca500_programming_manual", "chunk_index": 2119, "length": 84, "hash": "322fedbfd54885f499b1279dc680edf7"}
{"id": "meca500_programming_manual_2120", "text": "Applies only if at least one dynamic data slot (Table 11)\nis configured with ID 0 (Automatic).", "source": "meca500_programming_manual", "chunk_index": 2120, "length": 94, "hash": "73c3f38fdecd3098af3fd90c93e355c0"}
{"id": "meca500_programming_manual_2121", "text": "Applies only if at least one dynamic data slot (Table 11)\nis configured with ID 0 (", "source": "meca500_programming_manual", "chunk_index": 2121, "length": 83, "hash": "f14b7de9cb0a3dacdef4502779a381ec"}
{"id": "meca500_programming_manual_2122", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2122, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2123", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2123, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2124", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2124, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2125", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2125, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2126", "text": "The SafetyStatus section in the cyclic input reports safety-related information (safety\nsignals, power supply input states, operating mode, etc.). See Management of errors and\nsafety stops (page 45).", "source": "meca500_programming_manual", "chunk_index": 2126, "length": 199, "hash": "ac7bd7c1d4249f8ecdaf281fb29823ae"}
{"id": "meca500_programming_manual_2127", "text": "section in the cyclic input reports safety-related information (safety\nsignals, power supply input states, operating mode, etc.). See", "source": "meca500_programming_manual", "chunk_index": 2127, "length": 133, "hash": "50584be40cefc77adbcc8d79906e190b"}
{"id": "meca500_programming_manual_2128", "text": "Management of errors and\nsafety stops", "source": "meca500_programming_manual", "chunk_index": 2128, "length": 37, "hash": "90758a3aef5c62f0976af107ad5a10ec"}
{"id": "meca500_programming_manual_2129", "text": "Table 21: SafetyStatus (Offset 128, size 12, EtherCAT index 6065h)", "source": "meca500_programming_manual", "chunk_index": 2129, "length": 66, "hash": "4c629a0a1c5a225208342071032dfc23"}
{"id": "meca500_programming_manual_2130", "text": "(Offset 128, size 12, EtherCAT index 6065h)", "source": "meca500_programming_manual", "chunk_index": 2130, "length": 43, "hash": "6284a93a53710e018a8ace2d022714bb"}
{"id": "meca500_programming_manual_2131", "text": "EStop\nPStop1\nPStop2\n(Reserved)\nOperationModeChangeBool\nBool\nEnablingDeviceReleased\nVoltageFluctuationBool\nBool\nReboot\nRedundancyFault Bool\nStandstillFault Bool\nConnectionDroppedBool\nBool\nMinorError\n(Reserved)\nEStopResettable Bool", "source": "meca500_programming_manual", "chunk_index": 2131, "length": 229, "hash": "38fa94be4a98bb38aa072c9d01ca2d7e"}
{"id": "meca500_programming_manual_2132", "text": "EnablingDeviceReleased\nVoltageFluctuation", "source": "meca500_programming_manual", "chunk_index": 2132, "length": 41, "hash": "6f09406927c17bb0a8f1bbda946ddc2f"}
{"id": "meca500_programming_manual_2133", "text": "Reboot\nRedundancyFault", "source": "meca500_programming_manual", "chunk_index": 2133, "length": 22, "hash": "58eed5543cc95b2dddf81d926de0f95a"}
{"id": "meca500_programming_manual_2134", "text": "PStop1ResettableBool\nPStop2ResettableBool", "source": "meca500_programming_manual", "chunk_index": 2134, "length": 41, "hash": "50842f82b7b91b83a11f3affbcf13f48"}
{"id": "meca500_programming_manual_2135", "text": "128:0\n128:1\n128:2\n128:3\n128:4\n128:5\n128:6\n128:7\n129:0\n129:1\n129:2\n129:3\n129:4\n132:0", "source": "meca500_programming_manual", "chunk_index": 2135, "length": 83, "hash": "276db2440f10f0cd1e8c23b1507150fe"}
{"id": "meca500_programming_manual_2136", "text": "128:0\n128:1\n128:2\n128:3\n128:4\n128:5\n128:6\n128:7\n129:0\n129:1\n129:2\n129:3\n129:4\n132:0", "source": "meca500_programming_manual", "chunk_index": 2136, "length": 83, "hash": "276db2440f10f0cd1e8c23b1507150fe"}
{"id": "meca500_programming_manual_2137", "text": "(Reserved)\n132:3\nBool\n132:4\nOperationModeChangeResettable\nBool\n132:5\nEnablingDeviceReleasedResettable\n132:6\nBool\nVoltageFluctuationResettable\n132:7\nRebootResettableBool\n133:0\nBool\nRedundancyFaultResettable", "source": "meca500_programming_manual", "chunk_index": 2137, "length": 205, "hash": "f83faa16087507e934d1d4cf278d37d6"}
{"id": "meca500_programming_manual_2138", "text": "(Reserved)\n132:3\nBool\n132:4", "source": "meca500_programming_manual", "chunk_index": 2138, "length": 27, "hash": "8ea19071a26fbb2bde098857c13a1671"}
{"id": "meca500_programming_manual_2139", "text": "OperationModeChangeResettable", "source": "meca500_programming_manual", "chunk_index": 2139, "length": 29, "hash": "bb8b22c589de86e3939557aec656798d"}
{"id": "meca500_programming_manual_2140", "text": "EnablingDeviceReleasedResettable", "source": "meca500_programming_manual", "chunk_index": 2140, "length": 32, "hash": "be84a45b767a85ad3310c14e9bb2532f"}
{"id": "meca500_programming_manual_2141", "text": "VoltageFluctuationResettable", "source": "meca500_programming_manual", "chunk_index": 2141, "length": 28, "hash": "f21ebe7ce92ace684762c95f597c637d"}
{"id": "meca500_programming_manual_2142", "text": "RedundancyFaultResettable", "source": "meca500_programming_manual", "chunk_index": 2142, "length": 25, "hash": "111797c187a668cef582c62ed3021758"}
{"id": "meca500_programming_manual_2143", "text": "StandstillFaultResettable\nConnectionDroppedResettable", "source": "meca500_programming_manual", "chunk_index": 2143, "length": 53, "hash": "53b43e7eb2aad644aa5d77795feb6c7c"}
{"id": "meca500_programming_manual_2144", "text": "StandstillFaultResettable\nConnectionDroppedResettable", "source": "meca500_programming_manual", "chunk_index": 2144, "length": 53, "hash": "53b43e7eb2aad644aa5d77795feb6c7c"}
{"id": "meca500_programming_manual_2145", "text": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n20\n1", "source": "meca500_programming_manual", "chunk_index": 2145, "length": 28, "hash": "8e71573bae6b78849bb0057178d52a8f"}
{"id": "meca500_programming_manual_2146", "text": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n20\n1", "source": "meca500_programming_manual", "chunk_index": 2146, "length": 28, "hash": "8e71573bae6b78849bb0057178d52a8f"}
{"id": "meca500_programming_manual_2147", "text": "1A11h:1\n1A11h:2\n1A11h:3", "source": "meca500_programming_manual", "chunk_index": 2147, "length": 23, "hash": "222874597ee3f0c77ba93ee4c6322dc8"}
{"id": "meca500_programming_manual_2148", "text": "1A11h:1\n1A11h:2\n1A11h:3", "source": "meca500_programming_manual", "chunk_index": 2148, "length": 23, "hash": "222874597ee3f0c77ba93ee4c6322dc8"}
{"id": "meca500_programming_manual_2149", "text": "1A11h:5\n1A11h:6\n1A11h:7\n1A11h:8\n1A11h:9\n1A11h:10\n1A11h:11\n1A11h:12", "source": "meca500_programming_manual", "chunk_index": 2149, "length": 66, "hash": "b7e30c1ea773780eee52b54ea9ff4cf0"}
{"id": "meca500_programming_manual_2150", "text": "1A11h:5\n1A11h:6\n1A11h:7\n1A11h:8\n1A11h:9\n1A11h:10\n1A11h:11\n1A11h:12", "source": "meca500_programming_manual", "chunk_index": 2150, "length": 66, "hash": "b7e30c1ea773780eee52b54ea9ff4cf0"}
{"id": "meca500_programming_manual_2151", "text": "1A11h:37\n1A11h:38\n1A11h:39\n1A11h:40\n1A11h:41", "source": "meca500_programming_manual", "chunk_index": 2151, "length": 44, "hash": "8df28eb71dbf660636eaac95fb328c69"}
{"id": "meca500_programming_manual_2152", "text": "1A11h:37\n1A11h:38\n1A11h:39\n1A11h:40\n1A11h:41", "source": "meca500_programming_manual", "chunk_index": 2152, "length": 44, "hash": "8df28eb71dbf660636eaac95fb328c69"}
{"id": "meca500_programming_manual_2153", "text": "E-Stop safety stop signal state\u2020\nNot supported on the Meca500\nP-Stop 2 safety stop signal state\u2020\nReserved for future use.\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nTCP/IP connection dropped safety stop signal state\u2020\nNot supported on the Meca500\nReserved for future use.\n(Only on Meca500 R4) E-Stop safety stop signal ready\nto be reset (Reset button)\nNot supported on the Meca500\nP-Stop 2 safety stop signal ready to be reset (with\nResumeMotion)\nReserved for future use.\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nAlways 0. A redundancy fault requires rebooting the\nrobot; it cannot be reset.\nNot supported on the Meca500\nConnection dropped safety stop signal ready to be\nreset (with ResumeMotion)", "source": "meca500_programming_manual", "chunk_index": 2153, "length": 901, "hash": "5edbd95677a247b51dafd4fdc730f773"}
{"id": "meca500_programming_manual_2154", "text": "E-Stop safety stop signal state", "source": "meca500_programming_manual", "chunk_index": 2154, "length": 31, "hash": "3bd8d13f514a1f7bc35894a5685c8a83"}
{"id": "meca500_programming_manual_2155", "text": "Not supported on the Meca500\nP-Stop 2 safety stop signal state", "source": "meca500_programming_manual", "chunk_index": 2155, "length": 62, "hash": "6784a8c89d32d4a8660fe13a3904f2d5"}
{"id": "meca500_programming_manual_2156", "text": "Reserved for future use.\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nTCP/IP connection dropped safety stop signal state", "source": "meca500_programming_manual", "chunk_index": 2156, "length": 249, "hash": "acafb61237b9e110995b1524a3f17b1d"}
{"id": "meca500_programming_manual_2157", "text": "Not supported on the Meca500\nReserved for future use.\n(Only on Meca500 R4) E-Stop safety stop signal ready\nto be reset (Reset button)\nNot supported on the Meca500", "source": "meca500_programming_manual", "chunk_index": 2157, "length": 162, "hash": "f51263e33315a3831725a51b916113b1"}
{"id": "meca500_programming_manual_2158", "text": "P-Stop 2 safety stop signal ready to be reset (with", "source": "meca500_programming_manual", "chunk_index": 2158, "length": 51, "hash": "9c9d988720d2d08d3e4754e999f8ed03"}
{"id": "meca500_programming_manual_2159", "text": ")\nReserved for future use.\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nAlways 0. A redundancy fault requires rebooting the\nrobot; it cannot be reset.", "source": "meca500_programming_manual", "chunk_index": 2159, "length": 221, "hash": "a3bee650d042d606a0a3c03d4fe22c2d"}
{"id": "meca500_programming_manual_2160", "text": "Not supported on the Meca500\nConnection dropped safety stop signal ready to be\nreset (with", "source": "meca500_programming_manual", "chunk_index": 2160, "length": 90, "hash": "2724d1e00fd82519cc535d902bca9963"}
{"id": "meca500_programming_manual_2161", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2161, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2162", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2162, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2163", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2163, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2164", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2164, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2165", "text": "Table 21 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2165, "length": 39, "hash": "e9c192236af5d508c6eb73392d48c093"}
{"id": "meca500_programming_manual_2166", "text": "Table 21 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2166, "length": 39, "hash": "e9c192236af5d508c6eb73392d48c093"}
{"id": "meca500_programming_manual_2167", "text": "MinorErrorResettable\n(Reserved)\nOperationMode\nResetReady", "source": "meca500_programming_manual", "chunk_index": 2167, "length": 56, "hash": "a027f1b40963843eb3269ddd783c5c44"}
{"id": "meca500_programming_manual_2168", "text": "MinorErrorResettable", "source": "meca500_programming_manual", "chunk_index": 2168, "length": 20, "hash": "5f2010c9bf7bd8aa7b795c77efdc4fdb"}
{"id": "meca500_programming_manual_2169", "text": "OperationMode\nResetReady", "source": "meca500_programming_manual", "chunk_index": 2169, "length": 24, "hash": "fdadca02101e9471bb56c17611ae2588"}
{"id": "meca500_programming_manual_2170", "text": "VMotorOn\n(Reserved)\nPsuInputs_Estop Bool\nPsuInputs_PStop1Bool\nPsuInputs_PStop2Bool\nPsuInputs_ResetExtBool\nBool\nPsuInputs_ResetKeypad\nBool\nPsuInputs_EnablingDevice\n(Reserved)", "source": "meca500_programming_manual", "chunk_index": 2170, "length": 173, "hash": "1f78b80498fa542eb5d3eea50edc6f4c"}
{"id": "meca500_programming_manual_2171", "text": "PsuInputs_ResetKeypad", "source": "meca500_programming_manual", "chunk_index": 2171, "length": 21, "hash": "7f69b2345d6e666cd3837ce8efd00792"}
{"id": "meca500_programming_manual_2172", "text": "PsuInputs_EnablingDevice", "source": "meca500_programming_manual", "chunk_index": 2172, "length": 24, "hash": "219586431b4c52ef28a4b093a4216007"}
{"id": "meca500_programming_manual_2173", "text": "133:3\n133:4\n136\n137:0", "source": "meca500_programming_manual", "chunk_index": 2173, "length": 21, "hash": "be7ccb7843ec7b959499fc0d7ab9a3fc"}
{"id": "meca500_programming_manual_2174", "text": "133:3\n133:4\n136\n137:0", "source": "meca500_programming_manual", "chunk_index": 2174, "length": 21, "hash": "be7ccb7843ec7b959499fc0d7ab9a3fc"}
{"id": "meca500_programming_manual_2175", "text": "137:1\n137:2\n138:0\n138:1\n138:2\n138:3\n138:4\n138:5\n138:6", "source": "meca500_programming_manual", "chunk_index": 2175, "length": 53, "hash": "037af13ff2f3c9798be021e21a4fed12"}
{"id": "meca500_programming_manual_2176", "text": "137:1\n137:2\n138:0\n138:1\n138:2\n138:3\n138:4\n138:5\n138:6", "source": "meca500_programming_manual", "chunk_index": 2176, "length": 53, "hash": "037af13ff2f3c9798be021e21a4fed12"}
{"id": "meca500_programming_manual_2177", "text": "1A11h:74\n1A11h:75\n1A11h:76\n1A11h:77\n1A11h:78\n1A11h:79", "source": "meca500_programming_manual", "chunk_index": 2177, "length": 53, "hash": "6d61cb479c428c9daafdf8f85401ee63"}
{"id": "meca500_programming_manual_2178", "text": "1A11h:74\n1A11h:75\n1A11h:76\n1A11h:77\n1A11h:78\n1A11h:79", "source": "meca500_programming_manual", "chunk_index": 2178, "length": 53, "hash": "6d61cb479c428c9daafdf8f85401ee63"}
{"id": "meca500_programming_manual_2179", "text": "Not supported on the Meca500\nReserved for future use.\nNot supported on the Meca500\n(Only on Meca500 R4) If no more safety signals\ncausing motor power to be removed are present, and\nthe robot is ready to be reset with the Reset button\nRobot motors powered or not\nReserved for future use\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nReserved for future use.", "source": "meca500_programming_manual", "chunk_index": 2179, "length": 484, "hash": "660b0d454a0cf1e146ebaf847a8c7ed5"}
{"id": "meca500_programming_manual_2180", "text": "Not supported on the Meca500\nReserved for future use.\nNot supported on the Meca500\n(Only on Meca500 R4) If no more safety signals\ncausing motor power to be removed are present, and\nthe robot is ready to be reset with the Reset button\nRobot motors powered or not\nReserved for future use\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nNot supported on the Meca500\nReserved for future use.", "source": "meca500_programming_manual", "chunk_index": 2180, "length": 484, "hash": "660b0d454a0cf1e146ebaf847a8c7ed5"}
{"id": "meca500_programming_manual_2181", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2181, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2182", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2182, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2183", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2183, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2184", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2184, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2185", "text": "\u2020 1 when safety signal is present or resettable, 0 when safety signal has been successfully\nreset", "source": "meca500_programming_manual", "chunk_index": 2185, "length": 97, "hash": "c239934dc8d379147d8d3dd50f10c3f2"}
{"id": "meca500_programming_manual_2186", "text": "1 when safety signal is present or resettable, 0 when safety signal has been successfully\nreset", "source": "meca500_programming_manual", "chunk_index": 2186, "length": 95, "hash": "83507c7b067e8f1cd49ec6914ea0c84a"}
{"id": "meca500_programming_manual_2187", "text": "The DynamicData section in the cyclic input reports additional robot information that is not\ncovered by other cyclic input fields.", "source": "meca500_programming_manual", "chunk_index": 2187, "length": 130, "hash": "1e456b0dbd5667ed230d90da5c5a4e52"}
{"id": "meca500_programming_manual_2188", "text": "section in the cyclic input reports additional robot information that is not\ncovered by other cyclic input fields.", "source": "meca500_programming_manual", "chunk_index": 2188, "length": 114, "hash": "c9949dcaa95e446ad12f5e12b9e4be59"}
{"id": "meca500_programming_manual_2189", "text": "The contents of each dynamic data slot are controlled by Table 11. Slots can be set to a specific\ndynamic data type (Table 12) or configured in Automatic mode, in which case the robot will\nautomatically cycle through all available dynamic data types, changing the reported data\nevery cycle.", "source": "meca500_programming_manual", "chunk_index": 2189, "length": 290, "hash": "259aeed976a76b4379918895a1bff2c8"}
{"id": "meca500_programming_manual_2190", "text": "The contents of each dynamic data slot are controlled by Table 11. Slots can be set to a specific\ndynamic data type (Table 12) or configured in", "source": "meca500_programming_manual", "chunk_index": 2190, "length": 143, "hash": "bb1b9879ac6826846d1dd225325f13c1"}
{"id": "meca500_programming_manual_2191", "text": "mode, in which case the robot will\nautomatically cycle through all available dynamic data types, changing the reported data\nevery cycle.", "source": "meca500_programming_manual", "chunk_index": 2191, "length": 136, "hash": "8da2f82be59196d84c0e4cfc54ac540f"}
{"id": "meca500_programming_manual_2192", "text": "Table 22: DynamicData0 (Offset 140, size 28, EtherCAT index 6070h)", "source": "meca500_programming_manual", "chunk_index": 2192, "length": 66, "hash": "10defe4d94218093a3d40b90749f5e2b"}
{"id": "meca500_programming_manual_2193", "text": "(Offset 140, size 28, EtherCAT index 6070h)", "source": "meca500_programming_manual", "chunk_index": 2193, "length": 43, "hash": "6abd0c9356ee123881d2db282cfd8ad2"}
{"id": "meca500_programming_manual_2194", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2194, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2195", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2195, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2196", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2196, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2197", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2197, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2198", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2198, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "meca500_programming_manual_2199", "text": "Value index 0 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2199, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "meca500_programming_manual_2200", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2200, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "meca500_programming_manual_2201", "text": "Value index 1 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2201, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "meca500_programming_manual_2202", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2202, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "meca500_programming_manual_2203", "text": "Value index 2 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2203, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "meca500_programming_manual_2204", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2204, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "meca500_programming_manual_2205", "text": "Value index 3 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2205, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "meca500_programming_manual_2206", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2206, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "meca500_programming_manual_2207", "text": "Value index 4 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2207, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "meca500_programming_manual_2208", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2208, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2209", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2209, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2210", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2210, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2211", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2211, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2212", "text": "Table 22 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2212, "length": 39, "hash": "3f0055aa96b432d7ae544f10a9078b01"}
{"id": "meca500_programming_manual_2213", "text": "Table 22 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2213, "length": 39, "hash": "3f0055aa96b432d7ae544f10a9078b01"}
{"id": "meca500_programming_manual_2214", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2214, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "meca500_programming_manual_2215", "text": "Value index 5 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2215, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "meca500_programming_manual_2216", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2216, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2217", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2217, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2218", "text": "Table 23: DynamicData1 (Offset 168, size 28, EtherCAT index 6071h)", "source": "meca500_programming_manual", "chunk_index": 2218, "length": 66, "hash": "9435c6944cfbb1ea8b4a515286111d21"}
{"id": "meca500_programming_manual_2219", "text": "(Offset 168, size 28, EtherCAT index 6071h)", "source": "meca500_programming_manual", "chunk_index": 2219, "length": 43, "hash": "55bc214b7a2e85fa98b62471fc12e881"}
{"id": "meca500_programming_manual_2220", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2220, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2221", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2221, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2222", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2222, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2223", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2223, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2224", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2224, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "meca500_programming_manual_2225", "text": "Value index 0 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2225, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "meca500_programming_manual_2226", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2226, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "meca500_programming_manual_2227", "text": "Value index 1 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2227, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "meca500_programming_manual_2228", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2228, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "meca500_programming_manual_2229", "text": "Value index 2 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2229, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "meca500_programming_manual_2230", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2230, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "meca500_programming_manual_2231", "text": "Value index 3 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2231, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "meca500_programming_manual_2232", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2232, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "meca500_programming_manual_2233", "text": "Value index 4 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2233, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "meca500_programming_manual_2234", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2234, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2235", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2235, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2236", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2236, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2237", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2237, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2238", "text": "Table 23 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2238, "length": 39, "hash": "0766d12014f41cb317b1452f04096261"}
{"id": "meca500_programming_manual_2239", "text": "Table 23 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2239, "length": 39, "hash": "0766d12014f41cb317b1452f04096261"}
{"id": "meca500_programming_manual_2240", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2240, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "meca500_programming_manual_2241", "text": "Value index 5 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2241, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "meca500_programming_manual_2242", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2242, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2243", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2243, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2244", "text": "Table 24: DynamicData2 (Offset 196, size 28, EtherCAT index 6072h)", "source": "meca500_programming_manual", "chunk_index": 2244, "length": 66, "hash": "08a8269e1f1c82045f2d17f54c40af7c"}
{"id": "meca500_programming_manual_2245", "text": "(Offset 196, size 28, EtherCAT index 6072h)", "source": "meca500_programming_manual", "chunk_index": 2245, "length": 43, "hash": "2a4e1d721a6d415829e82f04332212d1"}
{"id": "meca500_programming_manual_2246", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2246, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2247", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2247, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2248", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2248, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2249", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2249, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2250", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2250, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "meca500_programming_manual_2251", "text": "Value index 0 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2251, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "meca500_programming_manual_2252", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2252, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "meca500_programming_manual_2253", "text": "Value index 1 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2253, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "meca500_programming_manual_2254", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2254, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "meca500_programming_manual_2255", "text": "Value index 2 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2255, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "meca500_programming_manual_2256", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2256, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "meca500_programming_manual_2257", "text": "Value index 3 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2257, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "meca500_programming_manual_2258", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2258, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "meca500_programming_manual_2259", "text": "Value index 4 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2259, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "meca500_programming_manual_2260", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2260, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2261", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2261, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2262", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2262, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2263", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2263, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2264", "text": "Table 24 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2264, "length": 39, "hash": "09b1f06c0a5f0eb9852c1b4de27c856f"}
{"id": "meca500_programming_manual_2265", "text": "Table 24 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2265, "length": 39, "hash": "09b1f06c0a5f0eb9852c1b4de27c856f"}
{"id": "meca500_programming_manual_2266", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2266, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "meca500_programming_manual_2267", "text": "Value index 5 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2267, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "meca500_programming_manual_2268", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2268, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2269", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2269, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2270", "text": "Table 25: DynamicData3 (Offset 224, size 28, EtherCAT index 6073h)", "source": "meca500_programming_manual", "chunk_index": 2270, "length": 66, "hash": "2274ef041f89b8640047a5e88292879b"}
{"id": "meca500_programming_manual_2271", "text": "(Offset 224, size 28, EtherCAT index 6073h)", "source": "meca500_programming_manual", "chunk_index": 2271, "length": 43, "hash": "8f29e4d7d7f737848ff7eabf04f46af6"}
{"id": "meca500_programming_manual_2272", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2272, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2273", "text": "DynamicType\nValueIdx_0", "source": "meca500_programming_manual", "chunk_index": 2273, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "meca500_programming_manual_2274", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2274, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2275", "text": "Dynamic data type (see Table 12 for available values).", "source": "meca500_programming_manual", "chunk_index": 2275, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "meca500_programming_manual_2276", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2276, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "meca500_programming_manual_2277", "text": "Value index 0 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2277, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "meca500_programming_manual_2278", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2278, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "meca500_programming_manual_2279", "text": "Value index 1 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2279, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "meca500_programming_manual_2280", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2280, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "meca500_programming_manual_2281", "text": "Value index 2 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2281, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "meca500_programming_manual_2282", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2282, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "meca500_programming_manual_2283", "text": "Value index 3 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2283, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "meca500_programming_manual_2284", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2284, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "meca500_programming_manual_2285", "text": "Value index 4 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2285, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "meca500_programming_manual_2286", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2286, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2287", "text": "continues on next page", "source": "meca500_programming_manual", "chunk_index": 2287, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "meca500_programming_manual_2288", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2288, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2289", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2289, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2290", "text": "Table 25 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2290, "length": 39, "hash": "f10fa1278e1c14436485f9dd124744c6"}
{"id": "meca500_programming_manual_2291", "text": "Table 25 \u2013 continued from previous page", "source": "meca500_programming_manual", "chunk_index": 2291, "length": 39, "hash": "f10fa1278e1c14436485f9dd124744c6"}
{"id": "meca500_programming_manual_2292", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "meca500_programming_manual", "chunk_index": 2292, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "meca500_programming_manual_2293", "text": "Value index 5 (the meaning depends on the", "source": "meca500_programming_manual", "chunk_index": 2293, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "meca500_programming_manual_2294", "text": "M\nC\n-\nP\nM\nM\nE\nC\nA\n5\n0\n0\n,", "source": "meca500_programming_manual", "chunk_index": 2294, "length": 25, "hash": "b198bb0c8f57aa79c29755e8455d7d53"}
{"id": "meca500_programming_manual_2295", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "meca500_programming_manual", "chunk_index": 2295, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "meca500_programming_manual_2296", "text": "EtherCAT communication", "source": "meca500_programming_manual", "chunk_index": 2296, "length": 22, "hash": "73d027205aa7930499a3b3cc596dceb2"}
{"id": "meca500_programming_manual_2297", "text": "EtherCAT communication", "source": "meca500_programming_manual", "chunk_index": 2297, "length": 22, "hash": "73d027205aa7930499a3b3cc596dceb2"}
{"id": "meca500_programming_manual_2298", "text": "EtherCAT is an open real-time Ethernet protocol originally developed by Beckhoff Automation.\nWhen communicating with a Mecademic robot over EtherCAT, you can achieve guaranteed\nresponse times of 1 ms. Furthermore, you no longer need to parse strings as you do with the\nTCP/IP protocol.", "source": "meca500_programming_manual", "chunk_index": 2298, "length": 285, "hash": "672d07d8c3f3f32f76113acf7add84f0"}
{"id": "meca500_programming_manual_2299", "text": "EtherCAT is an open real-time Ethernet protocol originally developed by Beckhoff Automation.\nWhen communicating with a Mecademic robot over EtherCAT, you can achieve guaranteed\nresponse times of 1 ms. Furthermore, you no longer need to parse strings as you do with the\nTCP/IP protocol.", "source": "meca500_programming_manual", "chunk_index": 2299, "length": 285, "hash": "672d07d8c3f3f32f76113acf7add84f0"}
{"id": "meca500_programming_manual_2300", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2300, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2301", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2301, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2302", "text": "With EtherCAT, you can connect several Mecademic robots in various network topologies,\nincluding line, star, tree, or ring, as each robot has a unique node address. This allows\ntargeted access to a specific robot, even if your network topology changes.", "source": "meca500_programming_manual", "chunk_index": 2302, "length": 252, "hash": "dd6367761b586d24cd2baa2ccb5efe12"}
{"id": "meca500_programming_manual_2303", "text": "With EtherCAT, you can connect several Mecademic robots in various network topologies,\nincluding line, star, tree, or ring, as each robot has a unique node address. This allows\ntargeted access to a specific robot, even if your network topology changes.", "source": "meca500_programming_manual", "chunk_index": 2303, "length": 252, "hash": "dd6367761b586d24cd2baa2ccb5efe12"}
{"id": "meca500_programming_manual_2304", "text": "Each EtherCAT slave device is described by an EtherCAT Slave Information (ESI) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherCAT controllers (PLC) use\nthis file to properly identify detected EtherCAT slave devices, such as a Mecademic robot.", "source": "meca500_programming_manual", "chunk_index": 2304, "length": 272, "hash": "6d5ce0258bc131bf2f74d52cacbef482"}
{"id": "meca500_programming_manual_2305", "text": "Each EtherCAT slave device is described by an EtherCAT Slave Information (ESI) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherCAT controllers (PLC) use\nthis file to properly identify detected EtherCAT slave devices, such as a Mecademic robot.", "source": "meca500_programming_manual", "chunk_index": 2305, "length": 272, "hash": "6d5ce0258bc131bf2f74d52cacbef482"}
{"id": "meca500_programming_manual_2306", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package\n(Meca500_EtherCAT_ESI_vX.X.X.X.xml) .", "source": "meca500_programming_manual", "chunk_index": 2306, "length": 120, "hash": "ef1ce904f586ce0cd93250b4d90a0d7b"}
{"id": "meca500_programming_manual_2307", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "meca500_programming_manual", "chunk_index": 2307, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "meca500_programming_manual_2308", "text": "(Meca500_EtherCAT_ESI_vX.X.X.X.xml) .", "source": "meca500_programming_manual", "chunk_index": 2308, "length": 37, "hash": "e2f43bdc5c80f7598e07dec51e3c2c26"}
{"id": "meca500_programming_manual_2309", "text": "The default communication protocol of the robot is the Ethernet TCP/IP protocol. This\nprotocol is required for jogging the robot through its web interface.", "source": "meca500_programming_manual", "chunk_index": 2309, "length": 155, "hash": "98164d229bb52247889e0d001ea570de"}
{"id": "meca500_programming_manual_2310", "text": "The default communication protocol of the robot is the Ethernet TCP/IP protocol. This\nprotocol is required for jogging the robot through its web interface.", "source": "meca500_programming_manual", "chunk_index": 2310, "length": 155, "hash": "98164d229bb52247889e0d001ea570de"}
{"id": "meca500_programming_manual_2311", "text": "To switch to EtherCAT, use the Network configuration panel in the MecaPortal configuration\nmenu.", "source": "meca500_programming_manual", "chunk_index": 2311, "length": 96, "hash": "31fbf38f35c5b1f0728bc69460e6ea17"}
{"id": "meca500_programming_manual_2312", "text": "To switch to EtherCAT, use the Network configuration panel in the MecaPortal configuration\nmenu.", "source": "meca500_programming_manual", "chunk_index": 2312, "length": 96, "hash": "31fbf38f35c5b1f0728bc69460e6ea17"}
{"id": "meca500_programming_manual_2313", "text": "Alternatively, you can use the SwitchToEtherCAT (page 220) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the TCP/IP API (page 29).", "source": "meca500_programming_manual", "chunk_index": 2313, "length": 169, "hash": "d2c98142764dfa4bff7bcf7b56a23354"}
{"id": "meca500_programming_manual_2314", "text": "Alternatively, you can use the", "source": "meca500_programming_manual", "chunk_index": 2314, "length": 30, "hash": "1830f37443a4f1c50e7e68a474a82af8"}
{"id": "meca500_programming_manual_2315", "text": "(page 220) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the", "source": "meca500_programming_manual", "chunk_index": 2315, "length": 99, "hash": "b17b19c798180f5b500fc37e56dca59b"}
{"id": "meca500_programming_manual_2316", "text": "This command is persistent. The robot will remain in EtherCAT mode even after being\nrebooted.", "source": "meca500_programming_manual", "chunk_index": 2316, "length": 93, "hash": "1d5831657412628a1e6d1281c0e8bac2"}
{"id": "meca500_programming_manual_2317", "text": "This command is persistent. The robot will remain in EtherCAT mode even after being\nrebooted.", "source": "meca500_programming_manual", "chunk_index": 2317, "length": 93, "hash": "1d5831657412628a1e6d1281c0e8bac2"}
{"id": "meca500_programming_manual_2318", "text": "When the robot is in EtherCAT mode, TCP/IP or EtherNet/IP communication is not possible\n(e.g., you cannot use the robot\u2019s web interface or other cyclic protocols).", "source": "meca500_programming_manual", "chunk_index": 2318, "length": 163, "hash": "2c096aa8508c7c46a208c29047022db3"}
{"id": "meca500_programming_manual_2319", "text": "When the robot is in EtherCAT mode, TCP/IP or EtherNet/IP communication is not possible", "source": "meca500_programming_manual", "chunk_index": 2319, "length": 87, "hash": "9478f909c5cb4fd2b41ffe60fd24b00f"}
{"id": "meca500_programming_manual_2320", "text": "(e.g., you cannot use the robot\u2019s web interface or other cyclic protocols).", "source": "meca500_programming_manual", "chunk_index": 2320, "length": 75, "hash": "660d82df7d0aa8f33c1bfd9133fdd165"}
{"id": "meca500_programming_manual_2321", "text": "To disable EtherCAT (and restore standard TCP/IP communication mode), use the\nRobotControl PDO (see Table 4) or perform a network-configuration-reset.", "source": "meca500_programming_manual", "chunk_index": 2321, "length": 150, "hash": "55183f07fe189df7c4cdde5d64e7fb6c"}
{"id": "meca500_programming_manual_2322", "text": "To disable EtherCAT (and restore standard TCP/IP communication mode), use the", "source": "meca500_programming_manual", "chunk_index": 2322, "length": 77, "hash": "5b34a32f2bb105b6f8ee944532ec43da"}
{"id": "meca500_programming_manual_2323", "text": "PDO (see Table 4) or perform a network-configuration-reset.", "source": "meca500_programming_manual", "chunk_index": 2323, "length": 59, "hash": "46e3bdd221f86bd826a8b6ea92ac3c4d"}
{"id": "meca500_programming_manual_2324", "text": "Your robot has three green LEDs on its base, labeled Link/Act IN, Link/Act OUT, and Run.\nWhen EtherCAT communication is enabled, these three LEDs indicate the state of the\nEtherCAT connection, as summarized in Table 26.", "source": "meca500_programming_manual", "chunk_index": 2324, "length": 219, "hash": "bc62e7bd6ba674d44e477ea753e23563"}
{"id": "meca500_programming_manual_2325", "text": "Your robot has three green LEDs on its base, labeled Link/Act IN, Link/Act OUT, and Run.\nWhen EtherCAT communication is enabled, these three LEDs indicate the state of the\nEtherCAT connection, as summarized in Table 26.", "source": "meca500_programming_manual", "chunk_index": 2325, "length": 219, "hash": "bc62e7bd6ba674d44e477ea753e23563"}
{"id": "meca500_programming_manual_2326", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2326, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2327", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2327, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2328", "text": "Table 26: EtherCAT LED description", "source": "meca500_programming_manual", "chunk_index": 2328, "length": 34, "hash": "609287a667f51b8bfcd216f3d4bfe506"}
{"id": "meca500_programming_manual_2329", "text": "Table 26: EtherCAT LED description", "source": "meca500_programming_manual", "chunk_index": 2329, "length": 34, "hash": "609287a667f51b8bfcd216f3d4bfe506"}
{"id": "meca500_programming_manual_2330", "text": "Blinking\nOff\nOn\nBlinking\nSingle flash\nFlashing\nOff", "source": "meca500_programming_manual", "chunk_index": 2330, "length": 50, "hash": "7d044c5e7339bba4f499f32fabf86d77"}
{"id": "meca500_programming_manual_2331", "text": "Blinking\nOff\nOn\nBlinking\nSingle flash", "source": "meca500_programming_manual", "chunk_index": 2331, "length": 37, "hash": "7f0ec1e30eae471ebf31fad2e09a8ccb"}
{"id": "meca500_programming_manual_2332", "text": "Link is active but\nactivity\nLink is active and there is activity\nLink is inactive\nLink is active but\nactivity\nLink is active and there is activity\nLink is inactive\nOperational\nPre-Operational\nSafe-Operational\nInitialization or Bootstrap\nInit", "source": "meca500_programming_manual", "chunk_index": 2332, "length": 241, "hash": "0b05410a822dce0bd9b9fb8d93f9f8e8"}
{"id": "meca500_programming_manual_2333", "text": "Link is active but\nactivity\nLink is active and there is activity\nLink is inactive\nLink is active but\nactivity\nLink is active and there is activity\nLink is inactive\nOperational\nPre-Operational\nSafe-Operational", "source": "meca500_programming_manual", "chunk_index": 2333, "length": 208, "hash": "b7a72d244208234a2558ad3b03fa632f"}
{"id": "meca500_programming_manual_2334", "text": "Initialization or Bootstrap\nInit", "source": "meca500_programming_manual", "chunk_index": 2334, "length": 32, "hash": "0ec0267bdbc21deeb15bea8b449ba1ec"}
{"id": "meca500_programming_manual_2335", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2335, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2336", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2336, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2337", "text": "The process data objects (PDOs) provide the interface to the application objects. PDOs are\nused to transfer data via cyclic communications in real time. PDOs can be reception PDOs\n(RxPDOs), which receive data from the EtherCAT master (the PLC or the industrial PC), or\ntransmission PDOs (TxPDOs), which send the current value from the slave (the Mecademic\nrobot) to the EtherCAT master. In the previous subsection, we listed the PDOs in the object\ndictionary. PDO assignment is summarized in the next two tables.", "source": "meca500_programming_manual", "chunk_index": 2337, "length": 512, "hash": "8de864837818b012fb437bcc6b0a4c87"}
{"id": "meca500_programming_manual_2338", "text": "The process data objects (PDOs) provide the interface to the application objects. PDOs are\nused to transfer data via cyclic communications in real time. PDOs can be reception PDOs\n(RxPDOs), which receive data from the EtherCAT master (the PLC or the industrial PC), or\ntransmission PDOs (TxPDOs), which send the current value from the slave (the Mecademic\nrobot) to the EtherCAT master. In the previous subsection, we listed the PDOs in the object\ndictionary. PDO assignment is summarized in the next two tables.", "source": "meca500_programming_manual", "chunk_index": 2338, "length": 512, "hash": "8de864837818b012fb437bcc6b0a4c87"}
{"id": "meca500_programming_manual_2339", "text": "RobotControl\nMotionControl", "source": "meca500_programming_manual", "chunk_index": 2339, "length": 26, "hash": "63579e8736764bf504f83f0878b7576d"}
{"id": "meca500_programming_manual_2340", "text": "RobotControl\nMotionControl", "source": "meca500_programming_manual", "chunk_index": 2340, "length": 26, "hash": "63579e8736764bf504f83f0878b7576d"}
{"id": "meca500_programming_manual_2341", "text": "Mandatory. See Table 4.\n1600h 7200h\nMandatory. See Table 5.\n1601h 7310h\nMandatory. See Table 6.\n1602h 7305h, 7306h Movement\nMandatory. See Table 9.\nHostTime\n1610h 7400h\nBrakesControl\n1611h 7410h\nMandatory. See Table 10.\nDynamicDataConfiguration 1 Mandatory. See Table 11.\n1620h 7420h\nDynamicDataConfiguration 2 Mandatory. See Table 11.\n1621h 7421h\nDynamicDataConfiguration 3 Mandatory. See Table 11.\n1622h 7422h\nDynamicDataConfiguration 4 Mandatory. See Table 11.\n1623h 7423h", "source": "meca500_programming_manual", "chunk_index": 2341, "length": 475, "hash": "a468c52f148a3df7594c61fae65f431a"}
{"id": "meca500_programming_manual_2342", "text": "Mandatory. See Table 4.\n1600h 7200h\nMandatory. See Table 5.\n1601h 7310h\nMandatory. See Table 6.\n1602h 7305h, 7306h Movement", "source": "meca500_programming_manual", "chunk_index": 2342, "length": 123, "hash": "46564708a53cb5b96e18835632de290f"}
{"id": "meca500_programming_manual_2343", "text": "Mandatory. See Table 9.\nHostTime\n1610h 7400h\nBrakesControl\n1611h 7410h\nMandatory. See Table 10.\nDynamicDataConfiguration 1 Mandatory. See Table 11.\n1620h 7420h\nDynamicDataConfiguration 2 Mandatory. See Table 11.\n1621h 7421h\nDynamicDataConfiguration 3 Mandatory. See Table 11.\n1622h 7422h\nDynamicDataConfiguration 4 Mandatory. See Table 11.\n1623h 7423h", "source": "meca500_programming_manual", "chunk_index": 2343, "length": 351, "hash": "ce263e3d29612fd27f31e101d856b9b5"}
{"id": "meca500_programming_manual_2344", "text": "1A00h 6010h RobotStatus\nMandatory. See Table 13.\n1A01h 6015h MotionStatus\nMandatory. See Table 14.\nMandatory. See Table 15.\n1A02h 6030h TargetJointSet\n1A03h 6031h TargetEndEffectorPose Mandatory. See Table 16.\nMandatory. See Table 17.\n1A08h 6046h TargetConfiguration\nMandatory. See Table 18.\n1A09h 6050h WRF\nMandatory. See Table 19.\n1A0Ah 6051h TRF\nMandatory. See Table 20.\n1A10h 6060h RobotTimestamp\nMandatory. See Table 21.\n1A11h 6065h SafetyStatus\nMandatory. See Table 22.\n1A20h 6070h DynamicData index 0\nMandatory. See Table 23.\n1A21h 6071h DynamicData index 1\nMandatory. See Table 24.\n1A22h 6072h DynamicData index 2\nMandatory. See Table 25.\n1A23h 6073h DynamicData index 3", "source": "meca500_programming_manual", "chunk_index": 2344, "length": 678, "hash": "3d984ad5d53d4a483196f9881b655b92"}
{"id": "meca500_programming_manual_2345", "text": "1A00h 6010h RobotStatus\nMandatory. See Table 13.\n1A01h 6015h MotionStatus\nMandatory. See Table 14.\nMandatory. See Table 15.\n1A02h 6030h TargetJointSet\n1A03h 6031h TargetEndEffectorPose Mandatory. See Table 16.\nMandatory. See Table 17.\n1A08h 6046h TargetConfiguration\nMandatory. See Table 18.\n1A09h 6050h WRF", "source": "meca500_programming_manual", "chunk_index": 2345, "length": 307, "hash": "6962f9550fbbe5a1322723db415eb078"}
{"id": "meca500_programming_manual_2346", "text": "Mandatory. See Table 19.\n1A0Ah 6051h TRF\nMandatory. See Table 20.\n1A10h 6060h RobotTimestamp\nMandatory. See Table 21.\n1A11h 6065h SafetyStatus\nMandatory. See Table 22.\n1A20h 6070h DynamicData index 0\nMandatory. See Table 23.\n1A21h 6071h DynamicData index 1\nMandatory. See Table 24.\n1A22h 6072h DynamicData index 2\nMandatory. See Table 25.\n1A23h 6073h DynamicData index 3", "source": "meca500_programming_manual", "chunk_index": 2346, "length": 370, "hash": "7a2ff418f8f9615fbadc906a890799ae"}
{"id": "meca500_programming_manual_2347", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2347, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2348", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2348, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2349", "text": "Using the PDO data to control and monitor Mecademic robots with EtherCAT is explained in\nSection 5 of this manual.", "source": "meca500_programming_manual", "chunk_index": 2349, "length": 114, "hash": "508894db5804e3e6bb6a4450b06dd1ef"}
{"id": "meca500_programming_manual_2350", "text": "Using the PDO data to control and monitor Mecademic robots with EtherCAT is explained in\nSection 5 of this manual.", "source": "meca500_programming_manual", "chunk_index": 2350, "length": 114, "hash": "508894db5804e3e6bb6a4450b06dd1ef"}
{"id": "meca500_programming_manual_2351", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "meca500_programming_manual", "chunk_index": 2351, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "meca500_programming_manual_2352", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "meca500_programming_manual", "chunk_index": 2352, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "meca500_programming_manual_2353", "text": "Please refer to the robot\u2019s ESI file (page 110) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 2353, "length": 162, "hash": "dee5a3d722d92ddd23bb17c303ff3453"}
{"id": "meca500_programming_manual_2354", "text": "Please refer to the robot\u2019s", "source": "meca500_programming_manual", "chunk_index": 2354, "length": 27, "hash": "52b21299adf016c5aea4dbeeeb0288b4"}
{"id": "meca500_programming_manual_2355", "text": "(page 110) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 2355, "length": 125, "hash": "a5859eb4a5e27d0f579e432ba1c18932"}
{"id": "meca500_programming_manual_2356", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "meca500_programming_manual", "chunk_index": 2356, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "meca500_programming_manual_2357", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "meca500_programming_manual", "chunk_index": 2357, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "meca500_programming_manual_2358", "text": "EtherNet/IP communication", "source": "meca500_programming_manual", "chunk_index": 2358, "length": 25, "hash": "b1478d92e84bb7928b156a779fe78b6b"}
{"id": "meca500_programming_manual_2359", "text": "EtherNet/IP communication", "source": "meca500_programming_manual", "chunk_index": 2359, "length": 25, "hash": "b1478d92e84bb7928b156a779fe78b6b"}
{"id": "meca500_programming_manual_2360", "text": "Mecademic robots are compatible with the EtherNet/IP protocol. The Meca500 is certified\nby ODVA. A common industry standard, EtherNet/IP can be used with many different PLC\nbrands. Tested to work at 10 ms, faster response times are also possible. Our robots typically\nuse implicit (cyclic) messaging.", "source": "meca500_programming_manual", "chunk_index": 2360, "length": 300, "hash": "d347dcaff93e9f2a5489723253c52431"}
{"id": "meca500_programming_manual_2361", "text": "Mecademic robots are compatible with the EtherNet/IP protocol. The Meca500 is certified\nby ODVA. A common industry standard, EtherNet/IP can be used with many different PLC\nbrands. Tested to work at 10 ms, faster response times are also possible. Our robots typically\nuse implicit (cyclic) messaging.", "source": "meca500_programming_manual", "chunk_index": 2361, "length": 300, "hash": "d347dcaff93e9f2a5489723253c52431"}
{"id": "meca500_programming_manual_2362", "text": "Refer to our Support Center for specific PLC examples.", "source": "meca500_programming_manual", "chunk_index": 2362, "length": 54, "hash": "8658a8522a1a7b4d0c2da0e17d0a4e80"}
{"id": "meca500_programming_manual_2363", "text": "Refer to our Support Center for specific PLC examples.", "source": "meca500_programming_manual", "chunk_index": 2363, "length": 54, "hash": "8658a8522a1a7b4d0c2da0e17d0a4e80"}
{"id": "meca500_programming_manual_2364", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2364, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2365", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2365, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2366", "text": "When using EtherNet/IP, you can connect several Mecademic robots in the same way as with\nTCP/IP. Either Ethernet port on the robot can be used. The robots can either be daisy-chained\ntogether or connected in a star pattern. The two ports on the Mecademic robot act as a switch\nin EtherNet/IP mode.", "source": "meca500_programming_manual", "chunk_index": 2366, "length": 297, "hash": "424f62160c3a4940a47736bb9f9dc3d1"}
{"id": "meca500_programming_manual_2367", "text": "When using EtherNet/IP, you can connect several Mecademic robots in the same way as with\nTCP/IP. Either Ethernet port on the robot can be used. The robots can either be daisy-chained\ntogether or connected in a star pattern. The two ports on the Mecademic robot act as a switch\nin EtherNet/IP mode.", "source": "meca500_programming_manual", "chunk_index": 2367, "length": 297, "hash": "424f62160c3a4940a47736bb9f9dc3d1"}
{"id": "meca500_programming_manual_2368", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2368, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2369", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2369, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2370", "text": "Each EtherNet/IP slave device is described by an Electronic Data Sheet (EDS) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherNet/IP controllers (PLC)\nuse this file to properly identify detected EtherNet/IP slave devices, such as a Mecademic\nrobot.", "source": "meca500_programming_manual", "chunk_index": 2370, "length": 276, "hash": "f6b21121ce9486de44a6a9031e8449c1"}
{"id": "meca500_programming_manual_2371", "text": "Each EtherNet/IP slave device is described by an Electronic Data Sheet (EDS) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherNet/IP controllers (PLC)\nuse this file to properly identify detected EtherNet/IP slave devices, such as a Mecademic\nrobot.", "source": "meca500_programming_manual", "chunk_index": 2371, "length": 276, "hash": "f6b21121ce9486de44a6a9031e8449c1"}
{"id": "meca500_programming_manual_2372", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package\n(Meca500_vX.X.X.X.eds) .", "source": "meca500_programming_manual", "chunk_index": 2372, "length": 107, "hash": "3c2800e9cce0313ae9c4c69790628ac7"}
{"id": "meca500_programming_manual_2373", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package\n(Meca500_vX.X.X.X.eds) .", "source": "meca500_programming_manual", "chunk_index": 2373, "length": 107, "hash": "3c2800e9cce0313ae9c4c69790628ac7"}
{"id": "meca500_programming_manual_2374", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2374, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2375", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2375, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2376", "text": "Forward open exclusivity", "source": "meca500_programming_manual", "chunk_index": 2376, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "meca500_programming_manual_2377", "text": "Forward open exclusivity", "source": "meca500_programming_manual", "chunk_index": 2377, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "meca500_programming_manual_2378", "text": "A Mecademic robot allows only one controlling connection at a time (either a TCP/IP\nconnection or through an EtherNet/IP forward-open request).", "source": "meca500_programming_manual", "chunk_index": 2378, "length": 143, "hash": "a9b76cb76dc3f6ae52c5c9cc14b5ebcc"}
{"id": "meca500_programming_manual_2379", "text": "A Mecademic robot allows only one controlling connection at a time (either a TCP/IP\nconnection or through an EtherNet/IP forward-open request).", "source": "meca500_programming_manual", "chunk_index": 2379, "length": 143, "hash": "a9b76cb76dc3f6ae52c5c9cc14b5ebcc"}
{"id": "meca500_programming_manual_2380", "text": "If the robot is already being controlled, it will refuse a forward-open request with status\nerror 0x106, Ownership Conflict, in EtherNet/IP. It will refuse a TCP/IP connection with error\n[3001]. However, the web interface can still be used in monitoring mode.", "source": "meca500_programming_manual", "chunk_index": 2380, "length": 259, "hash": "c07df4f30ba528425e27cfb4c353fe8c"}
{"id": "meca500_programming_manual_2381", "text": "If the robot is already being controlled, it will refuse a forward-open request with status\nerror 0x106, Ownership Conflict, in EtherNet/IP. It will refuse a TCP/IP connection with error\n[3001]. However, the web interface can still be used in monitoring mode.", "source": "meca500_programming_manual", "chunk_index": 2381, "length": 259, "hash": "c07df4f30ba528425e27cfb4c353fe8c"}
{"id": "meca500_programming_manual_2382", "text": "Forward open exclusivity", "source": "meca500_programming_manual", "chunk_index": 2382, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "meca500_programming_manual_2383", "text": "Forward open exclusivity", "source": "meca500_programming_manual", "chunk_index": 2383, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "meca500_programming_manual_2384", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2384, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2385", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2385, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2386", "text": "Enabling Ethernet/IP", "source": "meca500_programming_manual", "chunk_index": 2386, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "meca500_programming_manual_2387", "text": "Enabling Ethernet/IP", "source": "meca500_programming_manual", "chunk_index": 2387, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "meca500_programming_manual_2388", "text": "The Ethernet/IP protocol can be enabled using the Network configuration panel in the\nMecaPortal configuration menu.", "source": "meca500_programming_manual", "chunk_index": 2388, "length": 115, "hash": "0550b93e975201a7f7bcdd957ac29ed1"}
{"id": "meca500_programming_manual_2389", "text": "The Ethernet/IP protocol can be enabled using the", "source": "meca500_programming_manual", "chunk_index": 2389, "length": 49, "hash": "1fddafeb1fa9b6887030742400f9eeaf"}
{"id": "meca500_programming_manual_2390", "text": "Network configuration", "source": "meca500_programming_manual", "chunk_index": 2390, "length": 21, "hash": "5dd57c2a315d3af44c2eb40eefc47111"}
{"id": "meca500_programming_manual_2391", "text": "panel in the\nMecaPortal configuration menu.", "source": "meca500_programming_manual", "chunk_index": 2391, "length": 43, "hash": "02c4797d0fcd577920030375f0f51ea5"}
{"id": "meca500_programming_manual_2392", "text": "Alternatively, you can use the EnableEtherNetIp() (page 190) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the TCP/IP API (page 29).", "source": "meca500_programming_manual", "chunk_index": 2392, "length": 171, "hash": "f3859595091f6d7a93af57f94a6e7dd9"}
{"id": "meca500_programming_manual_2393", "text": "Alternatively, you can use the", "source": "meca500_programming_manual", "chunk_index": 2393, "length": 30, "hash": "1830f37443a4f1c50e7e68a474a82af8"}
{"id": "meca500_programming_manual_2394", "text": "(page 190) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the", "source": "meca500_programming_manual", "chunk_index": 2394, "length": 99, "hash": "12d80270012e59f67b488d6be79af3a2"}
{"id": "meca500_programming_manual_2395", "text": "This is a persistent configuration and only needs to be set once.", "source": "meca500_programming_manual", "chunk_index": 2395, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "meca500_programming_manual_2396", "text": "This is a persistent configuration and only needs to be set once.", "source": "meca500_programming_manual", "chunk_index": 2396, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "meca500_programming_manual_2397", "text": "Note that Ethernet/IP can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the SwitchToEtherCAT (page 220) command.", "source": "meca500_programming_manual", "chunk_index": 2397, "length": 176, "hash": "8dbb23831a7bae8b7e2a4e388c0c8aa7"}
{"id": "meca500_programming_manual_2398", "text": "Note that Ethernet/IP can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the", "source": "meca500_programming_manual", "chunk_index": 2398, "length": 139, "hash": "a20e95b0e0b3fca71f80a54e381113b5"}
{"id": "meca500_programming_manual_2399", "text": "Enabling Ethernet/IP", "source": "meca500_programming_manual", "chunk_index": 2399, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "meca500_programming_manual_2400", "text": "Enabling Ethernet/IP", "source": "meca500_programming_manual", "chunk_index": 2400, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "meca500_programming_manual_2401", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2401, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2402", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2402, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2403", "text": "Using cyclic data to control and monitor Mecademic robots with Ethernet/IP is explained in\nSection 5 of this manual.", "source": "meca500_programming_manual", "chunk_index": 2403, "length": 116, "hash": "029467195209de80682a2f03055f40b3"}
{"id": "meca500_programming_manual_2404", "text": "Using cyclic data to control and monitor Mecademic robots with Ethernet/IP is explained in\nSection 5 of this manual.", "source": "meca500_programming_manual", "chunk_index": 2404, "length": 116, "hash": "029467195209de80682a2f03055f40b3"}
{"id": "meca500_programming_manual_2405", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "meca500_programming_manual", "chunk_index": 2405, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "meca500_programming_manual_2406", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "meca500_programming_manual", "chunk_index": 2406, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "meca500_programming_manual_2407", "text": "Please refer to the robot\u2019s EDS file (page 116) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 2407, "length": 162, "hash": "aa39d46fc6794ef6ede2f16c9fcc41e2"}
{"id": "meca500_programming_manual_2408", "text": "Please refer to the robot\u2019s", "source": "meca500_programming_manual", "chunk_index": 2408, "length": 27, "hash": "52b21299adf016c5aea4dbeeeb0288b4"}
{"id": "meca500_programming_manual_2409", "text": "(page 116) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 2409, "length": 125, "hash": "d26a9408cfa96a369c1437cd12eb9dd2"}
{"id": "meca500_programming_manual_2410", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "meca500_programming_manual", "chunk_index": 2410, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "meca500_programming_manual_2411", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "meca500_programming_manual", "chunk_index": 2411, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "meca500_programming_manual_2412", "text": "PROFINET communication", "source": "meca500_programming_manual", "chunk_index": 2412, "length": 22, "hash": "9e93f5175238ae043cc3674271282f01"}
{"id": "meca500_programming_manual_2413", "text": "PROFINET communication", "source": "meca500_programming_manual", "chunk_index": 2413, "length": 22, "hash": "9e93f5175238ae043cc3674271282f01"}
{"id": "meca500_programming_manual_2414", "text": "Mecademic robots are compatible with the PROFINET protocol, a common industry\nstandard that can be used with many different PLC brands. The Meca500 is certified\nby PROFIBUS. Cyclic times up to 1 ms (though not as \u201chard-real-time\u201d as EtherCAT) are\npossible. PROFINET\u2014like EtherCAT or EtherNet/IP protocols\u2014controls the robot using\ncyclic messaging (\u2018CR Input\u2019 and \u2018CR Output\u2019 in PROFINET terms).", "source": "meca500_programming_manual", "chunk_index": 2414, "length": 394, "hash": "bb3e4ad740f0ce46dd676b7e7aa06753"}
{"id": "meca500_programming_manual_2415", "text": "Mecademic robots are compatible with the PROFINET protocol, a common industry\nstandard that can be used with many different PLC brands. The Meca500 is certified\nby PROFIBUS. Cyclic times up to 1 ms (though not as \u201chard-real-time\u201d as EtherCAT) are\npossible. PROFINET\u2014like EtherCAT or EtherNet/IP protocols\u2014controls the robot using\ncyclic messaging (\u2018CR Input\u2019 and \u2018CR Output\u2019 in PROFINET terms).", "source": "meca500_programming_manual", "chunk_index": 2415, "length": 394, "hash": "bb3e4ad740f0ce46dd676b7e7aa06753"}
{"id": "meca500_programming_manual_2416", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2416, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2417", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2417, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2418", "text": "PROFINET conformance class", "source": "meca500_programming_manual", "chunk_index": 2418, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "meca500_programming_manual_2419", "text": "PROFINET conformance class", "source": "meca500_programming_manual", "chunk_index": 2419, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "meca500_programming_manual_2420", "text": "The Mecademic robots PROFINET stack conforms to class-A, as described in the GSDML file\n(page 125).", "source": "meca500_programming_manual", "chunk_index": 2420, "length": 99, "hash": "865c2d53534083bdebf8cf4afae74e5e"}
{"id": "meca500_programming_manual_2421", "text": "The Mecademic robots PROFINET stack conforms to class-A, as described in the", "source": "meca500_programming_manual", "chunk_index": 2421, "length": 76, "hash": "06d68b10ddfc91c63573f53335f9cd92"}
{"id": "meca500_programming_manual_2422", "text": "PROFINET limitations on Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 2422, "length": 40, "hash": "3f3bb7d1baf9e4b73c7eb28024c8a643"}
{"id": "meca500_programming_manual_2423", "text": "PROFINET limitations on Mecademic robots", "source": "meca500_programming_manual", "chunk_index": 2423, "length": 40, "hash": "3f3bb7d1baf9e4b73c7eb28024c8a643"}
{"id": "meca500_programming_manual_2424", "text": "Mecademic robots do not support the following PROFINET features:", "source": "meca500_programming_manual", "chunk_index": 2424, "length": 64, "hash": "aa84e54a1ab13ab3279a17f36ab6f26d"}
{"id": "meca500_programming_manual_2425", "text": "Mecademic robots do not support the following PROFINET features:", "source": "meca500_programming_manual", "chunk_index": 2425, "length": 64, "hash": "aa84e54a1ab13ab3279a17f36ab6f26d"}
{"id": "meca500_programming_manual_2426", "text": "\u2022 Startup mode: legacy startup mode (only advanced startup mode is supported).", "source": "meca500_programming_manual", "chunk_index": 2426, "length": 78, "hash": "ce93859ed0a40fa8aee3527a042dfbc4"}
{"id": "meca500_programming_manual_2427", "text": "\u2022 Startup mode: legacy startup mode (only advanced startup mode is supported).", "source": "meca500_programming_manual", "chunk_index": 2427, "length": 78, "hash": "ce93859ed0a40fa8aee3527a042dfbc4"}
{"id": "meca500_programming_manual_2428", "text": "\u2022 SNMP: part of PROFINET conformance class B (the robot supports class A only).", "source": "meca500_programming_manual", "chunk_index": 2428, "length": 79, "hash": "c5d4ee1a92b3510e6837c87307af66cf"}
{"id": "meca500_programming_manual_2429", "text": "\u2022 SNMP: part of PROFINET conformance class B (the robot supports class A only).", "source": "meca500_programming_manual", "chunk_index": 2429, "length": 79, "hash": "c5d4ee1a92b3510e6837c87307af66cf"}
{"id": "meca500_programming_manual_2430", "text": "\u2022 DHCP: the robot does not support selecting DHCP mode via the PROFINET protocol.\nNote that configuring the robot to use DHCP mode remains possible through the\nMecaPortal.", "source": "meca500_programming_manual", "chunk_index": 2430, "length": 171, "hash": "10f8c48d019cf9d73575dc60d5210938"}
{"id": "meca500_programming_manual_2431", "text": "\u2022 DHCP: the robot does not support selecting DHCP mode via the PROFINET protocol.\nNote that configuring the robot to use DHCP mode remains possible through the\nMecaPortal.", "source": "meca500_programming_manual", "chunk_index": 2431, "length": 171, "hash": "10f8c48d019cf9d73575dc60d5210938"}
{"id": "meca500_programming_manual_2432", "text": "PROFINET conformance class", "source": "meca500_programming_manual", "chunk_index": 2432, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "meca500_programming_manual_2433", "text": "PROFINET conformance class", "source": "meca500_programming_manual", "chunk_index": 2433, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "meca500_programming_manual_2434", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2434, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2435", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2435, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2436", "text": "When using PROFINET, you can connect several Mecademic robots, just like with TCP/IP.\nEither Ethernet port on the robot can be used. The robots can be either daisy-chained\ntogether or connected in a star pattern.", "source": "meca500_programming_manual", "chunk_index": 2436, "length": 212, "hash": "b1a2a1fcba7702d6c0315f72f3a67deb"}
{"id": "meca500_programming_manual_2437", "text": "When using PROFINET, you can connect several Mecademic robots, just like with TCP/IP.\nEither Ethernet port on the robot can be used. The robots can be either daisy-chained\ntogether or connected in a star pattern.", "source": "meca500_programming_manual", "chunk_index": 2437, "length": 212, "hash": "b1a2a1fcba7702d6c0315f72f3a67deb"}
{"id": "meca500_programming_manual_2438", "text": "Limitations when daisy-chaining robots", "source": "meca500_programming_manual", "chunk_index": 2438, "length": 38, "hash": "ea1e5597d8ca88e0df9e8ffa3eca1972"}
{"id": "meca500_programming_manual_2439", "text": "Limitations when daisy-chaining robots", "source": "meca500_programming_manual", "chunk_index": 2439, "length": 38, "hash": "ea1e5597d8ca88e0df9e8ffa3eca1972"}
{"id": "meca500_programming_manual_2440", "text": "Please note that the two Ethernet ports on the robot act as an unmanaged Ethernet switch, not\nas a \u201cPROFINET-aware\u201d switch. In fact, this Ethernet switch will not respond to LLDP (Local\nLink Discovery Protocol) packets like a PROFINET-enabled switch would (instead, it forwards\nLLDP through the daisy chain). As a consequence, the LLDP protocol will not properly identify\nthe network topology when the two Ethernet ports of the robots are connected (in a daisy-\nchain configuration, for example). Fortunately, this does not prevent the use of the PROFINET\nprotocol, since daisy-chained robots will still be detected by the PROFINET controller.", "source": "meca500_programming_manual", "chunk_index": 2440, "length": 643, "hash": "41ba1f47b50810163ca279b44cea4c7b"}
{"id": "meca500_programming_manual_2441", "text": "Please note that the two Ethernet ports on the robot act as an unmanaged Ethernet switch, not\nas a \u201cPROFINET-aware\u201d switch. In fact, this Ethernet switch will not respond to LLDP (Local\nLink Discovery Protocol) packets like a PROFINET-enabled switch would (instead, it forwards\nLLDP through the daisy chain). As a consequence, the LLDP protocol will not properly identify\nthe network topology when the two Ethernet ports of the robots are connected (in a daisy-\nchain configuration, for example). Fortunately, this does not prevent the use of the PROFINET", "source": "meca500_programming_manual", "chunk_index": 2441, "length": 555, "hash": "a76a65e23c18955568eca721362b35c8"}
{"id": "meca500_programming_manual_2442", "text": "protocol, since daisy-chained robots will still be detected by the PROFINET controller.", "source": "meca500_programming_manual", "chunk_index": 2442, "length": 87, "hash": "fbfcb82f8d12bd3d1ce562f4ee1d2f72"}
{"id": "meca500_programming_manual_2443", "text": "If you need full network topology discovery using LLDP, we recommend connecting the robot\nto a PROFINET-enabled Ethernet switch rather than in a daisy chain.", "source": "meca500_programming_manual", "chunk_index": 2443, "length": 157, "hash": "dc15cfdf6e772cb13c60753d1e9a1c43"}
{"id": "meca500_programming_manual_2444", "text": "If you need full network topology discovery using LLDP, we recommend connecting the robot\nto a PROFINET-enabled Ethernet switch rather than in a daisy chain.", "source": "meca500_programming_manual", "chunk_index": 2444, "length": 157, "hash": "dc15cfdf6e772cb13c60753d1e9a1c43"}
{"id": "meca500_programming_manual_2445", "text": "PROFINET protocol over your Ethernet network", "source": "meca500_programming_manual", "chunk_index": 2445, "length": 44, "hash": "2b4c76760b7a9551613ab9886bbf03c7"}
{"id": "meca500_programming_manual_2446", "text": "PROFINET protocol over your Ethernet network", "source": "meca500_programming_manual", "chunk_index": 2446, "length": 44, "hash": "2b4c76760b7a9551613ab9886bbf03c7"}
{"id": "meca500_programming_manual_2447", "text": "The PROFINET protocol uses non-IP packets to communicate real-time data over the Ethernet\nnetwork. Please ensure that your Ethernet network and switches are properly forwarding\nthese packets between the PROFINET controller (PLC) and the Mecademic robots.", "source": "meca500_programming_manual", "chunk_index": 2447, "length": 254, "hash": "80ae7a9aa7a97a3e10d669ce501cb9b2"}
{"id": "meca500_programming_manual_2448", "text": "The PROFINET protocol uses non-IP packets to communicate real-time data over the Ethernet\nnetwork. Please ensure that your Ethernet network and switches are properly forwarding\nthese packets between the PROFINET controller (PLC) and the Mecademic robots.", "source": "meca500_programming_manual", "chunk_index": 2448, "length": 254, "hash": "80ae7a9aa7a97a3e10d669ce501cb9b2"}
{"id": "meca500_programming_manual_2449", "text": "Ethernet packets of type LLDP (0x88CC) are used for the LLDP protocol. This protocol makes\nit possible to discover the network topology.", "source": "meca500_programming_manual", "chunk_index": 2449, "length": 136, "hash": "18346f84599095c89e2a03e1ad3f84d9"}
{"id": "meca500_programming_manual_2450", "text": "Ethernet packets of type LLDP (0x88CC) are used for the LLDP protocol. This protocol makes\nit possible to discover the network topology.", "source": "meca500_programming_manual", "chunk_index": 2450, "length": 136, "hash": "18346f84599095c89e2a03e1ad3f84d9"}
{"id": "meca500_programming_manual_2451", "text": "Ethernet packets of type PN-DCP (0x8892) are used for the DCP protocol (Discovery and\nConfiguration Protocol). This protocol is used to discover PROFINET devices on the network.\nIt is also used to set host names and IP addresses to detect PROFINET devices.", "source": "meca500_programming_manual", "chunk_index": 2451, "length": 256, "hash": "89c03636a6c5fe2b0ee96cf26c336afa"}
{"id": "meca500_programming_manual_2452", "text": "Ethernet packets of type PN-DCP (0x8892) are used for the DCP protocol (Discovery and\nConfiguration Protocol). This protocol is used to discover PROFINET devices on the network.\nIt is also used to set host names and IP addresses to detect PROFINET devices.", "source": "meca500_programming_manual", "chunk_index": 2452, "length": 256, "hash": "89c03636a6c5fe2b0ee96cf26c336afa"}
{"id": "meca500_programming_manual_2453", "text": "Ethernet packets of type PROFINET RT (0x8892) are used for PROFINET cyclic data\nexchanges between the Mecademic robots and the PROFINET controller (PLC).", "source": "meca500_programming_manual", "chunk_index": 2453, "length": 153, "hash": "94baf1a163f0f9ebe5ae12984b8a1421"}
{"id": "meca500_programming_manual_2454", "text": "Ethernet packets of type PROFINET RT (0x8892) are used for PROFINET cyclic data\nexchanges between the Mecademic robots and the PROFINET controller (PLC).", "source": "meca500_programming_manual", "chunk_index": 2454, "length": 153, "hash": "94baf1a163f0f9ebe5ae12984b8a1421"}
{"id": "meca500_programming_manual_2455", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2455, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2456", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2456, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2457", "text": "The PROFINET protocol can enabled using the Network\nMecaPortal configuration menu.", "source": "meca500_programming_manual", "chunk_index": 2457, "length": 82, "hash": "d3308e7a25e38b0b0cbb073f4084bd7a"}
{"id": "meca500_programming_manual_2458", "text": "The PROFINET protocol can enabled using the", "source": "meca500_programming_manual", "chunk_index": 2458, "length": 43, "hash": "8afced58a097d4063b06520f4abd37b8"}
{"id": "meca500_programming_manual_2459", "text": "MecaPortal configuration menu.", "source": "meca500_programming_manual", "chunk_index": 2459, "length": 30, "hash": "3577209debb39fd8685bcf5242843917"}
{"id": "meca500_programming_manual_2460", "text": "Alternatively, you can use the EnableProfinet() (page 191) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the TCP/IP API (page 29).", "source": "meca500_programming_manual", "chunk_index": 2460, "length": 169, "hash": "dee4963adf426ab4f2b80c43346e98b6"}
{"id": "meca500_programming_manual_2461", "text": "Alternatively, you can use the", "source": "meca500_programming_manual", "chunk_index": 2461, "length": 30, "hash": "1830f37443a4f1c50e7e68a474a82af8"}
{"id": "meca500_programming_manual_2462", "text": "(page 191) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the", "source": "meca500_programming_manual", "chunk_index": 2462, "length": 99, "hash": "f53a78bc832604ae82f21abd1867e184"}
{"id": "meca500_programming_manual_2463", "text": "This is a persistent configuration and only needs to be set once.", "source": "meca500_programming_manual", "chunk_index": 2463, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "meca500_programming_manual_2464", "text": "This is a persistent configuration and only needs to be set once.", "source": "meca500_programming_manual", "chunk_index": 2464, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "meca500_programming_manual_2465", "text": "Note that PROFINET can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the SwitchToEtherCAT (page 220) command.", "source": "meca500_programming_manual", "chunk_index": 2465, "length": 173, "hash": "4154f3a4b103fbab48a3421dc7612e38"}
{"id": "meca500_programming_manual_2466", "text": "Note that PROFINET can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the", "source": "meca500_programming_manual", "chunk_index": 2466, "length": 136, "hash": "0c2cc8eae5fb29005b8da811467de9b0"}
{"id": "meca500_programming_manual_2467", "text": "Also note that LLDP forwarding on the robot is enabled only when PROFINET is enabled on\nthe robot (so it will not be possible to detect a robot using LLDP until PROFINET is enabled\non it).", "source": "meca500_programming_manual", "chunk_index": 2467, "length": 188, "hash": "8d146febbbed1257421f98fd854acf87"}
{"id": "meca500_programming_manual_2468", "text": "Also note that LLDP forwarding on the robot is enabled only when PROFINET is enabled on\nthe robot (so it will not be possible to detect a robot using LLDP until PROFINET is enabled\non it).", "source": "meca500_programming_manual", "chunk_index": 2468, "length": 188, "hash": "8d146febbbed1257421f98fd854acf87"}
{"id": "meca500_programming_manual_2469", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2469, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2470", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2470, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2471", "text": "Only one AR (Application Relationship) can be established with the robot. Only one\nPROFINET controller (PLC) can control a Mecademic robot.", "source": "meca500_programming_manual", "chunk_index": 2471, "length": 139, "hash": "2fb3f5543963dedb8e32e6aa7252ee0e"}
{"id": "meca500_programming_manual_2472", "text": "Only one AR (Application Relationship) can be established with the robot. Only one\nPROFINET controller (PLC) can control a Mecademic robot.", "source": "meca500_programming_manual", "chunk_index": 2472, "length": 139, "hash": "2fb3f5543963dedb8e32e6aa7252ee0e"}
{"id": "meca500_programming_manual_2473", "text": "Controlling the robot is also exclusive between TCP/IP, EtherNet/IP, and PROFINET protocols.\nThe first connection to the robot on any of these cyclic protocols will prevent any other\nconnections on any protocol.", "source": "meca500_programming_manual", "chunk_index": 2473, "length": 211, "hash": "0409fa091f08c71f1b1f010e2b01ed38"}
{"id": "meca500_programming_manual_2474", "text": "Controlling the robot is also exclusive between TCP/IP, EtherNet/IP, and PROFINET protocols.\nThe first connection to the robot on any of these cyclic protocols will prevent any other\nconnections on any protocol.", "source": "meca500_programming_manual", "chunk_index": 2474, "length": 211, "hash": "0409fa091f08c71f1b1f010e2b01ed38"}
{"id": "meca500_programming_manual_2475", "text": "If a PROFINET connection request is refused because the robot is already being controlled\nby another PROFINET controller (PLC), the refused connect request will be returned with\nstandard error codes and the following values:", "source": "meca500_programming_manual", "chunk_index": 2475, "length": 224, "hash": "7d6c7e35442ec90de88cb25cf691db8c"}
{"id": "meca500_programming_manual_2476", "text": "If a PROFINET connection request is refused because the robot is already being controlled\nby another PROFINET controller (PLC), the refused connect request will be returned with\nstandard error codes and the following values:", "source": "meca500_programming_manual", "chunk_index": 2476, "length": 224, "hash": "7d6c7e35442ec90de88cb25cf691db8c"}
{"id": "meca500_programming_manual_2477", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "meca500_programming_manual", "chunk_index": 2477, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "meca500_programming_manual_2478", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "meca500_programming_manual", "chunk_index": 2478, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "meca500_programming_manual_2479", "text": "\u2022 Error decode \u201cPNIO\u201d (0x81)", "source": "meca500_programming_manual", "chunk_index": 2479, "length": 28, "hash": "8169cc879764537409bed22293af4afa"}
{"id": "meca500_programming_manual_2480", "text": "\u2022 Error decode \u201cPNIO\u201d (0x81)", "source": "meca500_programming_manual", "chunk_index": 2480, "length": 28, "hash": "8169cc879764537409bed22293af4afa"}
{"id": "meca500_programming_manual_2481", "text": "\u2022 Error1 \u201cCMRPC\u201d (0x40)", "source": "meca500_programming_manual", "chunk_index": 2481, "length": 23, "hash": "05dfe065803b8dd5ff0899c1d80e3f29"}
{"id": "meca500_programming_manual_2482", "text": "\u2022 Error1 \u201cCMRPC\u201d (0x40)", "source": "meca500_programming_manual", "chunk_index": 2482, "length": 23, "hash": "05dfe065803b8dd5ff0899c1d80e3f29"}
{"id": "meca500_programming_manual_2483", "text": "\u2022 Error2 \u201cNo AR resource\u201d (0x04)", "source": "meca500_programming_manual", "chunk_index": 2483, "length": 32, "hash": "a4978b2f7a517df10f3805ce2926a552"}
{"id": "meca500_programming_manual_2484", "text": "\u2022 Error2 \u201cNo AR resource\u201d (0x04)", "source": "meca500_programming_manual", "chunk_index": 2484, "length": 32, "hash": "a4978b2f7a517df10f3805ce2926a552"}
{"id": "meca500_programming_manual_2485", "text": "If a PROFINET connection request is refused because the robot is already being controlled by\nanother protocol (TCP/IP or EtherNet/IP), the refused connect request will be returned with\na vendor-specific error code and the following values:", "source": "meca500_programming_manual", "chunk_index": 2485, "length": 239, "hash": "1c6f41ef1317dbcd4e55a1c4620cb690"}
{"id": "meca500_programming_manual_2486", "text": "If a PROFINET connection request is refused because the robot is already being controlled by\nanother protocol (TCP/IP or EtherNet/IP), the refused connect request will be returned with\na vendor-specific error code and the following values:", "source": "meca500_programming_manual", "chunk_index": 2486, "length": 239, "hash": "1c6f41ef1317dbcd4e55a1c4620cb690"}
{"id": "meca500_programming_manual_2487", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "meca500_programming_manual", "chunk_index": 2487, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "meca500_programming_manual_2488", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "meca500_programming_manual", "chunk_index": 2488, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "meca500_programming_manual_2489", "text": "\u2022 Error decode \u201cManufacturer specific\u201d (0x82)", "source": "meca500_programming_manual", "chunk_index": 2489, "length": 45, "hash": "e7a1437b990bd4ee21aed2fce914731e"}
{"id": "meca500_programming_manual_2490", "text": "\u2022 Error decode \u201cManufacturer specific\u201d (0x82)", "source": "meca500_programming_manual", "chunk_index": 2490, "length": 45, "hash": "e7a1437b990bd4ee21aed2fce914731e"}
{"id": "meca500_programming_manual_2491", "text": "\u2022 Error1 \u201cMecademic Access denied\u201d (0x11)", "source": "meca500_programming_manual", "chunk_index": 2491, "length": 41, "hash": "1ae1e265df3ad5cf4090c5683909d8ad"}
{"id": "meca500_programming_manual_2492", "text": "\u2022 Error1 \u201cMecademic Access denied\u201d (0x11)", "source": "meca500_programming_manual", "chunk_index": 2492, "length": 41, "hash": "1ae1e265df3ad5cf4090c5683909d8ad"}
{"id": "meca500_programming_manual_2493", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2493, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2494", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2494, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2495", "text": "Each Profinet slave device is described by a GSDML (.xml) file that describes its identity,\ncapabilities, cyclic payload, PROFINET Modules and SubModules that it supports. The\nPROFINET controllers (PLC) use this file to properly identify detected PROFINET slave\ndevices, such as a Mecademic robot.", "source": "meca500_programming_manual", "chunk_index": 2495, "length": 297, "hash": "dcb7aab7afd9bd3cf3573ba5aba7b4cc"}
{"id": "meca500_programming_manual_2496", "text": "Each Profinet slave device is described by a GSDML (.xml) file that describes its identity,\ncapabilities, cyclic payload, PROFINET Modules and SubModules that it supports. The\nPROFINET controllers (PLC) use this file to properly identify detected PROFINET slave\ndevices, such as a Mecademic robot.", "source": "meca500_programming_manual", "chunk_index": 2496, "length": 297, "hash": "dcb7aab7afd9bd3cf3573ba5aba7b4cc"}
{"id": "meca500_programming_manual_2497", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package (GSDML-\nV2.42-Mecademic-meca500-XXXXXXXX.xml) .", "source": "meca500_programming_manual", "chunk_index": 2497, "length": 130, "hash": "1d82742632bd3c4590f17d47b56b17e4"}
{"id": "meca500_programming_manual_2498", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package (GSDML-\nV2.42-Mecademic-meca500-XXXXXXXX.xml) .", "source": "meca500_programming_manual", "chunk_index": 2498, "length": 130, "hash": "1d82742632bd3c4590f17d47b56b17e4"}
{"id": "meca500_programming_manual_2499", "text": "Since the GSDML file contains necessary information to identify and list the robot capabilities,\nthis manual provides only a quick summary of the GSDML file.", "source": "meca500_programming_manual", "chunk_index": 2499, "length": 157, "hash": "69dd87f4388d2bfb9a57816feadecce3"}
{"id": "meca500_programming_manual_2500", "text": "Since the GSDML file contains necessary information to identify and list the robot capabilities,\nthis manual provides only a quick summary of the GSDML file.", "source": "meca500_programming_manual", "chunk_index": 2500, "length": 157, "hash": "69dd87f4388d2bfb9a57816feadecce3"}
{"id": "meca500_programming_manual_2501", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2501, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2502", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2502, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2503", "text": "Robot modules and sub-modules", "source": "meca500_programming_manual", "chunk_index": 2503, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "meca500_programming_manual_2504", "text": "Robot modules and sub-modules", "source": "meca500_programming_manual", "chunk_index": 2504, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "meca500_programming_manual_2505", "text": "The robot supports only one module and one sub-module, fixed in a predefined slot.", "source": "meca500_programming_manual", "chunk_index": 2505, "length": 82, "hash": "c0e3159208214f250bf472efdf704307"}
{"id": "meca500_programming_manual_2506", "text": "The robot supports only one module and one sub-module, fixed in a predefined slot.", "source": "meca500_programming_manual", "chunk_index": 2506, "length": 82, "hash": "c0e3159208214f250bf472efdf704307"}
{"id": "meca500_programming_manual_2507", "text": "\u2022 Module: \u201cRobotControlModule\u201d, ID=0x32, fixed in slot 1", "source": "meca500_programming_manual", "chunk_index": 2507, "length": 56, "hash": "918816b7e97c0155bd7738b724ae80ee"}
{"id": "meca500_programming_manual_2508", "text": "\u2022 Module: \u201cRobotControlModule\u201d, ID=0x32, fixed in slot 1", "source": "meca500_programming_manual", "chunk_index": 2508, "length": 56, "hash": "918816b7e97c0155bd7738b724ae80ee"}
{"id": "meca500_programming_manual_2509", "text": "\u2022 Sub-module: ID=0x132, fixed in sub-slot 1", "source": "meca500_programming_manual", "chunk_index": 2509, "length": 43, "hash": "0e29c1e7e3f74ea42346a9c2f80ab1cb"}
{"id": "meca500_programming_manual_2510", "text": "\u2022 Sub-module: ID=0x132, fixed in sub-slot 1", "source": "meca500_programming_manual", "chunk_index": 2510, "length": 43, "hash": "0e29c1e7e3f74ea42346a9c2f80ab1cb"}
{"id": "meca500_programming_manual_2511", "text": "This module provides fixed cyclic data input and output, used to control and monitor the robot.", "source": "meca500_programming_manual", "chunk_index": 2511, "length": 95, "hash": "2e3da76b95a3800804063df200e31a91"}
{"id": "meca500_programming_manual_2512", "text": "This module provides fixed cyclic data input and output, used to control and monitor the robot.", "source": "meca500_programming_manual", "chunk_index": 2512, "length": 95, "hash": "2e3da76b95a3800804063df200e31a91"}
{"id": "meca500_programming_manual_2513", "text": "Robot modules and sub-modules", "source": "meca500_programming_manual", "chunk_index": 2513, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "meca500_programming_manual_2514", "text": "Robot modules and sub-modules", "source": "meca500_programming_manual", "chunk_index": 2514, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "meca500_programming_manual_2515", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2515, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2516", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2516, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2517", "text": "Using cyclic data to control and monitor Mecademic robots with PROFINET is explained in\nSection 5 of this manual.", "source": "meca500_programming_manual", "chunk_index": 2517, "length": 113, "hash": "cfaa488da3350554acfb5b2a90ec0eb1"}
{"id": "meca500_programming_manual_2518", "text": "Using cyclic data to control and monitor Mecademic robots with PROFINET is explained in\nSection 5 of this manual.", "source": "meca500_programming_manual", "chunk_index": 2518, "length": 113, "hash": "cfaa488da3350554acfb5b2a90ec0eb1"}
{"id": "meca500_programming_manual_2519", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "meca500_programming_manual", "chunk_index": 2519, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "meca500_programming_manual_2520", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "meca500_programming_manual", "chunk_index": 2520, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "meca500_programming_manual_2521", "text": "Please refer to the robot\u2019s GSDML file (page 125) for the list of cyclic input/output fields.\nRefer to Section 5 for instructions on how to use these cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 2521, "length": 164, "hash": "35c5679a1d98fd4df471df6d0d9f8cd6"}
{"id": "meca500_programming_manual_2522", "text": "Please refer to the robot\u2019s", "source": "meca500_programming_manual", "chunk_index": 2522, "length": 27, "hash": "52b21299adf016c5aea4dbeeeb0288b4"}
{"id": "meca500_programming_manual_2523", "text": "(page 125) for the list of cyclic input/output fields.\nRefer to Section 5 for instructions on how to use these cyclic fields.", "source": "meca500_programming_manual", "chunk_index": 2523, "length": 125, "hash": "e44f78841be1d464cc4b25766dac74bb"}
{"id": "meca500_programming_manual_2524", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "meca500_programming_manual", "chunk_index": 2524, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "meca500_programming_manual_2525", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "meca500_programming_manual", "chunk_index": 2525, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "meca500_programming_manual_2526", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2526, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2527", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2527, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2528", "text": "Mecademic robots will not generate any PROFINET alarms. Any alarm or error condition\nwill be reported by the robot through the corresponding cyclic data fields. This allows the\nrobots to behave the same across various cyclic protocols (such as PROFINET, EtherNet/IP,\nor EtherCAT).", "source": "meca500_programming_manual", "chunk_index": 2528, "length": 280, "hash": "826a6dbc3db9e7b59d621ca0bf61229c"}
{"id": "meca500_programming_manual_2529", "text": "Mecademic robots will not generate any PROFINET alarms. Any alarm or error condition\nwill be reported by the robot through the corresponding cyclic data fields. This allows the\nrobots to behave the same across various cyclic protocols (such as PROFINET, EtherNet/IP,\nor EtherCAT).", "source": "meca500_programming_manual", "chunk_index": 2529, "length": 280, "hash": "826a6dbc3db9e7b59d621ca0bf61229c"}
{"id": "meca500_programming_manual_2530", "text": "Refer to Section 5 for more information about robot status and error states reported in the\ncyclic input data.", "source": "meca500_programming_manual", "chunk_index": 2530, "length": 110, "hash": "bd4b49b226490842a27497a20c10a26d"}
{"id": "meca500_programming_manual_2531", "text": "Refer to Section 5 for more information about robot status and error states reported in the\ncyclic input data.", "source": "meca500_programming_manual", "chunk_index": 2531, "length": 110, "hash": "bd4b49b226490842a27497a20c10a26d"}
{"id": "meca500_programming_manual_2532", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2532, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2533", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2533, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2534", "text": "From the MecaPortal, you can download three different log files that record state changes,\ncommands sent, responses received, and other data, as described below:", "source": "meca500_programming_manual", "chunk_index": 2534, "length": 161, "hash": "6634861f8a45defa9fc2d899e6646d3a"}
{"id": "meca500_programming_manual_2535", "text": "From the MecaPortal, you can download three different log files that record state changes,\ncommands sent, responses received, and other data, as described below:", "source": "meca500_programming_manual", "chunk_index": 2535, "length": 161, "hash": "6634861f8a45defa9fc2d899e6646d3a"}
{"id": "meca500_programming_manual_2536", "text": "\u2022 User log (page 359): A simplified log containing user-friendly traces of major events", "source": "meca500_programming_manual", "chunk_index": 2536, "length": 87, "hash": "1026ff0bf7bfd0eb767fa224034b2926"}
{"id": "meca500_programming_manual_2537", "text": "(page 359): A simplified log containing user-friendly traces of major events", "source": "meca500_programming_manual", "chunk_index": 2537, "length": 76, "hash": "28dc2e2ff05c97549245be7bdc72eabe"}
{"id": "meca500_programming_manual_2538", "text": "(e.g., robot activation, movement, E-Stop activation).", "source": "meca500_programming_manual", "chunk_index": 2538, "length": 54, "hash": "91973219b449c5f2eb0083345bb52b84"}
{"id": "meca500_programming_manual_2539", "text": "(e.g., robot activation, movement, E-Stop activation).", "source": "meca500_programming_manual", "chunk_index": 2539, "length": 54, "hash": "91973219b449c5f2eb0083345bb52b84"}
{"id": "meca500_programming_manual_2540", "text": "\u2022 Robot log (page 359): A more detailed version of the user log, intended primarily for the", "source": "meca500_programming_manual", "chunk_index": 2540, "length": 91, "hash": "0082084a0696bb681c415d4f56d900d8"}
{"id": "meca500_programming_manual_2541", "text": "(page 359): A more detailed version of the user log, intended primarily for the", "source": "meca500_programming_manual", "chunk_index": 2541, "length": 79, "hash": "08a35d7e40324b43d3d9a924879d3ac8"}
{"id": "meca500_programming_manual_2542", "text": "\u2022 Detailed event log (page 357): This file mirrors the content of the event log panel in the\nMecaPortal when in detailed mode, i.e., when all of the options are selected in the event\nlog panel settings menu,", "source": "meca500_programming_manual", "chunk_index": 2542, "length": 207, "hash": "a1c1f863317b7ff0748bdb04feaced48"}
{"id": "meca500_programming_manual_2543", "text": "(page 357): This file mirrors the content of the event log panel in the\nMecaPortal when in detailed mode, i.e., when all of the options are selected in the event\nlog panel settings menu,", "source": "meca500_programming_manual", "chunk_index": 2543, "length": 186, "hash": "63a4db8cd8a55d788a99a9e61cdc3a6c"}
{"id": "meca500_programming_manual_2544", "text": "Robot log files are stored on the robot\u2019s disk. The user log is also saved on the disk, except for\nthe Meca500 robot, where it is volatile. When a log file exceeds 10 MB, a new file is created,\nand older files are moved to the backup (see next subsection). As a result, some log files may\ncontain only a few lines of data, in which case you may need to check the robot\u2019s backup.", "source": "meca500_programming_manual", "chunk_index": 2544, "length": 378, "hash": "9b7a7f2d788bac96e9d2a533e0a3e652"}
{"id": "meca500_programming_manual_2545", "text": "Robot log files are stored on the robot\u2019s disk. The user log is also saved on the disk, except for", "source": "meca500_programming_manual", "chunk_index": 2545, "length": 98, "hash": "5f22d4dfb86149d00eb71fb2d3bdb09c"}
{"id": "meca500_programming_manual_2546", "text": "the Meca500 robot, where it is volatile. When a log file exceeds 10 MB, a new file is created,\nand older files are moved to the backup (see next subsection). As a result, some log files may\ncontain only a few lines of data, in which case you may need to check the robot\u2019s backup.", "source": "meca500_programming_manual", "chunk_index": 2546, "length": 279, "hash": "e7652167f4352b52509fb179ebfc22d3"}
{"id": "meca500_programming_manual_2547", "text": "The detailed event log is volatile and not saved, meaning it will be lost after a robot reboot.\nIt is also a circular buffer, storing only the most recent data.", "source": "meca500_programming_manual", "chunk_index": 2547, "length": 160, "hash": "d7470764d022d5701011de85170b29d4"}
{"id": "meca500_programming_manual_2548", "text": "The detailed event log is volatile and not saved, meaning it will be lost after a robot reboot.\nIt is also a circular buffer, storing only the most recent data.", "source": "meca500_programming_manual", "chunk_index": 2548, "length": 160, "hash": "d7470764d022d5701011de85170b29d4"}
{"id": "meca500_programming_manual_2549", "text": "You can enable additional details in the user and robot logs using the commands LogTrace\n(page 193) and LogUserCommands (page 194).", "source": "meca500_programming_manual", "chunk_index": 2549, "length": 131, "hash": "c08a7666b7d9dc6be19d9dda865959be"}
{"id": "meca500_programming_manual_2550", "text": "You can enable additional details in the user and robot logs using the commands", "source": "meca500_programming_manual", "chunk_index": 2550, "length": 79, "hash": "22d53675e1d703899e4ec9fc28ad3a9b"}
{"id": "meca500_programming_manual_2551", "text": "Finally, the user and robot log files can be downloaded from the Log files tab of the\nconfiguration menu,\n, in the MecaPortal. The detailed event log can be downloaded by\nclicking the", "source": "meca500_programming_manual", "chunk_index": 2551, "length": 183, "hash": "0543bb16a6b8faf0bc1432bc8c02ef82"}
{"id": "meca500_programming_manual_2552", "text": "Finally, the user and robot log files can be downloaded from the Log files tab of the\nconfiguration menu,\n, in the MecaPortal. The detailed event log can be downloaded by\nclicking the", "source": "meca500_programming_manual", "chunk_index": 2552, "length": 183, "hash": "0543bb16a6b8faf0bc1432bc8c02ef82"}
{"id": "meca500_programming_manual_2553", "text": "icon in the event log panel of the MecaPortal.", "source": "meca500_programming_manual", "chunk_index": 2553, "length": 46, "hash": "c5f39b36f5056a61909aeb8601531d75"}
{"id": "meca500_programming_manual_2554", "text": "icon in the event log panel of the MecaPortal.", "source": "meca500_programming_manual", "chunk_index": 2554, "length": 46, "hash": "c5f39b36f5056a61909aeb8601531d75"}
{"id": "meca500_programming_manual_2555", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2555, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2556", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2556, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2557", "text": "The full backup of the robot is a TAR archive file that contains the complete robot\nconfiguration, the latest user and robot log files, and their archived versions. You can\ndownload the full backup from the \u201cLog files\u201d tab of the configuration menu in the MecaPortal\nby clicking the \u201cGet all log and configuration files\u201d button with your primary mouse button.", "source": "meca500_programming_manual", "chunk_index": 2557, "length": 359, "hash": "e427ed23a0f79560cceacb8760e63b08"}
{"id": "meca500_programming_manual_2558", "text": "The full backup of the robot is a TAR archive file that contains the complete robot\nconfiguration, the latest user and robot log files, and their archived versions. You can\ndownload the full backup from the \u201cLog files\u201d tab of the configuration menu in the MecaPortal\nby clicking the \u201cGet all log and configuration files\u201d button with your primary mouse button.", "source": "meca500_programming_manual", "chunk_index": 2558, "length": 359, "hash": "e427ed23a0f79560cceacb8760e63b08"}
{"id": "meca500_programming_manual_2559", "text": "Alternatively, to download a smaller backup file without the archived user and robot logs,\nclick the same button with your secondary mouse button.", "source": "meca500_programming_manual", "chunk_index": 2559, "length": 146, "hash": "9f089deac853b2a5ed36f200156fa659"}
{"id": "meca500_programming_manual_2560", "text": "Alternatively, to download a smaller backup file without the archived user and robot logs,\nclick the same button with your secondary mouse button.", "source": "meca500_programming_manual", "chunk_index": 2560, "length": 146, "hash": "9f089deac853b2a5ed36f200156fa659"}
{"id": "meca500_programming_manual_2561", "text": "Motion commands are used to generate a trajectory for the robot. When a Mecademic robot\nreceives a motion command, it places it in a motion queue. The command will be run once\nall preceding motion commands have been executed. In other words, motion commands are\nsynchronous.", "source": "meca500_programming_manual", "chunk_index": 2561, "length": 274, "hash": "1041307ebc6930033393247582c14deb"}
{"id": "meca500_programming_manual_2562", "text": "Motion commands are used to generate a trajectory for the robot. When a Mecademic robot\nreceives a motion command, it places it in a motion queue. The command will be run once\nall preceding motion commands have been executed. In other words, motion commands are\nsynchronous.", "source": "meca500_programming_manual", "chunk_index": 2562, "length": 274, "hash": "1041307ebc6930033393247582c14deb"}
{"id": "meca500_programming_manual_2563", "text": "Most motion commands have arguments, but not all have default values (e.g., the argument\nfor the command Delay (page 134)). The arguments for most motion commands are IEEE-754\nfloating-point numbers, separated by commas and spaces (optional).", "source": "meca500_programming_manual", "chunk_index": 2563, "length": 242, "hash": "3353f143a8ddaff6e09cb2e8876246e3"}
{"id": "meca500_programming_manual_2564", "text": "Most motion commands have arguments, but not all have default values (e.g., the argument\nfor the command", "source": "meca500_programming_manual", "chunk_index": 2564, "length": 104, "hash": "65c923b48e6d4db3b6ab7351dc49dbfc"}
{"id": "meca500_programming_manual_2565", "text": "(page 134)). The arguments for most motion commands are IEEE-754\nfloating-point numbers, separated by commas and spaces (optional).", "source": "meca500_programming_manual", "chunk_index": 2565, "length": 131, "hash": "26438a00be457f1f5dd37ded81f004ab"}
{"id": "meca500_programming_manual_2566", "text": "Motion commands do not generate a direct response and the only way to know exactly when a\ncertain motion command has been executed is to use the command SetCheckpoint (page 155)\n(a response is then sent when the checkpoint has been reached).", "source": "meca500_programming_manual", "chunk_index": 2566, "length": 241, "hash": "86171f05dd455dde2ed41ab5aab28e33"}
{"id": "meca500_programming_manual_2567", "text": "Motion commands do not generate a direct response", "source": "meca500_programming_manual", "chunk_index": 2567, "length": 49, "hash": "b783a28c0fd474e44c6b9d5aa92a31df"}
{"id": "meca500_programming_manual_2568", "text": "and the only way to know exactly when a\ncertain motion command has been executed is to use the command", "source": "meca500_programming_manual", "chunk_index": 2568, "length": 102, "hash": "45d2dcee2f2088e9819cd616054266a9"}
{"id": "meca500_programming_manual_2569", "text": "(page 155)\n(a response is then sent when the checkpoint has been reached).", "source": "meca500_programming_manual", "chunk_index": 2569, "length": 74, "hash": "7db8b87a36de1254a46ef0f7e880d6a8"}
{"id": "meca500_programming_manual_2570", "text": "The robot sends an end-of-movement message (EOM (page 357), code 3004) whenever it has\nstopped moving for at least 1 ms, if this option is activated with SetEom (page 202). The EOM\nmessage is sent whether or not all queued commands have been executed.", "source": "meca500_programming_manual", "chunk_index": 2570, "length": 251, "hash": "a8712d0dc09fb34c8c107a322b41d7e8"}
{"id": "meca500_programming_manual_2571", "text": "The robot sends an end-of-movement message (", "source": "meca500_programming_manual", "chunk_index": 2571, "length": 44, "hash": "42bec5b08dca254e7c74db2f7773e019"}
{"id": "meca500_programming_manual_2572", "text": "(page 357), code 3004) whenever it has\nstopped moving for at least 1 ms, if this option is activated with", "source": "meca500_programming_manual", "chunk_index": 2572, "length": 105, "hash": "b2ac443e4138c29aef8280f5e4d3a477"}
{"id": "meca500_programming_manual_2573", "text": "(page 202). The EOM\nmessage is sent whether or not all queued commands have been executed.", "source": "meca500_programming_manual", "chunk_index": 2573, "length": 90, "hash": "f50b75bb228ab0dfd301c9dfc1ee0da3"}
{"id": "meca500_programming_manual_2574", "text": "Furthermore, by default, the robot sends an end-of-block message (EOB (page 357), code\n3012) every time the robot has stopped moving AND its motion queue is empty. For\nexample, if both EOM and EOB messages are enabled, and you immediately send a MoveJoints\n(page 135), SetTrf (page 179), MovePose (page 147) and Delay (page 134) command one after\nthe other, the robot will send an EOM message when it has stopped, and then an EOB message\nas soon as the delay has elapsed.", "source": "meca500_programming_manual", "chunk_index": 2574, "length": 471, "hash": "d8e9ecbcf88a7d6e1bb61980bfd8dcc7"}
{"id": "meca500_programming_manual_2575", "text": "Furthermore, by default, the robot sends an end-of-block message (", "source": "meca500_programming_manual", "chunk_index": 2575, "length": 66, "hash": "8fec20e3792d7607e45fec36030056da"}
{"id": "meca500_programming_manual_2576", "text": "(page 357), code\n3012) every time the robot has stopped moving AND its motion queue is empty. For\nexample, if both EOM and EOB messages are enabled, and you immediately send a", "source": "meca500_programming_manual", "chunk_index": 2576, "length": 175, "hash": "55d48ec1df6008dbe3f887394d690374"}
{"id": "meca500_programming_manual_2577", "text": "(page 134) command one after\nthe other, the robot will send an EOM message when it has stopped, and then an EOB message\nas soon as the delay has elapsed.", "source": "meca500_programming_manual", "chunk_index": 2577, "length": 153, "hash": "97ab67baaad0ecb2c4815fedfe5684fb"}
{"id": "meca500_programming_manual_2578", "text": "Note that EOB and EOM messages should NOT be used to detect whether a sequence of\nmotion commands has been executed: communication delays mean that the robot may send\nan EOB message when it has finished processing all the previously received commands,\neven though there are more commands stacking up to be processed in the communication\nchannel (between robot and application). Using the SetCheckpoint (page 155) command is\nthe best way to follow the sequence of execution of commands. Finally, motion commands\ncan generate errors, explained in Section 4.", "source": "meca500_programming_manual", "chunk_index": 2578, "length": 555, "hash": "6f649e2574e5bc26f23484ad5b2af5ee"}
{"id": "meca500_programming_manual_2579", "text": "Note that EOB and EOM messages should NOT be used to detect whether a sequence of\nmotion commands has been executed: communication delays mean that the robot may send\nan EOB message when it has finished processing all the previously received commands,\neven though there are more commands stacking up to be processed in the communication\nchannel (between robot and application). Using the", "source": "meca500_programming_manual", "chunk_index": 2579, "length": 387, "hash": "97b6ccd37e4700a8594f664538be3e0a"}
{"id": "meca500_programming_manual_2580", "text": "(page 155) command is\nthe best way to follow the sequence of execution of commands. Finally, motion commands\ncan generate errors, explained in Section 4.", "source": "meca500_programming_manual", "chunk_index": 2580, "length": 153, "hash": "14c312b934f05aa892d8f15768d0b4d0"}
{"id": "meca500_programming_manual_2581", "text": "The motion commands are listed below in several groups.", "source": "meca500_programming_manual", "chunk_index": 2581, "length": 55, "hash": "4819e8708c2ce5644384291a0348315d"}
{"id": "meca500_programming_manual_2582", "text": "The motion commands are listed below in several groups.", "source": "meca500_programming_manual", "chunk_index": 2582, "length": 55, "hash": "4819e8708c2ce5644384291a0348315d"}
{"id": "meca500_programming_manual_2583", "text": "Joint-space, position-mode movement commands", "source": "meca500_programming_manual", "chunk_index": 2583, "length": 44, "hash": "7c73ef650c8ed4d9486a42ce17ac1220"}
{"id": "meca500_programming_manual_2584", "text": "Joint-space, position-mode movement commands", "source": "meca500_programming_manual", "chunk_index": 2584, "length": 44, "hash": "7c73ef650c8ed4d9486a42ce17ac1220"}
{"id": "meca500_programming_manual_2585", "text": "\u2022 MoveJoints (page 135)", "source": "meca500_programming_manual", "chunk_index": 2585, "length": 23, "hash": "d8db18d80cdba23af530333fb2809f13"}
{"id": "meca500_programming_manual_2586", "text": "\u2022 MoveJointsRel (page 137)", "source": "meca500_programming_manual", "chunk_index": 2586, "length": 26, "hash": "124e16732956ef956c1655c11135d146"}
{"id": "meca500_programming_manual_2587", "text": "\u2022 MovePose (page 147)", "source": "meca500_programming_manual", "chunk_index": 2587, "length": 21, "hash": "b9ceea71583b4b867fceaef1b9778c2a"}
{"id": "meca500_programming_manual_2588", "text": "\u2022 SetJointAcc (page 161)", "source": "meca500_programming_manual", "chunk_index": 2588, "length": 24, "hash": "43791d02be68cb6a7f4a190130c3ab65"}
{"id": "meca500_programming_manual_2589", "text": "\u2022 SetJointVel (page 163)", "source": "meca500_programming_manual", "chunk_index": 2589, "length": 24, "hash": "9b8eb4cbfef95d9be95b582492545afb"}
{"id": "meca500_programming_manual_2590", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2590, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2591", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2591, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2592", "text": "Cartesian-space, position-mode movement commands", "source": "meca500_programming_manual", "chunk_index": 2592, "length": 48, "hash": "0cb73e3a216db301da57408c6940c119"}
{"id": "meca500_programming_manual_2593", "text": "Cartesian-space, position-mode movement commands", "source": "meca500_programming_manual", "chunk_index": 2593, "length": 48, "hash": "0cb73e3a216db301da57408c6940c119"}
{"id": "meca500_programming_manual_2594", "text": "\u2022 MoveLin (page 141)", "source": "meca500_programming_manual", "chunk_index": 2594, "length": 20, "hash": "c8d486aa249e97dfbfd4f02c165849db"}
{"id": "meca500_programming_manual_2595", "text": "\u2022 MoveLinRelTrf (page 143)", "source": "meca500_programming_manual", "chunk_index": 2595, "length": 26, "hash": "a9e8e00f341c707296ae1db14556d87a"}
{"id": "meca500_programming_manual_2596", "text": "\u2022 MoveLinRelWrf (page 144)", "source": "meca500_programming_manual", "chunk_index": 2596, "length": 26, "hash": "6a4db70b9c9726d34cd155ab8704a4a1"}
{"id": "meca500_programming_manual_2597", "text": "\u2022 SetCartAcc (page 152)", "source": "meca500_programming_manual", "chunk_index": 2597, "length": 23, "hash": "f8ec889173ada888ba7cdd93dd684b8b"}
{"id": "meca500_programming_manual_2598", "text": "\u2022 SetCartAngVel (page 153)", "source": "meca500_programming_manual", "chunk_index": 2598, "length": 26, "hash": "f52c6b2d749df78186c673e7c4e09cd5"}
{"id": "meca500_programming_manual_2599", "text": "\u2022 SetCartLinVel (page 154)", "source": "meca500_programming_manual", "chunk_index": 2599, "length": 26, "hash": "107a68f18c2e88372a9bad2f6c03fd39"}
{"id": "meca500_programming_manual_2600", "text": "Velocity-mode movement commands", "source": "meca500_programming_manual", "chunk_index": 2600, "length": 31, "hash": "e5d6c85ae8b5925baeda099c00c939d7"}
{"id": "meca500_programming_manual_2601", "text": "Velocity-mode movement commands", "source": "meca500_programming_manual", "chunk_index": 2601, "length": 31, "hash": "e5d6c85ae8b5925baeda099c00c939d7"}
{"id": "meca500_programming_manual_2602", "text": "\u2022 MoveJointsVel (page 138)", "source": "meca500_programming_manual", "chunk_index": 2602, "length": 26, "hash": "fcbc6601d24359672d92e2d4e316a7a2"}
{"id": "meca500_programming_manual_2603", "text": "\u2022 MoveLinVelTrf (page 145)", "source": "meca500_programming_manual", "chunk_index": 2603, "length": 26, "hash": "c1e8cbc2fe33f0212eccb12f2e0624e4"}
{"id": "meca500_programming_manual_2604", "text": "\u2022 MoveLinVelWrf (page 146)", "source": "meca500_programming_manual", "chunk_index": 2604, "length": 26, "hash": "f3e961c4367a9c5d08673e778c0b5a3d"}
{"id": "meca500_programming_manual_2605", "text": "\u2022 SetVelTimeout (page 180)", "source": "meca500_programming_manual", "chunk_index": 2605, "length": 26, "hash": "51f7d0928accc7e1a42c58e8110e895c"}
{"id": "meca500_programming_manual_2606", "text": "Robot posture and turn configuration commands", "source": "meca500_programming_manual", "chunk_index": 2606, "length": 45, "hash": "374e6c9b5ebc62c185ba5853b89257fe"}
{"id": "meca500_programming_manual_2607", "text": "Robot posture and turn configuration commands", "source": "meca500_programming_manual", "chunk_index": 2607, "length": 45, "hash": "374e6c9b5ebc62c185ba5853b89257fe"}
{"id": "meca500_programming_manual_2608", "text": "\u2022 SetAutoConf (page 149)", "source": "meca500_programming_manual", "chunk_index": 2608, "length": 24, "hash": "2b338034483989ea38e8e873d8034d06"}
{"id": "meca500_programming_manual_2609", "text": "\u2022 SetAutoConfTurn (page 150)", "source": "meca500_programming_manual", "chunk_index": 2609, "length": 28, "hash": "ee05299b6f4534608438b8ea3c617d4b"}
{"id": "meca500_programming_manual_2610", "text": "\u2022 SetConf (page 157)", "source": "meca500_programming_manual", "chunk_index": 2610, "length": 20, "hash": "cd4fdc1856b86643ca8957530b92f9f3"}
{"id": "meca500_programming_manual_2611", "text": "\u2022 SetConfTurn (page 159)", "source": "meca500_programming_manual", "chunk_index": 2611, "length": 24, "hash": "2f683f588c143650a02f64a5f916eea9"}
{"id": "meca500_programming_manual_2612", "text": "Other motion commands", "source": "meca500_programming_manual", "chunk_index": 2612, "length": 21, "hash": "abfc01f916168f677d2f2f962bb0a290"}
{"id": "meca500_programming_manual_2613", "text": "Other motion commands", "source": "meca500_programming_manual", "chunk_index": 2613, "length": 21, "hash": "abfc01f916168f677d2f2f962bb0a290"}
{"id": "meca500_programming_manual_2614", "text": "\u2022 SetBlending (page 151)", "source": "meca500_programming_manual", "chunk_index": 2614, "length": 24, "hash": "0dff8881f94d71b5e4ed04664d04da17"}
{"id": "meca500_programming_manual_2615", "text": "\u2022 SetCheckpoint (page 155)", "source": "meca500_programming_manual", "chunk_index": 2615, "length": 26, "hash": "c55d8ac0e933ceb153e8999ec9c6fe84"}
{"id": "meca500_programming_manual_2616", "text": "\u2022 SetJointVelLimit (page 165)", "source": "meca500_programming_manual", "chunk_index": 2616, "length": 29, "hash": "327b20bad677b6bfdf569417a1d2c2ca"}
{"id": "meca500_programming_manual_2617", "text": "\u2022 SetMoveDuration (page 167)", "source": "meca500_programming_manual", "chunk_index": 2617, "length": 28, "hash": "01c8715d0f4355530937a9c9a6c2bd6b"}
{"id": "meca500_programming_manual_2618", "text": "\u2022 SetMoveDurationCfg (page 168)", "source": "meca500_programming_manual", "chunk_index": 2618, "length": 31, "hash": "1aade4c46d471042bde2f14c4485239e"}
{"id": "meca500_programming_manual_2619", "text": "\u2022 SetMoveMode (page 172)", "source": "meca500_programming_manual", "chunk_index": 2619, "length": 24, "hash": "df3db2440e2659c99981ff0d8e706221"}
{"id": "meca500_programming_manual_2620", "text": "\u2022 SetPayload (page 173)", "source": "meca500_programming_manual", "chunk_index": 2620, "length": 23, "hash": "03fb66acd4a8fde9f26c9210ea2e350f"}
{"id": "meca500_programming_manual_2621", "text": "\u2022 SetTorqueLimits (page 175)", "source": "meca500_programming_manual", "chunk_index": 2621, "length": 28, "hash": "58cc031118b8b6f5f9951f763b00153b"}
{"id": "meca500_programming_manual_2622", "text": "\u2022 SetTorqueLimitsCfg (page 177)", "source": "meca500_programming_manual", "chunk_index": 2622, "length": 31, "hash": "55812d3523b6c36ac064ac5c2f55f884"}
{"id": "meca500_programming_manual_2623", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2623, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2624", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2624, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2625", "text": "This command is used to add a time delay after a motion command. In other words, the robot\ncompletes all movements sent before the Delay (page 134) command and stops temporarily.\n(In contrast, the PauseMotion (page 195) command interrupts the motion as soon as received\nby the robot.)", "source": "meca500_programming_manual", "chunk_index": 2625, "length": 284, "hash": "58f88c3ceb33420ba9caebb65f4e7744"}
{"id": "meca500_programming_manual_2626", "text": "This command is used to add a time delay after a motion command. In other words, the robot\ncompletes all movements sent before the", "source": "meca500_programming_manual", "chunk_index": 2626, "length": 130, "hash": "8df34f0b154ff03e4ee5462c63281d0e"}
{"id": "meca500_programming_manual_2627", "text": "(page 134) command and stops temporarily.\n(In contrast, the", "source": "meca500_programming_manual", "chunk_index": 2627, "length": 59, "hash": "2e46ac05e7c9c1ce169f04172198aa6f"}
{"id": "meca500_programming_manual_2628", "text": "(page 195) command interrupts the motion as soon as received\nby the robot.)", "source": "meca500_programming_manual", "chunk_index": 2628, "length": 75, "hash": "dee8f671f2aa1151bb7e583b9a4935af"}
{"id": "meca500_programming_manual_2629", "text": "\u2022 t: desired pause duration in seconds.", "source": "meca500_programming_manual", "chunk_index": 2629, "length": 39, "hash": "b2faaed74c3a0425ab3562c808765cfc"}
{"id": "meca500_programming_manual_2630", "text": "\u2022 t: desired pause duration in seconds.", "source": "meca500_programming_manual", "chunk_index": 2630, "length": 39, "hash": "b2faaed74c3a0425ab3562c808765cfc"}
{"id": "meca500_programming_manual_2631", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2631, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2632", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2632, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2633", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2633, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2634", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2634, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2635", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2635, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2636", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2636, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2637", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2637, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2638", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2638, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2639", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2639, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2640", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2640, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2641", "text": "In cyclic protocols, the Delay (page 134) command is represented by MotionCommandID 6.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2641, "length": 118, "hash": "790a6357788d75f0cf63594dbfa65f65"}
{"id": "meca500_programming_manual_2642", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 2642, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_2643", "text": "(page 134) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2643, "length": 36, "hash": "4211341d82bc12e8e4e64a55bd4e5ce7"}
{"id": "meca500_programming_manual_2644", "text": "6.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2644, "length": 34, "hash": "5263cad52a5e65e30d9dbfba86c0b3b8"}
{"id": "meca500_programming_manual_2645", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2645, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2646", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2646, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2647", "text": "This command makes the robot simultaneously move all its joints to the target joint set, as\nfast as possible but subject to the limits set by the commands SetJointVel (page 163) and\nSetJointVelLimit (page 165). All joints start and stop moving at the same time, so there is\ngenerally only one joint that moves at the joint velocity indirectly specified in SetJointVel\n(page 163) and SetJointVelLimit (page 165). The robot takes a linear path in the joint space,\nbut nonlinear in the Cartesian space. Therefore, the TCP trajectory is not easily predictable\n(Figure 16). Finally, with MoveJoints (page 135), the robot can cross singularities without\nany problem.", "source": "meca500_programming_manual", "chunk_index": 2647, "length": 660, "hash": "ddfeaf9b83ba39fd6d8632303b5b3fd1"}
{"id": "meca500_programming_manual_2648", "text": "This command makes the robot simultaneously move all its joints to the target joint set, as\nfast as possible but subject to the limits set by the commands", "source": "meca500_programming_manual", "chunk_index": 2648, "length": 154, "hash": "281cf0ed067fbdf2f4676a3f86732f57"}
{"id": "meca500_programming_manual_2649", "text": "(page 165). All joints start and stop moving at the same time, so there is\ngenerally only one joint that moves at the joint velocity indirectly specified in", "source": "meca500_programming_manual", "chunk_index": 2649, "length": 156, "hash": "334528fe636045708084e1ff1d8d7433"}
{"id": "meca500_programming_manual_2650", "text": "(page 165). The robot takes a linear path in the joint space,\nbut nonlinear in the Cartesian space. Therefore, the TCP trajectory is not easily predictable\n(Figure 16). Finally, with", "source": "meca500_programming_manual", "chunk_index": 2650, "length": 182, "hash": "9033169d6762c5064dd21bb3a23ad669"}
{"id": "meca500_programming_manual_2651", "text": "(page 135), the robot can cross singularities without\nany problem.", "source": "meca500_programming_manual", "chunk_index": 2651, "length": 66, "hash": "6851ed260d6ef734615ce97eefd1fb76"}
{"id": "meca500_programming_manual_2652", "text": "MoveJoints(\u03b81,\u03b82,\u03b83,\u03b84,\u03b85,\u03b86)", "source": "meca500_programming_manual", "chunk_index": 2652, "length": 29, "hash": "5a430c591d3d74208866adab2d686e95"}
{"id": "meca500_programming_manual_2653", "text": "\u2022 the target position of each joint, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2653, "length": 48, "hash": "6e42677f86c45a2c2c4e900eb80397ff"}
{"id": "meca500_programming_manual_2654", "text": "\u2022 the target position of each joint, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2654, "length": 48, "hash": "6e42677f86c45a2c2c4e900eb80397ff"}
{"id": "meca500_programming_manual_2655", "text": "The default ranges for the robot joints are given in technical-specifications-Meca500 of\nthe robot\u2019s user manual. Note that these ranges can be further limited with the command\nSetJointLimits (page 203). The target joints position must be within the allowable joint limits\nor else the command will not be executed.", "source": "meca500_programming_manual", "chunk_index": 2655, "length": 314, "hash": "aac6ebdeb3b2cef44cd87c948f054ca4"}
{"id": "meca500_programming_manual_2656", "text": "The default ranges for the robot joints are given in", "source": "meca500_programming_manual", "chunk_index": 2656, "length": 52, "hash": "b4ac4850a525feb1f951b168ef9b5808"}
{"id": "meca500_programming_manual_2657", "text": "technical-specifications-Meca500", "source": "meca500_programming_manual", "chunk_index": 2657, "length": 32, "hash": "223413700271e792f362e1af08e87ebc"}
{"id": "meca500_programming_manual_2658", "text": "of\nthe robot\u2019s user manual. Note that these ranges can be further limited with the command", "source": "meca500_programming_manual", "chunk_index": 2658, "length": 90, "hash": "126f00668926468b2e2000465f9670a0"}
{"id": "meca500_programming_manual_2659", "text": "(page 203). The target joints position must be within the allowable joint limits\nor else the command will not be executed.", "source": "meca500_programming_manual", "chunk_index": 2659, "length": 122, "hash": "6ac35b83ea2f0313722698a014415bca"}
{"id": "meca500_programming_manual_2660", "text": "Figure 16: An example showing the difference between a path that is linear in joint space\n(often referred to as a point-to-point motion) and one that is linear in Cartesian space (the\nTCP follows a line)", "source": "meca500_programming_manual", "chunk_index": 2660, "length": 203, "hash": "59d24ec619252a778bcfde6f22083c40"}
{"id": "meca500_programming_manual_2661", "text": "Figure 16: An example showing the difference between a path that is linear in joint space", "source": "meca500_programming_manual", "chunk_index": 2661, "length": 89, "hash": "e190624b1e54456dd2bbd77d372c1d93"}
{"id": "meca500_programming_manual_2662", "text": "(often referred to as a point-to-point motion) and one that is linear in Cartesian space (the\nTCP follows a line)", "source": "meca500_programming_manual", "chunk_index": 2662, "length": 113, "hash": "ed0389c6a3ccd9a045150a17ffe62ae7"}
{"id": "meca500_programming_manual_2663", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2663, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2664", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2664, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2665", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2665, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2666", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2666, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2667", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2667, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2668", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2668, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2669", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2669, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2670", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2670, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2671", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2671, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2672", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2672, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2673", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2673, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2674", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2674, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2675", "text": "In cyclic protocols, the MoveJoints (page 135) command is represented by MotionCommandID\n1. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2675, "length": 123, "hash": "3db70a38aabf638b14510768fa7c9078"}
{"id": "meca500_programming_manual_2676", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 2676, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_2677", "text": "(page 135) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2677, "length": 36, "hash": "84ab618bd75017d038482e6ef1813e0a"}
{"id": "meca500_programming_manual_2678", "text": "1. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2678, "length": 34, "hash": "f3abb3fa23ae88a3ab4387e676480194"}
{"id": "meca500_programming_manual_2679", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2679, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2680", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2680, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2681", "text": "This command has the exact behavior as the MoveJoints (page 135) command, but instead\nof accepting the desired (target) joint set as arguments, it takes the desired relative joint\ndisplacements. The command is particularly useful when you need to displace certain joints\na certain amount, but you do not know the current joint set and wish to avoid having to use\nthe command GetRtTargetJointPos (page 283).", "source": "meca500_programming_manual", "chunk_index": 2681, "length": 406, "hash": "434533c3034777ccfe334e583aad7b62"}
{"id": "meca500_programming_manual_2682", "text": "This command has the exact behavior as the", "source": "meca500_programming_manual", "chunk_index": 2682, "length": 42, "hash": "7d6c43914fd365f0f31417154c503f93"}
{"id": "meca500_programming_manual_2683", "text": "(page 135) command, but instead\nof accepting the desired (target) joint set as arguments, it takes the desired relative joint\ndisplacements. The command is particularly useful when you need to displace certain joints\na certain amount, but you do not know the current joint set and wish to avoid having to use\nthe command", "source": "meca500_programming_manual", "chunk_index": 2683, "length": 320, "hash": "6edfbd1fda72bb4d27054eeda8f75f32"}
{"id": "meca500_programming_manual_2684", "text": "MoveJointsRel(\u0394\u03b81,\u0394\u03b82,\u0394\u03b83,\u0394\u03b84,\u0394\u03b85,\u0394\u03b86)", "source": "meca500_programming_manual", "chunk_index": 2684, "length": 38, "hash": "8d92f34c0f72c773e0b1958843af8f2a"}
{"id": "meca500_programming_manual_2685", "text": "\u2022 the desired relative displacement of each joint, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2685, "length": 62, "hash": "6a00698f2a072a583aa63b547132b330"}
{"id": "meca500_programming_manual_2686", "text": "\u2022 the desired relative displacement of each joint, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2686, "length": 62, "hash": "6a00698f2a072a583aa63b547132b330"}
{"id": "meca500_programming_manual_2687", "text": "The value of each of the arguments can be positive, negative or zero.", "source": "meca500_programming_manual", "chunk_index": 2687, "length": 69, "hash": "81c257bdbb51ed4fd7fd18d582d68242"}
{"id": "meca500_programming_manual_2688", "text": "The value of each of the arguments can be positive, negative or zero.", "source": "meca500_programming_manual", "chunk_index": 2688, "length": 69, "hash": "81c257bdbb51ed4fd7fd18d582d68242"}
{"id": "meca500_programming_manual_2689", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2689, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2690", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2690, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2691", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2691, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2692", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2692, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2693", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2693, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2694", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2694, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2695", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2695, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2696", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2696, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2697", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2697, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2698", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2698, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2699", "text": "In cyclic protocols,\nMotionCommandID 29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2699, "length": 72, "hash": "84106468646b351f59be2ae8a55484d0"}
{"id": "meca500_programming_manual_2700", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2700, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2701", "text": "29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2701, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "meca500_programming_manual_2702", "text": "(page 137) command is", "source": "meca500_programming_manual", "chunk_index": 2702, "length": 21, "hash": "cbd47b0a525b73a584a543a7090f6ccd"}
{"id": "meca500_programming_manual_2703", "text": "(page 137) command is", "source": "meca500_programming_manual", "chunk_index": 2703, "length": 21, "hash": "cbd47b0a525b73a584a543a7090f6ccd"}
{"id": "meca500_programming_manual_2704", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2704, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2705", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2705, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2706", "text": "This displaces the robot\u2019s joints simultaneously at the specified joint speeds. All joint\nmovements begin and end at the same time. The robot will decelerate to a complete stop\nafter a period defined by the command SetVelTimeout (page 180), unless a subsequent\nMoveJointsVel (page 138) command is issued. Unlike position-mode motion commands, the\nMoveJointsVel (page 138) command does not generate motion errors when a joint limit is\nreached; instead, the robot halts slightly before the limit. Additionally, as with all MoveJoints*\ncommands, the robot can cross singularities when using the MoveJointsVel (page 138)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 2706, "length": 625, "hash": "98e776580480a67c20dda5c363a388ed"}
{"id": "meca500_programming_manual_2707", "text": "This displaces the robot\u2019s joints simultaneously at the specified joint speeds. All joint\nmovements begin and end at the same time. The robot will decelerate to a complete stop\nafter a period defined by the command", "source": "meca500_programming_manual", "chunk_index": 2707, "length": 214, "hash": "548d6b707affa374d3caf9c7f31cd23a"}
{"id": "meca500_programming_manual_2708", "text": "(page 180), unless a subsequent", "source": "meca500_programming_manual", "chunk_index": 2708, "length": 31, "hash": "e81af841a065b798d6cecac13558a1fe"}
{"id": "meca500_programming_manual_2709", "text": "(page 138) command is issued. Unlike position-mode motion commands, the", "source": "meca500_programming_manual", "chunk_index": 2709, "length": 71, "hash": "be80b99897c2c96d072be9e357d83e6e"}
{"id": "meca500_programming_manual_2710", "text": "does not generate motion errors when a joint limit is\nreached", "source": "meca500_programming_manual", "chunk_index": 2710, "length": 61, "hash": "85eedc6719bbab5d1c95b46f3b2a660f"}
{"id": "meca500_programming_manual_2711", "text": "; instead, the robot halts slightly before the limit. Additionally, as with all MoveJoints*\ncommands, the robot can cross singularities when using the", "source": "meca500_programming_manual", "chunk_index": 2711, "length": 150, "hash": "ada072e45c228b100f0702a9a4ad049d"}
{"id": "meca500_programming_manual_2712", "text": "MoveJointsVel(\u03c91,\u03c92,\u03c93,\u03c94,\u03c95,\u03c96)", "source": "meca500_programming_manual", "chunk_index": 2712, "length": 32, "hash": "9cb7cf948c2ca5ade3d5a869100c1b13"}
{"id": "meca500_programming_manual_2713", "text": "\u2022 the desired velocity of each joint, in \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 2713, "length": 45, "hash": "f9e36deda76d01a39dccd955383612df"}
{"id": "meca500_programming_manual_2714", "text": "\u2022 the desired velocity of each joint, in \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 2714, "length": 45, "hash": "f9e36deda76d01a39dccd955383612df"}
{"id": "meca500_programming_manual_2715", "text": "The value of each of the arguments can be positive, negative or zero.", "source": "meca500_programming_manual", "chunk_index": 2715, "length": 69, "hash": "81c257bdbb51ed4fd7fd18d582d68242"}
{"id": "meca500_programming_manual_2716", "text": "The value of each of the arguments can be positive, negative or zero.", "source": "meca500_programming_manual", "chunk_index": 2716, "length": 69, "hash": "81c257bdbb51ed4fd7fd18d582d68242"}
{"id": "meca500_programming_manual_2717", "text": "The maximum joint velocities are given in technical-specifications-Meca500 of the robot\u2019s\nuser manual.", "source": "meca500_programming_manual", "chunk_index": 2717, "length": 102, "hash": "5ffd399e410c544c7a45ab8150684315"}
{"id": "meca500_programming_manual_2718", "text": "The maximum joint velocities are given in", "source": "meca500_programming_manual", "chunk_index": 2718, "length": 41, "hash": "10dda236bd3874aa41db374c18a3c371"}
{"id": "meca500_programming_manual_2719", "text": "technical-specifications-Meca500", "source": "meca500_programming_manual", "chunk_index": 2719, "length": 32, "hash": "223413700271e792f362e1af08e87ebc"}
{"id": "meca500_programming_manual_2720", "text": "of the robot\u2019s\nuser manual.", "source": "meca500_programming_manual", "chunk_index": 2720, "length": 27, "hash": "3378c7a5710b561f614bac715d6a419c"}
{"id": "meca500_programming_manual_2721", "text": "The specified desired joint velocities are modified proportionally by the joint velocity\noverride factor set by SetJointVelLimit(p) (page 165), when p < 100. In the Meca500 R4,\np can be greater than 100, but there will be a distortion, since not all joints can\nrotate faster than their top rated velocities (e.g., joints 1 and 2 can rotate up to 150%\nfaster, but joint 3 only 125%). Thus,\nif p = 100, you can still send the command\nMoveJointsVel(225,225,225,350,350,500) (page 138), but the robot joints will rotate only\nat the maximum velocities of the Meca500 R3.\nIn contrast, if p = 150, and you send\nthat same command, all joints will rotate at the requested rates (i.e., the maximum joint\nvelocities for the Meca500 R4).", "source": "meca500_programming_manual", "chunk_index": 2721, "length": 725, "hash": "4fe490c86995940c7f5f821d07f6c8d2"}
{"id": "meca500_programming_manual_2722", "text": "The specified desired joint velocities are modified proportionally by the joint velocity\noverride factor set by", "source": "meca500_programming_manual", "chunk_index": 2722, "length": 111, "hash": "efc7950d875d02dd6774c7e0e6000aee"}
{"id": "meca500_programming_manual_2723", "text": "< 100. In the Meca500 R4,", "source": "meca500_programming_manual", "chunk_index": 2723, "length": 25, "hash": "135c68cd56c9bb6d7e30d506a9e3e0a6"}
{"id": "meca500_programming_manual_2724", "text": "can be greater than 100, but there will be a distortion, since not all joints can\nrotate faster than their top rated velocities (e.g., joints 1 and 2 can rotate up to 150%\nfaster, but joint 3 only 125%). Thus,\nif", "source": "meca500_programming_manual", "chunk_index": 2724, "length": 212, "hash": "3bb82b7b5dc4826fdad67a4529ebb2fa"}
{"id": "meca500_programming_manual_2725", "text": "= 100, you can still send the command", "source": "meca500_programming_manual", "chunk_index": 2725, "length": 37, "hash": "5e64fd2eca46f2ec498d63d93f7b8567"}
{"id": "meca500_programming_manual_2726", "text": "MoveJointsVel(225,225,225,350,350,500)", "source": "meca500_programming_manual", "chunk_index": 2726, "length": 38, "hash": "bf3b3568361f029225b5c511be507f24"}
{"id": "meca500_programming_manual_2727", "text": "(page 138), but the robot joints will rotate only\nat the maximum velocities of the Meca500 R3.\nIn contrast, if", "source": "meca500_programming_manual", "chunk_index": 2727, "length": 110, "hash": "965dbf419fe0286e1e2c7dcf21d74277"}
{"id": "meca500_programming_manual_2728", "text": "that same command, all joints will rotate at the requested rates (i.e., the maximum joint\nvelocities for the Meca500 R4).", "source": "meca500_programming_manual", "chunk_index": 2728, "length": 121, "hash": "6895a9135307ec0e9b0fcd7631a5738f"}
{"id": "meca500_programming_manual_2729", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2729, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2730", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2730, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2731", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2731, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2732", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2732, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2733", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2733, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2734", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2734, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2735", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2735, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2736", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2736, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2737", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2737, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2738", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2738, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2739", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2739, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2740", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2740, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2741", "text": "In cyclic protocols,\nMotionCommandID 21. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2741, "length": 72, "hash": "307450485dcbb5f086f71021c6a444cb"}
{"id": "meca500_programming_manual_2742", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2742, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2743", "text": "21. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2743, "length": 35, "hash": "a6e248301b89dc2689c1fdbbbab9b1f5"}
{"id": "meca500_programming_manual_2744", "text": "(page 138) command is", "source": "meca500_programming_manual", "chunk_index": 2744, "length": 21, "hash": "f527353438425b928f6b5e5505d2aa1e"}
{"id": "meca500_programming_manual_2745", "text": "(page 138) command is", "source": "meca500_programming_manual", "chunk_index": 2745, "length": 21, "hash": "f527353438425b928f6b5e5505d2aa1e"}
{"id": "meca500_programming_manual_2746", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2746, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2747", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2747, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2748", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 2748, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_2749", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 2749, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_2750", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2750, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2751", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2751, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2752", "text": "This command makes the robot move its end-effector, so that its TRF ends up at a target\npose with respect to the WRF while the TCP moves along a linear path in Cartesian space, as\nillustrated in Figure 16b. If the target (desired) orientation of the TRF is different from the\ninitial orientation, the orientation will be modified along the path using a minimum-torque\npath.", "source": "meca500_programming_manual", "chunk_index": 2752, "length": 373, "hash": "18709672df6a7cda7d42b6febde67c75"}
{"id": "meca500_programming_manual_2753", "text": "This command makes the robot move its end-effector, so that its TRF ends up at a target\npose with respect to the WRF while the TCP moves along a linear path in Cartesian space, as\nillustrated in Figure 16b. If the target (desired) orientation of the TRF is different from the\ninitial orientation, the orientation will be modified along the path using a minimum-torque\npath.", "source": "meca500_programming_manual", "chunk_index": 2753, "length": 373, "hash": "18709672df6a7cda7d42b6febde67c75"}
{"id": "meca500_programming_manual_2754", "text": "MoveLin(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2754, "length": 20, "hash": "d470f7a58ba5b944a446b8d577951f11"}
{"id": "meca500_programming_manual_2755", "text": "MoveLin(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2755, "length": 20, "hash": "d470f7a58ba5b944a446b8d577951f11"}
{"id": "meca500_programming_manual_2756", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 2756, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "meca500_programming_manual_2757", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 2757, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "meca500_programming_manual_2758", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the target orientation of the TRF with respect to the\nWRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2758, "length": 105, "hash": "c8f74d28a118575de6caef31e7c68673"}
{"id": "meca500_programming_manual_2759", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the target orientation of the TRF with respect to the\nWRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2759, "length": 105, "hash": "c8f74d28a118575de6caef31e7c68673"}
{"id": "meca500_programming_manual_2760", "text": "With this command, normally, the initial and final robot postures have to be in the same\nconfiguration, {cs, ce, cw}. Only in some very peculiar cases, where the path passes exactly\nthrough a shoulder or wrist singularity, and when the automatic posture configuration\nselection is enabled with SetAutoConf(1) (page 149), a change in cs or cw, respectively, is\npossible (see Section 3).", "source": "meca500_programming_manual", "chunk_index": 2760, "length": 385, "hash": "eccc12b43b4ed760d4da2ab0971b31f5"}
{"id": "meca500_programming_manual_2761", "text": "With this command, normally, the initial and final robot postures have to be in the same\nconfiguration, {c", "source": "meca500_programming_manual", "chunk_index": 2761, "length": 106, "hash": "d4207a9a2505487b5c12b0b2fa9babf8"}
{"id": "meca500_programming_manual_2762", "text": "}. Only in some very peculiar cases, where the path passes exactly\nthrough a shoulder or wrist singularity, and when the automatic posture configuration\nselection is enabled with", "source": "meca500_programming_manual", "chunk_index": 2762, "length": 178, "hash": "10e41c6f6df850d7eb044df54ad5fa6f"}
{"id": "meca500_programming_manual_2763", "text": "(page 149), a change in c", "source": "meca500_programming_manual", "chunk_index": 2763, "length": 25, "hash": "0cf570479cf3c680896d43a5f0aa4275"}
{"id": "meca500_programming_manual_2764", "text": ", respectively, is\npossible (see Section 3).", "source": "meca500_programming_manual", "chunk_index": 2764, "length": 44, "hash": "50b7324e3795cdc115e8e4b1aa99bd80"}
{"id": "meca500_programming_manual_2765", "text": "If you specify a desired turn configuration, the MoveLin (page 141) command will be executed\nonly if the initial and final robot positions have the same turn configuration as the desired one.", "source": "meca500_programming_manual", "chunk_index": 2765, "length": 191, "hash": "f47bdc8ad14e62dff1d351e35d9078a1"}
{"id": "meca500_programming_manual_2766", "text": "If you specify a desired turn configuration, the", "source": "meca500_programming_manual", "chunk_index": 2766, "length": 48, "hash": "d41496f9b9cc8303546f457c3dce0fce"}
{"id": "meca500_programming_manual_2767", "text": "(page 141) command will be executed\nonly if the initial and final robot positions have the same turn configuration as the desired one.", "source": "meca500_programming_manual", "chunk_index": 2767, "length": 134, "hash": "5ae932f1091eba30b067713a2bbb0dae"}
{"id": "meca500_programming_manual_2768", "text": "If the complete motion cannot be performed due to singularities or joint limits, it will not\neven start, and an error will be generated. Similarly, the robot will not accept the MoveLin\n(page 141) command if the required end-effector reorientation is exactly 180\u00b0, because there\ncould be two possible paths.", "source": "meca500_programming_manual", "chunk_index": 2768, "length": 307, "hash": "7111b82c861b7d5c9743b16eb2636060"}
{"id": "meca500_programming_manual_2769", "text": "If the complete motion cannot be performed due to singularities or joint limits, it will not\neven start, and an error will be generated. Similarly, the robot will not accept the", "source": "meca500_programming_manual", "chunk_index": 2769, "length": 177, "hash": "2274ab681df57c37d045d4fc50e84b5f"}
{"id": "meca500_programming_manual_2770", "text": "(page 141) command if the required end-effector reorientation is exactly 180\u00b0, because there\ncould be two possible paths.", "source": "meca500_programming_manual", "chunk_index": 2770, "length": 121, "hash": "2255ef1bc3ace3a20dd370fa76af5c01"}
{"id": "meca500_programming_manual_2771", "text": "Use the MoveLin (page 141) command only when precise linear motion of the TCP is required.\nFor most cases, moving the robot between positions is faster using the MoveJoints (page 135)\nor MovePose (page 147) commands.", "source": "meca500_programming_manual", "chunk_index": 2771, "length": 216, "hash": "a92907120651a488a2f10d0ad906ad42"}
{"id": "meca500_programming_manual_2772", "text": "(page 141) command only when precise linear motion of the TCP is required.\nFor most cases, moving the robot between positions is faster using the", "source": "meca500_programming_manual", "chunk_index": 2772, "length": 145, "hash": "6c8da331894848d3c999ce44ae55eac1"}
{"id": "meca500_programming_manual_2773", "text": "(page 147) commands.", "source": "meca500_programming_manual", "chunk_index": 2773, "length": 20, "hash": "f65955e38680f82939da07062d2f5639"}
{"id": "meca500_programming_manual_2774", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2774, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2775", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2775, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2776", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2776, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2777", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2777, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2778", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2778, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2779", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2779, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2780", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2780, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2781", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2781, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2782", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2782, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2783", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2783, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2784", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2784, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2785", "text": "In cyclic protocols, the MoveLin (page 141) command is represented by MotionCommandID 3.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2785, "length": 120, "hash": "b8dd8eedb01477df738a2d95debe18b7"}
{"id": "meca500_programming_manual_2786", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 2786, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_2787", "text": "(page 141) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2787, "length": 36, "hash": "e1e4d625dce5835d7ee77c0188317ffe"}
{"id": "meca500_programming_manual_2788", "text": "3.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2788, "length": 34, "hash": "56b4f7398b2556dd481d6ab131b7321e"}
{"id": "meca500_programming_manual_2789", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2789, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2790", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2790, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2791", "text": "This command has the same behavior as the MoveLin (page 141) command, but allows a\ndesired pose to be specified relative to the current pose of the TRF. Thus, the arguments x,\ny, z, \u03b1, \u03b2, and \u03b3 represent the desired pose of the TRF with respect to the current pose of the\nTRF (i.e., the pose of the TRF just before executing the MoveLinRelTrf (page 143) command).", "source": "meca500_programming_manual", "chunk_index": 2791, "length": 363, "hash": "8494025c67961725b655c6f0e24a1785"}
{"id": "meca500_programming_manual_2792", "text": "This command has the same behavior as the", "source": "meca500_programming_manual", "chunk_index": 2792, "length": 41, "hash": "b3a4c85b3aa50d0f6a7b7925992523ec"}
{"id": "meca500_programming_manual_2793", "text": "(page 141) command, but allows a\ndesired pose to be specified relative to the current pose of the TRF. Thus, the arguments x,\ny, z, \u03b1, \u03b2, and \u03b3 represent the desired pose of the TRF with respect to the current pose of the\nTRF (i.e., the pose of the TRF just before executing the", "source": "meca500_programming_manual", "chunk_index": 2793, "length": 278, "hash": "df2dca9f156e5bce50dc62f841d50f39"}
{"id": "meca500_programming_manual_2794", "text": "(page 143) command).", "source": "meca500_programming_manual", "chunk_index": 2794, "length": 20, "hash": "f61010c0d7cbe3044ebf2f0ed6f399e8"}
{"id": "meca500_programming_manual_2795", "text": "As with the MoveLin (page 141) command, if the complete motion cannot be performed, it\nwill not even start and an error will be generated.", "source": "meca500_programming_manual", "chunk_index": 2795, "length": 138, "hash": "7c98b70c3475177afe4e0eb44952113c"}
{"id": "meca500_programming_manual_2796", "text": "(page 141) command, if the complete motion cannot be performed, it\nwill not even start and an error will be generated.", "source": "meca500_programming_manual", "chunk_index": 2796, "length": 118, "hash": "8388a9b49eb771b16b7ea108bcf89a75"}
{"id": "meca500_programming_manual_2797", "text": "MoveLinRelTrf(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2797, "length": 26, "hash": "6d4b3fab4da3c8799a9ae5e8e6ac5ed6"}
{"id": "meca500_programming_manual_2798", "text": "MoveLinRelTrf(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2798, "length": 26, "hash": "6d4b3fab4da3c8799a9ae5e8e6ac5ed6"}
{"id": "meca500_programming_manual_2799", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "meca500_programming_manual", "chunk_index": 2799, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "meca500_programming_manual_2800", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "meca500_programming_manual", "chunk_index": 2800, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "meca500_programming_manual_2801", "text": "\u03b1, \u03b2, \u03b3: Euler angles, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2801, "length": 34, "hash": "a783afce05412e84447c01af5bf6f718"}
{"id": "meca500_programming_manual_2802", "text": "\u03b1, \u03b2, \u03b3: Euler angles, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2802, "length": 34, "hash": "a783afce05412e84447c01af5bf6f718"}
{"id": "meca500_programming_manual_2803", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2803, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2804", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2804, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2805", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2805, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2806", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2806, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2807", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2807, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2808", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2808, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2809", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2809, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2810", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2810, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2811", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2811, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2812", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2812, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2813", "text": "In cyclic protocols,\nMotionCommandID 4. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2813, "length": 71, "hash": "5a3bd19d4435d6c07ab8fdaa40245a17"}
{"id": "meca500_programming_manual_2814", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2814, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2815", "text": "4. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2815, "length": 34, "hash": "4a9b7c8c63e2293dcc83afc4e8964f5f"}
{"id": "meca500_programming_manual_2816", "text": "(page 143) command is", "source": "meca500_programming_manual", "chunk_index": 2816, "length": 21, "hash": "e3a9a29c053fe24338d294dd941b7db6"}
{"id": "meca500_programming_manual_2817", "text": "(page 143) command is", "source": "meca500_programming_manual", "chunk_index": 2817, "length": 21, "hash": "e3a9a29c053fe24338d294dd941b7db6"}
{"id": "meca500_programming_manual_2818", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2818, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2819", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2819, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2820", "text": "This command is similar to the MoveLinRelTrf (page 143) command, but instead of defining\nthe desired pose with respect to the current pose of the TRF it is defined with respect to\na reference frame that has the same orientation as the WRF but its origin is at the current\nposition of the TCP.", "source": "meca500_programming_manual", "chunk_index": 2820, "length": 292, "hash": "edfea513942347cb2ca92ab07f25ec49"}
{"id": "meca500_programming_manual_2821", "text": "This command is similar to the", "source": "meca500_programming_manual", "chunk_index": 2821, "length": 30, "hash": "c95f4e09225d6d19fffccb318a2ce8e2"}
{"id": "meca500_programming_manual_2822", "text": "(page 143) command, but instead of defining\nthe desired pose with respect to the current pose of the TRF it is defined with respect to\na reference frame that has the same orientation as the WRF but its origin is at the current\nposition of the TCP.", "source": "meca500_programming_manual", "chunk_index": 2822, "length": 247, "hash": "c217f4bc39e51cf150a393f1dc3cd33a"}
{"id": "meca500_programming_manual_2823", "text": "MoveLinRelWrf(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2823, "length": 26, "hash": "fe8c1d14eafd915a7556f2e559830f2c"}
{"id": "meca500_programming_manual_2824", "text": "MoveLinRelWrf(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2824, "length": 26, "hash": "fe8c1d14eafd915a7556f2e559830f2c"}
{"id": "meca500_programming_manual_2825", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "meca500_programming_manual", "chunk_index": 2825, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "meca500_programming_manual_2826", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "meca500_programming_manual", "chunk_index": 2826, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "meca500_programming_manual_2827", "text": "\u03b1, \u03b2, \u03b3: Euler angles, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2827, "length": 34, "hash": "a783afce05412e84447c01af5bf6f718"}
{"id": "meca500_programming_manual_2828", "text": "\u03b1, \u03b2, \u03b3: Euler angles, in degrees.", "source": "meca500_programming_manual", "chunk_index": 2828, "length": 34, "hash": "a783afce05412e84447c01af5bf6f718"}
{"id": "meca500_programming_manual_2829", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2829, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2830", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2830, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2831", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2831, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2832", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2832, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2833", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2833, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2834", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2834, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2835", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2835, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2836", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2836, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2837", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2837, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2838", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2838, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2839", "text": "In cyclic protocols,\nMotionCommandID 5. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2839, "length": 71, "hash": "8324b72d9689c0a2f4900020185f8354"}
{"id": "meca500_programming_manual_2840", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2840, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2841", "text": "5. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2841, "length": 34, "hash": "b1dae8c7d511b0d344f996c9b1468553"}
{"id": "meca500_programming_manual_2842", "text": "(page 144) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2842, "length": 36, "hash": "31a4fecfae6f4e64642c6952d4ade421"}
{"id": "meca500_programming_manual_2843", "text": "(page 144) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2843, "length": 36, "hash": "31a4fecfae6f4e64642c6952d4ade421"}
{"id": "meca500_programming_manual_2844", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2844, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2845", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2845, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2846", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe TRF, or at a lower velocity if limited by joint velocity constraints (see SetJointVelLimit\n(page 165)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "meca500_programming_manual", "chunk_index": 2846, "length": 304, "hash": "67f2ed236fec0cb889c44009a8c617c9"}
{"id": "meca500_programming_manual_2847", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe TRF, or at a lower velocity if limited by joint velocity constraints (see", "source": "meca500_programming_manual", "chunk_index": 2847, "length": 169, "hash": "291dbfdac0b821ba4b4a99a8e0347785"}
{"id": "meca500_programming_manual_2848", "text": "(page 165)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "meca500_programming_manual", "chunk_index": 2848, "length": 117, "hash": "e68471db1151ad0fd6cd6797b6964211"}
{"id": "meca500_programming_manual_2849", "text": "The robot will decelerate to a complete stop after the duration specified by the command\nSetVelTimeout (page 180), unless a subsequent MoveLinVelTrf (page 145) or MoveLinVelWrf\n(page 146) command is issued, and. Additionally, the motion will stop if a PauseMotion\n(page 195) command is sent or if a motion limit is reached.", "source": "meca500_programming_manual", "chunk_index": 2849, "length": 323, "hash": "663eac932aae0f9650c7e39b88632c19"}
{"id": "meca500_programming_manual_2850", "text": "The robot will decelerate to a complete stop after the duration specified by the command", "source": "meca500_programming_manual", "chunk_index": 2850, "length": 88, "hash": "9f314b6340480b8b27b175f8e519561b"}
{"id": "meca500_programming_manual_2851", "text": "(page 180), unless a subsequent", "source": "meca500_programming_manual", "chunk_index": 2851, "length": 31, "hash": "e81af841a065b798d6cecac13558a1fe"}
{"id": "meca500_programming_manual_2852", "text": "(page 146) command is issued, and. Additionally, the motion will stop if a", "source": "meca500_programming_manual", "chunk_index": 2852, "length": 74, "hash": "4fedbc195e32a447961056755c2e7892"}
{"id": "meca500_programming_manual_2853", "text": "(page 195) command is sent or if a motion limit is reached.", "source": "meca500_programming_manual", "chunk_index": 2853, "length": 59, "hash": "2070e7988a1951500b0b79f1984665c1"}
{"id": "meca500_programming_manual_2854", "text": "Note that this command, unlike position-mode motion commands, does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered. Instead, the robot simply stops before reaching the limit.", "source": "meca500_programming_manual", "chunk_index": 2854, "length": 260, "hash": "e6b7126c2e0a2fa3f0fd840a7ad83c5a"}
{"id": "meca500_programming_manual_2855", "text": "Note that this command, unlike position-mode motion commands,", "source": "meca500_programming_manual", "chunk_index": 2855, "length": 61, "hash": "4daf9d6b3b17e51069640b2d67194c76"}
{"id": "meca500_programming_manual_2856", "text": "does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered", "source": "meca500_programming_manual", "chunk_index": 2856, "length": 138, "hash": "ec7e1e6ae87e52666c5a47cb71c4f717"}
{"id": "meca500_programming_manual_2857", "text": ". Instead, the robot simply stops before reaching the limit.", "source": "meca500_programming_manual", "chunk_index": 2857, "length": 60, "hash": "fe5aa25cfec86d3934e0262bd460120b"}
{"id": "meca500_programming_manual_2858", "text": "MoveLinVelTrf(x\u0307,y\u0307,\u017c,\u03c9x,\u03c9y,\u03c9z)", "source": "meca500_programming_manual", "chunk_index": 2858, "length": 31, "hash": "d11d8ae885a556b80317ce684bf3a0a3"}
{"id": "meca500_programming_manual_2859", "text": "MoveLinVelTrf(x\u0307,y\u0307,\u017c,\u03c9", "source": "meca500_programming_manual", "chunk_index": 2859, "length": 23, "hash": "8e2ba7526a9bb02aaf129ca35224d090"}
{"id": "meca500_programming_manual_2860", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP expressed in the TRF, in mm/s;", "source": "meca500_programming_manual", "chunk_index": 2860, "length": 90, "hash": "25638a824a45e875e140fd041e20bb42"}
{"id": "meca500_programming_manual_2861", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP expressed in the TRF, in mm/s;", "source": "meca500_programming_manual", "chunk_index": 2861, "length": 90, "hash": "25638a824a45e875e140fd041e20bb42"}
{"id": "meca500_programming_manual_2862", "text": "\u03c9x, \u03c9y, \u03c9z: the components of the angular velocity of the TRF expressed in the TRF, in\n\u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 2862, "length": 91, "hash": "c93f734c79eae903095fde3d913ae206"}
{"id": "meca500_programming_manual_2863", "text": ": the components of the angular velocity of the TRF expressed in the TRF, in\n\u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 2863, "length": 81, "hash": "6370ae4f354612a403fe521cbfcb142e"}
{"id": "meca500_programming_manual_2864", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2864, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2865", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2865, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2866", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2866, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2867", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2867, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2868", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2868, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2869", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2869, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2870", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2870, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2871", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2871, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2872", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2872, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2873", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2873, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2874", "text": "In cyclic protocols,\nMotionCommandID 23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2874, "length": 72, "hash": "9b6d7228d6b08f3081ba70fda24928cd"}
{"id": "meca500_programming_manual_2875", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2875, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2876", "text": "23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2876, "length": 35, "hash": "026d3741b3d95e3ace6b91414b436178"}
{"id": "meca500_programming_manual_2877", "text": "(page 145) command is", "source": "meca500_programming_manual", "chunk_index": 2877, "length": 21, "hash": "0a783837ab14a258083b8975e0168821"}
{"id": "meca500_programming_manual_2878", "text": "(page 145) command is", "source": "meca500_programming_manual", "chunk_index": 2878, "length": 21, "hash": "0a783837ab14a258083b8975e0168821"}
{"id": "meca500_programming_manual_2879", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2879, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2880", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2880, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2881", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe WRF, or at a lower velocity if limited by joint velocity constraints (see SetJointVelLimit\n(page 165)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "meca500_programming_manual", "chunk_index": 2881, "length": 304, "hash": "d5e24579e036038da6a9af41458b8a07"}
{"id": "meca500_programming_manual_2882", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe WRF, or at a lower velocity if limited by joint velocity constraints (see", "source": "meca500_programming_manual", "chunk_index": 2882, "length": 169, "hash": "75c20e6aaeeaadcf7d5ef885ac819693"}
{"id": "meca500_programming_manual_2883", "text": "(page 165)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "meca500_programming_manual", "chunk_index": 2883, "length": 117, "hash": "e68471db1151ad0fd6cd6797b6964211"}
{"id": "meca500_programming_manual_2884", "text": "The robot will decelerate to a complete stop after the duration specified by the command\nSetVelTimeout (page 180), unless a subsequent MoveLinVelTrf (page 145) or MoveLinVelWrf\n(page 146) command is issued, and. Additionally, the motion will stop if a PauseMotion\n(page 195) command is sent or if a motion limit is reached.", "source": "meca500_programming_manual", "chunk_index": 2884, "length": 323, "hash": "663eac932aae0f9650c7e39b88632c19"}
{"id": "meca500_programming_manual_2885", "text": "The robot will decelerate to a complete stop after the duration specified by the command", "source": "meca500_programming_manual", "chunk_index": 2885, "length": 88, "hash": "9f314b6340480b8b27b175f8e519561b"}
{"id": "meca500_programming_manual_2886", "text": "(page 180), unless a subsequent", "source": "meca500_programming_manual", "chunk_index": 2886, "length": 31, "hash": "e81af841a065b798d6cecac13558a1fe"}
{"id": "meca500_programming_manual_2887", "text": "(page 146) command is issued, and. Additionally, the motion will stop if a", "source": "meca500_programming_manual", "chunk_index": 2887, "length": 74, "hash": "4fedbc195e32a447961056755c2e7892"}
{"id": "meca500_programming_manual_2888", "text": "(page 195) command is sent or if a motion limit is reached.", "source": "meca500_programming_manual", "chunk_index": 2888, "length": 59, "hash": "2070e7988a1951500b0b79f1984665c1"}
{"id": "meca500_programming_manual_2889", "text": "Note that this command, unlike position-mode motion commands, does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered. Instead, the robot simply stops before reaching the limit.", "source": "meca500_programming_manual", "chunk_index": 2889, "length": 260, "hash": "e6b7126c2e0a2fa3f0fd840a7ad83c5a"}
{"id": "meca500_programming_manual_2890", "text": "Note that this command, unlike position-mode motion commands,", "source": "meca500_programming_manual", "chunk_index": 2890, "length": 61, "hash": "4daf9d6b3b17e51069640b2d67194c76"}
{"id": "meca500_programming_manual_2891", "text": "does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered", "source": "meca500_programming_manual", "chunk_index": 2891, "length": 138, "hash": "ec7e1e6ae87e52666c5a47cb71c4f717"}
{"id": "meca500_programming_manual_2892", "text": ". Instead, the robot simply stops before reaching the limit.", "source": "meca500_programming_manual", "chunk_index": 2892, "length": 60, "hash": "fe5aa25cfec86d3934e0262bd460120b"}
{"id": "meca500_programming_manual_2893", "text": "MoveLinVelWrf(x\u0307,y\u0307,\u017c,\u03c9x,\u03c9y,\u03c9z)", "source": "meca500_programming_manual", "chunk_index": 2893, "length": 31, "hash": "4e74f1dc46bcf68c6908cea9049e799b"}
{"id": "meca500_programming_manual_2894", "text": "MoveLinVelWrf(x\u0307,y\u0307,\u017c,\u03c9", "source": "meca500_programming_manual", "chunk_index": 2894, "length": 23, "hash": "9e3262f3efa5bc4b17db96ad1f670abf"}
{"id": "meca500_programming_manual_2895", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP with respect to the WRF, in mm/s;", "source": "meca500_programming_manual", "chunk_index": 2895, "length": 93, "hash": "33ed9df0d9a229877343a43346b6faa7"}
{"id": "meca500_programming_manual_2896", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP with respect to the WRF, in mm/s;", "source": "meca500_programming_manual", "chunk_index": 2896, "length": 93, "hash": "33ed9df0d9a229877343a43346b6faa7"}
{"id": "meca500_programming_manual_2897", "text": "\u03c9x, \u03c9y, \u03c9z: the components of the angular velocity of the TRF with respect to the WRF,\nin \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 2897, "length": 94, "hash": "c206de7e5f3e4ae7915c52368c12c6e5"}
{"id": "meca500_programming_manual_2898", "text": ": the components of the angular velocity of the TRF with respect to the WRF,\nin \u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 2898, "length": 84, "hash": "85bc9e5fe30fb740ef13066e6bb62f0d"}
{"id": "meca500_programming_manual_2899", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2899, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2900", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2900, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2901", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2901, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2902", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2902, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2903", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2903, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2904", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2904, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2905", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2905, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2906", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2906, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2907", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2907, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2908", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2908, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2909", "text": "In cyclic protocols,\nMotionCommandID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2909, "length": 72, "hash": "399b608cb12e85068e8b95f09309433e"}
{"id": "meca500_programming_manual_2910", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2910, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2911", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2911, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_2912", "text": "(page 146) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2912, "length": 36, "hash": "8eddf92ec965183e1c8d4c9e7b93ff5a"}
{"id": "meca500_programming_manual_2913", "text": "(page 146) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2913, "length": 36, "hash": "8eddf92ec965183e1c8d4c9e7b93ff5a"}
{"id": "meca500_programming_manual_2914", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2914, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2915", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2915, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2916", "text": "This command moves the robot\u2019s TRF to a specified pose relative to the WRF. The robot\ncontroller calculates all possible joint sets corresponding to the target pose, including those\nassociated with singular robot postures.\nIt then selects the target joint set based on the\nspecified robot posture and turn configurations, if provided, or the one requiring the least\ntime to reach.", "source": "meca500_programming_manual", "chunk_index": 2916, "length": 380, "hash": "0426df50dab6166fb08237fb23de329e"}
{"id": "meca500_programming_manual_2917", "text": "This command moves the robot\u2019s TRF to a specified pose relative to the WRF. The robot\ncontroller calculates all possible joint sets corresponding to the target pose, including those\nassociated with singular robot postures.\nIt then selects the target joint set based on the\nspecified robot posture and turn configurations, if provided, or the one requiring the least\ntime to reach.", "source": "meca500_programming_manual", "chunk_index": 2917, "length": 380, "hash": "0426df50dab6166fb08237fb23de329e"}
{"id": "meca500_programming_manual_2918", "text": "The selected joint configuration is executed internally using a MoveJoints (page 135)\ncommand. As a result, all joint rotations start and stop simultaneously and move as quickly\nas possible, subject to the limits defined by the SetJointVel (page 163) and SetJointVelLimit\n(page 165) commands. The resulting motion is linear in joint space but nonlinear in Cartesian\nspace, meaning the TCP\u2019s path to its final destination is not easily predictable.", "source": "meca500_programming_manual", "chunk_index": 2918, "length": 447, "hash": "0b09b77539ff31ae89c19a1500b9c83f"}
{"id": "meca500_programming_manual_2919", "text": "The selected joint configuration is executed internally using a", "source": "meca500_programming_manual", "chunk_index": 2919, "length": 63, "hash": "8738264d0eaf63ecaf6df671474342c8"}
{"id": "meca500_programming_manual_2920", "text": "(page 135)\ncommand. As a result, all joint rotations start and stop simultaneously and move as quickly\nas possible, subject to the limits defined by the", "source": "meca500_programming_manual", "chunk_index": 2920, "length": 152, "hash": "7a3dfaf653ec18f6b9af16cb11223fa3"}
{"id": "meca500_programming_manual_2921", "text": "(page 165) commands. The resulting motion is linear in joint space but nonlinear in Cartesian\nspace, meaning the TCP\u2019s path to its final destination is not easily predictable.", "source": "meca500_programming_manual", "chunk_index": 2921, "length": 175, "hash": "9698b151783f0f011b0bb08c0a1319ab"}
{"id": "meca500_programming_manual_2922", "text": "MovePose(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2922, "length": 21, "hash": "672c83c53769415109163ba71216f221"}
{"id": "meca500_programming_manual_2923", "text": "MovePose(x,y,z,\u03b1,\u03b2,\u03b3)", "source": "meca500_programming_manual", "chunk_index": 2923, "length": 21, "hash": "672c83c53769415109163ba71216f221"}
{"id": "meca500_programming_manual_2924", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 2924, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "meca500_programming_manual_2925", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 2925, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "meca500_programming_manual_2926", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the target orientation of the TRF relative to the WRF,\nin degrees.", "source": "meca500_programming_manual", "chunk_index": 2926, "length": 101, "hash": "03415e8e5dce13a978159fe34d7a47c9"}
{"id": "meca500_programming_manual_2927", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the target orientation of the TRF relative to the WRF,\nin degrees.", "source": "meca500_programming_manual", "chunk_index": 2927, "length": 101, "hash": "03415e8e5dce13a978159fe34d7a47c9"}
{"id": "meca500_programming_manual_2928", "text": "With this command, the robot can transition through or begin/end at singular robot postures\nwithout any issues. However, as with the MoveJoints (page 135) command, if the complete\nmotion cannot be executed due to joint limits, the motion will not start, and an error will be\ngenerated.", "source": "meca500_programming_manual", "chunk_index": 2928, "length": 285, "hash": "5e87f97be9d46dfa8bb446b1c879a01b"}
{"id": "meca500_programming_manual_2929", "text": "With this command, the robot can transition through or begin/end at singular robot postures\nwithout any issues. However, as with the", "source": "meca500_programming_manual", "chunk_index": 2929, "length": 132, "hash": "1081d9a13f215ec1cb5c9c1439e74af4"}
{"id": "meca500_programming_manual_2930", "text": "(page 135) command, if the complete\nmotion cannot be executed due to joint limits, the motion will not start, and an error will be\ngenerated.", "source": "meca500_programming_manual", "chunk_index": 2930, "length": 141, "hash": "4545f9516a9466954a2cf3288d636bc3"}
{"id": "meca500_programming_manual_2931", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2931, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2932", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2932, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2933", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2933, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2934", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2934, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2935", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2935, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2936", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2936, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2937", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2937, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2938", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2938, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2939", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2939, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2940", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2940, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2941", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2941, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2942", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2942, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2943", "text": "In cyclic protocols, the MovePose (page 147) command is represented by MotionCommandID\n2. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2943, "length": 121, "hash": "621cdfd2a9c146ec514405d16e292ed9"}
{"id": "meca500_programming_manual_2944", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 2944, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_2945", "text": "(page 147) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2945, "length": 36, "hash": "aef8bbb72a3501d408714e6bbe726ff4"}
{"id": "meca500_programming_manual_2946", "text": "2. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2946, "length": 34, "hash": "820ffeb2e2b5ca121ba4c2da658982cb"}
{"id": "meca500_programming_manual_2947", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2947, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2948", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2948, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2949", "text": "This command enables or disables the automatic posture configuration selection, to be\nobserved in the MovePose (page 147) and MoveLin* commands. This automatic selection,\nin conjunction with the turn configuration selection (see Section 3 and Section 3), allows the\ncontroller to choose the \u201cclosest\u201d joint set corresponding to the target pose.", "source": "meca500_programming_manual", "chunk_index": 2949, "length": 344, "hash": "37c5e0e48a9bcbe8772ce4833f3ad945"}
{"id": "meca500_programming_manual_2950", "text": "This command enables or disables the automatic posture configuration selection, to be\nobserved in the", "source": "meca500_programming_manual", "chunk_index": 2950, "length": 101, "hash": "58a1a4cce11ba708a64b9d1aefce9ed2"}
{"id": "meca500_programming_manual_2951", "text": "(page 147) and MoveLin* commands. This automatic selection,\nin conjunction with the turn configuration selection (see Section 3 and Section 3), allows the\ncontroller to choose the \u201cclosest\u201d joint set corresponding to the target pose.", "source": "meca500_programming_manual", "chunk_index": 2951, "length": 233, "hash": "20e1f3dfc2b892146d36feb1c7ef558f"}
{"id": "meca500_programming_manual_2952", "text": "In the case of MoveLin* commands, enabling the automatic posture configuration selection\nallows the change of configuration, but only if the path happens to pass exactly through a\nwrist or shoulder singularity.", "source": "meca500_programming_manual", "chunk_index": 2952, "length": 210, "hash": "5eee61d6779eed5b97979c3f7cf347a3"}
{"id": "meca500_programming_manual_2953", "text": "In the case of MoveLin* commands, enabling the automatic posture configuration selection\nallows the change of configuration, but only if the path happens to pass exactly through a\nwrist or shoulder singularity.", "source": "meca500_programming_manual", "chunk_index": 2953, "length": 210, "hash": "5eee61d6779eed5b97979c3f7cf347a3"}
{"id": "meca500_programming_manual_2954", "text": "\u2022 e: enable (1) or disable (0) automatic posture configuration selection.", "source": "meca500_programming_manual", "chunk_index": 2954, "length": 73, "hash": "c978fb42d213b260820008a448bb0075"}
{"id": "meca500_programming_manual_2955", "text": "\u2022 e: enable (1) or disable (0) automatic posture configuration selection.", "source": "meca500_programming_manual", "chunk_index": 2955, "length": 73, "hash": "c978fb42d213b260820008a448bb0075"}
{"id": "meca500_programming_manual_2956", "text": "The automatic posture configuration selection is enabled by default. If you disable it, the new\ndesired posture configuration will be the one corresponding to the current robot position,\ni.e., the one after all preceding motion commands have been completed. Note, however, that\nif you disable the automatic posture configuration selection in a singular robot posture, the\ncontroller will automatically choose one of the boundary configurations. For example, if you\nexecute SetAutoConf(0) (page 149) while the robot is at the joint set {0,0,0,0,0,0}, the new\ndesired configuration will be {1,1,1}. Finally, the automatic robot configuration selection is\nalso disabled as soon as the robot receives the command SetConf (page 157).", "source": "meca500_programming_manual", "chunk_index": 2956, "length": 728, "hash": "ac79b8b6d191e0ca40a95d964a0bc0f0"}
{"id": "meca500_programming_manual_2957", "text": "The automatic posture configuration selection is enabled by default. If you disable it, the new\ndesired posture configuration will be the one corresponding to the current robot position,\ni.e., the one after all preceding motion commands have been completed. Note, however, that\nif you disable the automatic posture configuration selection in a singular robot posture, the\ncontroller will automatically choose one of the boundary configurations. For example, if you\nexecute", "source": "meca500_programming_manual", "chunk_index": 2957, "length": 472, "hash": "8d8c6c3bf33013b3e35e7efc9b32e779"}
{"id": "meca500_programming_manual_2958", "text": "(page 149) while the robot is at the joint set {0,0,0,0,0,0}, the new\ndesired configuration will be {1,1,1}. Finally, the automatic robot configuration selection is\nalso disabled as soon as the robot receives the command", "source": "meca500_programming_manual", "chunk_index": 2958, "length": 220, "hash": "0aa04a114d76e9ee49e2674c9e10f460"}
{"id": "meca500_programming_manual_2959", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2959, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2960", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2960, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2961", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2961, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2962", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2962, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2963", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2963, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2964", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2964, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2965", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2965, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2966", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2966, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2967", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2967, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2968", "text": "In cyclic protocols, the SetAutoConf (page 149) command is represented by MotionCommandID\n16. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2968, "length": 125, "hash": "ddc11e3db802fa20d98b4897b83dcaa7"}
{"id": "meca500_programming_manual_2969", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 2969, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_2970", "text": "(page 149) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2970, "length": 36, "hash": "4a9e2f5fcba82c31b39f569e1e4d0489"}
{"id": "meca500_programming_manual_2971", "text": "16. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2971, "length": 35, "hash": "46b6e548dd5ee40c6cc7e2615ec725b0"}
{"id": "meca500_programming_manual_2972", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2972, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2973", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2973, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2974", "text": "This command enables/disables the automatic turn selection for the last joint of the robot\n(see Section 3 and Section 3). It affects the MovePose (page 147) command and all MoveLin*\ncommands. When the automatic turn selection is enabled, and a MovePose (page 147)\ncommand is executed, the last joint will always take the shortest path, and rotate no more than\n180\u00b0. In the case of a MoveLin* command, however, enabling the automatic turn selection\nsimply allows the change of turn configuration along the linear move.", "source": "meca500_programming_manual", "chunk_index": 2974, "length": 517, "hash": "95be7a655ed4ec6a4cfa6f86a5e934bd"}
{"id": "meca500_programming_manual_2975", "text": "This command enables/disables the automatic turn selection for the last joint of the robot\n(see Section 3 and Section 3). It affects the", "source": "meca500_programming_manual", "chunk_index": 2975, "length": 136, "hash": "c7ee3d41b6b90c04a45013f66ef3c360"}
{"id": "meca500_programming_manual_2976", "text": "(page 147) command and all MoveLin*\ncommands. When the automatic turn selection is enabled, and a", "source": "meca500_programming_manual", "chunk_index": 2976, "length": 97, "hash": "86ee74beee65a2828ef239db925a24ba"}
{"id": "meca500_programming_manual_2977", "text": "(page 147)\ncommand is executed, the last joint will always take the shortest path, and rotate no more than\n180\u00b0. In the case of a MoveLin* command, however, enabling the automatic turn selection\nsimply allows the change of turn configuration along the linear move.", "source": "meca500_programming_manual", "chunk_index": 2977, "length": 264, "hash": "a5348fd6b28db9ea924e6b062f8c2af6"}
{"id": "meca500_programming_manual_2978", "text": "\u2022 e: enable (1) or disable (0) automatic turn configuration selection.", "source": "meca500_programming_manual", "chunk_index": 2978, "length": 70, "hash": "9d51233bd67c815bf791c442506e81a7"}
{"id": "meca500_programming_manual_2979", "text": "\u2022 e: enable (1) or disable (0) automatic turn configuration selection.", "source": "meca500_programming_manual", "chunk_index": 2979, "length": 70, "hash": "9d51233bd67c815bf791c442506e81a7"}
{"id": "meca500_programming_manual_2980", "text": "SetAutoConfTurn (page 150) is enabled by default. If you disable the automatic turn selection,\nthe new desired turn configuration will be the one corresponding to the current robot\nposition, i.e., the one after all preceding motion commands have been completed. Finally,\nthe automatic turn configuration selection is also disabled as soon as the robot receives the\ncommand SetConfTurn (page 159).", "source": "meca500_programming_manual", "chunk_index": 2980, "length": 396, "hash": "23dd2d1757a32451edf916262e9cbd42"}
{"id": "meca500_programming_manual_2981", "text": "(page 150) is enabled by default. If you disable the automatic turn selection,\nthe new desired turn configuration will be the one corresponding to the current robot\nposition, i.e., the one after all preceding motion commands have been completed. Finally,\nthe automatic turn configuration selection is also disabled as soon as the robot receives the\ncommand", "source": "meca500_programming_manual", "chunk_index": 2981, "length": 356, "hash": "4e0a69e93dbdb0f6aba63c0518d3af65"}
{"id": "meca500_programming_manual_2982", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2982, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_2983", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 2983, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_2984", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 2984, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_2985", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 2985, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_2986", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2986, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2987", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 2987, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_2988", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2988, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2989", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 2989, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_2990", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2990, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2991", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 2991, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_2992", "text": "In cyclic protocols,\nMotionCommandID 26. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2992, "length": 72, "hash": "eb1ae34230fb4d79b8d8d85e859cb6ac"}
{"id": "meca500_programming_manual_2993", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 2993, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_2994", "text": "26. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 2994, "length": 35, "hash": "72b26842366a26cbd946f316d46d4efa"}
{"id": "meca500_programming_manual_2995", "text": "the SetAutoConfTurn (page 150) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2995, "length": 56, "hash": "8cbf48757cf14eff9c0d0e461f32eca7"}
{"id": "meca500_programming_manual_2996", "text": "(page 150) command is represented by", "source": "meca500_programming_manual", "chunk_index": 2996, "length": 36, "hash": "d9648cb98638de4746c5fdf2bd871344"}
{"id": "meca500_programming_manual_2997", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2997, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2998", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 2998, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_2999", "text": "This command enables/disables the robot\u2019s blending feature (Section 3). Note that there is\nblending only between consecutive movements with the position-mode joint-space commands\nMoveJoints (page 135), MoveJointsRel (page 137), MovePose (page 147) and MoveJump\n(page 140), or between consecutive movements with the position-mode Cartesian-space\ncommands MoveLin (page 141), MoveLinRelTrf (page 143) and MoveLinRelTrf (page 143).\nFor example, there will never be blending between the trajectories of a MovePose (page 147)\ncommand followed by a MoveLin (page 141) command.", "source": "meca500_programming_manual", "chunk_index": 2999, "length": 570, "hash": "d70a562a8af22e319dd04ca37edef313"}
{"id": "meca500_programming_manual_3000", "text": "This command enables/disables the robot\u2019s blending feature (Section 3). Note that there is\nblending only between consecutive movements with the position-mode joint-space commands", "source": "meca500_programming_manual", "chunk_index": 3000, "length": 178, "hash": "4da4016cabf346bd4e7c60736e62d2be"}
{"id": "meca500_programming_manual_3001", "text": "(page 140), or between consecutive movements with the position-mode Cartesian-space\ncommands", "source": "meca500_programming_manual", "chunk_index": 3001, "length": 92, "hash": "83b9e75bee62f9b14865d8c91bfda795"}
{"id": "meca500_programming_manual_3002", "text": "(page 143).\nFor example, there will never be blending between the trajectories of a", "source": "meca500_programming_manual", "chunk_index": 3002, "length": 83, "hash": "ff8f177d1c3047cddb159df2969729eb"}
{"id": "meca500_programming_manual_3003", "text": "(page 147)\ncommand followed by a", "source": "meca500_programming_manual", "chunk_index": 3003, "length": 32, "hash": "83c7d7aa2f3ddf7e53df207742f90bdd"}
{"id": "meca500_programming_manual_3004", "text": "\u2022 p: percentage of blending, ranging from 0 (blending disabled) to 100.", "source": "meca500_programming_manual", "chunk_index": 3004, "length": 71, "hash": "b4d92e7072bfbc242ac10537bc22a8bc"}
{"id": "meca500_programming_manual_3005", "text": "\u2022 p: percentage of blending, ranging from 0 (blending disabled) to 100.", "source": "meca500_programming_manual", "chunk_index": 3005, "length": 71, "hash": "b4d92e7072bfbc242ac10537bc22a8bc"}
{"id": "meca500_programming_manual_3006", "text": "Blending is enabled at 100% by default.", "source": "meca500_programming_manual", "chunk_index": 3006, "length": 39, "hash": "5ad9f515f7b67cec265f0d7f276cbdce"}
{"id": "meca500_programming_manual_3007", "text": "Blending is enabled at 100% by default.", "source": "meca500_programming_manual", "chunk_index": 3007, "length": 39, "hash": "5ad9f515f7b67cec265f0d7f276cbdce"}
{"id": "meca500_programming_manual_3008", "text": "A blending of 100% corresponds to a blending that occurs 100% of the duration of the\nacceleration and develeration periods, controlled by SetJointAcc (page 161), SetCartAcc\n(page 152) and SetJointVelLimit (page 165).", "source": "meca500_programming_manual", "chunk_index": 3008, "length": 216, "hash": "9160a95114b5e9539e2a33d29c8505a5"}
{"id": "meca500_programming_manual_3009", "text": "A blending of 100% corresponds to a blending that occurs 100% of the duration of the\nacceleration and develeration periods, controlled by", "source": "meca500_programming_manual", "chunk_index": 3009, "length": 137, "hash": "d02904ed3e5578f04a2708f756cc2fd8"}
{"id": "meca500_programming_manual_3010", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3010, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3011", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3011, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3012", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3012, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3013", "text": "(page 359), not in an error state and when no safety signal conditions are", "source": "meca500_programming_manual", "chunk_index": 3013, "length": 74, "hash": "9e583239b768bc2993933d9d8983ada4"}
{"id": "meca500_programming_manual_3014", "text": "present. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3014, "length": 63, "hash": "8863c95c2fb90f5a7199504e03bd575e"}
{"id": "meca500_programming_manual_3015", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3015, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3016", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3016, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3017", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3017, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3018", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3018, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3019", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3019, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3020", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3020, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3021", "text": "In cyclic protocols, the SetBlending (page 151) command is represented by MotionCommandID\n7. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3021, "length": 124, "hash": "2ee3bca29213a7c6522947b974b226cf"}
{"id": "meca500_programming_manual_3022", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3022, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3023", "text": "(page 151) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3023, "length": 36, "hash": "6a9be307f7704e0db01752ad754d7a9b"}
{"id": "meca500_programming_manual_3024", "text": "7. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3024, "length": 34, "hash": "c3547f926bd0d065b2f87980b2b61479"}
{"id": "meca500_programming_manual_3025", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3025, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3026", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3026, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3027", "text": "This command limits the Cartesian acceleration (both linear and angular) of the TRF relative\nto the WRF during movements resulting from Cartesian-space commands (see Figure 15).\nNote that using this command causes the robot to come to a complete stop, even if blending\nis enabled.", "source": "meca500_programming_manual", "chunk_index": 3027, "length": 280, "hash": "91c5b1fab025f2f9db5ef5bf7377166b"}
{"id": "meca500_programming_manual_3028", "text": "This command limits the Cartesian acceleration (both linear and angular) of the TRF relative\nto the WRF during movements resulting from Cartesian-space commands (see Figure 15).\nNote that using this command causes the robot to come to a complete stop, even if blending\nis enabled.", "source": "meca500_programming_manual", "chunk_index": 3028, "length": 280, "hash": "91c5b1fab025f2f9db5ef5bf7377166b"}
{"id": "meca500_programming_manual_3029", "text": "\u2022 p: percentage of maximum acceleration of the TRF, ranging from 0.001 to 600.", "source": "meca500_programming_manual", "chunk_index": 3029, "length": 78, "hash": "a5bf48bc7ba90507999fccfdf5e68c51"}
{"id": "meca500_programming_manual_3030", "text": "\u2022 p: percentage of maximum acceleration of the TRF, ranging from 0.001 to 600.", "source": "meca500_programming_manual", "chunk_index": 3030, "length": 78, "hash": "a5bf48bc7ba90507999fccfdf5e68c51"}
{"id": "meca500_programming_manual_3031", "text": "The default end-effector acceleration limit is 50%.", "source": "meca500_programming_manual", "chunk_index": 3031, "length": 51, "hash": "d609db762fd490a04cf9308a6e0b9f92"}
{"id": "meca500_programming_manual_3032", "text": "The default end-effector acceleration limit is 50%.", "source": "meca500_programming_manual", "chunk_index": 3032, "length": 51, "hash": "d609db762fd490a04cf9308a6e0b9f92"}
{"id": "meca500_programming_manual_3033", "text": "When using large accelerations and a heavy payload, we recommend using the SetPayload\n(page 173) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the SetTorqueLimitsCfg (page 177)).", "source": "meca500_programming_manual", "chunk_index": 3033, "length": 324, "hash": "8ef914a4de24a15f3c7cad8cc0689c3e"}
{"id": "meca500_programming_manual_3034", "text": "When using large accelerations and a heavy payload, we recommend using the", "source": "meca500_programming_manual", "chunk_index": 3034, "length": 74, "hash": "e0f135f73d70b15acb78be10ef16e337"}
{"id": "meca500_programming_manual_3035", "text": "(page 173) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the", "source": "meca500_programming_manual", "chunk_index": 3035, "length": 206, "hash": "933f402dbc9ff711672897a087881069"}
{"id": "meca500_programming_manual_3036", "text": "Note that the argument of this command is exceptionally limited to 600. This is because in\nfirmware 8, a change was made to allow the robot to accelerate much faster. For backwards\ncompatibility, however, 100% now corresponds to 100% in firmware 7 and before.", "source": "meca500_programming_manual", "chunk_index": 3036, "length": 259, "hash": "bf5c9c2d0ed080551c5cfe0afeecf288"}
{"id": "meca500_programming_manual_3037", "text": "Note that the argument of this command is exceptionally limited to 600. This is because in\nfirmware 8, a change was made to allow the robot to accelerate much faster. For backwards\ncompatibility, however, 100% now corresponds to 100% in firmware 7 and before.", "source": "meca500_programming_manual", "chunk_index": 3037, "length": 259, "hash": "bf5c9c2d0ed080551c5cfe0afeecf288"}
{"id": "meca500_programming_manual_3038", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3038, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3039", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3039, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3040", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3040, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3041", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3041, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3042", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3042, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3043", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3043, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3044", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3044, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3045", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3045, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3046", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3046, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3047", "text": "In cyclic protocols, the SetCartAcc (page 152) command is represented by MotionCommandID\n12. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3047, "length": 124, "hash": "91798707b19337f54a7a7324997e46e8"}
{"id": "meca500_programming_manual_3048", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3048, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3049", "text": "(page 152) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3049, "length": 36, "hash": "b70e7d6136be02213c2107e6ea386b9a"}
{"id": "meca500_programming_manual_3050", "text": "12. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3050, "length": 35, "hash": "268ba74d71174f53bfb8f40b9d7f7f86"}
{"id": "meca500_programming_manual_3051", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3051, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3052", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3052, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3053", "text": "This command sets the desired and maximum angular velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the MoveLin (page 141), MoveLinRelTrf\n(page 143) and MoveLinRelWrf (page 144) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see SetMoveMode (page 172)).", "source": "meca500_programming_manual", "chunk_index": 3053, "length": 342, "hash": "314559d816133c0ba8ee164c83037bf4"}
{"id": "meca500_programming_manual_3054", "text": "This command sets the", "source": "meca500_programming_manual", "chunk_index": 3054, "length": 21, "hash": "82426e4bbce9b39e98bca7221d468806"}
{"id": "meca500_programming_manual_3055", "text": "angular velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the", "source": "meca500_programming_manual", "chunk_index": 3055, "length": 105, "hash": "d0c381e0094a86efffbd59fbe86f8b86"}
{"id": "meca500_programming_manual_3056", "text": "(page 144) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see", "source": "meca500_programming_manual", "chunk_index": 3056, "length": 106, "hash": "e28c912d10fab1c34009d45b878ee2d0"}
{"id": "meca500_programming_manual_3057", "text": "\u2022 \u03c9: TRF angular velocity limit, in \u00b0/s, ranging from 0.001 to 1,000.", "source": "meca500_programming_manual", "chunk_index": 3057, "length": 69, "hash": "14c81a276bbd4a4c497c3d3369e59b40"}
{"id": "meca500_programming_manual_3058", "text": "\u2022 \u03c9: TRF angular velocity limit, in \u00b0/s, ranging from 0.001 to 1,000.", "source": "meca500_programming_manual", "chunk_index": 3058, "length": 69, "hash": "14c81a276bbd4a4c497c3d3369e59b40"}
{"id": "meca500_programming_manual_3059", "text": "The default end-effector angular velocity limit is 45\u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 3059, "length": 57, "hash": "7e15a553ef440dccd65bd9bd6ce6dbe1"}
{"id": "meca500_programming_manual_3060", "text": "The default end-effector angular velocity limit is 45\u00b0/s.", "source": "meca500_programming_manual", "chunk_index": 3060, "length": 57, "hash": "7e15a553ef440dccd65bd9bd6ce6dbe1"}
{"id": "meca500_programming_manual_3061", "text": "The actual angular velocity may be lower (but never higher) than requested at certain\nportions or throughout the linear path to ensure compliance with the joint velocity limits\nset by the SetJointVelLimit (page 165) command and the linear velocity limit set by the\nSetCartLinVel (page 154) command.", "source": "meca500_programming_manual", "chunk_index": 3061, "length": 298, "hash": "5fcec2568c5652d1f8cec7940b9e6c19"}
{"id": "meca500_programming_manual_3062", "text": "The actual angular velocity may be lower (but never higher) than requested at certain\nportions or throughout the linear path to ensure compliance with the joint velocity limits\nset by the", "source": "meca500_programming_manual", "chunk_index": 3062, "length": 187, "hash": "9fdf1a9e6b849464831800600d431408"}
{"id": "meca500_programming_manual_3063", "text": "(page 165) command and the linear velocity limit set by the", "source": "meca500_programming_manual", "chunk_index": 3063, "length": 59, "hash": "2fc8634682aa2b898a4caf87541f8b1f"}
{"id": "meca500_programming_manual_3064", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3064, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3065", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3065, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3066", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3066, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3067", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3067, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3068", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3068, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3069", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3069, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3070", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3070, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3071", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3071, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3072", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3072, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3073", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3073, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3074", "text": "In cyclic protocols,\nMotionCommandID 10. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3074, "length": 72, "hash": "cb07808d5c8852f61216a90f0a909c7c"}
{"id": "meca500_programming_manual_3075", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3075, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3076", "text": "10. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3076, "length": 35, "hash": "e815ae432376f48f3a6abb811b76617a"}
{"id": "meca500_programming_manual_3077", "text": "(page 153) command is", "source": "meca500_programming_manual", "chunk_index": 3077, "length": 21, "hash": "8957a2ce916407dde3b8644b49e2d5f6"}
{"id": "meca500_programming_manual_3078", "text": "(page 153) command is", "source": "meca500_programming_manual", "chunk_index": 3078, "length": 21, "hash": "8957a2ce916407dde3b8644b49e2d5f6"}
{"id": "meca500_programming_manual_3079", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3079, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3080", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3080, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3081", "text": "This command sets the desired and maximum linear velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the MoveLin (page 141), MoveLinRelTrf\n(page 143) and MoveLinRelWrf (page 144) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see SetMoveMode (page 172)).", "source": "meca500_programming_manual", "chunk_index": 3081, "length": 341, "hash": "3eb2bb0dc7db99ab86f6b86101f38b76"}
{"id": "meca500_programming_manual_3082", "text": "This command sets the", "source": "meca500_programming_manual", "chunk_index": 3082, "length": 21, "hash": "82426e4bbce9b39e98bca7221d468806"}
{"id": "meca500_programming_manual_3083", "text": "linear velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the", "source": "meca500_programming_manual", "chunk_index": 3083, "length": 104, "hash": "fc97cf6c95421db99fec1b458120a0fa"}
{"id": "meca500_programming_manual_3084", "text": "(page 144) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see", "source": "meca500_programming_manual", "chunk_index": 3084, "length": 106, "hash": "e28c912d10fab1c34009d45b878ee2d0"}
{"id": "meca500_programming_manual_3085", "text": "\u2022 v: TRF linear velocity limit, in mm/s, ranging from 0.001 to 5,000.", "source": "meca500_programming_manual", "chunk_index": 3085, "length": 69, "hash": "f2bd320950cc71f8bf38a6dbb6076525"}
{"id": "meca500_programming_manual_3086", "text": "\u2022 v: TRF linear velocity limit, in mm/s, ranging from 0.001 to 5,000.", "source": "meca500_programming_manual", "chunk_index": 3086, "length": 69, "hash": "f2bd320950cc71f8bf38a6dbb6076525"}
{"id": "meca500_programming_manual_3087", "text": "The default end-effector angular velocity limit is 150 mm/s.", "source": "meca500_programming_manual", "chunk_index": 3087, "length": 60, "hash": "dd5886ff8c936726b72c9578f4c4979e"}
{"id": "meca500_programming_manual_3088", "text": "The default end-effector angular velocity limit is 150 mm/s.", "source": "meca500_programming_manual", "chunk_index": 3088, "length": 60, "hash": "dd5886ff8c936726b72c9578f4c4979e"}
{"id": "meca500_programming_manual_3089", "text": "The actual TCP velocity may be lower (but never higher) than requested at certain portions\nor throughout the linear path to ensure compliance with the joint velocity limits set by the\nSetJointVelLimit (page 165) command and the linear velocity limit set by the SetCartAngVel\n(page 153) command.", "source": "meca500_programming_manual", "chunk_index": 3089, "length": 294, "hash": "22bc3eea4808b023af22aaafe0623a3b"}
{"id": "meca500_programming_manual_3090", "text": "The actual TCP velocity may be lower (but never higher) than requested at certain portions\nor throughout the linear path to ensure compliance with the joint velocity limits set by the", "source": "meca500_programming_manual", "chunk_index": 3090, "length": 183, "hash": "a64e58ffdd6c614117af217ec0219f23"}
{"id": "meca500_programming_manual_3091", "text": "(page 165) command and the linear velocity limit set by the", "source": "meca500_programming_manual", "chunk_index": 3091, "length": 59, "hash": "2fc8634682aa2b898a4caf87541f8b1f"}
{"id": "meca500_programming_manual_3092", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3092, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3093", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3093, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3094", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3094, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3095", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3095, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3096", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3096, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3097", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3097, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3098", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3098, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3099", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3099, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3100", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3100, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3101", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3101, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3102", "text": "In cyclic protocols,\nMotionCommandID 11. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3102, "length": 72, "hash": "ee3831050da177bd05aaa501df5afca1"}
{"id": "meca500_programming_manual_3103", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3103, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3104", "text": "11. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3104, "length": 35, "hash": "40e9dadfdbbd6f4c3964f3252c4f8ab6"}
{"id": "meca500_programming_manual_3105", "text": "(page 154) command is", "source": "meca500_programming_manual", "chunk_index": 3105, "length": 21, "hash": "a8fd1dfc630f1aea5844dbd87ad0e866"}
{"id": "meca500_programming_manual_3106", "text": "(page 154) command is", "source": "meca500_programming_manual", "chunk_index": 3106, "length": 21, "hash": "a8fd1dfc630f1aea5844dbd87ad0e866"}
{"id": "meca500_programming_manual_3107", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3107, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3108", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3108, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3109", "text": "This command defines a checkpoint in the motion queue. Thus, if you send a sequence of\nmotion commands to the robot, then the command SetCheckpoint (page 155), then other\nmotion commands, you will be able to know the exact moment when the motion command sent\njust before the SetCheckpoint (page 155) command was completed. At that precise moment,\nthe robot will send back the response [3030][n] (on both ports), where n is a positive integer\nIf blending was activated, the checkpoint response will be sent\nnumber defined by you.\nsomewhere along the blending. If a checkpoint is the last queued command, in the absence\nof blending with another command, the checkpoint response will be sent once the robot has\ncome to a stop (along with an EOB). Finally, note that you can use the same checkpoint\nnumber multiple times.", "source": "meca500_programming_manual", "chunk_index": 3109, "length": 817, "hash": "73d2ace9076a2db608e08644d20c604e"}
{"id": "meca500_programming_manual_3110", "text": "This command defines a checkpoint in the motion queue. Thus, if you send a sequence of\nmotion commands to the robot, then the command", "source": "meca500_programming_manual", "chunk_index": 3110, "length": 133, "hash": "89bbe879848cdee4242e4af7dbee5ec8"}
{"id": "meca500_programming_manual_3111", "text": "(page 155), then other\nmotion commands, you will be able to know the exact moment when the motion command sent\njust before the", "source": "meca500_programming_manual", "chunk_index": 3111, "length": 126, "hash": "c5d00789ee19b2a7e86414c4334c81cf"}
{"id": "meca500_programming_manual_3112", "text": "(page 155) command was completed. At that precise moment,\nthe robot will send back the response [3030][n] (on both ports), where n is a positive integer\nIf blending was activated, the checkpoint response will be sent\nnumber defined by you.\nsomewhere along the blending. If a checkpoint is the last queued command, in the absence\nof blending with another command, the checkpoint response will be sent once the robot has\ncome to a stop (along with an EOB). Finally, note that you can use the same checkpoint\nnumber multiple times.", "source": "meca500_programming_manual", "chunk_index": 3112, "length": 528, "hash": "005f405f9506171050beb5678791d85a"}
{"id": "meca500_programming_manual_3113", "text": "\u2022 n: an integer number, ranging from 1 to 8,000.", "source": "meca500_programming_manual", "chunk_index": 3113, "length": 48, "hash": "02c5f6a6ee95461223fed0776f3ffcf7"}
{"id": "meca500_programming_manual_3114", "text": "\u2022 n: an integer number, ranging from 1 to 8,000.", "source": "meca500_programming_manual", "chunk_index": 3114, "length": 48, "hash": "02c5f6a6ee95461223fed0776f3ffcf7"}
{"id": "meca500_programming_manual_3115", "text": "\u2013 Sent when the checkpoint was reached.", "source": "meca500_programming_manual", "chunk_index": 3115, "length": 39, "hash": "a93c9cc2c1e796180f70bd4ce31b7bbe"}
{"id": "meca500_programming_manual_3116", "text": "Sent when the checkpoint was reached.", "source": "meca500_programming_manual", "chunk_index": 3116, "length": 37, "hash": "f47bf88d9fadb8160deaabb0ed87df25"}
{"id": "meca500_programming_manual_3117", "text": "\u2013 Sent when the checkpoint was discarded and will never be reached (due to motion", "source": "meca500_programming_manual", "chunk_index": 3117, "length": 81, "hash": "043722321c7e155019592e32e0595acb"}
{"id": "meca500_programming_manual_3118", "text": "Sent when the checkpoint was discarded and will never be reached (due to motion", "source": "meca500_programming_manual", "chunk_index": 3118, "length": 79, "hash": "f23e6d110cbc56b211ca421263521f4e"}
{"id": "meca500_programming_manual_3119", "text": "cleared, robot deactivated, error, safety stop. etc.)", "source": "meca500_programming_manual", "chunk_index": 3119, "length": 53, "hash": "bbbc42d956f97da6bbd04615d44f536b"}
{"id": "meca500_programming_manual_3120", "text": "cleared, robot deactivated, error, safety stop. etc.)", "source": "meca500_programming_manual", "chunk_index": 3120, "length": 53, "hash": "bbbc42d956f97da6bbd04615d44f536b"}
{"id": "meca500_programming_manual_3121", "text": "Using a checkpoint is the only reliable method to confirm whether a specific motion\nsequence has been completed. Do not rely on the EOM or EOB messages, as these may\nbe received well before the motion or sequence is finished\u2014or not received at all if these\nmessages are not enabled.", "source": "meca500_programming_manual", "chunk_index": 3121, "length": 282, "hash": "b7470b72e37394119981925583d2112f"}
{"id": "meca500_programming_manual_3122", "text": "Using a checkpoint is the only reliable method to confirm whether a specific motion\nsequence has been completed. Do not rely on the EOM or EOB messages, as these may\nbe received well before the motion or sequence is finished\u2014or not received at all if these\nmessages are not enabled.", "source": "meca500_programming_manual", "chunk_index": 3122, "length": 282, "hash": "b7470b72e37394119981925583d2112f"}
{"id": "meca500_programming_manual_3123", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3123, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3124", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3124, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3125", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3125, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3126", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3126, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3127", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3127, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3128", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3128, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3129", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3129, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3130", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3130, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3131", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3131, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3132", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3132, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3133", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3133, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3134", "text": "In cyclic protocols,\nMotionCommandID 17. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3134, "length": 72, "hash": "9d19f461659ddb4ff7cebcc30514a3ce"}
{"id": "meca500_programming_manual_3135", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3135, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3136", "text": "17. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3136, "length": 35, "hash": "75b8e07ed3415901ce52f98371b7d154"}
{"id": "meca500_programming_manual_3137", "text": "(page 155) command is", "source": "meca500_programming_manual", "chunk_index": 3137, "length": 21, "hash": "d7484ccc17dbb97a1c7175de7d7668af"}
{"id": "meca500_programming_manual_3138", "text": "(page 155) command is", "source": "meca500_programming_manual", "chunk_index": 3138, "length": 21, "hash": "d7484ccc17dbb97a1c7175de7d7668af"}
{"id": "meca500_programming_manual_3139", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3139, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3140", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3140, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3141", "text": "This command sets the desired posture configuration to be observed in the MovePose\n(page 147) and MoveLin* commands (see Section 3 and Section 3). When a desired posture\nconfiguration is set, a MovePose (page 147) command will execute only if the final robot\nposition can be in the desired posture configuration. In contrast, a MoveLin* command will\nexecute only if the initial robot position already is in the desired posture configuration, and\nthe final robot position is also in the desired posture configuration.", "source": "meca500_programming_manual", "chunk_index": 3141, "length": 516, "hash": "a92727d1eb352476d208c9c1837535d8"}
{"id": "meca500_programming_manual_3142", "text": "This command sets the desired posture configuration to be observed in the", "source": "meca500_programming_manual", "chunk_index": 3142, "length": 73, "hash": "b875f05bce24c897cdbc50331479570e"}
{"id": "meca500_programming_manual_3143", "text": "(page 147) and MoveLin* commands (see Section 3 and Section 3). When a desired posture\nconfiguration is set, a", "source": "meca500_programming_manual", "chunk_index": 3143, "length": 110, "hash": "126546d037eed85d77367dc0a2e9ebdb"}
{"id": "meca500_programming_manual_3144", "text": "(page 147) command will execute only if the final robot\nposition can be in the desired posture configuration. In contrast, a MoveLin* command will\nexecute only if the initial robot position already is in the desired posture configuration, and\nthe final robot position is also in the desired posture configuration.", "source": "meca500_programming_manual", "chunk_index": 3144, "length": 313, "hash": "8362e46f3cea54c6c277e67466b3381c"}
{"id": "meca500_programming_manual_3145", "text": "The posture configuration can be automatically selected, when executing a MovePose\n(page 147) or MoveLin* command, by using the SetAutoConf (page 149) command. Using\nSetConf (page 157) automatically disables the automatic posture configuration selection.", "source": "meca500_programming_manual", "chunk_index": 3145, "length": 254, "hash": "9dfd3a6bea16142b19145e222365c639"}
{"id": "meca500_programming_manual_3146", "text": "The posture configuration can be automatically selected, when executing a", "source": "meca500_programming_manual", "chunk_index": 3146, "length": 73, "hash": "036bab04ccaad1b5c81962b84568fd4a"}
{"id": "meca500_programming_manual_3147", "text": "(page 147) or MoveLin* command, by using the", "source": "meca500_programming_manual", "chunk_index": 3147, "length": 44, "hash": "af5bd057bb8a40556e3184e8c6ccf43f"}
{"id": "meca500_programming_manual_3148", "text": "(page 149) command. Using", "source": "meca500_programming_manual", "chunk_index": 3148, "length": 25, "hash": "fac79d3518835b19a53370d6c7a92fa4"}
{"id": "meca500_programming_manual_3149", "text": "(page 157) automatically disables the automatic posture configuration selection.", "source": "meca500_programming_manual", "chunk_index": 3149, "length": 80, "hash": "b735f28d137ff8a8911d2116d28737e3"}
{"id": "meca500_programming_manual_3150", "text": "\u2022 cs: shoulder configuration parameter, either \u22121 or 1.", "source": "meca500_programming_manual", "chunk_index": 3150, "length": 55, "hash": "76a44cfc946164f1b929729cd431b269"}
{"id": "meca500_programming_manual_3151", "text": ": shoulder configuration parameter, either \u22121 or 1.", "source": "meca500_programming_manual", "chunk_index": 3151, "length": 51, "hash": "c4cb76d31e0ed5669e087978cdfd721c"}
{"id": "meca500_programming_manual_3152", "text": "\u2022 ce: elbow configuration parameter, either \u22121 or 1.", "source": "meca500_programming_manual", "chunk_index": 3152, "length": 52, "hash": "b44710a8afc4bfbbddcbbaab10e1f3b0"}
{"id": "meca500_programming_manual_3153", "text": ": elbow configuration parameter, either \u22121 or 1.", "source": "meca500_programming_manual", "chunk_index": 3153, "length": 48, "hash": "2f24f7596ab77fa9a966818c6aecfd14"}
{"id": "meca500_programming_manual_3154", "text": "\u2022 cw: wrist configuration parameter, either \u22121 or 1.", "source": "meca500_programming_manual", "chunk_index": 3154, "length": 52, "hash": "fb8615c558f712aa25de2951424d8be1"}
{"id": "meca500_programming_manual_3155", "text": ": wrist configuration parameter, either \u22121 or 1.", "source": "meca500_programming_manual", "chunk_index": 3155, "length": 48, "hash": "03c93d261adab2da77d9a86017b6c8db"}
{"id": "meca500_programming_manual_3156", "text": "Automatic posture configuration selection is enabled by default (see SetAutoConf (page 149));\nwhen the robot starts, there is no default desired posture configuration. The desired posture\nconfiguration must be specified using the SetConf (page 157) command or the SetAutoConf(0)\n(page 149) command. The latter sets the desired posture configuration to the one of the\ncurrent robot posture.", "source": "meca500_programming_manual", "chunk_index": 3156, "length": 389, "hash": "3c4c42055802a423b44fdc5130b6e39f"}
{"id": "meca500_programming_manual_3157", "text": "Automatic posture configuration selection is enabled by default (see", "source": "meca500_programming_manual", "chunk_index": 3157, "length": 68, "hash": "04a51a63753fe76fabfba66f76cd1f83"}
{"id": "meca500_programming_manual_3158", "text": "(page 149));\nwhen the robot starts, there is no default desired posture configuration. The desired posture\nconfiguration must be specified using the", "source": "meca500_programming_manual", "chunk_index": 3158, "length": 148, "hash": "2fb19d83f410b0728b724f9670085f4b"}
{"id": "meca500_programming_manual_3159", "text": "(page 157) command or the", "source": "meca500_programming_manual", "chunk_index": 3159, "length": 25, "hash": "edaf20b1b80158cc23858c5fe300c4d9"}
{"id": "meca500_programming_manual_3160", "text": "(page 149) command. The latter sets the desired posture configuration to the one of the\ncurrent robot posture.", "source": "meca500_programming_manual", "chunk_index": 3160, "length": 110, "hash": "6ccb9fa1e61129eaf62387c58edbeea0"}
{"id": "meca500_programming_manual_3161", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3161, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3162", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3162, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3163", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3163, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3164", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3164, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3165", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3165, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3166", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3166, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3167", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3167, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3168", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3168, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3169", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3169, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3170", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3170, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3171", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3171, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3172", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3172, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3173", "text": "In cyclic protocols, the SetConf (page 157) command is represented by MotionCommandID 15.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3173, "length": 121, "hash": "7f15398936ec6bc51b6afb0445b1a96a"}
{"id": "meca500_programming_manual_3174", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3174, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3175", "text": "(page 157) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3175, "length": 36, "hash": "2f1d0a35a9486f8d0f5325906d1c644b"}
{"id": "meca500_programming_manual_3176", "text": "15.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3176, "length": 35, "hash": "9c2a2baccc54ba2f15e9d22797b62097"}
{"id": "meca500_programming_manual_3177", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3177, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3178", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3178, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3179", "text": "This command sets the desired turn configuration for the last joint, ct, to be observed in the\nMovePose (page 147) and MoveLin* commands (see Section 3 and Section 3). When ct is set,\na MovePose (page 147) command is executed only if the final robot position can be in the\ndesired turn configuration. In contrast, when a ct is set, a MoveLin* command will execute\nonly if the final robot position can be \u2014 and the initial robot position already is \u2014 in the\ndesired turn configuration.", "source": "meca500_programming_manual", "chunk_index": 3179, "length": 484, "hash": "69d684c83def270c1e8bbe336ba6e613"}
{"id": "meca500_programming_manual_3180", "text": "This command sets the desired turn configuration for the last joint, c", "source": "meca500_programming_manual", "chunk_index": 3180, "length": 70, "hash": "4b8244235498adcc8ccc72ff68514040"}
{"id": "meca500_programming_manual_3181", "text": ", to be observed in the", "source": "meca500_programming_manual", "chunk_index": 3181, "length": 23, "hash": "dd610bca641d935dbb2cba05af830c99"}
{"id": "meca500_programming_manual_3182", "text": "(page 147) and MoveLin* commands (see Section 3 and Section 3). When c", "source": "meca500_programming_manual", "chunk_index": 3182, "length": 70, "hash": "e0def6021895d0a4798dcaeffb30b1cc"}
{"id": "meca500_programming_manual_3183", "text": "(page 147) command is executed only if the final robot position can be in the\ndesired turn configuration. In contrast, when a c", "source": "meca500_programming_manual", "chunk_index": 3183, "length": 127, "hash": "731bce143954ab17597c6c93ba9efe91"}
{"id": "meca500_programming_manual_3184", "text": "is set, a MoveLin* command will execute\nonly if the final robot position can be \u2014 and the initial robot position already is \u2014 in the\ndesired turn configuration.", "source": "meca500_programming_manual", "chunk_index": 3184, "length": 160, "hash": "65de94bb2dfca8ce8eb6de12397695a9"}
{"id": "meca500_programming_manual_3185", "text": "The turn configuration can be automatically selected, when executing a MovePose (page 147)\nor MoveLin* command, by using the SetAutoConf (page 149) command. Using SetConfTurn\n(page 159) automatically disables the automatic turn configuration selection.", "source": "meca500_programming_manual", "chunk_index": 3185, "length": 252, "hash": "003365c01a700b7703d44f4bffdb2e0a"}
{"id": "meca500_programming_manual_3186", "text": "The turn configuration can be automatically selected, when executing a", "source": "meca500_programming_manual", "chunk_index": 3186, "length": 70, "hash": "220cb705565ad5474e42fd8081026541"}
{"id": "meca500_programming_manual_3187", "text": "(page 147)\nor MoveLin* command, by using the", "source": "meca500_programming_manual", "chunk_index": 3187, "length": 44, "hash": "b19213ce335a8f28cb410a675c476a95"}
{"id": "meca500_programming_manual_3188", "text": "(page 149) command. Using", "source": "meca500_programming_manual", "chunk_index": 3188, "length": 25, "hash": "fac79d3518835b19a53370d6c7a92fa4"}
{"id": "meca500_programming_manual_3189", "text": "(page 159) automatically disables the automatic turn configuration selection.", "source": "meca500_programming_manual", "chunk_index": 3189, "length": 77, "hash": "35eb4eea3eba0c1e022c33caf35be854"}
{"id": "meca500_programming_manual_3190", "text": "\u2022 ct: turn configuration, an integer between \u2212100 and 100.", "source": "meca500_programming_manual", "chunk_index": 3190, "length": 58, "hash": "a4f55a81dd63770f68b8ad5f08fed004"}
{"id": "meca500_programming_manual_3191", "text": ": turn configuration, an integer between \u2212100 and 100.", "source": "meca500_programming_manual", "chunk_index": 3191, "length": 54, "hash": "293f358e8eabfd84f286c997cd80b292"}
{"id": "meca500_programming_manual_3192", "text": "The turn configuration parameter defines the desired range for joint 6, according to the\nfollowing inequality: \u2212180\u00b0 + ct360\u00b0 < \u03b86 \u2264 180\u00b0 + ct360\u00b0.", "source": "meca500_programming_manual", "chunk_index": 3192, "length": 147, "hash": "adf66863d7964d49103debee2431023e"}
{"id": "meca500_programming_manual_3193", "text": "The turn configuration parameter defines the desired range for joint 6, according to the\nfollowing inequality: \u2212180\u00b0 + c", "source": "meca500_programming_manual", "chunk_index": 3193, "length": 120, "hash": "74f1bb2526692fcf215afc97c55d9dd9"}
{"id": "meca500_programming_manual_3194", "text": "There is no default desired turn configuration. The only way to set a desired turn configuration\nis to specify it with the command SetConfTurn (page 159) or to execute the command\nSetAutoConfTurn(0) (page 150). The latter sets the desired turn configuration to the one\nof the current position of the last joint.", "source": "meca500_programming_manual", "chunk_index": 3194, "length": 311, "hash": "944a34d46c85ae0586ff3e99685afad7"}
{"id": "meca500_programming_manual_3195", "text": "There is no default desired turn configuration. The only way to set a desired turn configuration\nis to specify it with the command", "source": "meca500_programming_manual", "chunk_index": 3195, "length": 130, "hash": "d9b37892850e6a9f03c7a7dada74131f"}
{"id": "meca500_programming_manual_3196", "text": "(page 159) or to execute the command", "source": "meca500_programming_manual", "chunk_index": 3196, "length": 36, "hash": "ebede997c7deef1ab735b631a3236266"}
{"id": "meca500_programming_manual_3197", "text": "(page 150). The latter sets the desired turn configuration to the one\nof the current position of the last joint.", "source": "meca500_programming_manual", "chunk_index": 3197, "length": 112, "hash": "a576e966705ae033a8ed9bc5d577be29"}
{"id": "meca500_programming_manual_3198", "text": "This command is primarily useful if your end-effector is wired. In such as case, limit the can\nrange of the last joint appropriately using the SetJointLimits (page 203) command. However,\nsince the cabling will not be configured identically when the last joint is at a 5\u00b0 versus 365\u00b0,\nfor example, it is advisable to specify which of these two alternatives is preferred for a given\npose. This can be achieved using the command SetConfTurn (page 159), with the appropriate\nturn configuration as argument.", "source": "meca500_programming_manual", "chunk_index": 3198, "length": 502, "hash": "4fa828d9b91bcacf46161db09d9a9354"}
{"id": "meca500_programming_manual_3199", "text": "This command is primarily useful if your end-effector is wired. In such as case, limit the can\nrange of the last joint appropriately using the", "source": "meca500_programming_manual", "chunk_index": 3199, "length": 142, "hash": "b62be5f4fb8e1df2198844c91302b2e5"}
{"id": "meca500_programming_manual_3200", "text": "(page 203) command. However,\nsince the cabling will not be configured identically when the last joint is at a 5\u00b0 versus 365\u00b0,\nfor example, it is advisable to specify which of these two alternatives is preferred for a given\npose. This can be achieved using the command", "source": "meca500_programming_manual", "chunk_index": 3200, "length": 267, "hash": "56689083a2eed9662346385f385d0f6f"}
{"id": "meca500_programming_manual_3201", "text": "(page 159), with the appropriate\nturn configuration as argument.", "source": "meca500_programming_manual", "chunk_index": 3201, "length": 64, "hash": "e5a62d742ea18881e9a6f9bc77642532"}
{"id": "meca500_programming_manual_3202", "text": "If using a cable-less end-effector, then the automatic turn configuration should never be\ndisabled. However, remember to always bring joint 6 within the \u00b1420\u00b0 range before powering\nthe robot off (recall Section 3).", "source": "meca500_programming_manual", "chunk_index": 3202, "length": 214, "hash": "d7413b9a0559589260c77cfd5cbcf130"}
{"id": "meca500_programming_manual_3203", "text": "If using a cable-less end-effector, then the automatic turn configuration should never be\ndisabled. However, remember to always bring joint 6 within the \u00b1420\u00b0 range before powering\nthe robot off (recall Section 3).", "source": "meca500_programming_manual", "chunk_index": 3203, "length": 214, "hash": "d7413b9a0559589260c77cfd5cbcf130"}
{"id": "meca500_programming_manual_3204", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3204, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3205", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3205, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3206", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3206, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3207", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3207, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3208", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3208, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3209", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3209, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3210", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3210, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3211", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3211, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3212", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3212, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3213", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3213, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3214", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3214, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3215", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3215, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3216", "text": "In cyclic protocols, the SetConfTurn (page 159) command is represented by MotionCommandID\n25. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3216, "length": 125, "hash": "308c35774c56503a43a9baf14ffe0994"}
{"id": "meca500_programming_manual_3217", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3217, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3218", "text": "(page 159) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3218, "length": 36, "hash": "d294a460cf34f5a936c92d67dbdf090b"}
{"id": "meca500_programming_manual_3219", "text": "25. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3219, "length": 35, "hash": "33d3724857e5675d9f6491dc1afe0cf8"}
{"id": "meca500_programming_manual_3220", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3220, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3221", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3221, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3222", "text": "This command limits the acceleration of the joints during movements resulting from joint-\nspace commands (see Figure 15). Note that this command makes the robot come to stop,\neven if blending is enabled.", "source": "meca500_programming_manual", "chunk_index": 3222, "length": 203, "hash": "d44f3566a741cfbcb0d240c07e8558b7"}
{"id": "meca500_programming_manual_3223", "text": "This command limits the acceleration of the joints during movements resulting from joint-\nspace commands (see Figure 15). Note that this command makes the robot come to stop,\neven if blending is enabled.", "source": "meca500_programming_manual", "chunk_index": 3223, "length": 203, "hash": "d44f3566a741cfbcb0d240c07e8558b7"}
{"id": "meca500_programming_manual_3224", "text": "\u2022 p: percentage of maximum acceleration of the joints, from 0.001 to 150.", "source": "meca500_programming_manual", "chunk_index": 3224, "length": 73, "hash": "1c1879c30121ea114aea58bd288296e7"}
{"id": "meca500_programming_manual_3225", "text": "\u2022 p: percentage of maximum acceleration of the joints, from 0.001 to 150.", "source": "meca500_programming_manual", "chunk_index": 3225, "length": 73, "hash": "1c1879c30121ea114aea58bd288296e7"}
{"id": "meca500_programming_manual_3226", "text": "The default joint acceleration limit is 100%.", "source": "meca500_programming_manual", "chunk_index": 3226, "length": 45, "hash": "74b0205cb2c476d503f60c9c7d700179"}
{"id": "meca500_programming_manual_3227", "text": "The default joint acceleration limit is 100%.", "source": "meca500_programming_manual", "chunk_index": 3227, "length": 45, "hash": "74b0205cb2c476d503f60c9c7d700179"}
{"id": "meca500_programming_manual_3228", "text": "When using large accelerations and a heavy payload, we recommend using the SetPayload\n(page 173) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the SetTorqueLimitsCfg (page 177)).", "source": "meca500_programming_manual", "chunk_index": 3228, "length": 324, "hash": "8ef914a4de24a15f3c7cad8cc0689c3e"}
{"id": "meca500_programming_manual_3229", "text": "When using large accelerations and a heavy payload, we recommend using the", "source": "meca500_programming_manual", "chunk_index": 3229, "length": 74, "hash": "e0f135f73d70b15acb78be10ef16e337"}
{"id": "meca500_programming_manual_3230", "text": "(page 173) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the", "source": "meca500_programming_manual", "chunk_index": 3230, "length": 206, "hash": "933f402dbc9ff711672897a087881069"}
{"id": "meca500_programming_manual_3231", "text": "The argument of this command is exceptionally limited to 150. This is because in firmware\n8, a scaling was applied so that if this argument is kept at 100, most joint-space movements\nare feasible even at full payload. More precisely, if you are upgrading the firmware of your\nMeca500 from firmware 7 and you want to keep the same joint accelerations, you need to\nmultiply the arguments of your SetJointAcc (page 161) commands by the factor 1.43.", "source": "meca500_programming_manual", "chunk_index": 3231, "length": 445, "hash": "7165d423c84079f653050645754f8b54"}
{"id": "meca500_programming_manual_3232", "text": "The argument of this command is exceptionally limited to 150. This is because in firmware\n8, a scaling was applied so that if this argument is kept at 100, most joint-space movements\nare feasible even at full payload. More precisely, if you are upgrading the firmware of your\nMeca500 from firmware 7 and you want to keep the same joint accelerations, you need to\nmultiply the arguments of your", "source": "meca500_programming_manual", "chunk_index": 3232, "length": 393, "hash": "734b0944e97c7b0a8e8edb102016bda8"}
{"id": "meca500_programming_manual_3233", "text": "(page 161) commands by the factor 1.43.", "source": "meca500_programming_manual", "chunk_index": 3233, "length": 39, "hash": "2acb5b6cd9a04d9ab919b7b7ff486f12"}
{"id": "meca500_programming_manual_3234", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3234, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3235", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3235, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3236", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3236, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3237", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3237, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3238", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3238, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3239", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3239, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3240", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3240, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3241", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3241, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3242", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3242, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3243", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3243, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3244", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3244, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3245", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3245, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3246", "text": "In cyclic protocols, the SetJointAcc (page 161) command is represented by MotionCommandID\n9. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3246, "length": 124, "hash": "4ba67b2c6c68e8c445f29f3b2f2abc15"}
{"id": "meca500_programming_manual_3247", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3247, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3248", "text": "(page 161) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3248, "length": 36, "hash": "56e6f49778b06d775a0ac70af40522aa"}
{"id": "meca500_programming_manual_3249", "text": "9. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3249, "length": 34, "hash": "7bf6c0f6e995141d3279bebd244cbe67"}
{"id": "meca500_programming_manual_3250", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3250, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3251", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3251, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3252", "text": "This command specifies the desired velocities of the robot joints during movements generated\nby the MovePose (page 147), MoveJoints (page 135), and MoveJointsRel (page 137)\ncommands. It has impact on these movement commands only if if the move mode is velocity-\nbased (see SetMoveMode (page 172)).", "source": "meca500_programming_manual", "chunk_index": 3252, "length": 297, "hash": "0c12b906cde1cd6538bec8931955e079"}
{"id": "meca500_programming_manual_3253", "text": "This command specifies the desired velocities of the robot joints during movements generated\nby the", "source": "meca500_programming_manual", "chunk_index": 3253, "length": 99, "hash": "888a4b23ed73aeaa04786dfaa6b3ee89"}
{"id": "meca500_programming_manual_3254", "text": "(page 137)\ncommands. It has impact on these movement commands only if if the move mode is velocity-\nbased (see", "source": "meca500_programming_manual", "chunk_index": 3254, "length": 110, "hash": "c56f27d9c6fcab60ba83374b4a53000c"}
{"id": "meca500_programming_manual_3255", "text": "\u2022 p: percentage of R3 top rated joint velocities, ranging from 0.001 to 100, for Meca500", "source": "meca500_programming_manual", "chunk_index": 3255, "length": 88, "hash": "0cf70c994755b55140508b8992d04d26"}
{"id": "meca500_programming_manual_3256", "text": "\u2022 p: percentage of R3 top rated joint velocities, ranging from 0.001 to 100, for Meca500", "source": "meca500_programming_manual", "chunk_index": 3256, "length": 88, "hash": "0cf70c994755b55140508b8992d04d26"}
{"id": "meca500_programming_manual_3257", "text": "R3, and to 150, for R4.", "source": "meca500_programming_manual", "chunk_index": 3257, "length": 23, "hash": "0051b0358203a9203e8970d5072d0700"}
{"id": "meca500_programming_manual_3258", "text": "R3, and to 150, for R4.", "source": "meca500_programming_manual", "chunk_index": 3258, "length": 23, "hash": "0051b0358203a9203e8970d5072d0700"}
{"id": "meca500_programming_manual_3259", "text": "Note that the value of p is overridden by the argument of the command SetJointVelLimit(p\u2092)\n(page 165) if p\u2092 < p. Also, it is not possible to limit the velocity of only one joint. With\nSetJointVel (page 163) and SetJointVelLimit (page 165), the maximum velocities of all joints\nare reduced proportionally.", "source": "meca500_programming_manual", "chunk_index": 3259, "length": 304, "hash": "0a7706e93548425b47547870dde462b2"}
{"id": "meca500_programming_manual_3260", "text": "Note that the value of p is overridden by the argument of the command", "source": "meca500_programming_manual", "chunk_index": 3260, "length": 69, "hash": "9e44c0901b8f0d0d6d7ff51eda7b18f8"}
{"id": "meca500_programming_manual_3261", "text": "SetJointVelLimit(p\u2092)", "source": "meca500_programming_manual", "chunk_index": 3261, "length": 20, "hash": "ce437b2cdb05de991c5468598b38410f"}
{"id": "meca500_programming_manual_3262", "text": "(page 165) if p\u2092 < p. Also, it is not possible to limit the velocity of only one joint. With", "source": "meca500_programming_manual", "chunk_index": 3262, "length": 92, "hash": "f63eae698f55a081190d43698b8fa289"}
{"id": "meca500_programming_manual_3263", "text": "(page 165), the maximum velocities of all joints\nare reduced proportionally.", "source": "meca500_programming_manual", "chunk_index": 3263, "length": 76, "hash": "e68889fab991e5f3d26ec991c7905227"}
{"id": "meca500_programming_manual_3264", "text": "In the case of the Meca500 R4, for backward compatibility, p can be greater than 100, up to\n150, and the maximum velocity of each joint can be increased", "source": "meca500_programming_manual", "chunk_index": 3264, "length": 152, "hash": "1cdc7c738461cf06f0feb0c0f7b18de3"}
{"id": "meca500_programming_manual_3265", "text": "In the case of the Meca500 R4, for backward compatibility, p can be greater than 100, up to\n150, and the maximum velocity of each joint can be increased", "source": "meca500_programming_manual", "chunk_index": 3265, "length": 152, "hash": "1cdc7c738461cf06f0feb0c0f7b18de3"}
{"id": "meca500_programming_manual_3266", "text": "\u2022 up to 225\u00b0/s for joints 1 and 2 (i.e., up to 150%);", "source": "meca500_programming_manual", "chunk_index": 3266, "length": 53, "hash": "05bc287cbd68d56327cb33b3ff2f769d"}
{"id": "meca500_programming_manual_3267", "text": "\u2022 up to 225\u00b0/s for joints 1 and 2 (i.e., up to 150%);", "source": "meca500_programming_manual", "chunk_index": 3267, "length": 53, "hash": "05bc287cbd68d56327cb33b3ff2f769d"}
{"id": "meca500_programming_manual_3268", "text": "\u2022 up to 225\u00b0/s for joint 3 (i.e., up to 125%);", "source": "meca500_programming_manual", "chunk_index": 3268, "length": 46, "hash": "430b46e94734f5af5eb167cadedd2536"}
{"id": "meca500_programming_manual_3269", "text": "\u2022 up to 225\u00b0/s for joint 3 (i.e., up to 125%);", "source": "meca500_programming_manual", "chunk_index": 3269, "length": 46, "hash": "430b46e94734f5af5eb167cadedd2536"}
{"id": "meca500_programming_manual_3270", "text": "\u2022 up to 350\u00b0/s for joints 4 and 5 (i.e., up to 117%);", "source": "meca500_programming_manual", "chunk_index": 3270, "length": 53, "hash": "08e00bf2c5bd769c8b5a079e1e04e7b6"}
{"id": "meca500_programming_manual_3271", "text": "\u2022 up to 350\u00b0/s for joints 4 and 5 (i.e., up to 117%);", "source": "meca500_programming_manual", "chunk_index": 3271, "length": 53, "hash": "08e00bf2c5bd769c8b5a079e1e04e7b6"}
{"id": "meca500_programming_manual_3272", "text": "\u2022 up to 500\u00b0/s for joint 6 (i.e., the joint velocity cannot exceed its top rated velocity).", "source": "meca500_programming_manual", "chunk_index": 3272, "length": 91, "hash": "1a11924469dba2c9859cef499c9d2573"}
{"id": "meca500_programming_manual_3273", "text": "\u2022 up to 500\u00b0/s for joint 6 (i.e., the joint velocity cannot exceed its top rated velocity).", "source": "meca500_programming_manual", "chunk_index": 3273, "length": 91, "hash": "1a11924469dba2c9859cef499c9d2573"}
{"id": "meca500_programming_manual_3274", "text": "Thus,\nbe limited to min(150*1.4, 225) = 210\u00b0/s,\nmin(180*1.4, 225) = 225\u00b0/s, etc.", "source": "meca500_programming_manual", "chunk_index": 3274, "length": 80, "hash": "b213d247aba247d94c1cb63ca7873dfd"}
{"id": "meca500_programming_manual_3275", "text": "Thus,\nbe limited to min(150*1.4, 225) = 210\u00b0/s,\nmin(180*1.4, 225) = 225\u00b0/s, etc.", "source": "meca500_programming_manual", "chunk_index": 3275, "length": 80, "hash": "b213d247aba247d94c1cb63ca7873dfd"}
{"id": "meca500_programming_manual_3276", "text": "if p = 140 (and po > p),", "source": "meca500_programming_manual", "chunk_index": 3276, "length": 24, "hash": "6928e9e1cee4e0a9a8cd3cb551518d9b"}
{"id": "meca500_programming_manual_3277", "text": "joints 1 and 2 will\nthe velocity of joint 3 will be limited to", "source": "meca500_programming_manual", "chunk_index": 3277, "length": 62, "hash": "a8b016fba1ec66fab14c992139a47617"}
{"id": "meca500_programming_manual_3278", "text": "joints 1 and 2 will\nthe velocity of joint 3 will be limited to", "source": "meca500_programming_manual", "chunk_index": 3278, "length": 62, "hash": "a8b016fba1ec66fab14c992139a47617"}
{"id": "meca500_programming_manual_3279", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3279, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3280", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3280, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3281", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3281, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3282", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3282, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3283", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3283, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3284", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3284, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3285", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3285, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3286", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3286, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3287", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3287, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3288", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3288, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3289", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3289, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3290", "text": "In cyclic protocols, the SetJointVel (page 163) command is represented by MotionCommandID\n8. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3290, "length": 124, "hash": "56d8121df4dfacd36bf2244092718191"}
{"id": "meca500_programming_manual_3291", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3291, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3292", "text": "(page 163) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3292, "length": 36, "hash": "f54fd275e3c8b3e9f73608e957a52e6c"}
{"id": "meca500_programming_manual_3293", "text": "8. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3293, "length": 34, "hash": "e64933ed3383ba05e53065a46147d46a"}
{"id": "meca500_programming_manual_3294", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3294, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3295", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3295, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3296", "text": "The SetJointVelLimit (page 165) overrides the default joint velocity limits. Unlike the\nSetJointVel (page 163) command, this command affects the movements generated by all\nMove* commands (even the MoveLinVel* ones).", "source": "meca500_programming_manual", "chunk_index": 3296, "length": 215, "hash": "aa99e18ef721b007cf0c46260781a976"}
{"id": "meca500_programming_manual_3297", "text": "(page 165) overrides the default joint velocity limits. Unlike the", "source": "meca500_programming_manual", "chunk_index": 3297, "length": 66, "hash": "bb53312fbad3b7e8ce405700cfe8603c"}
{"id": "meca500_programming_manual_3298", "text": "(page 163) command, this command affects the movements generated by", "source": "meca500_programming_manual", "chunk_index": 3298, "length": 67, "hash": "93564a0ec9995fc7ac30d0e0a82f2348"}
{"id": "meca500_programming_manual_3299", "text": "Move* commands (even the MoveLinVel* ones).", "source": "meca500_programming_manual", "chunk_index": 3299, "length": 43, "hash": "f4abdb211b989239071fa5740d9f1def"}
{"id": "meca500_programming_manual_3300", "text": "SetJointVelLimit(po)", "source": "meca500_programming_manual", "chunk_index": 3300, "length": 20, "hash": "93f2ffc421a95ec670d66cd92bc26211"}
{"id": "meca500_programming_manual_3301", "text": "\u2022 po: percentage of R3 top rated joint velocities, ranging from 0.001 to 100, for Meca500", "source": "meca500_programming_manual", "chunk_index": 3301, "length": 89, "hash": "c89483d8dc371376598e0b6c6c82efbe"}
{"id": "meca500_programming_manual_3302", "text": ": percentage of R3 top rated joint velocities, ranging from 0.001 to 100, for Meca500", "source": "meca500_programming_manual", "chunk_index": 3302, "length": 85, "hash": "374e8cec818719ef991e4230e01399e3"}
{"id": "meca500_programming_manual_3303", "text": "R3, and to 150, for R4.", "source": "meca500_programming_manual", "chunk_index": 3303, "length": 23, "hash": "0051b0358203a9203e8970d5072d0700"}
{"id": "meca500_programming_manual_3304", "text": "R3, and to 150, for R4.", "source": "meca500_programming_manual", "chunk_index": 3304, "length": 23, "hash": "0051b0358203a9203e8970d5072d0700"}
{"id": "meca500_programming_manual_3305", "text": "By default, po = 100.", "source": "meca500_programming_manual", "chunk_index": 3305, "length": 21, "hash": "6600f78d10f9346f64bb1f69255d29ee"}
{"id": "meca500_programming_manual_3306", "text": "As of firmware 10.3, when the argument of SetJointVelLimit (page 165) is less than 100, the\nrobot will optimize its joint accelerations in the case of slower movements.", "source": "meca500_programming_manual", "chunk_index": 3306, "length": 168, "hash": "f4f993127c9b137715ee85bd06289982"}
{"id": "meca500_programming_manual_3307", "text": "As of firmware 10.3, when the argument of", "source": "meca500_programming_manual", "chunk_index": 3307, "length": 41, "hash": "eaf5b8d05fc587d6e297ba6e1f4e3737"}
{"id": "meca500_programming_manual_3308", "text": "(page 165) is less than 100, the\nrobot will optimize its joint accelerations in the case of slower movements.", "source": "meca500_programming_manual", "chunk_index": 3308, "length": 109, "hash": "362da1d9caf5da9fb622b12bd738ef89"}
{"id": "meca500_programming_manual_3309", "text": "As already mentioned in the description of the SetJointVel (page 163) command, in both\nrevisions of Meca500, the top rated velocity of joints 1 and 2 is 150\u00b0/s, of joint 3 is 180\u00b0/s, of\njoints 4 and 5 is 300\u00b0/s, and of joint 6 is 500\u00b0/s. In the case of the R4, the maximum velocity\nof each joint can be increased up to 225\u00b0/s for joints 1, 2, and 3, and up to 350\u00b0/s for joints 4\nand 5. The velocity of joint 6 cannot be increased over its top rated limit of 500\u00b0/s. Thus, for\nexample, if po = 140, the velocity of joints 1 and 2 will be limited to min(150*1.4, 225) = 210\u00b0/s,\nthe velocity of joint 3 will be limited to min(180*1.4, 225) = 225\u00b0/s, etc., during a MoveLin\n(page 141) motion.", "source": "meca500_programming_manual", "chunk_index": 3309, "length": 689, "hash": "6e09ab285edae2b9d027633f0787685a"}
{"id": "meca500_programming_manual_3310", "text": "As already mentioned in the description of the", "source": "meca500_programming_manual", "chunk_index": 3310, "length": 46, "hash": "07dd9bbf9f5c7a8d5f8da1405baeeddb"}
{"id": "meca500_programming_manual_3311", "text": "(page 163) command, in both\nrevisions of Meca500, the top rated velocity of joints 1 and 2 is 150\u00b0/s, of joint 3 is 180\u00b0/s, of\njoints 4 and 5 is 300\u00b0/s, and of joint 6 is 500\u00b0/s. In the case of the R4, the maximum velocity\nof each joint can be increased up to 225\u00b0/s for joints 1, 2, and 3, and up to 350\u00b0/s for joints 4\nand 5. The velocity of joint 6 cannot be increased over its top rated limit of 500\u00b0/s. Thus, for\nexample, if p", "source": "meca500_programming_manual", "chunk_index": 3311, "length": 431, "hash": "7cc322f0ae6cd93fccae57f288a747a6"}
{"id": "meca500_programming_manual_3312", "text": "= 140, the velocity of joints 1 and 2 will be limited to min(150*1.4, 225) = 210\u00b0/s,\nthe velocity of joint 3 will be limited to min(180*1.4, 225) = 225\u00b0/s, etc., during a", "source": "meca500_programming_manual", "chunk_index": 3312, "length": 170, "hash": "0a6647aef44c440e23ce4852a4e7e950"}
{"id": "meca500_programming_manual_3313", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3313, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3314", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3314, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3315", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3315, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3316", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3316, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3317", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3317, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3318", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3318, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3319", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3319, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3320", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3320, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3321", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3321, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3322", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3322, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3323", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3323, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3324", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3324, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3325", "text": "In cyclic protocols,\nMotionCommandID 33. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3325, "length": 72, "hash": "cc670c14bf479330c69b4da85d9e5073"}
{"id": "meca500_programming_manual_3326", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3326, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3327", "text": "33. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3327, "length": 35, "hash": "737a2e666d6fcabfa49a14a243ee18ce"}
{"id": "meca500_programming_manual_3328", "text": "the SetJointVelLimit", "source": "meca500_programming_manual", "chunk_index": 3328, "length": 20, "hash": "ad1e2eacc44fbf7cf6b27146dfad0b0d"}
{"id": "meca500_programming_manual_3329", "text": "(page 165) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3329, "length": 36, "hash": "20411906979f583194fc5f4e39a14645"}
{"id": "meca500_programming_manual_3330", "text": "(page 165) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3330, "length": 36, "hash": "20411906979f583194fc5f4e39a14645"}
{"id": "meca500_programming_manual_3331", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3331, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3332", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3332, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3333", "text": "When the move mode has been set to time-based with the command SetMoveMode(1)\n(page 172), the motion-queue SetMoveDuration (page 167) sets the desired duration for\nthe movement resulting from every subsequent position-mode command (except MoveJump\n(page 140)). The duration does not include the acceleration and deceleration phases.", "source": "meca500_programming_manual", "chunk_index": 3333, "length": 332, "hash": "1c437fcc393ab0ae42c057d7731ef477"}
{"id": "meca500_programming_manual_3334", "text": "When the move mode has been set to time-based with the command", "source": "meca500_programming_manual", "chunk_index": 3334, "length": 62, "hash": "c3821386b0737ee49cb4a035fac3deea"}
{"id": "meca500_programming_manual_3335", "text": "(page 172), the motion-queue", "source": "meca500_programming_manual", "chunk_index": 3335, "length": 28, "hash": "aea4b9bb23fef84c77cd204e4e8aaf35"}
{"id": "meca500_programming_manual_3336", "text": "(page 167) sets the desired duration for\nthe movement resulting from every subsequent position-mode command (except", "source": "meca500_programming_manual", "chunk_index": 3336, "length": 115, "hash": "a3d2a540e160d9c1d93ea9d12717e794"}
{"id": "meca500_programming_manual_3337", "text": "(page 140)). The duration does not include the acceleration and deceleration phases.", "source": "meca500_programming_manual", "chunk_index": 3337, "length": 84, "hash": "6c7d84644a8e1bec988b8b642b3d9857"}
{"id": "meca500_programming_manual_3338", "text": "\u2022 t: duration in seconds.", "source": "meca500_programming_manual", "chunk_index": 3338, "length": 25, "hash": "2b8b2a2794458832923232b85b59c85a"}
{"id": "meca500_programming_manual_3339", "text": "\u2022 t: duration in seconds.", "source": "meca500_programming_manual", "chunk_index": 3339, "length": 25, "hash": "2b8b2a2794458832923232b85b59c85a"}
{"id": "meca500_programming_manual_3340", "text": "If the duration is 0, the robot will move as fast as possible, but only if the severity set with\nSetMoveDurationCfg (page 168) is 0 or 1.", "source": "meca500_programming_manual", "chunk_index": 3340, "length": 137, "hash": "7a42f173473f1b1114b41857a4498447"}
{"id": "meca500_programming_manual_3341", "text": "If the duration is 0, the robot will move as fast as possible, but only if the severity set with", "source": "meca500_programming_manual", "chunk_index": 3341, "length": 96, "hash": "78c488b1894077542d53c328e5d3d4d4"}
{"id": "meca500_programming_manual_3342", "text": "(page 168) is 0 or 1.", "source": "meca500_programming_manual", "chunk_index": 3342, "length": 21, "hash": "0867131bd6be5c46e044fc61f5642cbb"}
{"id": "meca500_programming_manual_3343", "text": "By default, the duration is 3 seconds.", "source": "meca500_programming_manual", "chunk_index": 3343, "length": 38, "hash": "1d5401c4875c8ef382d1091ce7c59eb8"}
{"id": "meca500_programming_manual_3344", "text": "By default, the duration is 3 seconds.", "source": "meca500_programming_manual", "chunk_index": 3344, "length": 38, "hash": "1d5401c4875c8ef382d1091ce7c59eb8"}
{"id": "meca500_programming_manual_3345", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3345, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3346", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3346, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3347", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3347, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3348", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3348, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3349", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3349, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3350", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3350, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3351", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3351, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3352", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3352, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3353", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3353, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3354", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3354, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3355", "text": "In cyclic protocols,\nMotionCommandID 51. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3355, "length": 72, "hash": "60e188635acafdb827061ab72a8bddb0"}
{"id": "meca500_programming_manual_3356", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3356, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3357", "text": "51. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3357, "length": 35, "hash": "adba24d14d8093c02623eef61d6fe406"}
{"id": "meca500_programming_manual_3358", "text": "the SetMoveDuration (page 167) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3358, "length": 56, "hash": "046591f4a393c753c0f5f58ba1af0360"}
{"id": "meca500_programming_manual_3359", "text": "(page 167) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3359, "length": 36, "hash": "56abb966f4e8ecb13104c55e863392bc"}
{"id": "meca500_programming_manual_3360", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3360, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3361", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3361, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3362", "text": "This motion-queue command specifies what happens when a move command cannot meet\nthe desired duration set by the SetMoveDuration (page 167) command, in time-based move\nmode.", "source": "meca500_programming_manual", "chunk_index": 3362, "length": 173, "hash": "daf51997dba652d1aee960b84da484d6"}
{"id": "meca500_programming_manual_3363", "text": "This motion-queue command specifies what happens when a move command cannot meet\nthe desired duration set by the", "source": "meca500_programming_manual", "chunk_index": 3363, "length": 112, "hash": "34c8be9302d7afdc8393a9d17b7abe91"}
{"id": "meca500_programming_manual_3364", "text": "(page 167) command, in time-based move\nmode.", "source": "meca500_programming_manual", "chunk_index": 3364, "length": 44, "hash": "3a401de00be80b19f2b37940a1f25c08"}
{"id": "meca500_programming_manual_3365", "text": "For joint-space moves, this occurs when one or more joints would need to exceed their\nmaximum velocity (SetJointVelLimit (page 165)). For linear moves, the robot may need to\nslow down in certain parts of the path due to joints reaching their velocity limits, such as\nnear singularities.", "source": "meca500_programming_manual", "chunk_index": 3365, "length": 286, "hash": "58aac43369a600977921654e25369536"}
{"id": "meca500_programming_manual_3366", "text": "For joint-space moves, this occurs when one or more joints would need to exceed their\nmaximum velocity (", "source": "meca500_programming_manual", "chunk_index": 3366, "length": 104, "hash": "557b72f142421a8da2bfbc4ed38509d5"}
{"id": "meca500_programming_manual_3367", "text": "(page 165)). For linear moves, the robot may need to\nslow down in certain parts of the path due to joints reaching their velocity limits, such as\nnear singularities.", "source": "meca500_programming_manual", "chunk_index": 3367, "length": 165, "hash": "5323b08c016e7253db80d215c173d59f"}
{"id": "meca500_programming_manual_3368", "text": "SetMoveDurationCfg(s)", "source": "meca500_programming_manual", "chunk_index": 3368, "length": 21, "hash": "0c0682e0004f8c41b4ea2155b84e552c"}
{"id": "meca500_programming_manual_3369", "text": "SetMoveDurationCfg(s)", "source": "meca500_programming_manual", "chunk_index": 3369, "length": 21, "hash": "0c0682e0004f8c41b4ea2155b84e552c"}
{"id": "meca500_programming_manual_3370", "text": "\u2013 0 for silent mode (no warning),", "source": "meca500_programming_manual", "chunk_index": 3370, "length": 33, "hash": "67e5c2e0b357e8fe32946816dd95262e"}
{"id": "meca500_programming_manual_3371", "text": "0 for silent mode (no warning),", "source": "meca500_programming_manual", "chunk_index": 3371, "length": 31, "hash": "9a2b4393c3cbcd4a2f0416e1a8d36d3e"}
{"id": "meca500_programming_manual_3372", "text": "\u2013 1 for generating a warning message in the robot logs (also in MecaPortal), indicating\nthe shortest possible duration for the movement command that failed to meet the\ndesired duration,", "source": "meca500_programming_manual", "chunk_index": 3372, "length": 185, "hash": "2f5b189c6997c1300628574cfe774b3f"}
{"id": "meca500_programming_manual_3373", "text": "1 for generating a warning message in the robot logs (also in MecaPortal), indicating\nthe shortest possible duration for the movement command that failed to meet the\ndesired duration,", "source": "meca500_programming_manual", "chunk_index": 3373, "length": 183, "hash": "2ba4b0c3ccd4f3ac24a869fef5d51d5b"}
{"id": "meca500_programming_manual_3374", "text": "\u2013 4 for generating an error with a code [3051], also indicating the shortest possible", "source": "meca500_programming_manual", "chunk_index": 3374, "length": 85, "hash": "20967f55a2ae8227d03b2e41476f5021"}
{"id": "meca500_programming_manual_3375", "text": "4 for generating an error with a code [3051], also indicating the shortest possible", "source": "meca500_programming_manual", "chunk_index": 3375, "length": 83, "hash": "ef23b0667a8ba3db8e9a2ceca346bada"}
{"id": "meca500_programming_manual_3376", "text": "duration for the movement command that failed to meet the desired duration.", "source": "meca500_programming_manual", "chunk_index": 3376, "length": 75, "hash": "4ff4a29684e9199d6ef201d0176b3f16"}
{"id": "meca500_programming_manual_3377", "text": "duration for the movement command that failed to meet the desired duration.", "source": "meca500_programming_manual", "chunk_index": 3377, "length": 75, "hash": "4ff4a29684e9199d6ef201d0176b3f16"}
{"id": "meca500_programming_manual_3378", "text": "Time scaling (SetTimeScaling (page 215)) and recovery mode (Section 3)", "source": "meca500_programming_manual", "chunk_index": 3378, "length": 70, "hash": "86ddaeb2e147c701dd1f390279a34ee5"}
{"id": "meca500_programming_manual_3379", "text": "(page 215)) and recovery mode (Section 3)", "source": "meca500_programming_manual", "chunk_index": 3379, "length": 41, "hash": "c4e5d9badc14d5b5436bfc231095e4b0"}
{"id": "meca500_programming_manual_3380", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3380, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3381", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3381, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3382", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3382, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3383", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3383, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3384", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3384, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3385", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3385, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3386", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3386, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3387", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3387, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3388", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3388, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3389", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3389, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3390", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3390, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3391", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3391, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3392", "text": "In cyclic protocols,\nMotionCommandID 50. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3392, "length": 72, "hash": "fe867b1480b7db025df9725b63962023"}
{"id": "meca500_programming_manual_3393", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3393, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3394", "text": "50. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3394, "length": 35, "hash": "053b38c5d9019f2ca9391f052ec665d8"}
{"id": "meca500_programming_manual_3395", "text": "the SetMoveDurationCfg (page 168) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3395, "length": 59, "hash": "730844ab41706fb5e974052b1016579f"}
{"id": "meca500_programming_manual_3396", "text": "(page 168) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3396, "length": 36, "hash": "a46b62cac07e82ed59742dee5287faf9"}
{"id": "meca500_programming_manual_3397", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3397, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3398", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3398, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3399", "text": "SetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 3399, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "meca500_programming_manual_3400", "text": "SetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 3400, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "meca500_programming_manual_3401", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 3401, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_3402", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 3402, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_3403", "text": "In cyclic protocols, the SetMoveJumpApproachVel (page 170) command is represented by\nMotionCommandID 47. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3403, "length": 136, "hash": "30e594310c72e29167d9affabb176f2e"}
{"id": "meca500_programming_manual_3404", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3404, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3405", "text": "SetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 3405, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "meca500_programming_manual_3406", "text": "(page 170) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3406, "length": 36, "hash": "dc9095d09601a80c80709fb810ed7f2d"}
{"id": "meca500_programming_manual_3407", "text": "47. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3407, "length": 35, "hash": "c191e2ebae9724ec3963774eeba51787"}
{"id": "meca500_programming_manual_3408", "text": "SetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 3408, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "meca500_programming_manual_3409", "text": "SetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 3409, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "meca500_programming_manual_3410", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3410, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3411", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3411, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3412", "text": "This command is only available on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 3412, "length": 51, "hash": "9b7f9848e219ad25598089016f55aad0"}
{"id": "meca500_programming_manual_3413", "text": "This command is only available on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 3413, "length": 51, "hash": "9b7f9848e219ad25598089016f55aad0"}
{"id": "meca500_programming_manual_3414", "text": "In cyclic protocols,\nMotionCommandID 46. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3414, "length": 72, "hash": "afda59b555ab218d2897307e764ce7e5"}
{"id": "meca500_programming_manual_3415", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3415, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3416", "text": "46. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3416, "length": 35, "hash": "af1d013ebd128bb3764e939714e55ebc"}
{"id": "meca500_programming_manual_3417", "text": "the SetMoveJumpHeight (page 171) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3417, "length": 58, "hash": "28a105e940ee2c8b28dcb7bc7386305f"}
{"id": "meca500_programming_manual_3418", "text": "(page 171) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3418, "length": 36, "hash": "22d6577d6bd0db25b48aeda6664cbe53"}
{"id": "meca500_programming_manual_3419", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3419, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3420", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3420, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3421", "text": "As discussed in Section 3, the timeline of a position-mode robot movement command (e.g.,\nMoveLin (page 141), MoveJoints (page 135), and MovePose (page 147)) can be determined\nby specifying either the desired velocities or the desired duration. The choice between these\ntwo \u201csubmodes\u201d is made using the motion-queue command SetMoveMode (page 172).", "source": "meca500_programming_manual", "chunk_index": 3421, "length": 346, "hash": "590cc2677b6d6f94c463f85b19428170"}
{"id": "meca500_programming_manual_3422", "text": "As discussed in Section 3, the timeline of a position-mode robot movement command (e.g.,", "source": "meca500_programming_manual", "chunk_index": 3422, "length": 88, "hash": "cf53dcbdaa019446a2c9a33e640f7e50"}
{"id": "meca500_programming_manual_3423", "text": "(page 147)) can be determined\nby specifying either the desired velocities or the desired duration. The choice between these\ntwo \u201csubmodes\u201d is made using the motion-queue command", "source": "meca500_programming_manual", "chunk_index": 3423, "length": 177, "hash": "f93576a4ca603ec6d60569ba399bfdd0"}
{"id": "meca500_programming_manual_3424", "text": "The command SetMoveDurationCfg (page 168) specifies what happens when a move\ncommand cannot meet the desired duration set by the SetMoveDuration (page 167) command,\nin time-based move mode.", "source": "meca500_programming_manual", "chunk_index": 3424, "length": 189, "hash": "e9ac0a35b56153fe7efd8853aa9e33ce"}
{"id": "meca500_programming_manual_3425", "text": "(page 168) specifies what happens when a move\ncommand cannot meet the desired duration set by the", "source": "meca500_programming_manual", "chunk_index": 3425, "length": 97, "hash": "d76de2b4fb68bb2e9db44b4b1984e299"}
{"id": "meca500_programming_manual_3426", "text": "(page 167) command,\nin time-based move mode.", "source": "meca500_programming_manual", "chunk_index": 3426, "length": 44, "hash": "3dde4c4980b40d037888a70eb8b05278"}
{"id": "meca500_programming_manual_3427", "text": "\u2013 0 selects the velocity-based submode, meaning the commands SetJointVel\n(page 163), SetCartLinVel (page 154), and SetCartAngVel (page 153) affect all\nsubsequent position-mode movement commands.", "source": "meca500_programming_manual", "chunk_index": 3427, "length": 194, "hash": "dc0474c14f87ea50d5e638e638d0250a"}
{"id": "meca500_programming_manual_3428", "text": "0 selects the velocity-based submode, meaning the commands", "source": "meca500_programming_manual", "chunk_index": 3428, "length": 58, "hash": "1234dcd2e7f9e1baf9b7a08601ba3aac"}
{"id": "meca500_programming_manual_3429", "text": "(page 153) affect all\nsubsequent position-mode movement commands.", "source": "meca500_programming_manual", "chunk_index": 3429, "length": 65, "hash": "3aecc67fce232b1d8ce4ccf5d2018f45"}
{"id": "meca500_programming_manual_3430", "text": "\u2013 1 selects the time-based submode, meaning the command SetMoveDuration\n(page 167) affects all subsequent position-mode movement commands, except\nMoveJump (page 140).", "source": "meca500_programming_manual", "chunk_index": 3430, "length": 166, "hash": "b3a1e72ccdcf3f1dda76b9c2f32db1c6"}
{"id": "meca500_programming_manual_3431", "text": "1 selects the time-based submode, meaning the command", "source": "meca500_programming_manual", "chunk_index": 3431, "length": 53, "hash": "05c7af0b080320c1116b5c46126bf33f"}
{"id": "meca500_programming_manual_3432", "text": "(page 167) affects all subsequent position-mode movement commands, except", "source": "meca500_programming_manual", "chunk_index": 3432, "length": 73, "hash": "0830c6bf86b5c6509673d0bb9a07936f"}
{"id": "meca500_programming_manual_3433", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3433, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3434", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3434, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3435", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3435, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3436", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3436, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3437", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3437, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3438", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3438, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3439", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3439, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3440", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3440, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3441", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3441, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3442", "text": "In cyclic protocols,\nMotionCommandID 49. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3442, "length": 72, "hash": "f66bd970ae4aa014c82e1bea466f41d4"}
{"id": "meca500_programming_manual_3443", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3443, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3444", "text": "49. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3444, "length": 35, "hash": "2e9a5929d8d53a07e5cb86d0789a766d"}
{"id": "meca500_programming_manual_3445", "text": "the SetMoveMode (page 172) command is", "source": "meca500_programming_manual", "chunk_index": 3445, "length": 37, "hash": "a5a7820f624be00b2ca0a0a3df288ac0"}
{"id": "meca500_programming_manual_3446", "text": "(page 172) command is", "source": "meca500_programming_manual", "chunk_index": 3446, "length": 21, "hash": "58bec1113229f2cddbea5db4536203ed"}
{"id": "meca500_programming_manual_3447", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3447, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3448", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3448, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3449", "text": "This command sets the robot\u2019s payload mass and the center of mass relative to the robot\u2019s\nFRF.", "source": "meca500_programming_manual", "chunk_index": 3449, "length": 94, "hash": "2f8aa29829f1fddcff7723cf3f632b79"}
{"id": "meca500_programming_manual_3450", "text": "This command sets the robot\u2019s payload mass and the center of mass relative to the robot\u2019s\nFRF.", "source": "meca500_programming_manual", "chunk_index": 3450, "length": 94, "hash": "2f8aa29829f1fddcff7723cf3f632b79"}
{"id": "meca500_programming_manual_3451", "text": "It is inserted in the motion queue with other motion commands, allowing it to be executed,\nfor example, after actions such as opening or closing the gripper.", "source": "meca500_programming_manual", "chunk_index": 3451, "length": 157, "hash": "4263447ea79e8f55c24b5d26334d0671"}
{"id": "meca500_programming_manual_3452", "text": "It is inserted in the motion queue with other motion commands, allowing it to be executed,\nfor example, after actions such as opening or closing the gripper.", "source": "meca500_programming_manual", "chunk_index": 3452, "length": 157, "hash": "4263447ea79e8f55c24b5d26334d0671"}
{"id": "meca500_programming_manual_3453", "text": "SetPayload(m,cx,cy,cz)", "source": "meca500_programming_manual", "chunk_index": 3453, "length": 22, "hash": "e776e052d99b08f0612cfc2e5db6d0d0"}
{"id": "meca500_programming_manual_3454", "text": "\u2022 m: the payload mass, in kilograms.", "source": "meca500_programming_manual", "chunk_index": 3454, "length": 36, "hash": "b4b2463145b93b15875ecf5242cb4a05"}
{"id": "meca500_programming_manual_3455", "text": "\u2022 m: the payload mass, in kilograms.", "source": "meca500_programming_manual", "chunk_index": 3455, "length": 36, "hash": "b4b2463145b93b15875ecf5242cb4a05"}
{"id": "meca500_programming_manual_3456", "text": "\u2022 cx,cy,cz: the coordinates of the payload center of mass, relative to the robot\u2019s FRF, in", "source": "meca500_programming_manual", "chunk_index": 3456, "length": 90, "hash": "25072f23024de266672f9617f537182a"}
{"id": "meca500_programming_manual_3457", "text": ": the coordinates of the payload center of mass, relative to the robot\u2019s FRF, in", "source": "meca500_programming_manual", "chunk_index": 3457, "length": 80, "hash": "e806d1d91c99f3090527e479384905a2"}
{"id": "meca500_programming_manual_3458", "text": "By default, the payload mass is 0 kg.", "source": "meca500_programming_manual", "chunk_index": 3458, "length": 37, "hash": "173ddccd03ba68392f03f622fb8f0d8d"}
{"id": "meca500_programming_manual_3459", "text": "By default, the payload mass is 0 kg.", "source": "meca500_programming_manual", "chunk_index": 3459, "length": 37, "hash": "173ddccd03ba68392f03f622fb8f0d8d"}
{"id": "meca500_programming_manual_3460", "text": "The provided payload mass should include the weight of any components attached to the\nrobot\u2019s flange, such as the end-effector and any workpieve being carried.", "source": "meca500_programming_manual", "chunk_index": 3460, "length": 159, "hash": "96136086556bb4ccd4e4a7ac954f0223"}
{"id": "meca500_programming_manual_3461", "text": "The provided payload mass should include the weight of any components attached to the\nrobot\u2019s flange, such as the end-effector and any workpieve being carried.", "source": "meca500_programming_manual", "chunk_index": 3461, "length": 159, "hash": "96136086556bb4ccd4e4a7ac954f0223"}
{"id": "meca500_programming_manual_3462", "text": "Although it is not mandatory to use this command, providing the payload data enables the\nrobot to better estimate the required motor torques. This leads to several potential benefits,\nsuch as:", "source": "meca500_programming_manual", "chunk_index": 3462, "length": 192, "hash": "28defa5a86186350def7ffd32c12d509"}
{"id": "meca500_programming_manual_3463", "text": "Although it is not mandatory to use this command, providing the payload data enables the\nrobot to better estimate the required motor torques. This leads to several potential benefits,\nsuch as:", "source": "meca500_programming_manual", "chunk_index": 3463, "length": 192, "hash": "28defa5a86186350def7ffd32c12d509"}
{"id": "meca500_programming_manual_3464", "text": "\u2022 Improved path tracking: The robot can move with greater accuracy and compensate for", "source": "meca500_programming_manual", "chunk_index": 3464, "length": 85, "hash": "c9d2a7c80f1ed88d487355f83bf0ab77"}
{"id": "meca500_programming_manual_3465", "text": "\u2022 Improved path tracking: The robot can move with greater accuracy and compensate for", "source": "meca500_programming_manual", "chunk_index": 3465, "length": 85, "hash": "c9d2a7c80f1ed88d487355f83bf0ab77"}
{"id": "meca500_programming_manual_3466", "text": "the additional load;", "source": "meca500_programming_manual", "chunk_index": 3466, "length": 20, "hash": "6bc9db1e46d68287600488d387aa8ad7"}
{"id": "meca500_programming_manual_3467", "text": "the additional load;", "source": "meca500_programming_manual", "chunk_index": 3467, "length": 20, "hash": "6bc9db1e46d68287600488d387aa8ad7"}
{"id": "meca500_programming_manual_3468", "text": "\u2022 Better torque limit management: Enhanced precision for the robot\u2019s torque limits option", "source": "meca500_programming_manual", "chunk_index": 3468, "length": 89, "hash": "918e364cfcdc4c8cf064aa1e8b38240f"}
{"id": "meca500_programming_manual_3469", "text": "\u2022 Better torque limit management: Enhanced precision for the robot\u2019s torque limits option", "source": "meca500_programming_manual", "chunk_index": 3469, "length": 89, "hash": "918e364cfcdc4c8cf064aa1e8b38240f"}
{"id": "meca500_programming_manual_3470", "text": "(see SetTorqueLimitsCfg (page 177)).", "source": "meca500_programming_manual", "chunk_index": 3470, "length": 36, "hash": "abd7fd4e1acb2b6b0b46f12f9024ccea"}
{"id": "meca500_programming_manual_3471", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3471, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3472", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3472, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3473", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3473, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3474", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3474, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3475", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3475, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3476", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3476, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3477", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3477, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3478", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3478, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3479", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3479, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3480", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3480, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3481", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3481, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3482", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3482, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3483", "text": "In cyclic protocols, the SetPayload (page 173) command is represented by MotionCommandID\n60. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3483, "length": 124, "hash": "9be8a56cd2053885b59322f82799f35f"}
{"id": "meca500_programming_manual_3484", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3484, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3485", "text": "(page 173) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3485, "length": 36, "hash": "3c42b993e63f951eb515ef67e765bbfe"}
{"id": "meca500_programming_manual_3486", "text": "60. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3486, "length": 35, "hash": "9194cabb55c07916895b13f9f5b47c8e"}
{"id": "meca500_programming_manual_3487", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3487, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3488", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3488, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3489", "text": "This command sets thresholds for the torques applied to each motor, as percentages of the\nmaximum allowable torques that can be applied at each motor. These thresholds can be\ninterpreted in two different ways:", "source": "meca500_programming_manual", "chunk_index": 3489, "length": 209, "hash": "e92a3a7fc32f91baa97d9d0464d0cab7"}
{"id": "meca500_programming_manual_3490", "text": "This command sets thresholds for the torques applied to each motor, as percentages of the\nmaximum allowable torques that can be applied at each motor. These thresholds can be\ninterpreted in two different ways:", "source": "meca500_programming_manual", "chunk_index": 3490, "length": 209, "hash": "e92a3a7fc32f91baa97d9d0464d0cab7"}
{"id": "meca500_programming_manual_3491", "text": "\u2022 When the second argument of SetTorqueLimitsCfg (page 177) is 0 or 1, the absolute\nvalues of the actual motor torques (GetRtJointTorq (page 277)), also reported as\npercentages of the maximum allowable torques, are compared to the respective\nthresholds.", "source": "meca500_programming_manual", "chunk_index": 3491, "length": 253, "hash": "7dcf16a433d86e4f58d85f82be93e6fa"}
{"id": "meca500_programming_manual_3492", "text": "\u2022 When the second argument of", "source": "meca500_programming_manual", "chunk_index": 3492, "length": 29, "hash": "12629b10a742ce767910452275c4e5ef"}
{"id": "meca500_programming_manual_3493", "text": "(page 177) is 0 or 1, the absolute\nvalues of the actual motor torques (", "source": "meca500_programming_manual", "chunk_index": 3493, "length": 71, "hash": "bfefbcd43b5f49aff62ff8f528ca4b05"}
{"id": "meca500_programming_manual_3494", "text": "(page 277)), also reported as\npercentages of the maximum allowable torques, are compared to the respective\nthresholds.", "source": "meca500_programming_manual", "chunk_index": 3494, "length": 118, "hash": "a9852b96ff92c63339a980b663d68c1e"}
{"id": "meca500_programming_manual_3495", "text": "\u2022 When the second argument of SetTorqueLimitsCfg (page 177) is 2, which is the\ndefault setting as of firmware 11.1, the absolute value of the difference between the\nactual (GetRtJointTorq (page 277)) and calculated motor torque (GetRtTargetJointTorq\n(page 284)) of each joint is compared with the respective threshold. Thus, in this case,\nthe arguments of SetTorqueLimits (page 175) should be rather small, for example, about\n10 (percent).", "source": "meca500_programming_manual", "chunk_index": 3495, "length": 439, "hash": "8d54c06de2e63b4b8abd215913df8951"}
{"id": "meca500_programming_manual_3496", "text": "\u2022 When the second argument of", "source": "meca500_programming_manual", "chunk_index": 3496, "length": 29, "hash": "12629b10a742ce767910452275c4e5ef"}
{"id": "meca500_programming_manual_3497", "text": "(page 177) is 2, which is the\ndefault setting as of firmware 11.1, the absolute value of the difference between the\nactual (", "source": "meca500_programming_manual", "chunk_index": 3497, "length": 124, "hash": "fb6e995d8820824ae1bd2b588dd1877f"}
{"id": "meca500_programming_manual_3498", "text": "(page 277)) and calculated motor torque (", "source": "meca500_programming_manual", "chunk_index": 3498, "length": 41, "hash": "229b625cd8a6395eda18a1d31dfd3537"}
{"id": "meca500_programming_manual_3499", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 3499, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_3500", "text": "(page 284)) of each joint is compared with the respective threshold. Thus, in this case,\nthe arguments of", "source": "meca500_programming_manual", "chunk_index": 3500, "length": 105, "hash": "fea23105d4f30a49aa2e69f10cbccb7d"}
{"id": "meca500_programming_manual_3501", "text": "(page 175) should be rather small, for example, about", "source": "meca500_programming_manual", "chunk_index": 3501, "length": 53, "hash": "13fe1aa6dc9817974a15be01e22f024f"}
{"id": "meca500_programming_manual_3502", "text": "When a torque thresholds is exceeded, a customizable event is created. The event behavior\ncan be set by the first argument of SetTorqueLimitsCfg (page 177).", "source": "meca500_programming_manual", "chunk_index": 3502, "length": 156, "hash": "e8ec5638bb51beefd24edf48f17e776f"}
{"id": "meca500_programming_manual_3503", "text": "When a torque thresholds is exceeded, a customizable event is created. The event behavior\ncan be set by the first argument of", "source": "meca500_programming_manual", "chunk_index": 3503, "length": 125, "hash": "792bf97fa370b9190ebec618e49e9ec7"}
{"id": "meca500_programming_manual_3504", "text": "This command is intended only to improve the chances of protecting your robot, its end-\neffector, and the surrounding equipment in the event of a collision. The actual torque in each\nmotor (GetRtJointTorq (page 277)) is estimated by measuring the current in the corresponding\ndrive. The calculated torque (GetRtTargetJointTorq (page 284)) is obtained from the dynamic\nmodel of the robot.", "source": "meca500_programming_manual", "chunk_index": 3504, "length": 387, "hash": "4a74f18d0b608eaed67f69441ef3e466"}
{"id": "meca500_programming_manual_3505", "text": "This command is intended only to improve the chances of protecting your robot, its end-\neffector, and the surrounding equipment in the event of a collision. The actual torque in each\nmotor (", "source": "meca500_programming_manual", "chunk_index": 3505, "length": 190, "hash": "9d5c9a4b66002ac6dfeb8048525bd789"}
{"id": "meca500_programming_manual_3506", "text": "(page 277)) is estimated by measuring the current in the corresponding\ndrive. The calculated torque (", "source": "meca500_programming_manual", "chunk_index": 3506, "length": 101, "hash": "f777d7b4f02d591ebd02937f7456b245"}
{"id": "meca500_programming_manual_3507", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 3507, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_3508", "text": "(page 284)) is obtained from the dynamic\nmodel of the robot.", "source": "meca500_programming_manual", "chunk_index": 3508, "length": 60, "hash": "fcc7f990b716e6012fe60f7264b79e7d"}
{"id": "meca500_programming_manual_3509", "text": "SetTorqueLimits(\u03c41,\u03c42,\u03c43,\u03c44,\u03c45,\u03c46)", "source": "meca500_programming_manual", "chunk_index": 3509, "length": 34, "hash": "f8b40788cf869f74bd556671e2dd9d4f"}
{"id": "meca500_programming_manual_3510", "text": "\u2022 \u03c4i: torque threshold represented by a percentage of the maximum allowable torque that", "source": "meca500_programming_manual", "chunk_index": 3510, "length": 87, "hash": "99e529315c686827e82eaaef79133e86"}
{"id": "meca500_programming_manual_3511", "text": ": torque threshold represented by a percentage of the maximum allowable torque that", "source": "meca500_programming_manual", "chunk_index": 3511, "length": 83, "hash": "4aca68f26ef347af2173bde1266a7ffc"}
{"id": "meca500_programming_manual_3512", "text": "can be applied at motor i, where i = 1, 2, \u2026, 6 ranging from 0.001 to 100.", "source": "meca500_programming_manual", "chunk_index": 3512, "length": 74, "hash": "a04b08e739d12ae92392289c42eaf9ec"}
{"id": "meca500_programming_manual_3513", "text": "can be applied at motor i, where i = 1, 2, \u2026, 6 ranging from 0.001 to 100.", "source": "meca500_programming_manual", "chunk_index": 3513, "length": 74, "hash": "a04b08e739d12ae92392289c42eaf9ec"}
{"id": "meca500_programming_manual_3514", "text": "By default, all torque thresholds are set to 100%.", "source": "meca500_programming_manual", "chunk_index": 3514, "length": 50, "hash": "c31e57d2296ceffd7580da9f6425b57f"}
{"id": "meca500_programming_manual_3515", "text": "By default, all torque thresholds are set to 100%.", "source": "meca500_programming_manual", "chunk_index": 3515, "length": 50, "hash": "c31e57d2296ceffd7580da9f6425b57f"}
{"id": "meca500_programming_manual_3516", "text": "Unlike the SetJointLimits (page 203) commands, the SetTorqueLimits (page 175) command\ncan only be applied after the robot has been homed. Note that high accelerations or large\nmovements may also produce high torque peaks. Therefore, you should rely on this command\nonly in the vicinity of obstacles, for example, while applying an adhesive. Remember that\nSetTorqueLimits (page 175) is a motion command and will therefore be inserted in the motion\nqueue and not necessarily executed immediately.", "source": "meca500_programming_manual", "chunk_index": 3516, "length": 494, "hash": "415e9fa688a714a457a5469ba06cc2fe"}
{"id": "meca500_programming_manual_3517", "text": "(page 203) commands, the", "source": "meca500_programming_manual", "chunk_index": 3517, "length": 24, "hash": "1952db73fc812fa36369225e8cf6f63b"}
{"id": "meca500_programming_manual_3518", "text": "(page 175) command\ncan only be applied after the robot has been homed. Note that high accelerations or large", "source": "meca500_programming_manual", "chunk_index": 3518, "length": 108, "hash": "c73a1f74363d446f21ee68cb35a39bb5"}
{"id": "meca500_programming_manual_3519", "text": "movements may also produce high torque peaks. Therefore, you should rely on this command\nonly in the vicinity of obstacles, for example, while applying an adhesive. Remember that", "source": "meca500_programming_manual", "chunk_index": 3519, "length": 178, "hash": "107a3e2760e6f1f3e421bd0c8ee14d51"}
{"id": "meca500_programming_manual_3520", "text": "(page 175) is a motion command and will therefore be inserted in the motion\nqueue and not necessarily executed immediately.", "source": "meca500_programming_manual", "chunk_index": 3520, "length": 123, "hash": "3f4162506e9524413310051c25a1118e"}
{"id": "meca500_programming_manual_3521", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3521, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3522", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3522, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3523", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3523, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3524", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3524, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3525", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3525, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3526", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3526, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3527", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3527, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3528", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3528, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3529", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3529, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3530", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3530, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3531", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3531, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3532", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3532, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3533", "text": "In cyclic protocols,\nMotionCommandID 27. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3533, "length": 72, "hash": "4459a649c19aaf00970cbb924db6f056"}
{"id": "meca500_programming_manual_3534", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3534, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3535", "text": "27. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3535, "length": 35, "hash": "412c3128ed19287dd6c35576084e5175"}
{"id": "meca500_programming_manual_3536", "text": "the SetTorqueLimits (page 175) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3536, "length": 56, "hash": "212d425bbfff18a2dc9356e688bd9bb3"}
{"id": "meca500_programming_manual_3537", "text": "(page 175) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3537, "length": 36, "hash": "fa5dd01312477767700ef3aefa8dba0e"}
{"id": "meca500_programming_manual_3538", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3538, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3539", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3539, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3540", "text": "This command sets the robot behavior when a joint torque exceeds the threshold set by the\nSetTorqueLimits (page 175) command. It also sends a torque limit status when the status\nchanges (exceeded or not) for events severity greater than 0. For severity 4, a torque limit\nerror is sent when torque exceeds the limit.", "source": "meca500_programming_manual", "chunk_index": 3540, "length": 315, "hash": "6036985a09c3e375e86378a753835823"}
{"id": "meca500_programming_manual_3541", "text": "This command sets the robot behavior when a joint torque exceeds the threshold set by the", "source": "meca500_programming_manual", "chunk_index": 3541, "length": 89, "hash": "0a892e8d0d43b88b93c097377a9d838c"}
{"id": "meca500_programming_manual_3542", "text": "(page 175) command. It also sends a torque limit status when the status\nchanges (exceeded or not) for events severity greater than 0. For severity 4, a torque limit\nerror is sent when torque exceeds the limit.", "source": "meca500_programming_manual", "chunk_index": 3542, "length": 209, "hash": "faa5ca919b0144908d03d61943992200"}
{"id": "meca500_programming_manual_3543", "text": "SetTorqueLimitsCfg(s,m)", "source": "meca500_programming_manual", "chunk_index": 3543, "length": 23, "hash": "b48c7c238538a40271e5dbb6d901c746"}
{"id": "meca500_programming_manual_3544", "text": "SetTorqueLimitsCfg(s,m)", "source": "meca500_programming_manual", "chunk_index": 3544, "length": 23, "hash": "b48c7c238538a40271e5dbb6d901c746"}
{"id": "meca500_programming_manual_3545", "text": "\u2022 l: integer for the torque limit event severity", "source": "meca500_programming_manual", "chunk_index": 3545, "length": 48, "hash": "dd0cb804cab174df145866fa56060b1e"}
{"id": "meca500_programming_manual_3546", "text": "\u2022 l: integer for the torque limit event severity", "source": "meca500_programming_manual", "chunk_index": 3546, "length": 48, "hash": "dd0cb804cab174df145866fa56060b1e"}
{"id": "meca500_programming_manual_3547", "text": "\u2013 1, torque status event (message [3028]);", "source": "meca500_programming_manual", "chunk_index": 3547, "length": 42, "hash": "efddb17ef62fb977e734a59f4deb115a"}
{"id": "meca500_programming_manual_3548", "text": "1, torque status event (message [3028]);", "source": "meca500_programming_manual", "chunk_index": 3548, "length": 40, "hash": "14a2959aa4ccc20999b83b5de86eb202"}
{"id": "meca500_programming_manual_3549", "text": "\u2013 2, pause motion and torque status event (message [3028]);", "source": "meca500_programming_manual", "chunk_index": 3549, "length": 59, "hash": "501975537fa2c609229858eb4ed39a4b"}
{"id": "meca500_programming_manual_3550", "text": "2, pause motion and torque status event (message [3028]);", "source": "meca500_programming_manual", "chunk_index": 3550, "length": 57, "hash": "4e68a81d4459cbd4ae6a9b2c8bc4b580"}
{"id": "meca500_programming_manual_3551", "text": "\u2013 4, torque status event (message [3028]) and torque limit error (message [3029]).", "source": "meca500_programming_manual", "chunk_index": 3551, "length": 82, "hash": "cbdaed4c5ea5d02dd6e9697ea9dd6ece"}
{"id": "meca500_programming_manual_3552", "text": "4, torque status event (message [3028]) and torque limit error (message [3029]).", "source": "meca500_programming_manual", "chunk_index": 3552, "length": 80, "hash": "937dc263a48f33ea5942b6281881168a"}
{"id": "meca500_programming_manual_3553", "text": "\u2022 m: integer defining the detection mode", "source": "meca500_programming_manual", "chunk_index": 3553, "length": 40, "hash": "1ec21564c3a7ed473eb6d77f5bf8b8f5"}
{"id": "meca500_programming_manual_3554", "text": "\u2022 m: integer defining the detection mode", "source": "meca500_programming_manual", "chunk_index": 3554, "length": 40, "hash": "1ec21564c3a7ed473eb6d77f5bf8b8f5"}
{"id": "meca500_programming_manual_3555", "text": "\u2013 0 triggers a torque limit if the absolute value of any actual motor torque exceeds the", "source": "meca500_programming_manual", "chunk_index": 3555, "length": 88, "hash": "087fc53b65e26022d288bdf08e6d0ee1"}
{"id": "meca500_programming_manual_3556", "text": "0 triggers a torque limit if the absolute value of any actual motor torque exceeds the", "source": "meca500_programming_manual", "chunk_index": 3556, "length": 86, "hash": "e8fba96495ab48bb9490dd76667884b2"}
{"id": "meca500_programming_manual_3557", "text": "respective torque limit set with SetTorqueLimits (page 175),", "source": "meca500_programming_manual", "chunk_index": 3557, "length": 60, "hash": "829e159f46333b434a89863eb2f39909"}
{"id": "meca500_programming_manual_3558", "text": "respective torque limit set with", "source": "meca500_programming_manual", "chunk_index": 3558, "length": 32, "hash": "ff6dd12cde9955131a844ca332b4f738"}
{"id": "meca500_programming_manual_3559", "text": "\u2013 1 is same as 0, but ignores joint acceleration/deceleration periods,", "source": "meca500_programming_manual", "chunk_index": 3559, "length": 70, "hash": "60b4778b933ab3627f5757bd9fc0f922"}
{"id": "meca500_programming_manual_3560", "text": "1 is same as 0, but ignores joint acceleration/deceleration periods,", "source": "meca500_programming_manual", "chunk_index": 3560, "length": 68, "hash": "afc7d83a61a3dc31410e443159ee9eb4"}
{"id": "meca500_programming_manual_3561", "text": "\u2013 2 triggers if any actual motor torque deviates from the corresponding calculated\ntorque by more than the respective torque limit set with SetTorqueLimits (page 175).", "source": "meca500_programming_manual", "chunk_index": 3561, "length": 167, "hash": "373e88582700be2ff8b5739c0c1449ac"}
{"id": "meca500_programming_manual_3562", "text": "2 triggers if any actual motor torque deviates from the corresponding calculated\ntorque by more than the respective torque limit set with", "source": "meca500_programming_manual", "chunk_index": 3562, "length": 137, "hash": "157110cef837e460ee943be15820e2f6"}
{"id": "meca500_programming_manual_3563", "text": "With the option m = 0, you must use either very low accelerations (SetJointAcc (page 161))\nor very high torque limits (SetTorqueLimits (page 175)).", "source": "meca500_programming_manual", "chunk_index": 3563, "length": 147, "hash": "90a161217c70468a5f2987a4460c31f5"}
{"id": "meca500_programming_manual_3564", "text": "With the option m = 0, you must use either very low accelerations (", "source": "meca500_programming_manual", "chunk_index": 3564, "length": 67, "hash": "76494fcd5db454d2e7986ec6e5738523"}
{"id": "meca500_programming_manual_3565", "text": "(page 161))\nor very high torque limits (", "source": "meca500_programming_manual", "chunk_index": 3565, "length": 40, "hash": "49d853ff3ccd954077a8431173cb8747"}
{"id": "meca500_programming_manual_3566", "text": "The option m = 1 is mainly useful for joint-space movements, as revolute joints in Cartesian-\nspace movements are generally always accelerating or decelerating.", "source": "meca500_programming_manual", "chunk_index": 3566, "length": 160, "hash": "cc82d7d4d143bbefe395406d67ef06e4"}
{"id": "meca500_programming_manual_3567", "text": "The option m = 1 is mainly useful for joint-space movements, as revolute joints in Cartesian-\nspace movements are generally always accelerating or decelerating.", "source": "meca500_programming_manual", "chunk_index": 3567, "length": 160, "hash": "cc82d7d4d143bbefe395406d67ef06e4"}
{"id": "meca500_programming_manual_3568", "text": "Finally, with the option m = 2, the torque limits set by SetTorqueLimits (page 175) are\ninterpreted as maximum deviations rather than absolute limits. This option allows for much\nfiner control over torque limits and enables much quicker detection of collisions between\nthe robot and its environment. To improve torque estimation accuracy, consider using the\nSetPayload (page 173) command.", "source": "meca500_programming_manual", "chunk_index": 3568, "length": 388, "hash": "f2a070c7f2b4021a3d0d2af6d8f686a6"}
{"id": "meca500_programming_manual_3569", "text": "Finally, with the option m = 2, the torque limits set by", "source": "meca500_programming_manual", "chunk_index": 3569, "length": 56, "hash": "52622c85a543eb9969357c87a94d5879"}
{"id": "meca500_programming_manual_3570", "text": "interpreted as maximum deviations rather than absolute limits", "source": "meca500_programming_manual", "chunk_index": 3570, "length": 61, "hash": "02ff565125f231befb431285c9d0fd8d"}
{"id": "meca500_programming_manual_3571", "text": ". This option allows for much\nfiner control over torque limits and enables much quicker detection of collisions between\nthe robot and its environment. To improve torque estimation accuracy, consider using the", "source": "meca500_programming_manual", "chunk_index": 3571, "length": 208, "hash": "b4adc24dae1cb40f8d4dccf96308d84c"}
{"id": "meca500_programming_manual_3572", "text": "By default, the event severity is set to 0, and the detection mode to 2.", "source": "meca500_programming_manual", "chunk_index": 3572, "length": 72, "hash": "1ffd2793140b570443129a9588b7ece5"}
{"id": "meca500_programming_manual_3573", "text": "By default, the event severity is set to 0, and the detection mode to 2.", "source": "meca500_programming_manual", "chunk_index": 3573, "length": 72, "hash": "1ffd2793140b570443129a9588b7ece5"}
{"id": "meca500_programming_manual_3574", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3574, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3575", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3575, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3576", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3576, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3577", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3577, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3578", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3578, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3579", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3579, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3580", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3580, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3581", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3581, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3582", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3582, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3583", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3583, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3584", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3584, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3585", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3585, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3586", "text": "In cyclic protocols,\nMotionCommandID 28. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3586, "length": 72, "hash": "20778e7c6a20cf92061eefee1fb470da"}
{"id": "meca500_programming_manual_3587", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3587, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3588", "text": "28. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3588, "length": 35, "hash": "db6b1e9310fb43fac603ab769969987d"}
{"id": "meca500_programming_manual_3589", "text": "the SetTorqueLimitsCfg (page 177) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3589, "length": 59, "hash": "ac82dfb7d57f12eb6e1e0f62344e5d6d"}
{"id": "meca500_programming_manual_3590", "text": "(page 177) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3590, "length": 36, "hash": "3a8ad4b1623e7957c2fc921e119f018f"}
{"id": "meca500_programming_manual_3591", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3591, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3592", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3592, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3593", "text": "This command defines the pose of the TRF with respect to the FRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "meca500_programming_manual", "chunk_index": 3593, "length": 158, "hash": "2dead4d5a6b8c9bc92572e6174bff4ce"}
{"id": "meca500_programming_manual_3594", "text": "This command defines the pose of the TRF with respect to the FRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "meca500_programming_manual", "chunk_index": 3594, "length": 158, "hash": "2dead4d5a6b8c9bc92572e6174bff4ce"}
{"id": "meca500_programming_manual_3595", "text": "\u2022 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 3595, "length": 83, "hash": "a2aef124da142fbfbc739cfd3d7a3d6a"}
{"id": "meca500_programming_manual_3596", "text": "\u2022 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 3596, "length": 83, "hash": "a2aef124da142fbfbc739cfd3d7a3d6a"}
{"id": "meca500_programming_manual_3597", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF relative to the FRF, in\ndegrees.", "source": "meca500_programming_manual", "chunk_index": 3597, "length": 94, "hash": "9c594d730e1c0f6378ed91fb57d1fa23"}
{"id": "meca500_programming_manual_3598", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF relative to the FRF, in", "source": "meca500_programming_manual", "chunk_index": 3598, "length": 85, "hash": "1ec32a92b53c62fd5c5ddf6708606e57"}
{"id": "meca500_programming_manual_3599", "text": "By default, the TRF coincides with the FRF.", "source": "meca500_programming_manual", "chunk_index": 3599, "length": 43, "hash": "220179142910bd6555eb7d5dfdfd0ac7"}
{"id": "meca500_programming_manual_3600", "text": "By default, the TRF coincides with the FRF.", "source": "meca500_programming_manual", "chunk_index": 3600, "length": 43, "hash": "220179142910bd6555eb7d5dfdfd0ac7"}
{"id": "meca500_programming_manual_3601", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3601, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3602", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3602, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3603", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3603, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3604", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3604, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3605", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3605, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3606", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3606, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3607", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3607, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3608", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3608, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3609", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3609, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3610", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3610, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3611", "text": "In cyclic protocols, the SetTrf (page 179) command is represented by MotionCommandID 13.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3611, "length": 120, "hash": "03a82537d2c65d906d787f6775d659d9"}
{"id": "meca500_programming_manual_3612", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3612, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3613", "text": "(page 179) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3613, "length": 36, "hash": "10ee886ed2fc7e04eded5a372e129913"}
{"id": "meca500_programming_manual_3614", "text": "13.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3614, "length": 35, "hash": "36ae66ae27efd29b8cd63ed99e293315"}
{"id": "meca500_programming_manual_3615", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3615, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3616", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3616, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3617", "text": "This command defines the timeout period following a velocity-mode motion command\n(MoveJointsVel (page 138), MoveLinVelTrf (page 145), or MoveLinVelWrf (page 146)). If no\nsubsequent velocity-mode motion command is received within this period, all joint speeds\nwill automatically be set to zero. The SetVelTimeout (page 180) command serves as a safety\nprecaution and should be used accordingly. Note that the velocity-mode timeout is influenced\nby the SetTimeScaling (page 215) command.", "source": "meca500_programming_manual", "chunk_index": 3617, "length": 484, "hash": "66cf2b07326aa7c222a9c8cccea3a122"}
{"id": "meca500_programming_manual_3618", "text": "This command defines the timeout period following a velocity-mode motion command\n(", "source": "meca500_programming_manual", "chunk_index": 3618, "length": 82, "hash": "a169b443869a4ac7573eed39db70cef8"}
{"id": "meca500_programming_manual_3619", "text": "(page 146)). If no\nsubsequent velocity-mode motion command is received within this period, all joint speeds\nwill automatically be set to zero. The", "source": "meca500_programming_manual", "chunk_index": 3619, "length": 146, "hash": "9c34d4455d2e713a34df426858e5fc19"}
{"id": "meca500_programming_manual_3620", "text": "(page 180) command serves as a safety\nprecaution and should be used accordingly. Note that the velocity-mode timeout is influenced\nby the", "source": "meca500_programming_manual", "chunk_index": 3620, "length": 137, "hash": "872d9aa6159193899c5624a37a6f2bd6"}
{"id": "meca500_programming_manual_3621", "text": "t: desired timeout period, in seconds, ranging from 0.001 to 1.", "source": "meca500_programming_manual", "chunk_index": 3621, "length": 63, "hash": "db2101e6f8fc9f36dfcb179fcb1e3668"}
{"id": "meca500_programming_manual_3622", "text": "t: desired timeout period, in seconds, ranging from 0.001 to 1.", "source": "meca500_programming_manual", "chunk_index": 3622, "length": 63, "hash": "db2101e6f8fc9f36dfcb179fcb1e3668"}
{"id": "meca500_programming_manual_3623", "text": "By default, the velocity-mode timeout is 0.050 s.", "source": "meca500_programming_manual", "chunk_index": 3623, "length": 49, "hash": "b19ec2c8ecf85a2ad55b7ce5f7c8ff67"}
{"id": "meca500_programming_manual_3624", "text": "By default, the velocity-mode timeout is 0.050 s.", "source": "meca500_programming_manual", "chunk_index": 3624, "length": 49, "hash": "b19ec2c8ecf85a2ad55b7ce5f7c8ff67"}
{"id": "meca500_programming_manual_3625", "text": "The deceleration period begins after the velocity timeout. The deceleration time will depend\non the current acceleration configured with SetJointAcc (page 161) or SetCartAcc (page 152)\ncommands.", "source": "meca500_programming_manual", "chunk_index": 3625, "length": 194, "hash": "9ffb67049fa4d57daf17530fcbf42e80"}
{"id": "meca500_programming_manual_3626", "text": "The deceleration period begins after the velocity timeout. The deceleration time will depend\non the current acceleration configured with", "source": "meca500_programming_manual", "chunk_index": 3626, "length": 136, "hash": "0449dd5a89c12ce16c22bb4217872d9c"}
{"id": "meca500_programming_manual_3627", "text": "(page 152)\ncommands.", "source": "meca500_programming_manual", "chunk_index": 3627, "length": 20, "hash": "d0be9ae3206313435aa7e8271b5f92b6"}
{"id": "meca500_programming_manual_3628", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3628, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3629", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3629, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3630", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3630, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3631", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3631, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3632", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3632, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3633", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3633, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3634", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3634, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3635", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3635, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3636", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3636, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3637", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3637, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3638", "text": "In cyclic protocols,\nMotionCommandID 24. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3638, "length": 72, "hash": "83027faa552b24d38253a5ede97607de"}
{"id": "meca500_programming_manual_3639", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3639, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3640", "text": "24. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3640, "length": 35, "hash": "8ff4d517c3541fd78feaf7aca996784f"}
{"id": "meca500_programming_manual_3641", "text": "(page 180) command is", "source": "meca500_programming_manual", "chunk_index": 3641, "length": 21, "hash": "b8003148bb3fdcecee4274937b0400e3"}
{"id": "meca500_programming_manual_3642", "text": "(page 180) command is", "source": "meca500_programming_manual", "chunk_index": 3642, "length": 21, "hash": "b8003148bb3fdcecee4274937b0400e3"}
{"id": "meca500_programming_manual_3643", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3643, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3644", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3644, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3645", "text": "This command defines the pose of the WRF with respect to the BRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "meca500_programming_manual", "chunk_index": 3645, "length": 158, "hash": "c1e99cfee50237fb809a267043b7b0fa"}
{"id": "meca500_programming_manual_3646", "text": "This command defines the pose of the WRF with respect to the BRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "meca500_programming_manual", "chunk_index": 3646, "length": 158, "hash": "c1e99cfee50237fb809a267043b7b0fa"}
{"id": "meca500_programming_manual_3647", "text": "\u2022 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 3647, "length": 83, "hash": "27817196a174e10f88f42049ccf80156"}
{"id": "meca500_programming_manual_3648", "text": "\u2022 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 3648, "length": 83, "hash": "27817196a174e10f88f42049ccf80156"}
{"id": "meca500_programming_manual_3649", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the WRF relative to the BRF, in\ndegrees.", "source": "meca500_programming_manual", "chunk_index": 3649, "length": 94, "hash": "15b71e5d35fa33ae15de0a7ea4b04105"}
{"id": "meca500_programming_manual_3650", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the WRF relative to the BRF, in", "source": "meca500_programming_manual", "chunk_index": 3650, "length": 85, "hash": "fe22ec9e081487a279b0f3b33a5e61e0"}
{"id": "meca500_programming_manual_3651", "text": "By default, the WRF coincides with the BRF.", "source": "meca500_programming_manual", "chunk_index": 3651, "length": 43, "hash": "4e3fb17ff2a7fe318ccd59a38e8859b3"}
{"id": "meca500_programming_manual_3652", "text": "By default, the WRF coincides with the BRF.", "source": "meca500_programming_manual", "chunk_index": 3652, "length": 43, "hash": "4e3fb17ff2a7fe318ccd59a38e8859b3"}
{"id": "meca500_programming_manual_3653", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3653, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_3654", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3654, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_3655", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 3655, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_3656", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3656, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_3657", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3657, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3658", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3658, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3659", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3659, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3660", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3660, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3661", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3661, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3662", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 3662, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_3663", "text": "In cyclic protocols, the SetWrf (page 181) command is represented by MotionCommandID 14.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3663, "length": 120, "hash": "9d5de47326277e21c4c2c3853ea42ce9"}
{"id": "meca500_programming_manual_3664", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3664, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3665", "text": "(page 181) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3665, "length": 36, "hash": "bb1e91016ffe7aae6f075977c7686613"}
{"id": "meca500_programming_manual_3666", "text": "14.\nSee Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3666, "length": 35, "hash": "03cce841f973e3e90989e66e7cf90797"}
{"id": "meca500_programming_manual_3667", "text": "Robot control commands", "source": "meca500_programming_manual", "chunk_index": 3667, "length": 22, "hash": "3344da5e701553d4223e49aa62b1299a"}
{"id": "meca500_programming_manual_3668", "text": "Robot control commands", "source": "meca500_programming_manual", "chunk_index": 3668, "length": 22, "hash": "3344da5e701553d4223e49aa62b1299a"}
{"id": "meca500_programming_manual_3669", "text": "Contrary to motion commands, robot control commands are executed immediately, i.e., are\ninstantaneous. The commands described in this section are used to control the status of the\nrobot (e.g., activate the robot) and to configure the robot. These commands return a unique\nresponse, the generic response \u201c[2085][Command successful: \u2018\u2026\u2019.]\u201d or some error message.\nFor brevity, only the unique responses will be listed for each robot control command.", "source": "meca500_programming_manual", "chunk_index": 3669, "length": 446, "hash": "9b71916cca26605f8f4efe63bf643154"}
{"id": "meca500_programming_manual_3670", "text": "Contrary to motion commands,", "source": "meca500_programming_manual", "chunk_index": 3670, "length": 28, "hash": "e3e9613fea50dfcf0c0d70e95e106765"}
{"id": "meca500_programming_manual_3671", "text": "robot control commands are executed immediately", "source": "meca500_programming_manual", "chunk_index": 3671, "length": 47, "hash": "d82fe7144d35daebab3cb187228305be"}
{"id": "meca500_programming_manual_3672", "text": ", i.e., are\ninstantaneous. The commands described in this section are used to control the status of the\nrobot (e.g., activate the robot) and to configure the robot. These commands return a unique\nresponse, the generic response \u201c[2085][Command successful: \u2018\u2026\u2019.]\u201d or some error message.\nFor brevity, only the unique responses will be listed for each robot control command.", "source": "meca500_programming_manual", "chunk_index": 3672, "length": 370, "hash": "d8fd8298b049703bd4aba9b4131a743b"}
{"id": "meca500_programming_manual_3673", "text": "The robot control commands are listed below in several groups.", "source": "meca500_programming_manual", "chunk_index": 3673, "length": 62, "hash": "260c4f21fc4bce9423a05afe09d92686"}
{"id": "meca500_programming_manual_3674", "text": "The robot control commands are listed below in several groups.", "source": "meca500_programming_manual", "chunk_index": 3674, "length": 62, "hash": "260c4f21fc4bce9423a05afe09d92686"}
{"id": "meca500_programming_manual_3675", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 3675, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_3676", "text": "Motion-related commands", "source": "meca500_programming_manual", "chunk_index": 3676, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "meca500_programming_manual_3677", "text": "\u2022 ClearMotion (page 186)", "source": "meca500_programming_manual", "chunk_index": 3677, "length": 24, "hash": "f49693e1e1939fc3868111d982bdae91"}
{"id": "meca500_programming_manual_3678", "text": "\u2022 PauseMotion (page 195)", "source": "meca500_programming_manual", "chunk_index": 3678, "length": 24, "hash": "7c316bc293182ec7a581ae7bb9f82e4d"}
{"id": "meca500_programming_manual_3679", "text": "\u2022 ResumeMotion (page 198)", "source": "meca500_programming_manual", "chunk_index": 3679, "length": 25, "hash": "3b146760c9c554345332c989bd9cc930"}
{"id": "meca500_programming_manual_3680", "text": "\u2022 ResetError (page 197)", "source": "meca500_programming_manual", "chunk_index": 3680, "length": 23, "hash": "50f51bb2ef90fb66985dc532eee48848"}
{"id": "meca500_programming_manual_3681", "text": "\u2022 SetCalibrationCfg (page 199)", "source": "meca500_programming_manual", "chunk_index": 3681, "length": 30, "hash": "a99bcf50cd03e620867324b809ee060e"}
{"id": "meca500_programming_manual_3682", "text": "\u2022 SetPStop2Cfg (page 208)", "source": "meca500_programming_manual", "chunk_index": 3682, "length": 25, "hash": "8ac54764f3f486be91016d16bfbc25da"}
{"id": "meca500_programming_manual_3683", "text": "\u2022 SetTimeScaling (page 215)", "source": "meca500_programming_manual", "chunk_index": 3683, "length": 27, "hash": "1af9c5f78714e90d851e1fac4cc0ba18"}
{"id": "meca500_programming_manual_3684", "text": "Robot status related commands", "source": "meca500_programming_manual", "chunk_index": 3684, "length": 29, "hash": "4e520179f081d9a6fdca102208c0e083"}
{"id": "meca500_programming_manual_3685", "text": "Robot status related commands", "source": "meca500_programming_manual", "chunk_index": 3685, "length": 29, "hash": "4e520179f081d9a6fdca102208c0e083"}
{"id": "meca500_programming_manual_3686", "text": "\u2022 ActivateRobot (page 184)", "source": "meca500_programming_manual", "chunk_index": 3686, "length": 26, "hash": "52a11b23c705c85d4c704f521b76de7a"}
{"id": "meca500_programming_manual_3687", "text": "\u2022 DeactivateRobot (page 188)", "source": "meca500_programming_manual", "chunk_index": 3687, "length": 28, "hash": "cd0ebdb2a4c96f8ef70c45b601ab5046"}
{"id": "meca500_programming_manual_3688", "text": "\u2022 RebootRobot (page 196)", "source": "meca500_programming_manual", "chunk_index": 3688, "length": 24, "hash": "c440a6649d5b0a754fea508208e9a1c0"}
{"id": "meca500_programming_manual_3689", "text": "\u2022 SetRecoveryMode (page 211)", "source": "meca500_programming_manual", "chunk_index": 3689, "length": 28, "hash": "c874a2899cba26b953bd7f6203683469"}
{"id": "meca500_programming_manual_3690", "text": "\u2022 ActivateSim (page 185)", "source": "meca500_programming_manual", "chunk_index": 3690, "length": 24, "hash": "1e2d945fb27c116af2514750aa77ba6d"}
{"id": "meca500_programming_manual_3691", "text": "\u2022 DeactivateSim (page 189)", "source": "meca500_programming_manual", "chunk_index": 3691, "length": 26, "hash": "f1757f20e23af4596ad835a34bf9a03a"}
{"id": "meca500_programming_manual_3692", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3692, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3693", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3693, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3694", "text": "\u2022 SetRealTimeMonitoring (page 209)", "source": "meca500_programming_manual", "chunk_index": 3694, "length": 34, "hash": "3603396ce081774958c8bc3923017bdd"}
{"id": "meca500_programming_manual_3695", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 3695, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_3696", "text": "\u2022 SetRobotName (page 212)", "source": "meca500_programming_manual", "chunk_index": 3696, "length": 25, "hash": "093add0c090c7de11bdac40a8a05b434"}
{"id": "meca500_programming_manual_3697", "text": "\u2022 SetMonitoringInterval (page 205)", "source": "meca500_programming_manual", "chunk_index": 3697, "length": 34, "hash": "741e27d68f43c6278e7dffa9579cda19"}
{"id": "meca500_programming_manual_3698", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 3698, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_3699", "text": "\u2022 SyncCmdQueue (page 221)", "source": "meca500_programming_manual", "chunk_index": 3699, "length": 25, "hash": "5084cb805bb4dbeeb5a2dddfca6a58bd"}
{"id": "meca500_programming_manual_3700", "text": "\u2022 LogTrace (page 193)", "source": "meca500_programming_manual", "chunk_index": 3700, "length": 21, "hash": "23482f77f715b6555074555a7e764dce"}
{"id": "meca500_programming_manual_3701", "text": "\u2022 LogUserCommands (page 194)", "source": "meca500_programming_manual", "chunk_index": 3701, "length": 28, "hash": "9de03329e88e7e2acecb4a23d9fb130c"}
{"id": "meca500_programming_manual_3702", "text": "\u2022 TcpDump (page 222)", "source": "meca500_programming_manual", "chunk_index": 3702, "length": 20, "hash": "bb3895992059f7bfbdb8b00566642ede"}
{"id": "meca500_programming_manual_3703", "text": "\u2022 TcpDumpStop (page 223)", "source": "meca500_programming_manual", "chunk_index": 3703, "length": 24, "hash": "c365648c3dbac43c1ce079ac4384225b"}
{"id": "meca500_programming_manual_3704", "text": "Program execution commands", "source": "meca500_programming_manual", "chunk_index": 3704, "length": 26, "hash": "ce9d1fc6c008c4da5142683f6f80103f"}
{"id": "meca500_programming_manual_3705", "text": "Program execution commands", "source": "meca500_programming_manual", "chunk_index": 3705, "length": 26, "hash": "ce9d1fc6c008c4da5142683f6f80103f"}
{"id": "meca500_programming_manual_3706", "text": "\u2022 StartProgram (page 216)", "source": "meca500_programming_manual", "chunk_index": 3706, "length": 25, "hash": "5c7e6baaaac6d6c3697471e33237dd3a"}
{"id": "meca500_programming_manual_3707", "text": "\u2022 StartSaving (page 217)", "source": "meca500_programming_manual", "chunk_index": 3707, "length": 24, "hash": "b3a4b4b3e9aee7117715cd790e12cd6b"}
{"id": "meca500_programming_manual_3708", "text": "\u2022 StopSaving (page 219)", "source": "meca500_programming_manual", "chunk_index": 3708, "length": 23, "hash": "06ed3969c52afcce340280c851d9e373"}
{"id": "meca500_programming_manual_3709", "text": "\u2022 SetOfflineProgramLoop (page 207)", "source": "meca500_programming_manual", "chunk_index": 3709, "length": 34, "hash": "67fc2f37da111d80627ef8da6aaaaeb4"}
{"id": "meca500_programming_manual_3710", "text": "SetOfflineProgramLoop", "source": "meca500_programming_manual", "chunk_index": 3710, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "meca500_programming_manual_3711", "text": "\u2022 ConnectionWatchdog (page 187)", "source": "meca500_programming_manual", "chunk_index": 3711, "length": 31, "hash": "666f26aefd24ab1a5b061b9c840163de"}
{"id": "meca500_programming_manual_3712", "text": "\u2022 EnableEtherNetIp (page 190)", "source": "meca500_programming_manual", "chunk_index": 3712, "length": 29, "hash": "987ecff214779e99b0123265fb5b69a9"}
{"id": "meca500_programming_manual_3713", "text": "\u2022 EnableProfinet (page 191)", "source": "meca500_programming_manual", "chunk_index": 3713, "length": 27, "hash": "49f89683a70e50729591d0b96659c280"}
{"id": "meca500_programming_manual_3714", "text": "\u2022 SwitchToEtherCat (page 220)", "source": "meca500_programming_manual", "chunk_index": 3714, "length": 29, "hash": "85df1c276bf06970e05f927fe4c10108"}
{"id": "meca500_programming_manual_3715", "text": "\u2022 SetNetworkOptions (page 206)", "source": "meca500_programming_manual", "chunk_index": 3715, "length": 30, "hash": "d9af38dcc5a14daf3ee0e6e01df99bf7"}
{"id": "meca500_programming_manual_3716", "text": "\u2022 SetCtrlPortMonitoring (page 200)", "source": "meca500_programming_manual", "chunk_index": 3716, "length": 34, "hash": "b3517f75d5f0a0d1eb2eb185858fb267"}
{"id": "meca500_programming_manual_3717", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 3717, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_3718", "text": "Joint limits commands", "source": "meca500_programming_manual", "chunk_index": 3718, "length": 21, "hash": "59bfa63bd59ea11d9db8bd359a6e3924"}
{"id": "meca500_programming_manual_3719", "text": "Joint limits commands", "source": "meca500_programming_manual", "chunk_index": 3719, "length": 21, "hash": "59bfa63bd59ea11d9db8bd359a6e3924"}
{"id": "meca500_programming_manual_3720", "text": "\u2022 SetJointLimits (page 203)", "source": "meca500_programming_manual", "chunk_index": 3720, "length": 27, "hash": "8978dfc5841249fd202b5bf96524b1d4"}
{"id": "meca500_programming_manual_3721", "text": "\u2022 SetJointLimitsCfg (page 204)", "source": "meca500_programming_manual", "chunk_index": 3721, "length": 30, "hash": "86c15430ed540840099f3a1978c7cecf"}
{"id": "meca500_programming_manual_3722", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3722, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3723", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3723, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3724", "text": "This command activates all motors (as well as the EOAT connected to the tool I/O port) and\ndisables the brakes of the joints.", "source": "meca500_programming_manual", "chunk_index": 3724, "length": 125, "hash": "9df313169aa5a7b68e8913c305ae9803"}
{"id": "meca500_programming_manual_3725", "text": "This command activates all motors (as well as the EOAT connected to the tool I/O port) and\ndisables the brakes of the joints.", "source": "meca500_programming_manual", "chunk_index": 3725, "length": 125, "hash": "9df313169aa5a7b68e8913c305ae9803"}
{"id": "meca500_programming_manual_3726", "text": "\u2022 e: the argument is optional; if the argument is used and is 1, the command forces a", "source": "meca500_programming_manual", "chunk_index": 3726, "length": 85, "hash": "9fff8a137ca762598c1c7db20f72456b"}
{"id": "meca500_programming_manual_3727", "text": "\u2022 e: the argument is optional; if the argument is used and is 1, the command forces a", "source": "meca500_programming_manual", "chunk_index": 3727, "length": 85, "hash": "9fff8a137ca762598c1c7db20f72456b"}
{"id": "meca500_programming_manual_3728", "text": "re-initialization of the drives and homing is then required.", "source": "meca500_programming_manual", "chunk_index": 3728, "length": 60, "hash": "cc9826b05ce2cb2adb51328a8cf81c5a"}
{"id": "meca500_programming_manual_3729", "text": "re-initialization of the drives and homing is then required.", "source": "meca500_programming_manual", "chunk_index": 3729, "length": 60, "hash": "cc9826b05ce2cb2adb51328a8cf81c5a"}
{"id": "meca500_programming_manual_3730", "text": "\u2022 [2000][Motors activated.]", "source": "meca500_programming_manual", "chunk_index": 3730, "length": 27, "hash": "eac285c3ec0d9d92d3a2564d1093e172"}
{"id": "meca500_programming_manual_3731", "text": "\u2022 [2000][Motors activated.]", "source": "meca500_programming_manual", "chunk_index": 3731, "length": 27, "hash": "eac285c3ec0d9d92d3a2564d1093e172"}
{"id": "meca500_programming_manual_3732", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3732, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3733", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3733, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3734", "text": "If the robot is already activated, the response is returned and the robot does nothing.", "source": "meca500_programming_manual", "chunk_index": 3734, "length": 87, "hash": "60270e835b9cbd7b116a1550ee11deae"}
{"id": "meca500_programming_manual_3735", "text": "If the robot is already activated, the response is returned and the robot does nothing.", "source": "meca500_programming_manual", "chunk_index": 3735, "length": 87, "hash": "60270e835b9cbd7b116a1550ee11deae"}
{"id": "meca500_programming_manual_3736", "text": "In cyclic protocols, the ActivateRobot (page 184) command is mapped to the ActivateRobot\nbit in the RobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3736, "length": 148, "hash": "860fb3218af6d03d97cedeb5fa654a65"}
{"id": "meca500_programming_manual_3737", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3737, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3738", "text": "(page 184) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3738, "length": 35, "hash": "07546f6ea1956551ad1241c0b532b25b"}
{"id": "meca500_programming_manual_3739", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3739, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_3740", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3740, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3741", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3741, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3742", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. This mode allows you to test programs with the robot\u2019s\nhardware (i.e., hardware-in-the-loop simulation), without the risk of damaging the robot or\nits surroundings. Simulation mode can be activated and deactivated with the ActivateSim\n(page 185) and DeactivateSim (page 189) commands.", "source": "meca500_programming_manual", "chunk_index": 3742, "length": 410, "hash": "9c26fdcf2e71c91b011aa41e284fbfa0"}
{"id": "meca500_programming_manual_3743", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. This mode allows you to test programs with the robot\u2019s\nhardware (i.e., hardware-in-the-loop simulation), without the risk of damaging the robot or\nits surroundings. Simulation mode can be activated and deactivated with the", "source": "meca500_programming_manual", "chunk_index": 3743, "length": 348, "hash": "2d038437ef135b6429a325145a9872a9"}
{"id": "meca500_programming_manual_3744", "text": "(page 189) commands.", "source": "meca500_programming_manual", "chunk_index": 3744, "length": 20, "hash": "4bc0813d4d01166fb4e2808eee683837"}
{"id": "meca500_programming_manual_3745", "text": "As of firmware 11.1, a new fast simulation mode is available, enabling commands to execute\nas quickly as possible. This significantly speeds up the testing of commands and programs.", "source": "meca500_programming_manual", "chunk_index": 3745, "length": 181, "hash": "f4691ff8e918f5064f15ac8926bb7251"}
{"id": "meca500_programming_manual_3746", "text": "As of firmware 11.1, a new fast simulation mode is available, enabling commands to execute\nas quickly as possible. This significantly speeds up the testing of commands and programs.", "source": "meca500_programming_manual", "chunk_index": 3746, "length": 181, "hash": "f4691ff8e918f5064f15ac8926bb7251"}
{"id": "meca500_programming_manual_3747", "text": "\u2022 none: enable using the default simulation mode type (see SetSimModeCfg (page 214));", "source": "meca500_programming_manual", "chunk_index": 3747, "length": 85, "hash": "da9caef0fcb0c18ec1ea7e7287a4417b"}
{"id": "meca500_programming_manual_3748", "text": "\u2022 none: enable using the default simulation mode type (see", "source": "meca500_programming_manual", "chunk_index": 3748, "length": 58, "hash": "3341f21656306637d186343c422f4ea4"}
{"id": "meca500_programming_manual_3749", "text": "\u2022 m: integer specifying the simulation mode type as", "source": "meca500_programming_manual", "chunk_index": 3749, "length": 51, "hash": "eac0f8d06e09fcbdb10b5382209f770b"}
{"id": "meca500_programming_manual_3750", "text": "\u2022 m: integer specifying the simulation mode type as", "source": "meca500_programming_manual", "chunk_index": 3750, "length": 51, "hash": "eac0f8d06e09fcbdb10b5382209f770b"}
{"id": "meca500_programming_manual_3751", "text": "\u2013 0, disabled (equivalent to using the command DeactivateSim (page 189)),", "source": "meca500_programming_manual", "chunk_index": 3751, "length": 73, "hash": "dec78e3c58fad52135b84455f3a839a3"}
{"id": "meca500_programming_manual_3752", "text": "0, disabled (equivalent to using the command", "source": "meca500_programming_manual", "chunk_index": 3752, "length": 44, "hash": "d8c13e018c17473df5d2ba2f86514c51"}
{"id": "meca500_programming_manual_3753", "text": "\u2013 1, normal (real-time) simulation mode,", "source": "meca500_programming_manual", "chunk_index": 3753, "length": 40, "hash": "e1d3a894fc0ba495e31c36b341edad56"}
{"id": "meca500_programming_manual_3754", "text": "1, normal (real-time) simulation mode,", "source": "meca500_programming_manual", "chunk_index": 3754, "length": 38, "hash": "14490b35ce897202e7300d274a426c35"}
{"id": "meca500_programming_manual_3755", "text": "\u2013 2, fast simulation mode.", "source": "meca500_programming_manual", "chunk_index": 3755, "length": 26, "hash": "c2427837f3b62dad74bdca08d61e8bb1"}
{"id": "meca500_programming_manual_3756", "text": "2, fast simulation mode.", "source": "meca500_programming_manual", "chunk_index": 3756, "length": 24, "hash": "fa018b3d200392d59be78cd3a186865a"}
{"id": "meca500_programming_manual_3757", "text": "\u2022 [2045][The simulation mode is enabled.]", "source": "meca500_programming_manual", "chunk_index": 3757, "length": 41, "hash": "09235615fa0edc1ec33dc3cc6dbae911"}
{"id": "meca500_programming_manual_3758", "text": "\u2022 [2045][The simulation mode is enabled.]", "source": "meca500_programming_manual", "chunk_index": 3758, "length": 41, "hash": "09235615fa0edc1ec33dc3cc6dbae911"}
{"id": "meca500_programming_manual_3759", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "meca500_programming_manual", "chunk_index": 3759, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "meca500_programming_manual_3760", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "meca500_programming_manual", "chunk_index": 3760, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "meca500_programming_manual_3761", "text": "\u2022 [1027][Simulation mode can only be enabled/disabled while the robot is deactivated.]", "source": "meca500_programming_manual", "chunk_index": 3761, "length": 86, "hash": "04ba091381d15b158da686b4cfdc484f"}
{"id": "meca500_programming_manual_3762", "text": "\u2022 [1027][Simulation mode can only be enabled/disabled while the robot is deactivated.]", "source": "meca500_programming_manual", "chunk_index": 3762, "length": 86, "hash": "04ba091381d15b158da686b4cfdc484f"}
{"id": "meca500_programming_manual_3763", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 3763, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_3764", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 3764, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_3765", "text": "In cyclic protocols,\nActivateSim bit in the RobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3765, "length": 92, "hash": "e4ef0eb8acf12ab16a476614de9f83b0"}
{"id": "meca500_programming_manual_3766", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3766, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3767", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3767, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_3768", "text": "the ActivateSim (page 185) command performed by setting the", "source": "meca500_programming_manual", "chunk_index": 3768, "length": 59, "hash": "61df613bc3f4b729cbb64e71bd077692"}
{"id": "meca500_programming_manual_3769", "text": "(page 185) command performed by setting the", "source": "meca500_programming_manual", "chunk_index": 3769, "length": 43, "hash": "9f7d62b09e14ddedb53e3313a893f890"}
{"id": "meca500_programming_manual_3770", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3770, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3771", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3771, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3772", "text": "This command stops the robot movement in the same fashion as the PauseMotion (page 195)\ncommand (i.e., by decelerating). The rest of the trajectory is deleted. The command\nResumeMotion (page 198) must be sent to make the robot ready to execute new motion\ncommands.", "source": "meca500_programming_manual", "chunk_index": 3772, "length": 264, "hash": "229ae6f7eb1f2d40c5920308e2ad7e49"}
{"id": "meca500_programming_manual_3773", "text": "This command stops the robot movement in the same fashion as the", "source": "meca500_programming_manual", "chunk_index": 3773, "length": 64, "hash": "1e9bd6502a827b795b43442e690564fb"}
{"id": "meca500_programming_manual_3774", "text": "(page 195)\ncommand (i.e., by decelerating). The rest of the trajectory is deleted. The command", "source": "meca500_programming_manual", "chunk_index": 3774, "length": 94, "hash": "757c9e2f526ef7865f98aa40112f350c"}
{"id": "meca500_programming_manual_3775", "text": "(page 198) must be sent to make the robot ready to execute new motion\ncommands.", "source": "meca500_programming_manual", "chunk_index": 3775, "length": 79, "hash": "b70bced47d75602febd688ef25ef3d05"}
{"id": "meca500_programming_manual_3776", "text": "\u2022 [2044][The motion was cleared.]", "source": "meca500_programming_manual", "chunk_index": 3776, "length": 33, "hash": "966db7dde3d129d06947940ca9b15515"}
{"id": "meca500_programming_manual_3777", "text": "\u2022 [2044][The motion was cleared.]", "source": "meca500_programming_manual", "chunk_index": 3777, "length": 33, "hash": "966db7dde3d129d06947940ca9b15515"}
{"id": "meca500_programming_manual_3778", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3778, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_3779", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3779, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_3780", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 3780, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_3781", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3781, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_3782", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3782, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3783", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3783, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3784", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3784, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3785", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3785, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3786", "text": "In cyclic protocols, the ClearMotion (page 186) command is mapped to the ClearMotion bit\nin the MotionControl data. See Table 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3786, "length": 145, "hash": "c3e88a40371dba48934c86f7f4d8d87f"}
{"id": "meca500_programming_manual_3787", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3787, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3788", "text": "(page 186) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3788, "length": 35, "hash": "ce37210652e405bc4edcf37dc0c66149"}
{"id": "meca500_programming_manual_3789", "text": "data. See Table 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3789, "length": 35, "hash": "e01f39e69182f0ed5721e9d485bc476b"}
{"id": "meca500_programming_manual_3790", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3790, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3791", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3791, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3792", "text": "For safety reasons, your application may start a communication watchdog with a timeout.\nThe application must send another ConnectionWatchdog (page 187) command before the\ndefined timeout otherwise the robot will automatically stop moving and report a safety stop\nwith the message [3086][1]. The goal is to make sure that the robot quickly stops moving\nif communication with the TCP application is interrupted for any reason (including network\nfailure or bug/freeze/dead-lock of the controlling application).", "source": "meca500_programming_manual", "chunk_index": 3792, "length": 507, "hash": "b814f1f0f6ab78da225250f718b01c53"}
{"id": "meca500_programming_manual_3793", "text": "For safety reasons, your application may start a communication watchdog with a timeout.\nThe application must send another", "source": "meca500_programming_manual", "chunk_index": 3793, "length": 121, "hash": "acef15c50b813413b670f2d8b26aeb89"}
{"id": "meca500_programming_manual_3794", "text": "(page 187) command before the\ndefined timeout otherwise the robot will automatically stop moving and report a safety stop\nwith the message [3086][1]. The goal is to make sure that the robot quickly stops moving\nif communication with the TCP application is interrupted for any reason (including network\nfailure or bug/freeze/dead-lock of the controlling application).", "source": "meca500_programming_manual", "chunk_index": 3794, "length": 366, "hash": "6a2a5d22272797b10a9b350d405e8669"}
{"id": "meca500_programming_manual_3795", "text": "ConnectionWatchdog(t)", "source": "meca500_programming_manual", "chunk_index": 3795, "length": 21, "hash": "bb85e080ad6612ec43ae6eac32a636d3"}
{"id": "meca500_programming_manual_3796", "text": "ConnectionWatchdog(t)", "source": "meca500_programming_manual", "chunk_index": 3796, "length": 21, "hash": "bb85e080ad6612ec43ae6eac32a636d3"}
{"id": "meca500_programming_manual_3797", "text": "\u2022 t: desired timeout period, in seconds, ranging from 0.001 to (2\u00b3\u00b2 \u2212 2)/1000.", "source": "meca500_programming_manual", "chunk_index": 3797, "length": 78, "hash": "3f6b7115e991a100cf0c17da5f2b49a6"}
{"id": "meca500_programming_manual_3798", "text": "\u2022 t: desired timeout period, in seconds, ranging from 0.001 to (2\u00b3\u00b2 \u2212 2)/1000.", "source": "meca500_programming_manual", "chunk_index": 3798, "length": 78, "hash": "3f6b7115e991a100cf0c17da5f2b49a6"}
{"id": "meca500_programming_manual_3799", "text": "argument is zero, the connection watchdog is canceled.", "source": "meca500_programming_manual", "chunk_index": 3799, "length": 54, "hash": "84af33383813b089b58d4a50c6c61672"}
{"id": "meca500_programming_manual_3800", "text": "argument is zero, the connection watchdog is canceled.", "source": "meca500_programming_manual", "chunk_index": 3800, "length": 54, "hash": "84af33383813b089b58d4a50c6c61672"}
{"id": "meca500_programming_manual_3801", "text": "By default, the robot will supervise the TCP connection but only when the robot is moving, and\nas soon as it detects a connection loss, it will stop moving and return the message [3086][1].\nHowever, the delay between the connection loss and the detection may vary from a few\nmilliseconds to several seconds, depending on your network activity.", "source": "meca500_programming_manual", "chunk_index": 3801, "length": 343, "hash": "7da449eeb03b59f2c7f284db2baa2aa7"}
{"id": "meca500_programming_manual_3802", "text": "By default, the robot will supervise the TCP connection but only when the robot is moving, and\nas soon as it detects a connection loss, it will stop moving and return the message [3086][1].\nHowever, the delay between the connection loss and the detection may vary from a few\nmilliseconds to several seconds, depending on your network activity.", "source": "meca500_programming_manual", "chunk_index": 3802, "length": 343, "hash": "7da449eeb03b59f2c7f284db2baa2aa7"}
{"id": "meca500_programming_manual_3803", "text": "The first response is sent when the connection watchdog is activated for the first\ntime. The second response is sent when the connection watchdog is deactivated with\nConnectionWatchdog(0) (page 187).", "source": "meca500_programming_manual", "chunk_index": 3803, "length": 199, "hash": "c0a3b6c260b854f9d25d95abd291ad00"}
{"id": "meca500_programming_manual_3804", "text": "The first response is sent when the connection watchdog is activated for the first\ntime. The second response is sent when the connection watchdog is deactivated with", "source": "meca500_programming_manual", "chunk_index": 3804, "length": 165, "hash": "5af4a87cb62f707c1dd68d3f50898ddb"}
{"id": "meca500_programming_manual_3805", "text": "ConnectionWatchdog(0)", "source": "meca500_programming_manual", "chunk_index": 3805, "length": 21, "hash": "40d33e896fe627640be4348b57e3d6a4"}
{"id": "meca500_programming_manual_3806", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3806, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3807", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3807, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3808", "text": "This command is not available in cyclic protocols. However, each of these protocols has its\nown mechanism for managing communication timeouts. For example, in EtherCAT, the master\ncan detect a communication issue if a slave fails to respond within the expected cycle time,\ntriggering a watchdog timeout or setting an error status in the process image.", "source": "meca500_programming_manual", "chunk_index": 3808, "length": 351, "hash": "c173ca47453fdea36b9ad9d033e05e66"}
{"id": "meca500_programming_manual_3809", "text": "This command is not available in cyclic protocols. However, each of these protocols has its\nown mechanism for managing communication timeouts. For example, in EtherCAT, the master", "source": "meca500_programming_manual", "chunk_index": 3809, "length": 179, "hash": "4d3c5030e69d468fe38db615a08ab2a3"}
{"id": "meca500_programming_manual_3810", "text": "can detect a communication issue if a slave fails to respond within the expected cycle time,\ntriggering a watchdog timeout or setting an error status in the process image.", "source": "meca500_programming_manual", "chunk_index": 3810, "length": 171, "hash": "9545ff20bd2fd2c75c60409d5c6bc5a9"}
{"id": "meca500_programming_manual_3811", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3811, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3812", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3812, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3813", "text": "This command disables all motors (as well as the EOAT connected to the tool I/O port) and\nengages the brakes on the robot joints. You must deactivate the robot in order to use certain\ncommands (e.g., SetJointLimits (page 203), SetNetworkOptions (page 206)).", "source": "meca500_programming_manual", "chunk_index": 3813, "length": 257, "hash": "b555c56c00e52a7b52b0b21fe50ef51c"}
{"id": "meca500_programming_manual_3814", "text": "This command disables all motors (as well as the EOAT connected to the tool I/O port) and\nengages the brakes on the robot joints. You must deactivate the robot in order to use certain\ncommands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 3814, "length": 199, "hash": "471fd5adf8750371b49af3c15fc07203"}
{"id": "meca500_programming_manual_3815", "text": "\u2022 [2004][Motors deactivated.]", "source": "meca500_programming_manual", "chunk_index": 3815, "length": 29, "hash": "038e4f0e34ecb9d6cd1c4b1c2d943b8a"}
{"id": "meca500_programming_manual_3816", "text": "\u2022 [2004][Motors deactivated.]", "source": "meca500_programming_manual", "chunk_index": 3816, "length": 29, "hash": "038e4f0e34ecb9d6cd1c4b1c2d943b8a"}
{"id": "meca500_programming_manual_3817", "text": "If you deactivate a Meca500 that was already homed, and then reactivate it, you do not need\nto home it again, unless it has an MEGP 25* gripper installed. In the latter case, however,\nthe homing process is performed only for the gripper, and so the robot does not move. You\nalso need to home the robot again if you reactivated it with ActivateRobot(1) (page 184).", "source": "meca500_programming_manual", "chunk_index": 3817, "length": 363, "hash": "1f011840c737926f32962a7fd38f0708"}
{"id": "meca500_programming_manual_3818", "text": "If you deactivate a Meca500 that was already homed, and then reactivate it, you do not need\nto home it again, unless it has an MEGP 25* gripper installed. In the latter case, however,\nthe homing process is performed only for the gripper, and so the robot does not move. You\nalso need to home the robot again if you reactivated it with", "source": "meca500_programming_manual", "chunk_index": 3818, "length": 334, "hash": "d48f636c4e0bde6ed02e40b28569a866"}
{"id": "meca500_programming_manual_3819", "text": "By deactivating the robot, you will lose all settings (parameters) that are not persistent,\nsuch as the definitions of the TRF and the WRF, the desired turn of the last joint, etc.", "source": "meca500_programming_manual", "chunk_index": 3819, "length": 180, "hash": "6cad469c138f29798381b168eb56974c"}
{"id": "meca500_programming_manual_3820", "text": "By deactivating the robot, you will lose all settings (parameters) that are not persistent,\nsuch as the definitions of the TRF and the WRF, the desired turn of the last joint, etc.", "source": "meca500_programming_manual", "chunk_index": 3820, "length": 180, "hash": "6cad469c138f29798381b168eb56974c"}
{"id": "meca500_programming_manual_3821", "text": "This command can only be executed when the robot is activated.", "source": "meca500_programming_manual", "chunk_index": 3821, "length": 62, "hash": "cef67654cb1a3a39afdfa44e678f81f3"}
{"id": "meca500_programming_manual_3822", "text": "This command can only be executed when the robot is activated.", "source": "meca500_programming_manual", "chunk_index": 3822, "length": 62, "hash": "cef67654cb1a3a39afdfa44e678f81f3"}
{"id": "meca500_programming_manual_3823", "text": "In cyclic protocols,\nDeactivateRobot bit in the RobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3823, "length": 96, "hash": "4decece50e1ca42b863373f57f6dcbd4"}
{"id": "meca500_programming_manual_3824", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 3824, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_3825", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3825, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_3826", "text": "(page 188) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3826, "length": 35, "hash": "abce3009e343d8647e72e4d781500795"}
{"id": "meca500_programming_manual_3827", "text": "(page 188) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3827, "length": 35, "hash": "abce3009e343d8647e72e4d781500795"}
{"id": "meca500_programming_manual_3828", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3828, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3829", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3829, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3830", "text": "This command deactivates simulation mode.", "source": "meca500_programming_manual", "chunk_index": 3830, "length": 41, "hash": "08ecd8d02c495979fbfc9de62744e9ae"}
{"id": "meca500_programming_manual_3831", "text": "This command deactivates simulation mode.", "source": "meca500_programming_manual", "chunk_index": 3831, "length": 41, "hash": "08ecd8d02c495979fbfc9de62744e9ae"}
{"id": "meca500_programming_manual_3832", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "meca500_programming_manual", "chunk_index": 3832, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "meca500_programming_manual_3833", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "meca500_programming_manual", "chunk_index": 3833, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "meca500_programming_manual_3834", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 3834, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_3835", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 3835, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_3836", "text": "In cyclic protocols, the DeactivateSim (page 189) command is performed by clearing the\nActivateSim bit in the RobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3836, "length": 158, "hash": "b9c62539ed357bc4cea095b31290222b"}
{"id": "meca500_programming_manual_3837", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3837, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3838", "text": "(page 189) command is performed by clearing the", "source": "meca500_programming_manual", "chunk_index": 3838, "length": 47, "hash": "c2b2ee607dad1d8a75b02aa32525c689"}
{"id": "meca500_programming_manual_3839", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3839, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_3840", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3840, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3841", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3841, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3842", "text": "This command enables or disables EtherNet/IP slave stack, allowing the robot to be controlled\nor monitored by a EtherNetIP controller.", "source": "meca500_programming_manual", "chunk_index": 3842, "length": 134, "hash": "9482ff850a5c4062e99e7167aefabb71"}
{"id": "meca500_programming_manual_3843", "text": "This command enables or disables EtherNet/IP slave stack, allowing the robot to be controlled\nor monitored by a EtherNetIP controller.", "source": "meca500_programming_manual", "chunk_index": 3843, "length": 134, "hash": "9482ff850a5c4062e99e7167aefabb71"}
{"id": "meca500_programming_manual_3844", "text": "\u2022 e: EtherNet/IP mode setting. The possible values are:", "source": "meca500_programming_manual", "chunk_index": 3844, "length": 55, "hash": "c65030a488364a0158b7d984b8fea6cc"}
{"id": "meca500_programming_manual_3845", "text": "\u2022 e: EtherNet/IP mode setting. The possible values are:", "source": "meca500_programming_manual", "chunk_index": 3845, "length": 55, "hash": "c65030a488364a0158b7d984b8fea6cc"}
{"id": "meca500_programming_manual_3846", "text": "\u2013 0: Disable EtherNet/IP;", "source": "meca500_programming_manual", "chunk_index": 3846, "length": 25, "hash": "2a4aae91cef57cd02749152e914d24dd"}
{"id": "meca500_programming_manual_3847", "text": "0: Disable EtherNet/IP;", "source": "meca500_programming_manual", "chunk_index": 3847, "length": 23, "hash": "75cd0517c2cf0c7c8de70baf644025eb"}
{"id": "meca500_programming_manual_3848", "text": "\u2013 1: Enable EtherNet/IP;", "source": "meca500_programming_manual", "chunk_index": 3848, "length": 24, "hash": "33ff06dbea86afd647fa3277ed8e5629"}
{"id": "meca500_programming_manual_3849", "text": "1: Enable EtherNet/IP;", "source": "meca500_programming_manual", "chunk_index": 3849, "length": 22, "hash": "944aa61b71c2e3e721e851642b834a5c"}
{"id": "meca500_programming_manual_3850", "text": "\u2013 2: Enable EtherNet/IP in monitoring mode only.", "source": "meca500_programming_manual", "chunk_index": 3850, "length": 48, "hash": "27f359b57c46bd7c9439b3c165650986"}
{"id": "meca500_programming_manual_3851", "text": "2: Enable EtherNet/IP in monitoring mode only.", "source": "meca500_programming_manual", "chunk_index": 3851, "length": 46, "hash": "7cd79ab4836e1d14c58990dff8d349d4"}
{"id": "meca500_programming_manual_3852", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 0 (EtherNet/IP is disabled).", "source": "meca500_programming_manual", "chunk_index": 3852, "length": 136, "hash": "9d89ab5aa786e6a78de1badaf0a1cfc7"}
{"id": "meca500_programming_manual_3853", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 3853, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_3854", "text": "The factory\ndefault is 0 (EtherNet/IP is disabled).", "source": "meca500_programming_manual", "chunk_index": 3854, "length": 51, "hash": "9a10b08df0ca14f3e637152c05b5b83a"}
{"id": "meca500_programming_manual_3855", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3855, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3856", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3856, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3857", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3857, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3858", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3858, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3859", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3859, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3860", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3860, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3861", "text": "This command enables or disables the PROFINET slave stack, allowing the robot to be\ncontrolled or monitored by a PROFINET controller. When enabled, it also forwards LLDP\npackets between the robot\u2019s two Ethernet ports.", "source": "meca500_programming_manual", "chunk_index": 3861, "length": 217, "hash": "65886d6821a68c4d197b6fab8058af77"}
{"id": "meca500_programming_manual_3862", "text": "This command enables or disables the PROFINET slave stack, allowing the robot to be\ncontrolled or monitored by a PROFINET controller. When enabled, it also forwards LLDP\npackets between the robot\u2019s two Ethernet ports.", "source": "meca500_programming_manual", "chunk_index": 3862, "length": 217, "hash": "65886d6821a68c4d197b6fab8058af77"}
{"id": "meca500_programming_manual_3863", "text": "\u2022 e: PROFINET mode setting. The possible values are:", "source": "meca500_programming_manual", "chunk_index": 3863, "length": 52, "hash": "4708014b401c28542cf0385ab50077d3"}
{"id": "meca500_programming_manual_3864", "text": "\u2022 e: PROFINET mode setting. The possible values are:", "source": "meca500_programming_manual", "chunk_index": 3864, "length": 52, "hash": "4708014b401c28542cf0385ab50077d3"}
{"id": "meca500_programming_manual_3865", "text": "\u2013 0: Disable PROFINET;", "source": "meca500_programming_manual", "chunk_index": 3865, "length": 22, "hash": "627f745fef08a3bcee3bd54e59a34edc"}
{"id": "meca500_programming_manual_3866", "text": "0: Disable PROFINET;", "source": "meca500_programming_manual", "chunk_index": 3866, "length": 20, "hash": "5cbe655b6564a35c4ddda3a7ceabbe43"}
{"id": "meca500_programming_manual_3867", "text": "\u2013 1: Enable PROFINET;", "source": "meca500_programming_manual", "chunk_index": 3867, "length": 21, "hash": "56517d502d00b44c53c4eed0106aade2"}
{"id": "meca500_programming_manual_3868", "text": "\u2013 2: Enable PROFINET in monitoring mode only.", "source": "meca500_programming_manual", "chunk_index": 3868, "length": 45, "hash": "838a3656c3d775a77fd9d5d796e37e96"}
{"id": "meca500_programming_manual_3869", "text": "2: Enable PROFINET in monitoring mode only.", "source": "meca500_programming_manual", "chunk_index": 3869, "length": 43, "hash": "39a08be37f05cd16aa3e97773091b33a"}
{"id": "meca500_programming_manual_3870", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 0 (PROFINET is disabled).", "source": "meca500_programming_manual", "chunk_index": 3870, "length": 133, "hash": "194b45daaf5e16a83732bb1ec6a8922f"}
{"id": "meca500_programming_manual_3871", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 3871, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_3872", "text": "The factory\ndefault is 0 (PROFINET is disabled).", "source": "meca500_programming_manual", "chunk_index": 3872, "length": 48, "hash": "3353aee37415e8595719fe89d68f219d"}
{"id": "meca500_programming_manual_3873", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3873, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3874", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3874, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3875", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3875, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3876", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3876, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3877", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3877, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3878", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3878, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3879", "text": "This command starts the robot and MEGP 25* gripper homing process (Section 3). While\nit is critical to remove any obstacles that could hinder the robot and gripper\nhoming,\nmovements.", "source": "meca500_programming_manual", "chunk_index": 3879, "length": 182, "hash": "be3496fa01872609456b81d64355330a"}
{"id": "meca500_programming_manual_3880", "text": "This command starts the robot and MEGP 25* gripper homing process (Section 3). While\nit is critical to remove any obstacles that could hinder the robot and gripper\nhoming,\nmovements.", "source": "meca500_programming_manual", "chunk_index": 3880, "length": 182, "hash": "be3496fa01872609456b81d64355330a"}
{"id": "meca500_programming_manual_3881", "text": "\u2022 [2002][Homing done.]", "source": "meca500_programming_manual", "chunk_index": 3881, "length": 22, "hash": "c90edb837b3dc735a900299b0707ced3"}
{"id": "meca500_programming_manual_3882", "text": "\u2022 [2002][Homing done.]", "source": "meca500_programming_manual", "chunk_index": 3882, "length": 22, "hash": "c90edb837b3dc735a900299b0707ced3"}
{"id": "meca500_programming_manual_3883", "text": "\u2022 [1032][Homing failed because joints are outside limits.]", "source": "meca500_programming_manual", "chunk_index": 3883, "length": 58, "hash": "0207d1140dad0ecc7a23a437bf53ed3b"}
{"id": "meca500_programming_manual_3884", "text": "\u2022 [1032][Homing failed because joints are outside limits.]", "source": "meca500_programming_manual", "chunk_index": 3884, "length": 58, "hash": "0207d1140dad0ecc7a23a437bf53ed3b"}
{"id": "meca500_programming_manual_3885", "text": "\u2022 [1014][Homing failed.]", "source": "meca500_programming_manual", "chunk_index": 3885, "length": 24, "hash": "1461ca7c6d731af1b0488dffd01a068e"}
{"id": "meca500_programming_manual_3886", "text": "\u2022 [1014][Homing failed.]", "source": "meca500_programming_manual", "chunk_index": 3886, "length": 24, "hash": "1461ca7c6d731af1b0488dffd01a068e"}
{"id": "meca500_programming_manual_3887", "text": "The first response (2002) is sent if homing was completed successfully. The second response\n(1032) is sent if the homing procedure failed because it was started while a robot joint was\noutside its user defined limits. The last response (1014) is sent if the homing failed for other\nreasons.", "source": "meca500_programming_manual", "chunk_index": 3887, "length": 290, "hash": "63901329445b7ab70a7d71fc3a1bce7b"}
{"id": "meca500_programming_manual_3888", "text": "The first response (2002) is sent if homing was completed successfully. The second response\n(1032) is sent if the homing procedure failed because it was started while a robot joint was\noutside its user defined limits. The last response (1014) is sent if the homing failed for other\nreasons.", "source": "meca500_programming_manual", "chunk_index": 3888, "length": 290, "hash": "63901329445b7ab70a7d71fc3a1bce7b"}
{"id": "meca500_programming_manual_3889", "text": "This command can only be executed when the robot is activated or already homed (in which\ncase it will return the response and do nothing).", "source": "meca500_programming_manual", "chunk_index": 3889, "length": 138, "hash": "f16fd9aaa9b6f4e9db83cdef271a50f6"}
{"id": "meca500_programming_manual_3890", "text": "This command can only be executed when the robot is activated or already homed (in which\ncase it will return the response and do nothing).", "source": "meca500_programming_manual", "chunk_index": 3890, "length": 138, "hash": "f16fd9aaa9b6f4e9db83cdef271a50f6"}
{"id": "meca500_programming_manual_3891", "text": "In cyclic protocols, the Home (page 192) command is mapped to the Home bit in the\nRobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3891, "length": 130, "hash": "ce3a5e1766db27a9aeb875325747fc86"}
{"id": "meca500_programming_manual_3892", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3892, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3893", "text": "(page 192) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3893, "length": 35, "hash": "bd94e5b351c46a6edce453c0b2aa7e68"}
{"id": "meca500_programming_manual_3894", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3894, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_3895", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3895, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3896", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3896, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3897", "text": "This command inserts a comment into the user and robot logs (see Section 9). It is useful for\ndebugging, allowing you to show our support team where exactly a certain event occurs.", "source": "meca500_programming_manual", "chunk_index": 3897, "length": 180, "hash": "b512e5a99071d2cf0362ec0345c6282b"}
{"id": "meca500_programming_manual_3898", "text": "This command inserts a comment into the user and robot logs (see Section 9). It is useful for\ndebugging, allowing you to show our support team where exactly a certain event occurs.", "source": "meca500_programming_manual", "chunk_index": 3898, "length": 180, "hash": "b512e5a99071d2cf0362ec0345c6282b"}
{"id": "meca500_programming_manual_3899", "text": "\u2022 s: a text string (the comment).", "source": "meca500_programming_manual", "chunk_index": 3899, "length": 33, "hash": "a47eeda1df041ac1d152cded3189f5e4"}
{"id": "meca500_programming_manual_3900", "text": "\u2022 s: a text string (the comment).", "source": "meca500_programming_manual", "chunk_index": 3900, "length": 33, "hash": "a47eeda1df041ac1d152cded3189f5e4"}
{"id": "meca500_programming_manual_3901", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3901, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3902", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3902, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3903", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3903, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3904", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3904, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3905", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3905, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3906", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3906, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3907", "text": "This command enables/disables the logging of commands received by the robot and the\nresponses sent by the robot, as well as the logging of the beginning of execution of motion\ncommands. This command has effect only on the user and robot logs (see Section 9).", "source": "meca500_programming_manual", "chunk_index": 3907, "length": 258, "hash": "d7ffd23c700a517c67cfab1f3f80ff6b"}
{"id": "meca500_programming_manual_3908", "text": "This command enables/disables the logging of commands received by the robot and the\nresponses sent by the robot, as well as the logging of the beginning of execution of motion\ncommands. This command has effect only on the user and robot logs (see Section 9).", "source": "meca500_programming_manual", "chunk_index": 3908, "length": 258, "hash": "d7ffd23c700a517c67cfab1f3f80ff6b"}
{"id": "meca500_programming_manual_3909", "text": "LogUserCommands(e1,e2)", "source": "meca500_programming_manual", "chunk_index": 3909, "length": 22, "hash": "91505e1669fb7867392c76ae177a5646"}
{"id": "meca500_programming_manual_3910", "text": "\u2022 e1: enable (1) or disable (0) logging of received commands and sent responses;", "source": "meca500_programming_manual", "chunk_index": 3910, "length": 80, "hash": "50b77eb3c643f4b57954224a22bcaac4"}
{"id": "meca500_programming_manual_3911", "text": ": enable (1) or disable (0) logging of received commands and sent responses;", "source": "meca500_programming_manual", "chunk_index": 3911, "length": 76, "hash": "2033d3bd99fdde5c0f36d72be7fb0c0a"}
{"id": "meca500_programming_manual_3912", "text": "\u2022 e1: enable (1) or disable (0) logging of beginning of execution of motion commands.", "source": "meca500_programming_manual", "chunk_index": 3912, "length": 85, "hash": "7e48b2560303a579f7f4622fa2ab7e62"}
{"id": "meca500_programming_manual_3913", "text": ": enable (1) or disable (0) logging of beginning of execution of motion commands.", "source": "meca500_programming_manual", "chunk_index": 3913, "length": 81, "hash": "6c540447db9df0e7c5cfd981541d7add"}
{"id": "meca500_programming_manual_3914", "text": "Both logging states are disabled by default.", "source": "meca500_programming_manual", "chunk_index": 3914, "length": 44, "hash": "7004ea5bd257246c3d88a7429a328562"}
{"id": "meca500_programming_manual_3915", "text": "Both logging states are disabled by default.", "source": "meca500_programming_manual", "chunk_index": 3915, "length": 44, "hash": "7004ea5bd257246c3d88a7429a328562"}
{"id": "meca500_programming_manual_3916", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3916, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3917", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 3917, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_3918", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3918, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3919", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 3919, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_3920", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3920, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3921", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3921, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3922", "text": "This command stops the robot\u2019s movement. It is executed immediately upon receipt (within\n5 ms of being sent, depending on your network configuration). The robot decelerates to a\nstop rather than engaging the brakes. For instance, if a MoveLin (page 141) command is\nin progress when the PauseMotion (page 195) command is received, the robot\u2019s TCP will\nstop somewhere along the linear path. To determine the exact stop position, you can use the\nGetRtCartPos (page 272) or GetRtJointPos (page 276) commands.", "source": "meca500_programming_manual", "chunk_index": 3922, "length": 504, "hash": "6cb382bd14c7e1efb6ee53d3f5f4e356"}
{"id": "meca500_programming_manual_3923", "text": "This command stops the robot\u2019s movement. It is executed immediately upon receipt (within\n5 ms of being sent, depending on your network configuration). The robot decelerates to a\nstop rather than engaging the brakes. For instance, if a", "source": "meca500_programming_manual", "chunk_index": 3923, "length": 234, "hash": "851a2ad93c7ab9bfa668f298612ea780"}
{"id": "meca500_programming_manual_3924", "text": "(page 141) command is\nin progress when the", "source": "meca500_programming_manual", "chunk_index": 3924, "length": 42, "hash": "fb06ea0d978b10b66cb84d6759fbfde2"}
{"id": "meca500_programming_manual_3925", "text": "(page 195) command is received, the robot\u2019s TCP will\nstop somewhere along the linear path. To determine the exact stop position, you can use the", "source": "meca500_programming_manual", "chunk_index": 3925, "length": 144, "hash": "3b27f600397cb8ba968f9b4b84861a80"}
{"id": "meca500_programming_manual_3926", "text": "(page 276) commands.", "source": "meca500_programming_manual", "chunk_index": 3926, "length": 20, "hash": "65f65b9779dccbfa65f95305ca840cc3"}
{"id": "meca500_programming_manual_3927", "text": "The PauseMotion (page 195) command pauses the robot\u2019s motion without deleting the\nremaining trajectory, allowing it to be resumed with the ResumeMotion (page 198) command.\nThis feature is particularly useful for custom HMIs that require a pause button or for situations\nwhere an unexpected issue arises (e.g., if the robot is applying adhesive and the reservoir runs\nempty).", "source": "meca500_programming_manual", "chunk_index": 3927, "length": 374, "hash": "640238d3a9833e26fd8f12b3da58a775"}
{"id": "meca500_programming_manual_3928", "text": "(page 195) command pauses the robot\u2019s motion without deleting the\nremaining trajectory, allowing it to be resumed with the", "source": "meca500_programming_manual", "chunk_index": 3928, "length": 122, "hash": "6a7f00a91835d0bbaab50bf4501f084d"}
{"id": "meca500_programming_manual_3929", "text": "(page 198) command.\nThis feature is particularly useful for custom HMIs that require a pause button or for situations\nwhere an unexpected issue arises (e.g., if the robot is applying adhesive and the reservoir runs\nempty).", "source": "meca500_programming_manual", "chunk_index": 3929, "length": 222, "hash": "047978edc9241891fef0e2e7ab4a49d3"}
{"id": "meca500_programming_manual_3930", "text": "\u2022 [2042][Motion paused.]", "source": "meca500_programming_manual", "chunk_index": 3930, "length": 24, "hash": "d1a2cabfd5c5e15a1933253ffd26b6ff"}
{"id": "meca500_programming_manual_3931", "text": "\u2022 [2042][Motion paused.]", "source": "meca500_programming_manual", "chunk_index": 3931, "length": 24, "hash": "d1a2cabfd5c5e15a1933253ffd26b6ff"}
{"id": "meca500_programming_manual_3932", "text": "\u2022 [3004][End of movement.]", "source": "meca500_programming_manual", "chunk_index": 3932, "length": 26, "hash": "0043d5b6b23d264704d89095a816351d"}
{"id": "meca500_programming_manual_3933", "text": "\u2022 [3004][End of movement.]", "source": "meca500_programming_manual", "chunk_index": 3933, "length": 26, "hash": "0043d5b6b23d264704d89095a816351d"}
{"id": "meca500_programming_manual_3934", "text": "The first response (2042) is always sent, whereas the second (3004) is sent only if the robot\nwas moving when the command was received.", "source": "meca500_programming_manual", "chunk_index": 3934, "length": 135, "hash": "abc4107e9682b57b8405e5f3b10dcb9c"}
{"id": "meca500_programming_manual_3935", "text": "The first response (2042) is always sent, whereas the second (3004) is sent only if the robot\nwas moving when the command was received.", "source": "meca500_programming_manual", "chunk_index": 3935, "length": 135, "hash": "abc4107e9682b57b8405e5f3b10dcb9c"}
{"id": "meca500_programming_manual_3936", "text": "If a motion error occurs while the robot is paused (e.g., if another moving object collides with\nthe robot), the motion is cleared, and the trajectory can no longer be resumed.", "source": "meca500_programming_manual", "chunk_index": 3936, "length": 176, "hash": "f04d3170cd96dca627518f9568684a0d"}
{"id": "meca500_programming_manual_3937", "text": "If a motion error occurs while the robot is paused (e.g., if another moving object collides with\nthe robot), the motion is cleared, and the trajectory can no longer be resumed.", "source": "meca500_programming_manual", "chunk_index": 3937, "length": 176, "hash": "f04d3170cd96dca627518f9568684a0d"}
{"id": "meca500_programming_manual_3938", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3938, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_3939", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3939, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_3940", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 3940, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_3941", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 3941, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_3942", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3942, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3943", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 3943, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_3944", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3944, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3945", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 3945, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_3946", "text": "In cyclic protocols, the PauseMotion (page 195) command is mapped to the PauseMotion bit\nin the MotionControl data. See Table 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3946, "length": 145, "hash": "2ca8f2bb49557ad4dfb1be1d88951d96"}
{"id": "meca500_programming_manual_3947", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3947, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3948", "text": "(page 195) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3948, "length": 35, "hash": "a081f636dec2c89b376c550b9f81aa8f"}
{"id": "meca500_programming_manual_3949", "text": "data. See Table 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3949, "length": 35, "hash": "e01f39e69182f0ed5721e9d485bc476b"}
{"id": "meca500_programming_manual_3950", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3950, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3951", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3951, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3952", "text": "This command reboots the robot. While similar, rebooting differs from power cycling.", "source": "meca500_programming_manual", "chunk_index": 3952, "length": 84, "hash": "d4ad2dd0602b6aa5116f8fec66c597e5"}
{"id": "meca500_programming_manual_3953", "text": "This command reboots the robot. While similar, rebooting differs from power cycling.", "source": "meca500_programming_manual", "chunk_index": 3953, "length": 84, "hash": "d4ad2dd0602b6aa5116f8fec66c597e5"}
{"id": "meca500_programming_manual_3954", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 3954, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_3955", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 3955, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_3956", "text": "In cyclic protocols, the RebootRobot (page 196) command is represented by MotionCommandID\n200. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3956, "length": 126, "hash": "14f9a2dd7142753329dc96e9d8f5986f"}
{"id": "meca500_programming_manual_3957", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3957, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3958", "text": "(page 196) command is represented by", "source": "meca500_programming_manual", "chunk_index": 3958, "length": 36, "hash": "dfdd77b3d24c4468267952a2ab4fb3ce"}
{"id": "meca500_programming_manual_3959", "text": "200. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 3959, "length": 36, "hash": "3bc3d77d37cbe601289a0c60a4de9dfa"}
{"id": "meca500_programming_manual_3960", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3960, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3961", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3961, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3962", "text": "This command resets the robot error status.", "source": "meca500_programming_manual", "chunk_index": 3962, "length": 43, "hash": "a66e365101cf991b8245bee4e8b1deeb"}
{"id": "meca500_programming_manual_3963", "text": "This command resets the robot error status.", "source": "meca500_programming_manual", "chunk_index": 3963, "length": 43, "hash": "a66e365101cf991b8245bee4e8b1deeb"}
{"id": "meca500_programming_manual_3964", "text": "\u2022 [2005][The error was reset.]", "source": "meca500_programming_manual", "chunk_index": 3964, "length": 30, "hash": "34c62df49c1e480f7e4622d054d72a8d"}
{"id": "meca500_programming_manual_3965", "text": "\u2022 [2005][The error was reset.]", "source": "meca500_programming_manual", "chunk_index": 3965, "length": 30, "hash": "34c62df49c1e480f7e4622d054d72a8d"}
{"id": "meca500_programming_manual_3966", "text": "\u2022 [2006][There was no error to reset.]", "source": "meca500_programming_manual", "chunk_index": 3966, "length": 38, "hash": "d5c61823b535a6534b20f1a675366cc3"}
{"id": "meca500_programming_manual_3967", "text": "\u2022 [2006][There was no error to reset.]", "source": "meca500_programming_manual", "chunk_index": 3967, "length": 38, "hash": "d5c61823b535a6534b20f1a675366cc3"}
{"id": "meca500_programming_manual_3968", "text": "The first response (2005) is generated if the robot was in error mode, whereas the second\nresponse (2006) is sent if the robot was not in error mode.", "source": "meca500_programming_manual", "chunk_index": 3968, "length": 149, "hash": "2f72839c0d0d4231cf5eaad74029cfdb"}
{"id": "meca500_programming_manual_3969", "text": "The first response (2005) is generated if the robot was in error mode, whereas the second\nresponse (2006) is sent if the robot was not in error mode.", "source": "meca500_programming_manual", "chunk_index": 3969, "length": 149, "hash": "2f72839c0d0d4231cf5eaad74029cfdb"}
{"id": "meca500_programming_manual_3970", "text": "This command can only be executed when the robot is ready for motion (page 359).", "source": "meca500_programming_manual", "chunk_index": 3970, "length": 80, "hash": "db9bb5ef562c9b28a0d5c86a50d1674f"}
{"id": "meca500_programming_manual_3971", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 3971, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_3972", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 3972, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_3973", "text": "Note that when an error occurs while the robot is deactivated, it is reported using the\nappropriate status message, but the robot does not enter an error state and does not require\nto ResetError (page 197).", "source": "meca500_programming_manual", "chunk_index": 3973, "length": 206, "hash": "94859c7319203915eb4f6ca71d549479"}
{"id": "meca500_programming_manual_3974", "text": "Note that when an error occurs while the robot is deactivated, it is reported using the\nappropriate status message, but the robot does not enter an error state and does not require\nto", "source": "meca500_programming_manual", "chunk_index": 3974, "length": 183, "hash": "786e701235cb2a8057cdb31f994f6bc5"}
{"id": "meca500_programming_manual_3975", "text": "In cyclic protocols, the ResetError (page 197) command is mapped to the ResetError bit in\nthe RobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3975, "length": 142, "hash": "8bdc9144cd27721248f795adaae424e8"}
{"id": "meca500_programming_manual_3976", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 3976, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_3977", "text": "(page 197) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 3977, "length": 35, "hash": "0005eb6f585f369275fd885716cf393c"}
{"id": "meca500_programming_manual_3978", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 3978, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_3979", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3979, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3980", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 3980, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_3981", "text": "This command resumes the robot\u2019s movement if it was previously paused under one of the\nfollowing conditions:", "source": "meca500_programming_manual", "chunk_index": 3981, "length": 108, "hash": "bb8e0bec99cbd7c2dedf52bfd142c2ff"}
{"id": "meca500_programming_manual_3982", "text": "This command resumes the robot\u2019s movement if it was previously paused under one of the\nfollowing conditions:", "source": "meca500_programming_manual", "chunk_index": 3982, "length": 108, "hash": "bb8e0bec99cbd7c2dedf52bfd142c2ff"}
{"id": "meca500_programming_manual_3983", "text": "\u2022 By the PauseMotion (page 195) command.", "source": "meca500_programming_manual", "chunk_index": 3983, "length": 40, "hash": "dc77f19abfaad3b3a6fd791ef0d98fdd"}
{"id": "meca500_programming_manual_3984", "text": "\u2022 Due to a torque overload configured in pause motion mode (see SetTorqueLimitsCfg", "source": "meca500_programming_manual", "chunk_index": 3984, "length": 82, "hash": "da2d3c8448dc1cd12f86e460cbe006c4"}
{"id": "meca500_programming_manual_3985", "text": "\u2022 Due to a torque overload configured in pause motion mode (see", "source": "meca500_programming_manual", "chunk_index": 3985, "length": 63, "hash": "520b46435695fe263aeb3605c14fff95"}
{"id": "meca500_programming_manual_3986", "text": "\u2022 By the SWStop (Meca500 R4), which is no longer present.", "source": "meca500_programming_manual", "chunk_index": 3986, "length": 57, "hash": "dae5ab2c5ddcfa8af3c690bbccffc03d"}
{"id": "meca500_programming_manual_3987", "text": "\u2022 By the SWStop (Meca500 R4), which is no longer present.", "source": "meca500_programming_manual", "chunk_index": 3987, "length": 57, "hash": "dae5ab2c5ddcfa8af3c690bbccffc03d"}
{"id": "meca500_programming_manual_3988", "text": "The robot resumes the remaining trajectory from the position where it came to a stop (after\ndeceleration), unless an error occurred after the PauseMotion (page 195) or the robot was\ndeactivated and then reactivated.", "source": "meca500_programming_manual", "chunk_index": 3988, "length": 215, "hash": "9beab96114e78fda71f4ef422cf87eec"}
{"id": "meca500_programming_manual_3989", "text": "The robot resumes the remaining trajectory from the position where it came to a stop (after\ndeceleration), unless an error occurred after the", "source": "meca500_programming_manual", "chunk_index": 3989, "length": 141, "hash": "008ce48cefb901d49f777e194f250f6c"}
{"id": "meca500_programming_manual_3990", "text": "(page 195) or the robot was\ndeactivated and then reactivated.", "source": "meca500_programming_manual", "chunk_index": 3990, "length": 61, "hash": "3dfe3b380d56ee167df960b18c89ffa0"}
{"id": "meca500_programming_manual_3991", "text": "The ResumeMotion (page 198) command must also be sent after the ClearMotion (page 186)\ncommand. However, the robot will remain stationary until another motion command is\nreceived or retrieved from the motion queue. Additionally, the ResumeMotion (page 198)\ncommand must be sent after the ResetError (page 197) command.", "source": "meca500_programming_manual", "chunk_index": 3991, "length": 318, "hash": "93f5b16fb00db9860cd91d56d8ce71e2"}
{"id": "meca500_programming_manual_3992", "text": "(page 198) command must also be sent after the", "source": "meca500_programming_manual", "chunk_index": 3992, "length": 46, "hash": "c1a53d00057c66081d0bc50145f61cd8"}
{"id": "meca500_programming_manual_3993", "text": "(page 186)\ncommand. However, the robot will remain stationary until another motion command is", "source": "meca500_programming_manual", "chunk_index": 3993, "length": 93, "hash": "bd620b6ba6ab2813291af96f01467302"}
{"id": "meca500_programming_manual_3994", "text": "received or retrieved from the motion queue. Additionally, the", "source": "meca500_programming_manual", "chunk_index": 3994, "length": 62, "hash": "444753418f3874e2cbca43a43b8a8b14"}
{"id": "meca500_programming_manual_3995", "text": "(page 198)\ncommand must be sent after the", "source": "meca500_programming_manual", "chunk_index": 3995, "length": 41, "hash": "823eaa6127a00605185aaff9c97b9c62"}
{"id": "meca500_programming_manual_3996", "text": "\u2022 [2043][Motion resumed.]", "source": "meca500_programming_manual", "chunk_index": 3996, "length": 25, "hash": "0c1ab3e451a8bf6cd82eeb6754b8eb66"}
{"id": "meca500_programming_manual_3997", "text": "\u2022 [2043][Motion resumed.]", "source": "meca500_programming_manual", "chunk_index": 3997, "length": 25, "hash": "0c1ab3e451a8bf6cd82eeb6754b8eb66"}
{"id": "meca500_programming_manual_3998", "text": "It is not possible to pause the motion along a trajectory, move the end-effector away, and then\nresume the trajectory from where it left off. Any motion commands sent while the robot is\npaused will be added to the end of the motion queue.", "source": "meca500_programming_manual", "chunk_index": 3998, "length": 238, "hash": "9dbb6dde74d91282340cfec2e79d816a"}
{"id": "meca500_programming_manual_3999", "text": "It is not possible to pause the motion along a trajectory, move the end-effector away, and then\nresume the trajectory from where it left off. Any motion commands sent while the robot is\npaused will be added to the end of the motion queue.", "source": "meca500_programming_manual", "chunk_index": 3999, "length": 238, "hash": "9dbb6dde74d91282340cfec2e79d816a"}
{"id": "meca500_programming_manual_4000", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4000, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4001", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4001, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4002", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4002, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4003", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4003, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4004", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4004, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4005", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4005, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4006", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4006, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4007", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4007, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4008", "text": "In cyclic protocols, the ResumeMotion (page 198) command is mapped to the ResumeMotion\nbit in the MotionControl data. See Table 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4008, "length": 147, "hash": "8ac1eef07b563f14080ecd18f166ee29"}
{"id": "meca500_programming_manual_4009", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 4009, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_4010", "text": "(page 198) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 4010, "length": 35, "hash": "ac8e62ceabc0332ec7134b43abf4a50f"}
{"id": "meca500_programming_manual_4011", "text": "data. See Table 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4011, "length": 35, "hash": "e01f39e69182f0ed5721e9d485bc476b"}
{"id": "meca500_programming_manual_4012", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4012, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4013", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4013, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4014", "text": "If your robot has undergone our optional calibration service, you can use this command to\ndisable the calibration and revert to the robot\u2019s nominal parameters (such as link lengths and\njoint offsets). Calibration can be re-enabled at any time.", "source": "meca500_programming_manual", "chunk_index": 4014, "length": 243, "hash": "0997144af6d7f4a5731ee0e42e5e8d58"}
{"id": "meca500_programming_manual_4015", "text": "If your robot has undergone our optional calibration service, you can use this command to\ndisable the calibration and revert to the robot\u2019s nominal parameters (such as link lengths and\njoint offsets). Calibration can be re-enabled at any time.", "source": "meca500_programming_manual", "chunk_index": 4015, "length": 243, "hash": "0997144af6d7f4a5731ee0e42e5e8d58"}
{"id": "meca500_programming_manual_4016", "text": "Use the GetRobotCalibrated (page 257) command to check whether your robot has been\ncalibrated.", "source": "meca500_programming_manual", "chunk_index": 4016, "length": 94, "hash": "fd2521d35de1b0691fc44fa4757a5410"}
{"id": "meca500_programming_manual_4017", "text": "(page 257) command to check whether your robot has been\ncalibrated.", "source": "meca500_programming_manual", "chunk_index": 4017, "length": 67, "hash": "5d9a3da077d0eef5283dfd01acadd48e"}
{"id": "meca500_programming_manual_4018", "text": "SetCalibrationCfg(e)", "source": "meca500_programming_manual", "chunk_index": 4018, "length": 20, "hash": "2f0572329c8534a8d74e1b8f2e897647"}
{"id": "meca500_programming_manual_4019", "text": "SetCalibrationCfg(e)", "source": "meca500_programming_manual", "chunk_index": 4019, "length": 20, "hash": "2f0572329c8534a8d74e1b8f2e897647"}
{"id": "meca500_programming_manual_4020", "text": "\u2022 e: enable (1) or disable (0) the calibration.", "source": "meca500_programming_manual", "chunk_index": 4020, "length": 47, "hash": "0a4af2b15f1cba79f1721c4aab9ded15"}
{"id": "meca500_programming_manual_4021", "text": "\u2022 e: enable (1) or disable (0) the calibration.", "source": "meca500_programming_manual", "chunk_index": 4021, "length": 47, "hash": "0a4af2b15f1cba79f1721c4aab9ded15"}
{"id": "meca500_programming_manual_4022", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1 (calibration is enabled), even if the robot has not been calibrated.", "source": "meca500_programming_manual", "chunk_index": 4022, "length": 178, "hash": "4522f46ca047fe3f832385afd84fb038"}
{"id": "meca500_programming_manual_4023", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1 (calibration is enabled), even if the robot has not been calibrated.", "source": "meca500_programming_manual", "chunk_index": 4023, "length": 178, "hash": "4522f46ca047fe3f832385afd84fb038"}
{"id": "meca500_programming_manual_4024", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4024, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4025", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4025, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4026", "text": "In cyclic protocols,\nMotionCommandID 156. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4026, "length": 73, "hash": "3c841f5df40653488636e61c5de53e29"}
{"id": "meca500_programming_manual_4027", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4027, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4028", "text": "156. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4028, "length": 36, "hash": "925648195425b5efa902037fda48f6dc"}
{"id": "meca500_programming_manual_4029", "text": "the SetCalibrationCfg (page 199) command is represented by", "source": "meca500_programming_manual", "chunk_index": 4029, "length": 58, "hash": "f2106a4b73810bf47d35e48e59a2d063"}
{"id": "meca500_programming_manual_4030", "text": "(page 199) command is represented by", "source": "meca500_programming_manual", "chunk_index": 4030, "length": 36, "hash": "907bbf5ae4aab2c250e673125d203051"}
{"id": "meca500_programming_manual_4031", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4031, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4032", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4032, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4033", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 4033, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_4034", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 4034, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_4035", "text": "Although data is sent synchronously over the control and monitoring ports, socket delays\ncan cause desynchronization at the reception. If perfect synchronization is necessary, you\nmust request a copy of the monitoring port data send to the control port by using the\nSetCtrlPortMonitoring (page 200) command.", "source": "meca500_programming_manual", "chunk_index": 4035, "length": 307, "hash": "e28a1bf409f13ac44b67101cbf97a732"}
{"id": "meca500_programming_manual_4036", "text": "Although data is sent synchronously over the control and monitoring ports, socket delays\ncan cause desynchronization at the reception. If perfect synchronization is necessary, you\nmust request a copy of the monitoring port data send to the control port by using the", "source": "meca500_programming_manual", "chunk_index": 4036, "length": 265, "hash": "e0a5922ebcc53c8f2ad1d79d89602fe1"}
{"id": "meca500_programming_manual_4037", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 4037, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_4038", "text": "SetCtrlPortMonitoring(e)", "source": "meca500_programming_manual", "chunk_index": 4038, "length": 24, "hash": "4b73498b17fab6f895035d4024f84ea1"}
{"id": "meca500_programming_manual_4039", "text": "SetCtrlPortMonitoring(e)", "source": "meca500_programming_manual", "chunk_index": 4039, "length": 24, "hash": "4b73498b17fab6f895035d4024f84ea1"}
{"id": "meca500_programming_manual_4040", "text": "\u2022 e: enable (1) or disable (0) monitoring data over the control port.", "source": "meca500_programming_manual", "chunk_index": 4040, "length": 69, "hash": "4f293af7464b8fce358ec2acba2a5797"}
{"id": "meca500_programming_manual_4041", "text": "\u2022 e: enable (1) or disable (0) monitoring data over the control port.", "source": "meca500_programming_manual", "chunk_index": 4041, "length": 69, "hash": "4f293af7464b8fce358ec2acba2a5797"}
{"id": "meca500_programming_manual_4042", "text": "By default, the monitoring on the control port is disabled.", "source": "meca500_programming_manual", "chunk_index": 4042, "length": 59, "hash": "7129447b0f08fbebb800e98101c1043b"}
{"id": "meca500_programming_manual_4043", "text": "By default, the monitoring on the control port is disabled.", "source": "meca500_programming_manual", "chunk_index": 4043, "length": 59, "hash": "7129447b0f08fbebb800e98101c1043b"}
{"id": "meca500_programming_manual_4044", "text": "\u2022 [2096][Monitoring on control port enabled]", "source": "meca500_programming_manual", "chunk_index": 4044, "length": 44, "hash": "1ff54576bd7e9f780c806a632104a5f0"}
{"id": "meca500_programming_manual_4045", "text": "\u2022 [2096][Monitoring on control port enabled]", "source": "meca500_programming_manual", "chunk_index": 4045, "length": 44, "hash": "1ff54576bd7e9f780c806a632104a5f0"}
{"id": "meca500_programming_manual_4046", "text": "\u2022 [2096][Monitoring on control port disabled]", "source": "meca500_programming_manual", "chunk_index": 4046, "length": 45, "hash": "86137149509a9fa140a8eac55ee0d058"}
{"id": "meca500_programming_manual_4047", "text": "\u2022 [2096][Monitoring on control port disabled]", "source": "meca500_programming_manual", "chunk_index": 4047, "length": 45, "hash": "86137149509a9fa140a8eac55ee0d058"}
{"id": "meca500_programming_manual_4048", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4048, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4049", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4049, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4050", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4050, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4051", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4051, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4052", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 4052, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_4053", "text": "SetCtrlPortMonitoring", "source": "meca500_programming_manual", "chunk_index": 4053, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "meca500_programming_manual_4054", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4054, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4055", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4055, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4056", "text": "When the robot completes a motion command or a block of motion commands, it can send\nthe \u201c[3012] [End of block.]\u201d message. This means that there are no more motion commands\nin the queue and the robot velocity is zero. This message can be enabled/disabled using the\nSetEob (page 201) command.", "source": "meca500_programming_manual", "chunk_index": 4056, "length": 291, "hash": "791657351eceea38aeb16b732c988dd1"}
{"id": "meca500_programming_manual_4057", "text": "When the robot completes a motion command or a block of motion commands, it can send\nthe \u201c[3012] [End of block.]\u201d message. This means that there are no more motion commands\nin the queue and the robot velocity is zero. This message can be enabled/disabled using the", "source": "meca500_programming_manual", "chunk_index": 4057, "length": 264, "hash": "2747bdadeee59828fea6233a621513bd"}
{"id": "meca500_programming_manual_4058", "text": "\u2022 e: enable (1) or disable (0) the end-of-block message.", "source": "meca500_programming_manual", "chunk_index": 4058, "length": 56, "hash": "ba28dd7015f72bfb29ab4de731952564"}
{"id": "meca500_programming_manual_4059", "text": "\u2022 e: enable (1) or disable (0) the end-of-block message.", "source": "meca500_programming_manual", "chunk_index": 4059, "length": 56, "hash": "ba28dd7015f72bfb29ab4de731952564"}
{"id": "meca500_programming_manual_4060", "text": "By default, the end-of-block message is enabled.", "source": "meca500_programming_manual", "chunk_index": 4060, "length": 48, "hash": "208050717e9f7a7249bab4e53bab80b8"}
{"id": "meca500_programming_manual_4061", "text": "By default, the end-of-block message is enabled.", "source": "meca500_programming_manual", "chunk_index": 4061, "length": 48, "hash": "208050717e9f7a7249bab4e53bab80b8"}
{"id": "meca500_programming_manual_4062", "text": "\u2022 [2054][End of block is enabled.]", "source": "meca500_programming_manual", "chunk_index": 4062, "length": 34, "hash": "6b5e7ccb4727a117f6ca657847516b67"}
{"id": "meca500_programming_manual_4063", "text": "\u2022 [2054][End of block is enabled.]", "source": "meca500_programming_manual", "chunk_index": 4063, "length": 34, "hash": "6b5e7ccb4727a117f6ca657847516b67"}
{"id": "meca500_programming_manual_4064", "text": "\u2022 [2055][End of block is disabled.]", "source": "meca500_programming_manual", "chunk_index": 4064, "length": 35, "hash": "56e73f8cec06a9ebef713033aceba019"}
{"id": "meca500_programming_manual_4065", "text": "\u2022 [2055][End of block is disabled.]", "source": "meca500_programming_manual", "chunk_index": 4065, "length": 35, "hash": "56e73f8cec06a9ebef713033aceba019"}
{"id": "meca500_programming_manual_4066", "text": "We do not recommend using the \u201cEnd of block\u201d message to detect the completion of a\nprogram\u2019s execution. Instead, use the SetCheckpoint (page 155) command.", "source": "meca500_programming_manual", "chunk_index": 4066, "length": 154, "hash": "c54c171ab37cba85e6079822c6d89c4e"}
{"id": "meca500_programming_manual_4067", "text": "We do not recommend using the \u201cEnd of block\u201d message to detect the completion of a\nprogram\u2019s execution. Instead, use the", "source": "meca500_programming_manual", "chunk_index": 4067, "length": 120, "hash": "f11f3932ff764b61f8fe56ea87bcb2fa"}
{"id": "meca500_programming_manual_4068", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4068, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4069", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4069, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4070", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4070, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4071", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4071, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4072", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4072, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4073", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4073, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4074", "text": "The robot can also send the \u201c[3004][End of movement.]\u201d message as soon as the robot\nstops moving. This can happen after the commands MoveJoints (page 135), MoveJointsRel\n(page 137), MovePose (page 147), MoveJump (page 140), MoveLin (page 141), MoveLinRelTrf\n(page 143), MoveLinRelWrf (page 144), PauseMotion (page 195) and ClearMotion (page 186)\ncommands, as well as after the SetCartAcc (page 152) and SetJointAcc (page 161)\nIf blending is enabled (even only partially), then there would be no end-\ncommands.\nof-movement message between two consecutive Cartesian-space commands (MoveLin\n(page 141), MoveLinRelTrf (page 143), MoveLinRelWrf (page 144)) or two consecutive joint-\nspace commands (MoveJoints (page 135), MovePose (page 147), MoveJump (page 140)).", "source": "meca500_programming_manual", "chunk_index": 4074, "length": 759, "hash": "e1ba82813a0d6e9c9dc017ab1f8cd99f"}
{"id": "meca500_programming_manual_4075", "text": "The robot can also send the \u201c[3004][End of movement.]\u201d message as soon as the robot\nstops moving. This can happen after the commands", "source": "meca500_programming_manual", "chunk_index": 4075, "length": 132, "hash": "aaf99815b6bf427bbfceaf9070f24089"}
{"id": "meca500_programming_manual_4076", "text": "(page 186)\ncommands, as well as after the", "source": "meca500_programming_manual", "chunk_index": 4076, "length": 41, "hash": "d6ec9453d036831c7ae03def767142bd"}
{"id": "meca500_programming_manual_4077", "text": "(page 161)\nIf blending is enabled (even only partially), then there would be no end-\ncommands.\nof-movement message between two consecutive Cartesian-space commands (", "source": "meca500_programming_manual", "chunk_index": 4077, "length": 165, "hash": "4aac96b90b5218ec666823845fac13d5"}
{"id": "meca500_programming_manual_4078", "text": "(page 144)) or two consecutive joint-\nspace commands (", "source": "meca500_programming_manual", "chunk_index": 4078, "length": 54, "hash": "4104d3db53be8dd2a417508868976c11"}
{"id": "meca500_programming_manual_4079", "text": "\u2022 e: enable (1) or disable (0) the end-of-movement message.", "source": "meca500_programming_manual", "chunk_index": 4079, "length": 59, "hash": "11056c52462aa615966eba34d0224bb5"}
{"id": "meca500_programming_manual_4080", "text": "\u2022 e: enable (1) or disable (0) the end-of-movement message.", "source": "meca500_programming_manual", "chunk_index": 4080, "length": 59, "hash": "11056c52462aa615966eba34d0224bb5"}
{"id": "meca500_programming_manual_4081", "text": "By default, the end-of-movement message is disabled.", "source": "meca500_programming_manual", "chunk_index": 4081, "length": 52, "hash": "d13b930c175eaa06e581a957a5209629"}
{"id": "meca500_programming_manual_4082", "text": "By default, the end-of-movement message is disabled.", "source": "meca500_programming_manual", "chunk_index": 4082, "length": 52, "hash": "d13b930c175eaa06e581a957a5209629"}
{"id": "meca500_programming_manual_4083", "text": "\u2022 [2052][End of movement is enabled.]", "source": "meca500_programming_manual", "chunk_index": 4083, "length": 37, "hash": "fc09f0334efb89228d3fabd784dd878e"}
{"id": "meca500_programming_manual_4084", "text": "\u2022 [2052][End of movement is enabled.]", "source": "meca500_programming_manual", "chunk_index": 4084, "length": 37, "hash": "fc09f0334efb89228d3fabd784dd878e"}
{"id": "meca500_programming_manual_4085", "text": "\u2022 [2053][End of movement is disabled.]", "source": "meca500_programming_manual", "chunk_index": 4085, "length": 38, "hash": "4ae16906e3794b08eeeec6df6f9f89f8"}
{"id": "meca500_programming_manual_4086", "text": "\u2022 [2053][End of movement is disabled.]", "source": "meca500_programming_manual", "chunk_index": 4086, "length": 38, "hash": "4ae16906e3794b08eeeec6df6f9f89f8"}
{"id": "meca500_programming_manual_4087", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4087, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4088", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4088, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4089", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4089, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4090", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4090, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4091", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4091, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4092", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4092, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4093", "text": "This command redefines the lower and upper limits of a robot joint. To apply these user-\ndefined joint limits, execute the command SetJointLimitsCfg(1) (page 204). The new joint\nlimits must remain within the default limits.", "source": "meca500_programming_manual", "chunk_index": 4093, "length": 223, "hash": "6debe149de446251787811616b5be5c4"}
{"id": "meca500_programming_manual_4094", "text": "This command redefines the lower and upper limits of a robot joint. To apply these user-\ndefined joint limits, execute the command", "source": "meca500_programming_manual", "chunk_index": 4094, "length": 130, "hash": "2b0603c84e2646dde925bfd97e2da6ce"}
{"id": "meca500_programming_manual_4095", "text": "SetJointLimitsCfg(1)", "source": "meca500_programming_manual", "chunk_index": 4095, "length": 20, "hash": "bfcc5633befd2f0954641f1e4408517a"}
{"id": "meca500_programming_manual_4096", "text": "(page 204). The new joint\nlimits must remain within the default limits.", "source": "meca500_programming_manual", "chunk_index": 4096, "length": 71, "hash": "3fcd85e41e695951de60cbac97894be4"}
{"id": "meca500_programming_manual_4097", "text": "SetJointLimits(n,qn,min,qn,max)", "source": "meca500_programming_manual", "chunk_index": 4097, "length": 31, "hash": "4579314008b8765e9c86eabaee24bb56"}
{"id": "meca500_programming_manual_4098", "text": "\u2022 n: joint number, an integer;", "source": "meca500_programming_manual", "chunk_index": 4098, "length": 30, "hash": "fa9eb36597ff664945c1db0fa5aec375"}
{"id": "meca500_programming_manual_4099", "text": "\u2022 n: joint number, an integer;", "source": "meca500_programming_manual", "chunk_index": 4099, "length": 30, "hash": "fa9eb36597ff664945c1db0fa5aec375"}
{"id": "meca500_programming_manual_4100", "text": "\u2022 qn,min: lower joint limit, in degrees;", "source": "meca500_programming_manual", "chunk_index": 4100, "length": 40, "hash": "a0ce90cfac86c40b2bfaffff4115d003"}
{"id": "meca500_programming_manual_4101", "text": ": lower joint limit, in degrees;", "source": "meca500_programming_manual", "chunk_index": 4101, "length": 32, "hash": "65b436f58366f5688759b280a582df00"}
{"id": "meca500_programming_manual_4102", "text": "\u2022 qn,max: upper joint limit, in degrees.", "source": "meca500_programming_manual", "chunk_index": 4102, "length": 40, "hash": "b2c20288cf2c8646b2682406626a8852"}
{"id": "meca500_programming_manual_4103", "text": ": upper joint limit, in degrees.", "source": "meca500_programming_manual", "chunk_index": 4103, "length": 32, "hash": "66642280a5874413ca0dc282304a82cf"}
{"id": "meca500_programming_manual_4104", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault joint limits are specified in the technical specifications of the robot\u2019s user manual.\nUse SetJointLimits(n,0,0) (page 203) to reset the joint limits of joint n to its factory default\nvalues or simply disable the user-defined joint limits with the command SetJointLimitsCfg(0)\n(page 204).", "source": "meca500_programming_manual", "chunk_index": 4104, "length": 393, "hash": "afb79af87bc9b9b369027e4782ec1c37"}
{"id": "meca500_programming_manual_4105", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 4105, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_4106", "text": "The factory\ndefault joint limits are specified in the technical specifications of the robot\u2019s user manual.\nUse", "source": "meca500_programming_manual", "chunk_index": 4106, "length": 110, "hash": "21e0714d2ea08bc80e3a26a6b94bdd28"}
{"id": "meca500_programming_manual_4107", "text": "SetJointLimits(n,0,0)", "source": "meca500_programming_manual", "chunk_index": 4107, "length": 21, "hash": "3bf85d0149c7605d6bfd7e84bde3029b"}
{"id": "meca500_programming_manual_4108", "text": "(page 203) to reset the joint limits of joint n to its factory default\nvalues or simply disable the user-defined joint limits with the command", "source": "meca500_programming_manual", "chunk_index": 4108, "length": 142, "hash": "62b18e729da7241ef28f22c2797ad98b"}
{"id": "meca500_programming_manual_4109", "text": "SetJointLimitsCfg(0)", "source": "meca500_programming_manual", "chunk_index": 4109, "length": 20, "hash": "f35e24f87afb74dbe7d651e4c5e6fa6d"}
{"id": "meca500_programming_manual_4110", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4110, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4111", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4111, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4112", "text": "In cyclic protocols,\nMotionCommandID 150. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4112, "length": 73, "hash": "81e63e302588033967d8c789136a5280"}
{"id": "meca500_programming_manual_4113", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4113, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4114", "text": "150. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4114, "length": 36, "hash": "60cfa3545036c8a7177a51337b5ac098"}
{"id": "meca500_programming_manual_4115", "text": "(page 203) command is", "source": "meca500_programming_manual", "chunk_index": 4115, "length": 21, "hash": "0ab6d412ee2361e0875fb8700715fb06"}
{"id": "meca500_programming_manual_4116", "text": "(page 203) command is", "source": "meca500_programming_manual", "chunk_index": 4116, "length": 21, "hash": "0ab6d412ee2361e0875fb8700715fb06"}
{"id": "meca500_programming_manual_4117", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4117, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4118", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4118, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4119", "text": "This command enables or disables the user-defined limits set by the SetJointLimits (page 203)\nIf the user-defined limits are disabled, the default joint limits become active.\ncommand.\nHowever, user-defined limits remain in memory, and can be re-enabled, even after a power\ndown.", "source": "meca500_programming_manual", "chunk_index": 4119, "length": 278, "hash": "9bde21f97b9ab529ebefbbe8348a2f04"}
{"id": "meca500_programming_manual_4120", "text": "This command enables or disables the user-defined limits set by the", "source": "meca500_programming_manual", "chunk_index": 4120, "length": 67, "hash": "81f0afdfa0003e5b1fe83777d3da3882"}
{"id": "meca500_programming_manual_4121", "text": "(page 203)\nIf the user-defined limits are disabled, the default joint limits become active.\ncommand.\nHowever, user-defined limits remain in memory, and can be re-enabled, even after a power\ndown.", "source": "meca500_programming_manual", "chunk_index": 4121, "length": 195, "hash": "7431df5449b7e9a4b16a5ef3400eb96a"}
{"id": "meca500_programming_manual_4122", "text": "SetJointLimitsCfg(e)", "source": "meca500_programming_manual", "chunk_index": 4122, "length": 20, "hash": "b8ff855b6fc3df8cd3da1386e4400fdd"}
{"id": "meca500_programming_manual_4123", "text": "SetJointLimitsCfg(e)", "source": "meca500_programming_manual", "chunk_index": 4123, "length": 20, "hash": "b8ff855b6fc3df8cd3da1386e4400fdd"}
{"id": "meca500_programming_manual_4124", "text": "\u2022 e: enable (1) or disable (0) the user-defined joint limits.", "source": "meca500_programming_manual", "chunk_index": 4124, "length": 61, "hash": "c2de052a8d8c267a8ece9bf79555535f"}
{"id": "meca500_programming_manual_4125", "text": "\u2022 e: enable (1) or disable (0) the user-defined joint limits.", "source": "meca500_programming_manual", "chunk_index": 4125, "length": 61, "hash": "c2de052a8d8c267a8ece9bf79555535f"}
{"id": "meca500_programming_manual_4126", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 0.", "source": "meca500_programming_manual", "chunk_index": 4126, "length": 110, "hash": "1ee63220077374e81a4f2751af500cb2"}
{"id": "meca500_programming_manual_4127", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 4127, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_4128", "text": "The factory\ndefault is 0.", "source": "meca500_programming_manual", "chunk_index": 4128, "length": 25, "hash": "d7059f3c88236de27e8f2e31e187e2da"}
{"id": "meca500_programming_manual_4129", "text": "\u2022 [2093][User-defined joint limits enabled.]", "source": "meca500_programming_manual", "chunk_index": 4129, "length": 44, "hash": "7fa15b6a1c51a87da0c8b767e4932e0b"}
{"id": "meca500_programming_manual_4130", "text": "\u2022 [2093][User-defined joint limits enabled.]", "source": "meca500_programming_manual", "chunk_index": 4130, "length": 44, "hash": "7fa15b6a1c51a87da0c8b767e4932e0b"}
{"id": "meca500_programming_manual_4131", "text": "\u2022 [2093][User-defined joint limits disabled.]", "source": "meca500_programming_manual", "chunk_index": 4131, "length": 45, "hash": "b38f36726da4cad4af7e7546f2c4fd17"}
{"id": "meca500_programming_manual_4132", "text": "\u2022 [2093][User-defined joint limits disabled.]", "source": "meca500_programming_manual", "chunk_index": 4132, "length": 45, "hash": "b38f36726da4cad4af7e7546f2c4fd17"}
{"id": "meca500_programming_manual_4133", "text": "If any robot joints are inadvertently moved outside the defined limits, the robot will not\nactivate. To resolve this, enable recovery mode (see Section 3), which allows movement\nof the joints even when they are outside the configured limits.", "source": "meca500_programming_manual", "chunk_index": 4133, "length": 241, "hash": "91f387dbf64759b0f1332f29055dabe4"}
{"id": "meca500_programming_manual_4134", "text": "If any robot joints are inadvertently moved outside the defined limits, the robot will not\nactivate. To resolve this, enable recovery mode (see Section 3), which allows movement\nof the joints even when they are outside the configured limits.", "source": "meca500_programming_manual", "chunk_index": 4134, "length": 241, "hash": "91f387dbf64759b0f1332f29055dabe4"}
{"id": "meca500_programming_manual_4135", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4135, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4136", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4136, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4137", "text": "In cyclic protocols,\nMotionCommandID 151. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4137, "length": 73, "hash": "b15d7c934cf9952537b47673941ebc89"}
{"id": "meca500_programming_manual_4138", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4138, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4139", "text": "151. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4139, "length": 36, "hash": "fb62b22702f6eaa4f9830d4085697375"}
{"id": "meca500_programming_manual_4140", "text": "the SetJointLimitsCfg (page 204) command is represented by", "source": "meca500_programming_manual", "chunk_index": 4140, "length": 58, "hash": "d16a90e06840bab13e80414efd52bd56"}
{"id": "meca500_programming_manual_4141", "text": "(page 204) command is represented by", "source": "meca500_programming_manual", "chunk_index": 4141, "length": 36, "hash": "3cf9f25ba6efd0b475831a0311461321"}
{"id": "meca500_programming_manual_4142", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4142, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4143", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4143, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4144", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4144, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_4145", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4145, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_4146", "text": "This command is used to set the time interval at which real-time feedback from the robot\nis sent from the robot over TCP port 10001 (see the description for SetRealTimeMonitoring\n(page 209) and Table 3 for more details).", "source": "meca500_programming_manual", "chunk_index": 4146, "length": 220, "hash": "bece11b5383628bed2f26a41cb565daf"}
{"id": "meca500_programming_manual_4147", "text": "This command is used to set the time interval at which real-time feedback from the robot\nis sent from the robot over TCP port 10001 (see the description for", "source": "meca500_programming_manual", "chunk_index": 4147, "length": 156, "hash": "0e3667cab0a31f541972d5466a4207a6"}
{"id": "meca500_programming_manual_4148", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4148, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4149", "text": "(page 209) and Table 3 for more details).", "source": "meca500_programming_manual", "chunk_index": 4149, "length": 41, "hash": "3c6b8c30bcb628cedb72523c7553a4df"}
{"id": "meca500_programming_manual_4150", "text": "SetMonitoringInterval(t)", "source": "meca500_programming_manual", "chunk_index": 4150, "length": 24, "hash": "e55389ed3e6ed0005754a2ae8a7afdae"}
{"id": "meca500_programming_manual_4151", "text": "SetMonitoringInterval(t)", "source": "meca500_programming_manual", "chunk_index": 4151, "length": 24, "hash": "e55389ed3e6ed0005754a2ae8a7afdae"}
{"id": "meca500_programming_manual_4152", "text": "\u2022 t: desired time interval, in seconds, ranging from 0.001 to 1.", "source": "meca500_programming_manual", "chunk_index": 4152, "length": 64, "hash": "f94fb28623c806357bcbd89fce7c5b12"}
{"id": "meca500_programming_manual_4153", "text": "\u2022 t: desired time interval, in seconds, ranging from 0.001 to 1.", "source": "meca500_programming_manual", "chunk_index": 4153, "length": 64, "hash": "f94fb28623c806357bcbd89fce7c5b12"}
{"id": "meca500_programming_manual_4154", "text": "By default, the monitoring time interval is 0.015 s.", "source": "meca500_programming_manual", "chunk_index": 4154, "length": 52, "hash": "b8cf0d6020b244f25d4e478917e2ef22"}
{"id": "meca500_programming_manual_4155", "text": "By default, the monitoring time interval is 0.015 s.", "source": "meca500_programming_manual", "chunk_index": 4155, "length": 52, "hash": "b8cf0d6020b244f25d4e478917e2ef22"}
{"id": "meca500_programming_manual_4156", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4156, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4157", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4157, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4158", "text": "This command is not available in cyclic protocols.\nconfigured on the PLC (i.e., on the master).", "source": "meca500_programming_manual", "chunk_index": 4158, "length": 95, "hash": "6d32626c9938db908a8f73efdf9f4377"}
{"id": "meca500_programming_manual_4159", "text": "This command is not available in cyclic protocols.\nconfigured on the PLC (i.e., on the master).", "source": "meca500_programming_manual", "chunk_index": 4159, "length": 95, "hash": "6d32626c9938db908a8f73efdf9f4377"}
{"id": "meca500_programming_manual_4160", "text": "In cyclic protocols, the cycle time is", "source": "meca500_programming_manual", "chunk_index": 4160, "length": 38, "hash": "83f36ce5abbd7b38658ee8ea0cc8282f"}
{"id": "meca500_programming_manual_4161", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 4161, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_4162", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4162, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_4163", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4163, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_4164", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4164, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4165", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4165, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4166", "text": "This command is used to set persistent parameters affecting the network connection. The\nnew parameter values will take effect only after a robot reboot.", "source": "meca500_programming_manual", "chunk_index": 4166, "length": 152, "hash": "8999c7f04523d5e923714bcdc31bb670"}
{"id": "meca500_programming_manual_4167", "text": "This command is used to set persistent parameters affecting the network connection.", "source": "meca500_programming_manual", "chunk_index": 4167, "length": 83, "hash": "1c17893988e71d4e92a336dda619a7c1"}
{"id": "meca500_programming_manual_4168", "text": "The\nnew parameter values will take effect only after a robot reboot.", "source": "meca500_programming_manual", "chunk_index": 4168, "length": 68, "hash": "0a1654972e3c91fb6ebc0dc5c08ad9bc"}
{"id": "meca500_programming_manual_4169", "text": "SetNetworkOptions(n)", "source": "meca500_programming_manual", "chunk_index": 4169, "length": 20, "hash": "6835e8f3494371aa763a7113e4c41c94"}
{"id": "meca500_programming_manual_4170", "text": "SetNetworkOptions(n)", "source": "meca500_programming_manual", "chunk_index": 4170, "length": 20, "hash": "6835e8f3494371aa763a7113e4c41c94"}
{"id": "meca500_programming_manual_4171", "text": "\u2022 n: number of successive keep-alive TCP packets that can be lost before the TCP", "source": "meca500_programming_manual", "chunk_index": 4171, "length": 80, "hash": "e7fc0c88e346e1f140007407eaa0ffb3"}
{"id": "meca500_programming_manual_4172", "text": "\u2022 n: number of successive keep-alive TCP packets that can be lost before the TCP", "source": "meca500_programming_manual", "chunk_index": 4172, "length": 80, "hash": "e7fc0c88e346e1f140007407eaa0ffb3"}
{"id": "meca500_programming_manual_4173", "text": "connection is closed, where n is an integer number ranging from 0 to 60.", "source": "meca500_programming_manual", "chunk_index": 4173, "length": 72, "hash": "109e73361b5e3f5fa9a93adeb12ecf8e"}
{"id": "meca500_programming_manual_4174", "text": "connection is closed, where n is an integer number ranging from 0 to 60.", "source": "meca500_programming_manual", "chunk_index": 4174, "length": 72, "hash": "109e73361b5e3f5fa9a93adeb12ecf8e"}
{"id": "meca500_programming_manual_4175", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 3.", "source": "meca500_programming_manual", "chunk_index": 4175, "length": 110, "hash": "bee8f2f97c4552fde7f5e719b3095b70"}
{"id": "meca500_programming_manual_4176", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 4176, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_4177", "text": "The factory\ndefault is 3.", "source": "meca500_programming_manual", "chunk_index": 4177, "length": 25, "hash": "1871c3997facbdb44480bb67d5cd6d74"}
{"id": "meca500_programming_manual_4178", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4178, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4179", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4179, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4180", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4180, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4181", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4181, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4182", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4182, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4183", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4183, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4184", "text": "SetOfflineProgramLoop", "source": "meca500_programming_manual", "chunk_index": 4184, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "meca500_programming_manual_4185", "text": "SetOfflineProgramLoop", "source": "meca500_programming_manual", "chunk_index": 4185, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "meca500_programming_manual_4186", "text": "This command is used immediately after the StartSaving(1) (page 217) command to specify\nwhether the saved program should execute once or run indefinitely when the Start/Stop\nbutton on the robot\u2019s base is pressed. It applies only to program number 1 and only when\nstarting a program using the Start/Stop button, not when using the StartProgram (page 216)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 4186, "length": 362, "hash": "94fe060e5a27acc38269c70b0d5c02d9"}
{"id": "meca500_programming_manual_4187", "text": "This command is used immediately after the", "source": "meca500_programming_manual", "chunk_index": 4187, "length": 42, "hash": "cd07bd2d393183344db20f8a18d09dba"}
{"id": "meca500_programming_manual_4188", "text": "(page 217) command to specify\nwhether the saved program should execute once or run indefinitely when the Start/Stop\nbutton on the robot\u2019s base is pressed. It applies only to program number 1 and only when\nstarting a program using the Start/Stop button, not when using the", "source": "meca500_programming_manual", "chunk_index": 4188, "length": 271, "hash": "900f47171cacb575c99a0a68b48f4668"}
{"id": "meca500_programming_manual_4189", "text": "SetOfflineProgramLoop(e)", "source": "meca500_programming_manual", "chunk_index": 4189, "length": 24, "hash": "85ae34a6cb01311ad97164f5404f19f1"}
{"id": "meca500_programming_manual_4190", "text": "SetOfflineProgramLoop(e)", "source": "meca500_programming_manual", "chunk_index": 4190, "length": 24, "hash": "85ae34a6cb01311ad97164f5404f19f1"}
{"id": "meca500_programming_manual_4191", "text": "\u2022 e: enable (1) or disable (0) the loop execution.", "source": "meca500_programming_manual", "chunk_index": 4191, "length": 50, "hash": "0c3e6f8d84ae5685e6481b7c10b56694"}
{"id": "meca500_programming_manual_4192", "text": "\u2022 e: enable (1) or disable (0) the loop execution.", "source": "meca500_programming_manual", "chunk_index": 4192, "length": 50, "hash": "0c3e6f8d84ae5685e6481b7c10b56694"}
{"id": "meca500_programming_manual_4193", "text": "By default, looping is disabled.", "source": "meca500_programming_manual", "chunk_index": 4193, "length": 32, "hash": "f621bd2bb56c82f3b07a3fb1f3fd0440"}
{"id": "meca500_programming_manual_4194", "text": "By default, looping is disabled.", "source": "meca500_programming_manual", "chunk_index": 4194, "length": 32, "hash": "f621bd2bb56c82f3b07a3fb1f3fd0440"}
{"id": "meca500_programming_manual_4195", "text": "\u2022 [1022][Robot was not saving the program.]", "source": "meca500_programming_manual", "chunk_index": 4195, "length": 43, "hash": "e5fb5ec54ce1eb7996762e4290dac688"}
{"id": "meca500_programming_manual_4196", "text": "\u2022 [1022][Robot was not saving the program.]", "source": "meca500_programming_manual", "chunk_index": 4196, "length": 43, "hash": "e5fb5ec54ce1eb7996762e4290dac688"}
{"id": "meca500_programming_manual_4197", "text": "This command does not generate an immediate response. A message indicating whether loop\nexecution was enabled or disabled is shown only when a program is being saved. However,\nif the command is sent while no program is being saved, the above message is returned.", "source": "meca500_programming_manual", "chunk_index": 4197, "length": 262, "hash": "5f3fc38c85b7a40f2f7c5e6894e4fcbc"}
{"id": "meca500_programming_manual_4198", "text": "This command does not generate an immediate response. A message indicating whether loop\nexecution was enabled or disabled is shown only when a program is being saved. However,\nif the command is sent while no program is being saved, the above message is returned.", "source": "meca500_programming_manual", "chunk_index": 4198, "length": 262, "hash": "5f3fc38c85b7a40f2f7c5e6894e4fcbc"}
{"id": "meca500_programming_manual_4199", "text": "This command can only be executed when a program is being saved using StartSaving\n(page 217).", "source": "meca500_programming_manual", "chunk_index": 4199, "length": 93, "hash": "06cf779c11a36119d2174a6054ea0777"}
{"id": "meca500_programming_manual_4200", "text": "This command can only be executed when a program is being saved using", "source": "meca500_programming_manual", "chunk_index": 4200, "length": 69, "hash": "089368ec7c4e348a4b738d4ecd1e9f2b"}
{"id": "meca500_programming_manual_4201", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4201, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4202", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4202, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4203", "text": "SetOfflineProgramLoop", "source": "meca500_programming_manual", "chunk_index": 4203, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "meca500_programming_manual_4204", "text": "SetOfflineProgramLoop", "source": "meca500_programming_manual", "chunk_index": 4204, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "meca500_programming_manual_4205", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4205, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4206", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4206, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4207", "text": "This command is used to set the behavior of the robot when the SWStop signal in the Meca500\nR4 is activated.", "source": "meca500_programming_manual", "chunk_index": 4207, "length": 108, "hash": "bc39a14ff7075892fbd952b348d85ce5"}
{"id": "meca500_programming_manual_4208", "text": "This command is used to set the behavior of the robot when the SWStop signal in the Meca500\nR4 is activated.", "source": "meca500_programming_manual", "chunk_index": 4208, "length": 108, "hash": "bc39a14ff7075892fbd952b348d85ce5"}
{"id": "meca500_programming_manual_4209", "text": "\u2013 2, for PauseMotion. Robot motion is paused but commands in the motion queue", "source": "meca500_programming_manual", "chunk_index": 4209, "length": 77, "hash": "63e884de0c192842fad056a5c1146bd7"}
{"id": "meca500_programming_manual_4210", "text": "2, for PauseMotion. Robot motion is paused but commands in the motion queue", "source": "meca500_programming_manual", "chunk_index": 4210, "length": 75, "hash": "0bc2a73ab027bf1945d3524c4df8194a"}
{"id": "meca500_programming_manual_4211", "text": "remain queued. New commands can be queued.", "source": "meca500_programming_manual", "chunk_index": 4211, "length": 42, "hash": "cfa31b25fb02c53c483cb8ac97e7c413"}
{"id": "meca500_programming_manual_4212", "text": "remain queued. New commands can be queued.", "source": "meca500_programming_manual", "chunk_index": 4212, "length": 42, "hash": "cfa31b25fb02c53c483cb8ac97e7c413"}
{"id": "meca500_programming_manual_4213", "text": "\u2013 3, for ClearMotion. Robot motion is paused and all commands in the motion queue\nare cleared. The robot will refuse to add any new commands in the motion queue\nuntil the P-Stop 2 condition is reset using ResumeMotion (page 198).", "source": "meca500_programming_manual", "chunk_index": 4213, "length": 229, "hash": "cf4c15641be2f3c04ef02051f538efd2"}
{"id": "meca500_programming_manual_4214", "text": "3, for ClearMotion. Robot motion is paused and all commands in the motion queue\nare cleared. The robot will refuse to add any new commands in the motion queue\nuntil the P-Stop 2 condition is reset using", "source": "meca500_programming_manual", "chunk_index": 4214, "length": 202, "hash": "f553a51a75875aa9981ea7087f1bcaa8"}
{"id": "meca500_programming_manual_4215", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 3.", "source": "meca500_programming_manual", "chunk_index": 4215, "length": 110, "hash": "bee8f2f97c4552fde7f5e719b3095b70"}
{"id": "meca500_programming_manual_4216", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 4216, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_4217", "text": "The factory\ndefault is 3.", "source": "meca500_programming_manual", "chunk_index": 4217, "length": 25, "hash": "1871c3997facbdb44480bb67d5cd6d74"}
{"id": "meca500_programming_manual_4218", "text": "\u2022 [2178][PStop2 configuration set successfully]", "source": "meca500_programming_manual", "chunk_index": 4218, "length": 47, "hash": "c85b660fd6274248b30ca61e06d463db"}
{"id": "meca500_programming_manual_4219", "text": "\u2022 [2178][PStop2 configuration set successfully]", "source": "meca500_programming_manual", "chunk_index": 4219, "length": 47, "hash": "c85b660fd6274248b30ca61e06d463db"}
{"id": "meca500_programming_manual_4220", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4220, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4221", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4221, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4222", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4222, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4223", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4223, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4224", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4224, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4225", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4225, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4226", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4226, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4227", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4227, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4228", "text": "TCP port 10001 (i.e., the monitoring port) transmits the robot\u2019s joint set and TRF pose, as\nwell as some other data (see Section 4), at the rate specified by the SetMonitoringInterval\n(page 205) command.\nThe SetRealTimeMonitoring (page 209) command enables the\ntransmission of various additional real-time data over the monitoring port. Each set of data\nis preceded by a monotonic timestamp in microseconds, with respect to an internal clock.\nEssentially, you get the same responses as with the GetRt* and GetRtTarget* commands, but\non the monitoring port, instead of on the control port, and at every monitoring interval, rather\nthan only when requested.", "source": "meca500_programming_manual", "chunk_index": 4228, "length": 655, "hash": "8da9fa1d2a164af3af1bb6dc41501003"}
{"id": "meca500_programming_manual_4229", "text": "TCP port 10001 (i.e., the monitoring port) transmits the robot\u2019s joint set and TRF pose, as\nwell as some other data (see Section 4), at the rate specified by the", "source": "meca500_programming_manual", "chunk_index": 4229, "length": 161, "hash": "02a536c493f4b30aab98de60dc49e0a3"}
{"id": "meca500_programming_manual_4230", "text": "SetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4230, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "meca500_programming_manual_4231", "text": "(page 205) command.\nThe", "source": "meca500_programming_manual", "chunk_index": 4231, "length": 23, "hash": "3df68150a537563dd966f614e921bcf5"}
{"id": "meca500_programming_manual_4232", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4232, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4233", "text": "(page 209) command enables the\ntransmission of various additional real-time data over the monitoring port. Each set of data\nis preceded by a monotonic timestamp in microseconds, with respect to an internal clock.\nEssentially, you get the same responses as with the GetRt* and GetRtTarget* commands, but\non the monitoring port, instead of on the control port, and at every monitoring interval, rather\nthan only when requested.", "source": "meca500_programming_manual", "chunk_index": 4233, "length": 425, "hash": "30136c95c39a3343fec2a51040178160"}
{"id": "meca500_programming_manual_4234", "text": "You can send the SetRealTimeMonitoring (page 209) command even if the robot is not\nactivated.", "source": "meca500_programming_manual", "chunk_index": 4234, "length": 93, "hash": "f4a5e049df8b56055206206d3791b5fa"}
{"id": "meca500_programming_manual_4235", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4235, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4236", "text": "(page 209) command even if the robot is not\nactivated.", "source": "meca500_programming_manual", "chunk_index": 4236, "length": 54, "hash": "60cdd27e0c7bde1afb30de40de4baf58"}
{"id": "meca500_programming_manual_4237", "text": "SetRealTimeMonitoring(n1,n2,...)", "source": "meca500_programming_manual", "chunk_index": 4237, "length": 32, "hash": "778bbe540291f89a940faf6c0f17f5da"}
{"id": "meca500_programming_manual_4238", "text": "SetRealTimeMonitoring(n", "source": "meca500_programming_manual", "chunk_index": 4238, "length": 23, "hash": "67da15f7d558bee9545640684fcd6d83"}
{"id": "meca500_programming_manual_4239", "text": "\u2022 n1,n2: a list of number codes or names, as follows", "source": "meca500_programming_manual", "chunk_index": 4239, "length": 52, "hash": "f3b00481934ec86fb0d247937c993491"}
{"id": "meca500_programming_manual_4240", "text": ": a list of number codes or names, as follows", "source": "meca500_programming_manual", "chunk_index": 4240, "length": 45, "hash": "3090058025f0ba31003d026068c09571"}
{"id": "meca500_programming_manual_4241", "text": "\u2013 2200 or TargetJointPos, for the response of the GetRtTargetJointPos (page 283)", "source": "meca500_programming_manual", "chunk_index": 4241, "length": 80, "hash": "77908dc03a5fff8653b0a931ed2b0632"}
{"id": "meca500_programming_manual_4242", "text": "2200 or TargetJointPos, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4242, "length": 47, "hash": "5f74a52f65220323f1855af6a4d4d360"}
{"id": "meca500_programming_manual_4243", "text": "\u2013 2201 or TargetCartPos, for the response of the GetRtTargetCartPos (page 279)", "source": "meca500_programming_manual", "chunk_index": 4243, "length": 78, "hash": "0fb97db33f7fcd06257d6d8fb484a15c"}
{"id": "meca500_programming_manual_4244", "text": "2201 or TargetCartPos, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4244, "length": 46, "hash": "71a219a7048c407e7138ff21f987b9d7"}
{"id": "meca500_programming_manual_4245", "text": "\u2013 2202 or TargetJointVel, for the response of the GetRtTargetJointVel (page 285)", "source": "meca500_programming_manual", "chunk_index": 4245, "length": 80, "hash": "41da48e80003306aadac64ac935f33fc"}
{"id": "meca500_programming_manual_4246", "text": "2202 or TargetJointVel, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4246, "length": 47, "hash": "3d6f1c1696e77dd0c9731cfdb7102418"}
{"id": "meca500_programming_manual_4247", "text": "\u2013 2203 or TargetJointTorq, for the response of the GetRtTargetJointTorq (page 284)", "source": "meca500_programming_manual", "chunk_index": 4247, "length": 82, "hash": "1005837fa9bfdb905eb2d243a1433704"}
{"id": "meca500_programming_manual_4248", "text": "2203 or TargetJointTorq, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4248, "length": 48, "hash": "f119a07ded639f558b13365b1a34b878"}
{"id": "meca500_programming_manual_4249", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 4249, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_4250", "text": "\u2013 2204 or TargetCartVel, for the response of the GetRtTargetCartVel (page 280)", "source": "meca500_programming_manual", "chunk_index": 4250, "length": 78, "hash": "4fa6f676bc5c76b69855ffff649e7f7f"}
{"id": "meca500_programming_manual_4251", "text": "2204 or TargetCartVel, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4251, "length": 46, "hash": "370bbeb92d631342334d1746465f8d90"}
{"id": "meca500_programming_manual_4252", "text": "\u2013 2210 or JointPos, for the response of the GetRtJointPos (page 276) command;", "source": "meca500_programming_manual", "chunk_index": 4252, "length": 77, "hash": "b67cef8045a3ff6044132ce4059acbf0"}
{"id": "meca500_programming_manual_4253", "text": "2210 or JointPos, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4253, "length": 41, "hash": "d417b2c66afbabb69e139f0e34befad5"}
{"id": "meca500_programming_manual_4254", "text": "\u2013 2211 or CartPos, for the response of the GetRtCartPos (page 272) command;", "source": "meca500_programming_manual", "chunk_index": 4254, "length": 75, "hash": "b7efc146f71e95025c7d1c70c18395ce"}
{"id": "meca500_programming_manual_4255", "text": "2211 or CartPos, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4255, "length": 40, "hash": "9ab64cadfb4fef4c4184e4754ff98794"}
{"id": "meca500_programming_manual_4256", "text": "\u2013 2212 or JointVel, for the response of the GetRtJointVel (page 278) command;", "source": "meca500_programming_manual", "chunk_index": 4256, "length": 77, "hash": "2ea6061a0a5af3a52f2948d6921f7859"}
{"id": "meca500_programming_manual_4257", "text": "2212 or JointVel, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4257, "length": 41, "hash": "c4eafac41e8435db79ae0b1db96ed090"}
{"id": "meca500_programming_manual_4258", "text": "\u2013 2213 or JointTorq, for the response of the GetRtJointTorq (page 277) command;", "source": "meca500_programming_manual", "chunk_index": 4258, "length": 79, "hash": "d395869da7a06efd654f0f72ec6c90ff"}
{"id": "meca500_programming_manual_4259", "text": "2213 or JointTorq, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4259, "length": 42, "hash": "4433d1a728c5f2cce0e494a240d103bb"}
{"id": "meca500_programming_manual_4260", "text": "\u2013 2214 or CartVel, for the response of the GetRtCartVel (page 273) command;", "source": "meca500_programming_manual", "chunk_index": 4260, "length": 75, "hash": "55ac115c0cd65c091ccdba505e3f4533"}
{"id": "meca500_programming_manual_4261", "text": "2214 or CartVel, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4261, "length": 40, "hash": "b5332848d4ddb04ba74cf721781bbbd3"}
{"id": "meca500_programming_manual_4262", "text": "\u2013 2218 or Conf, for the response of the GetRtConf (page 274) command (sent only", "source": "meca500_programming_manual", "chunk_index": 4262, "length": 79, "hash": "e1b919f783add2cc2cc56b0fc9c2981b"}
{"id": "meca500_programming_manual_4263", "text": "2218 or Conf, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4263, "length": 37, "hash": "c6afd00913f3c0c57e254fd31a41b4fd"}
{"id": "meca500_programming_manual_4264", "text": "(page 274) command (sent only", "source": "meca500_programming_manual", "chunk_index": 4264, "length": 29, "hash": "8570968f98439366404f8f7782150470"}
{"id": "meca500_programming_manual_4265", "text": "\u2013 2219 or ConfTurn, for the response of the GetRtConfTurn (page 275) command (sent", "source": "meca500_programming_manual", "chunk_index": 4265, "length": 82, "hash": "09c0c238cffd2750243659a5a0ab63ec"}
{"id": "meca500_programming_manual_4266", "text": "2219 or ConfTurn, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4266, "length": 41, "hash": "d965ac5a6d445485bcbf5500dd528139"}
{"id": "meca500_programming_manual_4267", "text": "(page 275) command (sent", "source": "meca500_programming_manual", "chunk_index": 4267, "length": 24, "hash": "d25b8a1879b7a4d3d77badd51a37c6a5"}
{"id": "meca500_programming_manual_4268", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4268, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4269", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4269, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4270", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4270, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4271", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4271, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4272", "text": "\u2013 2220 or Accel, for the response of the GetRtAccelerometer (page 271) command;", "source": "meca500_programming_manual", "chunk_index": 4272, "length": 79, "hash": "cbaacf5cbd66eb06c26cac58c081baa1"}
{"id": "meca500_programming_manual_4273", "text": "2220 or Accel, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4273, "length": 38, "hash": "0252586fbfc9893138760a4e959de431"}
{"id": "meca500_programming_manual_4274", "text": "\u2013 2321 or GripperForce, for the response of the GetRtGripperForce (page 313)", "source": "meca500_programming_manual", "chunk_index": 4274, "length": 76, "hash": "b5adab45578652d61c0a2b3637e97b3b"}
{"id": "meca500_programming_manual_4275", "text": "2321 or GripperForce, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4275, "length": 45, "hash": "054a8a766a227b01ad1673524c7580c6"}
{"id": "meca500_programming_manual_4276", "text": "\u2013 2322 or GripperPos, for the response of the GetRtGripperPos (page 314) command;", "source": "meca500_programming_manual", "chunk_index": 4276, "length": 81, "hash": "bf178cc5fddfc9d8c43d912fa99523e0"}
{"id": "meca500_programming_manual_4277", "text": "2322 or GripperPos, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4277, "length": 43, "hash": "a40d0ab4e788c7f924c9f24b2e8b83a5"}
{"id": "meca500_programming_manual_4278", "text": "\u2013 2343 or VacuumPressure, for the response of the GetRtVacuumPressure (page 319)", "source": "meca500_programming_manual", "chunk_index": 4278, "length": 80, "hash": "cde5aac4d8751b432c561e2ebd0dcc5e"}
{"id": "meca500_programming_manual_4279", "text": "2343 or VacuumPressure, for the response of the", "source": "meca500_programming_manual", "chunk_index": 4279, "length": 47, "hash": "9da6d620ed2e8437264bf69de022be2f"}
{"id": "meca500_programming_manual_4280", "text": "\u2013 All, to enable all of the above responses.", "source": "meca500_programming_manual", "chunk_index": 4280, "length": 44, "hash": "d2087919b5ecdc31816f9473b9d86cc4"}
{"id": "meca500_programming_manual_4281", "text": "All, to enable all of the above responses.", "source": "meca500_programming_manual", "chunk_index": 4281, "length": 42, "hash": "34fe1d604ce34cdaffc5190355ecfb9b"}
{"id": "meca500_programming_manual_4282", "text": "After a power up, none of the above messages are enabled.", "source": "meca500_programming_manual", "chunk_index": 4282, "length": 57, "hash": "78ed80b1adb1b00f692c87e09fa48f11"}
{"id": "meca500_programming_manual_4283", "text": "After a power up, none of the above messages are enabled.", "source": "meca500_programming_manual", "chunk_index": 4283, "length": 57, "hash": "78ed80b1adb1b00f692c87e09fa48f11"}
{"id": "meca500_programming_manual_4284", "text": "\u2013 n1, n2 \u2026: a list of response codes.", "source": "meca500_programming_manual", "chunk_index": 4284, "length": 37, "hash": "f712782328d32572f4161dd1a553a9ef"}
{"id": "meca500_programming_manual_4285", "text": "\u2026: a list of response codes.", "source": "meca500_programming_manual", "chunk_index": 4285, "length": 28, "hash": "ccfb7bcee1cc6a24e5746816b15e83f5"}
{"id": "meca500_programming_manual_4286", "text": "command does not have a cumulative\nThe SetRealTimeMonitoring (page 209)\nif you execute the command SetRealTimeMonitoring(All) (page 209) and then\neffect;\nthe command SetRealTimeMonitoring(TargetCartPos)\nthe command\nSetRealTimeMonitoring(2201) (page 209), you will only enable message 2201. Further\ndetails about the monitoring port are presented in Section 4.", "source": "meca500_programming_manual", "chunk_index": 4286, "length": 359, "hash": "8ad55da7d6a36137cde7f09301353c22"}
{"id": "meca500_programming_manual_4287", "text": "command does not have a cumulative\nThe", "source": "meca500_programming_manual", "chunk_index": 4287, "length": 38, "hash": "e7a42dfe61046a16f845474f532a3cd7"}
{"id": "meca500_programming_manual_4288", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4288, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4289", "text": "(page 209)\nif you execute the command", "source": "meca500_programming_manual", "chunk_index": 4289, "length": 37, "hash": "d14466f1f22f9b191e2a928ac9874ac5"}
{"id": "meca500_programming_manual_4290", "text": "SetRealTimeMonitoring(All)", "source": "meca500_programming_manual", "chunk_index": 4290, "length": 26, "hash": "111a4aa81aa8233045ad666002665a2b"}
{"id": "meca500_programming_manual_4291", "text": "(page 209) and then\neffect;\nthe command", "source": "meca500_programming_manual", "chunk_index": 4291, "length": 39, "hash": "f797effd5904c441bc3b0c4c72b56666"}
{"id": "meca500_programming_manual_4292", "text": "SetRealTimeMonitoring(TargetCartPos)", "source": "meca500_programming_manual", "chunk_index": 4292, "length": 36, "hash": "b7486132b2ba6ffeb2d483b6c9b17e20"}
{"id": "meca500_programming_manual_4293", "text": "SetRealTimeMonitoring(2201)", "source": "meca500_programming_manual", "chunk_index": 4293, "length": 27, "hash": "f9b0800e18551dd785a41002e448b4d1"}
{"id": "meca500_programming_manual_4294", "text": "(page 209), you will only enable message 2201. Further\ndetails about the monitoring port are presented in Section 4.", "source": "meca500_programming_manual", "chunk_index": 4294, "length": 116, "hash": "22550ebf26edf08e61fa94dd23446ce2"}
{"id": "meca500_programming_manual_4295", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4295, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4296", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4296, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4297", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4297, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4298", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4298, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4299", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4299, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4300", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4300, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_4301", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4301, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4302", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4302, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4303", "text": "Moving the robot when its joints are outside the user-defined limits, or when there is a torque\noverload, a self-collision, or a work-zone limit, is impossible. For these situations, it is useful\nto enable the recovery mode (Section 3) with the SetRecoveryMode (page 211) command.", "source": "meca500_programming_manual", "chunk_index": 4303, "length": 280, "hash": "8aeb6d63ebe6b620d4ed35c8f48ddfcf"}
{"id": "meca500_programming_manual_4304", "text": "Moving the robot when its joints are outside the user-defined limits, or when there is a torque\noverload, a self-collision, or a work-zone limit, is impossible. For these situations, it is useful\nto enable the recovery mode (Section 3) with the", "source": "meca500_programming_manual", "chunk_index": 4304, "length": 244, "hash": "59e259c8a73b798de78e5dd13c2f2d36"}
{"id": "meca500_programming_manual_4305", "text": "When the recovery mode is enabled, and the robot is activated, virtually all motion commands\nare accepted, but joint and Cartesian velocities and accelerations are significantly limited, for\nsafety reasons.", "source": "meca500_programming_manual", "chunk_index": 4305, "length": 206, "hash": "4d54c51c0e1b5176912dddb2965c7209"}
{"id": "meca500_programming_manual_4306", "text": "When the recovery mode is enabled, and the robot is activated, virtually all motion commands\nare accepted, but joint and Cartesian velocities and accelerations are significantly limited, for\nsafety reasons.", "source": "meca500_programming_manual", "chunk_index": 4306, "length": 206, "hash": "4d54c51c0e1b5176912dddb2965c7209"}
{"id": "meca500_programming_manual_4307", "text": "Similarly, you can still control the MEGP 25* grippers or the MPM500 pneumatic module\nconnected to the robot, but the gripping force and velocity of the grippers are limited. If\nthe robot was not homed before enabling the recovery mode, the robot movements will be\nless accurate. The same applies for the movements of the MEGP 25* grippers, if such a\ngripper was installed on the robot. In addition, you would not be able to use the MoveGripper\n(page 326) command, but can still use the GripperOpen (page 325) and GripperClose\n(page 324) commands. If the robot was already homed when the recovery mode was enabled,\nthe robot and the grippers will be as accurate as before and you can still use the MoveGripper\n(page 326) command.", "source": "meca500_programming_manual", "chunk_index": 4307, "length": 729, "hash": "615f11159be1535ba50ab7781ee9c9e1"}
{"id": "meca500_programming_manual_4308", "text": "Similarly, you can still control the MEGP 25* grippers or the MPM500 pneumatic module\nconnected to the robot, but the gripping force and velocity of the grippers are limited. If\nthe robot was not homed before enabling the recovery mode, the robot movements will be\nless accurate. The same applies for the movements of the MEGP 25* grippers, if such a\ngripper was installed on the robot. In addition, you would not be able to use the", "source": "meca500_programming_manual", "chunk_index": 4308, "length": 432, "hash": "3178501819f04cc019a2930343de497a"}
{"id": "meca500_programming_manual_4309", "text": "(page 326) command, but can still use the", "source": "meca500_programming_manual", "chunk_index": 4309, "length": 41, "hash": "c26b1993161a44672f01f13772e423ac"}
{"id": "meca500_programming_manual_4310", "text": "(page 324) commands. If the robot was already homed when the recovery mode was enabled,\nthe robot and the grippers will be as accurate as before and you can still use the", "source": "meca500_programming_manual", "chunk_index": 4310, "length": 170, "hash": "1b0fc4899c4e0408149bd596728cf04d"}
{"id": "meca500_programming_manual_4311", "text": "\u2022 e: enable (1) or disable (0) the recovery mode.", "source": "meca500_programming_manual", "chunk_index": 4311, "length": 49, "hash": "c40d279ac9ba3c4e3e55deba6db07f3a"}
{"id": "meca500_programming_manual_4312", "text": "\u2022 e: enable (1) or disable (0) the recovery mode.", "source": "meca500_programming_manual", "chunk_index": 4312, "length": 49, "hash": "c40d279ac9ba3c4e3e55deba6db07f3a"}
{"id": "meca500_programming_manual_4313", "text": "By default the recovery mode is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4313, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "meca500_programming_manual_4314", "text": "By default the recovery mode is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4314, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "meca500_programming_manual_4315", "text": "\u2022 [2049][Recovery mode enabled]", "source": "meca500_programming_manual", "chunk_index": 4315, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "meca500_programming_manual_4316", "text": "\u2022 [2049][Recovery mode enabled]", "source": "meca500_programming_manual", "chunk_index": 4316, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "meca500_programming_manual_4317", "text": "\u2022 [2050][Recovery mode disabled]", "source": "meca500_programming_manual", "chunk_index": 4317, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "meca500_programming_manual_4318", "text": "\u2022 [2050][Recovery mode disabled]", "source": "meca500_programming_manual", "chunk_index": 4318, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "meca500_programming_manual_4319", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4319, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4320", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4320, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4321", "text": "In cyclic protocols,\nEnableRecoveryMode bit in the RobotControl data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 4321, "length": 99, "hash": "a65e6e9bbd8e3cf305fe5fdc508a3ec8"}
{"id": "meca500_programming_manual_4322", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4322, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4323", "text": "data. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 4323, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "meca500_programming_manual_4324", "text": "the SetRecoveryMode (page 211) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 4324, "length": 55, "hash": "6e80f56a54d6fb1d5059fb0d3aad64fc"}
{"id": "meca500_programming_manual_4325", "text": "(page 211) command is mapped to the", "source": "meca500_programming_manual", "chunk_index": 4325, "length": 35, "hash": "8fd4406d6fcd45424d723fc4fe75cc2d"}
{"id": "meca500_programming_manual_4326", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4326, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4327", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4327, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4328", "text": "This command allows you to change the robot\u2019s name. The command is useful when multiple\nrobots are connected on the same network. The SetRobotName (page 212) command also\nchanges the hostname of the robot in the case of a DHCP connection. The robot\u2019s name is\ndisplayed in the upper right corner of the MecaPortal, as well as in the browser tab hosting\nthe web interface. You can also retrieve the robot\u2019s name with the command GetRobotName\n(page 258).", "source": "meca500_programming_manual", "chunk_index": 4328, "length": 451, "hash": "194a0a875a7cd26bc0ef11788eb0e048"}
{"id": "meca500_programming_manual_4329", "text": "This command allows you to change the robot\u2019s name. The command is useful when multiple\nrobots are connected on the same network. The", "source": "meca500_programming_manual", "chunk_index": 4329, "length": 133, "hash": "864a150e3002d0e2b40cbb4c72250acc"}
{"id": "meca500_programming_manual_4330", "text": "(page 212) command also\nchanges the hostname of the robot in the case of a DHCP connection. The robot\u2019s name is\ndisplayed in the upper right corner of the MecaPortal, as well as in the browser tab hosting\nthe web interface. You can also retrieve the robot\u2019s name with the command", "source": "meca500_programming_manual", "chunk_index": 4330, "length": 279, "hash": "641b23128d26277f0effd42ccba021b9"}
{"id": "meca500_programming_manual_4331", "text": "\u2022 s: string containing the robot\u2019s name. It should contain a maximum of 63 characters,", "source": "meca500_programming_manual", "chunk_index": 4331, "length": 86, "hash": "32ddd5890c04d0863ed709715df21b8e"}
{"id": "meca500_programming_manual_4332", "text": "\u2022 s: string containing the robot\u2019s name. It should contain a maximum of 63 characters,", "source": "meca500_programming_manual", "chunk_index": 4332, "length": 86, "hash": "32ddd5890c04d0863ed709715df21b8e"}
{"id": "meca500_programming_manual_4333", "text": "alphanumeric or hyphens, but should not start with a hyphen.", "source": "meca500_programming_manual", "chunk_index": 4333, "length": 60, "hash": "dc757c9c2c9a0a1ee93f73912f0ea76f"}
{"id": "meca500_programming_manual_4334", "text": "alphanumeric or hyphens, but should not start with a hyphen.", "source": "meca500_programming_manual", "chunk_index": 4334, "length": 60, "hash": "dc757c9c2c9a0a1ee93f73912f0ea76f"}
{"id": "meca500_programming_manual_4335", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is m500.", "source": "meca500_programming_manual", "chunk_index": 4335, "length": 113, "hash": "d97b72c466e800ee2b6e0dc1f4bb356b"}
{"id": "meca500_programming_manual_4336", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 4336, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_4337", "text": "The factory\ndefault is m500.", "source": "meca500_programming_manual", "chunk_index": 4337, "length": 28, "hash": "9e77d76fcda8a9d1a673c8865bd80e64"}
{"id": "meca500_programming_manual_4338", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4338, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4339", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4339, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4340", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4340, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4341", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4341, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4342", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4342, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4343", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4343, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4344", "text": "When the robot is powered on, its internal clock starts at the date at which the robot image\nwas built. Each time you connect to the robot via the MecaPortal, the internal clock of\nthe robot is automatically adjusted to UTC. Other than connecting to the robot using the\nMecaPortal, another solution is to send the SetRtc (page 213) command to the robot (from\nthe PLC or any application controlling the robot), if you want all timestamps in the robot\u2019s\nlog files to be with respect to UTC. Note, however, that this command does not affect the\ntimestamps of the data sent over the monitoring and control ports, which are with respect to\nan internal monotonic microseconds timer that cannot be reset.", "source": "meca500_programming_manual", "chunk_index": 4344, "length": 697, "hash": "6dd92e41fbc1fdfd65686f490f971718"}
{"id": "meca500_programming_manual_4345", "text": "When the robot is powered on, its internal clock starts at the date at which the robot image\nwas built. Each time you connect to the robot via the MecaPortal, the internal clock of\nthe robot is automatically adjusted to UTC. Other than connecting to the robot using the\nMecaPortal, another solution is to send the", "source": "meca500_programming_manual", "chunk_index": 4345, "length": 313, "hash": "b5a8f81400bb623214786e78a8b8dbc9"}
{"id": "meca500_programming_manual_4346", "text": "(page 213) command to the robot (from\nthe PLC or any application controlling the robot), if you want all timestamps in the robot\u2019s\nlog files to be with respect to UTC. Note, however, that this command does not affect the\ntimestamps of the data sent over the monitoring and control ports, which are with respect to\nan internal monotonic microseconds timer that cannot be reset.", "source": "meca500_programming_manual", "chunk_index": 4346, "length": 376, "hash": "51a18aebb712f4572507f1635c727d3d"}
{"id": "meca500_programming_manual_4347", "text": "\u2022 t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00 UTC January 1,", "source": "meca500_programming_manual", "chunk_index": 4347, "length": 89, "hash": "a04e924335cc7e55e589976f49e60419"}
{"id": "meca500_programming_manual_4348", "text": "\u2022 t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00 UTC January 1,", "source": "meca500_programming_manual", "chunk_index": 4348, "length": 89, "hash": "a04e924335cc7e55e589976f49e60419"}
{"id": "meca500_programming_manual_4349", "text": "By default the recovery mode is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4349, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "meca500_programming_manual_4350", "text": "By default the recovery mode is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4350, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "meca500_programming_manual_4351", "text": "\u2022 [2049][Recovery mode enabled]", "source": "meca500_programming_manual", "chunk_index": 4351, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "meca500_programming_manual_4352", "text": "\u2022 [2049][Recovery mode enabled]", "source": "meca500_programming_manual", "chunk_index": 4352, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "meca500_programming_manual_4353", "text": "\u2022 [2050][Recovery mode disabled]", "source": "meca500_programming_manual", "chunk_index": 4353, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "meca500_programming_manual_4354", "text": "\u2022 [2050][Recovery mode disabled]", "source": "meca500_programming_manual", "chunk_index": 4354, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "meca500_programming_manual_4355", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4355, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4356", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4356, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4357", "text": "In cyclic protocols, the SetRtc (page 213) command is represented by the HostTime data. See\nSection 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4357, "length": 119, "hash": "1c6f5244c8b03d0d0aa770f89d31fde3"}
{"id": "meca500_programming_manual_4358", "text": "In cyclic protocols, the", "source": "meca500_programming_manual", "chunk_index": 4358, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "meca500_programming_manual_4359", "text": "(page 213) command is represented by the", "source": "meca500_programming_manual", "chunk_index": 4359, "length": 40, "hash": "d235506128e3737dc93568c74574166f"}
{"id": "meca500_programming_manual_4360", "text": "data. See\nSection 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4360, "length": 37, "hash": "956c44402429e4faba6dd120f5e906c6"}
{"id": "meca500_programming_manual_4361", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4361, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4362", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4362, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4363", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. Simulation mode can be activated and deactivated with the\nActivateSim (page 185) and DeactivateSim (page 189) commands (these commands can only\nbe executed when the robot is deactivated).", "source": "meca500_programming_manual", "chunk_index": 4363, "length": 313, "hash": "05643b532f50bccea3fb8b43c4edc30b"}
{"id": "meca500_programming_manual_4364", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. Simulation mode can be activated and deactivated with the", "source": "meca500_programming_manual", "chunk_index": 4364, "length": 183, "hash": "3253826a7dea60f8f09e2546c67990a3"}
{"id": "meca500_programming_manual_4365", "text": "(page 189) commands (these commands can only\nbe executed when the robot is deactivated).", "source": "meca500_programming_manual", "chunk_index": 4365, "length": 88, "hash": "7b90c1f6787a3daf399a779798170955"}
{"id": "meca500_programming_manual_4366", "text": "The SetSimModeCfg (page 214) command configures the default simulation mode type (fast\nor normal) enabled when ActivateSim (page 185) is executed without an argument, when the\nActivate Sim button in the MecaPortal is pressed, or when simulation mode is enabled using\na cyclic protocol.", "source": "meca500_programming_manual", "chunk_index": 4366, "length": 285, "hash": "f1226e8872352d5cfbd6ec91741f84f4"}
{"id": "meca500_programming_manual_4367", "text": "(page 214) command configures the default simulation mode type (fast\nor normal) enabled when", "source": "meca500_programming_manual", "chunk_index": 4367, "length": 92, "hash": "ffa8e58ec5c5fd9b5f23613fd9137962"}
{"id": "meca500_programming_manual_4368", "text": "(page 185) is executed without an argument, when the\nActivate Sim button in the MecaPortal is pressed, or when simulation mode is enabled using\na cyclic protocol.", "source": "meca500_programming_manual", "chunk_index": 4368, "length": 162, "hash": "649fc878d41da3e93b0cc5a810dc97fa"}
{"id": "meca500_programming_manual_4369", "text": "\u2022 m: integer specifying the default simulation mode type", "source": "meca500_programming_manual", "chunk_index": 4369, "length": 56, "hash": "e25873ee9c845e0d3c552124c68b384b"}
{"id": "meca500_programming_manual_4370", "text": "\u2022 m: integer specifying the default simulation mode type", "source": "meca500_programming_manual", "chunk_index": 4370, "length": 56, "hash": "e25873ee9c845e0d3c552124c68b384b"}
{"id": "meca500_programming_manual_4371", "text": "\u2013 1, normal (real-time) simulation mode,", "source": "meca500_programming_manual", "chunk_index": 4371, "length": 40, "hash": "e1d3a894fc0ba495e31c36b341edad56"}
{"id": "meca500_programming_manual_4372", "text": "1, normal (real-time) simulation mode,", "source": "meca500_programming_manual", "chunk_index": 4372, "length": 38, "hash": "14490b35ce897202e7300d274a426c35"}
{"id": "meca500_programming_manual_4373", "text": "\u2013 2, fast simulation mode.", "source": "meca500_programming_manual", "chunk_index": 4373, "length": 26, "hash": "c2427837f3b62dad74bdca08d61e8bb1"}
{"id": "meca500_programming_manual_4374", "text": "2, fast simulation mode.", "source": "meca500_programming_manual", "chunk_index": 4374, "length": 24, "hash": "fa018b3d200392d59be78cd3a186865a"}
{"id": "meca500_programming_manual_4375", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1.", "source": "meca500_programming_manual", "chunk_index": 4375, "length": 110, "hash": "05ecbdec911974cda6abbafb9663018a"}
{"id": "meca500_programming_manual_4376", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1.", "source": "meca500_programming_manual", "chunk_index": 4376, "length": 110, "hash": "05ecbdec911974cda6abbafb9663018a"}
{"id": "meca500_programming_manual_4377", "text": "\u2022 [2188][Simulation mode configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 4377, "length": 57, "hash": "fe240e8ffb8ca5222e4aeb415b78c47d"}
{"id": "meca500_programming_manual_4378", "text": "\u2022 [2188][Simulation mode configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 4378, "length": 57, "hash": "fe240e8ffb8ca5222e4aeb415b78c47d"}
{"id": "meca500_programming_manual_4379", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4379, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4380", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 4380, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_4381", "text": "While simulation can be activated in cyclic protocols, the default simulation mode type\n(i.e., fast or normal) cannot be selected in cyclic protocols. You must configure the default\nsimulation mode type using the TCP command SetSimModeCfg (page 214).", "source": "meca500_programming_manual", "chunk_index": 4381, "length": 250, "hash": "fc0b9542335d33fd13a9a14dc1820c62"}
{"id": "meca500_programming_manual_4382", "text": "While simulation can be activated in cyclic protocols, the default simulation mode type\n(i.e., fast or normal) cannot be selected in cyclic protocols. You must configure the default\nsimulation mode type using the TCP command", "source": "meca500_programming_manual", "chunk_index": 4382, "length": 224, "hash": "0e54b370d8bfca47ff033991a34cfdf9"}
{"id": "meca500_programming_manual_4383", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4383, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4384", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4384, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4385", "text": "This command sets the time scaling of the trajectory generator. By calling this command\nwith an argument p of less than 100, all robot motions remain exactly the same (i.e., the path\nremains the same), but everything will be (100 \u2212 p) percent slower, including time delays\n(e.g., the pause set by the command Delay (page 134)). In other words, this command is\nmore than a simple velocity override.", "source": "meca500_programming_manual", "chunk_index": 4385, "length": 397, "hash": "16c10bd3f1c464e4af44f0668f827fb3"}
{"id": "meca500_programming_manual_4386", "text": "This command sets the time scaling of the trajectory generator. By calling this command\nwith an argument p of less than 100, all robot motions remain exactly the same (i.e., the path\nremains the same), but everything will be (100 \u2212 p) percent slower, including time delays\n(e.g., the pause set by the command", "source": "meca500_programming_manual", "chunk_index": 4386, "length": 308, "hash": "2d0896cb695156950fc81fd6dc446726"}
{"id": "meca500_programming_manual_4387", "text": "(page 134)). In other words, this command is\nmore than a simple velocity override.", "source": "meca500_programming_manual", "chunk_index": 4387, "length": 82, "hash": "2103f3e425845e1cabd22170470616f2"}
{"id": "meca500_programming_manual_4388", "text": "When using the MecaPortal, you can change the time scaling in real time with the \u201cTime\nScaling\u201d slider at the bottom of the program panel.", "source": "meca500_programming_manual", "chunk_index": 4388, "length": 138, "hash": "dc9d55ea5f154b8bf2bc32f4e4a930fe"}
{"id": "meca500_programming_manual_4389", "text": "When using the MecaPortal, you can change the time scaling in real time with the \u201cTime\nScaling\u201d slider at the bottom of the program panel.", "source": "meca500_programming_manual", "chunk_index": 4389, "length": 138, "hash": "dc9d55ea5f154b8bf2bc32f4e4a930fe"}
{"id": "meca500_programming_manual_4390", "text": "\u2022 p: time scaling percentage, from 0.001 to 100.", "source": "meca500_programming_manual", "chunk_index": 4390, "length": 48, "hash": "6cefa34925216a3664c46a20a652a5c8"}
{"id": "meca500_programming_manual_4391", "text": "\u2022 p: time scaling percentage, from 0.001 to 100.", "source": "meca500_programming_manual", "chunk_index": 4391, "length": 48, "hash": "6cefa34925216a3664c46a20a652a5c8"}
{"id": "meca500_programming_manual_4392", "text": "By default, p = 100.", "source": "meca500_programming_manual", "chunk_index": 4392, "length": 20, "hash": "ee6bf564bd57e97d5ca6343ffab283b3"}
{"id": "meca500_programming_manual_4393", "text": "By default, p = 100.", "source": "meca500_programming_manual", "chunk_index": 4393, "length": 20, "hash": "ee6bf564bd57e97d5ca6343ffab283b3"}
{"id": "meca500_programming_manual_4394", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4394, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4395", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4395, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4396", "text": "In cyclic protocols,\nMotionCommandID 48. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4396, "length": 72, "hash": "82885281f8ca525f72f3bc4913e814aa"}
{"id": "meca500_programming_manual_4397", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4397, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4398", "text": "48. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4398, "length": 35, "hash": "16def8f6c261151c58682952ddccfcab"}
{"id": "meca500_programming_manual_4399", "text": "the SetTimeScaling (page 215) command is represented by", "source": "meca500_programming_manual", "chunk_index": 4399, "length": 55, "hash": "35ed2691133e72b82c6ca80138d9b264"}
{"id": "meca500_programming_manual_4400", "text": "(page 215) command is represented by", "source": "meca500_programming_manual", "chunk_index": 4400, "length": 36, "hash": "60b84ea80f4663cb31f2067ab4636894"}
{"id": "meca500_programming_manual_4401", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4401, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4402", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4402, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4403", "text": "This command starts a program that has been previously saved in the robot\u2019s memory.\nExecuting this command will launch the specified program only once.", "source": "meca500_programming_manual", "chunk_index": 4403, "length": 151, "hash": "a3f5c74b5524aa16949a63f2fde7a07f"}
{"id": "meca500_programming_manual_4404", "text": "This command starts a program that has been previously saved in the robot\u2019s memory.\nExecuting this command will launch the specified program only once.", "source": "meca500_programming_manual", "chunk_index": 4404, "length": 151, "hash": "a3f5c74b5524aa16949a63f2fde7a07f"}
{"id": "meca500_programming_manual_4405", "text": "Alternately, pressing the Start/Stop button on the robot\u2019s base will start program named\n\u201c1\u201d,\nif such a program exists, and execute it the number of times defined by the\nSetOfflineProgramLoop (page 207) command.", "source": "meca500_programming_manual", "chunk_index": 4405, "length": 211, "hash": "7b4bf6cfc3da5b957005993256f841cc"}
{"id": "meca500_programming_manual_4406", "text": "Alternately, pressing the Start/Stop button on the robot\u2019s base will start program named\n\u201c1\u201d,\nif such a program exists, and execute it the number of times defined by the", "source": "meca500_programming_manual", "chunk_index": 4406, "length": 169, "hash": "8135b00d7dc288957822f1e1fe16ba11"}
{"id": "meca500_programming_manual_4407", "text": "SetOfflineProgramLoop", "source": "meca500_programming_manual", "chunk_index": 4407, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "meca500_programming_manual_4408", "text": "\u2022 s: string containing the program name. It should contain a maximum of 63 characters", "source": "meca500_programming_manual", "chunk_index": 4408, "length": 85, "hash": "cc5fc538e1bb29d68a9882c6d7f52cbd"}
{"id": "meca500_programming_manual_4409", "text": "\u2022 s: string containing the program name. It should contain a maximum of 63 characters", "source": "meca500_programming_manual", "chunk_index": 4409, "length": 85, "hash": "cc5fc538e1bb29d68a9882c6d7f52cbd"}
{"id": "meca500_programming_manual_4410", "text": "among the 62 alphanumericals (A..Z, a..z, 0..9), the underscore and the hyphen.", "source": "meca500_programming_manual", "chunk_index": 4410, "length": 79, "hash": "934cf5e6daf55456e522d02e3594e37f"}
{"id": "meca500_programming_manual_4411", "text": "among the 62 alphanumericals (A..Z, a..z, 0..9), the underscore and the hyphen.", "source": "meca500_programming_manual", "chunk_index": 4411, "length": 79, "hash": "934cf5e6daf55456e522d02e3594e37f"}
{"id": "meca500_programming_manual_4412", "text": "\u2022 [2063][Offline program s started.]", "source": "meca500_programming_manual", "chunk_index": 4412, "length": 36, "hash": "bf0021675c5135e4c098706a08e6f9c6"}
{"id": "meca500_programming_manual_4413", "text": "\u2022 [2063][Offline program s started.]", "source": "meca500_programming_manual", "chunk_index": 4413, "length": 36, "hash": "bf0021675c5135e4c098706a08e6f9c6"}
{"id": "meca500_programming_manual_4414", "text": "\u2022 [3017][No offline program saved.]", "source": "meca500_programming_manual", "chunk_index": 4414, "length": 35, "hash": "097012d18254ef08f84001ae1401b570"}
{"id": "meca500_programming_manual_4415", "text": "\u2022 [3017][No offline program saved.]", "source": "meca500_programming_manual", "chunk_index": 4415, "length": 35, "hash": "097012d18254ef08f84001ae1401b570"}
{"id": "meca500_programming_manual_4416", "text": "The MecaPortal allows saving of programs using sting-based name rather than numbers,\nunlike the command StartSaving. However, if you wish to start these programs through a\ncyclic protocol, you should only use integer numbers as program names.", "source": "meca500_programming_manual", "chunk_index": 4416, "length": 242, "hash": "83407c57bea54900bdc59e05b1239cb2"}
{"id": "meca500_programming_manual_4417", "text": "The MecaPortal allows saving of programs using sting-based name rather than numbers,\nunlike the command StartSaving. However, if you wish to start these programs through a\ncyclic protocol, you should only use integer numbers as program names.", "source": "meca500_programming_manual", "chunk_index": 4417, "length": 242, "hash": "83407c57bea54900bdc59e05b1239cb2"}
{"id": "meca500_programming_manual_4418", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4418, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4419", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4419, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4420", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4420, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4421", "text": "(page 359). Otherwise,", "source": "meca500_programming_manual", "chunk_index": 4421, "length": 22, "hash": "39ff971f6be71227a2ce2989acd87732"}
{"id": "meca500_programming_manual_4422", "text": "the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4422, "length": 43, "hash": "ec00e431478bec8d38451c7a7720a238"}
{"id": "meca500_programming_manual_4423", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4423, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4424", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4424, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4425", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4425, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4426", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4426, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4427", "text": "In cyclic protocols,\nMotionCommandID 100. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4427, "length": 73, "hash": "6048c3a3a0f4564dcdc3cd8d3b42b808"}
{"id": "meca500_programming_manual_4428", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4428, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4429", "text": "100. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4429, "length": 36, "hash": "d02ab6c7c20ba2aebc0ad7d373395993"}
{"id": "meca500_programming_manual_4430", "text": "the StartProgram (page 216) command is", "source": "meca500_programming_manual", "chunk_index": 4430, "length": 38, "hash": "846acdde132017f8af9d5a2f9ccaa67c"}
{"id": "meca500_programming_manual_4431", "text": "(page 216) command is", "source": "meca500_programming_manual", "chunk_index": 4431, "length": 21, "hash": "52c314c611cf496811762aacae7026d3"}
{"id": "meca500_programming_manual_4432", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4432, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4433", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4433, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4434", "text": "This command is used to save commands in the robot\u2019s internal memory. These are referred\nto as offline programs (page 358) that can later be played using the StartProgram (page 216)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 4434, "length": 190, "hash": "0f8f87e2497eec8be56145d99fc2f43e"}
{"id": "meca500_programming_manual_4435", "text": "This command is used to save commands in the robot\u2019s internal memory. These are referred\nto as", "source": "meca500_programming_manual", "chunk_index": 4435, "length": 94, "hash": "417985dceb923b45d5f4863babe82d2b"}
{"id": "meca500_programming_manual_4436", "text": "(page 358) that can later be played using the", "source": "meca500_programming_manual", "chunk_index": 4436, "length": 45, "hash": "ea2bdb54f5ebd7b00e2794e6d703e6d0"}
{"id": "meca500_programming_manual_4437", "text": "The saved program will remain in the robot internal memory even after disconnecting the\npower. Saving a new program with the same argument overwrites the existing program.", "source": "meca500_programming_manual", "chunk_index": 4437, "length": 171, "hash": "d572ae91b699a28f8539419400ba9b15"}
{"id": "meca500_programming_manual_4438", "text": "The saved program will remain in the robot internal memory even after disconnecting the\npower. Saving a new program with the same argument overwrites the existing program.", "source": "meca500_programming_manual", "chunk_index": 4438, "length": 171, "hash": "d572ae91b699a28f8539419400ba9b15"}
{"id": "meca500_programming_manual_4439", "text": "The robot records all commands sent between the StartSaving (page 217) and StopSaving\n(page 219) commands.", "source": "meca500_programming_manual", "chunk_index": 4439, "length": 106, "hash": "741782d2d9f3949137e88abc3067aecb"}
{"id": "meca500_programming_manual_4440", "text": "The robot records all commands sent between the", "source": "meca500_programming_manual", "chunk_index": 4440, "length": 47, "hash": "b794dbb52bc2ae557f4242d5c0259e4c"}
{"id": "meca500_programming_manual_4441", "text": "(page 219) commands.", "source": "meca500_programming_manual", "chunk_index": 4441, "length": 20, "hash": "656398facc095840d1dea7316211bcc5"}
{"id": "meca500_programming_manual_4442", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,\nas it is easier and more flexible than using StartSaving (page 217) / StopSaving (page 219).", "source": "meca500_programming_manual", "chunk_index": 4442, "length": 182, "hash": "8602ef93259c19c779ff4f43a93ec93d"}
{"id": "meca500_programming_manual_4443", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,", "source": "meca500_programming_manual", "chunk_index": 4443, "length": 89, "hash": "7cc5346aa740e9711f7943bf1019ed3d"}
{"id": "meca500_programming_manual_4444", "text": "as it is easier and more flexible than using", "source": "meca500_programming_manual", "chunk_index": 4444, "length": 44, "hash": "fdfee45de86b5d88c7fefb86a525bf21"}
{"id": "meca500_programming_manual_4445", "text": "The robot will execute but not record request commands (Get*). If the robot receives a\nchange of state command (Home (page 192), PauseMotion (page 195), SetEom (page 202),\netc.) while recording, it will abort saving the program. Finally, only program 1 can be\nexecuted using the Start/Pause button on the Meca500\u2019s base.", "source": "meca500_programming_manual", "chunk_index": 4445, "length": 320, "hash": "a0fbdcaed5bb5416940df960d446ae66"}
{"id": "meca500_programming_manual_4446", "text": "The robot will execute but not record request commands (Get*). If the robot receives a\nchange of state command (", "source": "meca500_programming_manual", "chunk_index": 4446, "length": 112, "hash": "ccb2801f3824358e942272734c9ff1ff"}
{"id": "meca500_programming_manual_4447", "text": "(page 202),\netc.) while recording, it will abort saving the program. Finally, only program 1 can be\nexecuted using the Start/Pause button on the Meca500\u2019s base.", "source": "meca500_programming_manual", "chunk_index": 4447, "length": 160, "hash": "5b1de9b803374aab861b02ea163e4b02"}
{"id": "meca500_programming_manual_4448", "text": "\u2022 n: program number, where n \u2264 500 (maximum number of programs that can be stored).", "source": "meca500_programming_manual", "chunk_index": 4448, "length": 83, "hash": "d667516c6504aa701aed7a8436150ceb"}
{"id": "meca500_programming_manual_4449", "text": "\u2022 n: program number, where n \u2264 500 (maximum number of programs that can be stored).", "source": "meca500_programming_manual", "chunk_index": 4449, "length": 83, "hash": "d667516c6504aa701aed7a8436150ceb"}
{"id": "meca500_programming_manual_4450", "text": "\u2022 [2060][Start saving program.]", "source": "meca500_programming_manual", "chunk_index": 4450, "length": 31, "hash": "a8cccdb60b75493b7ab4d3536a9b2c75"}
{"id": "meca500_programming_manual_4451", "text": "\u2022 [2060][Start saving program.]", "source": "meca500_programming_manual", "chunk_index": 4451, "length": 31, "hash": "a8cccdb60b75493b7ab4d3536a9b2c75"}
{"id": "meca500_programming_manual_4452", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4452, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4453", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4453, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4454", "text": "If the robot is deactivated, the program is saved without executing received commands.", "source": "meca500_programming_manual", "chunk_index": 4454, "length": 86, "hash": "72c18f8fae6f04fd9e6086ff46cf6ff0"}
{"id": "meca500_programming_manual_4455", "text": "If the robot is deactivated, the program is saved without executing received commands.", "source": "meca500_programming_manual", "chunk_index": 4455, "length": 86, "hash": "72c18f8fae6f04fd9e6086ff46cf6ff0"}
{"id": "meca500_programming_manual_4456", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4456, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4457", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4457, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4458", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4458, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4459", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4459, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4460", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4460, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4461", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4461, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4462", "text": "This command will make the controller save the program and stop saving.", "source": "meca500_programming_manual", "chunk_index": 4462, "length": 71, "hash": "00318d28dded19cef6fb6de9ee36c400"}
{"id": "meca500_programming_manual_4463", "text": "This command will make the controller save the program and stop saving.", "source": "meca500_programming_manual", "chunk_index": 4463, "length": 71, "hash": "00318d28dded19cef6fb6de9ee36c400"}
{"id": "meca500_programming_manual_4464", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,\nas it is easier and more flexible than using StartSaving (page 217) / StopSaving (page 219).", "source": "meca500_programming_manual", "chunk_index": 4464, "length": 182, "hash": "8602ef93259c19c779ff4f43a93ec93d"}
{"id": "meca500_programming_manual_4465", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,\nas it is easier and more flexible than using", "source": "meca500_programming_manual", "chunk_index": 4465, "length": 134, "hash": "e14cce97c4dc39c1b05fe0a61adcab42"}
{"id": "meca500_programming_manual_4466", "text": "\u2022 [2061][n commands saved.]", "source": "meca500_programming_manual", "chunk_index": 4466, "length": 27, "hash": "2a2339ebd6435989d20cb527da6a54d9"}
{"id": "meca500_programming_manual_4467", "text": "\u2022 [2061][n commands saved.]", "source": "meca500_programming_manual", "chunk_index": 4467, "length": 27, "hash": "2a2339ebd6435989d20cb527da6a54d9"}
{"id": "meca500_programming_manual_4468", "text": "\u2022 [2064][Offline program looping is enabled.]", "source": "meca500_programming_manual", "chunk_index": 4468, "length": 45, "hash": "4facde3a533e00bded5d46f8119826dd"}
{"id": "meca500_programming_manual_4469", "text": "\u2022 [2064][Offline program looping is enabled.]", "source": "meca500_programming_manual", "chunk_index": 4469, "length": 45, "hash": "4facde3a533e00bded5d46f8119826dd"}
{"id": "meca500_programming_manual_4470", "text": "\u2022 [2065][Offline program looping is disabled.]", "source": "meca500_programming_manual", "chunk_index": 4470, "length": 46, "hash": "5668c492b06afd993064ba6e6573335c"}
{"id": "meca500_programming_manual_4471", "text": "\u2022 [2065][Offline program looping is disabled.]", "source": "meca500_programming_manual", "chunk_index": 4471, "length": 46, "hash": "5668c492b06afd993064ba6e6573335c"}
{"id": "meca500_programming_manual_4472", "text": "\u2022 [1022][Robot was not saving the program.]", "source": "meca500_programming_manual", "chunk_index": 4472, "length": 43, "hash": "e5fb5ec54ce1eb7996762e4290dac688"}
{"id": "meca500_programming_manual_4473", "text": "\u2022 [1022][Robot was not saving the program.]", "source": "meca500_programming_manual", "chunk_index": 4473, "length": 43, "hash": "e5fb5ec54ce1eb7996762e4290dac688"}
{"id": "meca500_programming_manual_4474", "text": "Two responses will be generated: the first (2061) and the second (2064) or third (2065). If\nyou send this command while the robot is not saving a program, the fourth response (1022)\nwill be returned.", "source": "meca500_programming_manual", "chunk_index": 4474, "length": 199, "hash": "e2b0cb94b9bf3a525dc59819efd1018e"}
{"id": "meca500_programming_manual_4475", "text": "Two responses will be generated: the first (2061) and the second (2064) or third (2065). If\nyou send this command while the robot is not saving a program, the fourth response (1022)\nwill be returned.", "source": "meca500_programming_manual", "chunk_index": 4475, "length": 199, "hash": "e2b0cb94b9bf3a525dc59819efd1018e"}
{"id": "meca500_programming_manual_4476", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4476, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4477", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4477, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4478", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4478, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4479", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4479, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4480", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4480, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4481", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4481, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4482", "text": "This command will enable EtherCAT and disable the other three protocols (EtherCAT is an\nexclusive protocol that cannot be used at the same time as other Ethernet-based protocols).", "source": "meca500_programming_manual", "chunk_index": 4482, "length": 179, "hash": "83ed5a2da534f931f2a6b0286c511d20"}
{"id": "meca500_programming_manual_4483", "text": "This command will enable EtherCAT and disable the other three protocols (EtherCAT is an\nexclusive protocol that cannot be used at the same time as other Ethernet-based protocols).", "source": "meca500_programming_manual", "chunk_index": 4483, "length": 179, "hash": "83ed5a2da534f931f2a6b0286c511d20"}
{"id": "meca500_programming_manual_4484", "text": "Enabling EtherCAT will disable all other communication protocols (TCP/IP, EtherNet/IP,\nPROFINET). The MecaPortal is NOT accessible while in EtherCAT mode.", "source": "meca500_programming_manual", "chunk_index": 4484, "length": 154, "hash": "e052f4725f8413f4e694ba4a118da150"}
{"id": "meca500_programming_manual_4485", "text": "Enabling EtherCAT will disable all other communication protocols (TCP/IP, EtherNet/IP,\nPROFINET). The MecaPortal is NOT accessible while in EtherCAT mode.", "source": "meca500_programming_manual", "chunk_index": 4485, "length": 154, "hash": "e052f4725f8413f4e694ba4a118da150"}
{"id": "meca500_programming_manual_4486", "text": "There are two ways to disable EtherCAT (and thus re-enable another communication\nprotocols):", "source": "meca500_programming_manual", "chunk_index": 4486, "length": 92, "hash": "d27bd8efd1d2586b6570a88d1e1990fe"}
{"id": "meca500_programming_manual_4487", "text": "There are two ways to disable EtherCAT (and thus re-enable another communication\nprotocols):", "source": "meca500_programming_manual", "chunk_index": 4487, "length": 92, "hash": "d27bd8efd1d2586b6570a88d1e1990fe"}
{"id": "meca500_programming_manual_4488", "text": "1. Reset the DisableEtherCAT subindex of the Robot control (page 55) object.", "source": "meca500_programming_manual", "chunk_index": 4488, "length": 76, "hash": "8959d1442b6fdb83805e7f78a88c5366"}
{"id": "meca500_programming_manual_4489", "text": "1. Reset the DisableEtherCAT subindex of the", "source": "meca500_programming_manual", "chunk_index": 4489, "length": 44, "hash": "8ebfc2e4c3b9ee08e09df5b337acea1b"}
{"id": "meca500_programming_manual_4490", "text": "2. Perform a network configuration reset (see the robot\u2019s user manual for the procedure).", "source": "meca500_programming_manual", "chunk_index": 4490, "length": 89, "hash": "3b9438d37d677eb900179d1448f5a866"}
{"id": "meca500_programming_manual_4491", "text": "2. Perform a network configuration reset (see the robot\u2019s user manual for the procedure).", "source": "meca500_programming_manual", "chunk_index": 4491, "length": 89, "hash": "3b9438d37d677eb900179d1448f5a866"}
{"id": "meca500_programming_manual_4492", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4492, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4493", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4493, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4494", "text": "In cyclic protocols, set the DisableEtherCAT bit in the Robot Control data to 1 to disable\nthe EtherCAT protocol and switch back to TCP/IP protocol. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 4494, "length": 178, "hash": "77a881b47824eaa96012f1d3f348908f"}
{"id": "meca500_programming_manual_4495", "text": "In cyclic protocols, set the", "source": "meca500_programming_manual", "chunk_index": 4495, "length": 28, "hash": "c51e7492f6edd224957cc696526247af"}
{"id": "meca500_programming_manual_4496", "text": "data to 1 to disable\nthe EtherCAT protocol and switch back to TCP/IP protocol. See Table 4 for more details.", "source": "meca500_programming_manual", "chunk_index": 4496, "length": 108, "hash": "e96d863b58d5a13c28bc5e4248fad923"}
{"id": "meca500_programming_manual_4497", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4497, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4498", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4498, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4499", "text": "This command is used for associating an ID number with any non-motion command, thus\nIt it is executed\nproviding means to identify the command that sent a specific response.\nimmediately.", "source": "meca500_programming_manual", "chunk_index": 4499, "length": 185, "hash": "c080c981aaaac45b15a8e476fd463bee"}
{"id": "meca500_programming_manual_4500", "text": "This command is used for associating an ID number with any non-motion command, thus\nIt it is executed\nproviding means to identify the command that sent a specific response.\nimmediately.", "source": "meca500_programming_manual", "chunk_index": 4500, "length": 185, "hash": "c080c981aaaac45b15a8e476fd463bee"}
{"id": "meca500_programming_manual_4501", "text": "\u2022 n : a non-negative integer number, ranging from 0 to 2\u00b3\u00b2 \u2212 1.", "source": "meca500_programming_manual", "chunk_index": 4501, "length": 63, "hash": "e1c34f06308f0e09578bebe71a12c512"}
{"id": "meca500_programming_manual_4502", "text": "\u2022 n : a non-negative integer number, ranging from 0 to 2\u00b3\u00b2 \u2212 1.", "source": "meca500_programming_manual", "chunk_index": 4502, "length": 63, "hash": "e1c34f06308f0e09578bebe71a12c512"}
{"id": "meca500_programming_manual_4503", "text": "For example, sending SyncCmdQueue(123) just before the GetStatusRobot (page 290)\ncommand allows the application to know if a received robot status (code 2007) is the response\nof the GetStatusRobot (page 290) request (i.e., preceded by [2097][123]) or of an older status\nrequest.", "source": "meca500_programming_manual", "chunk_index": 4503, "length": 278, "hash": "f18192acadc04fe49296d20fe305d16d"}
{"id": "meca500_programming_manual_4504", "text": "For example, sending SyncCmdQueue(123) just before the", "source": "meca500_programming_manual", "chunk_index": 4504, "length": 54, "hash": "7e08fd68e16e2c6122686aee12b871a7"}
{"id": "meca500_programming_manual_4505", "text": "(page 290)\ncommand allows the application to know if a received robot status (code 2007) is the response\nof the", "source": "meca500_programming_manual", "chunk_index": 4505, "length": 111, "hash": "8a1f06a42e6f13daa261dc68dbf93154"}
{"id": "meca500_programming_manual_4506", "text": "(page 290) request (i.e., preceded by [2097][123]) or of an older status\nrequest.", "source": "meca500_programming_manual", "chunk_index": 4506, "length": 81, "hash": "349734c46fbd32a41a916efba28b1c3b"}
{"id": "meca500_programming_manual_4507", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4507, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4508", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4508, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4509", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4509, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4510", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4510, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4511", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4511, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4512", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4512, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4513", "text": "This command starts an Ethernet capture (PCAP file format) on the robot, for the specified\nduration. The Ethernet capture will be part of the logs archive, which can be retrieved from\nthe MecaPortal.", "source": "meca500_programming_manual", "chunk_index": 4513, "length": 199, "hash": "fcd19e72b75de441aa97f567d3003036"}
{"id": "meca500_programming_manual_4514", "text": "This command starts an Ethernet capture (PCAP file format) on the robot, for the specified\nduration. The Ethernet capture will be part of the logs archive, which can be retrieved from\nthe MecaPortal.", "source": "meca500_programming_manual", "chunk_index": 4514, "length": 199, "hash": "fcd19e72b75de441aa97f567d3003036"}
{"id": "meca500_programming_manual_4515", "text": "\u2022 n: duration in seconds.", "source": "meca500_programming_manual", "chunk_index": 4515, "length": 25, "hash": "cbb2b47b44dc4dfa9a20bc4a6d13c3f3"}
{"id": "meca500_programming_manual_4516", "text": "\u2022 n: duration in seconds.", "source": "meca500_programming_manual", "chunk_index": 4516, "length": 25, "hash": "cbb2b47b44dc4dfa9a20bc4a6d13c3f3"}
{"id": "meca500_programming_manual_4517", "text": "\u2022 [3035][TCP dump capture started for n seconds.]", "source": "meca500_programming_manual", "chunk_index": 4517, "length": 49, "hash": "bc45ffdeca4b748b4a9fbac066766e11"}
{"id": "meca500_programming_manual_4518", "text": "\u2022 [3035][TCP dump capture started for n seconds.]", "source": "meca500_programming_manual", "chunk_index": 4518, "length": 49, "hash": "bc45ffdeca4b748b4a9fbac066766e11"}
{"id": "meca500_programming_manual_4519", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "meca500_programming_manual", "chunk_index": 4519, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "meca500_programming_manual_4520", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "meca500_programming_manual", "chunk_index": 4520, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "meca500_programming_manual_4521", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4521, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4522", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4522, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4523", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4523, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4524", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4524, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4525", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4525, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4526", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4526, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4527", "text": "This command is needed if you want to stop the TCP dump started with the TcpDump(n)\n(page 222) commands, before the timeout period of n seconds.", "source": "meca500_programming_manual", "chunk_index": 4527, "length": 144, "hash": "5e6332b4cd8209c8c1e830143d265b9f"}
{"id": "meca500_programming_manual_4528", "text": "This command is needed if you want to stop the TCP dump started with the", "source": "meca500_programming_manual", "chunk_index": 4528, "length": 72, "hash": "622f859dd3b95cc345f41d5fff71e501"}
{"id": "meca500_programming_manual_4529", "text": "(page 222) commands, before the timeout period of n seconds.", "source": "meca500_programming_manual", "chunk_index": 4529, "length": 60, "hash": "9b16acfa90be3aa1b8f2e5c755e42635"}
{"id": "meca500_programming_manual_4530", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "meca500_programming_manual", "chunk_index": 4530, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "meca500_programming_manual_4531", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "meca500_programming_manual", "chunk_index": 4531, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "meca500_programming_manual_4532", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4532, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4533", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4533, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4534", "text": "It does nothing if no TCP dump capture was started.", "source": "meca500_programming_manual", "chunk_index": 4534, "length": 51, "hash": "03e0f5d0321a8345b43609aebc23ca99"}
{"id": "meca500_programming_manual_4535", "text": "It does nothing if no TCP dump capture was started.", "source": "meca500_programming_manual", "chunk_index": 4535, "length": 51, "hash": "03e0f5d0321a8345b43609aebc23ca99"}
{"id": "meca500_programming_manual_4536", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4536, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4537", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4537, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4538", "text": "Data request commands", "source": "meca500_programming_manual", "chunk_index": 4538, "length": 21, "hash": "740e0f3ebe98ec51eeb00f79c71a6b52"}
{"id": "meca500_programming_manual_4539", "text": "Data request commands", "source": "meca500_programming_manual", "chunk_index": 4539, "length": 21, "hash": "740e0f3ebe98ec51eeb00f79c71a6b52"}
{"id": "meca500_programming_manual_4540", "text": "Most request commands return values for parameters that were either previously configured\nusing the corresponding Set* command (e.g.\nSetJointVel (page 163) and GetJointVel\n(page 242)) or are simply the default values of those parameters (e.g. 50 in the case of the\njoint velocity). A few of the request commands return values for parameters that have been\nautomatically assigned (e.g., at the factory as in the case of GetProductType (page 254), or\nafter a firmware upgrade, as in the case of GetFwVersion (page 238)).", "source": "meca500_programming_manual", "chunk_index": 4540, "length": 518, "hash": "2130ff6264e16c6d9d1ad4a9bba43cb6"}
{"id": "meca500_programming_manual_4541", "text": "Most request commands return values for parameters that were either previously configured\nusing the corresponding Set* command (e.g.", "source": "meca500_programming_manual", "chunk_index": 4541, "length": 132, "hash": "d4b93cae3c4533d2c8b546d582c29989"}
{"id": "meca500_programming_manual_4542", "text": "(page 242)) or are simply the default values of those parameters (e.g. 50 in the case of the\njoint velocity). A few of the request commands return values for parameters that have been\nautomatically assigned (e.g., at the factory as in the case of", "source": "meca500_programming_manual", "chunk_index": 4542, "length": 246, "hash": "66afb8a18a700319b4a480261125041b"}
{"id": "meca500_programming_manual_4543", "text": "(page 254), or\nafter a firmware upgrade, as in the case of", "source": "meca500_programming_manual", "chunk_index": 4543, "length": 58, "hash": "d7135104fb57d68480e9a004dde7dbc3"}
{"id": "meca500_programming_manual_4544", "text": "Contrary to motion commands, robot control commands are executed immediately, i.e., are\ninstantaneous. Therefore, if you send a SetTrf (page 179) command, then a MovePose\n(page 147) command, then another SetTrf (page 179) command, and immediately after that\na GetTrf (page 264) command, you will get the arguments of the first SetTrf (page 179)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 4544, "length": 353, "hash": "a929aa32286d141d40d7b692c869f40f"}
{"id": "meca500_programming_manual_4545", "text": "Contrary to motion commands,", "source": "meca500_programming_manual", "chunk_index": 4545, "length": 28, "hash": "e3e9613fea50dfcf0c0d70e95e106765"}
{"id": "meca500_programming_manual_4546", "text": "robot control commands are executed immediately", "source": "meca500_programming_manual", "chunk_index": 4546, "length": 47, "hash": "d82fe7144d35daebab3cb187228305be"}
{"id": "meca500_programming_manual_4547", "text": ", i.e., are\ninstantaneous. Therefore, if you send a", "source": "meca500_programming_manual", "chunk_index": 4547, "length": 51, "hash": "a6ced4a7bc935935a6345c4dd59b0beb"}
{"id": "meca500_programming_manual_4548", "text": "(page 179) command, then a", "source": "meca500_programming_manual", "chunk_index": 4548, "length": 26, "hash": "38960bd60b5a0c4815a749acce8d85e6"}
{"id": "meca500_programming_manual_4549", "text": "(page 147) command, then another", "source": "meca500_programming_manual", "chunk_index": 4549, "length": 32, "hash": "0224a84b35b01b3f0f3920bcc94433bd"}
{"id": "meca500_programming_manual_4550", "text": "(page 179) command, and immediately after that\na", "source": "meca500_programming_manual", "chunk_index": 4550, "length": 48, "hash": "921330a618b65358bea6998ee37c067f"}
{"id": "meca500_programming_manual_4551", "text": "(page 264) command, you will get the arguments of the first", "source": "meca500_programming_manual", "chunk_index": 4551, "length": 59, "hash": "f98b97c7804bee171d59b75361065c9c"}
{"id": "meca500_programming_manual_4552", "text": "The following is the alphabetically ordered list of data request commands that have a\ncorresponding Set* command:", "source": "meca500_programming_manual", "chunk_index": 4552, "length": 113, "hash": "979a9c874c24dccf3aa18d67d73b7aea"}
{"id": "meca500_programming_manual_4553", "text": "The following is the alphabetically ordered list of data request commands that have a\ncorresponding Set* command:", "source": "meca500_programming_manual", "chunk_index": 4553, "length": 113, "hash": "979a9c874c24dccf3aa18d67d73b7aea"}
{"id": "meca500_programming_manual_4554", "text": "\u2022 GetAutoConf (page 226)", "source": "meca500_programming_manual", "chunk_index": 4554, "length": 24, "hash": "db4602be607cacfcfade6e5292dff800"}
{"id": "meca500_programming_manual_4555", "text": "\u2022 GetAutoConfTurn (page 227)", "source": "meca500_programming_manual", "chunk_index": 4555, "length": 28, "hash": "33d603e512522f4a0d9f66ad9d3d040b"}
{"id": "meca500_programming_manual_4556", "text": "\u2022 GetBlending (page 228)", "source": "meca500_programming_manual", "chunk_index": 4556, "length": 24, "hash": "dccbc493b30c24c8f36a9e69c7d4f072"}
{"id": "meca500_programming_manual_4557", "text": "\u2022 GetCalibrationCfg (page 229)", "source": "meca500_programming_manual", "chunk_index": 4557, "length": 30, "hash": "72c9251a7ccab81c5e7f4cd767f2117e"}
{"id": "meca500_programming_manual_4558", "text": "\u2022 GetCartAcc (page 230)", "source": "meca500_programming_manual", "chunk_index": 4558, "length": 23, "hash": "acc7bc23e10f0b274bf6cbd1892ed51c"}
{"id": "meca500_programming_manual_4559", "text": "\u2022 GetCartAngVel (page 231)", "source": "meca500_programming_manual", "chunk_index": 4559, "length": 26, "hash": "6741be5d37195d60d673f57f95cc2461"}
{"id": "meca500_programming_manual_4560", "text": "\u2022 GetCartLinVel (page 232)", "source": "meca500_programming_manual", "chunk_index": 4560, "length": 26, "hash": "2dee06cce5182a303930246210bb553c"}
{"id": "meca500_programming_manual_4561", "text": "\u2022 GetCheckpoint (page 233)", "source": "meca500_programming_manual", "chunk_index": 4561, "length": 26, "hash": "8fb0e49b55bdcdcdb877a93cd4eee8ed"}
{"id": "meca500_programming_manual_4562", "text": "\u2022 GetCheckpointDiscarded (page 234)", "source": "meca500_programming_manual", "chunk_index": 4562, "length": 35, "hash": "fe945ed6f1bcb2d43993059f36596b8e"}
{"id": "meca500_programming_manual_4563", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 4563, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_4564", "text": "\u2022 GetConf (page 235)", "source": "meca500_programming_manual", "chunk_index": 4564, "length": 20, "hash": "5184c7e6225f25fd01e8e9ed87fbc6ba"}
{"id": "meca500_programming_manual_4565", "text": "\u2022 GetConfTurn (page 236)", "source": "meca500_programming_manual", "chunk_index": 4565, "length": 24, "hash": "d0d6c0ba86c1679746d9a37c2e78bb0f"}
{"id": "meca500_programming_manual_4566", "text": "\u2022 GetEthernetIpEnabled (page 237)", "source": "meca500_programming_manual", "chunk_index": 4566, "length": 33, "hash": "81efc2c6421794e72929fbaa57c0a0a3"}
{"id": "meca500_programming_manual_4567", "text": "GetEthernetIpEnabled", "source": "meca500_programming_manual", "chunk_index": 4567, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "meca500_programming_manual_4568", "text": "\u2022 GetJointAcc (page 239)", "source": "meca500_programming_manual", "chunk_index": 4568, "length": 24, "hash": "55fedd53ef0e3d38fc44c781578f55d7"}
{"id": "meca500_programming_manual_4569", "text": "\u2022 GetJointLimits (page 240)", "source": "meca500_programming_manual", "chunk_index": 4569, "length": 27, "hash": "ad0c18e0aec4340fef58baab3b995747"}
{"id": "meca500_programming_manual_4570", "text": "\u2022 GetJointLimitsCfg (page 241)", "source": "meca500_programming_manual", "chunk_index": 4570, "length": 30, "hash": "81e28cb1f3676cad70e00ba177bcfbcd"}
{"id": "meca500_programming_manual_4571", "text": "\u2022 GetJointVel (page 242)", "source": "meca500_programming_manual", "chunk_index": 4571, "length": 24, "hash": "54c14d8c18c742be5f367ff95141ba3b"}
{"id": "meca500_programming_manual_4572", "text": "\u2022 GetJointVelLimit (page 243)", "source": "meca500_programming_manual", "chunk_index": 4572, "length": 29, "hash": "ffc24ee18801d3a927afc7baf201847e"}
{"id": "meca500_programming_manual_4573", "text": "\u2022 GetMonitoringInterval (page 245)", "source": "meca500_programming_manual", "chunk_index": 4573, "length": 34, "hash": "c4d231d41be339d08f96ac98b6b58254"}
{"id": "meca500_programming_manual_4574", "text": "GetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4574, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "meca500_programming_manual_4575", "text": "\u2022 GetMoveDuration (page 246)", "source": "meca500_programming_manual", "chunk_index": 4575, "length": 28, "hash": "c13c1aa8fd50de770e51f9e705ff9476"}
{"id": "meca500_programming_manual_4576", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4576, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4577", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4577, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4578", "text": "\u2022 GetMoveDurationCfg (page 247)", "source": "meca500_programming_manual", "chunk_index": 4578, "length": 31, "hash": "c4b227670c0f6370b2a52b5d644e8d57"}
{"id": "meca500_programming_manual_4579", "text": "\u2022 GetMoveMode (page 250)", "source": "meca500_programming_manual", "chunk_index": 4579, "length": 24, "hash": "7de16d43f6646fac6b269326722aa31a"}
{"id": "meca500_programming_manual_4580", "text": "\u2022 GetNetworkOptions (page 251)", "source": "meca500_programming_manual", "chunk_index": 4580, "length": 30, "hash": "461feb80ed8a2113754d296c15decb1c"}
{"id": "meca500_programming_manual_4581", "text": "\u2022 GetPayload (page 253)", "source": "meca500_programming_manual", "chunk_index": 4581, "length": 23, "hash": "e774c4ac3bdd3454ae14a9e145175db0"}
{"id": "meca500_programming_manual_4582", "text": "\u2022 GetProfinetEnabled (page 255)", "source": "meca500_programming_manual", "chunk_index": 4582, "length": 31, "hash": "6256b99b1cd844fe39b16a85c3da7412"}
{"id": "meca500_programming_manual_4583", "text": "\u2022 GetPStop2Cfg (page 252)", "source": "meca500_programming_manual", "chunk_index": 4583, "length": 25, "hash": "666b490307a7114b741e49089b8d9818"}
{"id": "meca500_programming_manual_4584", "text": "\u2022 GetRealTimeMonitoring (page 256)", "source": "meca500_programming_manual", "chunk_index": 4584, "length": 34, "hash": "4cfc58991f7845ed734726f52afb0bdd"}
{"id": "meca500_programming_manual_4585", "text": "GetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 4585, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "meca500_programming_manual_4586", "text": "\u2022 GetRobotName (page 258)", "source": "meca500_programming_manual", "chunk_index": 4586, "length": 25, "hash": "868ef9879c356fb3d0b8c8682565a639"}
{"id": "meca500_programming_manual_4587", "text": "\u2022 GetSimModeCfg (page 260)", "source": "meca500_programming_manual", "chunk_index": 4587, "length": 26, "hash": "92cd2ba2e2685909e66931427e96ed3b"}
{"id": "meca500_programming_manual_4588", "text": "\u2022 GetTimeScaling (page 261)", "source": "meca500_programming_manual", "chunk_index": 4588, "length": 27, "hash": "eb86e10efa44e3f5bb4421cd3df25b6c"}
{"id": "meca500_programming_manual_4589", "text": "\u2022 GetTorqueLimits (page 262)", "source": "meca500_programming_manual", "chunk_index": 4589, "length": 28, "hash": "3828adcfbaa2e1a1e5339f8b2ec7b79f"}
{"id": "meca500_programming_manual_4590", "text": "\u2022 GetTorqueLimitsCfg (page 263)", "source": "meca500_programming_manual", "chunk_index": 4590, "length": 31, "hash": "e31c1bd6fcead8bbed66e927035956e0"}
{"id": "meca500_programming_manual_4591", "text": "\u2022 GetVelTimeout (page 265)", "source": "meca500_programming_manual", "chunk_index": 4591, "length": 26, "hash": "a4f18b4a80a6f056ea085a9e33f3eb8f"}
{"id": "meca500_programming_manual_4592", "text": "The following is the list of data request commands that return read-only data, which cannot\nbe modified by the user:", "source": "meca500_programming_manual", "chunk_index": 4592, "length": 116, "hash": "19edd00a78ac874bf2f8b8ba0fdf7745"}
{"id": "meca500_programming_manual_4593", "text": "The following is the list of data request commands that return read-only data, which cannot\nbe modified by the user:", "source": "meca500_programming_manual", "chunk_index": 4593, "length": 116, "hash": "19edd00a78ac874bf2f8b8ba0fdf7745"}
{"id": "meca500_programming_manual_4594", "text": "\u2022 GetFwVersion (page 238)", "source": "meca500_programming_manual", "chunk_index": 4594, "length": 25, "hash": "f1803c7470296561f477e0103c1aa9f0"}
{"id": "meca500_programming_manual_4595", "text": "\u2022 GetModelJointLimits (page 244)", "source": "meca500_programming_manual", "chunk_index": 4595, "length": 32, "hash": "b09b4295ad24af97babc6c4e994ae4ee"}
{"id": "meca500_programming_manual_4596", "text": "\u2022 GetProductType (page 254)", "source": "meca500_programming_manual", "chunk_index": 4596, "length": 27, "hash": "501654d8792ecc39247eb99cccec5117"}
{"id": "meca500_programming_manual_4597", "text": "\u2022 GetRobotCalibrated (page 257)", "source": "meca500_programming_manual", "chunk_index": 4597, "length": 31, "hash": "3a857fd45aa580f9c797d0104c125273"}
{"id": "meca500_programming_manual_4598", "text": "\u2022 GetRobotSerial (page 259)", "source": "meca500_programming_manual", "chunk_index": 4598, "length": 27, "hash": "236c81b826f602477ae12a4e56dad29a"}
{"id": "meca500_programming_manual_4599", "text": "A few other data request commands exist, but these are presented in the sections Work zone\nsupervision and collision prevention commands (page 292) (e.g., GetToolSphere (page 297)),\nCommands for optional accessories (page 306) and Commands for managing variables (beta)\n(page 345) (e.g., GetVariable (page 353)).", "source": "meca500_programming_manual", "chunk_index": 4599, "length": 312, "hash": "7f76cbf573151a73fe9d454747640473"}
{"id": "meca500_programming_manual_4600", "text": "A few other data request commands exist, but these are presented in the sections", "source": "meca500_programming_manual", "chunk_index": 4600, "length": 80, "hash": "4632273ccf8c1f667187ec59bb60a0c6"}
{"id": "meca500_programming_manual_4601", "text": "supervision and collision prevention commands", "source": "meca500_programming_manual", "chunk_index": 4601, "length": 45, "hash": "14b2dc710f65b014121058131234ae2f"}
{"id": "meca500_programming_manual_4602", "text": "Commands for optional accessories", "source": "meca500_programming_manual", "chunk_index": 4602, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "meca500_programming_manual_4603", "text": "Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 4603, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "meca500_programming_manual_4604", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4604, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4605", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4605, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4606", "text": "This command returns the state of the automatic posture configuration selection, which can\nbe influenced by the SetAutoConf (page 149) and SetConf (page 157) commands.", "source": "meca500_programming_manual", "chunk_index": 4606, "length": 167, "hash": "c2c7210e3c6b7cbd5f2e58b8c2eecd8d"}
{"id": "meca500_programming_manual_4607", "text": "This command returns the state of the automatic posture configuration selection, which can\nbe influenced by the", "source": "meca500_programming_manual", "chunk_index": 4607, "length": 111, "hash": "d9501e37ec563119f51ddcf3a0b3d006"}
{"id": "meca500_programming_manual_4608", "text": "(page 157) commands.", "source": "meca500_programming_manual", "chunk_index": 4608, "length": 20, "hash": "59b92298251830fe965a63f6cd3da60b"}
{"id": "meca500_programming_manual_4609", "text": "\u2013 e: enabled (1) or disabled (0).", "source": "meca500_programming_manual", "chunk_index": 4609, "length": 33, "hash": "a3589c4843f251036d9b5eddc7cb7d3e"}
{"id": "meca500_programming_manual_4610", "text": "e: enabled (1) or disabled (0).", "source": "meca500_programming_manual", "chunk_index": 4610, "length": 31, "hash": "43ac149c8b7a4599bc8acd37b12507d9"}
{"id": "meca500_programming_manual_4611", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4611, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4612", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4612, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4613", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4613, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4614", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4614, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4615", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4615, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4616", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4616, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4617", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4617, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4618", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4618, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4619", "text": "the command GetAutoConf\nIn cyclic protocols,\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4619, "length": 98, "hash": "21b66a52f0eedf2ae4a17cf2da66fef7"}
{"id": "meca500_programming_manual_4620", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4620, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4621", "text": "20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4621, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "meca500_programming_manual_4622", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4622, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4623", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4623, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4624", "text": "This command returns the state of the automatic turn configuration selection, which can be\ninfluenced by the SetAutoConfTurn (page 150) and SetConfTurn (page 159) commands.", "source": "meca500_programming_manual", "chunk_index": 4624, "length": 172, "hash": "06e483e55f4dfb19f665f9781eb93bc4"}
{"id": "meca500_programming_manual_4625", "text": "This command returns the state of the automatic turn configuration selection, which can be\ninfluenced by the", "source": "meca500_programming_manual", "chunk_index": 4625, "length": 108, "hash": "61bd07701ad9c0303237be7f3b6cecb9"}
{"id": "meca500_programming_manual_4626", "text": "(page 159) commands.", "source": "meca500_programming_manual", "chunk_index": 4626, "length": 20, "hash": "751d02deef11dbf67d86ba1fe1739f50"}
{"id": "meca500_programming_manual_4627", "text": "\u2013 e: enabled (1) or disabled (0).", "source": "meca500_programming_manual", "chunk_index": 4627, "length": 33, "hash": "a3589c4843f251036d9b5eddc7cb7d3e"}
{"id": "meca500_programming_manual_4628", "text": "e: enabled (1) or disabled (0).", "source": "meca500_programming_manual", "chunk_index": 4628, "length": 31, "hash": "43ac149c8b7a4599bc8acd37b12507d9"}
{"id": "meca500_programming_manual_4629", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4629, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4630", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4630, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4631", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4631, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4632", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4632, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4633", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4633, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4634", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4634, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4635", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4635, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4636", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4636, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4637", "text": "In cyclic protocols,\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4637, "length": 74, "hash": "8005dff934f9e599f124ac3ba9b27a77"}
{"id": "meca500_programming_manual_4638", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4638, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4639", "text": "20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4639, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "meca500_programming_manual_4640", "text": "the command GetAutoConfTurn (page 227)", "source": "meca500_programming_manual", "chunk_index": 4640, "length": 38, "hash": "3624cfd7116fa961d4da160d43914584"}
{"id": "meca500_programming_manual_4641", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4641, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4642", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4642, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4643", "text": "This command returns the blending percentage, which is set using the SetBlending (page 151)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 4643, "length": 100, "hash": "c86a3721058f23100e3c0ed484273241"}
{"id": "meca500_programming_manual_4644", "text": "This command returns the blending percentage, which is set using the", "source": "meca500_programming_manual", "chunk_index": 4644, "length": 68, "hash": "3770c4e52119421a548314b949063437"}
{"id": "meca500_programming_manual_4645", "text": "\u2013 p: blending percentage, ranging from 0 (blending disabled) to 100.", "source": "meca500_programming_manual", "chunk_index": 4645, "length": 68, "hash": "44b6cd0477a5dd6e88e0e65790482bd7"}
{"id": "meca500_programming_manual_4646", "text": "p: blending percentage, ranging from 0 (blending disabled) to 100.", "source": "meca500_programming_manual", "chunk_index": 4646, "length": 66, "hash": "e4a65f6ed4f89d0fd06e79efcf69c29c"}
{"id": "meca500_programming_manual_4647", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4647, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4648", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4648, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4649", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4649, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4650", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4650, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4651", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4651, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4652", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4652, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4653", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4653, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4654", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4654, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4655", "text": "In cyclic protocols,\nDynamicDataTypeID 21. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4655, "length": 74, "hash": "cbd5234dd31fd04263e59a79c041df82"}
{"id": "meca500_programming_manual_4656", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4656, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4657", "text": "21. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4657, "length": 35, "hash": "a6e248301b89dc2689c1fdbbbab9b1f5"}
{"id": "meca500_programming_manual_4658", "text": "the command GetBlending (page 228)", "source": "meca500_programming_manual", "chunk_index": 4658, "length": 34, "hash": "259916167807ee558254ef2035276697"}
{"id": "meca500_programming_manual_4659", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4659, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4660", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4660, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4661", "text": "This command returns the state of the optional robot calibration, configured using the\nSetCalibrationCfg (page 199) command.", "source": "meca500_programming_manual", "chunk_index": 4661, "length": 124, "hash": "970f2057cb5f27e23224b83a83e81ec4"}
{"id": "meca500_programming_manual_4662", "text": "This command returns the state of the optional robot calibration, configured using the", "source": "meca500_programming_manual", "chunk_index": 4662, "length": 86, "hash": "f0d8e487b4d9e79eb4c900f6c3180838"}
{"id": "meca500_programming_manual_4663", "text": "\u2013 e: enabled (1) or disabled (0).", "source": "meca500_programming_manual", "chunk_index": 4663, "length": 33, "hash": "a3589c4843f251036d9b5eddc7cb7d3e"}
{"id": "meca500_programming_manual_4664", "text": "e: enabled (1) or disabled (0).", "source": "meca500_programming_manual", "chunk_index": 4664, "length": 31, "hash": "43ac149c8b7a4599bc8acd37b12507d9"}
{"id": "meca500_programming_manual_4665", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4665, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4666", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4666, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4667", "text": "In cyclic protocols,\nDynamicDataTypeID 30. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4667, "length": 74, "hash": "8ec271a9ec77999ad8c6d9b52efc27a6"}
{"id": "meca500_programming_manual_4668", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4668, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4669", "text": "30. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4669, "length": 35, "hash": "bb51f1b1cf33b5dda6f3df30dd5db2cc"}
{"id": "meca500_programming_manual_4670", "text": "the command GetCalibrationCfg (page 229)", "source": "meca500_programming_manual", "chunk_index": 4670, "length": 40, "hash": "bbf1ad0625debd51d4a1055a75cb33b5"}
{"id": "meca500_programming_manual_4671", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4671, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4672", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4672, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4673", "text": "This command returns the desired limit for the acceleration of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the SetCartAcc (page 152)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 4673, "length": 183, "hash": "9e777dd3644599426074f161f67f1e86"}
{"id": "meca500_programming_manual_4674", "text": "This command returns the desired limit for the acceleration of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the", "source": "meca500_programming_manual", "chunk_index": 4674, "length": 152, "hash": "d48f869473fca5cbae91cb271c1db585"}
{"id": "meca500_programming_manual_4675", "text": "\u2013 p: percentage of the maximum acceleration of the TRF.", "source": "meca500_programming_manual", "chunk_index": 4675, "length": 55, "hash": "df43e92f064dd968da67ef4f9d029d88"}
{"id": "meca500_programming_manual_4676", "text": "p: percentage of the maximum acceleration of the TRF.", "source": "meca500_programming_manual", "chunk_index": 4676, "length": 53, "hash": "d059aab81c1b12ab67ba538e531d1a99"}
{"id": "meca500_programming_manual_4677", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4677, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4678", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4678, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4679", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4679, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4680", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4680, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4681", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4681, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4682", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4682, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4683", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4683, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4684", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4684, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4685", "text": "In cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4685, "length": 74, "hash": "26cebf05b0bd99d00f56801caade62d6"}
{"id": "meca500_programming_manual_4686", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4686, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4687", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4687, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_4688", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4688, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4689", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4689, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4690", "text": "This command returns the desired limit for the angular velocity of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the SetCartAngVel (page 153)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 4690, "length": 190, "hash": "b99f3a19fa6e765d40029c126ddb5b00"}
{"id": "meca500_programming_manual_4691", "text": "This command returns the desired limit for the angular velocity of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the", "source": "meca500_programming_manual", "chunk_index": 4691, "length": 156, "hash": "d1bc817870fcfd4a1944f7515ec8c9d6"}
{"id": "meca500_programming_manual_4692", "text": "\u2013 \u03c9: TRF angular velocity limit, in degrees per second (\u00b0/s).", "source": "meca500_programming_manual", "chunk_index": 4692, "length": 61, "hash": "124ac9c234561f319d0b2db451a27a74"}
{"id": "meca500_programming_manual_4693", "text": "\u03c9: TRF angular velocity limit, in degrees per second (\u00b0/s).", "source": "meca500_programming_manual", "chunk_index": 4693, "length": 59, "hash": "61a15cd39f5fbf6e4df0f143a628bb83"}
{"id": "meca500_programming_manual_4694", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4694, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4695", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4695, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4696", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4696, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4697", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4697, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4698", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4698, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4699", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4699, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4700", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4700, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4701", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4701, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4702", "text": "In cyclic protocols,\nthe command GetCartAngVel\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4702, "length": 100, "hash": "3aaac515a30db983b7a8ec2a7f0a6eba"}
{"id": "meca500_programming_manual_4703", "text": "In cyclic protocols,\nthe command", "source": "meca500_programming_manual", "chunk_index": 4703, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "meca500_programming_manual_4704", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4704, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_4705", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4705, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4706", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4706, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4707", "text": "This command returns the desired Tool Center Point (TCP) velocity limit, configured using\nthe SetCartLinVel (page 154) command.", "source": "meca500_programming_manual", "chunk_index": 4707, "length": 127, "hash": "8b07ef225706b7d64459b8a286f5dee7"}
{"id": "meca500_programming_manual_4708", "text": "This command returns the desired Tool Center Point (TCP) velocity limit, configured using\nthe", "source": "meca500_programming_manual", "chunk_index": 4708, "length": 93, "hash": "9a13acc9a6ed36c00c8b9d143469fedb"}
{"id": "meca500_programming_manual_4709", "text": "\u2013 v: TCP velocity limit, in millimeters per second (mm/s).", "source": "meca500_programming_manual", "chunk_index": 4709, "length": 58, "hash": "7202e4153d49064fd4a35b59b0ac8c4f"}
{"id": "meca500_programming_manual_4710", "text": "v: TCP velocity limit, in millimeters per second (mm/s).", "source": "meca500_programming_manual", "chunk_index": 4710, "length": 56, "hash": "a87807222890a25cb41b103714688f83"}
{"id": "meca500_programming_manual_4711", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4711, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4712", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4712, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4713", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4713, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4714", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4714, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4715", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4715, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4716", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4716, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4717", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4717, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4718", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4718, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4719", "text": "the command GetCartLinVel\nIn cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4719, "length": 100, "hash": "ff0441e359d16e4384cc628f59ff2383"}
{"id": "meca500_programming_manual_4720", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4720, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4721", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4721, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_4722", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4722, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4723", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4723, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4724", "text": "This command returns the argument of the last executed SetCheckpoint (page 155).", "source": "meca500_programming_manual", "chunk_index": 4724, "length": 80, "hash": "fad6b125376e0d84b5cbd24144f958c6"}
{"id": "meca500_programming_manual_4725", "text": "This command returns the argument of the last executed", "source": "meca500_programming_manual", "chunk_index": 4725, "length": 54, "hash": "4f974e7cad0b23e2b14612de875069ad"}
{"id": "meca500_programming_manual_4726", "text": "\u2013 n: checkpoint number.", "source": "meca500_programming_manual", "chunk_index": 4726, "length": 23, "hash": "e5714d2046c58fd7b2e8e89f31fec0da"}
{"id": "meca500_programming_manual_4727", "text": "n: checkpoint number.", "source": "meca500_programming_manual", "chunk_index": 4727, "length": 21, "hash": "15813822cc6f0507efd07e1d427328fd"}
{"id": "meca500_programming_manual_4728", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4728, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4729", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4729, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4730", "text": "In cyclic protocols,\nCheckpointReached field of the MotionStatus section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 4730, "length": 89, "hash": "8e4ada89225ddd17caffff4dcabcc1dc"}
{"id": "meca500_programming_manual_4731", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4731, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4732", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 4732, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_4733", "text": "the command GetCheckpoint (page 233)", "source": "meca500_programming_manual", "chunk_index": 4733, "length": 36, "hash": "8e852db2af848673cc5c2b0d0566b7fe"}
{"id": "meca500_programming_manual_4734", "text": "is represented by the", "source": "meca500_programming_manual", "chunk_index": 4734, "length": 21, "hash": "4d61eff82bb5a750bdda2fdbfb20aa2e"}
{"id": "meca500_programming_manual_4735", "text": "is represented by the", "source": "meca500_programming_manual", "chunk_index": 4735, "length": 21, "hash": "4d61eff82bb5a750bdda2fdbfb20aa2e"}
{"id": "meca500_programming_manual_4736", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4736, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4737", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4737, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4738", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 4738, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_4739", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 4739, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_4740", "text": "Returns the id of the most recently discarded checkpoint (as posted with SetCheckpoint\n(page 155)).", "source": "meca500_programming_manual", "chunk_index": 4740, "length": 99, "hash": "8fb24d57686afba8cb0d6f7bf518b1d6"}
{"id": "meca500_programming_manual_4741", "text": "Returns the id of the most recently discarded checkpoint (as posted with", "source": "meca500_programming_manual", "chunk_index": 4741, "length": 72, "hash": "e191c479b826aee80da270841c05624f"}
{"id": "meca500_programming_manual_4742", "text": "Checkpoint can be discarded by ClearMotion (page 186), DeactivateRobot (page 188), by\nrobot entering error state or safety stop state.", "source": "meca500_programming_manual", "chunk_index": 4742, "length": 134, "hash": "4048192f730e882b5679323a6f5a644e"}
{"id": "meca500_programming_manual_4743", "text": "Checkpoint can be discarded by", "source": "meca500_programming_manual", "chunk_index": 4743, "length": 30, "hash": "83758b7c94d0abc29524752eb1d5e58f"}
{"id": "meca500_programming_manual_4744", "text": "(page 188), by\nrobot entering error state or safety stop state.", "source": "meca500_programming_manual", "chunk_index": 4744, "length": 63, "hash": "4eb9a3d8d0b88a7b9ba2e73459cf22c5"}
{"id": "meca500_programming_manual_4745", "text": "GetCheckpointDiscarded()", "source": "meca500_programming_manual", "chunk_index": 4745, "length": 24, "hash": "9cf8667e98cca8e1ad1a48d131455bcb"}
{"id": "meca500_programming_manual_4746", "text": "GetCheckpointDiscarded()", "source": "meca500_programming_manual", "chunk_index": 4746, "length": 24, "hash": "9cf8667e98cca8e1ad1a48d131455bcb"}
{"id": "meca500_programming_manual_4747", "text": "\u2013 n: most recently discarded checkpoint number.", "source": "meca500_programming_manual", "chunk_index": 4747, "length": 47, "hash": "dde32cd712b71e4e1d297b0c2c843a47"}
{"id": "meca500_programming_manual_4748", "text": "n: most recently discarded checkpoint number.", "source": "meca500_programming_manual", "chunk_index": 4748, "length": 45, "hash": "966487fe52121bfbe826f5aa3ab5ca13"}
{"id": "meca500_programming_manual_4749", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4749, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4750", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4750, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4751", "text": "In cyclic protocols, the command GetCheckpointDiscarded (page 234) is represented by the\nCheckpointDiscarded field of the MotionStatus section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 4751, "length": 159, "hash": "7914b760323998cdcc42e384656be32a"}
{"id": "meca500_programming_manual_4752", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 4752, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_4753", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 4753, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_4754", "text": "(page 234) is represented by the", "source": "meca500_programming_manual", "chunk_index": 4754, "length": 32, "hash": "3451af26f94624ca780cff30094bc711"}
{"id": "meca500_programming_manual_4755", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 4755, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_4756", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 4756, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_4757", "text": "GetCheckpointDiscarded", "source": "meca500_programming_manual", "chunk_index": 4757, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "meca500_programming_manual_4758", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4758, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4759", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4759, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4760", "text": "This command returns the desired posture configuration (see Section 3), or more precisely,\nthe posture configuration that will be applied to the next MovePose (page 147) or MoveLin*\ncommand in the motion queue. This configuration is either explicitly specified using the\nSetConf (page 157) command or automatically assigned when the SetAutoConf(0) (page 149)\ncommand is executed.", "source": "meca500_programming_manual", "chunk_index": 4760, "length": 379, "hash": "4638e709a99db17594c817c895e5dfed"}
{"id": "meca500_programming_manual_4761", "text": "This command returns the desired posture configuration (see Section 3), or more precisely,\nthe posture configuration that will be applied to the next", "source": "meca500_programming_manual", "chunk_index": 4761, "length": 149, "hash": "2e27754b58b56bf6346504988d830382"}
{"id": "meca500_programming_manual_4762", "text": "(page 147) or MoveLin*\ncommand in the motion queue. This configuration is either explicitly specified using the", "source": "meca500_programming_manual", "chunk_index": 4762, "length": 111, "hash": "dd153e602f5c19fcf9ccb305890ff21a"}
{"id": "meca500_programming_manual_4763", "text": "(page 157) command or automatically assigned when the", "source": "meca500_programming_manual", "chunk_index": 4763, "length": 53, "hash": "69cf20477b1f655111e93bc25dc1267f"}
{"id": "meca500_programming_manual_4764", "text": "(page 149)\ncommand is executed.", "source": "meca500_programming_manual", "chunk_index": 4764, "length": 31, "hash": "255ccf9a72916b6b03c36e9ed7e35d47"}
{"id": "meca500_programming_manual_4765", "text": "\u2022 [2029][cs, ce, cw]", "source": "meca500_programming_manual", "chunk_index": 4765, "length": 20, "hash": "80482311f79f8d50226316763a8439aa"}
{"id": "meca500_programming_manual_4766", "text": "\u2013 cs: shoulder configuration parameter, either -1 or 1\u2020;", "source": "meca500_programming_manual", "chunk_index": 4766, "length": 56, "hash": "67240add528eaae68afcf5fa1b07b079"}
{"id": "meca500_programming_manual_4767", "text": ": shoulder configuration parameter, either -1 or 1", "source": "meca500_programming_manual", "chunk_index": 4767, "length": 50, "hash": "de46e2843b1011f881617180391871b3"}
{"id": "meca500_programming_manual_4768", "text": "\u2013 ce: elbow configuration parameter, either -1 or 1\u2020;", "source": "meca500_programming_manual", "chunk_index": 4768, "length": 53, "hash": "14e708eaf8d55d76610704240e6a47d9"}
{"id": "meca500_programming_manual_4769", "text": ": elbow configuration parameter, either -1 or 1", "source": "meca500_programming_manual", "chunk_index": 4769, "length": 47, "hash": "58acf06ecc715e548e8df8ff9b5669a4"}
{"id": "meca500_programming_manual_4770", "text": "\u2013 cw: wrist configuration parameter, either -1 or 1\u2020.", "source": "meca500_programming_manual", "chunk_index": 4770, "length": 53, "hash": "2445fbadf771822e3cbbd49b453ce3d3"}
{"id": "meca500_programming_manual_4771", "text": ": wrist configuration parameter, either -1 or 1", "source": "meca500_programming_manual", "chunk_index": 4771, "length": 47, "hash": "7de5a440a431e6dc8190ba3bde498ef7"}
{"id": "meca500_programming_manual_4772", "text": "\u2020 If automatic posture configuration selection is enabled, each parameter\u2019s value is an\nasterisk, i.e., the response is [2029][*,*,*].", "source": "meca500_programming_manual", "chunk_index": 4772, "length": 134, "hash": "082c6d04493b18c8c62b43d81bad0ded"}
{"id": "meca500_programming_manual_4773", "text": "If automatic posture configuration selection is enabled, each parameter\u2019s value is an\nasterisk, i.e., the response is [2029][*,*,*].", "source": "meca500_programming_manual", "chunk_index": 4773, "length": 132, "hash": "2fdb325a9e5d2568790cba794f2195fe"}
{"id": "meca500_programming_manual_4774", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4774, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4775", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4775, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4776", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4776, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4777", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4777, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4778", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4778, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4779", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4779, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4780", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4780, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4781", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4781, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4782", "text": "In\nthe\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4782, "length": 60, "hash": "53e7c91a5af0ff2874fa35ea1a5f7dec"}
{"id": "meca500_programming_manual_4783", "text": "20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4783, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "meca500_programming_manual_4784", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4784, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4785", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4785, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4786", "text": "This command returns the desired turn configuration for the last joint (see Section 3), i.e.,\nthe turn configuration that will be applied to the next MovePose (page 147) or MoveLin*\ncommand in the motion queue. This is either the turn configuration explicitly specified\nusing the SetConfTurn (page 159) command or the one automatically assigned when the\nSetAutoConfTurn(0) (page 150) command was executed.", "source": "meca500_programming_manual", "chunk_index": 4786, "length": 405, "hash": "56b315a76d59a5a50b9eda4c6384d988"}
{"id": "meca500_programming_manual_4787", "text": "This command returns the desired turn configuration for the last joint (see Section 3), i.e.,\nthe turn configuration that will be applied to the next", "source": "meca500_programming_manual", "chunk_index": 4787, "length": 149, "hash": "b71461b77bd9e90d179ee021b2514a50"}
{"id": "meca500_programming_manual_4788", "text": "(page 147) or MoveLin*\ncommand in the motion queue. This is either the turn configuration explicitly specified\nusing the", "source": "meca500_programming_manual", "chunk_index": 4788, "length": 120, "hash": "fa7a3f34f9d47e7893066efdcc6f65e4"}
{"id": "meca500_programming_manual_4789", "text": "(page 159) command or the one automatically assigned when the", "source": "meca500_programming_manual", "chunk_index": 4789, "length": 61, "hash": "5f21734b85869bdfd1f694c019f31154"}
{"id": "meca500_programming_manual_4790", "text": "(page 150) command was executed.", "source": "meca500_programming_manual", "chunk_index": 4790, "length": 32, "hash": "881dc6ae121f637853d0bdac9342310c"}
{"id": "meca500_programming_manual_4791", "text": "\u2013 ct: turn configuration parameter, an integer or an asterisk\u2020.", "source": "meca500_programming_manual", "chunk_index": 4791, "length": 63, "hash": "2b1ee4cbcac38100cd919202f500ff85"}
{"id": "meca500_programming_manual_4792", "text": ": turn configuration parameter, an integer or an asterisk", "source": "meca500_programming_manual", "chunk_index": 4792, "length": 57, "hash": "7e9b75ade1f4f705bf71418cea38daf0"}
{"id": "meca500_programming_manual_4793", "text": "\u2020 If automatic turn configuration selection is enabled, the response is [2036][*].", "source": "meca500_programming_manual", "chunk_index": 4793, "length": 82, "hash": "bbe1152b00192e31695f593af8ffcad1"}
{"id": "meca500_programming_manual_4794", "text": "If automatic turn configuration selection is enabled, the response is [2036][*].", "source": "meca500_programming_manual", "chunk_index": 4794, "length": 80, "hash": "eb0b55e8bb44851b529f89529f3a433f"}
{"id": "meca500_programming_manual_4795", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4795, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4796", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4796, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4797", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4797, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4798", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4798, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4799", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4799, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4800", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4800, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4801", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4801, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4802", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4802, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4803", "text": "In cyclic protocols,\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4803, "length": 74, "hash": "8005dff934f9e599f124ac3ba9b27a77"}
{"id": "meca500_programming_manual_4804", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4804, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4805", "text": "20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4805, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "meca500_programming_manual_4806", "text": "the command GetConfTurn (page 236)", "source": "meca500_programming_manual", "chunk_index": 4806, "length": 34, "hash": "fdb7bb17385853cb07e350ad7d4d04f2"}
{"id": "meca500_programming_manual_4807", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4807, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4808", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4808, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4809", "text": "GetEthernetIpEnabled", "source": "meca500_programming_manual", "chunk_index": 4809, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "meca500_programming_manual_4810", "text": "GetEthernetIpEnabled", "source": "meca500_programming_manual", "chunk_index": 4810, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "meca500_programming_manual_4811", "text": "This command returns the state of the Ethernet/IP protocol. See the description of the\nEnableEtherNetIp (page 190) command for more details.", "source": "meca500_programming_manual", "chunk_index": 4811, "length": 140, "hash": "d493e1c0a57626a6893d63f2c695310d"}
{"id": "meca500_programming_manual_4812", "text": "This command returns the state of the Ethernet/IP protocol. See the description of the", "source": "meca500_programming_manual", "chunk_index": 4812, "length": 86, "hash": "98b75d1d02c052fc3b7fb6f37c53bef0"}
{"id": "meca500_programming_manual_4813", "text": "(page 190) command for more details.", "source": "meca500_programming_manual", "chunk_index": 4813, "length": 36, "hash": "59e11dd17b01d6b1e827ead51d442042"}
{"id": "meca500_programming_manual_4814", "text": "GetEthernetIpEnabled()", "source": "meca500_programming_manual", "chunk_index": 4814, "length": 22, "hash": "ba4528c09afa43da9822a39293133cc6"}
{"id": "meca500_programming_manual_4815", "text": "GetEthernetIpEnabled()", "source": "meca500_programming_manual", "chunk_index": 4815, "length": 22, "hash": "ba4528c09afa43da9822a39293133cc6"}
{"id": "meca500_programming_manual_4816", "text": "\u2013 e: 0, 1 or 2 as defined in the description of the EnableEtherNetIp (page 190)", "source": "meca500_programming_manual", "chunk_index": 4816, "length": 79, "hash": "4820f07fb6d5377841da347e0f292dc8"}
{"id": "meca500_programming_manual_4817", "text": "e: 0, 1 or 2 as defined in the description of the", "source": "meca500_programming_manual", "chunk_index": 4817, "length": 49, "hash": "3ca07492069a05bda4e9c27b63e9ce17"}
{"id": "meca500_programming_manual_4818", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4818, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4819", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4819, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4820", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4820, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4821", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4821, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4822", "text": "GetEthernetIpEnabled", "source": "meca500_programming_manual", "chunk_index": 4822, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "meca500_programming_manual_4823", "text": "GetEthernetIpEnabled", "source": "meca500_programming_manual", "chunk_index": 4823, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "meca500_programming_manual_4824", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4824, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4825", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4825, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4826", "text": "This command returns the version of the firmware installed on the robot.", "source": "meca500_programming_manual", "chunk_index": 4826, "length": 72, "hash": "d2743cb6288a27303b9b431652468771"}
{"id": "meca500_programming_manual_4827", "text": "This command returns the version of the firmware installed on the robot.", "source": "meca500_programming_manual", "chunk_index": 4827, "length": 72, "hash": "d2743cb6288a27303b9b431652468771"}
{"id": "meca500_programming_manual_4828", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4828, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4829", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4829, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4830", "text": "In cyclic protocols,\nDynamicDataTypeID 1. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4830, "length": 73, "hash": "94d643fbd55718e28b6df7be610656c5"}
{"id": "meca500_programming_manual_4831", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4831, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4832", "text": "1. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4832, "length": 34, "hash": "f3abb3fa23ae88a3ab4387e676480194"}
{"id": "meca500_programming_manual_4833", "text": "the command GetFwVersion (page 238)", "source": "meca500_programming_manual", "chunk_index": 4833, "length": 35, "hash": "983d642a9ab05a8329707f12c72940f6"}
{"id": "meca500_programming_manual_4834", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4834, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4835", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4835, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4836", "text": "This command returns the desired joint accelerations reduction factor, set using the\nSetJointAcc (page 161) command.", "source": "meca500_programming_manual", "chunk_index": 4836, "length": 116, "hash": "9dc2e0e753066728967f2067098ad60e"}
{"id": "meca500_programming_manual_4837", "text": "This command returns the desired joint accelerations reduction factor, set using the", "source": "meca500_programming_manual", "chunk_index": 4837, "length": 84, "hash": "a250e5421981abb5f4605849b84abc6f"}
{"id": "meca500_programming_manual_4838", "text": "\u2013 p: percentage of maximum joint accelerations.", "source": "meca500_programming_manual", "chunk_index": 4838, "length": 47, "hash": "bd11c27efc7712f961cf4b5282b77f3d"}
{"id": "meca500_programming_manual_4839", "text": "p: percentage of maximum joint accelerations.", "source": "meca500_programming_manual", "chunk_index": 4839, "length": 45, "hash": "a1fd51078ec8e128e0cb7614f25df809"}
{"id": "meca500_programming_manual_4840", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4840, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4841", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4841, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4842", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4842, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4843", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4843, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4844", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4844, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4845", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4845, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4846", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4846, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4847", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4847, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4848", "text": "In cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4848, "length": 74, "hash": "26cebf05b0bd99d00f56801caade62d6"}
{"id": "meca500_programming_manual_4849", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4849, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4850", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4850, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_4851", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4851, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4852", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4852, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4853", "text": "This command returns the current effective joint limits, i.e., the default joint limits or the user-\ndefined limits if applied using the SetJointLimits (page 203) command and enabled using the\nSetJointLimitsCfg (page 204) command.", "source": "meca500_programming_manual", "chunk_index": 4853, "length": 230, "hash": "c280738e1804c26a444da75aa5ac44f0"}
{"id": "meca500_programming_manual_4854", "text": "This command returns the current effective joint limits, i.e., the default joint limits or the user-\ndefined limits if applied using the", "source": "meca500_programming_manual", "chunk_index": 4854, "length": 136, "hash": "306855a1c63da37a185276c379855813"}
{"id": "meca500_programming_manual_4855", "text": "(page 203) command and enabled using the", "source": "meca500_programming_manual", "chunk_index": 4855, "length": 40, "hash": "2047b6d3b559658356943bd6ed2be38d"}
{"id": "meca500_programming_manual_4856", "text": "\u2022 n: joint number, an integer.", "source": "meca500_programming_manual", "chunk_index": 4856, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "meca500_programming_manual_4857", "text": "\u2022 n: joint number, an integer.", "source": "meca500_programming_manual", "chunk_index": 4857, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "meca500_programming_manual_4858", "text": "\u2022 [2090][n, qn,min, qn,max]", "source": "meca500_programming_manual", "chunk_index": 4858, "length": 27, "hash": "70b3d256df0eb8ac90dff3609ae060a6"}
{"id": "meca500_programming_manual_4859", "text": "\u2013 n: joint number, an integer;", "source": "meca500_programming_manual", "chunk_index": 4859, "length": 30, "hash": "aade7efdc0d3344541b1e24102f3a68a"}
{"id": "meca500_programming_manual_4860", "text": "n: joint number, an integer;", "source": "meca500_programming_manual", "chunk_index": 4860, "length": 28, "hash": "8b231fe5e5c0ef299f3d3c0a31cfebe6"}
{"id": "meca500_programming_manual_4861", "text": "\u2013 qn,min: lower joint limit, in degrees;", "source": "meca500_programming_manual", "chunk_index": 4861, "length": 40, "hash": "d20716aefb08b2ba0830458438829030"}
{"id": "meca500_programming_manual_4862", "text": ": lower joint limit, in degrees;", "source": "meca500_programming_manual", "chunk_index": 4862, "length": 32, "hash": "65b436f58366f5688759b280a582df00"}
{"id": "meca500_programming_manual_4863", "text": "\u2013 qn,max: upper joint limit, in degrees.", "source": "meca500_programming_manual", "chunk_index": 4863, "length": 40, "hash": "189eb4d907f28092edfa67a6033b4474"}
{"id": "meca500_programming_manual_4864", "text": ": upper joint limit, in degrees.", "source": "meca500_programming_manual", "chunk_index": 4864, "length": 32, "hash": "66642280a5874413ca0dc282304a82cf"}
{"id": "meca500_programming_manual_4865", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4865, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4866", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4866, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4867", "text": "In cyclic protocols,\nDynamicDataTypeID 14 and 15. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4867, "length": 81, "hash": "0d8a57eeac188c174e8017129d46753a"}
{"id": "meca500_programming_manual_4868", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4868, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4869", "text": "14 and 15. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4869, "length": 42, "hash": "8809bbd76b33ad5a2edea9bfbd19c074"}
{"id": "meca500_programming_manual_4870", "text": "the command GetJointLimits", "source": "meca500_programming_manual", "chunk_index": 4870, "length": 26, "hash": "505a9bdfefa9966ca843c4606596dfeb"}
{"id": "meca500_programming_manual_4871", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4871, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4872", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4872, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4873", "text": "This command returns the status of\nSetJointLimitsCfg (page 204).", "source": "meca500_programming_manual", "chunk_index": 4873, "length": 64, "hash": "e1125134f3f4e1454762c48320b9d36b"}
{"id": "meca500_programming_manual_4874", "text": "This command returns the status of", "source": "meca500_programming_manual", "chunk_index": 4874, "length": 34, "hash": "977df76d47d8676f621fdd15e63341f2"}
{"id": "meca500_programming_manual_4875", "text": "the user-enabled joint", "source": "meca500_programming_manual", "chunk_index": 4875, "length": 22, "hash": "0faad244dea5a4e1a8e9f5bd75d9e479"}
{"id": "meca500_programming_manual_4876", "text": "the user-enabled joint", "source": "meca500_programming_manual", "chunk_index": 4876, "length": 22, "hash": "0faad244dea5a4e1a8e9f5bd75d9e479"}
{"id": "meca500_programming_manual_4877", "text": "limits, defined by the", "source": "meca500_programming_manual", "chunk_index": 4877, "length": 22, "hash": "8b932f0bfe207a74171126cd21bb24ac"}
{"id": "meca500_programming_manual_4878", "text": "limits, defined by the", "source": "meca500_programming_manual", "chunk_index": 4878, "length": 22, "hash": "8b932f0bfe207a74171126cd21bb24ac"}
{"id": "meca500_programming_manual_4879", "text": "\u2013 e: status, 1 for enabled, 0 for disabled.", "source": "meca500_programming_manual", "chunk_index": 4879, "length": 43, "hash": "1a4013043ece02d59c958267ed063fd6"}
{"id": "meca500_programming_manual_4880", "text": "e: status, 1 for enabled, 0 for disabled.", "source": "meca500_programming_manual", "chunk_index": 4880, "length": 41, "hash": "0a052de270604a95b61b66c815537306"}
{"id": "meca500_programming_manual_4881", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4881, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4882", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4882, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4883", "text": "In cyclic protocols,\nDynamicDataTypeID 11. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4883, "length": 74, "hash": "c098263104b8e6ed43f229b80e9e739d"}
{"id": "meca500_programming_manual_4884", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4884, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4885", "text": "11. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4885, "length": 35, "hash": "40e9dadfdbbd6f4c3964f3252c4f8ab6"}
{"id": "meca500_programming_manual_4886", "text": "the command GetJointLimitsCfg (page 241)", "source": "meca500_programming_manual", "chunk_index": 4886, "length": 40, "hash": "d09145727cd0dca84f55ff2fbe282c9e"}
{"id": "meca500_programming_manual_4887", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4887, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4888", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4888, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4889", "text": "This command returns the desired joint velocities reduction factor, set using the SetJointVel\n(page 163) command.", "source": "meca500_programming_manual", "chunk_index": 4889, "length": 113, "hash": "20a50305ad32a398461e059981a74d52"}
{"id": "meca500_programming_manual_4890", "text": "This command returns the desired joint velocities reduction factor, set using the", "source": "meca500_programming_manual", "chunk_index": 4890, "length": 81, "hash": "ea9b8314122c6e23564f91fc61413d16"}
{"id": "meca500_programming_manual_4891", "text": "\u2013 p: percentage of maximum joint velocities.", "source": "meca500_programming_manual", "chunk_index": 4891, "length": 44, "hash": "f90079e53e13d6598a4069a274f4dc6b"}
{"id": "meca500_programming_manual_4892", "text": "p: percentage of maximum joint velocities.", "source": "meca500_programming_manual", "chunk_index": 4892, "length": 42, "hash": "008c33477293f2987bc5cd1979e1c1c1"}
{"id": "meca500_programming_manual_4893", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4893, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4894", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4894, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4895", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4895, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4896", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4896, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4897", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4897, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4898", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4898, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4899", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4899, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4900", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4900, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4901", "text": "the\nIn cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4901, "length": 78, "hash": "dd583810cb98c0a29d0a33dac9787307"}
{"id": "meca500_programming_manual_4902", "text": "the\nIn cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4902, "length": 24, "hash": "be0b7a6074ab472510e0db7c1c5da3b3"}
{"id": "meca500_programming_manual_4903", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4903, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_4904", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4904, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4905", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4905, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4906", "text": "This command returns the desired joint velocities override, set using the SetJointVelLimit\n(page 165) command.", "source": "meca500_programming_manual", "chunk_index": 4906, "length": 110, "hash": "6fb2392194fe4864799bf07a577e0ed3"}
{"id": "meca500_programming_manual_4907", "text": "This command returns the desired joint velocities override, set using the", "source": "meca500_programming_manual", "chunk_index": 4907, "length": 73, "hash": "bc3ffb7416dfa2e2ed550ddf23fc65df"}
{"id": "meca500_programming_manual_4908", "text": "\u2013 p: percentage of maximum joint velocities override.", "source": "meca500_programming_manual", "chunk_index": 4908, "length": 53, "hash": "bd80db2097087ecae7379d488a8b39ca"}
{"id": "meca500_programming_manual_4909", "text": "p: percentage of maximum joint velocities override.", "source": "meca500_programming_manual", "chunk_index": 4909, "length": 51, "hash": "10b0d01390b007d177ddc7a2ab56d4dc"}
{"id": "meca500_programming_manual_4910", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4910, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4911", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4911, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4912", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4912, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4913", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4913, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4914", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4914, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4915", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4915, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4916", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4916, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4917", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4917, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4918", "text": "In cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4918, "length": 74, "hash": "26cebf05b0bd99d00f56801caade62d6"}
{"id": "meca500_programming_manual_4919", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4919, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4920", "text": "22. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4920, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "meca500_programming_manual_4921", "text": "the command GetJointVelLimit", "source": "meca500_programming_manual", "chunk_index": 4921, "length": 28, "hash": "cba499318463efa2b0cb90d630e9fb47"}
{"id": "meca500_programming_manual_4922", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4922, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4923", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4923, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4924", "text": "This command returns the factory default joint limits.", "source": "meca500_programming_manual", "chunk_index": 4924, "length": 54, "hash": "9f2e4fe9c4ddb50362224570422c3638"}
{"id": "meca500_programming_manual_4925", "text": "This command returns the factory default joint limits.", "source": "meca500_programming_manual", "chunk_index": 4925, "length": 54, "hash": "9f2e4fe9c4ddb50362224570422c3638"}
{"id": "meca500_programming_manual_4926", "text": "GetModelJointLimits(n)", "source": "meca500_programming_manual", "chunk_index": 4926, "length": 22, "hash": "20fec34843e94796a9eef6e33b10ba8e"}
{"id": "meca500_programming_manual_4927", "text": "GetModelJointLimits(n)", "source": "meca500_programming_manual", "chunk_index": 4927, "length": 22, "hash": "20fec34843e94796a9eef6e33b10ba8e"}
{"id": "meca500_programming_manual_4928", "text": "\u2022 n: joint number, an integer.", "source": "meca500_programming_manual", "chunk_index": 4928, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "meca500_programming_manual_4929", "text": "\u2022 n: joint number, an integer.", "source": "meca500_programming_manual", "chunk_index": 4929, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "meca500_programming_manual_4930", "text": "\u2022 [2113][n, qn,min, qn,max]", "source": "meca500_programming_manual", "chunk_index": 4930, "length": 27, "hash": "97c3a051c5b7e036d5d28ef7b69d7e7b"}
{"id": "meca500_programming_manual_4931", "text": "\u2013 n: joint number, an integer number between 1 and 6;", "source": "meca500_programming_manual", "chunk_index": 4931, "length": 53, "hash": "2810f5ecc4aca5b0c4ae0d4d1ad7c206"}
{"id": "meca500_programming_manual_4932", "text": "n: joint number, an integer number between 1 and 6;", "source": "meca500_programming_manual", "chunk_index": 4932, "length": 51, "hash": "2aaccd4806d0f7e21339184a24728854"}
{"id": "meca500_programming_manual_4933", "text": "\u2013 qn,min: lower joint limit, in degrees;", "source": "meca500_programming_manual", "chunk_index": 4933, "length": 40, "hash": "d20716aefb08b2ba0830458438829030"}
{"id": "meca500_programming_manual_4934", "text": ": lower joint limit, in degrees;", "source": "meca500_programming_manual", "chunk_index": 4934, "length": 32, "hash": "65b436f58366f5688759b280a582df00"}
{"id": "meca500_programming_manual_4935", "text": "\u2013 qn,max: upper joint limit, in degrees.", "source": "meca500_programming_manual", "chunk_index": 4935, "length": 40, "hash": "189eb4d907f28092edfa67a6033b4474"}
{"id": "meca500_programming_manual_4936", "text": ": upper joint limit, in degrees.", "source": "meca500_programming_manual", "chunk_index": 4936, "length": 32, "hash": "66642280a5874413ca0dc282304a82cf"}
{"id": "meca500_programming_manual_4937", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4937, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4938", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4938, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4939", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4939, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4940", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4940, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4941", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4941, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4942", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4942, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4943", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4943, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4944", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4944, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4945", "text": "In cyclic protocols,\nDynamicDataTypeID 12 and 13. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4945, "length": 81, "hash": "7654f11e94afbaa6fb90ce9f8c915e21"}
{"id": "meca500_programming_manual_4946", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4946, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4947", "text": "12 and 13. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4947, "length": 42, "hash": "671bfbf560c1b3d02b2869873716db62"}
{"id": "meca500_programming_manual_4948", "text": "the command GetModelJointLimits (page 244) is represented by", "source": "meca500_programming_manual", "chunk_index": 4948, "length": 60, "hash": "dd401707a0be682dfc23c2b9108db5de"}
{"id": "meca500_programming_manual_4949", "text": "(page 244) is represented by", "source": "meca500_programming_manual", "chunk_index": 4949, "length": 28, "hash": "f932019f1c243a5336e95f2e9d803f4c"}
{"id": "meca500_programming_manual_4950", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4950, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4951", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4951, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4952", "text": "GetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4952, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "meca500_programming_manual_4953", "text": "GetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4953, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "meca500_programming_manual_4954", "text": "This command returns the time interval at which real-time feedback from the robot is sent\nover TCP port 10001.", "source": "meca500_programming_manual", "chunk_index": 4954, "length": 110, "hash": "f5072bda032ec32b401115a108e10128"}
{"id": "meca500_programming_manual_4955", "text": "This command returns the time interval at which real-time feedback from the robot is sent\nover TCP port 10001.", "source": "meca500_programming_manual", "chunk_index": 4955, "length": 110, "hash": "f5072bda032ec32b401115a108e10128"}
{"id": "meca500_programming_manual_4956", "text": "GetMonitoringInterval()", "source": "meca500_programming_manual", "chunk_index": 4956, "length": 23, "hash": "6fa5dd7a819cbd25385fd1e5115f6d75"}
{"id": "meca500_programming_manual_4957", "text": "GetMonitoringInterval()", "source": "meca500_programming_manual", "chunk_index": 4957, "length": 23, "hash": "6fa5dd7a819cbd25385fd1e5115f6d75"}
{"id": "meca500_programming_manual_4958", "text": "\u2013 t: time interval, in seconds.", "source": "meca500_programming_manual", "chunk_index": 4958, "length": 31, "hash": "e4b069951a4f20b4fd663421eaa6b60e"}
{"id": "meca500_programming_manual_4959", "text": "t: time interval, in seconds.", "source": "meca500_programming_manual", "chunk_index": 4959, "length": 29, "hash": "ee67a5f9fee1e2ffe97510c3fe002ec6"}
{"id": "meca500_programming_manual_4960", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4960, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4961", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 4961, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_4962", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4962, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4963", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 4963, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_4964", "text": "GetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4964, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "meca500_programming_manual_4965", "text": "GetMonitoringInterval", "source": "meca500_programming_manual", "chunk_index": 4965, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "meca500_programming_manual_4966", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4966, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4967", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4967, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4968", "text": "This command returns the default duration set by the SetMoveDuration (page 167) command.", "source": "meca500_programming_manual", "chunk_index": 4968, "length": 88, "hash": "331d6b967cb8a8b11504125bd0a1cfa6"}
{"id": "meca500_programming_manual_4969", "text": "This command returns the default duration set by the", "source": "meca500_programming_manual", "chunk_index": 4969, "length": 52, "hash": "e0bb02309866b0cbb86665a0801b4015"}
{"id": "meca500_programming_manual_4970", "text": "\u2013 t: duration for time-based moves.", "source": "meca500_programming_manual", "chunk_index": 4970, "length": 35, "hash": "001aa2e18b5111cff1df98db3116cd3b"}
{"id": "meca500_programming_manual_4971", "text": "t: duration for time-based moves.", "source": "meca500_programming_manual", "chunk_index": 4971, "length": 33, "hash": "a98676bf0af599f30029bdce225576af"}
{"id": "meca500_programming_manual_4972", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4972, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4973", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4973, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4974", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4974, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4975", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4975, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4976", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4976, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4977", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4977, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4978", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4978, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4979", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4979, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_4980", "text": "In cyclic protocols,\nDynamicDataTypeID 29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4980, "length": 74, "hash": "f55f9912f68fbed29c4cd21bb36da8bc"}
{"id": "meca500_programming_manual_4981", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 4981, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_4982", "text": "29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 4982, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "meca500_programming_manual_4983", "text": "the command GetMoveDuration (page 246)", "source": "meca500_programming_manual", "chunk_index": 4983, "length": 38, "hash": "4bae99fc0c524d01d286208e68f1c870"}
{"id": "meca500_programming_manual_4984", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4984, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4985", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 4985, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_4986", "text": "This command returns the severity of the response when a move command cannot meet the\ndesired duration set by the SetMoveDuration (page 167) command, in time-based move mode.", "source": "meca500_programming_manual", "chunk_index": 4986, "length": 174, "hash": "47a0160e1f8815eb71e0da6fdf276882"}
{"id": "meca500_programming_manual_4987", "text": "This command returns the severity of the response when a move command cannot meet the\ndesired duration set by the", "source": "meca500_programming_manual", "chunk_index": 4987, "length": 113, "hash": "127782aaa7aad355e48e7b2e7bd71431"}
{"id": "meca500_programming_manual_4988", "text": "(page 167) command, in time-based move mode.", "source": "meca500_programming_manual", "chunk_index": 4988, "length": 44, "hash": "dcd96764f7e6ddd9027df3e85d1eb158"}
{"id": "meca500_programming_manual_4989", "text": "GetMoveDurationCfg()", "source": "meca500_programming_manual", "chunk_index": 4989, "length": 20, "hash": "45565ac8d726002f7349eb8769495a52"}
{"id": "meca500_programming_manual_4990", "text": "GetMoveDurationCfg()", "source": "meca500_programming_manual", "chunk_index": 4990, "length": 20, "hash": "45565ac8d726002f7349eb8769495a52"}
{"id": "meca500_programming_manual_4991", "text": "\u2013 s: 0 for silent mode, 1 for generating a warning message, 4 for generating an error.", "source": "meca500_programming_manual", "chunk_index": 4991, "length": 86, "hash": "a9da37528b7d35ba93f18119b510828b"}
{"id": "meca500_programming_manual_4992", "text": "s: 0 for silent mode, 1 for generating a warning message, 4 for generating an error.", "source": "meca500_programming_manual", "chunk_index": 4992, "length": 84, "hash": "4a507f973ee19cf92df91fc5719c7dd7"}
{"id": "meca500_programming_manual_4993", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4993, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_4994", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 4994, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_4995", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 4995, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_4996", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 4996, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_4997", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4997, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4998", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 4998, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_4999", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 4999, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5000", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5000, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5001", "text": "In cyclic protocols,\nDynamicDataTypeID 29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5001, "length": 74, "hash": "f55f9912f68fbed29c4cd21bb36da8bc"}
{"id": "meca500_programming_manual_5002", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5002, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5003", "text": "29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5003, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "meca500_programming_manual_5004", "text": "the command GetMoveDurationCfg (page 247) is represented by", "source": "meca500_programming_manual", "chunk_index": 5004, "length": 59, "hash": "6dbeed13171296468622309384c1aff6"}
{"id": "meca500_programming_manual_5005", "text": "(page 247) is represented by", "source": "meca500_programming_manual", "chunk_index": 5005, "length": 28, "hash": "d4ab9db68f1f86b294212992b4099f9e"}
{"id": "meca500_programming_manual_5006", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5006, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5007", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5007, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5008", "text": "GetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 5008, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "meca500_programming_manual_5009", "text": "GetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 5009, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "meca500_programming_manual_5010", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 5010, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_5011", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 5011, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_5012", "text": "In cyclic protocols, the commands GetMoveJumpApproachVel (page 248) is represented by\nDynamicDataTypeID 28. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5012, "length": 139, "hash": "6c7c5b5ef833c12732c5e6de116ad45a"}
{"id": "meca500_programming_manual_5013", "text": "In cyclic protocols, the commands", "source": "meca500_programming_manual", "chunk_index": 5013, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "meca500_programming_manual_5014", "text": "GetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 5014, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "meca500_programming_manual_5015", "text": "(page 248) is represented by", "source": "meca500_programming_manual", "chunk_index": 5015, "length": 28, "hash": "cce6d7b1852048b28e2f5acadd6fd5f1"}
{"id": "meca500_programming_manual_5016", "text": "28. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5016, "length": 35, "hash": "db6b1e9310fb43fac603ab769969987d"}
{"id": "meca500_programming_manual_5017", "text": "GetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 5017, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "meca500_programming_manual_5018", "text": "GetMoveJumpApproachVel", "source": "meca500_programming_manual", "chunk_index": 5018, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "meca500_programming_manual_5019", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5019, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5020", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5020, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5021", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 5021, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_5022", "text": "This command is available only on our SCARA robots.", "source": "meca500_programming_manual", "chunk_index": 5022, "length": 51, "hash": "43b0d8d3cd8333164c760b12cabf3eae"}
{"id": "meca500_programming_manual_5023", "text": "In cyclic protocols, the commands GetMoveJumpHeight (page 249) is represented by\nDynamicDataTypeID 27. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5023, "length": 134, "hash": "1617130dfab72fd3105ff4edc06f3c58"}
{"id": "meca500_programming_manual_5024", "text": "In cyclic protocols, the commands", "source": "meca500_programming_manual", "chunk_index": 5024, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "meca500_programming_manual_5025", "text": "(page 249) is represented by", "source": "meca500_programming_manual", "chunk_index": 5025, "length": 28, "hash": "96327b243cdf9806e99642860a17d265"}
{"id": "meca500_programming_manual_5026", "text": "27. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5026, "length": 35, "hash": "412c3128ed19287dd6c35576084e5175"}
{"id": "meca500_programming_manual_5027", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5027, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5028", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5028, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5029", "text": "This command returns the default move mode set by the SetMoveMode (page 172) command.", "source": "meca500_programming_manual", "chunk_index": 5029, "length": 85, "hash": "d01aac4de0ffe2f043832a5b7f78fec6"}
{"id": "meca500_programming_manual_5030", "text": "This command returns the default move mode set by the", "source": "meca500_programming_manual", "chunk_index": 5030, "length": 53, "hash": "c68feaa553f5f3f2a8d0e47791b92518"}
{"id": "meca500_programming_manual_5031", "text": "\u2013 m: 0 for velocity-based and 1 for time-based move mode.", "source": "meca500_programming_manual", "chunk_index": 5031, "length": 57, "hash": "186a676ae2e75662293dd1d6aecb3ffe"}
{"id": "meca500_programming_manual_5032", "text": "m: 0 for velocity-based and 1 for time-based move mode.", "source": "meca500_programming_manual", "chunk_index": 5032, "length": 55, "hash": "eb73bd90bfa8b0073b3724cf4134218d"}
{"id": "meca500_programming_manual_5033", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5033, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5034", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5034, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5035", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5035, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5036", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5036, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5037", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5037, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5038", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5038, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5039", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5039, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5040", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5040, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5041", "text": "In cyclic protocols,\nDynamicDataTypeID 29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5041, "length": 74, "hash": "f55f9912f68fbed29c4cd21bb36da8bc"}
{"id": "meca500_programming_manual_5042", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5042, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5043", "text": "29. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5043, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "meca500_programming_manual_5044", "text": "the command GetMoveMode (page 250)", "source": "meca500_programming_manual", "chunk_index": 5044, "length": 34, "hash": "18aa984d6124cac2b19404cf087ae7ce"}
{"id": "meca500_programming_manual_5045", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5045, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5046", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5046, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5047", "text": "This command returns the parameters affecting the network connection.", "source": "meca500_programming_manual", "chunk_index": 5047, "length": 69, "hash": "00b6be390173f42b97a9dc8b4a91203b"}
{"id": "meca500_programming_manual_5048", "text": "This command returns the parameters affecting the network connection.", "source": "meca500_programming_manual", "chunk_index": 5048, "length": 69, "hash": "00b6be390173f42b97a9dc8b4a91203b"}
{"id": "meca500_programming_manual_5049", "text": "\u2022 [2119][n1, n2, n3, n4, n5, n6]", "source": "meca500_programming_manual", "chunk_index": 5049, "length": 32, "hash": "5235fa20024c5911dca12e9a1adf23a6"}
{"id": "meca500_programming_manual_5050", "text": "\u2013 n1: number of successive keep-alive TCP packets that can be lost before the TCP", "source": "meca500_programming_manual", "chunk_index": 5050, "length": 81, "hash": "fc8124726403db45cc9e18d8149d9e29"}
{"id": "meca500_programming_manual_5051", "text": ": number of successive keep-alive TCP packets that can be lost before the TCP", "source": "meca500_programming_manual", "chunk_index": 5051, "length": 77, "hash": "128ad9f4ef7a296cb678038890f9443b"}
{"id": "meca500_programming_manual_5052", "text": "connection is closed, where n1 is an integer number ranging from 0 to 60;", "source": "meca500_programming_manual", "chunk_index": 5052, "length": 73, "hash": "ef3f2adf268480c8c22024a12077952b"}
{"id": "meca500_programming_manual_5053", "text": "connection is closed, where n", "source": "meca500_programming_manual", "chunk_index": 5053, "length": 29, "hash": "305e641e708f46e27b21938b9f819dcd"}
{"id": "meca500_programming_manual_5054", "text": "is an integer number ranging from 0 to 60;", "source": "meca500_programming_manual", "chunk_index": 5054, "length": 42, "hash": "8fb71a32872e82955ac5ff0bc21d2b41"}
{"id": "meca500_programming_manual_5055", "text": "\u2013 n2, n3, n4, n5, n6: currently not used.", "source": "meca500_programming_manual", "chunk_index": 5055, "length": 41, "hash": "d8f8aba9af1a552bf204c0d64d34abe3"}
{"id": "meca500_programming_manual_5056", "text": ": currently not used.", "source": "meca500_programming_manual", "chunk_index": 5056, "length": 21, "hash": "37b11a10a979f55bffa028056fe071d7"}
{"id": "meca500_programming_manual_5057", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5057, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5058", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5058, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5059", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5059, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5060", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5060, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5061", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5061, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5062", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5062, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5063", "text": "This command returns the severity level set with the SetPStop2Cfg (page 208) command.", "source": "meca500_programming_manual", "chunk_index": 5063, "length": 85, "hash": "4cf1ae7d60b3b8893d5ae6c0474bf20d"}
{"id": "meca500_programming_manual_5064", "text": "This command returns the severity level set with the", "source": "meca500_programming_manual", "chunk_index": 5064, "length": 52, "hash": "63a86fe7a3c2339383de6822d321ecf0"}
{"id": "meca500_programming_manual_5065", "text": "\u2013 2, for PauseMotion;", "source": "meca500_programming_manual", "chunk_index": 5065, "length": 21, "hash": "d3830c84b5b68b2cb16b3bdbde0d0b26"}
{"id": "meca500_programming_manual_5066", "text": "\u2013 3, for ClearMotion.", "source": "meca500_programming_manual", "chunk_index": 5066, "length": 21, "hash": "de3cce7626586899e94e55a5e52e88fc"}
{"id": "meca500_programming_manual_5067", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5067, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5068", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5068, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5069", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5069, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5070", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5070, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5071", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5071, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5072", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5072, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5073", "text": "This command returns the configured payload mass and center of mass, as set using the\nSetPayload (page 173) command.", "source": "meca500_programming_manual", "chunk_index": 5073, "length": 116, "hash": "9245737e2a526b1f9c4a8112a2bbe283"}
{"id": "meca500_programming_manual_5074", "text": "This command returns the configured payload mass and center of mass, as set using the", "source": "meca500_programming_manual", "chunk_index": 5074, "length": 85, "hash": "e4af5ebb9a14d71b25a73ef525c85e12"}
{"id": "meca500_programming_manual_5075", "text": "\u2022 [2192][m, cx,cy,cz]", "source": "meca500_programming_manual", "chunk_index": 5075, "length": 21, "hash": "1d43006e4700669aa365cbff5e335727"}
{"id": "meca500_programming_manual_5076", "text": "\u2013 m: The payload mass (in kilograms).", "source": "meca500_programming_manual", "chunk_index": 5076, "length": 37, "hash": "3b64d0bbb5f0f99aff897befe57464bb"}
{"id": "meca500_programming_manual_5077", "text": "m: The payload mass (in kilograms).", "source": "meca500_programming_manual", "chunk_index": 5077, "length": 35, "hash": "439cc50ce6c2d513fcf8a2e0baa5684a"}
{"id": "meca500_programming_manual_5078", "text": "\u2013 cx,cy,cz: The coordinates of the payload center of mass, relative to the robot\u2019s FRF", "source": "meca500_programming_manual", "chunk_index": 5078, "length": 86, "hash": "8f2ccffcc36a2bc262e0e38abb24770a"}
{"id": "meca500_programming_manual_5079", "text": ": The coordinates of the payload center of mass, relative to the robot\u2019s", "source": "meca500_programming_manual", "chunk_index": 5079, "length": 72, "hash": "212c5484584dae0476e4b54497e2988b"}
{"id": "meca500_programming_manual_5080", "text": "(page 357), in millimeters.", "source": "meca500_programming_manual", "chunk_index": 5080, "length": 27, "hash": "52dd6d037b101cc077d5d95a33ac21d3"}
{"id": "meca500_programming_manual_5081", "text": "(page 357), in millimeters.", "source": "meca500_programming_manual", "chunk_index": 5081, "length": 27, "hash": "52dd6d037b101cc077d5d95a33ac21d3"}
{"id": "meca500_programming_manual_5082", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5082, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5083", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5083, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5084", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5084, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5085", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5085, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5086", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5086, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5087", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5087, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5088", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5088, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5089", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5089, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5090", "text": "In cyclic protocols,\nDynamicDataTypeID 31. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5090, "length": 74, "hash": "522d17704fa5bc2e286eecffe363f51b"}
{"id": "meca500_programming_manual_5091", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5091, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5092", "text": "31. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5092, "length": 35, "hash": "ee348d1bc9974c288bd5b55d044894e3"}
{"id": "meca500_programming_manual_5093", "text": "the commands GetPayload (page 253)", "source": "meca500_programming_manual", "chunk_index": 5093, "length": 34, "hash": "7d6e19ba41d233d696749444f2360e62"}
{"id": "meca500_programming_manual_5094", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5094, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5095", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5095, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5096", "text": "This command returns the type (model) of the product.", "source": "meca500_programming_manual", "chunk_index": 5096, "length": 53, "hash": "cfb37c6b39e2348145b9468c039124c2"}
{"id": "meca500_programming_manual_5097", "text": "This command returns the type (model) of the product.", "source": "meca500_programming_manual", "chunk_index": 5097, "length": 53, "hash": "cfb37c6b39e2348145b9468c039124c2"}
{"id": "meca500_programming_manual_5098", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5098, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5099", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5099, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5100", "text": "In cyclic protocols,\nDynamicDataTypeID 2. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5100, "length": 73, "hash": "8f60a4beb4e1ce9bf5a35deb5f805ef1"}
{"id": "meca500_programming_manual_5101", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5101, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5102", "text": "2. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5102, "length": 34, "hash": "820ffeb2e2b5ca121ba4c2da658982cb"}
{"id": "meca500_programming_manual_5103", "text": "the commands GetProductType (page 254)", "source": "meca500_programming_manual", "chunk_index": 5103, "length": 38, "hash": "df9f227d721fa4f8eff51bcbd3cbb13c"}
{"id": "meca500_programming_manual_5104", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5104, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5105", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5105, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5106", "text": "This command returns the state of the PROFINET protocol. See the description of the\nEnableProfinet (page 191) command for more details.", "source": "meca500_programming_manual", "chunk_index": 5106, "length": 135, "hash": "b24967e7bf638376ba4991e768c51404"}
{"id": "meca500_programming_manual_5107", "text": "This command returns the state of the PROFINET protocol. See the description of the", "source": "meca500_programming_manual", "chunk_index": 5107, "length": 83, "hash": "2bc0421f212b540f433a41b075524aa0"}
{"id": "meca500_programming_manual_5108", "text": "(page 191) command for more details.", "source": "meca500_programming_manual", "chunk_index": 5108, "length": 36, "hash": "8656a0360aca85af201e8212a2767e19"}
{"id": "meca500_programming_manual_5109", "text": "GetProfinetEnabled()", "source": "meca500_programming_manual", "chunk_index": 5109, "length": 20, "hash": "f13f648389df08a518a1f6cd9424cea5"}
{"id": "meca500_programming_manual_5110", "text": "GetProfinetEnabled()", "source": "meca500_programming_manual", "chunk_index": 5110, "length": 20, "hash": "f13f648389df08a518a1f6cd9424cea5"}
{"id": "meca500_programming_manual_5111", "text": "\u2013 e: 0, 1 or 2 as defined in the description of the EnableProfinet (page 191) command.", "source": "meca500_programming_manual", "chunk_index": 5111, "length": 86, "hash": "44595462a4b50ec478fed7a096527670"}
{"id": "meca500_programming_manual_5112", "text": "e: 0, 1 or 2 as defined in the description of the", "source": "meca500_programming_manual", "chunk_index": 5112, "length": 49, "hash": "3ca07492069a05bda4e9c27b63e9ce17"}
{"id": "meca500_programming_manual_5113", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5113, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5114", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5114, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5115", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5115, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5116", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5116, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5117", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5117, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5118", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5118, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5119", "text": "GetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 5119, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "meca500_programming_manual_5120", "text": "GetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 5120, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "meca500_programming_manual_5121", "text": "This command returns the numerical codes of the responses that have been enabled using\nthe SetRealTimeMonitoring (page 209) command.", "source": "meca500_programming_manual", "chunk_index": 5121, "length": 132, "hash": "bba5c98573e3de048fdcd4e6d43d8c54"}
{"id": "meca500_programming_manual_5122", "text": "This command returns the numerical codes of the responses that have been enabled using\nthe", "source": "meca500_programming_manual", "chunk_index": 5122, "length": 90, "hash": "d7cf61c672973a394ab80b73d5565dd8"}
{"id": "meca500_programming_manual_5123", "text": "SetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 5123, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "meca500_programming_manual_5124", "text": "GetRealTimeMonitoring()", "source": "meca500_programming_manual", "chunk_index": 5124, "length": 23, "hash": "7c979e1107a3175503aa36b78d1fabe2"}
{"id": "meca500_programming_manual_5125", "text": "GetRealTimeMonitoring()", "source": "meca500_programming_manual", "chunk_index": 5125, "length": 23, "hash": "7c979e1107a3175503aa36b78d1fabe2"}
{"id": "meca500_programming_manual_5126", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5126, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5127", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5127, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5128", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5128, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5129", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5129, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5130", "text": "GetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 5130, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "meca500_programming_manual_5131", "text": "GetRealTimeMonitoring", "source": "meca500_programming_manual", "chunk_index": 5131, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "meca500_programming_manual_5132", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5132, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5133", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5133, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5134", "text": "This command returns a response of 1 if the robot has undergone our optional calibration\nservice, or 0 if it has not.", "source": "meca500_programming_manual", "chunk_index": 5134, "length": 117, "hash": "4ef43265bb3b08f2d23b3d5cd6325961"}
{"id": "meca500_programming_manual_5135", "text": "This command returns a response of 1 if the robot has undergone our optional calibration\nservice, or 0 if it has not.", "source": "meca500_programming_manual", "chunk_index": 5135, "length": 117, "hash": "4ef43265bb3b08f2d23b3d5cd6325961"}
{"id": "meca500_programming_manual_5136", "text": "GetRobotCalibrated()", "source": "meca500_programming_manual", "chunk_index": 5136, "length": 20, "hash": "d01136f5683a8fac72baae8445b88843"}
{"id": "meca500_programming_manual_5137", "text": "GetRobotCalibrated()", "source": "meca500_programming_manual", "chunk_index": 5137, "length": 20, "hash": "d01136f5683a8fac72baae8445b88843"}
{"id": "meca500_programming_manual_5138", "text": "\u2013 s: status (1 if the robot has been calibrated, 0 if it has not).", "source": "meca500_programming_manual", "chunk_index": 5138, "length": 66, "hash": "a73bd2a0e6bbf2d4616df01842475cdb"}
{"id": "meca500_programming_manual_5139", "text": "s: status (1 if the robot has been calibrated, 0 if it has not).", "source": "meca500_programming_manual", "chunk_index": 5139, "length": 64, "hash": "d6475fced04b041d62d5283a58a5dbcf"}
{"id": "meca500_programming_manual_5140", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5140, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5141", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5141, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5142", "text": "In cyclic protocols,\nDynamicDataTypeID 30. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5142, "length": 74, "hash": "8ec271a9ec77999ad8c6d9b52efc27a6"}
{"id": "meca500_programming_manual_5143", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5143, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5144", "text": "30. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5144, "length": 35, "hash": "bb51f1b1cf33b5dda6f3df30dd5db2cc"}
{"id": "meca500_programming_manual_5145", "text": "the command GetRobotCalibrated (page 257)", "source": "meca500_programming_manual", "chunk_index": 5145, "length": 41, "hash": "eacc12b1a28d3af3011c384d0293d2c9"}
{"id": "meca500_programming_manual_5146", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5146, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5147", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5147, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5148", "text": "This command returns the robot\u2019s name, set with the command SetRobotName (page 212).\nNote that the robot name is used as a host name when the robot\u2019s network configuration uses\nDHCP.", "source": "meca500_programming_manual", "chunk_index": 5148, "length": 182, "hash": "4052faf08b071bf9a5dc93193e0a35bb"}
{"id": "meca500_programming_manual_5149", "text": "This command returns the robot\u2019s name, set with the command", "source": "meca500_programming_manual", "chunk_index": 5149, "length": 59, "hash": "c32db76a4b4074bb1b7ad024be275e8c"}
{"id": "meca500_programming_manual_5150", "text": "(page 212).\nNote that the robot name is used as a host name when the robot\u2019s network configuration uses\nDHCP.", "source": "meca500_programming_manual", "chunk_index": 5150, "length": 109, "hash": "614f2f0f323116be2e0990a5f6da017a"}
{"id": "meca500_programming_manual_5151", "text": "\u2013 s: string containing the robot\u2019s name.", "source": "meca500_programming_manual", "chunk_index": 5151, "length": 40, "hash": "d4ee8c530f6f964ea9fe90afa13e9c10"}
{"id": "meca500_programming_manual_5152", "text": "s: string containing the robot\u2019s name.", "source": "meca500_programming_manual", "chunk_index": 5152, "length": 38, "hash": "d1211b257ff05b82eea2130e2385b477"}
{"id": "meca500_programming_manual_5153", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5153, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5154", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5154, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5155", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5155, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5156", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5156, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5157", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5157, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5158", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5158, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5159", "text": "This command returns the serial number of the robot, except for robots manufactured before\n2021. The serial number of all robots can also be found on the back of the robot\u2019s base.", "source": "meca500_programming_manual", "chunk_index": 5159, "length": 179, "hash": "6f893b5238bfc4cc2cf8b47403f1d954"}
{"id": "meca500_programming_manual_5160", "text": "This command returns the serial number of the robot, except for robots manufactured before\n2021. The serial number of all robots can also be found on the back of the robot\u2019s base.", "source": "meca500_programming_manual", "chunk_index": 5160, "length": 179, "hash": "6f893b5238bfc4cc2cf8b47403f1d954"}
{"id": "meca500_programming_manual_5161", "text": "\u2013 s: string containing the robot\u2019s serial number.", "source": "meca500_programming_manual", "chunk_index": 5161, "length": 49, "hash": "aa96dea49265a8869bcf4f597783d06f"}
{"id": "meca500_programming_manual_5162", "text": "s: string containing the robot\u2019s serial number.", "source": "meca500_programming_manual", "chunk_index": 5162, "length": 47, "hash": "b64906c1bff65ad49e4e138843f00dcf"}
{"id": "meca500_programming_manual_5163", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5163, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5164", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5164, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5165", "text": "In cyclic protocols,\nDynamicDataTypeID 3. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5165, "length": 73, "hash": "8a00161def9e3aea8c45d4625e6446ed"}
{"id": "meca500_programming_manual_5166", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5166, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5167", "text": "3. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5167, "length": 34, "hash": "10f70361631c760b8ba00ba1608f28e7"}
{"id": "meca500_programming_manual_5168", "text": "the commands GetRobotSerial", "source": "meca500_programming_manual", "chunk_index": 5168, "length": 27, "hash": "8a5bcbb7948088fc21568aec557f103d"}
{"id": "meca500_programming_manual_5169", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5169, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5170", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5170, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5171", "text": "This command returns the default simulation mode set using the SetSimModeCfg (page 214)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 5171, "length": 96, "hash": "a8628a41d9b09b6903640298ba4d9642"}
{"id": "meca500_programming_manual_5172", "text": "This command returns the default simulation mode set using the", "source": "meca500_programming_manual", "chunk_index": 5172, "length": 62, "hash": "1223c74bffaefe272fe71b730f384770"}
{"id": "meca500_programming_manual_5173", "text": "\u2013 m: 1 for normal (real-time) and 2 for fast simulation mode.", "source": "meca500_programming_manual", "chunk_index": 5173, "length": 61, "hash": "eebab4ffb228ffe4fcbee6e8282e7fb5"}
{"id": "meca500_programming_manual_5174", "text": "m: 1 for normal (real-time) and 2 for fast simulation mode.", "source": "meca500_programming_manual", "chunk_index": 5174, "length": 59, "hash": "a6f724a326a73351f17ad31e9efc7641"}
{"id": "meca500_programming_manual_5175", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5175, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5176", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5176, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5177", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5177, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5178", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5178, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5179", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5179, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5180", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5180, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5181", "text": "This command returns the time scaling percentage set using the SetTimeScaling (page 215)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 5181, "length": 97, "hash": "a94a21c917ee3b470302e2801c8ff358"}
{"id": "meca500_programming_manual_5182", "text": "This command returns the time scaling percentage set using the", "source": "meca500_programming_manual", "chunk_index": 5182, "length": 62, "hash": "5ee593c08a17c36df34d4253dcafd300"}
{"id": "meca500_programming_manual_5183", "text": "\u2013 p: current time scaling percentage.", "source": "meca500_programming_manual", "chunk_index": 5183, "length": 37, "hash": "44e1d6455425adde6771e11dff29285a"}
{"id": "meca500_programming_manual_5184", "text": "p: current time scaling percentage.", "source": "meca500_programming_manual", "chunk_index": 5184, "length": 35, "hash": "55fa6bf4b6bacb4be8423741b7022da5"}
{"id": "meca500_programming_manual_5185", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5185, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5186", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5186, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5187", "text": "In cyclic protocols,\nDynamicDataTypeID 54. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5187, "length": 74, "hash": "27efaa30a31c6d6e5e844b29d2c79e6b"}
{"id": "meca500_programming_manual_5188", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5188, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5189", "text": "54. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5189, "length": 35, "hash": "7616fdd239c42442f749345c2f037a10"}
{"id": "meca500_programming_manual_5190", "text": "the commands GetTimeScaling (page 261)", "source": "meca500_programming_manual", "chunk_index": 5190, "length": 38, "hash": "ea1c45825e9205493bef1e5fb4962fe4"}
{"id": "meca500_programming_manual_5191", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5191, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5192", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5192, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5193", "text": "Returns the current joint torque thresholds, as configured in the motion queue by the\ncommand SetTorqueLimits (page 175).", "source": "meca500_programming_manual", "chunk_index": 5193, "length": 121, "hash": "cc9df7c0a67540ccf60f4d456a38699b"}
{"id": "meca500_programming_manual_5194", "text": "Returns the current joint torque thresholds, as configured in the motion queue by the\ncommand", "source": "meca500_programming_manual", "chunk_index": 5194, "length": 93, "hash": "67bd1b6e175e93b6cb749aa1c0737c94"}
{"id": "meca500_programming_manual_5195", "text": "\u2022 [2161][\u03c41, \u03c42, \u03c43, \u03c44 , \u03c45, \u03c46]", "source": "meca500_programming_manual", "chunk_index": 5195, "length": 33, "hash": "7e6d5d04f419279201c09cf08bea010e"}
{"id": "meca500_programming_manual_5196", "text": "\u2013 \u03c4i: percentage of the maximum allowable torque that can be applied at motor i,", "source": "meca500_programming_manual", "chunk_index": 5196, "length": 80, "hash": "d40f9d730607efac8a8c97cd26a30a39"}
{"id": "meca500_programming_manual_5197", "text": ": percentage of the maximum allowable torque that can be applied at motor i,", "source": "meca500_programming_manual", "chunk_index": 5197, "length": 76, "hash": "c473ebdb068c7e483b14828d140c1c2d"}
{"id": "meca500_programming_manual_5198", "text": "where i = 1, 2, \u2026, 6 ranging from 0.001 to 100.", "source": "meca500_programming_manual", "chunk_index": 5198, "length": 47, "hash": "5aa2194651ea814d739a5bc89ca7b940"}
{"id": "meca500_programming_manual_5199", "text": "where i = 1, 2, \u2026, 6 ranging from 0.001 to 100.", "source": "meca500_programming_manual", "chunk_index": 5199, "length": 47, "hash": "5aa2194651ea814d739a5bc89ca7b940"}
{"id": "meca500_programming_manual_5200", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5200, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5201", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5201, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5202", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5202, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5203", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5203, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5204", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5204, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5205", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5205, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5206", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5206, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5207", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5207, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5208", "text": "In cyclic protocols,\nDynamicDataTypeID 25. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5208, "length": 74, "hash": "2602a88983d3f64a5a280e36ccc13b8c"}
{"id": "meca500_programming_manual_5209", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5209, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5210", "text": "25. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5210, "length": 35, "hash": "33d3724857e5675d9f6491dc1afe0cf8"}
{"id": "meca500_programming_manual_5211", "text": "the commands GetTorqueLimits (page 262)", "source": "meca500_programming_manual", "chunk_index": 5211, "length": 39, "hash": "1731ee1875b7bdaecc2f0c64c1617e25"}
{"id": "meca500_programming_manual_5212", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5212, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5213", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5213, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5214", "text": "This command returns the desired behavior of the robot when a joint torque exceeds the\nthresholds set by the SetTorqueLimits (page 175). This desired behavior is configured using\nthe SetTorqueLimitsCfg (page 177) command.", "source": "meca500_programming_manual", "chunk_index": 5214, "length": 221, "hash": "95fd19daea63cf6c98f2e75cfd92d09e"}
{"id": "meca500_programming_manual_5215", "text": "This command returns the desired behavior of the robot when a joint torque exceeds the\nthresholds set by the", "source": "meca500_programming_manual", "chunk_index": 5215, "length": 108, "hash": "cab1f08320a4cc5f4f2962ec151088fb"}
{"id": "meca500_programming_manual_5216", "text": "(page 175). This desired behavior is configured using\nthe", "source": "meca500_programming_manual", "chunk_index": 5216, "length": 57, "hash": "1ec5ea27d0c4937ebb5f0f313f670ba6"}
{"id": "meca500_programming_manual_5217", "text": "GetTorqueLimitsCfg()", "source": "meca500_programming_manual", "chunk_index": 5217, "length": 20, "hash": "cd62ab20bfa9f3881877db8363b81194"}
{"id": "meca500_programming_manual_5218", "text": "GetTorqueLimitsCfg()", "source": "meca500_programming_manual", "chunk_index": 5218, "length": 20, "hash": "cd62ab20bfa9f3881877db8363b81194"}
{"id": "meca500_programming_manual_5219", "text": "\u2013 l: an integer defining the torque limit event severity (see SetTorqueLimitsCfg", "source": "meca500_programming_manual", "chunk_index": 5219, "length": 80, "hash": "790cfe87552e1afa3640f00b29c4bcee"}
{"id": "meca500_programming_manual_5220", "text": "l: an integer defining the torque limit event severity (see", "source": "meca500_programming_manual", "chunk_index": 5220, "length": 59, "hash": "55c17ecae2cf32d2047cc166a4e7dda5"}
{"id": "meca500_programming_manual_5221", "text": "\u2013 m: an integer defining the detection mode (see SetTorqueLimitsCfg (page 177)).", "source": "meca500_programming_manual", "chunk_index": 5221, "length": 80, "hash": "1d17d91221d170202d71099ab6d96e96"}
{"id": "meca500_programming_manual_5222", "text": "m: an integer defining the detection mode (see", "source": "meca500_programming_manual", "chunk_index": 5222, "length": 46, "hash": "f727b9619e6a13083480fbe02270596f"}
{"id": "meca500_programming_manual_5223", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5223, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5224", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5224, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5225", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5225, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5226", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5226, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5227", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5227, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5228", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5228, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5229", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5229, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5230", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5230, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5231", "text": "In cyclic protocols,\nDynamicDataTypeID 24. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5231, "length": 74, "hash": "de6fb8ac0b98b7ebef6765bed112398b"}
{"id": "meca500_programming_manual_5232", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5232, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5233", "text": "24. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5233, "length": 35, "hash": "8ff4d517c3541fd78feaf7aca996784f"}
{"id": "meca500_programming_manual_5234", "text": "the commands GetTorqueLimitsCfg (page 263) is represented by", "source": "meca500_programming_manual", "chunk_index": 5234, "length": 60, "hash": "5a862af0cd006861b69cf5c17e2b8746"}
{"id": "meca500_programming_manual_5235", "text": "(page 263) is represented by", "source": "meca500_programming_manual", "chunk_index": 5235, "length": 28, "hash": "5833ea2f0558d1e9dfbe2743cea7577f"}
{"id": "meca500_programming_manual_5236", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5236, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5237", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5237, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5238", "text": "This command returns the current definition of the TRF with respect to the FRF, set using the\nSetTrf (page 179) command.", "source": "meca500_programming_manual", "chunk_index": 5238, "length": 120, "hash": "424373c9788721d71eb7da3ffd1cc417"}
{"id": "meca500_programming_manual_5239", "text": "This command returns the current definition of the TRF with respect to the FRF, set using the", "source": "meca500_programming_manual", "chunk_index": 5239, "length": 93, "hash": "5173b10935f551b0764c18d5aca72317"}
{"id": "meca500_programming_manual_5240", "text": "\u2022 [2014][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5240, "length": 26, "hash": "3fcf887a41ef06b5b25562e1e4e77518"}
{"id": "meca500_programming_manual_5241", "text": "\u2022 [2014][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5241, "length": 26, "hash": "3fcf887a41ef06b5b25562e1e4e77518"}
{"id": "meca500_programming_manual_5242", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5242, "length": 83, "hash": "0951bb0eb6db98ec29d8fcede85ab5bc"}
{"id": "meca500_programming_manual_5243", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5243, "length": 81, "hash": "ae0db040a111b95c7272f73864e193a9"}
{"id": "meca500_programming_manual_5244", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the FRF,\nin degrees.", "source": "meca500_programming_manual", "chunk_index": 5244, "length": 98, "hash": "eda60f36f6818715d51d8c8d41e7bb43"}
{"id": "meca500_programming_manual_5245", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the FRF,\nin degrees.", "source": "meca500_programming_manual", "chunk_index": 5245, "length": 98, "hash": "eda60f36f6818715d51d8c8d41e7bb43"}
{"id": "meca500_programming_manual_5246", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5246, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5247", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5247, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5248", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5248, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5249", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5249, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5250", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5250, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5251", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5251, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5252", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5252, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5253", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5253, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5254", "text": "In cyclic protocols, the command GetTrf (page 264) is represented by the TargetTrf section\n(see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5254, "length": 107, "hash": "d1624468b4fed000ce954332d9f4e7af"}
{"id": "meca500_programming_manual_5255", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5255, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5256", "text": "(page 264) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5256, "length": 32, "hash": "38a269d70e89be75b41145cbc9f401c5"}
{"id": "meca500_programming_manual_5257", "text": "section\n(see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5257, "length": 24, "hash": "8d278a56b0bfe56eec58f80c5ec6bfa6"}
{"id": "meca500_programming_manual_5258", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5258, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5259", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5259, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5260", "text": "This command returns the timeout for velocity-mode motion commands, set using the\nSetVelTimeout (page 180) command.", "source": "meca500_programming_manual", "chunk_index": 5260, "length": 115, "hash": "cac53e933d7c482a3eff7357e06e7435"}
{"id": "meca500_programming_manual_5261", "text": "This command returns the timeout for velocity-mode motion commands, set using the", "source": "meca500_programming_manual", "chunk_index": 5261, "length": 81, "hash": "1f22d1bc163bd07ea333a34a3290d4a7"}
{"id": "meca500_programming_manual_5262", "text": "\u2013 t: timeout, in seconds.", "source": "meca500_programming_manual", "chunk_index": 5262, "length": 25, "hash": "7f2386bb2a2d5f58af365c592ec51a31"}
{"id": "meca500_programming_manual_5263", "text": "t: timeout, in seconds.", "source": "meca500_programming_manual", "chunk_index": 5263, "length": 23, "hash": "686d78fd6dc3c7671aae74420a98c4f7"}
{"id": "meca500_programming_manual_5264", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5264, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5265", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5265, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5266", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5266, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5267", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5267, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5268", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5268, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5269", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5269, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5270", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5270, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5271", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5271, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5272", "text": "the command GetVelTimeout\nIn cyclic protocols,\nDynamicDataTypeID 21. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5272, "length": 100, "hash": "7ae8c014e7a6126906c461064d078bb3"}
{"id": "meca500_programming_manual_5273", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5273, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5274", "text": "21. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5274, "length": 35, "hash": "a6e248301b89dc2689c1fdbbbab9b1f5"}
{"id": "meca500_programming_manual_5275", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5275, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5276", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5276, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5277", "text": "This command returns the current definition of the WRF with respect to the BRF, set using\nthe SetWrf (page 181) command.", "source": "meca500_programming_manual", "chunk_index": 5277, "length": 120, "hash": "485d9f774083e2c3a1d85ec14d881cd0"}
{"id": "meca500_programming_manual_5278", "text": "This command returns the current definition of the WRF with respect to the BRF, set using\nthe", "source": "meca500_programming_manual", "chunk_index": 5278, "length": 93, "hash": "8c28f797a7418f4cf6ea55e06deb3f0e"}
{"id": "meca500_programming_manual_5279", "text": "\u2022 [2014][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5279, "length": 26, "hash": "3fcf887a41ef06b5b25562e1e4e77518"}
{"id": "meca500_programming_manual_5280", "text": "\u2022 [2014][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5280, "length": 26, "hash": "3fcf887a41ef06b5b25562e1e4e77518"}
{"id": "meca500_programming_manual_5281", "text": "\u2013 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5281, "length": 83, "hash": "ca6c96842f50f5323f9bc866690ce512"}
{"id": "meca500_programming_manual_5282", "text": "x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5282, "length": 81, "hash": "54a34c93965e04204ee415f1cab90e38"}
{"id": "meca500_programming_manual_5283", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the WRF with respect to the\nBRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5283, "length": 98, "hash": "cad96dd7e0bb1e5f11d60958b4b13d01"}
{"id": "meca500_programming_manual_5284", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the WRF with respect to the\nBRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5284, "length": 98, "hash": "cad96dd7e0bb1e5f11d60958b4b13d01"}
{"id": "meca500_programming_manual_5285", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5285, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5286", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5286, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5287", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5287, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5288", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5288, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5289", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5289, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5290", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5290, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5291", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5291, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5292", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5292, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5293", "text": "In cyclic protocols, the command GetWrf (page 266) is represented by the TargetWrf section\n(see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5293, "length": 107, "hash": "697656c0d10d95815a26ff2a3136961a"}
{"id": "meca500_programming_manual_5294", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5294, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5295", "text": "(page 266) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5295, "length": 32, "hash": "76dfdf21aea60225a78e2215e97d7b6a"}
{"id": "meca500_programming_manual_5296", "text": "section\n(see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5296, "length": 24, "hash": "8d278a56b0bfe56eec58f80c5ec6bfa6"}
{"id": "meca500_programming_manual_5297", "text": "Real-time data request commands", "source": "meca500_programming_manual", "chunk_index": 5297, "length": 31, "hash": "602ecc3799f7fdda6f05b1e2f729eed3"}
{"id": "meca500_programming_manual_5298", "text": "Real-time data request commands", "source": "meca500_programming_manual", "chunk_index": 5298, "length": 31, "hash": "602ecc3799f7fdda6f05b1e2f729eed3"}
{"id": "meca500_programming_manual_5299", "text": "The commands in this section provide real-time data about the robot\u2019s current status, and are\ninstantaneous (i.e., executed immediately). Additionally, there are real-time data commands\nfor the robot\u2019s external tool accessories, which will be covered later.", "source": "meca500_programming_manual", "chunk_index": 5299, "length": 257, "hash": "9e1a0b98ce8b4398a68b02d9f597ae4a"}
{"id": "meca500_programming_manual_5300", "text": "The commands in this section provide real-time data about the robot\u2019s current status, and are\ninstantaneous (i.e., executed immediately). Additionally, there are real-time data commands\nfor the robot\u2019s external tool accessories, which will be covered later.", "source": "meca500_programming_manual", "chunk_index": 5300, "length": 257, "hash": "9e1a0b98ce8b4398a68b02d9f597ae4a"}
{"id": "meca500_programming_manual_5301", "text": "Examples of robot data include the current joint set, the length of the motion queue, and\nthe status of torque limits. There are two categories of real-time data commands for robot\npositioning:", "source": "meca500_programming_manual", "chunk_index": 5301, "length": 193, "hash": "e06675af5984fe82983a952d8ad9b4c4"}
{"id": "meca500_programming_manual_5302", "text": "Examples of robot data include the current joint set, the length of the motion queue, and\nthe status of torque limits. There are two categories of real-time data commands for robot\npositioning:", "source": "meca500_programming_manual", "chunk_index": 5302, "length": 193, "hash": "e06675af5984fe82983a952d8ad9b4c4"}
{"id": "meca500_programming_manual_5303", "text": "\u2022 Real-time sensor data These commands return data based on live measurements\nfrom the robot\u2019s sensors. Examples include GetRtJointTorq (page 277), GetRtJointPos\n(page 276), GetRtCartPos (page 272), etc.", "source": "meca500_programming_manual", "chunk_index": 5303, "length": 203, "hash": "2a92d9a56204f8b785212ca925ef4401"}
{"id": "meca500_programming_manual_5304", "text": "Real-time sensor data", "source": "meca500_programming_manual", "chunk_index": 5304, "length": 21, "hash": "4cc2c3b40016b145c51cba0be4beafb3"}
{"id": "meca500_programming_manual_5305", "text": "These commands return data based on live measurements\nfrom the robot\u2019s sensors. Examples include", "source": "meca500_programming_manual", "chunk_index": 5305, "length": 96, "hash": "e1471a33249a3e637e1a0b90b564a869"}
{"id": "meca500_programming_manual_5306", "text": "\u2022 Real-time target data These commands return data based on targets calculated\nExamples include GetRtTargetJointPos (page 283),", "source": "meca500_programming_manual", "chunk_index": 5306, "length": 127, "hash": "48bb6f2e8fb282f55b784ff0b54036b0"}
{"id": "meca500_programming_manual_5307", "text": "Real-time target data", "source": "meca500_programming_manual", "chunk_index": 5307, "length": 21, "hash": "643163fe41216ff509dd8d26cca7f37e"}
{"id": "meca500_programming_manual_5308", "text": "These commands return data based on targets calculated\nExamples include", "source": "meca500_programming_manual", "chunk_index": 5308, "length": 71, "hash": "62c7684e473113ac50091e5c0920ad7b"}
{"id": "meca500_programming_manual_5309", "text": "by the trajectory planner.\nGetRtTargetCartPos (page 279), etc.", "source": "meca500_programming_manual", "chunk_index": 5309, "length": 62, "hash": "a0d8cc74edda0868e7e3ee0c4760997b"}
{"id": "meca500_programming_manual_5310", "text": "by the trajectory planner.", "source": "meca500_programming_manual", "chunk_index": 5310, "length": 26, "hash": "4a88703bb65b356bbf3ffa05b37377e5"}
{"id": "meca500_programming_manual_5311", "text": "if the robot is active and stationary, the GetRtTargetJointPos (page 283)\nFor instance,\ncommand will consistently return the same joint set. However, the robot is never perfectly\nstill since the motors are continuously controlled by the drives. As a result, the revolute\njoints may oscillate by \u00b10.001\u00b0 around the desired angles. If you execute the GetRtJointPos\n(page 276) command twice in quick succession while the robot is stationary, you may notice\nslight differences in the responses.", "source": "meca500_programming_manual", "chunk_index": 5311, "length": 490, "hash": "0b0cd84b8f6415501189e23eec47bd17"}
{"id": "meca500_programming_manual_5312", "text": "if the robot is active and stationary, the", "source": "meca500_programming_manual", "chunk_index": 5312, "length": 42, "hash": "00222785548616a739223b1f3076dc01"}
{"id": "meca500_programming_manual_5313", "text": "(page 283)\nFor instance,\ncommand will consistently return the same joint set. However, the robot is never perfectly\nstill since the motors are continuously controlled by the drives. As a result, the revolute\njoints may oscillate by \u00b10.001\u00b0 around the desired angles. If you execute the", "source": "meca500_programming_manual", "chunk_index": 5313, "length": 285, "hash": "88e334e26c5fcb09fef47aeb714bf41e"}
{"id": "meca500_programming_manual_5314", "text": "(page 276) command twice in quick succession while the robot is stationary, you may notice\nslight differences in the responses.", "source": "meca500_programming_manual", "chunk_index": 5314, "length": 127, "hash": "f10e4c998d3e981bf8b6321a123717da"}
{"id": "meca500_programming_manual_5315", "text": "In more dynamic situations, such as when a high force is applied or during rapid movements,\nthe differences between the actual joint positions (GetRtJointPos (page 276)) and the target\npositions (GetRtTargetJointPos (page 283)) can be more significant. These differences\nincrease further during rapid motions with high payloads or in the event of a collision.", "source": "meca500_programming_manual", "chunk_index": 5315, "length": 359, "hash": "06ad65c9578ac43776928191d8b3ee26"}
{"id": "meca500_programming_manual_5316", "text": "In more dynamic situations, such as when a high force is applied or during rapid movements,\nthe differences between the actual joint positions (", "source": "meca500_programming_manual", "chunk_index": 5316, "length": 144, "hash": "a5d30ecaff98580491033d94d67a398e"}
{"id": "meca500_programming_manual_5317", "text": "(page 276)) and the target\npositions (", "source": "meca500_programming_manual", "chunk_index": 5317, "length": 38, "hash": "f32bb7bee2032a95c078cd78f0dac146"}
{"id": "meca500_programming_manual_5318", "text": "(page 283)) can be more significant. These differences\nincrease further during rapid motions with high payloads or in the event of a collision.", "source": "meca500_programming_manual", "chunk_index": 5318, "length": 143, "hash": "ae47420a040a12cc45e9cb2e7d226082"}
{"id": "meca500_programming_manual_5319", "text": "Each GetRt* command response begins with a timestamp, measured in microseconds.", "source": "meca500_programming_manual", "chunk_index": 5319, "length": 79, "hash": "44df015ab3a5b4a4e520c397c5b8abce"}
{"id": "meca500_programming_manual_5320", "text": "Each GetRt* command response begins with a timestamp, measured in microseconds.", "source": "meca500_programming_manual", "chunk_index": 5320, "length": 79, "hash": "44df015ab3a5b4a4e520c397c5b8abce"}
{"id": "meca500_programming_manual_5321", "text": "The following is the list of real-time data request commands, in alphabetical order:", "source": "meca500_programming_manual", "chunk_index": 5321, "length": 84, "hash": "c3e575d3adf7b3d7fad18ebc3ecc58b0"}
{"id": "meca500_programming_manual_5322", "text": "The following is the list of real-time data request commands, in alphabetical order:", "source": "meca500_programming_manual", "chunk_index": 5322, "length": 84, "hash": "c3e575d3adf7b3d7fad18ebc3ecc58b0"}
{"id": "meca500_programming_manual_5323", "text": "\u2022 GetCmdPendingCount (page 269)", "source": "meca500_programming_manual", "chunk_index": 5323, "length": 31, "hash": "bd4cb9308255d0edaa01580c9e7ca1c9"}
{"id": "meca500_programming_manual_5324", "text": "\u2022 GetRtAccelerometer (page 271)", "source": "meca500_programming_manual", "chunk_index": 5324, "length": 31, "hash": "87669dbfb553cfc7ad0565f83dde7147"}
{"id": "meca500_programming_manual_5325", "text": "\u2022 GetRtCartPos (page 272)", "source": "meca500_programming_manual", "chunk_index": 5325, "length": 25, "hash": "b3743fecc450af3f3160dd00443b21fa"}
{"id": "meca500_programming_manual_5326", "text": "\u2022 GetRtCartVel (page 273)", "source": "meca500_programming_manual", "chunk_index": 5326, "length": 25, "hash": "69d14d2a37aaf05962859178c0a77692"}
{"id": "meca500_programming_manual_5327", "text": "\u2022 GetRtConf (page 274)", "source": "meca500_programming_manual", "chunk_index": 5327, "length": 22, "hash": "aab175075b1c5858c0423eab293d9508"}
{"id": "meca500_programming_manual_5328", "text": "\u2022 GetRtConfTurn (page 275)", "source": "meca500_programming_manual", "chunk_index": 5328, "length": 26, "hash": "40189e44b5caa8b92812872ac41924f3"}
{"id": "meca500_programming_manual_5329", "text": "\u2022 GetRtJointPos (page 276)", "source": "meca500_programming_manual", "chunk_index": 5329, "length": 26, "hash": "dbc432485768b2cb8f1942112a6027c1"}
{"id": "meca500_programming_manual_5330", "text": "\u2022 GetRtJointTorq (page 277)", "source": "meca500_programming_manual", "chunk_index": 5330, "length": 27, "hash": "7296fe91599830b47af20064268c05c6"}
{"id": "meca500_programming_manual_5331", "text": "\u2022 GetRtJointVel (page 278)", "source": "meca500_programming_manual", "chunk_index": 5331, "length": 26, "hash": "01f23f0055385326e2821ec9e61a9677"}
{"id": "meca500_programming_manual_5332", "text": "\u2022 GetRtTargetCartPos (page 279)", "source": "meca500_programming_manual", "chunk_index": 5332, "length": 31, "hash": "1e13c7976f1f2041656a8a0d886528eb"}
{"id": "meca500_programming_manual_5333", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5333, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5334", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5334, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5335", "text": "\u2022 GetRtTargetCartVel (page 280)", "source": "meca500_programming_manual", "chunk_index": 5335, "length": 31, "hash": "808c066ba043115eba41106780e50806"}
{"id": "meca500_programming_manual_5336", "text": "\u2022 GetRtTargetConf (page 281)", "source": "meca500_programming_manual", "chunk_index": 5336, "length": 28, "hash": "1dd8fe4feae8a550f95067ffd227a5de"}
{"id": "meca500_programming_manual_5337", "text": "\u2022 GetRtTargetConfTurn (page 282)", "source": "meca500_programming_manual", "chunk_index": 5337, "length": 32, "hash": "b6678bc4b975e28b481f911ff67a8777"}
{"id": "meca500_programming_manual_5338", "text": "\u2022 GetRtTargetJointPos (page 283)", "source": "meca500_programming_manual", "chunk_index": 5338, "length": 32, "hash": "e69ddf7fe9854592578873c138ba5dbb"}
{"id": "meca500_programming_manual_5339", "text": "\u2022 GetRtTargetJointTorq (page 284)", "source": "meca500_programming_manual", "chunk_index": 5339, "length": 33, "hash": "9bc1b43a849d6cfd96e92a98c7c94c66"}
{"id": "meca500_programming_manual_5340", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 5340, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_5341", "text": "\u2022 GetRtTargetJointVel (page 285)", "source": "meca500_programming_manual", "chunk_index": 5341, "length": 32, "hash": "6b684ec819f81750387fcf12cae39901"}
{"id": "meca500_programming_manual_5342", "text": "\u2022 GetRtTrf (page 286)", "source": "meca500_programming_manual", "chunk_index": 5342, "length": 21, "hash": "1181cac0c2bb94b1e48c401232d0d45b"}
{"id": "meca500_programming_manual_5343", "text": "\u2022 GetRtWrf (page 287)", "source": "meca500_programming_manual", "chunk_index": 5343, "length": 21, "hash": "88abbaf71b6b96fbb1e15478d19bdbdc"}
{"id": "meca500_programming_manual_5344", "text": "\u2022 GetSafetyStopStatus (page 289)", "source": "meca500_programming_manual", "chunk_index": 5344, "length": 32, "hash": "90074b245b72bfa63ad9675c5698a678"}
{"id": "meca500_programming_manual_5345", "text": "\u2022 GetStatusRobot (page 290)", "source": "meca500_programming_manual", "chunk_index": 5345, "length": 27, "hash": "2681d0979daf582a901a28c70643703f"}
{"id": "meca500_programming_manual_5346", "text": "\u2022 GetTorqueLimitsStatus (page 291)", "source": "meca500_programming_manual", "chunk_index": 5346, "length": 34, "hash": "81650cac88056893a7f2be44012103b8"}
{"id": "meca500_programming_manual_5347", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 5347, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_5348", "text": "A few other real-time data request commands exist, but these are presented in the sections\nWork zone supervision and collision prevention commands (page 292) (GetCollisionStatus\n(page 296), GetWorkZoneStatus (page 300)) and Commands for optional accessories\n(page 306).", "source": "meca500_programming_manual", "chunk_index": 5348, "length": 269, "hash": "bbe87f3a6eccad83b3c4ea12376ec56b"}
{"id": "meca500_programming_manual_5349", "text": "A few other real-time data request commands exist, but these are presented in the sections", "source": "meca500_programming_manual", "chunk_index": 5349, "length": 90, "hash": "a7dfb3adbe8e485a41c3e4f284870b8b"}
{"id": "meca500_programming_manual_5350", "text": "Work zone supervision and collision prevention commands", "source": "meca500_programming_manual", "chunk_index": 5350, "length": 55, "hash": "6441277ce152d7279fd81df634ecfd04"}
{"id": "meca500_programming_manual_5351", "text": "Commands for optional accessories", "source": "meca500_programming_manual", "chunk_index": 5351, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "meca500_programming_manual_5352", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5352, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5353", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5353, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5354", "text": "This command returns the number of motion commands that are currently in the motion\nqueue.", "source": "meca500_programming_manual", "chunk_index": 5354, "length": 90, "hash": "62ace7b0493e5bb377a6739d9d975cfe"}
{"id": "meca500_programming_manual_5355", "text": "This command returns the number of motion commands that are currently in the motion\nqueue.", "source": "meca500_programming_manual", "chunk_index": 5355, "length": 90, "hash": "62ace7b0493e5bb377a6739d9d975cfe"}
{"id": "meca500_programming_manual_5356", "text": "GetCmdPendingCount()", "source": "meca500_programming_manual", "chunk_index": 5356, "length": 20, "hash": "30d23cd691effeeea07ac432af403956"}
{"id": "meca500_programming_manual_5357", "text": "GetCmdPendingCount()", "source": "meca500_programming_manual", "chunk_index": 5357, "length": 20, "hash": "30d23cd691effeeea07ac432af403956"}
{"id": "meca500_programming_manual_5358", "text": "\u2013 n: number of motion commands in the queue.", "source": "meca500_programming_manual", "chunk_index": 5358, "length": 44, "hash": "1a59850077c39cfdc3a76a5c24d8509c"}
{"id": "meca500_programming_manual_5359", "text": "n: number of motion commands in the queue.", "source": "meca500_programming_manual", "chunk_index": 5359, "length": 42, "hash": "dd3b9a5f7fbddc18e515f8de84f82c23"}
{"id": "meca500_programming_manual_5360", "text": "Note that the robot will compile several (~25) commands in advance. These compiled\ncommands are not included in this count, though they may not yet have started executing.", "source": "meca500_programming_manual", "chunk_index": 5360, "length": 171, "hash": "72b0a9d43d57f4b5a5c0ac5fd9a81697"}
{"id": "meca500_programming_manual_5361", "text": "Note that the robot will compile several (~25) commands in advance. These compiled", "source": "meca500_programming_manual", "chunk_index": 5361, "length": 82, "hash": "21ad958138e4b71ca5761307a5dce915"}
{"id": "meca500_programming_manual_5362", "text": "commands are not included in this count, though they may not yet have started executing.", "source": "meca500_programming_manual", "chunk_index": 5362, "length": 88, "hash": "ae29679a5f97095eaadc6828ae7f6e7d"}
{"id": "meca500_programming_manual_5363", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5363, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_5364", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 5364, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_5365", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 5365, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_5366", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 5366, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_5367", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5367, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5368", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 5368, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_5369", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5369, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5370", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 5370, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_5371", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5371, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5372", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 5372, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_5373", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5373, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5374", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5374, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5375", "text": "This command is not available in the Meca500.", "source": "meca500_programming_manual", "chunk_index": 5375, "length": 45, "hash": "76fc8e34acbb7975ba7807c3789cf394"}
{"id": "meca500_programming_manual_5376", "text": "This command is not available in the Meca500.", "source": "meca500_programming_manual", "chunk_index": 5376, "length": 45, "hash": "76fc8e34acbb7975ba7807c3789cf394"}
{"id": "meca500_programming_manual_5377", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5377, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5378", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5378, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5379", "text": "In cyclic protocols, the command GetOperationMode (page 270) is represented by the\nOperationMode field of the SafetyStatus section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5379, "length": 147, "hash": "df30d7379c75ca697dcc39054123fb13"}
{"id": "meca500_programming_manual_5380", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5380, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5381", "text": "(page 270) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5381, "length": 32, "hash": "a094d909693bc00652774f94f65d65f6"}
{"id": "meca500_programming_manual_5382", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5382, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5383", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5383, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5384", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5384, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5385", "text": "An accelerometer is embedded in link 5 of the Meca500 (i.e., the body with the I/O port).\nIt reports the acceleration of link 5 with respect to the WRF in the range \u00b132,000, which\ncorresponds to \u00b12g.\nIf the robot is not moving and is installed upright on a stationary\nhorizontal surface, GetRtAccelerometer(5) (page 271) will return roughly {0,0,\u221216000}, no\nmatter what the joint set. In other words, in stationary conditions, you can essentially think\nof the accelerometer as if it were embedded in the base of the robot.", "source": "meca500_programming_manual", "chunk_index": 5385, "length": 522, "hash": "bf94949feaf64361112ec01073baefdd"}
{"id": "meca500_programming_manual_5386", "text": "An accelerometer is embedded in link 5 of the Meca500 (i.e., the body with the I/O port).\nIt reports the acceleration of link 5 with respect to the WRF in the range \u00b132,000, which\ncorresponds to \u00b12g.\nIf the robot is not moving and is installed upright on a stationary\nhorizontal surface,", "source": "meca500_programming_manual", "chunk_index": 5386, "length": 287, "hash": "cc147447f291c52ffc165202df3e8ec1"}
{"id": "meca500_programming_manual_5387", "text": "GetRtAccelerometer(5)", "source": "meca500_programming_manual", "chunk_index": 5387, "length": 21, "hash": "4f50a437e97432e102f43adab9d057d5"}
{"id": "meca500_programming_manual_5388", "text": "(page 271) will return roughly {0,0,\u221216000}, no\nmatter what the joint set. In other words, in stationary conditions, you can essentially think\nof the accelerometer as if it were embedded in the base of the robot.", "source": "meca500_programming_manual", "chunk_index": 5388, "length": 212, "hash": "a48ff896d7b23f98fe1a54973802616f"}
{"id": "meca500_programming_manual_5389", "text": "GetRtAccelerometer(n)", "source": "meca500_programming_manual", "chunk_index": 5389, "length": 21, "hash": "c5670ee8256bafe13426579d85244d37"}
{"id": "meca500_programming_manual_5390", "text": "GetRtAccelerometer(n)", "source": "meca500_programming_manual", "chunk_index": 5390, "length": 21, "hash": "c5670ee8256bafe13426579d85244d37"}
{"id": "meca500_programming_manual_5391", "text": "\u2022 n: link number, currently must be 5.", "source": "meca500_programming_manual", "chunk_index": 5391, "length": 38, "hash": "bbe013fb098286dda73291fb4580b4d9"}
{"id": "meca500_programming_manual_5392", "text": "\u2022 n: link number, currently must be 5.", "source": "meca500_programming_manual", "chunk_index": 5392, "length": 38, "hash": "bbe013fb098286dda73291fb4580b4d9"}
{"id": "meca500_programming_manual_5393", "text": "\u2022 [2220][t, n, ax, ay, az]", "source": "meca500_programming_manual", "chunk_index": 5393, "length": 26, "hash": "c6d5dd38686ca1013cf7d88e6f0a016e"}
{"id": "meca500_programming_manual_5394", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5394, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5395", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5395, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5396", "text": "\u2013 n: link number, currently 5;", "source": "meca500_programming_manual", "chunk_index": 5396, "length": 30, "hash": "0d10391504fa5e71c18b1ee8e5fc493e"}
{"id": "meca500_programming_manual_5397", "text": "n: link number, currently 5;", "source": "meca500_programming_manual", "chunk_index": 5397, "length": 28, "hash": "fab5bffd38fdf615efc3250d0f98295d"}
{"id": "meca500_programming_manual_5398", "text": "\u2013 ax, ay, az: acceleration in link 5, measured with respect to the WRF, in units such", "source": "meca500_programming_manual", "chunk_index": 5398, "length": 85, "hash": "7ebfccde469198f4c0e4d50e652058b7"}
{"id": "meca500_programming_manual_5399", "text": ": acceleration in link 5, measured with respect to the WRF, in units such", "source": "meca500_programming_manual", "chunk_index": 5399, "length": 73, "hash": "05086bf556cc3cecd68a361e470e61f6"}
{"id": "meca500_programming_manual_5400", "text": "that 16,000 is equivalent to 9.81 m/s\u00b2 (i.e., 1g).", "source": "meca500_programming_manual", "chunk_index": 5400, "length": 50, "hash": "0eb0e5106c6e42ad6f668527c0aa09dc"}
{"id": "meca500_programming_manual_5401", "text": "that 16,000 is equivalent to 9.81 m/s\u00b2 (i.e., 1g).", "source": "meca500_programming_manual", "chunk_index": 5401, "length": 50, "hash": "0eb0e5106c6e42ad6f668527c0aa09dc"}
{"id": "meca500_programming_manual_5402", "text": "Data from this accelerometer should not be used for precise measurements.", "source": "meca500_programming_manual", "chunk_index": 5402, "length": 73, "hash": "79c9b5adec85353f2d403d958399d670"}
{"id": "meca500_programming_manual_5403", "text": "Data from this accelerometer should not be used for precise measurements.", "source": "meca500_programming_manual", "chunk_index": 5403, "length": 73, "hash": "79c9b5adec85353f2d403d958399d670"}
{"id": "meca500_programming_manual_5404", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5404, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5405", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5405, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5406", "text": "In cyclic protocols,\nDynamicDataTypeID 46. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5406, "length": 74, "hash": "33b3687cb61114d1a82b37d86cec1084"}
{"id": "meca500_programming_manual_5407", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5407, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5408", "text": "46. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5408, "length": 35, "hash": "af1d013ebd128bb3764e939714e55ebc"}
{"id": "meca500_programming_manual_5409", "text": "the command GetRtAccelerometer (page 271) is represented by", "source": "meca500_programming_manual", "chunk_index": 5409, "length": 59, "hash": "a7c93791102acf21430dd0a954f9bcfb"}
{"id": "meca500_programming_manual_5410", "text": "(page 271) is represented by", "source": "meca500_programming_manual", "chunk_index": 5410, "length": 28, "hash": "c4096a97766d420f485c921020f5e9f5"}
{"id": "meca500_programming_manual_5411", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5411, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5412", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5412, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5413", "text": "This command returns the pose of the TRF with respect to the WRF, as calculated from the\ncurrent joint set read by the joint encoders. It also returns a timestamp.", "source": "meca500_programming_manual", "chunk_index": 5413, "length": 163, "hash": "912eba151d5d7844ad1362178ed869e2"}
{"id": "meca500_programming_manual_5414", "text": "This command returns the pose of the TRF with respect to the WRF, as calculated from the\ncurrent joint set read by the joint encoders. It also returns a timestamp.", "source": "meca500_programming_manual", "chunk_index": 5414, "length": 163, "hash": "912eba151d5d7844ad1362178ed869e2"}
{"id": "meca500_programming_manual_5415", "text": "\u2022 [2211][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5415, "length": 26, "hash": "37bd771019beae7ff86b5b949e685808"}
{"id": "meca500_programming_manual_5416", "text": "\u2022 [2211][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5416, "length": 26, "hash": "37bd771019beae7ff86b5b949e685808"}
{"id": "meca500_programming_manual_5417", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5417, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5418", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5418, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5419", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5419, "length": 83, "hash": "a4fd71d65bae4b95e66ae223f81993e4"}
{"id": "meca500_programming_manual_5420", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5420, "length": 81, "hash": "578539d3696ba9a3724e16f88c7e8571"}
{"id": "meca500_programming_manual_5421", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the\nWRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5421, "length": 98, "hash": "d30b588b834f16cac528b6e7e983bd3a"}
{"id": "meca500_programming_manual_5422", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the\nWRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5422, "length": 98, "hash": "d30b588b834f16cac528b6e7e983bd3a"}
{"id": "meca500_programming_manual_5423", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5423, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5424", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5424, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5425", "text": "In cyclic protocols,\nthe command GetRtCartPos\nDynamicDataTypeID 41. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5425, "length": 99, "hash": "01c965487d00d9732fc1d34ab26ff0ae"}
{"id": "meca500_programming_manual_5426", "text": "In cyclic protocols,\nthe command", "source": "meca500_programming_manual", "chunk_index": 5426, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "meca500_programming_manual_5427", "text": "41. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5427, "length": 35, "hash": "368416270559c6beedc40cedf86b8aa5"}
{"id": "meca500_programming_manual_5428", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5428, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5429", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5429, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5430", "text": "This command returns the current Cartesian velocity vector of the TRF with respect to the\nWRF, as calculated from the real-time data coming from the joint encoders.", "source": "meca500_programming_manual", "chunk_index": 5430, "length": 164, "hash": "622dc5a2b6cb7cdda9995b73f51019ce"}
{"id": "meca500_programming_manual_5431", "text": "This command returns the current Cartesian velocity vector of the TRF with respect to the\nWRF, as calculated from the real-time data coming from the joint encoders.", "source": "meca500_programming_manual", "chunk_index": 5431, "length": 164, "hash": "622dc5a2b6cb7cdda9995b73f51019ce"}
{"id": "meca500_programming_manual_5432", "text": "\u2022 [2214][t, \u1e8b , \u1e8f , \u017c, \u03c9x, \u03c9y, \u03c9z]", "source": "meca500_programming_manual", "chunk_index": 5432, "length": 34, "hash": "5d905579c53cd8148d819fd3dbc85730"}
{"id": "meca500_programming_manual_5433", "text": "\u2022 [2214][t, \u1e8b , \u1e8f , \u017c, \u03c9", "source": "meca500_programming_manual", "chunk_index": 5433, "length": 24, "hash": "2acabff552ee925cbacae3a618505239"}
{"id": "meca500_programming_manual_5434", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5434, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5435", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5435, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5436", "text": "\u2013 \u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "meca500_programming_manual", "chunk_index": 5436, "length": 89, "hash": "144eba505f3df3b8d8bed13d3a475689"}
{"id": "meca500_programming_manual_5437", "text": "\u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "meca500_programming_manual", "chunk_index": 5437, "length": 87, "hash": "dd9970528c890ecc371bd1b3b6ed44b5"}
{"id": "meca500_programming_manual_5438", "text": "\u2013 \u03c9x, \u03c9y, \u03c9z: components of the angular velocity vector of the TRF with respect to the", "source": "meca500_programming_manual", "chunk_index": 5438, "length": 86, "hash": "eb94ead0267593da2692e2bfc4d427ab"}
{"id": "meca500_programming_manual_5439", "text": ": components of the angular velocity vector of the TRF with respect to the", "source": "meca500_programming_manual", "chunk_index": 5439, "length": 74, "hash": "69c2986f1c68b97385fe899c8e30ebfc"}
{"id": "meca500_programming_manual_5440", "text": "The current TCP speed with respect to the WRF is therefore (\u1e8b2 + \u1e8f2 + \u017c2)1/2, and the current\n2)1/2. Note that\nangular speed of the end-effector with respect to the WRF is (\u03c9x\nthe components of the angular velocity vector are not the time derivatives of the Euler angles.", "source": "meca500_programming_manual", "chunk_index": 5440, "length": 271, "hash": "a6d34ee88490ad751fc745701a3cf566"}
{"id": "meca500_programming_manual_5441", "text": "The current TCP speed with respect to the WRF is therefore (\u1e8b", "source": "meca500_programming_manual", "chunk_index": 5441, "length": 61, "hash": "e072b55346d621e7729cd807d5746077"}
{"id": "meca500_programming_manual_5442", "text": ". Note that\nangular speed of the end-effector with respect to the WRF is (\u03c9", "source": "meca500_programming_manual", "chunk_index": 5442, "length": 75, "hash": "fe6c96ae6728da49e722dbf847f4b53c"}
{"id": "meca500_programming_manual_5443", "text": "the components of the angular velocity vector are not the time derivatives of the Euler angles", "source": "meca500_programming_manual", "chunk_index": 5443, "length": 94, "hash": "adef1fe46ab28412c04b480bc755ed2a"}
{"id": "meca500_programming_manual_5444", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5444, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5445", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5445, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5446", "text": "the command GetRtCartVel\nIn cyclic protocols,\nDynamicDataTypeID 44. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5446, "length": 99, "hash": "17d19fcd5f415f1e34d8a0b589c7d1c8"}
{"id": "meca500_programming_manual_5447", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5447, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5448", "text": "44. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5448, "length": 35, "hash": "501028f39cacae12e4c32805bf42da8c"}
{"id": "meca500_programming_manual_5449", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5449, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5450", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5450, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5451", "text": "Unlike the GetConf (page 235) command, which returns the desired posture configuration\nparameters, the GetRtConf (page 274) command returns the current posture configuration\nparameters, calculated from real-time data provided by the joint encoders. Additionally, the\nGetRtConf (page 274) command includes a timestamp in its response.", "source": "meca500_programming_manual", "chunk_index": 5451, "length": 333, "hash": "3aa0c672db065b5151c9f6cd6e2c3ea8"}
{"id": "meca500_programming_manual_5452", "text": "(page 235) command, which returns the desired posture configuration\nparameters, the", "source": "meca500_programming_manual", "chunk_index": 5452, "length": 83, "hash": "29b35597353fb66eef5bc5010138a00b"}
{"id": "meca500_programming_manual_5453", "text": "(page 274) command returns the current posture configuration\nparameters, calculated from real-time data provided by the joint encoders. Additionally, the", "source": "meca500_programming_manual", "chunk_index": 5453, "length": 153, "hash": "098fa8d98637f02201ec6e68f5786166"}
{"id": "meca500_programming_manual_5454", "text": "(page 274) command includes a timestamp in its response.", "source": "meca500_programming_manual", "chunk_index": 5454, "length": 56, "hash": "aa1911adb6211fc6bbadaff90402f8b2"}
{"id": "meca500_programming_manual_5455", "text": "\u2022 [2218][cs, ce, cw]", "source": "meca500_programming_manual", "chunk_index": 5455, "length": 20, "hash": "626ef8da63bf8657342371729b570c39"}
{"id": "meca500_programming_manual_5456", "text": "\u2013 cs: shoulder configuration parameter, -1, 1, or 0\u2020;", "source": "meca500_programming_manual", "chunk_index": 5456, "length": 53, "hash": "7e887b7977522802b6d492de0a20b852"}
{"id": "meca500_programming_manual_5457", "text": ": shoulder configuration parameter, -1, 1, or 0", "source": "meca500_programming_manual", "chunk_index": 5457, "length": 47, "hash": "e2ab7aa693eb6e48ebe9a53537f82598"}
{"id": "meca500_programming_manual_5458", "text": "\u2013 ce: elbow configuration parameter, -1, 1, or 0\u2020;", "source": "meca500_programming_manual", "chunk_index": 5458, "length": 50, "hash": "bf6699dbd0d7b321e8bb8f081b734504"}
{"id": "meca500_programming_manual_5459", "text": ": elbow configuration parameter, -1, 1, or 0", "source": "meca500_programming_manual", "chunk_index": 5459, "length": 44, "hash": "1482208d746162719fcc58f32fa9e2e2"}
{"id": "meca500_programming_manual_5460", "text": "\u2013 cw: wrist configuration parameter, -1, 1, or 0\u2020.", "source": "meca500_programming_manual", "chunk_index": 5460, "length": 50, "hash": "b04bc1dba374ab0fed1fff8ca2deb13e"}
{"id": "meca500_programming_manual_5461", "text": ": wrist configuration parameter, -1, 1, or 0", "source": "meca500_programming_manual", "chunk_index": 5461, "length": 44, "hash": "c26f84612dcb28443fd21640dd74035e"}
{"id": "meca500_programming_manual_5462", "text": "\u2020 At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "meca500_programming_manual", "chunk_index": 5462, "length": 97, "hash": "8a65935c2dc5cb16de8faf10ef5566ad"}
{"id": "meca500_programming_manual_5463", "text": "At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "meca500_programming_manual", "chunk_index": 5463, "length": 95, "hash": "1faec2f3c7c1d9bb3f0c9a497f25d387"}
{"id": "meca500_programming_manual_5464", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5464, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5465", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5465, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5466", "text": "In cyclic protocols,\nthe\nDynamicDataTypeID 45. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5466, "length": 78, "hash": "82e522724eca4a5d31e52af8d3b7c08f"}
{"id": "meca500_programming_manual_5467", "text": "In cyclic protocols,\nthe", "source": "meca500_programming_manual", "chunk_index": 5467, "length": 24, "hash": "f13c492265d82819b373a8ef09f2a621"}
{"id": "meca500_programming_manual_5468", "text": "45. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5468, "length": 35, "hash": "66ead3de7ba83855e7a3352cd27ad882"}
{"id": "meca500_programming_manual_5469", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5469, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5470", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5470, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5471", "text": "Contrary to GetConfTurn (page 236), which returns the desired turn configuration parameter,\nGetRtConfTurn (page 275) returns the current turn configuration parameter, as calculated\nfrom the real-time data coming from the encoder of the last joint.\nIn addition, the\nGetRtConfTurn (page 275) command returns a timestamp.", "source": "meca500_programming_manual", "chunk_index": 5471, "length": 318, "hash": "bdd38c80434e2310a64d617fda118277"}
{"id": "meca500_programming_manual_5472", "text": "(page 236), which returns the desired turn configuration parameter,", "source": "meca500_programming_manual", "chunk_index": 5472, "length": 67, "hash": "c6f3ba398bc402854460fc4656b567b9"}
{"id": "meca500_programming_manual_5473", "text": "(page 275) returns the current turn configuration parameter, as calculated\nfrom the real-time data coming from the encoder of the last joint.\nIn addition, the", "source": "meca500_programming_manual", "chunk_index": 5473, "length": 158, "hash": "ba24c7931981a1ec1852bd401d30399b"}
{"id": "meca500_programming_manual_5474", "text": "(page 275) command returns a timestamp.", "source": "meca500_programming_manual", "chunk_index": 5474, "length": 39, "hash": "1a160876da6ea3e01cf1d5d3d412b861"}
{"id": "meca500_programming_manual_5475", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5475, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5476", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5476, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5477", "text": "\u2013 ct: turn configuration parameter, an integer number.", "source": "meca500_programming_manual", "chunk_index": 5477, "length": 54, "hash": "7aabb7f3d531d15887a13c2f94591872"}
{"id": "meca500_programming_manual_5478", "text": ": turn configuration parameter, an integer number.", "source": "meca500_programming_manual", "chunk_index": 5478, "length": 50, "hash": "3ac9c05b953e032e1b6a179fd4f5588f"}
{"id": "meca500_programming_manual_5479", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5479, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5480", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5480, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5481", "text": "In cyclic protocols,\nDynamicDataTypeID 45. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5481, "length": 74, "hash": "1c7418527bcb716042e763b13dc52466"}
{"id": "meca500_programming_manual_5482", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5482, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5483", "text": "45. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5483, "length": 35, "hash": "66ead3de7ba83855e7a3352cd27ad882"}
{"id": "meca500_programming_manual_5484", "text": "the command GetRtConfTurn (page 275)", "source": "meca500_programming_manual", "chunk_index": 5484, "length": 36, "hash": "ff66a4eebe1cadbb55b9d7755e6ca8d7"}
{"id": "meca500_programming_manual_5485", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5485, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5486", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5486, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5487", "text": "This command returns the current joint set read by the joint encoders.\ntimestamp.", "source": "meca500_programming_manual", "chunk_index": 5487, "length": 81, "hash": "b912b66816c8c87b1852fd3863113a55"}
{"id": "meca500_programming_manual_5488", "text": "This command returns the current joint set read by the joint encoders.\ntimestamp.", "source": "meca500_programming_manual", "chunk_index": 5488, "length": 81, "hash": "b912b66816c8c87b1852fd3863113a55"}
{"id": "meca500_programming_manual_5489", "text": "\u2022 [2210][t, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]", "source": "meca500_programming_manual", "chunk_index": 5489, "length": 35, "hash": "dc5f3d153b4cc43617b1c984af40555e"}
{"id": "meca500_programming_manual_5490", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5490, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5491", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5491, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5492", "text": "\u2013 \u03b8i: the angle of joint i, in degrees;", "source": "meca500_programming_manual", "chunk_index": 5492, "length": 39, "hash": "7db88dc538dde849ec4363d6709b510e"}
{"id": "meca500_programming_manual_5493", "text": ": the angle of joint i, in degrees;", "source": "meca500_programming_manual", "chunk_index": 5493, "length": 35, "hash": "838463a4987c5093a0a0984b22ce6634"}
{"id": "meca500_programming_manual_5494", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5494, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5495", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5495, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5496", "text": "In cyclic protocols,\nthe command GetRtJointPos\nDynamicDataTypeID 40. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5496, "length": 100, "hash": "7337fc6334edaebe801e0f48a1f904a9"}
{"id": "meca500_programming_manual_5497", "text": "In cyclic protocols,\nthe command", "source": "meca500_programming_manual", "chunk_index": 5497, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "meca500_programming_manual_5498", "text": "40. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5498, "length": 35, "hash": "29133e5a366a7b54dfcb970ef5ebc46f"}
{"id": "meca500_programming_manual_5499", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5499, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5500", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5500, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5501", "text": "This command returns the current joint torques, or more specifically, the current motor\ntorques.", "source": "meca500_programming_manual", "chunk_index": 5501, "length": 96, "hash": "5ed41cfbf498ea4ec8d11d2739b9dc4c"}
{"id": "meca500_programming_manual_5502", "text": "This command returns the current joint torques, or more specifically, the current motor\ntorques.", "source": "meca500_programming_manual", "chunk_index": 5502, "length": 96, "hash": "5ed41cfbf498ea4ec8d11d2739b9dc4c"}
{"id": "meca500_programming_manual_5503", "text": "\u2022 [2213][t, \u03c41, \u03c42, \u03c43, \u03c44, \u03c45, \u03c46]", "source": "meca500_programming_manual", "chunk_index": 5503, "length": 35, "hash": "a00087ae622276a1c8f8f6ff9654b13c"}
{"id": "meca500_programming_manual_5504", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5504, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5505", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5505, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5506", "text": "\u2013 \u03c4i: the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "meca500_programming_manual", "chunk_index": 5506, "length": 85, "hash": "02b09d3b0461f9e05603410f2b8d23b7"}
{"id": "meca500_programming_manual_5507", "text": ": the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "meca500_programming_manual", "chunk_index": 5507, "length": 81, "hash": "5044aafb665d3dbf00f18a5b5b4c8a1d"}
{"id": "meca500_programming_manual_5508", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5508, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5509", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5509, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5510", "text": "In cyclic protocols,\nDynamicDataTypeID 43. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5510, "length": 74, "hash": "bd5bab27a718485f77fd18013852a87f"}
{"id": "meca500_programming_manual_5511", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5511, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5512", "text": "43. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5512, "length": 35, "hash": "ef3e4da1a44807fe3cd7f3c898639dde"}
{"id": "meca500_programming_manual_5513", "text": "the command GetRtJointTorq (page 277)", "source": "meca500_programming_manual", "chunk_index": 5513, "length": 37, "hash": "932fb55d18ed8994b7de635fceb00e18"}
{"id": "meca500_programming_manual_5514", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5514, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5515", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5515, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5516", "text": "This command returns the current joint velocities, calculated by differentiating the joint\nencoders data.", "source": "meca500_programming_manual", "chunk_index": 5516, "length": 105, "hash": "a3f5d3739ba50f5e9fa4c364e61f06eb"}
{"id": "meca500_programming_manual_5517", "text": "This command returns the current joint velocities, calculated by differentiating the joint\nencoders data.", "source": "meca500_programming_manual", "chunk_index": 5517, "length": 105, "hash": "a3f5d3739ba50f5e9fa4c364e61f06eb"}
{"id": "meca500_programming_manual_5518", "text": "\u2022 [2212][t, \u03c91, \u03c92, \u03c93, \u03c94, \u03c95, \u03c96]", "source": "meca500_programming_manual", "chunk_index": 5518, "length": 35, "hash": "e5f7d47e8cbdaded8ab99ed62db1be8e"}
{"id": "meca500_programming_manual_5519", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5519, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5520", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5520, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5521", "text": "\u2013 \u03c9i: the rate of change of joint i, in \u00b0/s (i = 1, 2, \u2026, 6).", "source": "meca500_programming_manual", "chunk_index": 5521, "length": 61, "hash": "706ef4ad22a316ad62b5900206892426"}
{"id": "meca500_programming_manual_5522", "text": ": the rate of change of joint i, in \u00b0/s (i = 1, 2, \u2026, 6).", "source": "meca500_programming_manual", "chunk_index": 5522, "length": 57, "hash": "80a4179f1fa94d5ee2ff227c1a6b7fa7"}
{"id": "meca500_programming_manual_5523", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5523, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5524", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5524, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5525", "text": "In cyclic protocols,\nthe command GetRtJointVel\nDynamicDataTypeID 42. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5525, "length": 100, "hash": "c782ebf9c068bde5ccf0e83e20732392"}
{"id": "meca500_programming_manual_5526", "text": "In cyclic protocols,\nthe command", "source": "meca500_programming_manual", "chunk_index": 5526, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "meca500_programming_manual_5527", "text": "42. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5527, "length": 35, "hash": "367e00537c2c105f39a2dbd8405e5043"}
{"id": "meca500_programming_manual_5528", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5528, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5529", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5529, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5530", "text": "This command returns the current target pose of the TRF relative to the WRF, rather than the\npose derived from real-time data provided by the joint encoders.", "source": "meca500_programming_manual", "chunk_index": 5530, "length": 157, "hash": "42d6035bc75af6a8cdb012fbd7664119"}
{"id": "meca500_programming_manual_5531", "text": "This command returns the current target pose of the TRF relative to the WRF, rather than the\npose derived from real-time data provided by the joint encoders.", "source": "meca500_programming_manual", "chunk_index": 5531, "length": 157, "hash": "42d6035bc75af6a8cdb012fbd7664119"}
{"id": "meca500_programming_manual_5532", "text": "GetRtTargetCartPos()", "source": "meca500_programming_manual", "chunk_index": 5532, "length": 20, "hash": "0942a11370f90e79b8caa6a22bf5ff16"}
{"id": "meca500_programming_manual_5533", "text": "GetRtTargetCartPos()", "source": "meca500_programming_manual", "chunk_index": 5533, "length": 20, "hash": "0942a11370f90e79b8caa6a22bf5ff16"}
{"id": "meca500_programming_manual_5534", "text": "\u2022 [2201][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5534, "length": 26, "hash": "05c991372a4da470035f785166e758e2"}
{"id": "meca500_programming_manual_5535", "text": "\u2022 [2201][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5535, "length": 26, "hash": "05c991372a4da470035f785166e758e2"}
{"id": "meca500_programming_manual_5536", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5536, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5537", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5537, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5538", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5538, "length": 83, "hash": "a4fd71d65bae4b95e66ae223f81993e4"}
{"id": "meca500_programming_manual_5539", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5539, "length": 81, "hash": "578539d3696ba9a3724e16f88c7e8571"}
{"id": "meca500_programming_manual_5540", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the\nWRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5540, "length": 98, "hash": "d30b588b834f16cac528b6e7e983bd3a"}
{"id": "meca500_programming_manual_5541", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the\nWRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5541, "length": 98, "hash": "d30b588b834f16cac528b6e7e983bd3a"}
{"id": "meca500_programming_manual_5542", "text": "The deprecated GetPose command, which is still supported, returns the same data, except\nfor the timestamp. Additionally, the message ID differs and is 2027.", "source": "meca500_programming_manual", "chunk_index": 5542, "length": 156, "hash": "1859296ad9f5914317a8ca95c4a59a13"}
{"id": "meca500_programming_manual_5543", "text": "The deprecated GetPose command, which is still supported, returns the same data, except\nfor the timestamp. Additionally, the message ID differs and is 2027.", "source": "meca500_programming_manual", "chunk_index": 5543, "length": 156, "hash": "1859296ad9f5914317a8ca95c4a59a13"}
{"id": "meca500_programming_manual_5544", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5544, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5545", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5545, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5546", "text": "In cyclic protocols, the command GetRtTargetCartPos (page 279) is represented by the\nTargetEndEffectorPose section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5546, "length": 131, "hash": "75561074953441eb7339bce12f97944b"}
{"id": "meca500_programming_manual_5547", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5547, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5548", "text": "(page 279) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5548, "length": 32, "hash": "fdd8bc16432ed97041a2f0898ecbf5e0"}
{"id": "meca500_programming_manual_5549", "text": "TargetEndEffectorPose", "source": "meca500_programming_manual", "chunk_index": 5549, "length": 21, "hash": "196d3a576601ac16b2753c86a3b70da3"}
{"id": "meca500_programming_manual_5550", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5550, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5551", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5551, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5552", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5552, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5553", "text": "This command returns the current target Cartesian velocity vector of the TRF with respect\nto the WRF.", "source": "meca500_programming_manual", "chunk_index": 5553, "length": 101, "hash": "b44eb8120edc3df92073a548cc70f4cc"}
{"id": "meca500_programming_manual_5554", "text": "This command returns the current target Cartesian velocity vector of the TRF with respect\nto the WRF.", "source": "meca500_programming_manual", "chunk_index": 5554, "length": 101, "hash": "b44eb8120edc3df92073a548cc70f4cc"}
{"id": "meca500_programming_manual_5555", "text": "GetRtTargetCartVel()", "source": "meca500_programming_manual", "chunk_index": 5555, "length": 20, "hash": "ea6085bd167db73c28d6443dd977627d"}
{"id": "meca500_programming_manual_5556", "text": "GetRtTargetCartVel()", "source": "meca500_programming_manual", "chunk_index": 5556, "length": 20, "hash": "ea6085bd167db73c28d6443dd977627d"}
{"id": "meca500_programming_manual_5557", "text": "\u2022 [2204][t, \u1e8b , \u1e8f , \u017c, \u03c9x, \u03c9y, \u03c9z]", "source": "meca500_programming_manual", "chunk_index": 5557, "length": 34, "hash": "6207d709be75c14e902897dc2c66f1a8"}
{"id": "meca500_programming_manual_5558", "text": "\u2022 [2204][t, \u1e8b , \u1e8f , \u017c, \u03c9", "source": "meca500_programming_manual", "chunk_index": 5558, "length": 24, "hash": "ba98da2148fc43155f701d790446abc8"}
{"id": "meca500_programming_manual_5559", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5559, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5560", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5560, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5561", "text": "\u2013 \u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "meca500_programming_manual", "chunk_index": 5561, "length": 89, "hash": "144eba505f3df3b8d8bed13d3a475689"}
{"id": "meca500_programming_manual_5562", "text": "\u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "meca500_programming_manual", "chunk_index": 5562, "length": 87, "hash": "dd9970528c890ecc371bd1b3b6ed44b5"}
{"id": "meca500_programming_manual_5563", "text": "\u2013 \u03c9x, \u03c9y, \u03c9z: components of the angular velocity vector of the TRF with respect to the", "source": "meca500_programming_manual", "chunk_index": 5563, "length": 86, "hash": "eb94ead0267593da2692e2bfc4d427ab"}
{"id": "meca500_programming_manual_5564", "text": ": components of the angular velocity vector of the TRF with respect to the", "source": "meca500_programming_manual", "chunk_index": 5564, "length": 74, "hash": "69c2986f1c68b97385fe899c8e30ebfc"}
{"id": "meca500_programming_manual_5565", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5565, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5566", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5566, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5567", "text": "In cyclic protocols,\nDynamicDataTypeID 34. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5567, "length": 74, "hash": "edb8f43f73cb4fd9ba801c90378aaecd"}
{"id": "meca500_programming_manual_5568", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5568, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5569", "text": "34. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5569, "length": 35, "hash": "1379ff5c2176ad204e84ea41db99fa76"}
{"id": "meca500_programming_manual_5570", "text": "the command GetRtTargetCartVel", "source": "meca500_programming_manual", "chunk_index": 5570, "length": 30, "hash": "1f05f4727def9767bedc9466e0428ba4"}
{"id": "meca500_programming_manual_5571", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5571, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5572", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5572, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5573", "text": "This command returns the posture configuration parameters calculated from the current\ntarget joint set.", "source": "meca500_programming_manual", "chunk_index": 5573, "length": 103, "hash": "aa689b062cd39aa52418416c6495950d"}
{"id": "meca500_programming_manual_5574", "text": "This command returns the posture configuration parameters calculated from the current\ntarget joint set.", "source": "meca500_programming_manual", "chunk_index": 5574, "length": 103, "hash": "aa689b062cd39aa52418416c6495950d"}
{"id": "meca500_programming_manual_5575", "text": "\u2022 [2208][cs, ce, cw]", "source": "meca500_programming_manual", "chunk_index": 5575, "length": 20, "hash": "71f767dff94579135ed7a5ea4e439a0c"}
{"id": "meca500_programming_manual_5576", "text": "\u2013 cs: shoulder configuration parameter, -1, 1, or 0\u2020;", "source": "meca500_programming_manual", "chunk_index": 5576, "length": 53, "hash": "7e887b7977522802b6d492de0a20b852"}
{"id": "meca500_programming_manual_5577", "text": ": shoulder configuration parameter, -1, 1, or 0", "source": "meca500_programming_manual", "chunk_index": 5577, "length": 47, "hash": "e2ab7aa693eb6e48ebe9a53537f82598"}
{"id": "meca500_programming_manual_5578", "text": "\u2013 ce: elbow configuration parameter, -1, 1, or 0\u2020;", "source": "meca500_programming_manual", "chunk_index": 5578, "length": 50, "hash": "bf6699dbd0d7b321e8bb8f081b734504"}
{"id": "meca500_programming_manual_5579", "text": ": elbow configuration parameter, -1, 1, or 0", "source": "meca500_programming_manual", "chunk_index": 5579, "length": 44, "hash": "1482208d746162719fcc58f32fa9e2e2"}
{"id": "meca500_programming_manual_5580", "text": "\u2013 cw: wrist configuration parameter, -1, 1, or 0\u2020.", "source": "meca500_programming_manual", "chunk_index": 5580, "length": 50, "hash": "b04bc1dba374ab0fed1fff8ca2deb13e"}
{"id": "meca500_programming_manual_5581", "text": ": wrist configuration parameter, -1, 1, or 0", "source": "meca500_programming_manual", "chunk_index": 5581, "length": 44, "hash": "c26f84612dcb28443fd21640dd74035e"}
{"id": "meca500_programming_manual_5582", "text": "\u2020 At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "meca500_programming_manual", "chunk_index": 5582, "length": 97, "hash": "8a65935c2dc5cb16de8faf10ef5566ad"}
{"id": "meca500_programming_manual_5583", "text": "At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "meca500_programming_manual", "chunk_index": 5583, "length": 95, "hash": "1faec2f3c7c1d9bb3f0c9a497f25d387"}
{"id": "meca500_programming_manual_5584", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5584, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5585", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5585, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5586", "text": "In cyclic protocols, the command GetRtTargetConf (page 281) is represented by the\nTargetConfiguration section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5586, "length": 126, "hash": "89b068ff6f849673bed8fd0c2c739d1b"}
{"id": "meca500_programming_manual_5587", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5587, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5588", "text": "(page 281) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5588, "length": 32, "hash": "bb3c6e329a94872f216b5fa9f37867fc"}
{"id": "meca500_programming_manual_5589", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5589, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5590", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5590, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5591", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5591, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5592", "text": "This command returns the turn configuration parameters calculated from the current target\njoint value for the last joint.", "source": "meca500_programming_manual", "chunk_index": 5592, "length": 121, "hash": "8c0a4570a2a4842e6c73b0540d75dad6"}
{"id": "meca500_programming_manual_5593", "text": "This command returns the turn configuration parameters calculated from the current target\njoint value for the last joint.", "source": "meca500_programming_manual", "chunk_index": 5593, "length": 121, "hash": "8c0a4570a2a4842e6c73b0540d75dad6"}
{"id": "meca500_programming_manual_5594", "text": "GetRtTargetConfTurn()", "source": "meca500_programming_manual", "chunk_index": 5594, "length": 21, "hash": "3512faa2cc07f49b84fb98e478e2c3b5"}
{"id": "meca500_programming_manual_5595", "text": "GetRtTargetConfTurn()", "source": "meca500_programming_manual", "chunk_index": 5595, "length": 21, "hash": "3512faa2cc07f49b84fb98e478e2c3b5"}
{"id": "meca500_programming_manual_5596", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5596, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5597", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5597, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5598", "text": "\u2013 ct: turn configuration parameter, an integer number.", "source": "meca500_programming_manual", "chunk_index": 5598, "length": 54, "hash": "7aabb7f3d531d15887a13c2f94591872"}
{"id": "meca500_programming_manual_5599", "text": ": turn configuration parameter, an integer number.", "source": "meca500_programming_manual", "chunk_index": 5599, "length": 50, "hash": "3ac9c05b953e032e1b6a179fd4f5588f"}
{"id": "meca500_programming_manual_5600", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5600, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5601", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5601, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5602", "text": "In cyclic protocols, the command GetRtTargetConfTurn (page 282) is represented by the\nTargetConfiguration section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5602, "length": 130, "hash": "410be839d7f3265c523c4b78e8f746ca"}
{"id": "meca500_programming_manual_5603", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5603, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5604", "text": "(page 282) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5604, "length": 32, "hash": "07bd09f7b3bf8ab1071b14d845a117a4"}
{"id": "meca500_programming_manual_5605", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5605, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5606", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5606, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5607", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5607, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5608", "text": "This command returns the current target joint set.", "source": "meca500_programming_manual", "chunk_index": 5608, "length": 50, "hash": "c38948308940608dff2bf990f6f4e8d3"}
{"id": "meca500_programming_manual_5609", "text": "This command returns the current target joint set.", "source": "meca500_programming_manual", "chunk_index": 5609, "length": 50, "hash": "c38948308940608dff2bf990f6f4e8d3"}
{"id": "meca500_programming_manual_5610", "text": "GetRtTargetJointPos()", "source": "meca500_programming_manual", "chunk_index": 5610, "length": 21, "hash": "5a45677d08b0ac2e7540f60505d03a63"}
{"id": "meca500_programming_manual_5611", "text": "GetRtTargetJointPos()", "source": "meca500_programming_manual", "chunk_index": 5611, "length": 21, "hash": "5a45677d08b0ac2e7540f60505d03a63"}
{"id": "meca500_programming_manual_5612", "text": "\u2022 [2200][t, \u03b81, \u03b82, \u03b83, \u03b84, \u03b85, \u03b86]", "source": "meca500_programming_manual", "chunk_index": 5612, "length": 35, "hash": "6ae957edce788fe4f45e3c1e9e8778d2"}
{"id": "meca500_programming_manual_5613", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5613, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5614", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5614, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5615", "text": "\u2013 \u03b8i: the angle of joint i, in degrees;", "source": "meca500_programming_manual", "chunk_index": 5615, "length": 39, "hash": "7db88dc538dde849ec4363d6709b510e"}
{"id": "meca500_programming_manual_5616", "text": ": the angle of joint i, in degrees;", "source": "meca500_programming_manual", "chunk_index": 5616, "length": 35, "hash": "838463a4987c5093a0a0984b22ce6634"}
{"id": "meca500_programming_manual_5617", "text": "The deprecated GetJoints command, which remains supported, returns the same data,\nexcept for the timestamp. The message ID is also different, being 2026.", "source": "meca500_programming_manual", "chunk_index": 5617, "length": 153, "hash": "bd001a5906d20d128dc52681a9ed45e2"}
{"id": "meca500_programming_manual_5618", "text": "The deprecated GetJoints command, which remains supported, returns the same data,\nexcept for the timestamp. The message ID is also different, being 2026.", "source": "meca500_programming_manual", "chunk_index": 5618, "length": 153, "hash": "bd001a5906d20d128dc52681a9ed45e2"}
{"id": "meca500_programming_manual_5619", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5619, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5620", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5620, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5621", "text": "In cyclic protocols, the command GetRtTargetJointPos (page 283) is represented by the\nTargetJointSet section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5621, "length": 125, "hash": "d5645b6c66bfc02ab47ef76d934a8793"}
{"id": "meca500_programming_manual_5622", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5622, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5623", "text": "(page 283) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5623, "length": 32, "hash": "c404aa2b55b2ceea3f1f2b414afcc0d6"}
{"id": "meca500_programming_manual_5624", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5624, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5625", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5625, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5626", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5626, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5627", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 5627, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_5628", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 5628, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_5629", "text": "This command returns the current target (calculated) motor torques.", "source": "meca500_programming_manual", "chunk_index": 5629, "length": 67, "hash": "7ca80d6a85ea2358b55096bc0917f4b1"}
{"id": "meca500_programming_manual_5630", "text": "This command returns the current target (calculated) motor torques.", "source": "meca500_programming_manual", "chunk_index": 5630, "length": 67, "hash": "7ca80d6a85ea2358b55096bc0917f4b1"}
{"id": "meca500_programming_manual_5631", "text": "GetRtTargetJointTorq()", "source": "meca500_programming_manual", "chunk_index": 5631, "length": 22, "hash": "06d0a1785aa29332869aefa59dae942c"}
{"id": "meca500_programming_manual_5632", "text": "GetRtTargetJointTorq()", "source": "meca500_programming_manual", "chunk_index": 5632, "length": 22, "hash": "06d0a1785aa29332869aefa59dae942c"}
{"id": "meca500_programming_manual_5633", "text": "\u2022 [2203][t, \u03c41, \u03c42, \u03c43, \u03c44, \u03c45, \u03c46]", "source": "meca500_programming_manual", "chunk_index": 5633, "length": 35, "hash": "00529214aa2901fba250ca41a7369d5a"}
{"id": "meca500_programming_manual_5634", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5634, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5635", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5635, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5636", "text": "\u2013 \u03c4i: the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "meca500_programming_manual", "chunk_index": 5636, "length": 85, "hash": "02b09d3b0461f9e05603410f2b8d23b7"}
{"id": "meca500_programming_manual_5637", "text": ": the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "meca500_programming_manual", "chunk_index": 5637, "length": 81, "hash": "5044aafb665d3dbf00f18a5b5b4c8a1d"}
{"id": "meca500_programming_manual_5638", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5638, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5639", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5639, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5640", "text": "In cyclic protocols, the command GetRtTargetJointTorq (page 284) is represented by\nDynamicDataTypeID 33. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5640, "length": 136, "hash": "f9beeaf0186ba534532331e446a262e0"}
{"id": "meca500_programming_manual_5641", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5641, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5642", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 5642, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_5643", "text": "(page 284) is represented by", "source": "meca500_programming_manual", "chunk_index": 5643, "length": 28, "hash": "f764a9adfe412f7c691efe73aacbcb55"}
{"id": "meca500_programming_manual_5644", "text": "33. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5644, "length": 35, "hash": "737a2e666d6fcabfa49a14a243ee18ce"}
{"id": "meca500_programming_manual_5645", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 5645, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_5646", "text": "GetRtTargetJointTorq", "source": "meca500_programming_manual", "chunk_index": 5646, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "meca500_programming_manual_5647", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5647, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5648", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5648, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5649", "text": "This command returns the current target joint velocities.", "source": "meca500_programming_manual", "chunk_index": 5649, "length": 57, "hash": "d6194383ec313983fa90a2a28ed7f4e3"}
{"id": "meca500_programming_manual_5650", "text": "This command returns the current target joint velocities.", "source": "meca500_programming_manual", "chunk_index": 5650, "length": 57, "hash": "d6194383ec313983fa90a2a28ed7f4e3"}
{"id": "meca500_programming_manual_5651", "text": "GetRtTargetJointVel()", "source": "meca500_programming_manual", "chunk_index": 5651, "length": 21, "hash": "5d3170a985a7fbaad9b1183d4d21a44a"}
{"id": "meca500_programming_manual_5652", "text": "GetRtTargetJointVel()", "source": "meca500_programming_manual", "chunk_index": 5652, "length": 21, "hash": "5d3170a985a7fbaad9b1183d4d21a44a"}
{"id": "meca500_programming_manual_5653", "text": "\u2022 [2202][t, \u03c91, \u03c92, \u03c93, \u03c94, \u03c95, \u03c96]", "source": "meca500_programming_manual", "chunk_index": 5653, "length": 35, "hash": "45badcb02d344ecb7b384b3cd5178dd2"}
{"id": "meca500_programming_manual_5654", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5654, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5655", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5655, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5656", "text": "\u2013 \u03c9i: the rate of change of joint i, in \u00b0/s (i = 1, 2, \u2026, 6).", "source": "meca500_programming_manual", "chunk_index": 5656, "length": 61, "hash": "706ef4ad22a316ad62b5900206892426"}
{"id": "meca500_programming_manual_5657", "text": ": the rate of change of joint i, in \u00b0/s (i = 1, 2, \u2026, 6).", "source": "meca500_programming_manual", "chunk_index": 5657, "length": 57, "hash": "80a4179f1fa94d5ee2ff227c1a6b7fa7"}
{"id": "meca500_programming_manual_5658", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5658, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5659", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5659, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5660", "text": "In cyclic protocols,\nDynamicDataTypeID 32. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5660, "length": 74, "hash": "067d87f7d4bb9e60f7e50e3b76249b35"}
{"id": "meca500_programming_manual_5661", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5661, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5662", "text": "32. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5662, "length": 35, "hash": "790de9f5ea22e9b7c8fe07e89b46b8b2"}
{"id": "meca500_programming_manual_5663", "text": "the command GetRtTargetJointVel (page 285)", "source": "meca500_programming_manual", "chunk_index": 5663, "length": 42, "hash": "9aea9602c6d026819725818dfc11dd8a"}
{"id": "meca500_programming_manual_5664", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5664, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5665", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5665, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5666", "text": "This command returns the current definition of the TRF with respect to the FRF, set by\nthe SetTrf (page 179) command. It returns exactly the same pose as the GetTrf (page 264)\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "meca500_programming_manual", "chunk_index": 5666, "length": 260, "hash": "637e7d419594766a1e4a2376309fc31c"}
{"id": "meca500_programming_manual_5667", "text": "This command returns the current definition of the TRF with respect to the FRF, set by\nthe", "source": "meca500_programming_manual", "chunk_index": 5667, "length": 90, "hash": "4c8c65331bb53be1861ec92e3e70b0db"}
{"id": "meca500_programming_manual_5668", "text": "(page 179) command. It returns exactly the same pose as the", "source": "meca500_programming_manual", "chunk_index": 5668, "length": 59, "hash": "4b720bbc6ce19993f036e211dba6b827"}
{"id": "meca500_programming_manual_5669", "text": "(page 264)\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "meca500_programming_manual", "chunk_index": 5669, "length": 95, "hash": "c0048a89308c36942eb09f285a86ba47"}
{"id": "meca500_programming_manual_5670", "text": "\u2022 [2229][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5670, "length": 26, "hash": "d3726fc3d34e3ddc227a3fbb52306cd3"}
{"id": "meca500_programming_manual_5671", "text": "\u2022 [2229][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5671, "length": 26, "hash": "d3726fc3d34e3ddc227a3fbb52306cd3"}
{"id": "meca500_programming_manual_5672", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5672, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5673", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5673, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5674", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5674, "length": 83, "hash": "0951bb0eb6db98ec29d8fcede85ab5bc"}
{"id": "meca500_programming_manual_5675", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5675, "length": 81, "hash": "ae0db040a111b95c7272f73864e193a9"}
{"id": "meca500_programming_manual_5676", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the FRF,\nin degrees.", "source": "meca500_programming_manual", "chunk_index": 5676, "length": 98, "hash": "eda60f36f6818715d51d8c8d41e7bb43"}
{"id": "meca500_programming_manual_5677", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the TRF with respect to the FRF,\nin degrees.", "source": "meca500_programming_manual", "chunk_index": 5677, "length": 98, "hash": "eda60f36f6818715d51d8c8d41e7bb43"}
{"id": "meca500_programming_manual_5678", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5678, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5679", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5679, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5680", "text": "In cyclic protocols, the command GetRtTrf (page 286) is represented by the TargetTrf section\n(see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5680, "length": 109, "hash": "658d7654dd48e1069ecae67a1be5dd79"}
{"id": "meca500_programming_manual_5681", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5681, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5682", "text": "(page 286) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5682, "length": 32, "hash": "5c52b112dc3ea6dc6c8c88803c0bd493"}
{"id": "meca500_programming_manual_5683", "text": "section\n(see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5683, "length": 24, "hash": "8d278a56b0bfe56eec58f80c5ec6bfa6"}
{"id": "meca500_programming_manual_5684", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5684, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5685", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5685, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5686", "text": "This command returns the current definition of the WRF with respect to the BRF, set by the\nIt returns exactly the same pose as the GetWrf (page 266)\nSetWrf (page 181) command.\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "meca500_programming_manual", "chunk_index": 5686, "length": 260, "hash": "17be2c12a471585e6a45e84e9d725ab8"}
{"id": "meca500_programming_manual_5687", "text": "This command returns the current definition of the WRF with respect to the BRF, set by the\nIt returns exactly the same pose as the", "source": "meca500_programming_manual", "chunk_index": 5687, "length": 130, "hash": "ce8d44e5925545c9ae6fdd5762069a4e"}
{"id": "meca500_programming_manual_5688", "text": "(page 181) command.\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "meca500_programming_manual", "chunk_index": 5688, "length": 104, "hash": "a37a29fb1c6835d6b256514dfe2f7a13"}
{"id": "meca500_programming_manual_5689", "text": "\u2022 [2228][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5689, "length": 26, "hash": "dbad4e382b05f76e6cbecb123c356300"}
{"id": "meca500_programming_manual_5690", "text": "\u2022 [2228][x, y, z, \u03b1, \u03b2, \u03b3]", "source": "meca500_programming_manual", "chunk_index": 5690, "length": 26, "hash": "dbad4e382b05f76e6cbecb123c356300"}
{"id": "meca500_programming_manual_5691", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5691, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_5692", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 5692, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_5693", "text": "\u2013 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5693, "length": 83, "hash": "ca6c96842f50f5323f9bc866690ce512"}
{"id": "meca500_programming_manual_5694", "text": "x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5694, "length": 81, "hash": "54a34c93965e04204ee415f1cab90e38"}
{"id": "meca500_programming_manual_5695", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the WRF with respect to the\nBRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5695, "length": 98, "hash": "cad96dd7e0bb1e5f11d60958b4b13d01"}
{"id": "meca500_programming_manual_5696", "text": "\u03b1, \u03b2, \u03b3: Euler angles representing the orientation of the WRF with respect to the\nBRF, in degrees.", "source": "meca500_programming_manual", "chunk_index": 5696, "length": 98, "hash": "cad96dd7e0bb1e5f11d60958b4b13d01"}
{"id": "meca500_programming_manual_5697", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5697, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5698", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5698, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5699", "text": "In cyclic protocols, the command GetRtWrf (page 287) is represented by the TargetWrf\nsection (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5699, "length": 109, "hash": "fa47f9f876a150687fb6400408ae4a1c"}
{"id": "meca500_programming_manual_5700", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5700, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5701", "text": "(page 287) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5701, "length": 32, "hash": "77929ebe16c03e9be4ddda1389cdb3e5"}
{"id": "meca500_programming_manual_5702", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5702, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5703", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5703, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5704", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5704, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5705", "text": "This command returns the current Epoch Time in seconds, set using the SetRtc (page 213),\nafter every reboot of the robot. Note that this is different from the timestamp returned by\nall GetRt* commands, which is in microseconds. Furthermore, these two time measurements\nhave different zero references.", "source": "meca500_programming_manual", "chunk_index": 5705, "length": 300, "hash": "31ae45de974a403708c5f35930954fe8"}
{"id": "meca500_programming_manual_5706", "text": "This command returns the current Epoch Time in seconds, set using the", "source": "meca500_programming_manual", "chunk_index": 5706, "length": 69, "hash": "72a870d73498e9158032c41f8ec1c89b"}
{"id": "meca500_programming_manual_5707", "text": "(page 213),\nafter every reboot of the robot. Note that this is different from the timestamp returned by\nall GetRt* commands, which is in microseconds. Furthermore, these two time measurements\nhave different zero references.", "source": "meca500_programming_manual", "chunk_index": 5707, "length": 223, "hash": "d8803a59f33766d2454f3be9507fefb5"}
{"id": "meca500_programming_manual_5708", "text": "\u2013 t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00~UTC", "source": "meca500_programming_manual", "chunk_index": 5708, "length": 78, "hash": "a8b424fb449cfe14f719860dabc088ea"}
{"id": "meca500_programming_manual_5709", "text": "t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00~UTC", "source": "meca500_programming_manual", "chunk_index": 5709, "length": 76, "hash": "7baf12a57ef610b36b4c6e20458ea355"}
{"id": "meca500_programming_manual_5710", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5710, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5711", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5711, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5712", "text": "In cyclic protocols, the command GetRtc (page 288) is represented by the RobotTimestamp\nsection (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5712, "length": 112, "hash": "39c0bb87531e97c24d786a1e4b6600c4"}
{"id": "meca500_programming_manual_5713", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5713, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5714", "text": "(page 288) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5714, "length": 32, "hash": "6fd49ad0a702c164862aa9a9d4134ae7"}
{"id": "meca500_programming_manual_5715", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5715, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5716", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5716, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5717", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5717, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5718", "text": "This command returns the status of specific safety stop signals.", "source": "meca500_programming_manual", "chunk_index": 5718, "length": 64, "hash": "a693c54bd777a71a9387ca52c13cb501"}
{"id": "meca500_programming_manual_5719", "text": "This command returns the status of specific safety stop signals.", "source": "meca500_programming_manual", "chunk_index": 5719, "length": 64, "hash": "a693c54bd777a71a9387ca52c13cb501"}
{"id": "meca500_programming_manual_5720", "text": "GetSafetyStopStatus(n)", "source": "meca500_programming_manual", "chunk_index": 5720, "length": 22, "hash": "06904b4335cfa36d8b8496f0b1e94dc3"}
{"id": "meca500_programming_manual_5721", "text": "GetSafetyStopStatus(n)", "source": "meca500_programming_manual", "chunk_index": 5721, "length": 22, "hash": "06904b4335cfa36d8b8496f0b1e94dc3"}
{"id": "meca500_programming_manual_5722", "text": "\u2022 n: any of the following four-digit codes:", "source": "meca500_programming_manual", "chunk_index": 5722, "length": 43, "hash": "b27de553cd5ac83e71cd356513da7c1b"}
{"id": "meca500_programming_manual_5723", "text": "\u2022 n: any of the following four-digit codes:", "source": "meca500_programming_manual", "chunk_index": 5723, "length": 43, "hash": "b27de553cd5ac83e71cd356513da7c1b"}
{"id": "meca500_programming_manual_5724", "text": "\u2013 3032, for the state of the P-Stop 2 safety stop signal;", "source": "meca500_programming_manual", "chunk_index": 5724, "length": 57, "hash": "acbad64af7e223a5de7de6b46f2c9e36"}
{"id": "meca500_programming_manual_5725", "text": "3032, for the state of the P-Stop 2 safety stop signal;", "source": "meca500_programming_manual", "chunk_index": 5725, "length": 55, "hash": "1bc24df4d8e52a92556acfdf14fffeac"}
{"id": "meca500_programming_manual_5726", "text": "\u2013 3070, for the state of the E-Stop safety stop signal;", "source": "meca500_programming_manual", "chunk_index": 5726, "length": 55, "hash": "4e4953a7896c9cd3144a5fe53d2f176c"}
{"id": "meca500_programming_manual_5727", "text": "3070, for the state of the E-Stop safety stop signal;", "source": "meca500_programming_manual", "chunk_index": 5727, "length": 53, "hash": "ad86006121cbbd92b7f86faf94f9d9ba"}
{"id": "meca500_programming_manual_5728", "text": "\u2013 3083, for the state of the safety stop signal associated with robot reboot or reset", "source": "meca500_programming_manual", "chunk_index": 5728, "length": 85, "hash": "81dadcdf9086b57b4b2c8a82162a072e"}
{"id": "meca500_programming_manual_5729", "text": "3083, for the state of the safety stop signal associated with robot reboot or reset", "source": "meca500_programming_manual", "chunk_index": 5729, "length": 83, "hash": "b65a53c3b1363a3c513706c18f0d7c33"}
{"id": "meca500_programming_manual_5730", "text": "\u2013 3086, for the state of the safety stop signal associated with a connection drop.", "source": "meca500_programming_manual", "chunk_index": 5730, "length": 82, "hash": "46719520ca1313daa891f408540033ac"}
{"id": "meca500_programming_manual_5731", "text": "3086, for the state of the safety stop signal associated with a connection drop.", "source": "meca500_programming_manual", "chunk_index": 5731, "length": 80, "hash": "5ecf33ecdd2b3399ea4ea179fad8f292"}
{"id": "meca500_programming_manual_5732", "text": "\u2013 n: 0, 1 or 2, as described in Section 4.", "source": "meca500_programming_manual", "chunk_index": 5732, "length": 42, "hash": "27cd0ecd8362f1a112c28befcf457dde"}
{"id": "meca500_programming_manual_5733", "text": "n: 0, 1 or 2, as described in Section 4.", "source": "meca500_programming_manual", "chunk_index": 5733, "length": 40, "hash": "727d01efd38c769575576992b18b1dfd"}
{"id": "meca500_programming_manual_5734", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5734, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5735", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5735, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5736", "text": "In cyclic protocols, a broad spectrum of safety-related information is reported in the\nSafetyStatus section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5736, "length": 124, "hash": "c76697c2c965ee18f7a9c6152b509d24"}
{"id": "meca500_programming_manual_5737", "text": "In cyclic protocols, a broad spectrum of safety-related information is reported in the", "source": "meca500_programming_manual", "chunk_index": 5737, "length": 86, "hash": "38365e65038286ea7bb6ce732ac7cd50"}
{"id": "meca500_programming_manual_5738", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5738, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5739", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5739, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5740", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5740, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5741", "text": "This command returns the status of the robot.", "source": "meca500_programming_manual", "chunk_index": 5741, "length": 45, "hash": "abe631dd601dfb6571b37b1f10833ee1"}
{"id": "meca500_programming_manual_5742", "text": "This command returns the status of the robot.", "source": "meca500_programming_manual", "chunk_index": 5742, "length": 45, "hash": "abe631dd601dfb6571b37b1f10833ee1"}
{"id": "meca500_programming_manual_5743", "text": "\u2022 [2007][as, hs, sm, es, pm, eob, eom]", "source": "meca500_programming_manual", "chunk_index": 5743, "length": 38, "hash": "bd78941d3527ea18b9b07926ac0189d0"}
{"id": "meca500_programming_manual_5744", "text": "\u2022 [2007][as, hs, sm, es, pm, eob, eom]", "source": "meca500_programming_manual", "chunk_index": 5744, "length": 38, "hash": "bd78941d3527ea18b9b07926ac0189d0"}
{"id": "meca500_programming_manual_5745", "text": "\u2013 as: activation state (1 if robot is activated, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5745, "length": 62, "hash": "14057834f0e208ae5c6babe80f5d0d84"}
{"id": "meca500_programming_manual_5746", "text": "as: activation state (1 if robot is activated, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5746, "length": 60, "hash": "958065b3c284bb60a4bd6f6852d331ae"}
{"id": "meca500_programming_manual_5747", "text": "\u2013 hs: homing state (1 if homing already performed, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5747, "length": 64, "hash": "a405806da10db129998fccda66092c44"}
{"id": "meca500_programming_manual_5748", "text": "hs: homing state (1 if homing already performed, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5748, "length": 62, "hash": "ef29cf965a02991039c8cfff8f1fa688"}
{"id": "meca500_programming_manual_5749", "text": "\u2013 sm: simulation mode (0 if simulation is disabled, 1 if real-time simulation is enabled,", "source": "meca500_programming_manual", "chunk_index": 5749, "length": 89, "hash": "515eeefb568e5b9f940d33a3820e7231"}
{"id": "meca500_programming_manual_5750", "text": "sm: simulation mode (0 if simulation is disabled, 1 if real-time simulation is enabled,", "source": "meca500_programming_manual", "chunk_index": 5750, "length": 87, "hash": "25bfb9e2733fa492e92db48c4132e4f0"}
{"id": "meca500_programming_manual_5751", "text": "2 if fast simulation is enabled);", "source": "meca500_programming_manual", "chunk_index": 5751, "length": 33, "hash": "9be6f3b32c8dddf94cac16104336d17f"}
{"id": "meca500_programming_manual_5752", "text": "2 if fast simulation is enabled);", "source": "meca500_programming_manual", "chunk_index": 5752, "length": 33, "hash": "9be6f3b32c8dddf94cac16104336d17f"}
{"id": "meca500_programming_manual_5753", "text": "\u2013 es: error status (1 for robot in error mode, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5753, "length": 60, "hash": "e2107bae90047a0c70c6d7eb888b37ec"}
{"id": "meca500_programming_manual_5754", "text": "es: error status (1 for robot in error mode, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5754, "length": 58, "hash": "67319c071819e607250020503e20d90f"}
{"id": "meca500_programming_manual_5755", "text": "\u2013 pm: pause motion status (1 if robot is in pause motion, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5755, "length": 71, "hash": "bd82bcf52cc733a01415842926888228"}
{"id": "meca500_programming_manual_5756", "text": "pm: pause motion status (1 if robot is in pause motion, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 5756, "length": 69, "hash": "54d1aa0b31345d9e12e0fe7afec3906b"}
{"id": "meca500_programming_manual_5757", "text": "\u2013 eob: end of block status (1 if robot is not moving and motion queue is empty, 0", "source": "meca500_programming_manual", "chunk_index": 5757, "length": 81, "hash": "451a7be9c5335f0a39d92e7a879320f6"}
{"id": "meca500_programming_manual_5758", "text": "eob: end of block status (1 if robot is not moving and motion queue is empty, 0", "source": "meca500_programming_manual", "chunk_index": 5758, "length": 79, "hash": "eec3e6912ceaef26879682728cc7c209"}
{"id": "meca500_programming_manual_5759", "text": "\u2013 eom: end of movement status (1 if robot is not moving, 0 if robot is moving).", "source": "meca500_programming_manual", "chunk_index": 5759, "length": 79, "hash": "c9af5cae8f5a2ca91487dd11cf7151da"}
{"id": "meca500_programming_manual_5760", "text": "eom: end of movement status (1 if robot is not moving, 0 if robot is moving).", "source": "meca500_programming_manual", "chunk_index": 5760, "length": 77, "hash": "3682073d4fffb0c3c9ba20cce10521c7"}
{"id": "meca500_programming_manual_5761", "text": "Note that pm = 1 if a PauseMotion (page 195) or a ClearMotion (page 186) was sent, or if the\nrobot is in error mode.", "source": "meca500_programming_manual", "chunk_index": 5761, "length": 116, "hash": "edd32d9d252cdfee1720f9343dd12f0d"}
{"id": "meca500_programming_manual_5762", "text": "Note that pm = 1 if a", "source": "meca500_programming_manual", "chunk_index": 5762, "length": 21, "hash": "9e0e213c7ff2b091f3c85deedd33e561"}
{"id": "meca500_programming_manual_5763", "text": "(page 186) was sent, or if the\nrobot is in error mode.", "source": "meca500_programming_manual", "chunk_index": 5763, "length": 54, "hash": "2525424de20c282ad9a37c348ef4da85"}
{"id": "meca500_programming_manual_5764", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5764, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5765", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5765, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5766", "text": "In cyclic protocols,\nRobotStatus section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5766, "length": 57, "hash": "b7004a0a3c9a97f61f026ed7d437eb47"}
{"id": "meca500_programming_manual_5767", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5767, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5768", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5768, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5769", "text": "the command GetStatusRobot (page 290) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5769, "length": 59, "hash": "3d00fa561e5171bdc9ca044f1fe2b83d"}
{"id": "meca500_programming_manual_5770", "text": "(page 290) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5770, "length": 32, "hash": "6fc771cb817f7c5695836e3436902077"}
{"id": "meca500_programming_manual_5771", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5771, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5772", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5772, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5773", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 5773, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_5774", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 5774, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_5775", "text": "This command returns the status of the torque limits (whether a torque limit is currently\nexceeded).", "source": "meca500_programming_manual", "chunk_index": 5775, "length": 100, "hash": "d539269cac1727e7795e3b6e6a6b0730"}
{"id": "meca500_programming_manual_5776", "text": "This command returns the status of the torque limits (whether a torque limit is currently\nexceeded).", "source": "meca500_programming_manual", "chunk_index": 5776, "length": 100, "hash": "d539269cac1727e7795e3b6e6a6b0730"}
{"id": "meca500_programming_manual_5777", "text": "GetTorqueLimitsStatus()", "source": "meca500_programming_manual", "chunk_index": 5777, "length": 23, "hash": "1da257b480c6a29a155c9cc196bbd998"}
{"id": "meca500_programming_manual_5778", "text": "GetTorqueLimitsStatus()", "source": "meca500_programming_manual", "chunk_index": 5778, "length": 23, "hash": "1da257b480c6a29a155c9cc196bbd998"}
{"id": "meca500_programming_manual_5779", "text": "\u2013 s: status (0 if no detection, 1 if a torque limit was exceeded).", "source": "meca500_programming_manual", "chunk_index": 5779, "length": 66, "hash": "b7413118e3f75985d09754a1e8c630f6"}
{"id": "meca500_programming_manual_5780", "text": "s: status (0 if no detection, 1 if a torque limit was exceeded).", "source": "meca500_programming_manual", "chunk_index": 5780, "length": 64, "hash": "ffd1c533e1975cd3a8786a63dae8badc"}
{"id": "meca500_programming_manual_5781", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5781, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5782", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5782, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5783", "text": "In cyclic protocols, the command GetTorqueLimitsStatus (page 291) is represented by the\nExcessiveTorque section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5783, "length": 128, "hash": "ddb3d9a5609e510052001712b6f3e66a"}
{"id": "meca500_programming_manual_5784", "text": "In cyclic protocols, the command", "source": "meca500_programming_manual", "chunk_index": 5784, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "meca500_programming_manual_5785", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 5785, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_5786", "text": "(page 291) is represented by the", "source": "meca500_programming_manual", "chunk_index": 5786, "length": 32, "hash": "49105e42d14335cc80a5b72ab3ba2110"}
{"id": "meca500_programming_manual_5787", "text": "section (see Section 5).", "source": "meca500_programming_manual", "chunk_index": 5787, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "meca500_programming_manual_5788", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 5788, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_5789", "text": "GetTorqueLimitsStatus", "source": "meca500_programming_manual", "chunk_index": 5789, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "meca500_programming_manual_5790", "text": "Work zone supervision and collision\nprevention commands", "source": "meca500_programming_manual", "chunk_index": 5790, "length": 55, "hash": "0312324781a6e2c8d9f2ba250073c127"}
{"id": "meca500_programming_manual_5791", "text": "Work zone supervision and collision\nprevention commands", "source": "meca500_programming_manual", "chunk_index": 5791, "length": 55, "hash": "0312324781a6e2c8d9f2ba250073c127"}
{"id": "meca500_programming_manual_5792", "text": "In addition to using the SetJointLimits (page 203) and SetJointLimitsCfg (page 204)\ncommands to further constrain the robot\u2019s joint limits, you can also define a work zone with\nthe SetWorkZoneLimits (page 305) command (see Figure 17). This command sets a bounding\nbox in the base reference frame (BRF). Similarly, you can define a \u201ctool sphere\u201d in the flange\nreference frame (FRF) using the SetToolSphere (page 302) command.", "source": "meca500_programming_manual", "chunk_index": 5792, "length": 424, "hash": "5bb74b47bc91002f32c861dc14396196"}
{"id": "meca500_programming_manual_5793", "text": "In addition to using the", "source": "meca500_programming_manual", "chunk_index": 5793, "length": 24, "hash": "81715336e236aa0c7175840fa198b733"}
{"id": "meca500_programming_manual_5794", "text": "(page 204)\ncommands to further constrain the robot\u2019s joint limits, you can also define a work zone with\nthe", "source": "meca500_programming_manual", "chunk_index": 5794, "length": 107, "hash": "e2fd07ee2b63201ded1a3ed319245e23"}
{"id": "meca500_programming_manual_5795", "text": "(page 305) command (see Figure 17). This command sets a bounding\nbox in the base reference frame (BRF). Similarly, you can define a \u201ctool sphere\u201d in the flange\nreference frame (FRF) using the", "source": "meca500_programming_manual", "chunk_index": 5795, "length": 191, "hash": "42dd280aabaa15897db6c7a038fc1add"}
{"id": "meca500_programming_manual_5796", "text": "You can then use the SetWorkZoneCfg (page 303) command to configure the robot to monitor\nwhether its links, tool sphere (including optional tooling), or flange center point (FCP) remain\nwithin the work zone. Additionally, the SetCollisionCfg (page 301) command enables the robot\nto prevent collisions between its links, tool sphere, and optional tooling.", "source": "meca500_programming_manual", "chunk_index": 5796, "length": 354, "hash": "10412749add0f8f66d41c46de852d23d"}
{"id": "meca500_programming_manual_5797", "text": "You can then use the", "source": "meca500_programming_manual", "chunk_index": 5797, "length": 20, "hash": "ab69119bb708a8aca52a0bfda68e9904"}
{"id": "meca500_programming_manual_5798", "text": "(page 303) command to configure the robot to monitor\nwhether its links, tool sphere (including optional tooling), or flange center point (FCP) remain\nwithin the work zone. Additionally, the", "source": "meca500_programming_manual", "chunk_index": 5798, "length": 189, "hash": "e268aacdb4286542b3d273d532ea67dd"}
{"id": "meca500_programming_manual_5799", "text": "(page 301) command enables the robot", "source": "meca500_programming_manual", "chunk_index": 5799, "length": 36, "hash": "ebbd635b90a56987c80d1d919fade130"}
{"id": "meca500_programming_manual_5800", "text": "to prevent collisions between its links, tool sphere, and optional tooling.", "source": "meca500_programming_manual", "chunk_index": 5800, "length": 75, "hash": "36c928b8fadfded81b0d9c7667dd4b48"}
{"id": "meca500_programming_manual_5801", "text": "For both configurations, you can choose to have the robot either generate a warning\n(supervision only) or create a motion error (preventing a work zone breach or collision).\nTypically, you will want to prevent collisions, which is why the term \u201ccollision prevention\u201d\nis used. Conversely, you may only wish to detect work zone breaches without preventing\nthem, hence the term \u201cwork zone supervision.\u201d", "source": "meca500_programming_manual", "chunk_index": 5801, "length": 399, "hash": "a59d517075b6d641fee43e3bff187550"}
{"id": "meca500_programming_manual_5802", "text": "For both configurations, you can choose to have the robot either generate a warning\n(supervision only) or create a motion error (preventing a work zone breach or collision).\nTypically, you will want to prevent collisions, which is why the term \u201ccollision prevention\u201d\nis used. Conversely, you may only wish to detect work zone breaches without preventing\nthem, hence the term \u201cwork zone supervision.\u201d", "source": "meca500_programming_manual", "chunk_index": 5802, "length": 399, "hash": "a59d517075b6d641fee43e3bff187550"}
{"id": "meca500_programming_manual_5803", "text": "Note that you can use the MecaPortal to define these settings. For example, you can enable\nthe display of the work zone and tool sphere through the settings menu in the 3D view panel\nof the MecaPortal. When collisions occur, the colors of the colliding bodies will change to red.", "source": "meca500_programming_manual", "chunk_index": 5803, "length": 279, "hash": "cf2a77b6c5ed51b781b714444fc75841"}
{"id": "meca500_programming_manual_5804", "text": "Note that you can use the MecaPortal to define these settings. For example, you can enable\nthe display of the work zone and tool sphere through the settings menu in the 3D view panel\nof the MecaPortal. When collisions occur, the colors of the colliding bodies will change to red.", "source": "meca500_programming_manual", "chunk_index": 5804, "length": 279, "hash": "cf2a77b6c5ed51b781b714444fc75841"}
{"id": "meca500_programming_manual_5805", "text": "Figure 17 illustrates the objects currently supervised. The base STL model also includes part\nof the cables coming from the base (not shown).", "source": "meca500_programming_manual", "chunk_index": 5805, "length": 141, "hash": "41ab7b3de515c838787c580fe347ace2"}
{"id": "meca500_programming_manual_5806", "text": "Figure 17 illustrates the objects currently supervised. The base STL model also includes part\nof the cables coming from the base (not shown).", "source": "meca500_programming_manual", "chunk_index": 5806, "length": 141, "hash": "41ab7b3de515c838787c580fe347ace2"}
{"id": "meca500_programming_manual_5807", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5807, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5808", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5808, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5809", "text": "Figure 17: Objects tested in the work zone supervision and collision prevention feature", "source": "meca500_programming_manual", "chunk_index": 5809, "length": 87, "hash": "3da2a3aedc171c5e0c445f5547f9aaee"}
{"id": "meca500_programming_manual_5810", "text": "Figure 17: Objects tested in the work zone supervision and collision prevention feature", "source": "meca500_programming_manual", "chunk_index": 5810, "length": 87, "hash": "3da2a3aedc171c5e0c445f5547f9aaee"}
{"id": "meca500_programming_manual_5811", "text": "The work zone supervision and collision prevention feature is not safety rated.\nAdditionally, when the robot handles heavy or large objects at high speeds and with\nsignificant blending, there is a possibility that work zone breaches or collisions may be\ndetected a few milliseconds too late.", "source": "meca500_programming_manual", "chunk_index": 5811, "length": 291, "hash": "d55cb623b9fe0a57eba4eaa03cbecb54"}
{"id": "meca500_programming_manual_5812", "text": "The work zone supervision and collision prevention feature is not safety rated.\nAdditionally, when the robot handles heavy or large objects at high speeds and with\nsignificant blending, there is a possibility that work zone breaches or collisions may be\ndetected a few milliseconds too late.", "source": "meca500_programming_manual", "chunk_index": 5812, "length": 291, "hash": "d55cb623b9fe0a57eba4eaa03cbecb54"}
{"id": "meca500_programming_manual_5813", "text": "The following is the complete list of work zone supervision and collision prevention\ncommands, in alphabetical order:", "source": "meca500_programming_manual", "chunk_index": 5813, "length": 117, "hash": "0d725449497255f18fd6c9375982a917"}
{"id": "meca500_programming_manual_5814", "text": "The following is the complete list of work zone supervision and collision prevention\ncommands, in alphabetical order:", "source": "meca500_programming_manual", "chunk_index": 5814, "length": 117, "hash": "0d725449497255f18fd6c9375982a917"}
{"id": "meca500_programming_manual_5815", "text": "\u2022 GetCollisionStatus (page 296)", "source": "meca500_programming_manual", "chunk_index": 5815, "length": 31, "hash": "b07b5021673130c74017330a86e47c75"}
{"id": "meca500_programming_manual_5816", "text": "\u2022 GetWorkZoneStatus (page 300)", "source": "meca500_programming_manual", "chunk_index": 5816, "length": 30, "hash": "a1d3b9e84a3d16d68d08e4deb60f599b"}
{"id": "meca500_programming_manual_5817", "text": "\u2022 SetCollisionCfg (page 301) / GetCollisionCfg (page 295)", "source": "meca500_programming_manual", "chunk_index": 5817, "length": 57, "hash": "a7d6787a88156ecdde01c03b469cf4ea"}
{"id": "meca500_programming_manual_5818", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5818, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5819", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5819, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5820", "text": "\u2022 SetToolSphere (page 302) / GetToolSphere (page 297)", "source": "meca500_programming_manual", "chunk_index": 5820, "length": 53, "hash": "351fcd3789dfa0a6a168a2d95e2e88d5"}
{"id": "meca500_programming_manual_5821", "text": "\u2022 SetWorkZoneCfg (page 303) / GetWorkZoneCfg (page 298)", "source": "meca500_programming_manual", "chunk_index": 5821, "length": 55, "hash": "394942170edab55815f68013584057ef"}
{"id": "meca500_programming_manual_5822", "text": "\u2022 SetWorkZoneLimits (page 305) / GetWorkZoneLimits (page 299)", "source": "meca500_programming_manual", "chunk_index": 5822, "length": 61, "hash": "d58c1cae5e731bb3b2c30eeec94070d9"}
{"id": "meca500_programming_manual_5823", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5823, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5824", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5824, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5825", "text": "This command returns the severity level set with the SetCollisionCfg (page 301) command.", "source": "meca500_programming_manual", "chunk_index": 5825, "length": 88, "hash": "6d8d158b50180dfb52fea42c1617e549"}
{"id": "meca500_programming_manual_5826", "text": "This command returns the severity level set with the", "source": "meca500_programming_manual", "chunk_index": 5826, "length": 52, "hash": "63a86fe7a3c2339383de6822d321ecf0"}
{"id": "meca500_programming_manual_5827", "text": "\u2013 l: severity level.", "source": "meca500_programming_manual", "chunk_index": 5827, "length": 20, "hash": "719215870fcccfd2b0c56c2eb54c954f"}
{"id": "meca500_programming_manual_5828", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5828, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5829", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5829, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5830", "text": "In cyclic protocols,\nDynamicDataTypeID 36. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5830, "length": 74, "hash": "8daf62f01bfb7ac61b8eec84fcd9dcaa"}
{"id": "meca500_programming_manual_5831", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5831, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5832", "text": "36. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5832, "length": 35, "hash": "fd8d27c43b8772e0e1618381017c9200"}
{"id": "meca500_programming_manual_5833", "text": "the GetCollisionCfg (page 295) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5833, "length": 56, "hash": "98e3a93e3ac7f08ce70e08216a2fafe3"}
{"id": "meca500_programming_manual_5834", "text": "(page 295) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5834, "length": 36, "hash": "fbf1953930afcf8c549781c21eaf72be"}
{"id": "meca500_programming_manual_5835", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5835, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5836", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5836, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5837", "text": "This command returns the current collision status (refer to Figure 17).", "source": "meca500_programming_manual", "chunk_index": 5837, "length": 71, "hash": "a4ab0971817436609a1fc9b1a6132b79"}
{"id": "meca500_programming_manual_5838", "text": "This command returns the current collision status (refer to Figure 17).", "source": "meca500_programming_manual", "chunk_index": 5838, "length": 71, "hash": "a4ab0971817436609a1fc9b1a6132b79"}
{"id": "meca500_programming_manual_5839", "text": "\u2022 [2182][v, g1, oid,1, g2, oid,2]", "source": "meca500_programming_manual", "chunk_index": 5839, "length": 33, "hash": "106924612fb8fac167d443c668329d24"}
{"id": "meca500_programming_manual_5840", "text": "\u2013 v: collision state (1 or 0\u2020),", "source": "meca500_programming_manual", "chunk_index": 5840, "length": 31, "hash": "17dd05b44958a16a5d44eee601398f18"}
{"id": "meca500_programming_manual_5841", "text": "v: collision state (1 or 0", "source": "meca500_programming_manual", "chunk_index": 5841, "length": 26, "hash": "97244efdecd6b3c2d26d843116400018"}
{"id": "meca500_programming_manual_5842", "text": "\u2013 g1, g2: group identifier of first and second colliding objects:", "source": "meca500_programming_manual", "chunk_index": 5842, "length": 65, "hash": "f6bf6dc25c7d6cf8bbb96ec67b4cce03"}
{"id": "meca500_programming_manual_5843", "text": ": group identifier of first and second colliding objects:", "source": "meca500_programming_manual", "chunk_index": 5843, "length": 57, "hash": "1c3ad7aee4fcfb2b3ba9b0a7e67d787f"}
{"id": "meca500_programming_manual_5844", "text": "\u2013 oid,1, oid,2: object ID of first and second in collision, depending on group identifier,", "source": "meca500_programming_manual", "chunk_index": 5844, "length": 90, "hash": "c93376286ffe96aee661b15373cb436f"}
{"id": "meca500_programming_manual_5845", "text": ": object ID of first and second in collision, depending on group identifier,", "source": "meca500_programming_manual", "chunk_index": 5845, "length": 76, "hash": "13c92bd55860ac9b59b6c76e83870adc"}
{"id": "meca500_programming_manual_5846", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "meca500_programming_manual", "chunk_index": 5846, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "meca500_programming_manual_5847", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "meca500_programming_manual", "chunk_index": 5847, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "meca500_programming_manual_5848", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "meca500_programming_manual", "chunk_index": 5848, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "meca500_programming_manual_5849", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "meca500_programming_manual", "chunk_index": 5849, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "meca500_programming_manual_5850", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 10,000 for MPM500, .", "source": "meca500_programming_manual", "chunk_index": 5850, "length": 58, "hash": "7869c9d73c396b8612a1ff79dead7bf7"}
{"id": "meca500_programming_manual_5851", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 10,000 for MPM500, .", "source": "meca500_programming_manual", "chunk_index": 5851, "length": 58, "hash": "7869c9d73c396b8612a1ff79dead7bf7"}
{"id": "meca500_programming_manual_5852", "text": "\u2020 If v = 0, g1 = g2 = oid,1 = oid,2 = 0.", "source": "meca500_programming_manual", "chunk_index": 5852, "length": 40, "hash": "cf0569e5e52f8f806248ca29c0de90df"}
{"id": "meca500_programming_manual_5853", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5853, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5854", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5854, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5855", "text": "In cyclic protocols,\nDynamicDataTypeID 37. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5855, "length": 74, "hash": "d2e6b699b186e8ebfbebba14aa3190c6"}
{"id": "meca500_programming_manual_5856", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5856, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5857", "text": "37. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5857, "length": 35, "hash": "fdbcb706e0ac08bbf287b9fc0ef2bcd2"}
{"id": "meca500_programming_manual_5858", "text": "the GetCollisionStatus (page 296) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5858, "length": 59, "hash": "4af859c1c68f1c8c7e52897c544b8cd3"}
{"id": "meca500_programming_manual_5859", "text": "(page 296) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5859, "length": 36, "hash": "2f7149722cd538fa47ab4d51e7bc51e6"}
{"id": "meca500_programming_manual_5860", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5860, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5861", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5861, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5862", "text": "This command returns the current definition of the tool sphere, set with the SetToolSphere\n(page 302) command.", "source": "meca500_programming_manual", "chunk_index": 5862, "length": 110, "hash": "3f8879eee6e5686e93a050207ddd5553"}
{"id": "meca500_programming_manual_5863", "text": "This command returns the current definition of the tool sphere, set with the", "source": "meca500_programming_manual", "chunk_index": 5863, "length": 76, "hash": "2340bb5bd82e94e88b0bc7590f64d127"}
{"id": "meca500_programming_manual_5864", "text": "\u2022 [2167][x, y, z, r]", "source": "meca500_programming_manual", "chunk_index": 5864, "length": 20, "hash": "f5db7da9cfbd5c91fb213db98322a6e0"}
{"id": "meca500_programming_manual_5865", "text": "\u2022 [2167][x, y, z, r]", "source": "meca500_programming_manual", "chunk_index": 5865, "length": 20, "hash": "f5db7da9cfbd5c91fb213db98322a6e0"}
{"id": "meca500_programming_manual_5866", "text": "\u2013 x, y, z: the coordinates of the center of the tool sphere with respect to the FRF, in", "source": "meca500_programming_manual", "chunk_index": 5866, "length": 87, "hash": "eea3ef8183a887f74373845208059a7d"}
{"id": "meca500_programming_manual_5867", "text": "x, y, z: the coordinates of the center of the tool sphere with respect to the FRF, in", "source": "meca500_programming_manual", "chunk_index": 5867, "length": 85, "hash": "20f40a2a9d4352609810d8f512981154"}
{"id": "meca500_programming_manual_5868", "text": "\u2013 r: the radius of the tool sphere, in mm.", "source": "meca500_programming_manual", "chunk_index": 5868, "length": 42, "hash": "6c67830eca4edabb08947fa6562e0988"}
{"id": "meca500_programming_manual_5869", "text": "r: the radius of the tool sphere, in mm.", "source": "meca500_programming_manual", "chunk_index": 5869, "length": 40, "hash": "34d043a75fdcfd6d02919675901921b7"}
{"id": "meca500_programming_manual_5870", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5870, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5871", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5871, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5872", "text": "In cyclic protocols,\nDynamicDataTypeID 19. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5872, "length": 74, "hash": "bd725a292ad81f1b96679756b2a226eb"}
{"id": "meca500_programming_manual_5873", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5873, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5874", "text": "19. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5874, "length": 35, "hash": "a6a9318481953a6f5537b0be8a84b9cd"}
{"id": "meca500_programming_manual_5875", "text": "the GetToolSphere (page 297) command is", "source": "meca500_programming_manual", "chunk_index": 5875, "length": 39, "hash": "3c46f9ce427188a861ea808bfdc298a4"}
{"id": "meca500_programming_manual_5876", "text": "(page 297) command is", "source": "meca500_programming_manual", "chunk_index": 5876, "length": 21, "hash": "55939b35a1f093bc79527f84cc1c2fee"}
{"id": "meca500_programming_manual_5877", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5877, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5878", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5878, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5879", "text": "This command returns the current work zone configuration, set with the SetWorkZoneCfg\n(page 303) command.", "source": "meca500_programming_manual", "chunk_index": 5879, "length": 105, "hash": "fbcc711fae18765c6894854a8b04fcc6"}
{"id": "meca500_programming_manual_5880", "text": "This command returns the current work zone configuration, set with the", "source": "meca500_programming_manual", "chunk_index": 5880, "length": 70, "hash": "31cf0b5e3b5f7b53c9d52f73c0747088"}
{"id": "meca500_programming_manual_5881", "text": "\u2013 l: event severity;", "source": "meca500_programming_manual", "chunk_index": 5881, "length": 20, "hash": "7b56f9cbd50b4d3219e951cab4c9ab25"}
{"id": "meca500_programming_manual_5882", "text": "\u2013 m: supervision mode.", "source": "meca500_programming_manual", "chunk_index": 5882, "length": 22, "hash": "9849931da139b98cae7e55ce99012d7a"}
{"id": "meca500_programming_manual_5883", "text": "m: supervision mode.", "source": "meca500_programming_manual", "chunk_index": 5883, "length": 20, "hash": "2c6d1eebe2564b434227024658dca1fc"}
{"id": "meca500_programming_manual_5884", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5884, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5885", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5885, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5886", "text": "In cyclic protocols,\nDynamicDataTypeID 17. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5886, "length": 74, "hash": "b647e2c0457e34c087e0e93964df1a5c"}
{"id": "meca500_programming_manual_5887", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5887, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5888", "text": "17. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5888, "length": 35, "hash": "75b8e07ed3415901ce52f98371b7d154"}
{"id": "meca500_programming_manual_5889", "text": "the GetWorkZoneCfg (page 298) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5889, "length": 55, "hash": "e58798af05638b70bca4e69b563f7081"}
{"id": "meca500_programming_manual_5890", "text": "(page 298) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5890, "length": 36, "hash": "8be02362aee638d4ec797e7808c28cd0"}
{"id": "meca500_programming_manual_5891", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5891, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5892", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5892, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5893", "text": "This command returns the current definition of the bounding box with respect to the BRF, set\nwith the SetWorkZoneLimits (page 305) command.", "source": "meca500_programming_manual", "chunk_index": 5893, "length": 139, "hash": "ca76d8bd0876cf2729366dd11c55537d"}
{"id": "meca500_programming_manual_5894", "text": "This command returns the current definition of the bounding box with respect to the BRF, set\nwith the", "source": "meca500_programming_manual", "chunk_index": 5894, "length": 101, "hash": "d21365f4f9820ef64af9bed9841c2653"}
{"id": "meca500_programming_manual_5895", "text": "\u2022 [2165][xmin, ymin, zmin, xmax, ymax, zmax]", "source": "meca500_programming_manual", "chunk_index": 5895, "length": 44, "hash": "180df2ab250b080d0b9d0af64e7d3d4a"}
{"id": "meca500_programming_manual_5896", "text": "\u2013 xmin, ymin, zmin: the coordinates of the minimum corner of the cuboid in the BRF, in", "source": "meca500_programming_manual", "chunk_index": 5896, "length": 86, "hash": "8e94c6821601e12febf59590c41cc063"}
{"id": "meca500_programming_manual_5897", "text": ": the coordinates of the minimum corner of the cuboid in the BRF, in", "source": "meca500_programming_manual", "chunk_index": 5897, "length": 68, "hash": "1b85103bf20f6d39672ce71f7a1407a3"}
{"id": "meca500_programming_manual_5898", "text": "\u2013 xmax, ymax, zmax: the coordinates of the maximum corner of the cuboid in the BRF, in", "source": "meca500_programming_manual", "chunk_index": 5898, "length": 86, "hash": "7dccc68a990546feb71988703e85bc7a"}
{"id": "meca500_programming_manual_5899", "text": ": the coordinates of the maximum corner of the cuboid in the BRF, in", "source": "meca500_programming_manual", "chunk_index": 5899, "length": 68, "hash": "7b33b7cbad15548e3c0e54f1cbf4c3f0"}
{"id": "meca500_programming_manual_5900", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5900, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5901", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5901, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5902", "text": "In cyclic protocols,\nDynamicDataTypeID 18. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5902, "length": 74, "hash": "4e7f99b1a26f4a27004a14be08243435"}
{"id": "meca500_programming_manual_5903", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5903, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5904", "text": "18. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5904, "length": 35, "hash": "610a1054e2a5621209792edb6131409f"}
{"id": "meca500_programming_manual_5905", "text": "the GetWorkZoneLimits (page 299) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5905, "length": 58, "hash": "2fb57a8cdad69bed8092530c8fd361de"}
{"id": "meca500_programming_manual_5906", "text": "(page 299) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5906, "length": 36, "hash": "7434bf9af21cef8bebe70a478b3c360e"}
{"id": "meca500_programming_manual_5907", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5907, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5908", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5908, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5909", "text": "This command returns the current work zone violation status (refer to Figure 17).", "source": "meca500_programming_manual", "chunk_index": 5909, "length": 81, "hash": "02ca578673f88cccfd9ea88ea9ab7d78"}
{"id": "meca500_programming_manual_5910", "text": "This command returns the current work zone violation status (refer to Figure 17).", "source": "meca500_programming_manual", "chunk_index": 5910, "length": 81, "hash": "02ca578673f88cccfd9ea88ea9ab7d78"}
{"id": "meca500_programming_manual_5911", "text": "\u2013 v: work zone violation state (1 or 0\u2020),", "source": "meca500_programming_manual", "chunk_index": 5911, "length": 41, "hash": "477231a717d501f20138669c01c4ceb0"}
{"id": "meca500_programming_manual_5912", "text": "v: work zone violation state (1 or 0", "source": "meca500_programming_manual", "chunk_index": 5912, "length": 36, "hash": "1dfa3f8089c1983cc380efb28344e7fe"}
{"id": "meca500_programming_manual_5913", "text": "\u2013 g: group identifier of object in breach: - 0 for links - 1 for FCP - and 2 for tool", "source": "meca500_programming_manual", "chunk_index": 5913, "length": 85, "hash": "052f2dc61032707702ff57a38f4da879"}
{"id": "meca500_programming_manual_5914", "text": "g: group identifier of object in breach: - 0 for links - 1 for FCP - and 2 for tool", "source": "meca500_programming_manual", "chunk_index": 5914, "length": 83, "hash": "c57c99b1dfda6347b8f9a160fb71198a"}
{"id": "meca500_programming_manual_5915", "text": "\u2013 oid: object ID, depending on group identifier number, as follows:", "source": "meca500_programming_manual", "chunk_index": 5915, "length": 67, "hash": "9a6048fbfa81fb3d587092981d17d489"}
{"id": "meca500_programming_manual_5916", "text": ": object ID, depending on group identifier number, as follows:", "source": "meca500_programming_manual", "chunk_index": 5916, "length": 62, "hash": "4c2925ee89c643aa631af0587ef9eaeb"}
{"id": "meca500_programming_manual_5917", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "meca500_programming_manual", "chunk_index": 5917, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "meca500_programming_manual_5918", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "meca500_programming_manual", "chunk_index": 5918, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "meca500_programming_manual_5919", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "meca500_programming_manual", "chunk_index": 5919, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "meca500_programming_manual_5920", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "meca500_programming_manual", "chunk_index": 5920, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "meca500_programming_manual_5921", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 10,000 for MPM500, .", "source": "meca500_programming_manual", "chunk_index": 5921, "length": 58, "hash": "7869c9d73c396b8612a1ff79dead7bf7"}
{"id": "meca500_programming_manual_5922", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 10,000 for MPM500, .", "source": "meca500_programming_manual", "chunk_index": 5922, "length": 58, "hash": "7869c9d73c396b8612a1ff79dead7bf7"}
{"id": "meca500_programming_manual_5923", "text": "\u2020 If v = 0, g = oid = 0.", "source": "meca500_programming_manual", "chunk_index": 5923, "length": 24, "hash": "d09d07bc821150cc270544d0174610ec"}
{"id": "meca500_programming_manual_5924", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5924, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5925", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 5925, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_5926", "text": "In cyclic protocols,\nDynamicDataTypeID 38. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5926, "length": 74, "hash": "214f37c6d6e184ce2277b57145d42e25"}
{"id": "meca500_programming_manual_5927", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5927, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5928", "text": "38. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5928, "length": 35, "hash": "174de2991caf1ce971edbcb60daccd50"}
{"id": "meca500_programming_manual_5929", "text": "the GetWorkZoneStatus (page 300) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5929, "length": 58, "hash": "28d2c2301f1b428a79c67233f1f1ac2d"}
{"id": "meca500_programming_manual_5930", "text": "(page 300) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5930, "length": 36, "hash": "5511fc5619165904731fb721a97b378d"}
{"id": "meca500_programming_manual_5931", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5931, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5932", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5932, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5933", "text": "This command specifies the event severity for the collision supervision (robot links, tool\nsphere, andMPM500 module).", "source": "meca500_programming_manual", "chunk_index": 5933, "length": 117, "hash": "2e26a13b078ca0aa0aef5f25a06be641"}
{"id": "meca500_programming_manual_5934", "text": "This command specifies the event severity for the collision supervision (robot links, tool\nsphere, andMPM500 module).", "source": "meca500_programming_manual", "chunk_index": 5934, "length": 117, "hash": "2e26a13b078ca0aa0aef5f25a06be641"}
{"id": "meca500_programming_manual_5935", "text": "\u2022 l: integer defining the collision detection event severity as", "source": "meca500_programming_manual", "chunk_index": 5935, "length": 63, "hash": "72fe62ba30ad5d301c83dbbb4e523033"}
{"id": "meca500_programming_manual_5936", "text": "\u2022 l: integer defining the collision detection event severity as", "source": "meca500_programming_manual", "chunk_index": 5936, "length": 63, "hash": "72fe62ba30ad5d301c83dbbb4e523033"}
{"id": "meca500_programming_manual_5937", "text": "\u2013 0, silent (i.e., collisions are verified but no action is taken, other than to log them", "source": "meca500_programming_manual", "chunk_index": 5937, "length": 89, "hash": "1f5deb79aa9aae0ea4f31db3acb863aa"}
{"id": "meca500_programming_manual_5938", "text": "0, silent (i.e., collisions are verified but no action is taken, other than to log them", "source": "meca500_programming_manual", "chunk_index": 5938, "length": 87, "hash": "7dc6b73cf29f31814e17a5cef7c73a79"}
{"id": "meca500_programming_manual_5939", "text": "\u2013 1, generate a warning (message [2182]) every time a new imminent collision is", "source": "meca500_programming_manual", "chunk_index": 5939, "length": 79, "hash": "2f5da25fd733508899ce484597ce15b2"}
{"id": "meca500_programming_manual_5940", "text": "1, generate a warning (message [2182]) every time a new imminent collision is", "source": "meca500_programming_manual", "chunk_index": 5940, "length": 77, "hash": "192db6644ac0f293cd7dcd6eb2c97357"}
{"id": "meca500_programming_manual_5941", "text": "\u2013 4, generate a warning (message [2182]) and a motion error (message [3041]) every", "source": "meca500_programming_manual", "chunk_index": 5941, "length": 82, "hash": "886ad5ce9ca9b1abedbf5add3ce5ab71"}
{"id": "meca500_programming_manual_5942", "text": "4, generate a warning (message [2182]) and a motion error (message [3041]) every", "source": "meca500_programming_manual", "chunk_index": 5942, "length": 80, "hash": "ff7749c0e4d956c1e61b09ad3649be96"}
{"id": "meca500_programming_manual_5943", "text": "time a new imminent collision is detected.", "source": "meca500_programming_manual", "chunk_index": 5943, "length": 42, "hash": "16fb54893fd6de047b79c4ca2b45424e"}
{"id": "meca500_programming_manual_5944", "text": "time a new imminent collision is detected.", "source": "meca500_programming_manual", "chunk_index": 5944, "length": 42, "hash": "16fb54893fd6de047b79c4ca2b45424e"}
{"id": "meca500_programming_manual_5945", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 4.", "source": "meca500_programming_manual", "chunk_index": 5945, "length": 110, "hash": "56de45cbefcf58f7adc65fca0b6687ab"}
{"id": "meca500_programming_manual_5946", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 5946, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "meca500_programming_manual_5947", "text": "The factory\ndefault is 4.", "source": "meca500_programming_manual", "chunk_index": 5947, "length": 25, "hash": "1bad42a3b050d532943f1ce13f1c6afd"}
{"id": "meca500_programming_manual_5948", "text": "\u2022 [2180] [Collision configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 5948, "length": 52, "hash": "97ae23695a11a3e79b644e4f6648feb3"}
{"id": "meca500_programming_manual_5949", "text": "\u2022 [2180] [Collision configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 5949, "length": 52, "hash": "97ae23695a11a3e79b644e4f6648feb3"}
{"id": "meca500_programming_manual_5950", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 5950, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_5951", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 5951, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_5952", "text": "In cyclic protocols,\nMotionCommandID 154. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5952, "length": 73, "hash": "e03545a6a764b040cb7ff8140139ba03"}
{"id": "meca500_programming_manual_5953", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5953, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5954", "text": "154. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5954, "length": 36, "hash": "272d31da68f260ea9509763e6845fcb9"}
{"id": "meca500_programming_manual_5955", "text": "the SetCollisionCfg (page 301) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5955, "length": 56, "hash": "907d8cb9313588232ddeee3f1abc7f7b"}
{"id": "meca500_programming_manual_5956", "text": "(page 301) command is represented by", "source": "meca500_programming_manual", "chunk_index": 5956, "length": 36, "hash": "b6681f55eb59a91c77bb9b7a9b3c7e59"}
{"id": "meca500_programming_manual_5957", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5957, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5958", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5958, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5959", "text": "This command defines a sphere fixed in the flange reference frame (FRF). Interferences\nbetween that sphere and the robot links as well as the outside of a bounding box set with\nthe SetWorkZoneLimits (page 305) command can then be supervised, as defined by the\nSetWorkZoneCfg (page 303) and SetCollisionCfg (page 301) commands.", "source": "meca500_programming_manual", "chunk_index": 5959, "length": 326, "hash": "d0d14c0a20e7b8748406100ef2fac7ae"}
{"id": "meca500_programming_manual_5960", "text": "This command defines a sphere fixed in the flange reference frame (FRF). Interferences\nbetween that sphere and the robot links as well as the outside of a bounding box set with\nthe", "source": "meca500_programming_manual", "chunk_index": 5960, "length": 180, "hash": "d59f22c75ae7be2f7cbe7ae3611d0bd3"}
{"id": "meca500_programming_manual_5961", "text": "(page 305) command can then be supervised, as defined by the", "source": "meca500_programming_manual", "chunk_index": 5961, "length": 60, "hash": "db43ed6cac2512c0def60a232fa668fa"}
{"id": "meca500_programming_manual_5962", "text": "(page 301) commands.", "source": "meca500_programming_manual", "chunk_index": 5962, "length": 20, "hash": "0489ce6453edf8b5d9f63bb71d42beb3"}
{"id": "meca500_programming_manual_5963", "text": "SetToolSphere(x,y,z,r)", "source": "meca500_programming_manual", "chunk_index": 5963, "length": 22, "hash": "70eb6ba6afec1bf09e5037fa52dd49fe"}
{"id": "meca500_programming_manual_5964", "text": "SetToolSphere(x,y,z,r)", "source": "meca500_programming_manual", "chunk_index": 5964, "length": 22, "hash": "70eb6ba6afec1bf09e5037fa52dd49fe"}
{"id": "meca500_programming_manual_5965", "text": "\u2022 x, y, z: the coordinates of the center of the tool sphere in the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5965, "length": 78, "hash": "fa126ee195d792c7f71c69dddeec8211"}
{"id": "meca500_programming_manual_5966", "text": "\u2022 x, y, z: the coordinates of the center of the tool sphere in the FRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 5966, "length": 78, "hash": "fa126ee195d792c7f71c69dddeec8211"}
{"id": "meca500_programming_manual_5967", "text": "\u2022 r: the radius of the tool sphere, in mm.", "source": "meca500_programming_manual", "chunk_index": 5967, "length": 42, "hash": "4224063126d5a90524fa1fd11d9da33f"}
{"id": "meca500_programming_manual_5968", "text": "\u2022 r: the radius of the tool sphere, in mm.", "source": "meca500_programming_manual", "chunk_index": 5968, "length": 42, "hash": "4224063126d5a90524fa1fd11d9da33f"}
{"id": "meca500_programming_manual_5969", "text": "This setting is persistent and retains its values even after power cycling the robot. The factory\ndefault is x = y = z = 0 and r = 0. Note that setting all four arguments to zero is equivalent\nto disabling the tool sphere. However, if r = 0, but one of the coordinates is not zero, the tool\nsphere will be a point.", "source": "meca500_programming_manual", "chunk_index": 5969, "length": 314, "hash": "43d459ca8f4dac855f42c32482ac2529"}
{"id": "meca500_programming_manual_5970", "text": "This setting is persistent and retains its values even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 5970, "length": 85, "hash": "6f03cf33740f56264ec51eace1f757dc"}
{"id": "meca500_programming_manual_5971", "text": "The factory\ndefault is x = y = z = 0 and r = 0. Note that setting all four arguments to zero is equivalent\nto disabling the tool sphere. However, if r = 0, but one of the coordinates is not zero, the tool\nsphere will be a point.", "source": "meca500_programming_manual", "chunk_index": 5971, "length": 228, "hash": "0ae2c86281df22872b023da9f4f79862"}
{"id": "meca500_programming_manual_5972", "text": "\u2022 [2168] [Tool sphere set successfully.]", "source": "meca500_programming_manual", "chunk_index": 5972, "length": 40, "hash": "e5b66019325902679ff11301df11b80d"}
{"id": "meca500_programming_manual_5973", "text": "\u2022 [2168] [Tool sphere set successfully.]", "source": "meca500_programming_manual", "chunk_index": 5973, "length": 40, "hash": "e5b66019325902679ff11301df11b80d"}
{"id": "meca500_programming_manual_5974", "text": "The Meca500 does not check interferences between the tool sphere and the robot flange,\nthe tool sphere and link 5 (the one with the I/O port and the \u201c\u2212A6+\u201d engraving), and the\ntool sphere and the MPM500 module. Note that, if you set your tool sphere too large, e.g.,\nwith SetToolSphere(0,0,060) (page 302), it will always interfere with link 4, i.e., the yoke\none with the \u201c\u2212A5+\u201d engraving.", "source": "meca500_programming_manual", "chunk_index": 5974, "length": 390, "hash": "1df49606c301ec9b8b816e38a871e97d"}
{"id": "meca500_programming_manual_5975", "text": "The Meca500 does not check interferences between the tool sphere and the robot flange,\nthe tool sphere and link 5 (the one with the I/O port and the \u201c\u2212A6+\u201d engraving), and the\ntool sphere and the MPM500 module. Note that, if you set your tool sphere too large, e.g.,", "source": "meca500_programming_manual", "chunk_index": 5975, "length": 266, "hash": "268b8a69eaa0d3fb17f063642eb7402b"}
{"id": "meca500_programming_manual_5976", "text": "SetToolSphere(0,0,060)", "source": "meca500_programming_manual", "chunk_index": 5976, "length": 22, "hash": "997354fc01ab078e6189188476f14d55"}
{"id": "meca500_programming_manual_5977", "text": "(page 302), it will always interfere with link 4, i.e., the yoke\none with the \u201c\u2212A5+\u201d engraving.", "source": "meca500_programming_manual", "chunk_index": 5977, "length": 95, "hash": "be19956912b702182eaf1dfe91a09a2f"}
{"id": "meca500_programming_manual_5978", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 5978, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_5979", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 5979, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_5980", "text": "In cyclic protocols,\nMotionCommandID 155. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5980, "length": 73, "hash": "41fae0964b3b93f6bf6e75d75aee54ec"}
{"id": "meca500_programming_manual_5981", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 5981, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_5982", "text": "155. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 5982, "length": 36, "hash": "ad8a649638f5b9c7b015d3ed69905307"}
{"id": "meca500_programming_manual_5983", "text": "the SetToolSphere (page 302) command is", "source": "meca500_programming_manual", "chunk_index": 5983, "length": 39, "hash": "3a268f6953b3068f5be8e4b07b899165"}
{"id": "meca500_programming_manual_5984", "text": "(page 302) command is", "source": "meca500_programming_manual", "chunk_index": 5984, "length": 21, "hash": "467600c49c453f4764b32034331ad93d"}
{"id": "meca500_programming_manual_5985", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5985, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5986", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 5986, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_5987", "text": "This command specifies the \u201cevent severity\u201d for the work zone limits supervision and the\nrobot parts that need to be verified.", "source": "meca500_programming_manual", "chunk_index": 5987, "length": 126, "hash": "68aaf947621cb4d06786f65569ea62d7"}
{"id": "meca500_programming_manual_5988", "text": "This command specifies the \u201cevent severity\u201d for the work zone limits supervision and the\nrobot parts that need to be verified.", "source": "meca500_programming_manual", "chunk_index": 5988, "length": 126, "hash": "68aaf947621cb4d06786f65569ea62d7"}
{"id": "meca500_programming_manual_5989", "text": "\u2022 l: integer defining the work zone breach detection event severity as", "source": "meca500_programming_manual", "chunk_index": 5989, "length": 70, "hash": "dacebba83fd166cd11cff636cc910f44"}
{"id": "meca500_programming_manual_5990", "text": "\u2022 l: integer defining the work zone breach detection event severity as", "source": "meca500_programming_manual", "chunk_index": 5990, "length": 70, "hash": "dacebba83fd166cd11cff636cc910f44"}
{"id": "meca500_programming_manual_5991", "text": "\u2013 0: silent (i.e., work zone breach is verified but no action is taken, other than to log", "source": "meca500_programming_manual", "chunk_index": 5991, "length": 89, "hash": "4eafbd4a3401817deb0e8c64e4adc3fd"}
{"id": "meca500_programming_manual_5992", "text": "0: silent (i.e., work zone breach is verified but no action is taken, other than to log", "source": "meca500_programming_manual", "chunk_index": 5992, "length": 87, "hash": "2900324aafcc3fb1e1e5070fe257e1bc"}
{"id": "meca500_programming_manual_5993", "text": "\u2013 1: generate a warning (message [2183]) every time a new imminent work zone", "source": "meca500_programming_manual", "chunk_index": 5993, "length": 76, "hash": "85a1f4140f5b12a3818125f53b7355e7"}
{"id": "meca500_programming_manual_5994", "text": "1: generate a warning (message [2183]) every time a new imminent work zone", "source": "meca500_programming_manual", "chunk_index": 5994, "length": 74, "hash": "35905ac1a39410206ca326e7c518dfb1"}
{"id": "meca500_programming_manual_5995", "text": "\u2013 4: generate a warning (message [2183]) and a motion error (message [3049]) every", "source": "meca500_programming_manual", "chunk_index": 5995, "length": 82, "hash": "63e6bbe03c0950bbe06f5565a9c4232a"}
{"id": "meca500_programming_manual_5996", "text": "4: generate a warning (message [2183]) and a motion error (message [3049]) every", "source": "meca500_programming_manual", "chunk_index": 5996, "length": 80, "hash": "cf28b43e04146af9820c58861cafe993"}
{"id": "meca500_programming_manual_5997", "text": "time a new imminent work zone breach is detected.", "source": "meca500_programming_manual", "chunk_index": 5997, "length": 49, "hash": "eadcd1ac9e03c2526e7d85d8e756391e"}
{"id": "meca500_programming_manual_5998", "text": "time a new imminent work zone breach is detected.", "source": "meca500_programming_manual", "chunk_index": 5998, "length": 49, "hash": "eadcd1ac9e03c2526e7d85d8e756391e"}
{"id": "meca500_programming_manual_5999", "text": "\u2022 m: integer defining the work zone breach verification mode as", "source": "meca500_programming_manual", "chunk_index": 5999, "length": 63, "hash": "4a9ae41a4bd397e51a3e9a296699484a"}
{"id": "meca500_programming_manual_6000", "text": "\u2022 m: integer defining the work zone breach verification mode as", "source": "meca500_programming_manual", "chunk_index": 6000, "length": 63, "hash": "4a9ae41a4bd397e51a3e9a296699484a"}
{"id": "meca500_programming_manual_6001", "text": "\u2013 1: verify whether the FCP (flange center point) is inside the work zone;", "source": "meca500_programming_manual", "chunk_index": 6001, "length": 74, "hash": "fc669b1a6940428228421914607cf784"}
{"id": "meca500_programming_manual_6002", "text": "1: verify whether the FCP (flange center point) is inside the work zone;", "source": "meca500_programming_manual", "chunk_index": 6002, "length": 72, "hash": "30dcd05e18dbfc548161967a3e55db6e"}
{"id": "meca500_programming_manual_6003", "text": "\u2013 2: verify whether the tool is completely inside the work zone (tool is the tool sphere\ndefined with the SetToolSphere (page 302) command, and the MPM500 module if\ndetected on the Meca500);", "source": "meca500_programming_manual", "chunk_index": 6003, "length": 190, "hash": "6bfef3c3fb1b625efb1d4a50ef459b89"}
{"id": "meca500_programming_manual_6004", "text": "2: verify whether the tool is completely inside the work zone (tool is the tool sphere\ndefined with the", "source": "meca500_programming_manual", "chunk_index": 6004, "length": 103, "hash": "fbcaa3052c42200e6895307ec50e6a32"}
{"id": "meca500_programming_manual_6005", "text": "(page 302) command, and the MPM500 module if\ndetected on the Meca500);", "source": "meca500_programming_manual", "chunk_index": 6005, "length": 70, "hash": "054c1cb735c02f565324303057415679"}
{"id": "meca500_programming_manual_6006", "text": "\u2013 3: verify whether the tool AND all robot links are completely inside the work zone.", "source": "meca500_programming_manual", "chunk_index": 6006, "length": 85, "hash": "bc3278beb4fc59951d877bb050d0a215"}
{"id": "meca500_programming_manual_6007", "text": "3: verify whether the tool AND all robot links are completely inside the work zone.", "source": "meca500_programming_manual", "chunk_index": 6007, "length": 83, "hash": "086d006cc3e5a3bd051f1f677fa7cf05"}
{"id": "meca500_programming_manual_6008", "text": "This setting is persistent and retains its values even after power cycling the robot. The factory\ndefault is l = 4 and m = 1.", "source": "meca500_programming_manual", "chunk_index": 6008, "length": 125, "hash": "16276974cc6a1a6d795d272dc71848cc"}
{"id": "meca500_programming_manual_6009", "text": "This setting is persistent and retains its values even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 6009, "length": 85, "hash": "6f03cf33740f56264ec51eace1f757dc"}
{"id": "meca500_programming_manual_6010", "text": "The factory\ndefault is l = 4 and m = 1.", "source": "meca500_programming_manual", "chunk_index": 6010, "length": 39, "hash": "d9313861f16afa304901ae02d5400702"}
{"id": "meca500_programming_manual_6011", "text": "\u2022 [2164] [Work zone configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 6011, "length": 52, "hash": "17573efae1140bf5be68e0b7aa42b975"}
{"id": "meca500_programming_manual_6012", "text": "\u2022 [2164] [Work zone configuration set successfully.]", "source": "meca500_programming_manual", "chunk_index": 6012, "length": 52, "hash": "17573efae1140bf5be68e0b7aa42b975"}
{"id": "meca500_programming_manual_6013", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6013, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_6014", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6014, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_6015", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6015, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6016", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6016, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6017", "text": "In cyclic protocols,\nMotionCommandID 152. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6017, "length": 73, "hash": "f06fe2491ddf17b67fb51d3993d064bb"}
{"id": "meca500_programming_manual_6018", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6018, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6019", "text": "152. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6019, "length": 36, "hash": "ba9ee60e94bbec09b6735b65fe5e7cfd"}
{"id": "meca500_programming_manual_6020", "text": "the SetWorkZoneCfg (page 303) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6020, "length": 55, "hash": "bc49d02be1011e694500a9a6d9d8b52e"}
{"id": "meca500_programming_manual_6021", "text": "(page 303) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6021, "length": 36, "hash": "7bbb7cef66b3d264aac1c0ee36ca8081"}
{"id": "meca500_programming_manual_6022", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6022, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6023", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6023, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6024", "text": "This MotionCommandID defines a bounding box (a cuboid), the sides of which are parallel\nto the axes of the base reference frame (BRF). The arguments of the command are the\ncoordinates of two diagonally opposite corners, referred to as \u201cminimum\u201d and \u201cmaximum\u201d\ncorners, such that each coordinate of the minimum corner is smaller that the corresponding\ncoordinate of the maximum corner.", "source": "meca500_programming_manual", "chunk_index": 6024, "length": 383, "hash": "5969d5d3ae361e14cf9e43845b1b6399"}
{"id": "meca500_programming_manual_6025", "text": "This MotionCommandID defines a bounding box (a cuboid), the sides of which are parallel\nto the axes of the base reference frame (BRF). The arguments of the command are the\ncoordinates of two diagonally opposite corners, referred to as \u201cminimum\u201d and \u201cmaximum\u201d\ncorners, such that each coordinate of the minimum corner is smaller that the corresponding\ncoordinate of the maximum corner.", "source": "meca500_programming_manual", "chunk_index": 6025, "length": 383, "hash": "5969d5d3ae361e14cf9e43845b1b6399"}
{"id": "meca500_programming_manual_6026", "text": "SetWorkZoneLimits(xmin,ymin,zmin,xmax,ymax,zmax)", "source": "meca500_programming_manual", "chunk_index": 6026, "length": 48, "hash": "c289f9d637aeb73d910fa05250e8d1cd"}
{"id": "meca500_programming_manual_6027", "text": "\u2022 xmin, ymin, zmin: the coordinates of the minimum corner of the cuboid in the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 6027, "length": 90, "hash": "f28bcb727889bdb1f9b4aa9ff0d28561"}
{"id": "meca500_programming_manual_6028", "text": ": the coordinates of the minimum corner of the cuboid in the BRF, in mm;", "source": "meca500_programming_manual", "chunk_index": 6028, "length": 72, "hash": "f17ada523bc5b4ac947ae108211c18a7"}
{"id": "meca500_programming_manual_6029", "text": "\u2022 xmax, ymax, zmax: the coordinates of the maximum corner of the cuboid in the BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 6029, "length": 90, "hash": "39c048fcf4da6383f3656f1017a85a2d"}
{"id": "meca500_programming_manual_6030", "text": ": the coordinates of the maximum corner of the cuboid in the BRF, in mm.", "source": "meca500_programming_manual", "chunk_index": 6030, "length": 72, "hash": "55f3b425857b69f2aed9accd2d8c90b4"}
{"id": "meca500_programming_manual_6031", "text": "This setting is persistent and retains its values even after power cycling the robot. The\nfactory default is xmin = ymin = zmin = \u201310,000 and xmax = ymax = zmax = 10,000. To reset\nthe arguments to their factory default values, deactivate the robot and send the command\nSetWorkZoneLimits(0,0,0,0,0,0) (page 305).", "source": "meca500_programming_manual", "chunk_index": 6031, "length": 311, "hash": "b9f777a4d168c4a670a353cda87d91ce"}
{"id": "meca500_programming_manual_6032", "text": "This setting is persistent and retains its values even after power cycling the robot.", "source": "meca500_programming_manual", "chunk_index": 6032, "length": 85, "hash": "6f03cf33740f56264ec51eace1f757dc"}
{"id": "meca500_programming_manual_6033", "text": "The\nfactory default is x", "source": "meca500_programming_manual", "chunk_index": 6033, "length": 24, "hash": "e3010a35e2aa7347d59dc45bbc55bcc3"}
{"id": "meca500_programming_manual_6034", "text": "= 10,000. To reset\nthe arguments to their factory default values, deactivate the robot and send the command", "source": "meca500_programming_manual", "chunk_index": 6034, "length": 107, "hash": "16bbd9a9f7aec7813f12ea1d3d0e51f5"}
{"id": "meca500_programming_manual_6035", "text": "SetWorkZoneLimits(0,0,0,0,0,0)", "source": "meca500_programming_manual", "chunk_index": 6035, "length": 30, "hash": "415029851cd5e641aae88a92976ec3c8"}
{"id": "meca500_programming_manual_6036", "text": "\u2022 [2166] [Workspace limits set successfully.]", "source": "meca500_programming_manual", "chunk_index": 6036, "length": 45, "hash": "104ed2f054e5875ff1f56c401d93d400"}
{"id": "meca500_programming_manual_6037", "text": "\u2022 [2166] [Workspace limits set successfully.]", "source": "meca500_programming_manual", "chunk_index": 6037, "length": 45, "hash": "104ed2f054e5875ff1f56c401d93d400"}
{"id": "meca500_programming_manual_6038", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6038, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_6039", "text": "This command can only be executed when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6039, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "meca500_programming_manual_6040", "text": "In cyclic protocols,\nMotionCommandID 153. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6040, "length": 73, "hash": "9e7af1fd5c19d233b7c7f4505872a158"}
{"id": "meca500_programming_manual_6041", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6041, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6042", "text": "153. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6042, "length": 36, "hash": "10e2ba23b5b11b5e7940a6f7a413dc82"}
{"id": "meca500_programming_manual_6043", "text": "the SetWorkZoneLimits (page 305) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6043, "length": 58, "hash": "1309ef1f143bb4ccd5e5c0f920ad5463"}
{"id": "meca500_programming_manual_6044", "text": "(page 305) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6044, "length": 36, "hash": "070ec838944fd9ee947da4a3a02187d2"}
{"id": "meca500_programming_manual_6045", "text": "Commands for optional accessories", "source": "meca500_programming_manual", "chunk_index": 6045, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "meca500_programming_manual_6046", "text": "Commands for optional accessories", "source": "meca500_programming_manual", "chunk_index": 6046, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "meca500_programming_manual_6047", "text": "This section regroups all commands that are used to control or request data from the\noptional accessories for your robot: electric grippers (MEGP 25*) and pneumatic module\n(MPM500). Some of the commands in this section are queued, others are instantaneous\n(Get*, SetExtToolSim (page 328), and *_Immediate).", "source": "meca500_programming_manual", "chunk_index": 6047, "length": 306, "hash": "d97cf6591eaed0ae77b52303641a8f8c"}
{"id": "meca500_programming_manual_6048", "text": "This section regroups all commands that are used to control or request data from the\noptional accessories for your robot: electric grippers (MEGP 25*) and pneumatic module\n(MPM500). Some of the commands in this section are queued, others are instantaneous\n(Get*,", "source": "meca500_programming_manual", "chunk_index": 6048, "length": 262, "hash": "6a71de32bca974d598d460974cfd7b5f"}
{"id": "meca500_programming_manual_6049", "text": "(page 328), and *_Immediate).", "source": "meca500_programming_manual", "chunk_index": 6049, "length": 29, "hash": "9df4473ae8ed843be0981cc769a6e02e"}
{"id": "meca500_programming_manual_6050", "text": "The following is the complete list of commands used for the electric grippers (MEGP 25*) and\npneumatic module (MPM500):", "source": "meca500_programming_manual", "chunk_index": 6050, "length": 119, "hash": "fbe5ad6c036e9768394d1224cedb7855"}
{"id": "meca500_programming_manual_6051", "text": "The following is the complete list of commands used for the electric grippers (MEGP 25*) and\npneumatic module (MPM500):", "source": "meca500_programming_manual", "chunk_index": 6051, "length": 119, "hash": "fbe5ad6c036e9768394d1224cedb7855"}
{"id": "meca500_programming_manual_6052", "text": "\u2022 GetExtToolFwVersion (page 307)", "source": "meca500_programming_manual", "chunk_index": 6052, "length": 32, "hash": "c150bd58ec37714d1b39f06b63ded2f3"}
{"id": "meca500_programming_manual_6053", "text": "\u2022 GetRtExtToolStatus (page 312)", "source": "meca500_programming_manual", "chunk_index": 6053, "length": 31, "hash": "d241afa10932d759f6ed27203d0c2ea2"}
{"id": "meca500_programming_manual_6054", "text": "\u2022 GetRtGripperForce (page 313)", "source": "meca500_programming_manual", "chunk_index": 6054, "length": 30, "hash": "69d89edf8b7288fae38979284824c64f"}
{"id": "meca500_programming_manual_6055", "text": "\u2022 GetRtGripperPos (page 314)", "source": "meca500_programming_manual", "chunk_index": 6055, "length": 28, "hash": "03fb3251d392aec21d897d9b507b2b5b"}
{"id": "meca500_programming_manual_6056", "text": "\u2022 GetRtGripperState (page 315)", "source": "meca500_programming_manual", "chunk_index": 6056, "length": 30, "hash": "477091e98153cb745ca2458bdb3e6032"}
{"id": "meca500_programming_manual_6057", "text": "\u2022 GetRtValveState (page 321)", "source": "meca500_programming_manual", "chunk_index": 6057, "length": 28, "hash": "bd394dabc22ed01fb8af859f664f89bb"}
{"id": "meca500_programming_manual_6058", "text": "\u2022 GripperClose (page 324)", "source": "meca500_programming_manual", "chunk_index": 6058, "length": 25, "hash": "b616a2a1b0530d3a5d32035988c15eb4"}
{"id": "meca500_programming_manual_6059", "text": "\u2022 GripperOpen (page 325)", "source": "meca500_programming_manual", "chunk_index": 6059, "length": 24, "hash": "15fbc3da0555bd650f4ce1aaabf17ea4"}
{"id": "meca500_programming_manual_6060", "text": "\u2022 MoveGripper (page 326)", "source": "meca500_programming_manual", "chunk_index": 6060, "length": 24, "hash": "9c63a85cbd36c0c11c43bae702bebd2b"}
{"id": "meca500_programming_manual_6061", "text": "\u2022 SetExtToolSim (page 328)", "source": "meca500_programming_manual", "chunk_index": 6061, "length": 26, "hash": "4fce5a6612d0423241deb40ce566921a"}
{"id": "meca500_programming_manual_6062", "text": "\u2022 SetGripperForce (page 329) / GetGripperForce (page 308)", "source": "meca500_programming_manual", "chunk_index": 6062, "length": 57, "hash": "0892d2852a32427fac1a57582da8e983"}
{"id": "meca500_programming_manual_6063", "text": "\u2022 SetGripperRange (page 330) / GetGripperRange (page 309)", "source": "meca500_programming_manual", "chunk_index": 6063, "length": 57, "hash": "847129424dd1c6f47d5aabaacac5a308"}
{"id": "meca500_programming_manual_6064", "text": "\u2022 SetGripperVel (page 332) / GetGripperVel (page 310)", "source": "meca500_programming_manual", "chunk_index": 6064, "length": 53, "hash": "cdd6402464ba3f214f5acc6ced56cec2"}
{"id": "meca500_programming_manual_6065", "text": "\u2022 SetValveState (page 340)", "source": "meca500_programming_manual", "chunk_index": 6065, "length": 26, "hash": "c5bfe1dcc34d0e4f8a9cde85e1d784b7"}
{"id": "meca500_programming_manual_6066", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6066, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6067", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6067, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6068", "text": "This instantaneous command returns the firmware version of Meca500\u2019s EOAT connected to\nits tool I/O port. The Meca500 must be activated. If during the activation, the robot detects\nthat the firmware version of the EOAT is older than the firmware version of the robot, the\n[3039] response will be given, and the activation process will fail. If no EOAT is detected, the\nx\u2019s in the [2086] message will be zeros.", "source": "meca500_programming_manual", "chunk_index": 6068, "length": 409, "hash": "8654262566600aecb412aeb6eb19a762"}
{"id": "meca500_programming_manual_6069", "text": "This instantaneous command returns the firmware version of Meca500\u2019s EOAT connected to\nits tool I/O port. The Meca500 must be activated. If during the activation, the robot detects\nthat the firmware version of the EOAT is older than the firmware version of the robot, the\n[3039] response will be given, and the activation process will fail. If no EOAT is detected, the\nx\u2019s in the [2086] message will be zeros.", "source": "meca500_programming_manual", "chunk_index": 6069, "length": 409, "hash": "8654262566600aecb412aeb6eb19a762"}
{"id": "meca500_programming_manual_6070", "text": "GetExtToolFwVersion()", "source": "meca500_programming_manual", "chunk_index": 6070, "length": 21, "hash": "506597482b54022160f002ca171127a7"}
{"id": "meca500_programming_manual_6071", "text": "GetExtToolFwVersion()", "source": "meca500_programming_manual", "chunk_index": 6071, "length": 21, "hash": "506597482b54022160f002ca171127a7"}
{"id": "meca500_programming_manual_6072", "text": "\u2022 [3039][External tool firmware must be updated.]", "source": "meca500_programming_manual", "chunk_index": 6072, "length": 49, "hash": "e93794d8108dfe4c3ea6b1ae1466522b"}
{"id": "meca500_programming_manual_6073", "text": "\u2022 [3039][External tool firmware must be updated.]", "source": "meca500_programming_manual", "chunk_index": 6073, "length": 49, "hash": "e93794d8108dfe4c3ea6b1ae1466522b"}
{"id": "meca500_programming_manual_6074", "text": "If no external tool is connected, the response will be [2086][v0.0.0].", "source": "meca500_programming_manual", "chunk_index": 6074, "length": 70, "hash": "942ca831479ce942ee015da8cc5ef346"}
{"id": "meca500_programming_manual_6075", "text": "If no external tool is connected, the response will be", "source": "meca500_programming_manual", "chunk_index": 6075, "length": 54, "hash": "e4660443e9d2ebfb4a9a17e39c458653"}
{"id": "meca500_programming_manual_6076", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6076, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6077", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6077, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6078", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6078, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_6079", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6079, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_6080", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6080, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6081", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6081, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6082", "text": "This queued command returns the grip force set by the SetGripperForce (page 329) command.", "source": "meca500_programming_manual", "chunk_index": 6082, "length": 89, "hash": "389c290d5829a761668e42cf884f3bbb"}
{"id": "meca500_programming_manual_6083", "text": "This queued command returns the grip force set by the", "source": "meca500_programming_manual", "chunk_index": 6083, "length": 53, "hash": "1383ac702e51a48753a5cee3b05a91fa"}
{"id": "meca500_programming_manual_6084", "text": "\u2013 p: grip force limit, as signed percentage of the maximum grip force (~40 N).", "source": "meca500_programming_manual", "chunk_index": 6084, "length": 78, "hash": "05a3eb96422aaabe2493c3b5d3db5394"}
{"id": "meca500_programming_manual_6085", "text": "p: grip force limit, as signed percentage of the maximum grip force (~40 N).", "source": "meca500_programming_manual", "chunk_index": 6085, "length": 76, "hash": "f645ea39d969d0efb0c741f33965e5f6"}
{"id": "meca500_programming_manual_6086", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6086, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_6087", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6087, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_6088", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 6088, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_6089", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6089, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_6090", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6090, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6091", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6091, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6092", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6092, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6093", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6093, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6094", "text": "In cyclic protocols,\nDynamicDataTypeID 23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6094, "length": 74, "hash": "6e5267a808f64ccbfd2c3eda133bac27"}
{"id": "meca500_programming_manual_6095", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6095, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6096", "text": "23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6096, "length": 35, "hash": "026d3741b3d95e3ace6b91414b436178"}
{"id": "meca500_programming_manual_6097", "text": "the command GetGripperForce (page 308)", "source": "meca500_programming_manual", "chunk_index": 6097, "length": 38, "hash": "342541775fcbbb2d43b72ce32643e8a3"}
{"id": "meca500_programming_manual_6098", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6098, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6099", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6099, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6100", "text": "This queued command returns the gripper range set by the SetGripperRange (page 330)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 6100, "length": 92, "hash": "6018d1621d03d0cab853c75dcfb87661"}
{"id": "meca500_programming_manual_6101", "text": "This queued command returns the gripper range set by the", "source": "meca500_programming_manual", "chunk_index": 6101, "length": 56, "hash": "be057100fee4c93899a07dabdea6826a"}
{"id": "meca500_programming_manual_6102", "text": "\u2022 [2162][dclosed, dopen]", "source": "meca500_programming_manual", "chunk_index": 6102, "length": 24, "hash": "d3b8344b4d6989d6c3756203e0e183f8"}
{"id": "meca500_programming_manual_6103", "text": "\u2013 dclosed: fingers opening that should correspond to closed state, in mm;", "source": "meca500_programming_manual", "chunk_index": 6103, "length": 73, "hash": "8b56a6063bea2f33b5ed200093ce5119"}
{"id": "meca500_programming_manual_6104", "text": ": fingers opening that should correspond to closed state, in mm;", "source": "meca500_programming_manual", "chunk_index": 6104, "length": 64, "hash": "5a20cea05f4825a6443b40218460725a"}
{"id": "meca500_programming_manual_6105", "text": "\u2013 dopen: fingers opening that should correspond to open state, in mm.", "source": "meca500_programming_manual", "chunk_index": 6105, "length": 69, "hash": "b9cb6e06f5ac74a9310a742f4f78b239"}
{"id": "meca500_programming_manual_6106", "text": ": fingers opening that should correspond to open state, in mm.", "source": "meca500_programming_manual", "chunk_index": 6106, "length": 62, "hash": "7d4e79f78e98ebe391b85735422b78b1"}
{"id": "meca500_programming_manual_6107", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6107, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_6108", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6108, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_6109", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 6109, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_6110", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6110, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_6111", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6111, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6112", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6112, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6113", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6113, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6114", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6114, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6115", "text": "In cyclic protocols,\nDynamicDataTypeID 23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6115, "length": 74, "hash": "6e5267a808f64ccbfd2c3eda133bac27"}
{"id": "meca500_programming_manual_6116", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6116, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6117", "text": "23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6117, "length": 35, "hash": "026d3741b3d95e3ace6b91414b436178"}
{"id": "meca500_programming_manual_6118", "text": "the command GetGripperRange (page 309)", "source": "meca500_programming_manual", "chunk_index": 6118, "length": 38, "hash": "6a3d0796643edbb39feeb523d6745b57"}
{"id": "meca500_programming_manual_6119", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6119, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6120", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6120, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6121", "text": "This queued command returns the gripper velocity set by the SetGripperVel (page 332)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 6121, "length": 93, "hash": "1a25b38811744d1d8d3e0e745fb334e6"}
{"id": "meca500_programming_manual_6122", "text": "This queued command returns the gripper velocity set by the", "source": "meca500_programming_manual", "chunk_index": 6122, "length": 59, "hash": "ad1293ecf410fc2ccc34c8509e4c1956"}
{"id": "meca500_programming_manual_6123", "text": "\u2013 p: percentage of maximum finger velocity (~50 mm/s).", "source": "meca500_programming_manual", "chunk_index": 6123, "length": 54, "hash": "8fdaa7086375400929cf397e46f33e8b"}
{"id": "meca500_programming_manual_6124", "text": "p: percentage of maximum finger velocity (~50 mm/s).", "source": "meca500_programming_manual", "chunk_index": 6124, "length": 52, "hash": "ebd33985b25fe5f0321e7cd1a4f31a20"}
{"id": "meca500_programming_manual_6125", "text": "This command can only be executed when the robot is ready for motion (page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6125, "length": 135, "hash": "2aff3290d4d37fe744947035cfe85a84"}
{"id": "meca500_programming_manual_6126", "text": "This command can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6126, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "meca500_programming_manual_6127", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 6127, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_6128", "text": "(page 359). Otherwise,\nthe robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6128, "length": 66, "hash": "1ebf79849ae0fbe7fb017fdcfdeb5dd3"}
{"id": "meca500_programming_manual_6129", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6129, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6130", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6130, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6131", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6131, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6132", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6132, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6133", "text": "the command GetGripperVel\nIn cyclic protocols,\nDynamicDataTypeID 23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6133, "length": 100, "hash": "327d0e1a577318a50871d2a7e8196dc3"}
{"id": "meca500_programming_manual_6134", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6134, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6135", "text": "23. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6135, "length": 35, "hash": "026d3741b3d95e3ace6b91414b436178"}
{"id": "meca500_programming_manual_6136", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6136, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6137", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6137, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6138", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6138, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6139", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6139, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6140", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6140, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6141", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6141, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6142", "text": "This instantaneous command returns the general status of the external tool connected to the\nI/O port of the Meca500, preceded with a timestamp. For additional status information, use\nthe commands GetRtGripperState (page 315) or GetRtValveState (page 321).", "source": "meca500_programming_manual", "chunk_index": 6142, "length": 255, "hash": "f2b161ef53589211fe756c10a4afc201"}
{"id": "meca500_programming_manual_6143", "text": "This instantaneous command returns the general status of the external tool connected to the\nI/O port of the Meca500, preceded with a timestamp. For additional status information, use\nthe commands", "source": "meca500_programming_manual", "chunk_index": 6143, "length": 195, "hash": "639bcea3096989c100d55aefedfcd4c0"}
{"id": "meca500_programming_manual_6144", "text": "GetRtExtToolStatus()", "source": "meca500_programming_manual", "chunk_index": 6144, "length": 20, "hash": "f92f9ebdd6aa8700dabf123551627230"}
{"id": "meca500_programming_manual_6145", "text": "GetRtExtToolStatus()", "source": "meca500_programming_manual", "chunk_index": 6145, "length": 20, "hash": "f92f9ebdd6aa8700dabf123551627230"}
{"id": "meca500_programming_manual_6146", "text": "\u2022 [2300][t, simType, phyType, hs, es, oh]", "source": "meca500_programming_manual", "chunk_index": 6146, "length": 41, "hash": "786225ebd291ff7af289bf37416cb353"}
{"id": "meca500_programming_manual_6147", "text": "\u2022 [2300][t, simType, phyType, hs, es, oh]", "source": "meca500_programming_manual", "chunk_index": 6147, "length": 41, "hash": "786225ebd291ff7af289bf37416cb353"}
{"id": "meca500_programming_manual_6148", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6148, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_6149", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6149, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_6150", "text": "\u2013 simType: simulated external tool type (0 for none, 10 for MEGP 25E gripper, 11 for", "source": "meca500_programming_manual", "chunk_index": 6150, "length": 84, "hash": "f6fda6d921af8196aa61b7685ee6ff1c"}
{"id": "meca500_programming_manual_6151", "text": "simType: simulated external tool type (0 for none, 10 for MEGP 25E gripper, 11 for", "source": "meca500_programming_manual", "chunk_index": 6151, "length": 82, "hash": "40153d957de5f074921d170b86e27080"}
{"id": "meca500_programming_manual_6152", "text": "MEGP 25LS gripper, 20 for MPM500 pneumatic module);", "source": "meca500_programming_manual", "chunk_index": 6152, "length": 51, "hash": "cd09194c247e9403833ea1499c5607bb"}
{"id": "meca500_programming_manual_6153", "text": "MEGP 25LS gripper, 20 for MPM500 pneumatic module);", "source": "meca500_programming_manual", "chunk_index": 6153, "length": 51, "hash": "cd09194c247e9403833ea1499c5607bb"}
{"id": "meca500_programming_manual_6154", "text": "\u2013 phyType: physical external tool type mounted on the Meca500 (0 for none, 10 for\nMEGP 25E gripper, 11 for MEGP 25LS gripper, 20 for MPM500 pneumatic module);", "source": "meca500_programming_manual", "chunk_index": 6154, "length": 158, "hash": "73ce91235130741c9ccbadcde21d0ee2"}
{"id": "meca500_programming_manual_6155", "text": "phyType: physical external tool type mounted on the Meca500 (0 for none, 10 for\nMEGP 25E gripper, 11 for MEGP 25LS gripper, 20 for MPM500 pneumatic module);", "source": "meca500_programming_manual", "chunk_index": 6155, "length": 156, "hash": "e2f48f61d08202cdf666a65aa64bf7c6"}
{"id": "meca500_programming_manual_6156", "text": "\u2013 hs: homing state (0 for homing not performed, 1 for homing performed);", "source": "meca500_programming_manual", "chunk_index": 6156, "length": 72, "hash": "f5a8923adae20b8b9ec46ce8ffb8e678"}
{"id": "meca500_programming_manual_6157", "text": "hs: homing state (0 for homing not performed, 1 for homing performed);", "source": "meca500_programming_manual", "chunk_index": 6157, "length": 70, "hash": "7e8b57f743ad4382b857fda1da96ab41"}
{"id": "meca500_programming_manual_6158", "text": "\u2013 es: error state (0 for absence of error, 1 for presence of error);", "source": "meca500_programming_manual", "chunk_index": 6158, "length": 68, "hash": "2034f80fa58e733b64ddbbbcf5d5aff5"}
{"id": "meca500_programming_manual_6159", "text": "es: error state (0 for absence of error, 1 for presence of error);", "source": "meca500_programming_manual", "chunk_index": 6159, "length": 66, "hash": "5eb164f496a7f137f5591e0c6a996343"}
{"id": "meca500_programming_manual_6160", "text": "\u2013 oh: overheat (0 if there is no overheat, 1 if the gripper is in overheat).", "source": "meca500_programming_manual", "chunk_index": 6160, "length": 76, "hash": "7446710cd631de215e3f01e49e91abf2"}
{"id": "meca500_programming_manual_6161", "text": "oh: overheat (0 if there is no overheat, 1 if the gripper is in overheat).", "source": "meca500_programming_manual", "chunk_index": 6161, "length": 74, "hash": "26d9e1564816addbf771c502e08ec611"}
{"id": "meca500_programming_manual_6162", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6162, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6163", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6163, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6164", "text": "In cyclic protocols,\nDynamicDataTypeID 52. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6164, "length": 74, "hash": "8007c9e167cccd5be4a1b62035cf1599"}
{"id": "meca500_programming_manual_6165", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6165, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6166", "text": "52. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6166, "length": 35, "hash": "0d0db1861637641a570982a751ee131a"}
{"id": "meca500_programming_manual_6167", "text": "the command GetRtExtToolStatus (page 312)", "source": "meca500_programming_manual", "chunk_index": 6167, "length": 41, "hash": "02692a3da265949aad801432edaeed54"}
{"id": "meca500_programming_manual_6168", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6168, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_6169", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6169, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_6170", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6170, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6171", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6171, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6172", "text": "This instantaneous command returns the currently applied grip force of the MEGP 25*\ngrippers, preceded by a timestamp.", "source": "meca500_programming_manual", "chunk_index": 6172, "length": 118, "hash": "85b828e6256bced3e7b73eeec5725af0"}
{"id": "meca500_programming_manual_6173", "text": "This instantaneous command returns the currently applied grip force of the MEGP 25*\ngrippers, preceded by a timestamp.", "source": "meca500_programming_manual", "chunk_index": 6173, "length": 118, "hash": "85b828e6256bced3e7b73eeec5725af0"}
{"id": "meca500_programming_manual_6174", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6174, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_6175", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6175, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_6176", "text": "\u2013 p: currently applied grip force, as signed percentage of the maximum grip force", "source": "meca500_programming_manual", "chunk_index": 6176, "length": 81, "hash": "c209eeb62c9eef156ba3ac820f2cca70"}
{"id": "meca500_programming_manual_6177", "text": "p: currently applied grip force, as signed percentage of the maximum grip force", "source": "meca500_programming_manual", "chunk_index": 6177, "length": 79, "hash": "54113f220b6fea365494ce2f84375df9"}
{"id": "meca500_programming_manual_6178", "text": "A positive grip force means the jaws are forcing outwards, while a negative grip force means\nthe jaws are forcing towards each other.", "source": "meca500_programming_manual", "chunk_index": 6178, "length": 133, "hash": "5e099d6abff190bf1d4723c2bf0db0bf"}
{"id": "meca500_programming_manual_6179", "text": "A positive grip force means the jaws are forcing outwards, while a negative grip force means\nthe jaws are forcing towards each other.", "source": "meca500_programming_manual", "chunk_index": 6179, "length": 133, "hash": "5e099d6abff190bf1d4723c2bf0db0bf"}
{"id": "meca500_programming_manual_6180", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6180, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6181", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6181, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6182", "text": "In cyclic protocols,\nDynamicDataTypeID 53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6182, "length": 74, "hash": "132a41b945f3f106a7c09acc637401de"}
{"id": "meca500_programming_manual_6183", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6183, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6184", "text": "53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6184, "length": 35, "hash": "8ac60202f669c653bc5f39e5a1e4d23d"}
{"id": "meca500_programming_manual_6185", "text": "the command GetRtGripperForce (page 313)", "source": "meca500_programming_manual", "chunk_index": 6185, "length": 40, "hash": "6a6a75c6b696cb7591a6f2db785f1563"}
{"id": "meca500_programming_manual_6186", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6186, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6187", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6187, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6188", "text": "This instantaneous command returns the current fingers opening (also referred to as\ngripper position) of the MEGP 25* grippers (see MoveGripper (page 326)), preceded with\na timestamp.", "source": "meca500_programming_manual", "chunk_index": 6188, "length": 183, "hash": "1c64381d197074397eac7817bc9e760b"}
{"id": "meca500_programming_manual_6189", "text": "This instantaneous command returns the current fingers opening (also referred to as\ngripper position) of the MEGP 25* grippers (see", "source": "meca500_programming_manual", "chunk_index": 6189, "length": 131, "hash": "82e8d14fc743e825ec97117835f10863"}
{"id": "meca500_programming_manual_6190", "text": "(page 326)), preceded with\na timestamp.", "source": "meca500_programming_manual", "chunk_index": 6190, "length": 39, "hash": "dab058d145d613e0ba08375c132838c5"}
{"id": "meca500_programming_manual_6191", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6191, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_6192", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6192, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_6193", "text": "\u2013 d: fingers opening, in mm.", "source": "meca500_programming_manual", "chunk_index": 6193, "length": 28, "hash": "1d07883ee8da5c6356c3e0180acbab8d"}
{"id": "meca500_programming_manual_6194", "text": "d: fingers opening, in mm.", "source": "meca500_programming_manual", "chunk_index": 6194, "length": 26, "hash": "5440afe6e31a3977c9adf2ef5a5d6c1b"}
{"id": "meca500_programming_manual_6195", "text": "You can use this command to perform rough measurements on a part. However, you would\nneed to use short, rigid, precisely machined, and properly installed fingers. These fingers\nwill also have to be designed in such a way that the part is automatically aligned. For\nexample, you can measure the diameter of a cylindrical vial, once you lift the vial. Even in\nsuch perfect conditions, you can still obtain measurement errors of as much as 0.5 mm.", "source": "meca500_programming_manual", "chunk_index": 6195, "length": 444, "hash": "bf9ef3444a9cb3276c81f2115bc1f729"}
{"id": "meca500_programming_manual_6196", "text": "You can use this command to perform rough measurements on a part. However, you would\nneed to use short, rigid, precisely machined, and properly installed fingers. These fingers\nwill also have to be designed in such a way that the part is automatically aligned. For\nexample, you can measure the diameter of a cylindrical vial, once you lift the vial. Even in\nsuch perfect conditions, you can still obtain measurement errors of as much as 0.5 mm.", "source": "meca500_programming_manual", "chunk_index": 6196, "length": 444, "hash": "bf9ef3444a9cb3276c81f2115bc1f729"}
{"id": "meca500_programming_manual_6197", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6197, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6198", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6198, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6199", "text": "In cyclic protocols,\nDynamicDataTypeID 53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6199, "length": 74, "hash": "132a41b945f3f106a7c09acc637401de"}
{"id": "meca500_programming_manual_6200", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6200, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6201", "text": "53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6201, "length": 35, "hash": "8ac60202f669c653bc5f39e5a1e4d23d"}
{"id": "meca500_programming_manual_6202", "text": "the command GetRtGripperPos (page 314)", "source": "meca500_programming_manual", "chunk_index": 6202, "length": 38, "hash": "7567faa049fce1a482d6df861199c14e"}
{"id": "meca500_programming_manual_6203", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6203, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6204", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6204, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6205", "text": "This instantaneous command returns the current state of the MEGP 25* grippers connected\nto the I/O port of the Meca500, preceded with a timestamp.", "source": "meca500_programming_manual", "chunk_index": 6205, "length": 146, "hash": "d0fab9646c2030b7c58a24b64f2429f4"}
{"id": "meca500_programming_manual_6206", "text": "This instantaneous command returns the current state of the MEGP 25* grippers connected\nto the I/O port of the Meca500, preceded with a timestamp.", "source": "meca500_programming_manual", "chunk_index": 6206, "length": 146, "hash": "d0fab9646c2030b7c58a24b64f2429f4"}
{"id": "meca500_programming_manual_6207", "text": "\u2022 [2320][t, hp, dr, gc, go]", "source": "meca500_programming_manual", "chunk_index": 6207, "length": 27, "hash": "4cd284105029c9b73cdbfe8da122c63d"}
{"id": "meca500_programming_manual_6208", "text": "\u2022 [2320][t, hp, dr, gc, go]", "source": "meca500_programming_manual", "chunk_index": 6208, "length": 27, "hash": "4cd284105029c9b73cdbfe8da122c63d"}
{"id": "meca500_programming_manual_6209", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6209, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_6210", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6210, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_6211", "text": "\u2013 hp: holding part (0 if the gripper is not forcing, 1 otherwise);", "source": "meca500_programming_manual", "chunk_index": 6211, "length": 66, "hash": "fdb655b96946a40891d76c40fdb64da7"}
{"id": "meca500_programming_manual_6212", "text": "hp: holding part (0 if the gripper is not forcing, 1 otherwise);", "source": "meca500_programming_manual", "chunk_index": 6212, "length": 64, "hash": "8cde6c1319d5cb1ca4438283a682ab53"}
{"id": "meca500_programming_manual_6213", "text": "desired fingers opening reached (0 after a MoveGripper (page 326),\nGripperClose (page 324) or GripperOpen (page 325) command was executed and\nuntil the desired fingers opening was reached, 1 otherwise);", "source": "meca500_programming_manual", "chunk_index": 6213, "length": 202, "hash": "942f16469984de8437f4d43aebc72eaa"}
{"id": "meca500_programming_manual_6214", "text": "desired fingers opening reached (0 after a", "source": "meca500_programming_manual", "chunk_index": 6214, "length": 42, "hash": "46bc4765c04582d88f710a2255128d5c"}
{"id": "meca500_programming_manual_6215", "text": "(page 325) command was executed and\nuntil the desired fingers opening was reached, 1 otherwise);", "source": "meca500_programming_manual", "chunk_index": 6215, "length": 96, "hash": "d19a962bb1c1b41c8bd6e071434c1dff"}
{"id": "meca500_programming_manual_6216", "text": "\u2013 gc: gripper closed (1 if the current fingers opening is equal to or smaller than\nthe fingers opening detected during homing or defined with the SetGripperRange\n(page 330) command as the one corresponding to the closed position, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 6216, "length": 243, "hash": "7f4e025649be71f1349c90c92c9ed889"}
{"id": "meca500_programming_manual_6217", "text": "gc: gripper closed (1 if the current fingers opening is equal to or smaller than\nthe fingers opening detected during homing or defined with the", "source": "meca500_programming_manual", "chunk_index": 6217, "length": 143, "hash": "8461e2e9c8d81feb3134742f4bc42870"}
{"id": "meca500_programming_manual_6218", "text": "(page 330) command as the one corresponding to the closed position, 0 otherwise);", "source": "meca500_programming_manual", "chunk_index": 6218, "length": 81, "hash": "6f180ec5b0f36b47f1777078388fcb39"}
{"id": "meca500_programming_manual_6219", "text": "\u2013 go: gripper open (1 if the current fingers opening is equal to or greater than\nthe fingers opening detected during homing or defined with the SetGripperRange\n(page 330) command as the one corresponding to the open position, 0 otherwise).", "source": "meca500_programming_manual", "chunk_index": 6219, "length": 239, "hash": "a1943b723fa0451a01b40100e0f6d121"}
{"id": "meca500_programming_manual_6220", "text": "go: gripper open (1 if the current fingers opening is equal to or greater than\nthe fingers opening detected during homing or defined with the", "source": "meca500_programming_manual", "chunk_index": 6220, "length": 141, "hash": "6d37eb98f807dd55e8355156ebfb5d8b"}
{"id": "meca500_programming_manual_6221", "text": "(page 330) command as the one corresponding to the open position, 0 otherwise).", "source": "meca500_programming_manual", "chunk_index": 6221, "length": 79, "hash": "1bfd576faed785e1bf6191e975f1bec8"}
{"id": "meca500_programming_manual_6222", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6222, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6223", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6223, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6224", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6224, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6225", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6225, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6226", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6226, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6227", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6227, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6228", "text": "In cyclic protocols,\nDynamicDataTypeID 53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6228, "length": 74, "hash": "132a41b945f3f106a7c09acc637401de"}
{"id": "meca500_programming_manual_6229", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6229, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6230", "text": "53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6230, "length": 35, "hash": "8ac60202f669c653bc5f39e5a1e4d23d"}
{"id": "meca500_programming_manual_6231", "text": "the command GetRtGripperState (page 315)", "source": "meca500_programming_manual", "chunk_index": 6231, "length": 40, "hash": "594debd391fdf17e40e1556a206f5f71"}
{"id": "meca500_programming_manual_6232", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6232, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6233", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6233, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6234", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6234, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6235", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6235, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6236", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6236, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6237", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6237, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6238", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6238, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6239", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6239, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6240", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6240, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6241", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6241, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6242", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6242, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6243", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6243, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6244", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6244, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6245", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6245, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6246", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6246, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6247", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6247, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6248", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6248, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6249", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6249, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6250", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6250, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6251", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6251, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6252", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6252, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6253", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6253, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6254", "text": "This instantaneous command returns the current state of the MPM500 pneumatic module\nconnected to the I/O port of the Meca500, preceded with a timestamp.", "source": "meca500_programming_manual", "chunk_index": 6254, "length": 152, "hash": "3babf012e27d7b9b11fcb08b60c76ece"}
{"id": "meca500_programming_manual_6255", "text": "This instantaneous command returns the current state of the MPM500 pneumatic module\nconnected to the I/O port of the Meca500, preceded with a timestamp.", "source": "meca500_programming_manual", "chunk_index": 6255, "length": 152, "hash": "3babf012e27d7b9b11fcb08b60c76ece"}
{"id": "meca500_programming_manual_6256", "text": "\u2013 t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6256, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "meca500_programming_manual_6257", "text": "t: timestamp in microseconds;", "source": "meca500_programming_manual", "chunk_index": 6257, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "meca500_programming_manual_6258", "text": "\u2013 v1: state of valve 1 (0 if closed, 1 if open);", "source": "meca500_programming_manual", "chunk_index": 6258, "length": 48, "hash": "4404412da937655bf86f3f2e3ccafda4"}
{"id": "meca500_programming_manual_6259", "text": ": state of valve 1 (0 if closed, 1 if open);", "source": "meca500_programming_manual", "chunk_index": 6259, "length": 44, "hash": "fcc674416d95e3c24966dd83795117ff"}
{"id": "meca500_programming_manual_6260", "text": "\u2013 v2: state of valve 2 (0 if closed, 1 if open).", "source": "meca500_programming_manual", "chunk_index": 6260, "length": 48, "hash": "53e62c32d9ea2b5f7a5988c9ed3100bb"}
{"id": "meca500_programming_manual_6261", "text": ": state of valve 2 (0 if closed, 1 if open).", "source": "meca500_programming_manual", "chunk_index": 6261, "length": 44, "hash": "5784efd58eb94db6a07a0de315e90958"}
{"id": "meca500_programming_manual_6262", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6262, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6263", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6263, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6264", "text": "If no pneumatic module is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6264, "length": 73, "hash": "0557d0e99fb1b580a2bd1e81a21d9402"}
{"id": "meca500_programming_manual_6265", "text": "If no pneumatic module is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6265, "length": 73, "hash": "0557d0e99fb1b580a2bd1e81a21d9402"}
{"id": "meca500_programming_manual_6266", "text": "\u2022 [1041][No pneumatic module connected.]", "source": "meca500_programming_manual", "chunk_index": 6266, "length": 40, "hash": "6111e6bb21961183a043b130ccb0367d"}
{"id": "meca500_programming_manual_6267", "text": "\u2022 [1041][No pneumatic module connected.]", "source": "meca500_programming_manual", "chunk_index": 6267, "length": 40, "hash": "6111e6bb21961183a043b130ccb0367d"}
{"id": "meca500_programming_manual_6268", "text": "In cyclic protocols,\nDynamicDataTypeID 53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6268, "length": 74, "hash": "132a41b945f3f106a7c09acc637401de"}
{"id": "meca500_programming_manual_6269", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6269, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6270", "text": "53. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6270, "length": 35, "hash": "8ac60202f669c653bc5f39e5a1e4d23d"}
{"id": "meca500_programming_manual_6271", "text": "the command GetRtValveState (page 321)", "source": "meca500_programming_manual", "chunk_index": 6271, "length": 38, "hash": "3e1316f9cbcde6340241df14c8f1e261"}
{"id": "meca500_programming_manual_6272", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6272, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6273", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6273, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6274", "text": "GetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6274, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "meca500_programming_manual_6275", "text": "GetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6275, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "meca500_programming_manual_6276", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6276, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6277", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6277, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6278", "text": "GetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6278, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "meca500_programming_manual_6279", "text": "GetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6279, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "meca500_programming_manual_6280", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6280, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6281", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6281, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6282", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6282, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6283", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6283, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6284", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6284, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6285", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6285, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6286", "text": "This queued command is used to close the MEGP 25E or MEGP 25LS grippers. The gripper\nwill move its fingers together until the grip force reaches 40 N. You can reduce this maximum\ngrip force using the SetGripperForce (page 329) command. You can also control the speed of\nthe gripper with the SetGripperVel (page 332) command.", "source": "meca500_programming_manual", "chunk_index": 6286, "length": 324, "hash": "848cf13543d368e4f7fcd6b0ea5e2e36"}
{"id": "meca500_programming_manual_6287", "text": "This queued command is used to close the MEGP 25E or MEGP 25LS grippers. The gripper\nwill move its fingers together until the grip force reaches 40 N. You can reduce this maximum\ngrip force using the", "source": "meca500_programming_manual", "chunk_index": 6287, "length": 199, "hash": "d362716359616f98658369f331283110"}
{"id": "meca500_programming_manual_6288", "text": "(page 329) command. You can also control the speed of\nthe gripper with the", "source": "meca500_programming_manual", "chunk_index": 6288, "length": 74, "hash": "03f37033897190ec8f6002e27f3f5567"}
{"id": "meca500_programming_manual_6289", "text": "By default, GripperClose (page 324) command closes the gripper fingers until resistance is\nmet. However, a maximum closing distance can be set using the SetGripperRange (page 330)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 6289, "length": 188, "hash": "ff63113301128512e51d654e8c4c7f48"}
{"id": "meca500_programming_manual_6290", "text": "(page 324) command closes the gripper fingers until resistance is\nmet. However, a maximum closing distance can be set using the", "source": "meca500_programming_manual", "chunk_index": 6290, "length": 127, "hash": "4f067051e139cceb5ecd7272207cee9d"}
{"id": "meca500_programming_manual_6291", "text": "You can use this command with the MPM500 pneumatic module too. See the SetValveState\n(page 340) command for more details.", "source": "meca500_programming_manual", "chunk_index": 6291, "length": 121, "hash": "a75154ca501581283285db2b5ebba54e"}
{"id": "meca500_programming_manual_6292", "text": "You can use this command with the MPM500 pneumatic module too. See the", "source": "meca500_programming_manual", "chunk_index": 6292, "length": 70, "hash": "21b5b2d848b2b1167738039d1f387119"}
{"id": "meca500_programming_manual_6293", "text": "(page 340) command for more details.", "source": "meca500_programming_manual", "chunk_index": 6293, "length": 36, "hash": "555c55b99bd984f44c0dda9eb7fb9231"}
{"id": "meca500_programming_manual_6294", "text": "The gripper commands GripperOpen (page 325), GripperClose (page 324), and\nMoveGripper (page 326) are queued like other motion command and will be executed\nafter the preceding command is completed. However, any command sent after these will\nexecute immediately as the gripper starts moving. To ensure proper timing, you may\nwait for the gripper state to change (i.e., it is holding or no longer holding a part, see\nGetRtGripperState (page 315)), or send a Delay (page 134) after the gripper command.", "source": "meca500_programming_manual", "chunk_index": 6294, "length": 498, "hash": "5f122dc952038f50c8b4f2aa2a7ae6cc"}
{"id": "meca500_programming_manual_6295", "text": "The gripper commands", "source": "meca500_programming_manual", "chunk_index": 6295, "length": 20, "hash": "5df3b6b5a678fc40476eba9b0666947f"}
{"id": "meca500_programming_manual_6296", "text": "(page 326) are queued like other motion command and will be executed\nafter the preceding command is completed. However,", "source": "meca500_programming_manual", "chunk_index": 6296, "length": 119, "hash": "157b68effb2f891061927fb8efbb3362"}
{"id": "meca500_programming_manual_6297", "text": "any command sent after these will\nexecute immediately", "source": "meca500_programming_manual", "chunk_index": 6297, "length": 53, "hash": "75ebefd4bc15c9fccafbc0059b3c38dd"}
{"id": "meca500_programming_manual_6298", "text": "as the gripper starts moving. To ensure proper timing, you may\nwait for the gripper state to change (i.e., it is holding or no longer holding a part, see", "source": "meca500_programming_manual", "chunk_index": 6298, "length": 153, "hash": "51bca752326a7b675b915c626ec35f13"}
{"id": "meca500_programming_manual_6299", "text": "(page 315)), or send a", "source": "meca500_programming_manual", "chunk_index": 6299, "length": 22, "hash": "ea026e613254eeb6d3c5bf2da03a74bc"}
{"id": "meca500_programming_manual_6300", "text": "(page 134) after the gripper command.", "source": "meca500_programming_manual", "chunk_index": 6300, "length": 37, "hash": "1647dda48e7b72fdb11b0fba3292819d"}
{"id": "meca500_programming_manual_6301", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6301, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6302", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6302, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6303", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6303, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6304", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6304, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6305", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6305, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6306", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6306, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6307", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6307, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6308", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6308, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6309", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6309, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6310", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6310, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6311", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6311, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6312", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6312, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6313", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6313, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6314", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6314, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6315", "text": "In cyclic protocols, the commands GripperClose (page 324) and GripperOpen (page 325) are\nrepresented by MotionCommandID 18. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6315, "length": 155, "hash": "5b826642cacbf06feec2b7e3254b9ddb"}
{"id": "meca500_programming_manual_6316", "text": "In cyclic protocols, the commands", "source": "meca500_programming_manual", "chunk_index": 6316, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "meca500_programming_manual_6317", "text": "(page 325) are\nrepresented by", "source": "meca500_programming_manual", "chunk_index": 6317, "length": 29, "hash": "a7141aca4bf5984d8cde4f92fcfe563a"}
{"id": "meca500_programming_manual_6318", "text": "18. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6318, "length": 35, "hash": "610a1054e2a5621209792edb6131409f"}
{"id": "meca500_programming_manual_6319", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6319, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6320", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6320, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6321", "text": "This queued command is used to open the MEGP 25E or MEGP 25LS grippers. The gripper\nwill move its fingers apart until the grip force reaches 40 N. You can reduce this maximum\ngrip force using the SetGripperForce (page 329) command. You can also control the speed of\nthe gripper with the SetGripperVel (page 332) command.", "source": "meca500_programming_manual", "chunk_index": 6321, "length": 320, "hash": "9626245983ead5d5427340e160dbcb5a"}
{"id": "meca500_programming_manual_6322", "text": "This queued command is used to open the MEGP 25E or MEGP 25LS grippers. The gripper\nwill move its fingers apart until the grip force reaches 40 N. You can reduce this maximum\ngrip force using the", "source": "meca500_programming_manual", "chunk_index": 6322, "length": 195, "hash": "10bb893650d3b6056cc9d61e251a7151"}
{"id": "meca500_programming_manual_6323", "text": "(page 329) command. You can also control the speed of\nthe gripper with the", "source": "meca500_programming_manual", "chunk_index": 6323, "length": 74, "hash": "03f37033897190ec8f6002e27f3f5567"}
{"id": "meca500_programming_manual_6324", "text": "By default, GripperClose (page 324) command opens the gripper fingers until resistance is\nmet. However, a maximum opening distance can be set using the SetGripperRange (page 330)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 6324, "length": 187, "hash": "afad4ed3147d25fa1b535c54296d936e"}
{"id": "meca500_programming_manual_6325", "text": "(page 324) command opens the gripper fingers until resistance is\nmet. However, a maximum opening distance can be set using the", "source": "meca500_programming_manual", "chunk_index": 6325, "length": 126, "hash": "95ed26dd744d522e43b5404c438070c7"}
{"id": "meca500_programming_manual_6326", "text": "You can use this command with the MPM500 pneumatic module too. See the SetValveState\n(page 340) command for more details.", "source": "meca500_programming_manual", "chunk_index": 6326, "length": 121, "hash": "a75154ca501581283285db2b5ebba54e"}
{"id": "meca500_programming_manual_6327", "text": "You can use this command with the MPM500 pneumatic module too. See the", "source": "meca500_programming_manual", "chunk_index": 6327, "length": 70, "hash": "21b5b2d848b2b1167738039d1f387119"}
{"id": "meca500_programming_manual_6328", "text": "(page 340) command for more details.", "source": "meca500_programming_manual", "chunk_index": 6328, "length": 36, "hash": "555c55b99bd984f44c0dda9eb7fb9231"}
{"id": "meca500_programming_manual_6329", "text": "The gripper commands GripperOpen (page 325), GripperClose (page 324), and\nMoveGripper (page 326) are queued like other motion command and will be executed\nafter the preceding command is completed. However, any command sent after these will\nexecute immediately as the gripper starts moving. To ensure proper timing, you may\nwait for the gripper state to change (i.e., it is holding or no longer holding a part, see\nGetRtGripperState (page 315)), or send a Delay (page 134) after the gripper command.", "source": "meca500_programming_manual", "chunk_index": 6329, "length": 498, "hash": "5f122dc952038f50c8b4f2aa2a7ae6cc"}
{"id": "meca500_programming_manual_6330", "text": "The gripper commands", "source": "meca500_programming_manual", "chunk_index": 6330, "length": 20, "hash": "5df3b6b5a678fc40476eba9b0666947f"}
{"id": "meca500_programming_manual_6331", "text": "(page 326) are queued like other motion command and will be executed\nafter the preceding command is completed. However,", "source": "meca500_programming_manual", "chunk_index": 6331, "length": 119, "hash": "157b68effb2f891061927fb8efbb3362"}
{"id": "meca500_programming_manual_6332", "text": "any command sent after these will\nexecute immediately", "source": "meca500_programming_manual", "chunk_index": 6332, "length": 53, "hash": "75ebefd4bc15c9fccafbc0059b3c38dd"}
{"id": "meca500_programming_manual_6333", "text": "as the gripper starts moving. To ensure proper timing, you may\nwait for the gripper state to change (i.e., it is holding or no longer holding a part, see", "source": "meca500_programming_manual", "chunk_index": 6333, "length": 153, "hash": "51bca752326a7b675b915c626ec35f13"}
{"id": "meca500_programming_manual_6334", "text": "(page 315)), or send a", "source": "meca500_programming_manual", "chunk_index": 6334, "length": 22, "hash": "ea026e613254eeb6d3c5bf2da03a74bc"}
{"id": "meca500_programming_manual_6335", "text": "(page 134) after the gripper command.", "source": "meca500_programming_manual", "chunk_index": 6335, "length": 37, "hash": "1647dda48e7b72fdb11b0fba3292819d"}
{"id": "meca500_programming_manual_6336", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6336, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6337", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6337, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6338", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6338, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6339", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6339, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6340", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6340, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6341", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6341, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6342", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6342, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6343", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6343, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6344", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6344, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6345", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6345, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6346", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6346, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6347", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6347, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6348", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6348, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6349", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6349, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6350", "text": "In cyclic protocols, the commands GripperClose (page 324) and GripperOpen (page 325) are\nrepresented by MotionCommandID 18. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6350, "length": 155, "hash": "5b826642cacbf06feec2b7e3254b9ddb"}
{"id": "meca500_programming_manual_6351", "text": "In cyclic protocols, the commands", "source": "meca500_programming_manual", "chunk_index": 6351, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "meca500_programming_manual_6352", "text": "(page 325) are\nrepresented by", "source": "meca500_programming_manual", "chunk_index": 6352, "length": 29, "hash": "a7141aca4bf5984d8cde4f92fcfe563a"}
{"id": "meca500_programming_manual_6353", "text": "18. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6353, "length": 35, "hash": "610a1054e2a5621209792edb6131409f"}
{"id": "meca500_programming_manual_6354", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6354, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6355", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6355, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6356", "text": "The MEGP 25* grippers are equipped with incremental encoders, so it is impossible to directly\nmeasure the absolute positions of the gripper jaws. Thus, during the homing of the robot, the\ngripper is also homed by completely closing and then opening its fingers, until resistance is\nmet in each direction. The maximum fingers opening is detected and is a positive number\nnot larger than 6 mm (MEGP 25E) or 48 mm (MEGP 25LS). Most importantly, the fingers\nopening, a non-negative distance, is defined as the sum of the distances traveled by each jaw\nfrom their fully-closed positions detected during homing.", "source": "meca500_programming_manual", "chunk_index": 6356, "length": 605, "hash": "bdc4b6fd35058a661fd36739ead82f63"}
{"id": "meca500_programming_manual_6357", "text": "The MEGP 25* grippers are equipped with incremental encoders, so it is impossible to directly\nmeasure the absolute positions of the gripper jaws. Thus, during the homing of the robot, the\ngripper is also homed by completely closing and then opening its fingers, until resistance is\nmet in each direction. The maximum fingers opening is detected and is a positive number\nnot larger than 6 mm (MEGP 25E) or 48 mm (MEGP 25LS). Most importantly, the fingers\nopening, a non-negative distance, is defined as the sum of the distances traveled by each jaw\nfrom their fully-closed positions detected during homing.", "source": "meca500_programming_manual", "chunk_index": 6357, "length": 605, "hash": "bdc4b6fd35058a661fd36739ead82f63"}
{"id": "meca500_programming_manual_6358", "text": "The MoveGripper (page 326) command makes the gripper fingers move towards the specified\nfingers opening.", "source": "meca500_programming_manual", "chunk_index": 6358, "length": 104, "hash": "818311a3a490b21e92186d0062dea7c2"}
{"id": "meca500_programming_manual_6359", "text": "(page 326) command makes the gripper fingers move towards the specified\nfingers opening.", "source": "meca500_programming_manual", "chunk_index": 6359, "length": 88, "hash": "1523a62fdc5e98e065f3da1deb11fc9e"}
{"id": "meca500_programming_manual_6360", "text": "\u2022 d: desired fingers opening, a non-negative value in mm, from 0 to the maximum fingers", "source": "meca500_programming_manual", "chunk_index": 6360, "length": 87, "hash": "b9d5dcc755b81451e329b01eb1734929"}
{"id": "meca500_programming_manual_6361", "text": "\u2022 d: desired fingers opening, a non-negative value in mm, from 0 to the maximum fingers", "source": "meca500_programming_manual", "chunk_index": 6361, "length": 87, "hash": "b9d5dcc755b81451e329b01eb1734929"}
{"id": "meca500_programming_manual_6362", "text": "opening detected during homing.", "source": "meca500_programming_manual", "chunk_index": 6362, "length": 31, "hash": "c22084b747ff672573b1d99d0caa77a4"}
{"id": "meca500_programming_manual_6363", "text": "opening detected during homing.", "source": "meca500_programming_manual", "chunk_index": 6363, "length": 31, "hash": "c22084b747ff672573b1d99d0caa77a4"}
{"id": "meca500_programming_manual_6364", "text": "Unlike other position-mode Move* commands, the MoveGripper (page 326) command\nThe\ndoes not return an error if the desired finger opening is blocked by an object.\nfingers will continue applying force toward the desired opening using the force set by the\nSetGripperForce (page 329) command, and the \u201cholding part\u201d gripper status will be true (see\nGetRtGripperState (page 315)).", "source": "meca500_programming_manual", "chunk_index": 6364, "length": 375, "hash": "f911bad5bbf6d011831b2cba96dd7008"}
{"id": "meca500_programming_manual_6365", "text": "Unlike other position-mode Move* commands, the", "source": "meca500_programming_manual", "chunk_index": 6365, "length": 46, "hash": "fbb64fc4a7273779a8cf0e90a988846b"}
{"id": "meca500_programming_manual_6366", "text": "(page 326) command\nThe\ndoes not return an error if the desired finger opening is blocked by an object.\nfingers will continue applying force toward the desired opening using the force set by the", "source": "meca500_programming_manual", "chunk_index": 6366, "length": 193, "hash": "e81ecb4fcfaaad640e735d63d54fec11"}
{"id": "meca500_programming_manual_6367", "text": "(page 329) command, and the \u201cholding part\u201d gripper status will be true (see", "source": "meca500_programming_manual", "chunk_index": 6367, "length": 75, "hash": "f3f9922c21d6c3b96abe8f25dca7a0fd"}
{"id": "meca500_programming_manual_6368", "text": "If the object is removed, the fingers will move to the desired fingers opening.", "source": "meca500_programming_manual", "chunk_index": 6368, "length": 79, "hash": "457ea916e557138067ce85bb74465a91"}
{"id": "meca500_programming_manual_6369", "text": "If the object is removed, the fingers will move to the desired fingers opening.", "source": "meca500_programming_manual", "chunk_index": 6369, "length": 79, "hash": "457ea916e557138067ce85bb74465a91"}
{"id": "meca500_programming_manual_6370", "text": "You can adjust the grip force with SetGripperForce (page 329) and control the gripper speed\nwith SetGripperVel (page 332).", "source": "meca500_programming_manual", "chunk_index": 6370, "length": 122, "hash": "b477c9af4c4cf05366cad57fd175f2e5"}
{"id": "meca500_programming_manual_6371", "text": "You can adjust the grip force with", "source": "meca500_programming_manual", "chunk_index": 6371, "length": 34, "hash": "dcc7ea5feeb97505fc4d7f3650f0d761"}
{"id": "meca500_programming_manual_6372", "text": "(page 329) and control the gripper speed\nwith", "source": "meca500_programming_manual", "chunk_index": 6372, "length": 45, "hash": "655e3005dbb340d80a226cf50dd7b2fd"}
{"id": "meca500_programming_manual_6373", "text": "The gripper commands GripperOpen (page 325), GripperClose (page 324), and\nMoveGripper (page 326) are queued like other motion command and will be executed\nafter the preceding command is completed. However, any command sent after these will\nexecute immediately as the gripper starts moving. To ensure proper timing, you may\nwait for the gripper state to change (i.e., it is holding or no longer holding a part, see\nGetRtGripperState (page 315)), or send a Delay (page 134) after the gripper command.", "source": "meca500_programming_manual", "chunk_index": 6373, "length": 498, "hash": "5f122dc952038f50c8b4f2aa2a7ae6cc"}
{"id": "meca500_programming_manual_6374", "text": "The gripper commands", "source": "meca500_programming_manual", "chunk_index": 6374, "length": 20, "hash": "5df3b6b5a678fc40476eba9b0666947f"}
{"id": "meca500_programming_manual_6375", "text": "(page 326) are queued like other motion command and will be executed\nafter the preceding command is completed. However,", "source": "meca500_programming_manual", "chunk_index": 6375, "length": 119, "hash": "157b68effb2f891061927fb8efbb3362"}
{"id": "meca500_programming_manual_6376", "text": "any command sent after these will\nexecute immediately", "source": "meca500_programming_manual", "chunk_index": 6376, "length": 53, "hash": "75ebefd4bc15c9fccafbc0059b3c38dd"}
{"id": "meca500_programming_manual_6377", "text": "as the gripper starts moving. To ensure proper timing, you may\nwait for the gripper state to change (i.e., it is holding or no longer holding a part, see", "source": "meca500_programming_manual", "chunk_index": 6377, "length": 153, "hash": "51bca752326a7b675b915c626ec35f13"}
{"id": "meca500_programming_manual_6378", "text": "(page 315)), or send a", "source": "meca500_programming_manual", "chunk_index": 6378, "length": 22, "hash": "ea026e613254eeb6d3c5bf2da03a74bc"}
{"id": "meca500_programming_manual_6379", "text": "(page 134) after the gripper command.", "source": "meca500_programming_manual", "chunk_index": 6379, "length": 37, "hash": "1647dda48e7b72fdb11b0fba3292819d"}
{"id": "meca500_programming_manual_6380", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6380, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6381", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6381, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6382", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6382, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6383", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6383, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6384", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6384, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6385", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6385, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6386", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6386, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6387", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6387, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6388", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6388, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6389", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6389, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6390", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6390, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6391", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6391, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6392", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6392, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6393", "text": "If no gripper is connected, the robot will report the following:", "source": "meca500_programming_manual", "chunk_index": 6393, "length": 64, "hash": "967724a6dc3c1dcf9d32667a667a1e69"}
{"id": "meca500_programming_manual_6394", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6394, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6395", "text": "\u2022 [1038][No gripper connected.]", "source": "meca500_programming_manual", "chunk_index": 6395, "length": 31, "hash": "9a477c4a517f09d15daf9d21d85ea462"}
{"id": "meca500_programming_manual_6396", "text": "Unlike the GripperOpen (page 325) and GripperClose (page 324) commands, MoveGripper\n(page 326) is not available when the robot is activated in recovery mode (and not homed)\nas gripper\u2019s available range is detected during homing.", "source": "meca500_programming_manual", "chunk_index": 6396, "length": 228, "hash": "9eb9a3527e9a9f784b0b7322c9783e7e"}
{"id": "meca500_programming_manual_6397", "text": "(page 324) commands,", "source": "meca500_programming_manual", "chunk_index": 6397, "length": 20, "hash": "3d11b361c8b01ceff70585c76fe07700"}
{"id": "meca500_programming_manual_6398", "text": "(page 326) is not available when the robot is activated in recovery mode (and not homed)\nas gripper\u2019s available range is detected during homing.", "source": "meca500_programming_manual", "chunk_index": 6398, "length": 144, "hash": "c13a075fd3eff83d53bc29d0135a7e9e"}
{"id": "meca500_programming_manual_6399", "text": "In cyclic protocols,\nMotionCommandID 32. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6399, "length": 72, "hash": "eeb39d320e2f0e380b305003c4152107"}
{"id": "meca500_programming_manual_6400", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6400, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6401", "text": "32. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6401, "length": 35, "hash": "790de9f5ea22e9b7c8fe07e89b46b8b2"}
{"id": "meca500_programming_manual_6402", "text": "(page 326) command is", "source": "meca500_programming_manual", "chunk_index": 6402, "length": 21, "hash": "9d5126e53dc1d62ec331cae5f0bf17b8"}
{"id": "meca500_programming_manual_6403", "text": "(page 326) command is", "source": "meca500_programming_manual", "chunk_index": 6403, "length": 21, "hash": "9d5126e53dc1d62ec331cae5f0bf17b8"}
{"id": "meca500_programming_manual_6404", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6404, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6405", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6405, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6406", "text": "This instantaneous command enables the emulation of one of our three EOAT (two electric\ngrippers and a pneumatic module), in the case of the Meca500. The emulation mode is\nalso automatically enabled or disabled with the ActivateSim (page 185) or DeactivateSim\n(page 189) commands. You can emulate any of our Meca500 EOAT, even if you have another\nof these three already installed on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 6406, "length": 395, "hash": "5e316c4da25baaf0f64a58597f80aeee"}
{"id": "meca500_programming_manual_6407", "text": "This instantaneous command enables the emulation of one of our three EOAT (two electric\ngrippers and a pneumatic module), in the case of the Meca500. The emulation mode is\nalso automatically enabled or disabled with the", "source": "meca500_programming_manual", "chunk_index": 6407, "length": 219, "hash": "7983257baa697c92c98150b6ed038906"}
{"id": "meca500_programming_manual_6408", "text": "(page 189) commands. You can emulate any of our Meca500 EOAT, even if you have another\nof these three already installed on the Meca500.", "source": "meca500_programming_manual", "chunk_index": 6408, "length": 135, "hash": "1f31ce8694d4f66bb3c7ba9bf84f360c"}
{"id": "meca500_programming_manual_6409", "text": "\u2022 m: tool model, where:", "source": "meca500_programming_manual", "chunk_index": 6409, "length": 23, "hash": "5d8f5c15173aabd512e8c765bd0a7810"}
{"id": "meca500_programming_manual_6410", "text": "\u2022 m: tool model, where:", "source": "meca500_programming_manual", "chunk_index": 6410, "length": 23, "hash": "5d8f5c15173aabd512e8c765bd0a7810"}
{"id": "meca500_programming_manual_6411", "text": "\u2013 0 disables the simulation of an external tool,", "source": "meca500_programming_manual", "chunk_index": 6411, "length": 48, "hash": "c091d563249572d954c99809dcf2cb3b"}
{"id": "meca500_programming_manual_6412", "text": "0 disables the simulation of an external tool,", "source": "meca500_programming_manual", "chunk_index": 6412, "length": 46, "hash": "68692f8e105a99e7f08f5afa793d9db1"}
{"id": "meca500_programming_manual_6413", "text": "\u2013 1 emulates the current external tool,", "source": "meca500_programming_manual", "chunk_index": 6413, "length": 39, "hash": "7264e181597d9c04ea3741d5f187c988"}
{"id": "meca500_programming_manual_6414", "text": "1 emulates the current external tool,", "source": "meca500_programming_manual", "chunk_index": 6414, "length": 37, "hash": "14041b16ecda75cbd6466a18a801aef9"}
{"id": "meca500_programming_manual_6415", "text": "\u2013 10 emulates the MEGP 25E gripper,", "source": "meca500_programming_manual", "chunk_index": 6415, "length": 35, "hash": "68426591a311c5028978d3db0a5e5226"}
{"id": "meca500_programming_manual_6416", "text": "10 emulates the MEGP 25E gripper,", "source": "meca500_programming_manual", "chunk_index": 6416, "length": 33, "hash": "1f90676cc3698fd6bc759e18b223b851"}
{"id": "meca500_programming_manual_6417", "text": "\u2013 11 emulates the MEGP 25LS gripper,", "source": "meca500_programming_manual", "chunk_index": 6417, "length": 36, "hash": "0464af85c8f52e391a1713244b81cf7b"}
{"id": "meca500_programming_manual_6418", "text": "11 emulates the MEGP 25LS gripper,", "source": "meca500_programming_manual", "chunk_index": 6418, "length": 34, "hash": "3215caa39fbd55b69bfdb838c435c5ff"}
{"id": "meca500_programming_manual_6419", "text": "\u2013 20 emulates the MPM500 pneumatic module.", "source": "meca500_programming_manual", "chunk_index": 6419, "length": 42, "hash": "4d870b38f3638122b4d4f39c0d4a7337"}
{"id": "meca500_programming_manual_6420", "text": "20 emulates the MPM500 pneumatic module.", "source": "meca500_programming_manual", "chunk_index": 6420, "length": 40, "hash": "2bc204ec067821af59db48e21001909e"}
{"id": "meca500_programming_manual_6421", "text": "By default, when m = 1 (current tool type) and no tool is connected, the MEGP 25E gripper\nis emulated.", "source": "meca500_programming_manual", "chunk_index": 6421, "length": 102, "hash": "6833aaf71aace22cd3f7521bae6ef416"}
{"id": "meca500_programming_manual_6422", "text": "By default, when m = 1 (current tool type) and no tool is connected, the MEGP 25E gripper\nis emulated.", "source": "meca500_programming_manual", "chunk_index": 6422, "length": 102, "hash": "6833aaf71aace22cd3f7521bae6ef416"}
{"id": "meca500_programming_manual_6423", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6423, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6424", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6424, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6425", "text": "However, changing the simulated tool to a different type (ex: gripper vs pneumatic module)\nis only possible when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6425, "length": 138, "hash": "4248d580a197a8b7560833e52f787768"}
{"id": "meca500_programming_manual_6426", "text": "However, changing the simulated tool to a different type (ex: gripper vs pneumatic module)\nis only possible when the robot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6426, "length": 138, "hash": "4248d580a197a8b7560833e52f787768"}
{"id": "meca500_programming_manual_6427", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6427, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_6428", "text": "This command is not available in cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6428, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "meca500_programming_manual_6429", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6429, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6430", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6430, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6431", "text": "This queued command limits the grip force of Mecademic grippers.", "source": "meca500_programming_manual", "chunk_index": 6431, "length": 64, "hash": "54fb67c516be3801bc410f6b1368e80d"}
{"id": "meca500_programming_manual_6432", "text": "This queued command limits the grip force of Mecademic grippers.", "source": "meca500_programming_manual", "chunk_index": 6432, "length": 64, "hash": "54fb67c516be3801bc410f6b1368e80d"}
{"id": "meca500_programming_manual_6433", "text": "\u2022 p: percentage of maximum grip force (~40 N), ranging from 5 to 100.", "source": "meca500_programming_manual", "chunk_index": 6433, "length": 69, "hash": "19e5c3734b482e5ce525083eaa2264a9"}
{"id": "meca500_programming_manual_6434", "text": "\u2022 p: percentage of maximum grip force (~40 N), ranging from 5 to 100.", "source": "meca500_programming_manual", "chunk_index": 6434, "length": 69, "hash": "19e5c3734b482e5ce525083eaa2264a9"}
{"id": "meca500_programming_manual_6435", "text": "By default, the grip force limit is 50%.", "source": "meca500_programming_manual", "chunk_index": 6435, "length": 40, "hash": "bac5a7e85b8633476cc4e98dbb83a7c8"}
{"id": "meca500_programming_manual_6436", "text": "By default, the grip force limit is 50%.", "source": "meca500_programming_manual", "chunk_index": 6436, "length": 40, "hash": "bac5a7e85b8633476cc4e98dbb83a7c8"}
{"id": "meca500_programming_manual_6437", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6437, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6438", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6438, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6439", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6439, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6440", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6440, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6441", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6441, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6442", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6442, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6443", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6443, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6444", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6444, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6445", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6445, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6446", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6446, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6447", "text": "In cyclic protocols,\nMotionCommandID 20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6447, "length": 72, "hash": "c1244db1cc060f8a0da50715dabf3a6b"}
{"id": "meca500_programming_manual_6448", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6448, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6449", "text": "20. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6449, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "meca500_programming_manual_6450", "text": "the SetGripperForce (page 329) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6450, "length": 56, "hash": "8982563213dc9936a702c41968c10cce"}
{"id": "meca500_programming_manual_6451", "text": "(page 329) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6451, "length": 36, "hash": "cf51b889a2cd6bd494f2d7480937f229"}
{"id": "meca500_programming_manual_6452", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6452, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6453", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6453, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6454", "text": "This queued command sets the closed and open states of the gripper and is used mainly to\nredefine the actions of the GripperClose (page 324) and GripperOpen (page 325) commands,\nrespectively.", "source": "meca500_programming_manual", "chunk_index": 6454, "length": 191, "hash": "2de52edb0682cf98b072fdfcd4ba76f0"}
{"id": "meca500_programming_manual_6455", "text": "This queued command sets the closed and open states of the gripper and is used mainly to\nredefine the actions of the", "source": "meca500_programming_manual", "chunk_index": 6455, "length": 116, "hash": "86cdbf18599eb442a3eebefe044ce7e0"}
{"id": "meca500_programming_manual_6456", "text": "(page 325) commands,\nrespectively.", "source": "meca500_programming_manual", "chunk_index": 6456, "length": 34, "hash": "7a797db1b3f76ac1a82ac97ec313c974"}
{"id": "meca500_programming_manual_6457", "text": "The SetGripperRange (page 330) command is useful for the MEGP 25LS gripper. For example,\nif you are manipulating parts that require fingers opening between 10 mm and 20 mm, but\nthe allowable range of the gripper as detected during the homing is 48 mm, it would be more\nefficient to redefine the actions of the GripperClose (page 324) and GripperOpen (page 325)\ncommands by calling SetGripperRange(8,22) (page 330), or else the fingers will move more\nthan necessary, increasing your cycle time.", "source": "meca500_programming_manual", "chunk_index": 6457, "length": 493, "hash": "c273d18a53ed245ca468c06fa5aae36f"}
{"id": "meca500_programming_manual_6458", "text": "(page 330) command is useful for the MEGP 25LS gripper. For example,\nif you are manipulating parts that require fingers opening between 10 mm and 20 mm, but\nthe allowable range of the gripper as detected during the homing is 48 mm, it would be more\nefficient to redefine the actions of the", "source": "meca500_programming_manual", "chunk_index": 6458, "length": 289, "hash": "cb88bf1624c2247b055cf9e4dbd93839"}
{"id": "meca500_programming_manual_6459", "text": "(page 325)\ncommands by calling", "source": "meca500_programming_manual", "chunk_index": 6459, "length": 30, "hash": "4d87cf86734e7226b0db06da6dabcd2f"}
{"id": "meca500_programming_manual_6460", "text": "SetGripperRange(8,22)", "source": "meca500_programming_manual", "chunk_index": 6460, "length": 21, "hash": "2f07771ebc74fe2090d06ecd10e975f7"}
{"id": "meca500_programming_manual_6461", "text": "(page 330), or else the fingers will move more\nthan necessary, increasing your cycle time.", "source": "meca500_programming_manual", "chunk_index": 6461, "length": 90, "hash": "624e6d1467a6c6edfab19b61ffacef68"}
{"id": "meca500_programming_manual_6462", "text": "The SetGripperRange (page 330) command does not limit the accessible range of the\nin contrast to the SetJointLimits (page 203) command, which limits the range\ngripper,\nif during homing, the robot detected that the range for the\nof a joint. For example,\nfinger opening was [0, 15], and then you sent SetGripperRange(8,13) (page 330), you\ncan still open the gripper more with MoveGripper(14) (page 326). However, using the\ncommands GripperOpen (page 325) and GripperClose (page 324) will be equivalent to using\nthe commands MoveGripper(8) (page 326) and MoveGripper(13) (page 326), respectively.\nFurthermore, when the fingers opening is 8 mm (or less) or 13 mm (or more), the state of\nthe gripper will be \u201cgripper open\u201d or \u201cgripper close\u201d, respectively (see GetRtGripperState\n(page 315)).", "source": "meca500_programming_manual", "chunk_index": 6462, "length": 786, "hash": "06350cdb4326455f3f4977f52ff5dc19"}
{"id": "meca500_programming_manual_6463", "text": "(page 330) command does not limit the accessible range of the\nin contrast to the", "source": "meca500_programming_manual", "chunk_index": 6463, "length": 80, "hash": "91b455693b92cc035c5fe4cd23d520bb"}
{"id": "meca500_programming_manual_6464", "text": "(page 203) command, which limits the range\ngripper,\nif during homing, the robot detected that the range for the\nof a joint. For example,", "source": "meca500_programming_manual", "chunk_index": 6464, "length": 136, "hash": "52fe81ae115098ae0f7ff7ea5b6e1e52"}
{"id": "meca500_programming_manual_6465", "text": "finger opening was [0, 15], and then you sent", "source": "meca500_programming_manual", "chunk_index": 6465, "length": 45, "hash": "d9277b80b0a9695ccd0c529c5cbd5de2"}
{"id": "meca500_programming_manual_6466", "text": "SetGripperRange(8,13)", "source": "meca500_programming_manual", "chunk_index": 6466, "length": 21, "hash": "2891bded90df659800804a1578d644bc"}
{"id": "meca500_programming_manual_6467", "text": "(page 330), you\ncan still open the gripper more with", "source": "meca500_programming_manual", "chunk_index": 6467, "length": 52, "hash": "269de67561466c46060d95ea408b681d"}
{"id": "meca500_programming_manual_6468", "text": "(page 326). However, using the\ncommands", "source": "meca500_programming_manual", "chunk_index": 6468, "length": 39, "hash": "e5696b95d34bdea68b4df5a5607f96ea"}
{"id": "meca500_programming_manual_6469", "text": "(page 324) will be equivalent to using\nthe commands", "source": "meca500_programming_manual", "chunk_index": 6469, "length": 51, "hash": "2a32bf42156dfa1855e933b1d6435ca9"}
{"id": "meca500_programming_manual_6470", "text": "(page 326), respectively.\nFurthermore, when the fingers opening is 8 mm (or less) or 13 mm (or more), the state of\nthe gripper will be \u201cgripper open\u201d or \u201cgripper close\u201d, respectively (see", "source": "meca500_programming_manual", "chunk_index": 6470, "length": 187, "hash": "fba1eee1fee810a3ae5a5699b9ad3784"}
{"id": "meca500_programming_manual_6471", "text": "SetGripperRange(dclosed,dopen)", "source": "meca500_programming_manual", "chunk_index": 6471, "length": 30, "hash": "6774e8267502024f982de39e2e98690a"}
{"id": "meca500_programming_manual_6472", "text": "\u2022 dclosed: fingers opening that should correspond to closed state, in mm;", "source": "meca500_programming_manual", "chunk_index": 6472, "length": 73, "hash": "a90c51cfc6c5d8ae6a2e057bd15805ca"}
{"id": "meca500_programming_manual_6473", "text": ": fingers opening that should correspond to closed state, in mm;", "source": "meca500_programming_manual", "chunk_index": 6473, "length": 64, "hash": "5a20cea05f4825a6443b40218460725a"}
{"id": "meca500_programming_manual_6474", "text": "\u2022 dopen: fingers opening that should correspond to open state, in mm.", "source": "meca500_programming_manual", "chunk_index": 6474, "length": 69, "hash": "bd51ad5912de77be9cb53b3ba7fee5f8"}
{"id": "meca500_programming_manual_6475", "text": ": fingers opening that should correspond to open state, in mm.", "source": "meca500_programming_manual", "chunk_index": 6475, "length": 62, "hash": "7d4e79f78e98ebe391b85735422b78b1"}
{"id": "meca500_programming_manual_6476", "text": "By default, the gripper closed and open states are those detected during the homing of the\ngripper, i.e., dclosed = 0 and dopen \u2264 6, in the case of the MEGP 25E gripper, or dopen \u2264 48, in the\ncase of the MEGP 25LS gripper. To go back to these default values, use SetGripperRange(0,0)\n(page 330).", "source": "meca500_programming_manual", "chunk_index": 6476, "length": 295, "hash": "ec57a043a67753540e3a1fee45d446e5"}
{"id": "meca500_programming_manual_6477", "text": "By default, the gripper closed and open states are those detected during the homing of the\ngripper, i.e., d", "source": "meca500_programming_manual", "chunk_index": 6477, "length": 107, "hash": "6c8819051d697577f50a587f6fd25934"}
{"id": "meca500_programming_manual_6478", "text": "\u2264 6, in the case of the MEGP 25E gripper, or d", "source": "meca500_programming_manual", "chunk_index": 6478, "length": 46, "hash": "e330f574ddc1be4deb4965571bf54a85"}
{"id": "meca500_programming_manual_6479", "text": "\u2264 48, in the\ncase of the MEGP 25LS gripper. To go back to these default values, use", "source": "meca500_programming_manual", "chunk_index": 6479, "length": 83, "hash": "7dbc938419364435eedcdba5089472b3"}
{"id": "meca500_programming_manual_6480", "text": "SetGripperRange(0,0)", "source": "meca500_programming_manual", "chunk_index": 6480, "length": 20, "hash": "557265e4167aaea6983cb2de692be66d"}
{"id": "meca500_programming_manual_6481", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6481, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6482", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6482, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6483", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6483, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6484", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6484, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6485", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6485, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6486", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6486, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6487", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6487, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6488", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6488, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6489", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6489, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6490", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6490, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6491", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6491, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6492", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6492, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6493", "text": "In cyclic protocols,\nMotionCommandID 31. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6493, "length": 72, "hash": "65c9daeb302b6900c6f93c8041389cc7"}
{"id": "meca500_programming_manual_6494", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6494, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6495", "text": "31. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6495, "length": 35, "hash": "ee348d1bc9974c288bd5b55d044894e3"}
{"id": "meca500_programming_manual_6496", "text": "the SetGripperRange (page 330) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6496, "length": 56, "hash": "187c4ca9aad0370b380bd9a3eabb8bd4"}
{"id": "meca500_programming_manual_6497", "text": "(page 330) command is represented by", "source": "meca500_programming_manual", "chunk_index": 6497, "length": 36, "hash": "674803675d1adad739d2d19a5278df3a"}
{"id": "meca500_programming_manual_6498", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6498, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6499", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6499, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6500", "text": "This queued command limits the velocity of the gripper fingers (with respect to the gripper).", "source": "meca500_programming_manual", "chunk_index": 6500, "length": 93, "hash": "975b4a0653e234174bbe71ab5a630636"}
{"id": "meca500_programming_manual_6501", "text": "This queued command limits the velocity of the gripper fingers (with respect to the gripper).", "source": "meca500_programming_manual", "chunk_index": 6501, "length": 93, "hash": "975b4a0653e234174bbe71ab5a630636"}
{"id": "meca500_programming_manual_6502", "text": "\u2022 p: percentage of maximum finger velocity (~50 mm/s), ranging from 5 to 100.\u2020", "source": "meca500_programming_manual", "chunk_index": 6502, "length": 78, "hash": "e7d2e5e13dbab9928ef0ae0c6707c93c"}
{"id": "meca500_programming_manual_6503", "text": "\u2022 p: percentage of maximum finger velocity (~50 mm/s), ranging from 5 to 100.", "source": "meca500_programming_manual", "chunk_index": 6503, "length": 77, "hash": "44647e6b26fae267f1b5f94ecda9abb4"}
{"id": "meca500_programming_manual_6504", "text": "\u2020 If the gripper force is set to 100% using the SetGripperForce (page 329) command, it is\npossible to exceptionally increase the argument p up to 200. However, it should be noted\nthat doing so will result in reduced accuracy of the force control on the gripper fingers.", "source": "meca500_programming_manual", "chunk_index": 6504, "length": 269, "hash": "f37355d79fbb3d8ebdf48e47604106b4"}
{"id": "meca500_programming_manual_6505", "text": "If the gripper force is set to 100% using the", "source": "meca500_programming_manual", "chunk_index": 6505, "length": 45, "hash": "d40365f8e812301ffc6a1a665c2bfcdf"}
{"id": "meca500_programming_manual_6506", "text": "(page 329) command, it is\npossible to exceptionally increase the argument p up to 200. However, it should be noted\nthat doing so will result in reduced accuracy of the force control on the gripper fingers.", "source": "meca500_programming_manual", "chunk_index": 6506, "length": 205, "hash": "c3ed1e285d0a9c4a073e3cf71fc189f9"}
{"id": "meca500_programming_manual_6507", "text": "By default, the finger velocity limit is 40%.", "source": "meca500_programming_manual", "chunk_index": 6507, "length": 45, "hash": "40730025a406f7ba99ef819d08a793fc"}
{"id": "meca500_programming_manual_6508", "text": "By default, the finger velocity limit is 40%.", "source": "meca500_programming_manual", "chunk_index": 6508, "length": 45, "hash": "40730025a406f7ba99ef819d08a793fc"}
{"id": "meca500_programming_manual_6509", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6509, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6510", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6510, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6511", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6511, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6512", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6512, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6513", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6513, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6514", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6514, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6515", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6515, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6516", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6516, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6517", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6517, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6518", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6518, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6519", "text": "In cyclic protocols,\nMotionCommandID 19. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6519, "length": 72, "hash": "5fea252b1a06956a7ebc34382aaef4b6"}
{"id": "meca500_programming_manual_6520", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6520, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6521", "text": "19. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6521, "length": 35, "hash": "a6a9318481953a6f5537b0be8a84b9cd"}
{"id": "meca500_programming_manual_6522", "text": "(page 332) command is", "source": "meca500_programming_manual", "chunk_index": 6522, "length": 21, "hash": "6a5da15489d9e51c8d4e81d5eec2c0e0"}
{"id": "meca500_programming_manual_6523", "text": "(page 332) command is", "source": "meca500_programming_manual", "chunk_index": 6523, "length": 21, "hash": "6a5da15489d9e51c8d4e81d5eec2c0e0"}
{"id": "meca500_programming_manual_6524", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6524, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6525", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6525, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6526", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6526, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6527", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6527, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6528", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6528, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6529", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6529, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6530", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6530, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6531", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6531, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6532", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6532, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6533", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6533, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6534", "text": "SetOutputState_Immediate", "source": "meca500_programming_manual", "chunk_index": 6534, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "meca500_programming_manual_6535", "text": "SetOutputState_Immediate", "source": "meca500_programming_manual", "chunk_index": 6535, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "meca500_programming_manual_6536", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6536, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6537", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6537, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6538", "text": "SetOutputState_Immediate", "source": "meca500_programming_manual", "chunk_index": 6538, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "meca500_programming_manual_6539", "text": "SetOutputState_Immediate", "source": "meca500_programming_manual", "chunk_index": 6539, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "meca500_programming_manual_6540", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6540, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6541", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6541, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6542", "text": "SetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6542, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "meca500_programming_manual_6543", "text": "SetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6543, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "meca500_programming_manual_6544", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6544, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6545", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6545, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6546", "text": "SetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6546, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "meca500_programming_manual_6547", "text": "SetVacuumPurgeDuration", "source": "meca500_programming_manual", "chunk_index": 6547, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "meca500_programming_manual_6548", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6548, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6549", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6549, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6550", "text": "SetVacuumPurgeDuration_Immediate", "source": "meca500_programming_manual", "chunk_index": 6550, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "meca500_programming_manual_6551", "text": "SetVacuumPurgeDuration_Immediate", "source": "meca500_programming_manual", "chunk_index": 6551, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "meca500_programming_manual_6552", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6552, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6553", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6553, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6554", "text": "SetVacuumPurgeDuration_Immediate", "source": "meca500_programming_manual", "chunk_index": 6554, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "meca500_programming_manual_6555", "text": "SetVacuumPurgeDuration_Immediate", "source": "meca500_programming_manual", "chunk_index": 6555, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "meca500_programming_manual_6556", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6556, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6557", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6557, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6558", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6558, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6559", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6559, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6560", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6560, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6561", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6561, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6562", "text": "SetVacuumThreshold_Immediate", "source": "meca500_programming_manual", "chunk_index": 6562, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "meca500_programming_manual_6563", "text": "SetVacuumThreshold_Immediate", "source": "meca500_programming_manual", "chunk_index": 6563, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "meca500_programming_manual_6564", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6564, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6565", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6565, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6566", "text": "SetVacuumThreshold_Immediate", "source": "meca500_programming_manual", "chunk_index": 6566, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "meca500_programming_manual_6567", "text": "SetVacuumThreshold_Immediate", "source": "meca500_programming_manual", "chunk_index": 6567, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "meca500_programming_manual_6568", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6568, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6569", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6569, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6570", "text": "This queued command is used to control each of the two valves in the MPM500 pneumatic\nmodule independently.", "source": "meca500_programming_manual", "chunk_index": 6570, "length": 107, "hash": "af3284286bc03489e76cc19c576c60bd"}
{"id": "meca500_programming_manual_6571", "text": "This queued command is used to control each of the two valves in the MPM500 pneumatic\nmodule independently.", "source": "meca500_programming_manual", "chunk_index": 6571, "length": 107, "hash": "af3284286bc03489e76cc19c576c60bd"}
{"id": "meca500_programming_manual_6572", "text": "SetValveState(v1,v2)", "source": "meca500_programming_manual", "chunk_index": 6572, "length": 20, "hash": "64db558e9fd3ae29b87924f84a12d96d"}
{"id": "meca500_programming_manual_6573", "text": "\u2022 v1: open (1), close (0), or keep unchanged (\u22121 or *) valve 1;", "source": "meca500_programming_manual", "chunk_index": 6573, "length": 63, "hash": "be6e76c1f8909f75c3f9acc2729d19b7"}
{"id": "meca500_programming_manual_6574", "text": ": open (1), close (0), or keep unchanged (\u22121 or *) valve 1;", "source": "meca500_programming_manual", "chunk_index": 6574, "length": 59, "hash": "6f83cac9af7b260759f778f4fd78ef90"}
{"id": "meca500_programming_manual_6575", "text": "\u2022 v2: open (1), close (0), or keep unchanged (\u22121 or *) valve 2.", "source": "meca500_programming_manual", "chunk_index": 6575, "length": 63, "hash": "7ecea263c3513c70924cf1d8e7a50f54"}
{"id": "meca500_programming_manual_6576", "text": ": open (1), close (0), or keep unchanged (\u22121 or *) valve 2.", "source": "meca500_programming_manual", "chunk_index": 6576, "length": 59, "hash": "76879799d8f886118f62b7cac563e1f1"}
{"id": "meca500_programming_manual_6577", "text": "Both valves are closed by default, i.e., at power-up, and are automatically closed when the\nrobot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6577, "length": 113, "hash": "5935864090fa5b2a5f030f15e93357d7"}
{"id": "meca500_programming_manual_6578", "text": "Both valves are closed by default, i.e., at power-up, and are automatically closed when the\nrobot is deactivated.", "source": "meca500_programming_manual", "chunk_index": 6578, "length": 113, "hash": "5935864090fa5b2a5f030f15e93357d7"}
{"id": "meca500_programming_manual_6579", "text": "Since the MPM500 is often used with pneumatic grippers, you can also use the command\nGripperOpen (page 325) instead of SetValveState(1,0) (page 340), and GripperClose\n(page 324) instead of SetValveState(0,1) (page 340). However, note that these commands\ndo not have the same effect on blending (see Section 3).", "source": "meca500_programming_manual", "chunk_index": 6579, "length": 310, "hash": "a0549e229f1daa8dd96f890cbf92b4da"}
{"id": "meca500_programming_manual_6580", "text": "Since the MPM500 is often used with pneumatic grippers, you can also use the command", "source": "meca500_programming_manual", "chunk_index": 6580, "length": 84, "hash": "3f98604ded4fadf36ec83d0411baca48"}
{"id": "meca500_programming_manual_6581", "text": "(page 325) instead of", "source": "meca500_programming_manual", "chunk_index": 6581, "length": 21, "hash": "3b9fea41f842c3a64bd4d6a33e6f3024"}
{"id": "meca500_programming_manual_6582", "text": "(page 324) instead of", "source": "meca500_programming_manual", "chunk_index": 6582, "length": 21, "hash": "5926e00614114b053cc6db44641c5c5c"}
{"id": "meca500_programming_manual_6583", "text": "(page 340). However, note that these commands\ndo not have the same effect on blending (see Section 3).", "source": "meca500_programming_manual", "chunk_index": 6583, "length": 102, "hash": "c4d0d9a547d1206afa95abaccf0c02f4"}
{"id": "meca500_programming_manual_6584", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6584, "length": 248, "hash": "0cb4c86be70e26b35ac452732e4443b2"}
{"id": "meca500_programming_manual_6585", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "meca500_programming_manual", "chunk_index": 6585, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "meca500_programming_manual_6586", "text": "robot\nis ready for motion", "source": "meca500_programming_manual", "chunk_index": 6586, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "meca500_programming_manual_6587", "text": "(page 359), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "meca500_programming_manual", "chunk_index": 6587, "length": 138, "hash": "4774378b4762992f785664c04f86db72"}
{"id": "meca500_programming_manual_6588", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6588, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6589", "text": "\u2022 [1005][The robot is not activated.]", "source": "meca500_programming_manual", "chunk_index": 6589, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "meca500_programming_manual_6590", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6590, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6591", "text": "\u2022 [1006][The robot is not homed.]", "source": "meca500_programming_manual", "chunk_index": 6591, "length": 33, "hash": "1cf8d8ffece15f88ef8451f612477906"}
{"id": "meca500_programming_manual_6592", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6592, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6593", "text": "\u2022 [1011][The robot is already in error.]", "source": "meca500_programming_manual", "chunk_index": 6593, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "meca500_programming_manual_6594", "text": "In cyclic protocols,\nMotionCommandID 30. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6594, "length": 72, "hash": "246ecd086d5bcef9826a09f8bd4aa296"}
{"id": "meca500_programming_manual_6595", "text": "In cyclic protocols,", "source": "meca500_programming_manual", "chunk_index": 6595, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "meca500_programming_manual_6596", "text": "30. See Section 5 for more details.", "source": "meca500_programming_manual", "chunk_index": 6596, "length": 35, "hash": "bb51f1b1cf33b5dda6f3df30dd5db2cc"}
{"id": "meca500_programming_manual_6597", "text": "the SetValveState (page 340) command is", "source": "meca500_programming_manual", "chunk_index": 6597, "length": 39, "hash": "97c16fbabd148709c66451ce8cdaeab4"}
{"id": "meca500_programming_manual_6598", "text": "(page 340) command is", "source": "meca500_programming_manual", "chunk_index": 6598, "length": 21, "hash": "4bdc6128532ef63fa2b1e65a45329209"}
{"id": "meca500_programming_manual_6599", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6599, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6600", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6600, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6601", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6601, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6602", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6602, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6603", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6603, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6604", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6604, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6605", "text": "VacuumGrip_Immediate", "source": "meca500_programming_manual", "chunk_index": 6605, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "meca500_programming_manual_6606", "text": "VacuumGrip_Immediate", "source": "meca500_programming_manual", "chunk_index": 6606, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "meca500_programming_manual_6607", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6607, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6608", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6608, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6609", "text": "VacuumGrip_Immediate", "source": "meca500_programming_manual", "chunk_index": 6609, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "meca500_programming_manual_6610", "text": "VacuumGrip_Immediate", "source": "meca500_programming_manual", "chunk_index": 6610, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "meca500_programming_manual_6611", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6611, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6612", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6612, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6613", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6613, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6614", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6614, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6615", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6615, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6616", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6616, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6617", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6617, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6618", "text": "This command is available only on the MCS500 robot.", "source": "meca500_programming_manual", "chunk_index": 6618, "length": 51, "hash": "82e7995c7e79c51a8af859d1c071031d"}
{"id": "meca500_programming_manual_6619", "text": "for managing variables", "source": "meca500_programming_manual", "chunk_index": 6619, "length": 22, "hash": "963bee820385766af3b441eb343b566f"}
{"id": "meca500_programming_manual_6620", "text": "for managing variables", "source": "meca500_programming_manual", "chunk_index": 6620, "length": 22, "hash": "963bee820385766af3b441eb343b566f"}
{"id": "meca500_programming_manual_6621", "text": "Please note that this feature is in beta and may undergo changes, including potential API\nchanges.", "source": "meca500_programming_manual", "chunk_index": 6621, "length": 98, "hash": "412181872d09ebe81d72e23181ded525"}
{"id": "meca500_programming_manual_6622", "text": "Please note that this feature is in beta and may undergo changes, including potential API\nchanges.", "source": "meca500_programming_manual", "chunk_index": 6622, "length": 98, "hash": "412181872d09ebe81d72e23181ded525"}
{"id": "meca500_programming_manual_6623", "text": "We also provide an API to manage persistent variables. These variables persist after the robot\nis rebooted. They can be used in programs that control the robot (via the TCP API or cyclic\nprotocols).", "source": "meca500_programming_manual", "chunk_index": 6623, "length": 198, "hash": "32da65d75c2d3eb47ceea65da9bcadd3"}
{"id": "meca500_programming_manual_6624", "text": "We also provide an API to manage persistent variables. These variables persist after the robot\nis rebooted. They can be used in programs that control the robot (via the TCP API or cyclic\nprotocols).", "source": "meca500_programming_manual", "chunk_index": 6624, "length": 198, "hash": "32da65d75c2d3eb47ceea65da9bcadd3"}
{"id": "meca500_programming_manual_6625", "text": "Variables are ideal for saving information that can vary between different robots running the\nsame program, such as reference positions, desired velocities, or delays. This allows the\nprogram to automatically adapt to each robot it is executed on.", "source": "meca500_programming_manual", "chunk_index": 6625, "length": 247, "hash": "53ef30b62c571668722c4907c489d8ec"}
{"id": "meca500_programming_manual_6626", "text": "Variables are ideal for saving information that can vary between different robots running the\nsame program, such as reference positions, desired velocities, or delays. This allows the\nprogram to automatically adapt to each robot it is executed on.", "source": "meca500_programming_manual", "chunk_index": 6626, "length": 247, "hash": "53ef30b62c571668722c4907c489d8ec"}
{"id": "meca500_programming_manual_6627", "text": "Variables can be referenced by the programs saved in the robot (by passing variables instead\nof numeric arguments to robot commands). They can also be referenced by a PLC (by using\nvariables as arguments for motion commands or by setting variables, then starting a program\nthat uses them).", "source": "meca500_programming_manual", "chunk_index": 6627, "length": 289, "hash": "52b2d923b961d0acdf6927effb01b83e"}
{"id": "meca500_programming_manual_6628", "text": "Variables can be referenced by the programs saved in the robot (by passing variables instead\nof numeric arguments to robot commands). They can also be referenced by a PLC (by using\nvariables as arguments for motion commands or by setting variables, then starting a program\nthat uses them).", "source": "meca500_programming_manual", "chunk_index": 6628, "length": 289, "hash": "52b2d923b961d0acdf6927effb01b83e"}
{"id": "meca500_programming_manual_6629", "text": "The complete list of variables management commands is:", "source": "meca500_programming_manual", "chunk_index": 6629, "length": 54, "hash": "e3240555d871425648f8777d4c48d417"}
{"id": "meca500_programming_manual_6630", "text": "The complete list of variables management commands is:", "source": "meca500_programming_manual", "chunk_index": 6630, "length": 54, "hash": "e3240555d871425648f8777d4c48d417"}
{"id": "meca500_programming_manual_6631", "text": "\u2022 CreateVariable (page 351)", "source": "meca500_programming_manual", "chunk_index": 6631, "length": 27, "hash": "a88678e4a4a09a90f938c448edbd1e40"}
{"id": "meca500_programming_manual_6632", "text": "\u2022 DeleteVariable (page 352)", "source": "meca500_programming_manual", "chunk_index": 6632, "length": 27, "hash": "1e2add17eda3222fc96584879df3642c"}
{"id": "meca500_programming_manual_6633", "text": "\u2022 GetVariable (page 353)", "source": "meca500_programming_manual", "chunk_index": 6633, "length": 24, "hash": "051f6922658a528e0b037cb46ad225e6"}
{"id": "meca500_programming_manual_6634", "text": "\u2022 ListVariables (page 354)", "source": "meca500_programming_manual", "chunk_index": 6634, "length": 26, "hash": "dbba6c576785371dda347a745a3ac615"}
{"id": "meca500_programming_manual_6635", "text": "\u2022 SetVariable (page 354)", "source": "meca500_programming_manual", "chunk_index": 6635, "length": 24, "hash": "e548b03dc9213f87e74094d4c875066a"}
{"id": "meca500_programming_manual_6636", "text": "The following provides a summary of important details regarding variables in the robot:", "source": "meca500_programming_manual", "chunk_index": 6636, "length": 87, "hash": "eba509ba2893f3c601a5911bed4c2388"}
{"id": "meca500_programming_manual_6637", "text": "The following provides a summary of important details regarding variables in the robot:", "source": "meca500_programming_manual", "chunk_index": 6637, "length": 87, "hash": "eba509ba2893f3c601a5911bed4c2388"}
{"id": "meca500_programming_manual_6638", "text": "\u2022 Persistence Variables are saved on the robot and persist after rebooting.", "source": "meca500_programming_manual", "chunk_index": 6638, "length": 75, "hash": "747f32c3439e8bf138829b4fac73950b"}
{"id": "meca500_programming_manual_6639", "text": "Variables are saved on the robot and persist after rebooting.", "source": "meca500_programming_manual", "chunk_index": 6639, "length": 61, "hash": "fafb594b4e067f199decc833039aa14d"}
{"id": "meca500_programming_manual_6640", "text": "\u2022 Access and modification Variables can be accessed, created, modified, or deleted in", "source": "meca500_programming_manual", "chunk_index": 6640, "length": 85, "hash": "17fa0fac5d2d332095f58b1ad9c4cac2"}
{"id": "meca500_programming_manual_6641", "text": "Access and modification", "source": "meca500_programming_manual", "chunk_index": 6641, "length": 23, "hash": "0a2fd6feae5b6404cfe22b222d342c53"}
{"id": "meca500_programming_manual_6642", "text": "Variables can be accessed, created, modified, or deleted in", "source": "meca500_programming_manual", "chunk_index": 6642, "length": 59, "hash": "ad02d0aa664f164994558976ab912c11"}
{"id": "meca500_programming_manual_6643", "text": "any robot state (robot activated, robot deactivated, robot in recovery mode, etc.).", "source": "meca500_programming_manual", "chunk_index": 6643, "length": 83, "hash": "8491b754bc0df125c7d34fbe18e9498e"}
{"id": "meca500_programming_manual_6644", "text": "any robot state (robot activated, robot deactivated, robot in recovery mode, etc.).", "source": "meca500_programming_manual", "chunk_index": 6644, "length": 83, "hash": "8491b754bc0df125c7d34fbe18e9498e"}
{"id": "meca500_programming_manual_6645", "text": "\u2022 Data types Variables can store a variety of JSON-supported values, including booleans,", "source": "meca500_programming_manual", "chunk_index": 6645, "length": 88, "hash": "e15033c481e75fdee31f4d7e68aa10a4"}
{"id": "meca500_programming_manual_6646", "text": "Variables can store a variety of JSON-supported values, including booleans,", "source": "meca500_programming_manual", "chunk_index": 6646, "length": 75, "hash": "6e69322fe9ba1a8c2ecded9e5718e926"}
{"id": "meca500_programming_manual_6647", "text": "numbers, strings, and arrays.", "source": "meca500_programming_manual", "chunk_index": 6647, "length": 29, "hash": "26cd213e4d8a65a6816ca916495faf1c"}
{"id": "meca500_programming_manual_6648", "text": "numbers, strings, and arrays.", "source": "meca500_programming_manual", "chunk_index": 6648, "length": 29, "hash": "26cd213e4d8a65a6816ca916495faf1c"}
{"id": "meca500_programming_manual_6649", "text": "The variable type is deduced by the value provided to CreateVariable (page 351). Command\nSetVariable (page 354) will be refused if the provided value is of a different type. No automatic\ntype conversion is performed by the robot.", "source": "meca500_programming_manual", "chunk_index": 6649, "length": 229, "hash": "899017203eb77bcc2dbfe63c1f467257"}
{"id": "meca500_programming_manual_6650", "text": "The variable type is deduced by the value provided to", "source": "meca500_programming_manual", "chunk_index": 6650, "length": 53, "hash": "0e67a42a16d18fc2dd5617623088cf76"}
{"id": "meca500_programming_manual_6651", "text": "(page 354) will be refused if the provided value is of a different type. No automatic\ntype conversion is performed by the robot.", "source": "meca500_programming_manual", "chunk_index": 6651, "length": 128, "hash": "2ab4d205c7ec17cf4b15441353ef0419"}
{"id": "meca500_programming_manual_6652", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6652, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6653", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6653, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6654", "text": "Managing variables in the MecaPortal", "source": "meca500_programming_manual", "chunk_index": 6654, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "meca500_programming_manual_6655", "text": "Managing variables in the MecaPortal", "source": "meca500_programming_manual", "chunk_index": 6655, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "meca500_programming_manual_6656", "text": "The robot\u2019s MecaPortal web interface has a configuration panel to view, edit, create and delete\nvariables. For more information on the MecaPortal, please refer to mecaportal_config_menu\nof the MecaPortal operating manual.", "source": "meca500_programming_manual", "chunk_index": 6656, "length": 221, "hash": "f570b8b7f4cee6c6936610831ec3da61"}
{"id": "meca500_programming_manual_6657", "text": "The robot\u2019s MecaPortal web interface has a configuration panel to view, edit, create and delete\nvariables. For more information on the MecaPortal, please refer to", "source": "meca500_programming_manual", "chunk_index": 6657, "length": 162, "hash": "e55319406ab3a7aa2c01c7888c1690e2"}
{"id": "meca500_programming_manual_6658", "text": "mecaportal_config_menu", "source": "meca500_programming_manual", "chunk_index": 6658, "length": 22, "hash": "a5c3ef3ab5728a830d4f0ec155f97c0b"}
{"id": "meca500_programming_manual_6659", "text": "of the MecaPortal operating manual.", "source": "meca500_programming_manual", "chunk_index": 6659, "length": 35, "hash": "09e68a9873883c80563f8dce51950a90"}
{"id": "meca500_programming_manual_6660", "text": "Managing variables in the MecaPortal", "source": "meca500_programming_manual", "chunk_index": 6660, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "meca500_programming_manual_6661", "text": "Managing variables in the MecaPortal", "source": "meca500_programming_manual", "chunk_index": 6661, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "meca500_programming_manual_6662", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6662, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6663", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6663, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6664", "text": "Managing variables in robot programs (TCP API)", "source": "meca500_programming_manual", "chunk_index": 6664, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "meca500_programming_manual_6665", "text": "Managing variables in robot programs (TCP API)", "source": "meca500_programming_manual", "chunk_index": 6665, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "meca500_programming_manual_6666", "text": "In robot programs, you can use CreateVariable (page 351), DeleteVariable (page 352) or\nSetVariable (page 354) commands to manage your variables.", "source": "meca500_programming_manual", "chunk_index": 6666, "length": 144, "hash": "d9f8209bcb8349f133095d1558c04e1e"}
{"id": "meca500_programming_manual_6667", "text": "In robot programs, you can use", "source": "meca500_programming_manual", "chunk_index": 6667, "length": 30, "hash": "dfc5b6e53eadb0a44d7fb8a0b704c073"}
{"id": "meca500_programming_manual_6668", "text": "(page 354) commands to manage your variables.", "source": "meca500_programming_manual", "chunk_index": 6668, "length": 45, "hash": "b7d2251795921c68d24240f7d4296467"}
{"id": "meca500_programming_manual_6669", "text": "We suggest to create a program responsible for variables creation (using CreateVariable\n(page 351)) that is called once, then refer to (or modify) these variables in your robot\nprograms.", "source": "meca500_programming_manual", "chunk_index": 6669, "length": 186, "hash": "1462a959488fbc3c3500f1a38fe29e18"}
{"id": "meca500_programming_manual_6670", "text": "We suggest to create a program responsible for variables creation (using", "source": "meca500_programming_manual", "chunk_index": 6670, "length": 72, "hash": "3784ff3c392af5ecea306477fb20ca86"}
{"id": "meca500_programming_manual_6671", "text": "(page 351)) that is called once, then refer to (or modify) these variables in your robot\nprograms.", "source": "meca500_programming_manual", "chunk_index": 6671, "length": 98, "hash": "079c23f1dcede6a8003a40c02bfeb6d9"}
{"id": "meca500_programming_manual_6672", "text": "You can refer to these variables by using vars.myGroup.myVar when calling robot API\nfunctions, where myGroup is the case-sensitive name of the group (you can have subgroups\nas well) and myVar is the case-sensitive name of the variable. There are two ways to use\nvariables in robot TCP API commands:", "source": "meca500_programming_manual", "chunk_index": 6672, "length": 298, "hash": "026b4cf55f47b30db00eae84f0dccc20"}
{"id": "meca500_programming_manual_6673", "text": "You can refer to these variables by using", "source": "meca500_programming_manual", "chunk_index": 6673, "length": 41, "hash": "6d2ed77c428a790e3fec18c66ab1520b"}
{"id": "meca500_programming_manual_6674", "text": "when calling robot API\nfunctions, where", "source": "meca500_programming_manual", "chunk_index": 6674, "length": 39, "hash": "45cb5ae377c9ad88223a9b5bd2818c3d"}
{"id": "meca500_programming_manual_6675", "text": "is the case-sensitive name of the group (you can have subgroups\nas well) and", "source": "meca500_programming_manual", "chunk_index": 6675, "length": 76, "hash": "7c0e0f071001f4f52af79bff85199fcb"}
{"id": "meca500_programming_manual_6676", "text": "is the case-sensitive name of the variable. There are two ways to use\nvariables in robot TCP API commands:", "source": "meca500_programming_manual", "chunk_index": 6676, "length": 106, "hash": "b82960fe9517012a1b88f0cfc78960c1"}
{"id": "meca500_programming_manual_6677", "text": "Single-value variables", "source": "meca500_programming_manual", "chunk_index": 6677, "length": 22, "hash": "5f4f43aa1e30dd7faae40d2eb9431ea3"}
{"id": "meca500_programming_manual_6678", "text": "Single-value variables", "source": "meca500_programming_manual", "chunk_index": 6678, "length": 22, "hash": "5f4f43aa1e30dd7faae40d2eb9431ea3"}
{"id": "meca500_programming_manual_6679", "text": "\u2022 A single-value variable holds a single value and has the prefix vars.", "source": "meca500_programming_manual", "chunk_index": 6679, "length": 71, "hash": "8584580481acb18cea32ebf052329f9e"}
{"id": "meca500_programming_manual_6680", "text": "\u2022 A single-value variable holds a single value and has the prefix", "source": "meca500_programming_manual", "chunk_index": 6680, "length": 65, "hash": "84674672b557a2f405aa3d84eab7a451"}
{"id": "meca500_programming_manual_6681", "text": "\u2022 Example: SetPayload(vars.myGroup.m, vars.myGroup.cx, vars.myGroup.cy, vars.myGroup.cz)", "source": "meca500_programming_manual", "chunk_index": 6681, "length": 88, "hash": "c7903c8776f8aecf0e2d47453d4bfa4c"}
{"id": "meca500_programming_manual_6682", "text": "SetPayload(vars.myGroup.m, vars.myGroup.cx, vars.myGroup.cy, vars.myGroup.cz)", "source": "meca500_programming_manual", "chunk_index": 6682, "length": 77, "hash": "5ecc4921cd8705812621cc86af4e5ee6"}
{"id": "meca500_programming_manual_6683", "text": "Unrolling array variables", "source": "meca500_programming_manual", "chunk_index": 6683, "length": 25, "hash": "28f0438f22f064b9166bbee8c8f001e4"}
{"id": "meca500_programming_manual_6684", "text": "Unrolling array variables", "source": "meca500_programming_manual", "chunk_index": 6684, "length": 25, "hash": "28f0438f22f064b9166bbee8c8f001e4"}
{"id": "meca500_programming_manual_6685", "text": "\u2022 An unrolling array variable holds an array and has the prefix *vars. The asterisk (*)", "source": "meca500_programming_manual", "chunk_index": 6685, "length": 87, "hash": "65e8eabdad67e88e901e2405fa854797"}
{"id": "meca500_programming_manual_6686", "text": "\u2022 An unrolling array variable holds an array and has the prefix", "source": "meca500_programming_manual", "chunk_index": 6686, "length": 63, "hash": "9871fa53afc738d5b85e2fb6b43ee5a7"}
{"id": "meca500_programming_manual_6687", "text": "unrolls the array to pass individual elements to the function.", "source": "meca500_programming_manual", "chunk_index": 6687, "length": 62, "hash": "0cbf47d402a67fb1b7337801365b22e7"}
{"id": "meca500_programming_manual_6688", "text": "unrolls the array to pass individual elements to the function.", "source": "meca500_programming_manual", "chunk_index": 6688, "length": 62, "hash": "0cbf47d402a67fb1b7337801365b22e7"}
{"id": "meca500_programming_manual_6689", "text": "\u2022 Example: MoveJoints(*vars.myGroup.myJointPos)", "source": "meca500_programming_manual", "chunk_index": 6689, "length": 47, "hash": "ad7b6afa35abb21fcd34eb39779a6e39"}
{"id": "meca500_programming_manual_6690", "text": "\u2022 Example: MoveJoints(*vars.myGroup.myJointPos)", "source": "meca500_programming_manual", "chunk_index": 6690, "length": 47, "hash": "ad7b6afa35abb21fcd34eb39779a6e39"}
{"id": "meca500_programming_manual_6691", "text": "Managing variables in robot programs (TCP API)", "source": "meca500_programming_manual", "chunk_index": 6691, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "meca500_programming_manual_6692", "text": "Managing variables in robot programs (TCP API)", "source": "meca500_programming_manual", "chunk_index": 6692, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "meca500_programming_manual_6693", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6693, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6694", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6694, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6695", "text": "Managing variables with Mecademicpy (Python API)", "source": "meca500_programming_manual", "chunk_index": 6695, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "meca500_programming_manual_6696", "text": "Managing variables with Mecademicpy (Python API)", "source": "meca500_programming_manual", "chunk_index": 6696, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "meca500_programming_manual_6697", "text": "The Python API provides a simplified API for managing variables. All robot variables are\nsynchronized and stored in the robot class as attributes of robot.vars.", "source": "meca500_programming_manual", "chunk_index": 6697, "length": 160, "hash": "66414e369e3295e6f57f1b3c5d92cb6b"}
{"id": "meca500_programming_manual_6698", "text": "The Python API provides a simplified API for managing variables. All robot variables are\nsynchronized and stored in the robot class as attributes of", "source": "meca500_programming_manual", "chunk_index": 6698, "length": 148, "hash": "3389493025b77aa826fbc285e46d6757"}
{"id": "meca500_programming_manual_6699", "text": "Creating or deleting a robot variable", "source": "meca500_programming_manual", "chunk_index": 6699, "length": 37, "hash": "39aa2eacfef7fe0edefb4ad238071237"}
{"id": "meca500_programming_manual_6700", "text": "Creating or deleting a robot variable", "source": "meca500_programming_manual", "chunk_index": 6700, "length": 37, "hash": "39aa2eacfef7fe0edefb4ad238071237"}
{"id": "meca500_programming_manual_6701", "text": "The robot Python class provides the same functions to manage variables:", "source": "meca500_programming_manual", "chunk_index": 6701, "length": 71, "hash": "616c95964915e855c8edcb306f8422f7"}
{"id": "meca500_programming_manual_6702", "text": "Python class provides the same functions to manage variables:", "source": "meca500_programming_manual", "chunk_index": 6702, "length": 61, "hash": "13c385b79f74a3bc11494472d017e83d"}
{"id": "meca500_programming_manual_6703", "text": "\u2022 robot.CreateVariable", "source": "meca500_programming_manual", "chunk_index": 6703, "length": 22, "hash": "e5d8c8c7f27713a98145526617fa2641"}
{"id": "meca500_programming_manual_6704", "text": "robot.CreateVariable", "source": "meca500_programming_manual", "chunk_index": 6704, "length": 20, "hash": "49f5dc8469227aff7d5dceade3189d73"}
{"id": "meca500_programming_manual_6705", "text": "\u2022 robot.DeleteVariable", "source": "meca500_programming_manual", "chunk_index": 6705, "length": 22, "hash": "68b4b62fffc581df4dd45b9e2435b3cb"}
{"id": "meca500_programming_manual_6706", "text": "robot.DeleteVariable", "source": "meca500_programming_manual", "chunk_index": 6706, "length": 20, "hash": "512001807feabbdbd7698f7acf3d5378"}
{"id": "meca500_programming_manual_6707", "text": "\u2022 robot.ListVariables", "source": "meca500_programming_manual", "chunk_index": 6707, "length": 21, "hash": "5c3020b0f398b27f0c8c6ebf3bc271e1"}
{"id": "meca500_programming_manual_6708", "text": "Please refer to Mecademicpy\u2019s documentation for details on these function calls.", "source": "meca500_programming_manual", "chunk_index": 6708, "length": 80, "hash": "a99599c12e4e8eb3de5207acb9d9eb6a"}
{"id": "meca500_programming_manual_6709", "text": "Please refer to Mecademicpy\u2019s documentation for details on these function calls.", "source": "meca500_programming_manual", "chunk_index": 6709, "length": 80, "hash": "a99599c12e4e8eb3de5207acb9d9eb6a"}
{"id": "meca500_programming_manual_6710", "text": "Directly accessing robot variables through Python attributes", "source": "meca500_programming_manual", "chunk_index": 6710, "length": 60, "hash": "6e8d4d5af5c7516fb1d66fddb08a57fd"}
{"id": "meca500_programming_manual_6711", "text": "Directly accessing robot variables through Python attributes", "source": "meca500_programming_manual", "chunk_index": 6711, "length": 60, "hash": "6e8d4d5af5c7516fb1d66fddb08a57fd"}
{"id": "meca500_programming_manual_6712", "text": "While a Python script can access a variable using robot.GetVariable and modify it with\nrobot.SetVariable or robot.CreateVariable, our Python API offers a more convenient\napproach: variables are available as attributes of robot.vars.", "source": "meca500_programming_manual", "chunk_index": 6712, "length": 232, "hash": "4733c5b6424186db4de3f6adbe7b97ff"}
{"id": "meca500_programming_manual_6713", "text": "While a Python script can access a variable using", "source": "meca500_programming_manual", "chunk_index": 6713, "length": 49, "hash": "173c33858298b8146aa514f8074c4826"}
{"id": "meca500_programming_manual_6714", "text": "robot.CreateVariable", "source": "meca500_programming_manual", "chunk_index": 6714, "length": 20, "hash": "49f5dc8469227aff7d5dceade3189d73"}
{"id": "meca500_programming_manual_6715", "text": ", our Python API offers a more convenient\napproach: variables are available as attributes of", "source": "meca500_programming_manual", "chunk_index": 6715, "length": 92, "hash": "db6368b12c0846dfcc5c15aeb52e0b50"}
{"id": "meca500_programming_manual_6716", "text": "To access a variable, use: robot.vars.myGroup.myVar", "source": "meca500_programming_manual", "chunk_index": 6716, "length": 51, "hash": "4e069f3ee4e2e0820b3b33641aeee8c7"}
{"id": "meca500_programming_manual_6717", "text": "To access a variable, use:", "source": "meca500_programming_manual", "chunk_index": 6717, "length": 26, "hash": "3ff98adb0b922f25f0dd163ae655b2e2"}
{"id": "meca500_programming_manual_6718", "text": "robot.vars.myGroup.myVar", "source": "meca500_programming_manual", "chunk_index": 6718, "length": 24, "hash": "13eebec4f036188017d645a78dd0b601"}
{"id": "meca500_programming_manual_6719", "text": "To modify a variable, assign a new value: robot.vars.myGroup.myVar = [1, 2, 3, 4, 5,\n6]", "source": "meca500_programming_manual", "chunk_index": 6719, "length": 87, "hash": "58931bb48300faf331669e79683ae326"}
{"id": "meca500_programming_manual_6720", "text": "To modify a variable, assign a new value:", "source": "meca500_programming_manual", "chunk_index": 6720, "length": 41, "hash": "37e232af5310b870e8fb3746bd23fc49"}
{"id": "meca500_programming_manual_6721", "text": "robot.vars.myGroup.myVar = [1, 2, 3, 4, 5,\n6]", "source": "meca500_programming_manual", "chunk_index": 6721, "length": 45, "hash": "d7a65f5e3434fb24452ef892564e7262"}
{"id": "meca500_programming_manual_6722", "text": "Setting a variable value is a blocking operation, as it involves sending a TCP request to\nthe robot and waiting for confirmation. Additionally, the robot must write the new value\nto persistent storage. For optimal performance, Python scripts should use local variables\n(and not robot variables) for values that change frequently during runtime.", "source": "meca500_programming_manual", "chunk_index": 6722, "length": 344, "hash": "5cf5592d3e404ecf1ee0045f85b2de7d"}
{"id": "meca500_programming_manual_6723", "text": "Setting a variable value is a blocking operation, as it involves sending a TCP request to\nthe robot and waiting for confirmation. Additionally, the robot must write the new value\nto persistent storage. For optimal performance, Python scripts should use local variables", "source": "meca500_programming_manual", "chunk_index": 6723, "length": 268, "hash": "5d0a87a5009403e2c0f898e52c14b1f4"}
{"id": "meca500_programming_manual_6724", "text": "(and not robot variables) for values that change frequently during runtime.", "source": "meca500_programming_manual", "chunk_index": 6724, "length": 75, "hash": "0bfe71a78c484c4f2e387d6a59e89704"}
{"id": "meca500_programming_manual_6725", "text": "Managing variables with Mecademicpy (Python API)", "source": "meca500_programming_manual", "chunk_index": 6725, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "meca500_programming_manual_6726", "text": "Managing variables with Mecademicpy (Python API)", "source": "meca500_programming_manual", "chunk_index": 6726, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "meca500_programming_manual_6727", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6727, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6728", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6728, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6729", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6729, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6730", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6730, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6731", "text": "In cyclic protocols (see Section 5), variables are accessed by their cyclic ID, which is defined\nwhen the variable is created.", "source": "meca500_programming_manual", "chunk_index": 6731, "length": 126, "hash": "b609da80c0a8b4e9661432f70d2be1fe"}
{"id": "meca500_programming_manual_6732", "text": "In cyclic protocols (see Section 5), variables are accessed by their cyclic ID, which is defined\nwhen the variable is created.", "source": "meca500_programming_manual", "chunk_index": 6732, "length": 126, "hash": "b609da80c0a8b4e9661432f70d2be1fe"}
{"id": "meca500_programming_manual_6733", "text": "The cyclic ID of a variable must be in the range [10000,19999].", "source": "meca500_programming_manual", "chunk_index": 6733, "length": 63, "hash": "7a09cd6a9c03363b8866f87cc513c20b"}
{"id": "meca500_programming_manual_6734", "text": "The cyclic ID of a variable must be in the range [10000,19999].", "source": "meca500_programming_manual", "chunk_index": 6734, "length": 63, "hash": "7a09cd6a9c03363b8866f87cc513c20b"}
{"id": "meca500_programming_manual_6735", "text": "By referring to this cyclic ID, cyclic protocols can modify variables and use to their values as\narguments for motion commands.", "source": "meca500_programming_manual", "chunk_index": 6735, "length": 127, "hash": "bffec231f56dd35c81e18cde575e0850"}
{"id": "meca500_programming_manual_6736", "text": "By referring to this cyclic ID, cyclic protocols can modify variables and use to their values as\narguments for motion commands.", "source": "meca500_programming_manual", "chunk_index": 6736, "length": 127, "hash": "bffec231f56dd35c81e18cde575e0850"}
{"id": "meca500_programming_manual_6737", "text": "Cyclic protocols do not support creating, deleting, getting, or listing variables.", "source": "meca500_programming_manual", "chunk_index": 6737, "length": 82, "hash": "cc2e605725a10d459e1e006797fb7572"}
{"id": "meca500_programming_manual_6738", "text": "Cyclic protocols do not support creating, deleting, getting, or listing variables.", "source": "meca500_programming_manual", "chunk_index": 6738, "length": 82, "hash": "cc2e605725a10d459e1e006797fb7572"}
{"id": "meca500_programming_manual_6739", "text": "A variable is modified by using its cyclic ID as the command ID in a sent cyclic command. For\nmore information on how to send a command using cyclic protocols, see Section 5.", "source": "meca500_programming_manual", "chunk_index": 6739, "length": 174, "hash": "95638d81c5df135ea1edfea18798f23d"}
{"id": "meca500_programming_manual_6740", "text": "A variable is modified by using its cyclic ID as the command ID in a sent cyclic command. For\nmore information on how to send a command using cyclic protocols, see Section 5.", "source": "meca500_programming_manual", "chunk_index": 6740, "length": 174, "hash": "95638d81c5df135ea1edfea18798f23d"}
{"id": "meca500_programming_manual_6741", "text": "The six floating-point values of the motion command are used to set the new value of the\nvariable as follows:", "source": "meca500_programming_manual", "chunk_index": 6741, "length": 109, "hash": "96a566ae5af71d699670821e230e001c"}
{"id": "meca500_programming_manual_6742", "text": "The six floating-point values of the motion command are used to set the new value of the\nvariable as follows:", "source": "meca500_programming_manual", "chunk_index": 6742, "length": 109, "hash": "96a566ae5af71d699670821e230e001c"}
{"id": "meca500_programming_manual_6743", "text": "\u2022 Cyclic protocols support only setting variables of type number or array of numbers;", "source": "meca500_programming_manual", "chunk_index": 6743, "length": 85, "hash": "eae9a880a83bce2b05c9ebda274085b5"}
{"id": "meca500_programming_manual_6744", "text": "\u2022 Cyclic protocols support only setting variables of type number or array of numbers;", "source": "meca500_programming_manual", "chunk_index": 6744, "length": 85, "hash": "eae9a880a83bce2b05c9ebda274085b5"}
{"id": "meca500_programming_manual_6745", "text": "\u2022 For a variable of type number, the first argument of the cyclic command is used as the", "source": "meca500_programming_manual", "chunk_index": 6745, "length": 88, "hash": "a9be4db3230f93ef86323d0aef752e2c"}
{"id": "meca500_programming_manual_6746", "text": "\u2022 For a variable of type number, the first argument of the cyclic command is used as the", "source": "meca500_programming_manual", "chunk_index": 6746, "length": 88, "hash": "a9be4db3230f93ef86323d0aef752e2c"}
{"id": "meca500_programming_manual_6747", "text": "\u2022 For a variable of type array of numbers, the corresponding number of cyclic command\narguments are used to update the array. The size of the array remains unchanged and\ncannot be modified through cyclic protocols;", "source": "meca500_programming_manual", "chunk_index": 6747, "length": 214, "hash": "0c220caacc02470b26b2253b21938fea"}
{"id": "meca500_programming_manual_6748", "text": "\u2022 For a variable of type array of numbers, the corresponding number of cyclic command\narguments are used to update the array. The size of the array remains unchanged and\ncannot be modified through cyclic protocols;", "source": "meca500_programming_manual", "chunk_index": 6748, "length": 214, "hash": "0c220caacc02470b26b2253b21938fea"}
{"id": "meca500_programming_manual_6749", "text": "Remember that the variable type is defined when the variable is created (CreateVariable\n(page 351)) and cannot be changed afterward. The robot also does not perform any\nautomatic type conversion. Therefore, boolean or string variables cannot be assigned\nthrough cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6749, "length": 279, "hash": "0482224af564a14489ff2a8c46802369"}
{"id": "meca500_programming_manual_6750", "text": "Remember that the variable type is defined when the variable is created (", "source": "meca500_programming_manual", "chunk_index": 6750, "length": 73, "hash": "9dc6029208076235cfb9d4487842c724"}
{"id": "meca500_programming_manual_6751", "text": "(page 351)) and cannot be changed afterward. The robot also does not perform any", "source": "meca500_programming_manual", "chunk_index": 6751, "length": 80, "hash": "a29641157cdf7e937eeafd27df71bae0"}
{"id": "meca500_programming_manual_6752", "text": "automatic type conversion. Therefore, boolean or string variables cannot be assigned\nthrough cyclic protocols.", "source": "meca500_programming_manual", "chunk_index": 6752, "length": 110, "hash": "cb8f6eaf7ed90432b20f627d3fd92e31"}
{"id": "meca500_programming_manual_6753", "text": "Referencing a variable", "source": "meca500_programming_manual", "chunk_index": 6753, "length": 22, "hash": "1ca1601e98d1f382f065765df8d7868a"}
{"id": "meca500_programming_manual_6754", "text": "Referencing a variable", "source": "meca500_programming_manual", "chunk_index": 6754, "length": 22, "hash": "1ca1601e98d1f382f065765df8d7868a"}
{"id": "meca500_programming_manual_6755", "text": "To use a variable (or multiple variables) as arguments for cyclic protocol motion commands,\nproceed as follows:", "source": "meca500_programming_manual", "chunk_index": 6755, "length": 111, "hash": "1637be05a87ed85a225ac826399810d9"}
{"id": "meca500_programming_manual_6756", "text": "To use a variable (or multiple variables) as arguments for cyclic protocol motion commands,\nproceed as follows:", "source": "meca500_programming_manual", "chunk_index": 6756, "length": 111, "hash": "1637be05a87ed85a225ac826399810d9"}
{"id": "meca500_programming_manual_6757", "text": "\u2022 Set the desired command ID (example: 2 for MovePose (page 147));", "source": "meca500_programming_manual", "chunk_index": 6757, "length": 66, "hash": "d15cd8812c0971627a9aa9ff607dffec"}
{"id": "meca500_programming_manual_6758", "text": "\u2022 Set the desired command ID (example: 2 for", "source": "meca500_programming_manual", "chunk_index": 6758, "length": 44, "hash": "91cf5a647588a1fb651620f73488592c"}
{"id": "meca500_programming_manual_6759", "text": "\u2022 Set the UseVariables bit in cyclic motion control data (see Section 5);", "source": "meca500_programming_manual", "chunk_index": 6759, "length": 73, "hash": "ab2913f563cef49f0a70cea93c638bc6"}
{"id": "meca500_programming_manual_6760", "text": "bit in cyclic motion control data (see Section 5);", "source": "meca500_programming_manual", "chunk_index": 6760, "length": 50, "hash": "e262f214f397d2611f123ad5970c1538"}
{"id": "meca500_programming_manual_6761", "text": "\u2022 Set the variable ID(s) to use as the float arguments of the motion parameters structure", "source": "meca500_programming_manual", "chunk_index": 6761, "length": 89, "hash": "d7c2e16eb5a76050f18a5b41a252fe81"}
{"id": "meca500_programming_manual_6762", "text": "\u2022 Set the variable ID(s) to use as the float arguments of the motion parameters structure", "source": "meca500_programming_manual", "chunk_index": 6762, "length": 89, "hash": "d7c2e16eb5a76050f18a5b41a252fe81"}
{"id": "meca500_programming_manual_6763", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6763, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6764", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6764, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6765", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6765, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6766", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6766, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6767", "text": "\u2022 The chosen variable value(s) will be used in place of the inline motion command", "source": "meca500_programming_manual", "chunk_index": 6767, "length": 81, "hash": "b8d69247bfafedea9eb44774afa6b3c6"}
{"id": "meca500_programming_manual_6768", "text": "\u2022 The chosen variable value(s) will be used in place of the inline motion command", "source": "meca500_programming_manual", "chunk_index": 6768, "length": 81, "hash": "b8d69247bfafedea9eb44774afa6b3c6"}
{"id": "meca500_programming_manual_6769", "text": "\u2022 The values of the selected variables will be concatenated and used as (up to six)\narguments for the motion command. This allows you to combine the values from multiple\nvariables for a single motion command.", "source": "meca500_programming_manual", "chunk_index": 6769, "length": 208, "hash": "2752b3be70a9a09de62e3ba272751fb3"}
{"id": "meca500_programming_manual_6770", "text": "\u2022 The values of the selected variables will be concatenated and used as (up to six)\narguments for the motion command. This allows you to combine the values from multiple\nvariables for a single motion command.", "source": "meca500_programming_manual", "chunk_index": 6770, "length": 208, "hash": "2752b3be70a9a09de62e3ba272751fb3"}
{"id": "meca500_programming_manual_6771", "text": "Although the Meca500 robot\u2019s EtherCAT stack supports setting variables, it does not\nsupport referencing variables as arguments for motion commands. As an alternative, you\ncan create a robot program that uses the variable and call this program from EtherCAT\n(see StartProgram (page 216), called using command ID 100, see Table 8).", "source": "meca500_programming_manual", "chunk_index": 6771, "length": 329, "hash": "b8d29ca14903742bf7e94355b201a469"}
{"id": "meca500_programming_manual_6772", "text": "Although the Meca500 robot\u2019s EtherCAT stack supports setting variables, it does not\nsupport referencing variables as arguments for motion commands. As an alternative, you\ncan create a robot program that uses the variable and call this program from EtherCAT\n(see", "source": "meca500_programming_manual", "chunk_index": 6772, "length": 261, "hash": "99cf48ef20692f06c7c3453de55d99c0"}
{"id": "meca500_programming_manual_6773", "text": "(page 216), called using command ID 100, see Table 8).", "source": "meca500_programming_manual", "chunk_index": 6773, "length": 54, "hash": "082e448cbc36c3dd7c6661e467e71254"}
{"id": "meca500_programming_manual_6774", "text": "In this example, we create a variable that is defined as an array of 6 float values, then use it\nto call the MovePose (page 147) command.", "source": "meca500_programming_manual", "chunk_index": 6774, "length": 137, "hash": "215adeac11cd8864889facf669fcd714"}
{"id": "meca500_programming_manual_6775", "text": "In this example, we create a variable that is defined as an array of 6 float values, then use it\nto call the", "source": "meca500_programming_manual", "chunk_index": 6775, "length": 108, "hash": "79aa2ddd69fbd41ac951f88016cde0a5"}
{"id": "meca500_programming_manual_6776", "text": "It is also possible to pass multiple variables to the function, for example, one array of\nthree floats for [x, y, z] and another for [alpha, beta, gamma], or six separate variables\neach holding a single float. However, for simplicity, the following example uses a single\nvariable containing all six float values.", "source": "meca500_programming_manual", "chunk_index": 6776, "length": 312, "hash": "3f6df2ee498892dad7cae52a00942299"}
{"id": "meca500_programming_manual_6777", "text": "It is also possible to pass multiple variables to the function, for example, one array of\nthree floats for [x, y, z] and another for [alpha, beta, gamma], or six separate variables\neach holding a single float. However, for simplicity, the following example uses a single\nvariable containing all six float values.", "source": "meca500_programming_manual", "chunk_index": 6777, "length": 312, "hash": "3f6df2ee498892dad7cae52a00942299"}
{"id": "meca500_programming_manual_6778", "text": "Assuming we have previously created the following variable (using the MecaPortal or the TCP\nAPI):", "source": "meca500_programming_manual", "chunk_index": 6778, "length": 97, "hash": "6dffafb05d3abbf3811d2cf51bc6a38f"}
{"id": "meca500_programming_manual_6779", "text": "Assuming we have previously created the following variable (using the MecaPortal or the TCP\nAPI):", "source": "meca500_programming_manual", "chunk_index": 6779, "length": 97, "hash": "6dffafb05d3abbf3811d2cf51bc6a38f"}
{"id": "meca500_programming_manual_6780", "text": "\u2013 Array of six floating-point values, representing [x, y, z, alpha, beta, gamma]", "source": "meca500_programming_manual", "chunk_index": 6780, "length": 80, "hash": "29c375b4865d64d7168f2b905e1b2556"}
{"id": "meca500_programming_manual_6781", "text": "Array of six floating-point values, representing [x, y, z, alpha, beta, gamma]", "source": "meca500_programming_manual", "chunk_index": 6781, "length": 78, "hash": "df159ed97ced3c560639220f624d536b"}
{"id": "meca500_programming_manual_6782", "text": "The PLC can modify the variable myCartPos as shown below:", "source": "meca500_programming_manual", "chunk_index": 6782, "length": 57, "hash": "40c79527533f5b49b8147b4286925e83"}
{"id": "meca500_programming_manual_6783", "text": "The PLC can modify the variable", "source": "meca500_programming_manual", "chunk_index": 6783, "length": 31, "hash": "ded029d615d9ab6467f8a55cc11b0e6b"}
{"id": "meca500_programming_manual_6784", "text": "\u2022 Send motion command with ID 10000 (referring to myCartPos), using motion command", "source": "meca500_programming_manual", "chunk_index": 6784, "length": 82, "hash": "5da6a7ebf601a03e3513746655708d55"}
{"id": "meca500_programming_manual_6785", "text": "\u2022 Send motion command with ID 10000 (referring to", "source": "meca500_programming_manual", "chunk_index": 6785, "length": 49, "hash": "c7ed114c3befcdbee4995e816691b065"}
{"id": "meca500_programming_manual_6786", "text": "), using motion command", "source": "meca500_programming_manual", "chunk_index": 6786, "length": 23, "hash": "d0f2867b8b3131f8bea26e41591fbf29"}
{"id": "meca500_programming_manual_6787", "text": "arguments [190.0, 0.0, 308.9, -1, 75, -2] (see Section 5);", "source": "meca500_programming_manual", "chunk_index": 6787, "length": 58, "hash": "b18ca8edae05514aedb60a8c68fffdd1"}
{"id": "meca500_programming_manual_6788", "text": "[190.0, 0.0, 308.9, -1, 75, -2]", "source": "meca500_programming_manual", "chunk_index": 6788, "length": 31, "hash": "485e36bc3d15f789d6c6024e8f06e215"}
{"id": "meca500_programming_manual_6789", "text": "The PLC then selects the variable to be used in a MovePose (page 147) command as follows:", "source": "meca500_programming_manual", "chunk_index": 6789, "length": 89, "hash": "12ca2f5ed220086eddaa51a231d8e671"}
{"id": "meca500_programming_manual_6790", "text": "The PLC then selects the variable to be used in a", "source": "meca500_programming_manual", "chunk_index": 6790, "length": 49, "hash": "6eed5019d9d9f71f7a9b6e6307dcca13"}
{"id": "meca500_programming_manual_6791", "text": "(page 147) command as follows:", "source": "meca500_programming_manual", "chunk_index": 6791, "length": 30, "hash": "06e7bad2a9f10217b22c8cf5ffd42a70"}
{"id": "meca500_programming_manual_6792", "text": "\u2022 Set motion command with ID 2 (MovePose (page 147))", "source": "meca500_programming_manual", "chunk_index": 6792, "length": 52, "hash": "437581af688dcf3329c46cd52b8a28d4"}
{"id": "meca500_programming_manual_6793", "text": "\u2022 Set motion command with ID 2 (", "source": "meca500_programming_manual", "chunk_index": 6793, "length": 32, "hash": "b3f0598d3617f62f5dab529730894f70"}
{"id": "meca500_programming_manual_6794", "text": "\u2022 With the UseVariables bit set (see Section 5);", "source": "meca500_programming_manual", "chunk_index": 6794, "length": 48, "hash": "f8f1369ae81c02d0f42e40f155aaad91"}
{"id": "meca500_programming_manual_6795", "text": "bit set (see Section 5);", "source": "meca500_programming_manual", "chunk_index": 6795, "length": 24, "hash": "c5e2db3b6ce075e6315a07e0445f2b93"}
{"id": "meca500_programming_manual_6796", "text": "\u2022 And as command arguments, the cyclic ID of the variable to use: [10000,0, 0, 0, 0, 0];", "source": "meca500_programming_manual", "chunk_index": 6796, "length": 88, "hash": "50846d6ec471c2c92a0c48b774a19257"}
{"id": "meca500_programming_manual_6797", "text": "\u2022 And as command arguments, the cyclic ID of the variable to use:", "source": "meca500_programming_manual", "chunk_index": 6797, "length": 65, "hash": "db7c361759bd36186ee3ef2476488893"}
{"id": "meca500_programming_manual_6798", "text": "[10000,0, 0, 0, 0, 0]", "source": "meca500_programming_manual", "chunk_index": 6798, "length": 21, "hash": "44a73e88e22b6f24ea5affab97696a42"}
{"id": "meca500_programming_manual_6799", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6799, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6800", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6800, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6801", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6801, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6802", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6802, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6803", "text": "\u2022 Note that here up to 6 variables could be used for calling the command, in this example", "source": "meca500_programming_manual", "chunk_index": 6803, "length": 89, "hash": "bedbb50736754643ae37aed8edb6bcb5"}
{"id": "meca500_programming_manual_6804", "text": "\u2022 Note that here up to 6 variables could be used for calling the command, in this example", "source": "meca500_programming_manual", "chunk_index": 6804, "length": 89, "hash": "bedbb50736754643ae37aed8edb6bcb5"}
{"id": "meca500_programming_manual_6805", "text": "we refer to a single variable that contains an array of 6 float.", "source": "meca500_programming_manual", "chunk_index": 6805, "length": 64, "hash": "c4dd4fddb2de56288581861bc81d29d2"}
{"id": "meca500_programming_manual_6806", "text": "we refer to a single variable that contains an array of 6 float.", "source": "meca500_programming_manual", "chunk_index": 6806, "length": 64, "hash": "c4dd4fddb2de56288581861bc81d29d2"}
{"id": "meca500_programming_manual_6807", "text": "\u2022 The MovePose (page 147) command will be executed using the six values from the", "source": "meca500_programming_manual", "chunk_index": 6807, "length": 80, "hash": "fa14f104d6054a70e000c32b48eb93d6"}
{"id": "meca500_programming_manual_6808", "text": "(page 147) command will be executed using the six values from the", "source": "meca500_programming_manual", "chunk_index": 6808, "length": 65, "hash": "24a3a4c0da0a3c9683443a6d3f4c45d8"}
{"id": "meca500_programming_manual_6809", "text": "\u2022 The result is: MovePose(190.0, 0.0, 308.9, -1, 75, -2) (page 147)", "source": "meca500_programming_manual", "chunk_index": 6809, "length": 67, "hash": "6bbea568d092786e7b57e2abad3082c7"}
{"id": "meca500_programming_manual_6810", "text": "MovePose(190.0, 0.0, 308.9, -1, 75, -2)", "source": "meca500_programming_manual", "chunk_index": 6810, "length": 39, "hash": "e1f606a1bb31cf57a0e53f29e8792fc8"}
{"id": "meca500_programming_manual_6811", "text": "CreateVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6811, "length": 29, "hash": "edfae8098a7ad9f1aa431b5350ce1cbf"}
{"id": "meca500_programming_manual_6812", "text": "CreateVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6812, "length": 29, "hash": "edfae8098a7ad9f1aa431b5350ce1cbf"}
{"id": "meca500_programming_manual_6813", "text": "This command creates a variable that is saved on the robot and persists even after a reboot.\nA variable is defined by its case-sensitive name, a value (supporting various types) and an\noptional cyclic ID.", "source": "meca500_programming_manual", "chunk_index": 6813, "length": 204, "hash": "5fdadfe2b8027c5d0180839c3be1c36f"}
{"id": "meca500_programming_manual_6814", "text": "This command creates a variable that is saved on the robot and persists even after a reboot.\nA variable is defined by its case-sensitive name, a value (supporting various types) and an\noptional cyclic ID.", "source": "meca500_programming_manual", "chunk_index": 6814, "length": 204, "hash": "5fdadfe2b8027c5d0180839c3be1c36f"}
{"id": "meca500_programming_manual_6815", "text": "For more information, see Commands for managing variables (beta) (page 345).", "source": "meca500_programming_manual", "chunk_index": 6815, "length": 76, "hash": "e934f302680d2ce4ef564bad25be39bf"}
{"id": "meca500_programming_manual_6816", "text": "For more information, see", "source": "meca500_programming_manual", "chunk_index": 6816, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "meca500_programming_manual_6817", "text": "Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 6817, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "meca500_programming_manual_6818", "text": "CreateVariable(name, value, cyclicId, override)", "source": "meca500_programming_manual", "chunk_index": 6818, "length": 47, "hash": "df116be279a568bfd09b9f8997774578"}
{"id": "meca500_programming_manual_6819", "text": "CreateVariable(name, value, cyclicId, override)", "source": "meca500_programming_manual", "chunk_index": 6819, "length": 47, "hash": "df116be279a568bfd09b9f8997774578"}
{"id": "meca500_programming_manual_6820", "text": "\u2013 A unique name for this variable (e.g., \u201cmyVar\u201d);", "source": "meca500_programming_manual", "chunk_index": 6820, "length": 50, "hash": "08b910c1acd8094e85d49ecc94197812"}
{"id": "meca500_programming_manual_6821", "text": "A unique name for this variable (e.g., \u201cmyVar\u201d);", "source": "meca500_programming_manual", "chunk_index": 6821, "length": 48, "hash": "25d40ea01c8b7e7fc40311a1c999945a"}
{"id": "meca500_programming_manual_6822", "text": "\u2013 Variable names are case sensitive;", "source": "meca500_programming_manual", "chunk_index": 6822, "length": 36, "hash": "080fb0c29f749fc925c5e2c1b04163b7"}
{"id": "meca500_programming_manual_6823", "text": "Variable names are case sensitive", "source": "meca500_programming_manual", "chunk_index": 6823, "length": 33, "hash": "9d159d5ad0509f1e3daa4dc9711b444a"}
{"id": "meca500_programming_manual_6824", "text": "\u2013 May include several case-sensitive prefixes (e.g., \u201cmyGroup.mySubgroup.mainWrf\u201d);", "source": "meca500_programming_manual", "chunk_index": 6824, "length": 83, "hash": "7edfdb3c10822264afb451b43cc49aba"}
{"id": "meca500_programming_manual_6825", "text": "May include several case-sensitive prefixes (e.g., \u201cmyGroup.mySubgroup.mainWrf\u201d);", "source": "meca500_programming_manual", "chunk_index": 6825, "length": 81, "hash": "7426d0b110f2fa780460136affd13c76"}
{"id": "meca500_programming_manual_6826", "text": "\u2013 If the name already exists, the behavior of CreateVariable (page 351) depends on", "source": "meca500_programming_manual", "chunk_index": 6826, "length": 82, "hash": "b28d81068434c5397de5e9c526684efa"}
{"id": "meca500_programming_manual_6827", "text": "If the name already exists, the behavior of", "source": "meca500_programming_manual", "chunk_index": 6827, "length": 43, "hash": "d539e28bddf2c685f2abaf03713f4d3d"}
{"id": "meca500_programming_manual_6828", "text": "(page 351) depends on", "source": "meca500_programming_manual", "chunk_index": 6828, "length": 21, "hash": "07b41c9e50ad256c5e1a6b69f78ba8a2"}
{"id": "meca500_programming_manual_6829", "text": "the override argument.", "source": "meca500_programming_manual", "chunk_index": 6829, "length": 22, "hash": "0ba2b2ba7920520d73c533adfb1818f0"}
{"id": "meca500_programming_manual_6830", "text": "the override argument.", "source": "meca500_programming_manual", "chunk_index": 6830, "length": 22, "hash": "0ba2b2ba7920520d73c533adfb1818f0"}
{"id": "meca500_programming_manual_6831", "text": "\u2013 The value to assign to the variable;", "source": "meca500_programming_manual", "chunk_index": 6831, "length": 38, "hash": "24ef0cc2c915bddac4ccfe8f97cf64d8"}
{"id": "meca500_programming_manual_6832", "text": "The value to assign to the variable;", "source": "meca500_programming_manual", "chunk_index": 6832, "length": 36, "hash": "9fd7d972f3f4d727c0db352c26fef850"}
{"id": "meca500_programming_manual_6833", "text": "\u2013 The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false).", "source": "meca500_programming_manual", "chunk_index": 6833, "length": 184, "hash": "17c59839d12890196f6c4aba4425302f"}
{"id": "meca500_programming_manual_6834", "text": "The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false).", "source": "meca500_programming_manual", "chunk_index": 6834, "length": 182, "hash": "99cb075c13845f918f868632d893c070"}
{"id": "meca500_programming_manual_6835", "text": "\u2217 a boolean: CreateVariable(myBoolVar, true)", "source": "meca500_programming_manual", "chunk_index": 6835, "length": 44, "hash": "c2bbb65822b3a0cb8f85c6cfe75710fe"}
{"id": "meca500_programming_manual_6836", "text": "CreateVariable(myBoolVar, true)", "source": "meca500_programming_manual", "chunk_index": 6836, "length": 31, "hash": "cebdbe73aca5c2a5f3bcac49ff89769a"}
{"id": "meca500_programming_manual_6837", "text": "\u2217 a number: CreateVariable(myIntVar, -0.153)", "source": "meca500_programming_manual", "chunk_index": 6837, "length": 44, "hash": "c5109f90642fd33b21d529f49291583a"}
{"id": "meca500_programming_manual_6838", "text": "CreateVariable(myIntVar, -0.153)", "source": "meca500_programming_manual", "chunk_index": 6838, "length": 32, "hash": "e8d402f5e8b65c062970a9d19f5b4017"}
{"id": "meca500_programming_manual_6839", "text": "\u2217 a string: CreateVariable(myStringVar, \"Hello world!\")", "source": "meca500_programming_manual", "chunk_index": 6839, "length": 55, "hash": "2f0ee97c5c0a676dd50a2e7cd12add3f"}
{"id": "meca500_programming_manual_6840", "text": "CreateVariable(myStringVar, \"Hello world!\")", "source": "meca500_programming_manual", "chunk_index": 6840, "length": 43, "hash": "06783d118807e926ef1ea49598ae2fa6"}
{"id": "meca500_programming_manual_6841", "text": "\u2217 an array: CreateVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "meca500_programming_manual", "chunk_index": 6841, "length": 69, "hash": "7ff5772bebedf4d0916fbebeae37c0c1"}
{"id": "meca500_programming_manual_6842", "text": "CreateVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "meca500_programming_manual", "chunk_index": 6842, "length": 57, "hash": "f99c320143b3ecfd1188911a01b10eaa"}
{"id": "meca500_programming_manual_6843", "text": "\u2022 cyclicId (optional, 0 by default):", "source": "meca500_programming_manual", "chunk_index": 6843, "length": 36, "hash": "a9a462a8543de741452e5d685890b5dc"}
{"id": "meca500_programming_manual_6844", "text": "\u2022 cyclicId (optional, 0 by default):", "source": "meca500_programming_manual", "chunk_index": 6844, "length": 36, "hash": "a9a462a8543de741452e5d685890b5dc"}
{"id": "meca500_programming_manual_6845", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6845, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6846", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6846, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6847", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6847, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6848", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6848, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6849", "text": "\u2013 The unique ID used to refer to this variable in cyclic protocols in the range", "source": "meca500_programming_manual", "chunk_index": 6849, "length": 79, "hash": "f72c61f4c93d78b0df64e906ed6c2ddf"}
{"id": "meca500_programming_manual_6850", "text": "The unique ID used to refer to this variable in cyclic protocols in the range", "source": "meca500_programming_manual", "chunk_index": 6850, "length": 77, "hash": "7d53b7d9e22f9a3be072faab94ed320c"}
{"id": "meca500_programming_manual_6851", "text": "\u2013 When 0 (or omitted), no cyclic ID is associated with the variable;", "source": "meca500_programming_manual", "chunk_index": 6851, "length": 68, "hash": "c27ef9b102cbe630ddb14d348f13156b"}
{"id": "meca500_programming_manual_6852", "text": "When 0 (or omitted), no cyclic ID is associated with the variable;", "source": "meca500_programming_manual", "chunk_index": 6852, "length": 66, "hash": "0c0a83aedf08ab0c6b1967b7ac28f82f"}
{"id": "meca500_programming_manual_6853", "text": "\u2013 If the provided cyclic ID is already in use, CreateVariable (page 351) will fail with", "source": "meca500_programming_manual", "chunk_index": 6853, "length": 87, "hash": "9fd8b9f1b0a11aeff96ff628e2726fcb"}
{"id": "meca500_programming_manual_6854", "text": "If the provided cyclic ID is already in use,", "source": "meca500_programming_manual", "chunk_index": 6854, "length": 44, "hash": "1432018aa355aa5e082b4d907b1c70fb"}
{"id": "meca500_programming_manual_6855", "text": "(page 351) will fail with", "source": "meca500_programming_manual", "chunk_index": 6855, "length": 25, "hash": "475d8f62f6e07e9ef5e0c69be8137eb0"}
{"id": "meca500_programming_manual_6856", "text": "\u2013 If a non-zero cyclic ID is used, the value must be a number or an array of numbers,", "source": "meca500_programming_manual", "chunk_index": 6856, "length": 85, "hash": "da23f1a057fab86f9a428b372f1f32fc"}
{"id": "meca500_programming_manual_6857", "text": "If a non-zero cyclic ID is used, the value must be a number or an array of numbers,", "source": "meca500_programming_manual", "chunk_index": 6857, "length": 83, "hash": "ccd4a5e5fd50549626ee7242d4602411"}
{"id": "meca500_programming_manual_6858", "text": "otherwise CreateVariable (page 351) will fail with error [1552].", "source": "meca500_programming_manual", "chunk_index": 6858, "length": 64, "hash": "e68842ee5414a3f415e2ffd87a30cc8d"}
{"id": "meca500_programming_manual_6859", "text": "(page 351) will fail with error [1552].", "source": "meca500_programming_manual", "chunk_index": 6859, "length": 39, "hash": "f13692f5289415d6651caf4b637c8317"}
{"id": "meca500_programming_manual_6860", "text": "\u2022 override (optional, 0 by default):", "source": "meca500_programming_manual", "chunk_index": 6860, "length": 36, "hash": "e58bb87267a876550502fc78d9862a54"}
{"id": "meca500_programming_manual_6861", "text": "\u2022 override (optional, 0 by default):", "source": "meca500_programming_manual", "chunk_index": 6861, "length": 36, "hash": "e58bb87267a876550502fc78d9862a54"}
{"id": "meca500_programming_manual_6862", "text": "\u2013 Specifies how CreateVariable (page 351) behaves when a variable with the same", "source": "meca500_programming_manual", "chunk_index": 6862, "length": 79, "hash": "08f39ca5cde399cf79801c9e278c47ff"}
{"id": "meca500_programming_manual_6863", "text": "(page 351) behaves when a variable with the same", "source": "meca500_programming_manual", "chunk_index": 6863, "length": 48, "hash": "3aa0f9e8b502132f7109f868c0a19075"}
{"id": "meca500_programming_manual_6864", "text": "name already exists:", "source": "meca500_programming_manual", "chunk_index": 6864, "length": 20, "hash": "bae1e9c5b964fb31bb6e51abbb2fa157"}
{"id": "meca500_programming_manual_6865", "text": "name already exists:", "source": "meca500_programming_manual", "chunk_index": 6865, "length": 20, "hash": "bae1e9c5b964fb31bb6e51abbb2fa157"}
{"id": "meca500_programming_manual_6866", "text": "\u2217 1 to update the existing variable\u2019s value and cyclic ID with the new ones;", "source": "meca500_programming_manual", "chunk_index": 6866, "length": 76, "hash": "1918b6db50edd2c17ca00b37ad0932c5"}
{"id": "meca500_programming_manual_6867", "text": "\u2217 1 to update the existing variable\u2019s value and cyclic ID with the new ones;", "source": "meca500_programming_manual", "chunk_index": 6867, "length": 76, "hash": "1918b6db50edd2c17ca00b37ad0932c5"}
{"id": "meca500_programming_manual_6868", "text": "\u2217 0 to return the error [1552] if the existing variable has a different type or cyclic", "source": "meca500_programming_manual", "chunk_index": 6868, "length": 86, "hash": "e193059fa0265488e2911aaff68b4aac"}
{"id": "meca500_programming_manual_6869", "text": "\u2217 0 to return the error [1552] if the existing variable has a different type or cyclic", "source": "meca500_programming_manual", "chunk_index": 6869, "length": 86, "hash": "e193059fa0265488e2911aaff68b4aac"}
{"id": "meca500_programming_manual_6870", "text": "ID; otherwise do nothing and leave the variable unchanged.", "source": "meca500_programming_manual", "chunk_index": 6870, "length": 58, "hash": "d70dac2b734da32b5eb0fdd907ad4e8c"}
{"id": "meca500_programming_manual_6871", "text": "ID; otherwise do nothing and leave the variable unchanged.", "source": "meca500_programming_manual", "chunk_index": 6871, "length": 58, "hash": "d70dac2b734da32b5eb0fdd907ad4e8c"}
{"id": "meca500_programming_manual_6872", "text": "\u2022 [2552] [name, value, cyclicId, override]", "source": "meca500_programming_manual", "chunk_index": 6872, "length": 42, "hash": "cd9170048199e1c99f0f7b126011fc01"}
{"id": "meca500_programming_manual_6873", "text": "\u2022 [2552] [name, value, cyclicId, override]", "source": "meca500_programming_manual", "chunk_index": 6873, "length": 42, "hash": "cd9170048199e1c99f0f7b126011fc01"}
{"id": "meca500_programming_manual_6874", "text": "\u2217 An error message explaining why variable creation failed;", "source": "meca500_programming_manual", "chunk_index": 6874, "length": 59, "hash": "b348c5cee07cb5ef3a4541812b0e5a13"}
{"id": "meca500_programming_manual_6875", "text": "\u2217 An error message explaining why variable creation failed;", "source": "meca500_programming_manual", "chunk_index": 6875, "length": 59, "hash": "b348c5cee07cb5ef3a4541812b0e5a13"}
{"id": "meca500_programming_manual_6876", "text": "\u2217 e.g., \u201cCyclic ID 100001 is already used by variable myOtherVar\u201d.", "source": "meca500_programming_manual", "chunk_index": 6876, "length": 66, "hash": "09e28f9bddf83880753748682341cafe"}
{"id": "meca500_programming_manual_6877", "text": "\u2217 e.g., \u201cCyclic ID 100001 is already used by variable myOtherVar\u201d.", "source": "meca500_programming_manual", "chunk_index": 6877, "length": 66, "hash": "09e28f9bddf83880753748682341cafe"}
{"id": "meca500_programming_manual_6878", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6878, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6879", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6879, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6880", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 349).", "source": "meca500_programming_manual", "chunk_index": 6880, "length": 107, "hash": "44dd718f59977dca7854ac8634d62cbe"}
{"id": "meca500_programming_manual_6881", "text": "This command is not available in cyclic protocols. See", "source": "meca500_programming_manual", "chunk_index": 6881, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "meca500_programming_manual_6882", "text": "Managing variables with cyclic\nprotocols", "source": "meca500_programming_manual", "chunk_index": 6882, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "meca500_programming_manual_6883", "text": "DeleteVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6883, "length": 29, "hash": "30586e175a95a0968437d59ec8a0a6ba"}
{"id": "meca500_programming_manual_6884", "text": "DeleteVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6884, "length": 29, "hash": "30586e175a95a0968437d59ec8a0a6ba"}
{"id": "meca500_programming_manual_6885", "text": "This command deletes a variable from the robot.", "source": "meca500_programming_manual", "chunk_index": 6885, "length": 47, "hash": "dc0045df9be1ef182e34855fdfce9ac1"}
{"id": "meca500_programming_manual_6886", "text": "This command deletes a variable from the robot.", "source": "meca500_programming_manual", "chunk_index": 6886, "length": 47, "hash": "dc0045df9be1ef182e34855fdfce9ac1"}
{"id": "meca500_programming_manual_6887", "text": "For more information, see Commands for managing variables (beta) (page 345).", "source": "meca500_programming_manual", "chunk_index": 6887, "length": 76, "hash": "e934f302680d2ce4ef564bad25be39bf"}
{"id": "meca500_programming_manual_6888", "text": "For more information, see", "source": "meca500_programming_manual", "chunk_index": 6888, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "meca500_programming_manual_6889", "text": "Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 6889, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "meca500_programming_manual_6890", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6890, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6891", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6891, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6892", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6892, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6893", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6893, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6894", "text": "DeleteVariable(name)", "source": "meca500_programming_manual", "chunk_index": 6894, "length": 20, "hash": "5308d8b4ac12434ce5249bdb905708c0"}
{"id": "meca500_programming_manual_6895", "text": "DeleteVariable(name)", "source": "meca500_programming_manual", "chunk_index": 6895, "length": 20, "hash": "5308d8b4ac12434ce5249bdb905708c0"}
{"id": "meca500_programming_manual_6896", "text": "\u2022 name: name of the variable to delete (e.g., \u201cmyVar\u201d).", "source": "meca500_programming_manual", "chunk_index": 6896, "length": 55, "hash": "0fd27aa931b4a928f23facb04f42c156"}
{"id": "meca500_programming_manual_6897", "text": "\u2022 name: name of the variable to delete (e.g., \u201cmyVar\u201d).", "source": "meca500_programming_manual", "chunk_index": 6897, "length": 55, "hash": "0fd27aa931b4a928f23facb04f42c156"}
{"id": "meca500_programming_manual_6898", "text": "\u2217 An error message explaining why variable deletion failed;", "source": "meca500_programming_manual", "chunk_index": 6898, "length": 59, "hash": "08659612f782f2a21c93e43c0881b3b7"}
{"id": "meca500_programming_manual_6899", "text": "\u2217 An error message explaining why variable deletion failed;", "source": "meca500_programming_manual", "chunk_index": 6899, "length": 59, "hash": "08659612f782f2a21c93e43c0881b3b7"}
{"id": "meca500_programming_manual_6900", "text": "\u2217 e.g., \u201cCannot delete variable myVar (not found)\u201d.", "source": "meca500_programming_manual", "chunk_index": 6900, "length": 51, "hash": "9c64591589cf3752882e3f426da2bbd8"}
{"id": "meca500_programming_manual_6901", "text": "\u2217 e.g., \u201cCannot delete variable myVar (not found)\u201d.", "source": "meca500_programming_manual", "chunk_index": 6901, "length": 51, "hash": "9c64591589cf3752882e3f426da2bbd8"}
{"id": "meca500_programming_manual_6902", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6902, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6903", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6903, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6904", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 349).", "source": "meca500_programming_manual", "chunk_index": 6904, "length": 107, "hash": "44dd718f59977dca7854ac8634d62cbe"}
{"id": "meca500_programming_manual_6905", "text": "This command is not available in cyclic protocols. See", "source": "meca500_programming_manual", "chunk_index": 6905, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "meca500_programming_manual_6906", "text": "Managing variables with cyclic\nprotocols", "source": "meca500_programming_manual", "chunk_index": 6906, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "meca500_programming_manual_6907", "text": "GetVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6907, "length": 26, "hash": "01160cc2b864947cc3f36bf7ecbf4910"}
{"id": "meca500_programming_manual_6908", "text": "GetVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6908, "length": 26, "hash": "01160cc2b864947cc3f36bf7ecbf4910"}
{"id": "meca500_programming_manual_6909", "text": "This command returns the value of a robot variable.", "source": "meca500_programming_manual", "chunk_index": 6909, "length": 51, "hash": "61f61e6b99eb32f284304b9d1cbf2729"}
{"id": "meca500_programming_manual_6910", "text": "This command returns the value of a robot variable.", "source": "meca500_programming_manual", "chunk_index": 6910, "length": 51, "hash": "61f61e6b99eb32f284304b9d1cbf2729"}
{"id": "meca500_programming_manual_6911", "text": "For more information, see Commands for managing variables (beta) (page 345).", "source": "meca500_programming_manual", "chunk_index": 6911, "length": 76, "hash": "e934f302680d2ce4ef564bad25be39bf"}
{"id": "meca500_programming_manual_6912", "text": "For more information, see", "source": "meca500_programming_manual", "chunk_index": 6912, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "meca500_programming_manual_6913", "text": "Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 6913, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "meca500_programming_manual_6914", "text": "\u2022 name: name of the variable to get (e.g., \u201cmyVar\u201d).", "source": "meca500_programming_manual", "chunk_index": 6914, "length": 52, "hash": "70f462d63cb0bbb462a8ef6a14d85e65"}
{"id": "meca500_programming_manual_6915", "text": "\u2022 name: name of the variable to get (e.g., \u201cmyVar\u201d).", "source": "meca500_programming_manual", "chunk_index": 6915, "length": 52, "hash": "70f462d63cb0bbb462a8ef6a14d85e65"}
{"id": "meca500_programming_manual_6916", "text": "\u2022 [2551] [name, value, cyclicId]", "source": "meca500_programming_manual", "chunk_index": 6916, "length": 32, "hash": "cddb758f007f86f6f6c7cb2211595c86"}
{"id": "meca500_programming_manual_6917", "text": "\u2022 [2551] [name, value, cyclicId]", "source": "meca500_programming_manual", "chunk_index": 6917, "length": 32, "hash": "cddb758f007f86f6f6c7cb2211595c86"}
{"id": "meca500_programming_manual_6918", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6918, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6919", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6919, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6920", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6920, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6921", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6921, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6922", "text": "\u2217 An error message explaining why the variable could not be retrieved;", "source": "meca500_programming_manual", "chunk_index": 6922, "length": 70, "hash": "7bdd131b79abe6129f0354b07a2976e0"}
{"id": "meca500_programming_manual_6923", "text": "\u2217 An error message explaining why the variable could not be retrieved;", "source": "meca500_programming_manual", "chunk_index": 6923, "length": 70, "hash": "7bdd131b79abe6129f0354b07a2976e0"}
{"id": "meca500_programming_manual_6924", "text": "\u2217 e.g., \u201cVariable \u2018myVar\u2019 does not exist\u201d.", "source": "meca500_programming_manual", "chunk_index": 6924, "length": 42, "hash": "25c31177526d943465f59e1e4567aa58"}
{"id": "meca500_programming_manual_6925", "text": "\u2217 e.g., \u201cVariable \u2018myVar\u2019 does not exist\u201d.", "source": "meca500_programming_manual", "chunk_index": 6925, "length": 42, "hash": "25c31177526d943465f59e1e4567aa58"}
{"id": "meca500_programming_manual_6926", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6926, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6927", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6927, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6928", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 349).", "source": "meca500_programming_manual", "chunk_index": 6928, "length": 107, "hash": "44dd718f59977dca7854ac8634d62cbe"}
{"id": "meca500_programming_manual_6929", "text": "This command is not available in cyclic protocols. See", "source": "meca500_programming_manual", "chunk_index": 6929, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "meca500_programming_manual_6930", "text": "Managing variables with cyclic\nprotocols", "source": "meca500_programming_manual", "chunk_index": 6930, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "meca500_programming_manual_6931", "text": "ListVariables (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6931, "length": 28, "hash": "3fe57230eeaf668f4881dbd9c29df25d"}
{"id": "meca500_programming_manual_6932", "text": "ListVariables (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6932, "length": 28, "hash": "3fe57230eeaf668f4881dbd9c29df25d"}
{"id": "meca500_programming_manual_6933", "text": "This command returns the list of all variable names that exist on the robot.", "source": "meca500_programming_manual", "chunk_index": 6933, "length": 76, "hash": "99d9e175fe18194398d431eb900d9764"}
{"id": "meca500_programming_manual_6934", "text": "This command returns the list of all variable names that exist on the robot.", "source": "meca500_programming_manual", "chunk_index": 6934, "length": 76, "hash": "99d9e175fe18194398d431eb900d9764"}
{"id": "meca500_programming_manual_6935", "text": "For more information, see Commands for managing variables (beta) (page 345).", "source": "meca500_programming_manual", "chunk_index": 6935, "length": 76, "hash": "e934f302680d2ce4ef564bad25be39bf"}
{"id": "meca500_programming_manual_6936", "text": "For more information, see", "source": "meca500_programming_manual", "chunk_index": 6936, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "meca500_programming_manual_6937", "text": "Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 6937, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "meca500_programming_manual_6938", "text": "\u2022 [2550] [var1, var2, \u2026]", "source": "meca500_programming_manual", "chunk_index": 6938, "length": 24, "hash": "cd1eb742e437c09955175e11e86b36c3"}
{"id": "meca500_programming_manual_6939", "text": "\u2022 [2550] [var1, var2, \u2026]", "source": "meca500_programming_manual", "chunk_index": 6939, "length": 24, "hash": "cd1eb742e437c09955175e11e86b36c3"}
{"id": "meca500_programming_manual_6940", "text": "\u2217 An error message explaining why the variable could not be listed.", "source": "meca500_programming_manual", "chunk_index": 6940, "length": 67, "hash": "dff082668158b799feb71f1a42604fe8"}
{"id": "meca500_programming_manual_6941", "text": "\u2217 An error message explaining why the variable could not be listed.", "source": "meca500_programming_manual", "chunk_index": 6941, "length": 67, "hash": "dff082668158b799feb71f1a42604fe8"}
{"id": "meca500_programming_manual_6942", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6942, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6943", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6943, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6944", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 349).", "source": "meca500_programming_manual", "chunk_index": 6944, "length": 107, "hash": "44dd718f59977dca7854ac8634d62cbe"}
{"id": "meca500_programming_manual_6945", "text": "This command is not available in cyclic protocols. See", "source": "meca500_programming_manual", "chunk_index": 6945, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "meca500_programming_manual_6946", "text": "Managing variables with cyclic\nprotocols", "source": "meca500_programming_manual", "chunk_index": 6946, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "meca500_programming_manual_6947", "text": "SetVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6947, "length": 26, "hash": "8e19956bdc2e6fa8be65d99a0d035ebe"}
{"id": "meca500_programming_manual_6948", "text": "SetVariable (beta feature)", "source": "meca500_programming_manual", "chunk_index": 6948, "length": 26, "hash": "8e19956bdc2e6fa8be65d99a0d035ebe"}
{"id": "meca500_programming_manual_6949", "text": "This command modifies a robot variable. The modification persists even after a reboot.", "source": "meca500_programming_manual", "chunk_index": 6949, "length": 86, "hash": "e6a67fddd89f667f790ba580478ad883"}
{"id": "meca500_programming_manual_6950", "text": "This command modifies a robot variable. The modification persists even after a reboot.", "source": "meca500_programming_manual", "chunk_index": 6950, "length": 86, "hash": "e6a67fddd89f667f790ba580478ad883"}
{"id": "meca500_programming_manual_6951", "text": "A variable\u2019s value can only be changed to a value of the same type. For example, a variable\nholding a number cannot be assigned a string or an array.", "source": "meca500_programming_manual", "chunk_index": 6951, "length": 149, "hash": "db24519b15da2c0638c0a992f883c6d7"}
{"id": "meca500_programming_manual_6952", "text": "A variable\u2019s value can only be changed to a value of the same type. For example, a variable\nholding a number cannot be assigned a string or an array.", "source": "meca500_programming_manual", "chunk_index": 6952, "length": 149, "hash": "db24519b15da2c0638c0a992f883c6d7"}
{"id": "meca500_programming_manual_6953", "text": "No automatic conversion is performed between supported types. For instance assigning an\ninteger to a boolean value, or vice versa, is not supported.", "source": "meca500_programming_manual", "chunk_index": 6953, "length": 148, "hash": "ed7ae93bf1287327df732bbfbfb59f54"}
{"id": "meca500_programming_manual_6954", "text": "No automatic conversion is performed between supported types. For instance assigning an\ninteger to a boolean value, or vice versa, is not supported.", "source": "meca500_programming_manual", "chunk_index": 6954, "length": 148, "hash": "ed7ae93bf1287327df732bbfbfb59f54"}
{"id": "meca500_programming_manual_6955", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6955, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6956", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6956, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6957", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6957, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6958", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6958, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6959", "text": "To change a variable\u2019s type, use the \u2018override\u2019 option in the CreateVariable (page 351)\ncommand.", "source": "meca500_programming_manual", "chunk_index": 6959, "length": 96, "hash": "5456663797bbeb491c757a7474a194e7"}
{"id": "meca500_programming_manual_6960", "text": "To change a variable\u2019s type, use the \u2018override\u2019 option in the", "source": "meca500_programming_manual", "chunk_index": 6960, "length": 61, "hash": "6fe37e61d0a8581902dac98815b525ee"}
{"id": "meca500_programming_manual_6961", "text": "For more information, see Commands for managing variables (beta) (page 345).", "source": "meca500_programming_manual", "chunk_index": 6961, "length": 76, "hash": "e934f302680d2ce4ef564bad25be39bf"}
{"id": "meca500_programming_manual_6962", "text": "For more information, see", "source": "meca500_programming_manual", "chunk_index": 6962, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "meca500_programming_manual_6963", "text": "Commands for managing variables (beta)", "source": "meca500_programming_manual", "chunk_index": 6963, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "meca500_programming_manual_6964", "text": "SetVariable(name, value)", "source": "meca500_programming_manual", "chunk_index": 6964, "length": 24, "hash": "bee1e6c50b8cfdeaa439b7f24a07d67f"}
{"id": "meca500_programming_manual_6965", "text": "SetVariable(name, value)", "source": "meca500_programming_manual", "chunk_index": 6965, "length": 24, "hash": "bee1e6c50b8cfdeaa439b7f24a07d67f"}
{"id": "meca500_programming_manual_6966", "text": "\u2013 The name of the variable to modify (e.g., \u201cmyVar\u201d).", "source": "meca500_programming_manual", "chunk_index": 6966, "length": 53, "hash": "405056e57b8b5a6fba27f93f6a5e1ea1"}
{"id": "meca500_programming_manual_6967", "text": "The name of the variable to modify (e.g., \u201cmyVar\u201d).", "source": "meca500_programming_manual", "chunk_index": 6967, "length": 51, "hash": "6e56e09e46d89549d22e2a7ef0cc4f08"}
{"id": "meca500_programming_manual_6968", "text": "\u2013 The new value to assign to the variable;", "source": "meca500_programming_manual", "chunk_index": 6968, "length": 42, "hash": "b11ce0bb9f413c159308e45a5a363c16"}
{"id": "meca500_programming_manual_6969", "text": "The new value to assign to the variable;", "source": "meca500_programming_manual", "chunk_index": 6969, "length": 40, "hash": "49e409b26da3f73ae31ac1439429c6ae"}
{"id": "meca500_programming_manual_6970", "text": "\u2013 The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false);", "source": "meca500_programming_manual", "chunk_index": 6970, "length": 184, "hash": "e1935aa01a834634a19cd42582b984df"}
{"id": "meca500_programming_manual_6971", "text": "The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false);", "source": "meca500_programming_manual", "chunk_index": 6971, "length": 182, "hash": "8f093082791c9c7d7173b78c96e4224c"}
{"id": "meca500_programming_manual_6972", "text": "\u2013 SetVariable (page 354) will fail with error [1554] if you try to assign a value of a", "source": "meca500_programming_manual", "chunk_index": 6972, "length": 86, "hash": "f983a874e1acd95ea5a9e6317d6a039a"}
{"id": "meca500_programming_manual_6973", "text": "(page 354) will fail with error [1554] if you try to assign a value of a", "source": "meca500_programming_manual", "chunk_index": 6973, "length": 72, "hash": "cbeb385e340fd0d4d2ce85f86c0e4ef9"}
{"id": "meca500_programming_manual_6974", "text": "different type or array length.", "source": "meca500_programming_manual", "chunk_index": 6974, "length": 31, "hash": "350a974d77bd736fc08e435314a9a690"}
{"id": "meca500_programming_manual_6975", "text": "different type or array length.", "source": "meca500_programming_manual", "chunk_index": 6975, "length": 31, "hash": "350a974d77bd736fc08e435314a9a690"}
{"id": "meca500_programming_manual_6976", "text": "\u2217 a boolean: SetVariable(myBoolVar, true)", "source": "meca500_programming_manual", "chunk_index": 6976, "length": 41, "hash": "92484640e1ae3a0ba7e3672f9dc9df87"}
{"id": "meca500_programming_manual_6977", "text": "SetVariable(myBoolVar, true)", "source": "meca500_programming_manual", "chunk_index": 6977, "length": 28, "hash": "0da10a2aff0f770264851b14eef97d19"}
{"id": "meca500_programming_manual_6978", "text": "\u2217 a number: SetVariable(myIntVar, -0.153)", "source": "meca500_programming_manual", "chunk_index": 6978, "length": 41, "hash": "acd1229fabeb2d86da491a953500c074"}
{"id": "meca500_programming_manual_6979", "text": "SetVariable(myIntVar, -0.153)", "source": "meca500_programming_manual", "chunk_index": 6979, "length": 29, "hash": "aa91f6ce36e00a03ea138fa15a23df1e"}
{"id": "meca500_programming_manual_6980", "text": "\u2217 a string: SetVariable(myStringVar, \"Hello world!\")", "source": "meca500_programming_manual", "chunk_index": 6980, "length": 52, "hash": "29b456b797746f74baa1939d5ef5a7e7"}
{"id": "meca500_programming_manual_6981", "text": "SetVariable(myStringVar, \"Hello world!\")", "source": "meca500_programming_manual", "chunk_index": 6981, "length": 40, "hash": "c3a97680afaddeac13dae76eafaf8238"}
{"id": "meca500_programming_manual_6982", "text": "\u2217 an array: SetVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "meca500_programming_manual", "chunk_index": 6982, "length": 66, "hash": "980a7637c85886db14e23341b9e08e7a"}
{"id": "meca500_programming_manual_6983", "text": "SetVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "meca500_programming_manual", "chunk_index": 6983, "length": 54, "hash": "afd26fc9208d63f1f1147006bc0ea23f"}
{"id": "meca500_programming_manual_6984", "text": "\u2022 [2554] [name, value]", "source": "meca500_programming_manual", "chunk_index": 6984, "length": 22, "hash": "00b9854a0330291618f344542a91632f"}
{"id": "meca500_programming_manual_6985", "text": "\u2022 [2554] [name, value]", "source": "meca500_programming_manual", "chunk_index": 6985, "length": 22, "hash": "00b9854a0330291618f344542a91632f"}
{"id": "meca500_programming_manual_6986", "text": "\u2217 An error message explaining why the variable modification failed;", "source": "meca500_programming_manual", "chunk_index": 6986, "length": 67, "hash": "ca00b77b4203851f89b55dfa99fa0003"}
{"id": "meca500_programming_manual_6987", "text": "\u2217 An error message explaining why the variable modification failed;", "source": "meca500_programming_manual", "chunk_index": 6987, "length": 67, "hash": "ca00b77b4203851f89b55dfa99fa0003"}
{"id": "meca500_programming_manual_6988", "text": "\u2217 e.g., \u201cCannot set variable my_var (not found)\u201d.", "source": "meca500_programming_manual", "chunk_index": 6988, "length": 49, "hash": "1f993ead5db9a62e88e3a566f7827693"}
{"id": "meca500_programming_manual_6989", "text": "\u2217 e.g., \u201cCannot set variable my_var (not found)\u201d.", "source": "meca500_programming_manual", "chunk_index": 6989, "length": 49, "hash": "1f993ead5db9a62e88e3a566f7827693"}
{"id": "meca500_programming_manual_6990", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6990, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6991", "text": "This command can be executed in any robot state.", "source": "meca500_programming_manual", "chunk_index": 6991, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "meca500_programming_manual_6992", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6992, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6993", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6993, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6994", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6994, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6995", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 6995, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_6996", "text": "See Managing variables with cyclic protocols (page 349).", "source": "meca500_programming_manual", "chunk_index": 6996, "length": 56, "hash": "2369553a5a87b9a7746e345a06eecf23"}
{"id": "meca500_programming_manual_6997", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6997, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6998", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6998, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_6999", "text": "Managing variables with cyclic protocols", "source": "meca500_programming_manual", "chunk_index": 6999, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "meca500_programming_manual_7000", "text": "Below is the list of terms used by us in our technical documentation.", "source": "meca500_programming_manual", "chunk_index": 7000, "length": 69, "hash": "8f9f4b4bb3c39825baf1bb8bc9f1238b"}
{"id": "meca500_programming_manual_7001", "text": "Below is the list of terms used by us in our technical documentation.", "source": "meca500_programming_manual", "chunk_index": 7001, "length": 69, "hash": "8f9f4b4bb3c39825baf1bb8bc9f1238b"}
{"id": "meca500_programming_manual_7002", "text": "active line: The line in the MecaPortal where the cursor is currently positioned.", "source": "meca500_programming_manual", "chunk_index": 7002, "length": 81, "hash": "29642951d741b7e971752c05c6ce8061"}
{"id": "meca500_programming_manual_7003", "text": ": The line in the MecaPortal where the cursor is currently positioned.", "source": "meca500_programming_manual", "chunk_index": 7003, "length": 70, "hash": "0d43d9e0ee701a9ba31dd65e2df7ab7e"}
{"id": "meca500_programming_manual_7004", "text": "BRF: Base Reference Frame.", "source": "meca500_programming_manual", "chunk_index": 7004, "length": 26, "hash": "fe58c229addd080c32e43eee058aae46"}
{"id": "meca500_programming_manual_7005", "text": ": Base Reference Frame.", "source": "meca500_programming_manual", "chunk_index": 7005, "length": 23, "hash": "e9144f060389ad01ebddcf876d916d2f"}
{"id": "meca500_programming_manual_7006", "text": "Cartesian space: The six-dimensional space defined by the position (x, y, z) and orientation\n(\u03b1, \u03b2, \u03b3) of the TRF with respect to the WRF.", "source": "meca500_programming_manual", "chunk_index": 7006, "length": 138, "hash": "c0784066a42830dab3c1eb4fab2a3598"}
{"id": "meca500_programming_manual_7007", "text": ": The six-dimensional space defined by the position (x, y, z) and orientation\n(\u03b1, \u03b2, \u03b3) of the TRF with respect to the WRF.", "source": "meca500_programming_manual", "chunk_index": 7007, "length": 123, "hash": "090dab2026c80ca436f6efd161bfe6c8"}
{"id": "meca500_programming_manual_7008", "text": "control port: The TCP port 10000, over which commands to the robot and messages from\nthe robot are sent.", "source": "meca500_programming_manual", "chunk_index": 7008, "length": 104, "hash": "89d16280ac1ee0a69ca465f03f93d0d9"}
{"id": "meca500_programming_manual_7009", "text": ": The TCP port 10000, over which commands to the robot and messages from\nthe robot are sent.", "source": "meca500_programming_manual", "chunk_index": 7009, "length": 92, "hash": "64fde0dc9c75f9e8f10afb97a955c71c"}
{"id": "meca500_programming_manual_7010", "text": "data request commands: Commands used to request some data regarding the robot (e.g.,\nGetTrf (page 264), GetBlending (page 228), GetJointVel (page 242)). These commands are\nexecuted immediately and generally return values for parameters that have already been\nconfigured (sent and executed) with a Set* command (or the default values).", "source": "meca500_programming_manual", "chunk_index": 7010, "length": 334, "hash": "75065aac69e9232373188f13ca78a335"}
{"id": "meca500_programming_manual_7011", "text": "data request commands", "source": "meca500_programming_manual", "chunk_index": 7011, "length": 21, "hash": "98619a04001f4cb3e796fb1870e56f10"}
{"id": "meca500_programming_manual_7012", "text": ": Commands used to request some data regarding the robot (e.g.,", "source": "meca500_programming_manual", "chunk_index": 7012, "length": 63, "hash": "3166a0cc02c8811fc6b4339a0d16fa6b"}
{"id": "meca500_programming_manual_7013", "text": "(page 242)). These commands are", "source": "meca500_programming_manual", "chunk_index": 7013, "length": 31, "hash": "ae9b9be3b1a0f17b512bd9954aa7b527"}
{"id": "meca500_programming_manual_7014", "text": "executed immediately and generally return values for parameters that have already been\nconfigured (sent and executed) with a Set* command (or the default values).", "source": "meca500_programming_manual", "chunk_index": 7014, "length": 162, "hash": "aea804b2c1340b7b1fee9bea980c1b4b"}
{"id": "meca500_programming_manual_7015", "text": "default value: There are different settings in the robot controller that can be configured\nusing Set* commands (e.g., SetCartAcc (page 152)). Many of these settings have default\nvalues. Every time the robot is powered up, these settings are initialized to their default\nvalues. In the case of motion commands settings, their values are also initialized to their\ndefault values every time the robot is deactivated. In contrast, some settings are persistent\nand their values are stored on an SD drive.", "source": "meca500_programming_manual", "chunk_index": 7015, "length": 499, "hash": "2b1d695023da93e077528569baa1b16e"}
{"id": "meca500_programming_manual_7016", "text": ": There are different settings in the robot controller that can be configured\nusing Set* commands (e.g.,", "source": "meca500_programming_manual", "chunk_index": 7016, "length": 104, "hash": "f24aba2d6832d869e8875e77c9229f1b"}
{"id": "meca500_programming_manual_7017", "text": "(page 152)). Many of these settings have default\nvalues. Every time the robot is powered up, these settings are initialized to their default\nvalues. In the case of motion commands settings, their values are also initialized to their\ndefault values every time the robot is deactivated. In contrast, some settings are persistent\nand their values are stored on an SD drive.", "source": "meca500_programming_manual", "chunk_index": 7017, "length": 370, "hash": "927782ac403c4fdb95b489468a54d8fe"}
{"id": "meca500_programming_manual_7018", "text": "detailed event log: This file mirrors the content of the event log panel in the MecaPortal\nwhen in detailed mode.\nIt can be downloaded from the MecaPortal (see Section 9 of the\nProgramming Manual).", "source": "meca500_programming_manual", "chunk_index": 7018, "length": 197, "hash": "28a73b92ffd9f0f8f8f3556abd4b38c1"}
{"id": "meca500_programming_manual_7019", "text": ": This file mirrors the content of the event log panel in the MecaPortal\nwhen in detailed mode.\nIt can be downloaded from the MecaPortal (see Section 9 of the\nProgramming Manual).", "source": "meca500_programming_manual", "chunk_index": 7019, "length": 179, "hash": "9da1790f8f6be3a1b808da95826a3a4c"}
{"id": "meca500_programming_manual_7020", "text": "EOAT: End-of-arm tooling.", "source": "meca500_programming_manual", "chunk_index": 7020, "length": 25, "hash": "b099bc30e44c7c0bd96c1a32149c5560"}
{"id": "meca500_programming_manual_7021", "text": ": End-of-arm tooling.", "source": "meca500_programming_manual", "chunk_index": 7021, "length": 21, "hash": "db7b19a8abf30e913ff35da43bd745f3"}
{"id": "meca500_programming_manual_7022", "text": "EOB: End-of-block message, [3012][], sent by default every time the robot has stopped moving\nAND its motion queue is empty. You can disable this message with the command SetEob\n(page 201).", "source": "meca500_programming_manual", "chunk_index": 7022, "length": 188, "hash": "c0de7daf72d028e7b4d4d0101dafe0e4"}
{"id": "meca500_programming_manual_7023", "text": ": End-of-block message, [3012][], sent by default every time the robot has stopped moving\nAND its motion queue is empty. You can disable this message with the command", "source": "meca500_programming_manual", "chunk_index": 7023, "length": 166, "hash": "f9e9fa326056664a02ecb8aecace6728"}
{"id": "meca500_programming_manual_7024", "text": "EOM: End-of-motion message, [3004][], sent by the robot whenever it has stopped moving\nfor at least 1 ms, if this option is activated with SetEom (page 202).", "source": "meca500_programming_manual", "chunk_index": 7024, "length": 157, "hash": "c6a21cb6a05afa6aa8617c86f09546c7"}
{"id": "meca500_programming_manual_7025", "text": ": End-of-motion message, [3004][], sent by the robot whenever it has stopped moving\nfor at least 1 ms, if this option is activated with", "source": "meca500_programming_manual", "chunk_index": 7025, "length": 135, "hash": "aff9365d74185ceac4fad3d2a0b1e21f"}
{"id": "meca500_programming_manual_7026", "text": "error mode: The robot goes into error mode when it encounters an error while executing a\ncommand or a hardware problem (see Table 1).", "source": "meca500_programming_manual", "chunk_index": 7026, "length": 133, "hash": "54d63c28c0303f384b536dd121fc18d2"}
{"id": "meca500_programming_manual_7027", "text": ": The robot goes into error mode when it encounters an error while executing a\ncommand or a hardware problem (see Table 1).", "source": "meca500_programming_manual", "chunk_index": 7027, "length": 123, "hash": "060a00b99ca1e7feec9fd08c4364551e"}
{"id": "meca500_programming_manual_7028", "text": "Euler angles: A set of three angles, {\u03b1, \u03b2, \u03b3}, used the define an orientation in space. We use\nthe mobile (intrinsic) XYZ convention. See Section 3 of the Programming manual for more\ndetails.", "source": "meca500_programming_manual", "chunk_index": 7028, "length": 192, "hash": "a0124f6e318d39cf6ff8a1265c457f17"}
{"id": "meca500_programming_manual_7029", "text": ": A set of three angles, {\u03b1, \u03b2, \u03b3}, used the define an orientation in space. We use\nthe mobile (intrinsic) XYZ convention. See Section 3 of the Programming manual for more\ndetails.", "source": "meca500_programming_manual", "chunk_index": 7029, "length": 180, "hash": "3ed350a9001d0032126b090e3eec1ca5"}
{"id": "meca500_programming_manual_7030", "text": "FCP: Flange Center Point. The origin of the FRF.", "source": "meca500_programming_manual", "chunk_index": 7030, "length": 48, "hash": "bd378f5835379aa0ffcb17e873e335aa"}
{"id": "meca500_programming_manual_7031", "text": ": Flange Center Point. The origin of the FRF.", "source": "meca500_programming_manual", "chunk_index": 7031, "length": 45, "hash": "6ea72b71f39ea25b9fbf34788350b95c"}
{"id": "meca500_programming_manual_7032", "text": "FRF: Flange Reference Frame.", "source": "meca500_programming_manual", "chunk_index": 7032, "length": 28, "hash": "95c534285893f807be661b966362d0b8"}
{"id": "meca500_programming_manual_7033", "text": ": Flange Reference Frame.", "source": "meca500_programming_manual", "chunk_index": 7033, "length": 25, "hash": "288c9204593c4b5e45dca954fe41d349"}
{"id": "meca500_programming_manual_7034", "text": "instantaneous commands: These are commands that are executed immediately, as soon\nas received by the robot. All data request commands (Get*), all robot control commands,", "source": "meca500_programming_manual", "chunk_index": 7034, "length": 169, "hash": "7d50ba18d8925b5b01c0c06a35bfa82a"}
{"id": "meca500_programming_manual_7035", "text": "instantaneous commands", "source": "meca500_programming_manual", "chunk_index": 7035, "length": 22, "hash": "b7fce247011c5194869abccf0bc2cca2"}
{"id": "meca500_programming_manual_7036", "text": ": These are commands that are executed immediately, as soon\nas received by the robot. All data request commands (Get*), all robot control commands,", "source": "meca500_programming_manual", "chunk_index": 7036, "length": 147, "hash": "18b3924fb5f004f0f320222729e1a6aa"}
{"id": "meca500_programming_manual_7037", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 7037, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_7038", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 7038, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_7039", "text": "all work zone supervision and collision prevention commands and some optional accessories\ncommands (*_Immediate) are instantaneous.", "source": "meca500_programming_manual", "chunk_index": 7039, "length": 131, "hash": "d9b7ad72705ec8eb909e402b9a1ee081"}
{"id": "meca500_programming_manual_7040", "text": "all work zone supervision and collision prevention commands and some optional accessories\ncommands (*_Immediate) are instantaneous.", "source": "meca500_programming_manual", "chunk_index": 7040, "length": 131, "hash": "d9b7ad72705ec8eb909e402b9a1ee081"}
{"id": "meca500_programming_manual_7041", "text": "inverse kinematics: The problem of obtaining the robot joint sets that correspond to a\ndesired end-effector pose. See Section 3 of the Programming manual for more details.", "source": "meca500_programming_manual", "chunk_index": 7041, "length": 171, "hash": "c9ab3560b669967d089084b958a05ad3"}
{"id": "meca500_programming_manual_7042", "text": ": The problem of obtaining the robot joint sets that correspond to a\ndesired end-effector pose. See Section 3 of the Programming manual for more details.", "source": "meca500_programming_manual", "chunk_index": 7042, "length": 153, "hash": "f5c564431dbeade05f784f395c758df2"}
{"id": "meca500_programming_manual_7043", "text": "joint position: The joint angle associated with a specific joint.", "source": "meca500_programming_manual", "chunk_index": 7043, "length": 65, "hash": "adbf81175fb286640c6ffb005c2b5b28"}
{"id": "meca500_programming_manual_7044", "text": ": The joint angle associated with a specific joint.", "source": "meca500_programming_manual", "chunk_index": 7044, "length": 51, "hash": "eee24a13136c720ef1d9fb5606d06363"}
{"id": "meca500_programming_manual_7045", "text": "joint set: The set of all joint positions.", "source": "meca500_programming_manual", "chunk_index": 7045, "length": 42, "hash": "6e37bb267e64d2016e3931682a4cbb8f"}
{"id": "meca500_programming_manual_7046", "text": ": The set of all joint positions.", "source": "meca500_programming_manual", "chunk_index": 7046, "length": 33, "hash": "051948dab4dc84918b40e9b4577c1f1a"}
{"id": "meca500_programming_manual_7047", "text": "joint space: The six-dimensional space defined by the positions of the robot joints.", "source": "meca500_programming_manual", "chunk_index": 7047, "length": 84, "hash": "8e75f1fcbdffeb4428e94c546694c245"}
{"id": "meca500_programming_manual_7048", "text": ": The six-dimensional space defined by the positions of the robot joints.", "source": "meca500_programming_manual", "chunk_index": 7048, "length": 73, "hash": "e67ec0f8f9574ef679f8c73558c12ae5"}
{"id": "meca500_programming_manual_7049", "text": "monitoring port: The TCP port 10001, over which data is sent periodically from the robot.", "source": "meca500_programming_manual", "chunk_index": 7049, "length": 89, "hash": "8386a7e64ee69dfc58705de8f77687b6"}
{"id": "meca500_programming_manual_7050", "text": ": The TCP port 10001, over which data is sent periodically from the robot.", "source": "meca500_programming_manual", "chunk_index": 7050, "length": 74, "hash": "0ad8f8affcfb2c273c4039f8856b3dca"}
{"id": "meca500_programming_manual_7051", "text": "motion commands: Commands used to construct the robot trajectory (e.g., Delay\n(page 134), MoveJoints (page 135), SetTRF (page 179), SetBlending (page 151)). When a\nMecademic robot receives a motion command, it places it in a motion queue. The command\nwill be run once all preceding motion commands have been executed.", "source": "meca500_programming_manual", "chunk_index": 7051, "length": 317, "hash": "cd89de81d0f73c6c284a85e0bfaba83b"}
{"id": "meca500_programming_manual_7052", "text": ": Commands used to construct the robot trajectory (e.g.,", "source": "meca500_programming_manual", "chunk_index": 7052, "length": 56, "hash": "b1198e5d1b70002e3b4ee5f6777e94ec"}
{"id": "meca500_programming_manual_7053", "text": "(page 151)). When a\nMecademic robot receives a motion command, it places it in a motion queue. The command\nwill be run once all preceding motion commands have been executed.", "source": "meca500_programming_manual", "chunk_index": 7053, "length": 173, "hash": "18f4f56a366b88901ef839c310027569"}
{"id": "meca500_programming_manual_7054", "text": "motion queue: The buffer where motion commands that were sent to the robot are stored\nand executed on a FIFO basis by the robot.", "source": "meca500_programming_manual", "chunk_index": 7054, "length": 128, "hash": "dd35fd4cfb0e5dd1944b263bb5f3671c"}
{"id": "meca500_programming_manual_7055", "text": ": The buffer where motion commands that were sent to the robot are stored\nand executed on a FIFO basis by the robot.", "source": "meca500_programming_manual", "chunk_index": 7055, "length": 116, "hash": "1c4b7503ce64fd48b645aa086934d8c8"}
{"id": "meca500_programming_manual_7056", "text": "offline program: A sequence of commands saved in the internal memory of the robot. The\nterm offline is often omitted and will eventually be removed altogether.", "source": "meca500_programming_manual", "chunk_index": 7056, "length": 159, "hash": "dbc6dd99627f71baa452e9a957198673"}
{"id": "meca500_programming_manual_7057", "text": ": A sequence of commands saved in the internal memory of the robot. The\nterm", "source": "meca500_programming_manual", "chunk_index": 7057, "length": 76, "hash": "7266b1ecc9b7d6767cfecaa6ccd56bba"}
{"id": "meca500_programming_manual_7058", "text": "is often omitted and will eventually be removed altogether.", "source": "meca500_programming_manual", "chunk_index": 7058, "length": 59, "hash": "e438b4c84eee095b3d18b5591643e651"}
{"id": "meca500_programming_manual_7059", "text": "online mode programming: Programming the robot in online mode involves moving it\ndirectly to each desired robot position, typically using jogging controls.", "source": "meca500_programming_manual", "chunk_index": 7059, "length": 155, "hash": "f89c4a935f0d41672aab26ac83653315"}
{"id": "meca500_programming_manual_7060", "text": "online mode programming", "source": "meca500_programming_manual", "chunk_index": 7060, "length": 23, "hash": "0132caa04a6bfe2e90f1b439db743e28"}
{"id": "meca500_programming_manual_7061", "text": ": Programming the robot in online mode involves moving it\ndirectly to each desired robot position, typically using jogging controls.", "source": "meca500_programming_manual", "chunk_index": 7061, "length": 132, "hash": "e0d58929e5e7ce94de67b76af4c649f8"}
{"id": "meca500_programming_manual_7062", "text": "PDO (Process Data Object): In EtherCAT, a Process Data Object (PDO) is a data structure\nused for exchanging real-time cyclic data between an EtherCAT master and its slave devices.\nPDOs can contain individual bits, bytes, or words.", "source": "meca500_programming_manual", "chunk_index": 7062, "length": 230, "hash": "a07b9966056c3ebacfa75d8d1d512cc4"}
{"id": "meca500_programming_manual_7063", "text": "): In EtherCAT, a Process Data Object (PDO) is a data structure\nused for exchanging real-time cyclic data between an EtherCAT master and its slave devices.\nPDOs can contain individual bits, bytes, or words.", "source": "meca500_programming_manual", "chunk_index": 7063, "length": 206, "hash": "ea5265e7b66a27f71730b5a206170712"}
{"id": "meca500_programming_manual_7064", "text": "persistent settings: Some settings in the robot controller have default values (e.g., the robot\nname set by the command SetRobotName (page 212)), but when changed, their new values\nare written on an SD drive and persist even if the robot is powered off.", "source": "meca500_programming_manual", "chunk_index": 7064, "length": 253, "hash": "5cebaa61cb1f950be177180e081241fe"}
{"id": "meca500_programming_manual_7065", "text": ": Some settings in the robot controller have default values (e.g., the robot\nname set by the command", "source": "meca500_programming_manual", "chunk_index": 7065, "length": 100, "hash": "918420b32a1511a061af93aaaa4d5cf4"}
{"id": "meca500_programming_manual_7066", "text": "(page 212)), but when changed, their new values\nare written on an SD drive and persist even if the robot is powered off.", "source": "meca500_programming_manual", "chunk_index": 7066, "length": 120, "hash": "c87129a84f73fcbe861b8f803667c62c"}
{"id": "meca500_programming_manual_7067", "text": "pose: The position and orientation of one reference frame with respect to another.", "source": "meca500_programming_manual", "chunk_index": 7067, "length": 82, "hash": "6609a410f3dc17a3555799aabf562dcb"}
{"id": "meca500_programming_manual_7068", "text": ": The position and orientation of one reference frame with respect to another.", "source": "meca500_programming_manual", "chunk_index": 7068, "length": 78, "hash": "68829af22994aaac3243a61b1ee08d94"}
{"id": "meca500_programming_manual_7069", "text": "position mode: One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target end-effector pose or joint set (see Section 3 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7069, "length": 182, "hash": "f8e3fee3c7117a53a60e0feedf777131"}
{"id": "meca500_programming_manual_7070", "text": ": One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target end-effector pose or joint set (see Section 3 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7070, "length": 169, "hash": "32eb3d3a79afaedf4ca61ed8cad1a4e6"}
{"id": "meca500_programming_manual_7071", "text": "robot posture configuration: The set of two-value (\u22121 or 1) parameters cs, ce, and cw that\nnormally defines each of the eight possible robot postures for a given pose of the robot\u2019s\nend-effector.", "source": "meca500_programming_manual", "chunk_index": 7071, "length": 195, "hash": "6e1165b6c24cf4b7ce22bacdcdfce112"}
{"id": "meca500_programming_manual_7072", "text": "robot posture configuration", "source": "meca500_programming_manual", "chunk_index": 7072, "length": 27, "hash": "f7fde43d7591ac11b5bab7742c179f9d"}
{"id": "meca500_programming_manual_7073", "text": ": The set of two-value (\u22121 or 1) parameters c", "source": "meca500_programming_manual", "chunk_index": 7073, "length": 45, "hash": "7c3b01c9cd478f715da11d22d8891534"}
{"id": "meca500_programming_manual_7074", "text": "that\nnormally defines each of the eight possible robot postures for a given pose of the robot\u2019s\nend-effector.", "source": "meca500_programming_manual", "chunk_index": 7074, "length": 109, "hash": "597565e82a1cfed6f5df31a5e7d9a548"}
{"id": "meca500_programming_manual_7075", "text": "queued commands: Commands that are placed in the motion queue, rather than executed\nimmediately. All motion commands are queued commands, as well as some external-tool\ncommands.", "source": "meca500_programming_manual", "chunk_index": 7075, "length": 177, "hash": "317679abdcfdbcc8626afa3d8884b1d5"}
{"id": "meca500_programming_manual_7076", "text": ": Commands that are placed in the motion queue, rather than executed\nimmediately. All motion commands are queued commands, as well as some external-tool\ncommands.", "source": "meca500_programming_manual", "chunk_index": 7076, "length": 162, "hash": "82c8506eefc6dd80797bdee15607f453"}
{"id": "meca500_programming_manual_7077", "text": "reach: The maximum distance between the axis of joint 1 and the center of the robot\u2019s wrist.", "source": "meca500_programming_manual", "chunk_index": 7077, "length": 92, "hash": "38e49a41f4f7917b78e5236c8eb89e7e"}
{"id": "meca500_programming_manual_7078", "text": ": The maximum distance between the axis of joint 1 and the center of the robot\u2019s wrist.", "source": "meca500_programming_manual", "chunk_index": 7078, "length": 87, "hash": "f1b7ba78fe637c60f151062d801ed04a"}
{"id": "meca500_programming_manual_7079", "text": "real-time data request commands: Commands used to request some real-time data\nregarding the current status of robot (e.g., GetRtTrf (page 286), GetRtCartPos (page 272),\nGetStatusRobot (page 290)).", "source": "meca500_programming_manual", "chunk_index": 7079, "length": 196, "hash": "8ce92abeea040f935f8c8b7240592f68"}
{"id": "meca500_programming_manual_7080", "text": "real-time data request commands", "source": "meca500_programming_manual", "chunk_index": 7080, "length": 31, "hash": "4f75e7b3ce56efd38db92f8a466049e1"}
{"id": "meca500_programming_manual_7081", "text": ": Commands used to request some real-time data\nregarding the current status of robot (e.g.,", "source": "meca500_programming_manual", "chunk_index": 7081, "length": 91, "hash": "96f6de1591ea367d01ed5a8d65857d47"}
{"id": "meca500_programming_manual_7082", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 7082, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_7083", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 7083, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_7084", "text": "robot control commands: Commands used to immediately control the robot, (e.g.,\nActivateRobot (page 184), PauseMotion (page 195), SetNetworkOptions (page 206)). These\ncommands are executed immediately, i.e., are instantaneous.", "source": "meca500_programming_manual", "chunk_index": 7084, "length": 225, "hash": "5bf3086ee407e13ccedf92509739b6f1"}
{"id": "meca500_programming_manual_7085", "text": "robot control commands", "source": "meca500_programming_manual", "chunk_index": 7085, "length": 22, "hash": "76125ada5f59cf4007423506c75d1afe"}
{"id": "meca500_programming_manual_7086", "text": ": Commands used to immediately control the robot, (e.g.,", "source": "meca500_programming_manual", "chunk_index": 7086, "length": 56, "hash": "b38467c2e3101f7d1d1d906445ceec5f"}
{"id": "meca500_programming_manual_7087", "text": "(page 206)). These\ncommands are executed immediately, i.e., are instantaneous.", "source": "meca500_programming_manual", "chunk_index": 7087, "length": 78, "hash": "d0a3178bc95d377d9ac2b6ec3a87e6eb"}
{"id": "meca500_programming_manual_7088", "text": "robot is ready for motion: The robot is considered ready to receive motion commands, i.e.\nwhen it is activated and homed, or alternatively when Recovery mode (page 24) is enabled\nwhile the robot is activated but not homed.", "source": "meca500_programming_manual", "chunk_index": 7088, "length": 222, "hash": "99d46424f055615e7d82c9316b7a6a80"}
{"id": "meca500_programming_manual_7089", "text": "robot is ready for motion", "source": "meca500_programming_manual", "chunk_index": 7089, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "meca500_programming_manual_7090", "text": ": The robot is considered", "source": "meca500_programming_manual", "chunk_index": 7090, "length": 25, "hash": "3b9a82105b3ba90ec73312a09a0d63a3"}
{"id": "meca500_programming_manual_7091", "text": "to receive motion commands, i.e.\nwhen it is activated and homed, or alternatively when", "source": "meca500_programming_manual", "chunk_index": 7091, "length": 86, "hash": "08d789120d5b2ea13ddbe8ac7f2c0d62"}
{"id": "meca500_programming_manual_7092", "text": "(page 24) is enabled\nwhile the robot is activated but not homed.", "source": "meca500_programming_manual", "chunk_index": 7092, "length": 64, "hash": "0aa97209a0cee631001935bd8ba2d25d"}
{"id": "meca500_programming_manual_7093", "text": "Note that if the robot is in error or if a safety stop condition is present, it will refuse motion\ncommands, but it will still be considered ready since its motion queue remains initialized and\nretains the latest received settings (e.q., velocity, acceleration, blending, WRF, TRF, etc.).", "source": "meca500_programming_manual", "chunk_index": 7093, "length": 288, "hash": "2edcb27ccce1cc367242ea6d509fde67"}
{"id": "meca500_programming_manual_7094", "text": "Note that if the robot is in error or if a safety stop condition is present, it will refuse motion\ncommands, but it will still be considered", "source": "meca500_programming_manual", "chunk_index": 7094, "length": 140, "hash": "667f23791f0f087f85c73c46ab55b5c8"}
{"id": "meca500_programming_manual_7095", "text": "since its motion queue remains initialized and\nretains the latest received settings (e.q., velocity, acceleration, blending, WRF, TRF, etc.).", "source": "meca500_programming_manual", "chunk_index": 7095, "length": 141, "hash": "cd6e1dee3b7b1e1e29d16248835951d6"}
{"id": "meca500_programming_manual_7096", "text": "robot log: This file is a more detailed version of the user log, intended primarily for our\nsupport team. It can be downloaded from the MecaPortal (see Section 9 of the Programming\nManual).", "source": "meca500_programming_manual", "chunk_index": 7096, "length": 189, "hash": "6307d321440e3f23f286e3d6f920ea38"}
{"id": "meca500_programming_manual_7097", "text": ": This file is a more detailed version of the user log, intended primarily for our\nsupport team. It can be downloaded from the MecaPortal (see Section 9 of the Programming\nManual).", "source": "meca500_programming_manual", "chunk_index": 7097, "length": 180, "hash": "08b5fe9e8dbbadba16b7144812c0a60c"}
{"id": "meca500_programming_manual_7098", "text": "robot position: A robot position is equivalent to either a joint set or the pose of the TRF\nrelative to the WRF, along with the definitions of both reference frames, and the robot posture\nand last joint turn configuration parameters.", "source": "meca500_programming_manual", "chunk_index": 7098, "length": 233, "hash": "8d7d8a09fac9c17d6cbb9c7500c2c3e9"}
{"id": "meca500_programming_manual_7099", "text": ": A robot position is equivalent to either a joint set or the pose of the TRF", "source": "meca500_programming_manual", "chunk_index": 7099, "length": 77, "hash": "5d9dbf17d8f6c91982f08efa93e5e4a6"}
{"id": "meca500_programming_manual_7100", "text": "relative to the WRF, along with the definitions of both reference frames, and the robot posture\nand last joint turn configuration parameters.", "source": "meca500_programming_manual", "chunk_index": 7100, "length": 141, "hash": "4c454e28a6161090d6a997431589599f"}
{"id": "meca500_programming_manual_7101", "text": "robot posture: The arrangement of the robot links. Equivalent to a joint set in which all joint\nangles are normalized, i.e. have been converted to the range (\u2212180\u00b0, 180\u00b0].", "source": "meca500_programming_manual", "chunk_index": 7101, "length": 171, "hash": "c694d875e23ca9992df0b3e07174d69a"}
{"id": "meca500_programming_manual_7102", "text": ": The arrangement of the robot links. Equivalent to a joint set in which all joint\nangles are normalized, i.e. have been converted to the range (\u2212180\u00b0, 180\u00b0].", "source": "meca500_programming_manual", "chunk_index": 7102, "length": 158, "hash": "d8b288b678b41787832b153a55ced322"}
{"id": "meca500_programming_manual_7103", "text": "SDO (Service Data Object): In EtherCAT, a Service Data Object (SDO) is a data structure\nused for non-real-time communication between an EtherCAT master and its slave devices.\nSDOs are typically used to configure device parameters and access diagnostic information\nthrough the object dictionary. Unlike PDOs, SDOs exchange structured data rather than\nindividual bits or bytes.", "source": "meca500_programming_manual", "chunk_index": 7103, "length": 375, "hash": "dc2d94cb46997c649e44772292b5b2b8"}
{"id": "meca500_programming_manual_7104", "text": "): In EtherCAT, a Service Data Object (SDO) is a data structure\nused for non-real-time communication between an EtherCAT master and its slave devices.\nSDOs are typically used to configure device parameters and access diagnostic information\nthrough the object dictionary. Unlike PDOs, SDOs exchange structured data rather than\nindividual bits or bytes.", "source": "meca500_programming_manual", "chunk_index": 7104, "length": 351, "hash": "6976cac4b6f3523f13b8df9c1d8fb746"}
{"id": "meca500_programming_manual_7105", "text": "singularities: A robot posture where the robot\u2019s end-effector is blocked in some directions\neven if no joint is at a limit (see Section 3 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7105, "length": 165, "hash": "43bc193713c8200ef91698e32759a382"}
{"id": "meca500_programming_manual_7106", "text": ": A robot posture where the robot\u2019s end-effector is blocked in some directions\neven if no joint is at a limit (see Section 3 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7106, "length": 152, "hash": "91e0a59054689e83b27ac35e0bc12d77"}
{"id": "meca500_programming_manual_7107", "text": "TCP: Tool Center Point. The origin of the TRF. Not to be confused with Transmission Control\nProtocol.", "source": "meca500_programming_manual", "chunk_index": 7107, "length": 101, "hash": "66c99d27e0bd62162e77e6285ebd0112"}
{"id": "meca500_programming_manual_7108", "text": ": Tool Center Point. The origin of the TRF. Not to be confused with Transmission Control\nProtocol.", "source": "meca500_programming_manual", "chunk_index": 7108, "length": 98, "hash": "30495b2ab3611df30b4502a173d3478b"}
{"id": "meca500_programming_manual_7109", "text": "TRF: Tool reference frame.", "source": "meca500_programming_manual", "chunk_index": 7109, "length": 26, "hash": "d3e838be639192c97d8abfcf46330a8e"}
{"id": "meca500_programming_manual_7110", "text": ": Tool reference frame.", "source": "meca500_programming_manual", "chunk_index": 7110, "length": 23, "hash": "791711246663216971670129b53a0c39"}
{"id": "meca500_programming_manual_7111", "text": "turn configuration parameter: Since the last joint of the robot can rotate multiple\nrevolutions, the turn configuration parameter defines the revolution number.", "source": "meca500_programming_manual", "chunk_index": 7111, "length": 160, "hash": "17f7d705d88fc134816a485ef1440675"}
{"id": "meca500_programming_manual_7112", "text": "turn configuration parameter", "source": "meca500_programming_manual", "chunk_index": 7112, "length": 28, "hash": "a30bb88e7239bd8dafc0dae4dbaebbd5"}
{"id": "meca500_programming_manual_7113", "text": ": Since the last joint of the robot can rotate multiple", "source": "meca500_programming_manual", "chunk_index": 7113, "length": 55, "hash": "0606b1b6b47a735075e441af360657fe"}
{"id": "meca500_programming_manual_7114", "text": "revolutions, the turn configuration parameter defines the revolution number.", "source": "meca500_programming_manual", "chunk_index": 7114, "length": 76, "hash": "1a5aadd397f5e5137a9da5769472e8e7"}
{"id": "meca500_programming_manual_7115", "text": "user log: This file is a simplified log containing user-friendly traces of major events (e.g.,\nrobot activation, movement, E-Stop activation). It can be downloaded from the MecaPortal\n(see Section 9 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7115, "length": 226, "hash": "ece342f254cd94eb028b653080fce7c2"}
{"id": "meca500_programming_manual_7116", "text": ": This file is a simplified log containing user-friendly traces of major events (e.g.,\nrobot activation, movement, E-Stop activation). It can be downloaded from the MecaPortal\n(see Section 9 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7116, "length": 218, "hash": "08633f7f78ea101ffe1ed8732077e33a"}
{"id": "meca500_programming_manual_7117", "text": "velocity mode: One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target joint velocity vector or end-effector Cartesian velocity vector (see Section\n3 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7117, "length": 215, "hash": "e8d4dea1bbf7a9f8bfa065fd75698934"}
{"id": "meca500_programming_manual_7118", "text": ": One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target joint velocity vector or end-effector Cartesian velocity vector (see Section\n3 of the Programming Manual).", "source": "meca500_programming_manual", "chunk_index": 7118, "length": 202, "hash": "558d410453f312dc40a8844fba9743a8"}
{"id": "meca500_programming_manual_7119", "text": "workspace: The Cartesian workspace of a robot is the set of all feasible poses of its TRF with\nrespect to its WRF. Note that many of these poses can be attained with more than one set of\nconfiguration parameters.", "source": "meca500_programming_manual", "chunk_index": 7119, "length": 212, "hash": "9552d8f1f9ec20199dd0167627940101"}
{"id": "meca500_programming_manual_7120", "text": ": The Cartesian workspace of a robot is the set of all feasible poses of its TRF with\nrespect to its WRF. Note that many of these poses can be attained with more than one set of\nconfiguration parameters.", "source": "meca500_programming_manual", "chunk_index": 7120, "length": 203, "hash": "65e6209fc17172f386715b457c51642c"}
{"id": "meca500_programming_manual_7121", "text": "WRF: World reference frame.", "source": "meca500_programming_manual", "chunk_index": 7121, "length": 27, "hash": "d29373141098afff1785160ad15be0a4"}
{"id": "meca500_programming_manual_7122", "text": ": World reference frame.", "source": "meca500_programming_manual", "chunk_index": 7122, "length": 24, "hash": "9c5b8d51f5ff77b38ef52415eb90c06d"}
{"id": "meca500_programming_manual_7123", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 7123, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_7124", "text": "MC-PM-MECA500, Revision number: 11.1.43", "source": "meca500_programming_manual", "chunk_index": 7124, "length": 39, "hash": "fd56b44fe60309acc3278cdb8761e84f"}
{"id": "meca500_programming_manual_7125", "text": "wrist center: the point where the axes of joints 4, 5, and 6 intersect.", "source": "meca500_programming_manual", "chunk_index": 7125, "length": 71, "hash": "856cd63d50744d55bdc0c74ae4264156"}
{"id": "meca500_programming_manual_7126", "text": ": the point where the axes of joints 4, 5, and 6 intersect.", "source": "meca500_programming_manual", "chunk_index": 7126, "length": 59, "hash": "b956ad2f0cacc4869054b6083c4e2bfd"}
{"id": "meca500_programming_manual_7127", "text": "Page: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362", "source": "meca500_programming_manual", "chunk_index": 7127, "length": 1706, "hash": "2ef4f84fec9dc4db995f52d5079c91e0"}
