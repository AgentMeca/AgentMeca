{"id": "mcs500_programming_manual_0", "text": "Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 0, "length": 24, "hash": "3e1ee01cb6ad224929fbe4d58fe60135"}
{"id": "mcs500_programming_manual_1", "text": "Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1, "length": 24, "hash": "3e1ee01cb6ad224929fbe4d58fe60135"}
{"id": "mcs500_programming_manual_2", "text": "1 Programming Manual for the MCS500 Industrial Robot", "source": "mcs500_programming_manual", "chunk_index": 2, "length": 52, "hash": "73e8e770b35c39d3d7fe899864ae207a"}
{"id": "mcs500_programming_manual_3", "text": "1 Programming Manual for the MCS500 Industrial Robot", "source": "mcs500_programming_manual", "chunk_index": 3, "length": 52, "hash": "73e8e770b35c39d3d7fe899864ae207a"}
{"id": "mcs500_programming_manual_4", "text": "3 Basic theory and definitions", "source": "mcs500_programming_manual", "chunk_index": 4, "length": 30, "hash": "b3a9fe00857dcc34eeddc795e7020c16"}
{"id": "mcs500_programming_manual_5", "text": "3 Basic theory and definitions", "source": "mcs500_programming_manual", "chunk_index": 5, "length": 30, "hash": "b3a9fe00857dcc34eeddc795e7020c16"}
{"id": "mcs500_programming_manual_6", "text": "4 TCP/IP communication", "source": "mcs500_programming_manual", "chunk_index": 6, "length": 22, "hash": "4a85daa19035fdbbf7d00faeeb2031cc"}
{"id": "mcs500_programming_manual_7", "text": "4 TCP/IP communication", "source": "mcs500_programming_manual", "chunk_index": 7, "length": 22, "hash": "4a85daa19035fdbbf7d00faeeb2031cc"}
{"id": "mcs500_programming_manual_8", "text": "5 Communicating over cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 8, "length": 37, "hash": "013cacd99876a9473d2883a03c3f58c8"}
{"id": "mcs500_programming_manual_9", "text": "5 Communicating over cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 9, "length": 37, "hash": "013cacd99876a9473d2883a03c3f58c8"}
{"id": "mcs500_programming_manual_10", "text": "6 EtherCAT communication", "source": "mcs500_programming_manual", "chunk_index": 10, "length": 24, "hash": "771ba5cc59f954bcf960c428e45641e2"}
{"id": "mcs500_programming_manual_11", "text": "6 EtherCAT communication", "source": "mcs500_programming_manual", "chunk_index": 11, "length": 24, "hash": "771ba5cc59f954bcf960c428e45641e2"}
{"id": "mcs500_programming_manual_12", "text": "7 EtherNet/IP communication", "source": "mcs500_programming_manual", "chunk_index": 12, "length": 27, "hash": "d3e3c2ec57df40c39084c95e41704308"}
{"id": "mcs500_programming_manual_13", "text": "7 EtherNet/IP communication", "source": "mcs500_programming_manual", "chunk_index": 13, "length": 27, "hash": "d3e3c2ec57df40c39084c95e41704308"}
{"id": "mcs500_programming_manual_14", "text": "8 PROFINET communication", "source": "mcs500_programming_manual", "chunk_index": 14, "length": 24, "hash": "7fa237f6d37d1c5dc5808b9eb18afba4"}
{"id": "mcs500_programming_manual_15", "text": "8 PROFINET communication", "source": "mcs500_programming_manual", "chunk_index": 15, "length": 24, "hash": "7fa237f6d37d1c5dc5808b9eb18afba4"}
{"id": "mcs500_programming_manual_16", "text": "11 Robot control commands", "source": "mcs500_programming_manual", "chunk_index": 16, "length": 25, "hash": "ec4ecf4464766758ec898ffe0ec69ad4"}
{"id": "mcs500_programming_manual_17", "text": "11 Robot control commands", "source": "mcs500_programming_manual", "chunk_index": 17, "length": 25, "hash": "ec4ecf4464766758ec898ffe0ec69ad4"}
{"id": "mcs500_programming_manual_18", "text": "12 Data request commands", "source": "mcs500_programming_manual", "chunk_index": 18, "length": 24, "hash": "48ad678c1eb112af65db33fad55ca99a"}
{"id": "mcs500_programming_manual_19", "text": "12 Data request commands", "source": "mcs500_programming_manual", "chunk_index": 19, "length": 24, "hash": "48ad678c1eb112af65db33fad55ca99a"}
{"id": "mcs500_programming_manual_20", "text": "13 Real-time data request commands", "source": "mcs500_programming_manual", "chunk_index": 20, "length": 34, "hash": "aea0f48f0a5e6aaf36f22e4dcb5ad209"}
{"id": "mcs500_programming_manual_21", "text": "13 Real-time data request commands", "source": "mcs500_programming_manual", "chunk_index": 21, "length": 34, "hash": "aea0f48f0a5e6aaf36f22e4dcb5ad209"}
{"id": "mcs500_programming_manual_22", "text": "14Work zone supervision and collision prevention commands", "source": "mcs500_programming_manual", "chunk_index": 22, "length": 57, "hash": "d9e11f698c0fb8a7dc9ae3f4d46225c3"}
{"id": "mcs500_programming_manual_23", "text": "14Work zone supervision and collision prevention commands", "source": "mcs500_programming_manual", "chunk_index": 23, "length": 57, "hash": "d9e11f698c0fb8a7dc9ae3f4d46225c3"}
{"id": "mcs500_programming_manual_24", "text": "15 Commands for optional accessories", "source": "mcs500_programming_manual", "chunk_index": 24, "length": 36, "hash": "026b0bf29dfe1ab4fca388904a4e7d78"}
{"id": "mcs500_programming_manual_25", "text": "15 Commands for optional accessories", "source": "mcs500_programming_manual", "chunk_index": 25, "length": 36, "hash": "026b0bf29dfe1ab4fca388904a4e7d78"}
{"id": "mcs500_programming_manual_26", "text": "16 Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 26, "length": 41, "hash": "d624bdfef7c8737188756779937e0934"}
{"id": "mcs500_programming_manual_27", "text": "16 Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 27, "length": 41, "hash": "d624bdfef7c8737188756779937e0934"}
{"id": "mcs500_programming_manual_28", "text": "Programming Manual for the MCS500\nIndustrial Robot", "source": "mcs500_programming_manual", "chunk_index": 28, "length": 50, "hash": "26fe9fdea39766950ce500243f824d53"}
{"id": "mcs500_programming_manual_29", "text": "Programming Manual for the MCS500\nIndustrial Robot", "source": "mcs500_programming_manual", "chunk_index": 29, "length": 50, "hash": "26fe9fdea39766950ce500243f824d53"}
{"id": "mcs500_programming_manual_30", "text": "For firmware version: 11.1", "source": "mcs500_programming_manual", "chunk_index": 30, "length": 26, "hash": "8c70d92066cce009a3518e69870faf67"}
{"id": "mcs500_programming_manual_31", "text": "For firmware version:", "source": "mcs500_programming_manual", "chunk_index": 31, "length": 21, "hash": "e8e8c3f76e46f705b65684a15d80aaee"}
{"id": "mcs500_programming_manual_32", "text": "Document revision: B", "source": "mcs500_programming_manual", "chunk_index": 32, "length": 20, "hash": "d5adb606f8281c0cdde16793570f795f"}
{"id": "mcs500_programming_manual_33", "text": "Online release date: July 17, 2025", "source": "mcs500_programming_manual", "chunk_index": 33, "length": 34, "hash": "91129f7decb78b3504e16dd523d76c63"}
{"id": "mcs500_programming_manual_34", "text": "Online release date:", "source": "mcs500_programming_manual", "chunk_index": 34, "length": 20, "hash": "fc004596958ea3293160974dd18771d9"}
{"id": "mcs500_programming_manual_35", "text": "Document ID: MC-PM-MCS500", "source": "mcs500_programming_manual", "chunk_index": 35, "length": 25, "hash": "46cb6ad9a20651b001876fc1a6c5a170"}
{"id": "mcs500_programming_manual_36", "text": "The information contained herein is the property of Mecademic Inc.\nand shall not be\nreproduced in whole or in part without prior written approval of Mecademic Inc. The\ninformation herein is subject to change without notice and should not be construed as a\ncommitment by Mecademic Inc. This manual will be periodically reviewed and revised.", "source": "mcs500_programming_manual", "chunk_index": 36, "length": 339, "hash": "eeb14c23f65df920fcc954f0a8f56265"}
{"id": "mcs500_programming_manual_37", "text": "The information contained herein is the property of Mecademic Inc.\nand shall not be\nreproduced in whole or in part without prior written approval of Mecademic Inc. The\ninformation herein is subject to change without notice and should not be construed as a\ncommitment by Mecademic Inc. This manual will be periodically reviewed and revised.", "source": "mcs500_programming_manual", "chunk_index": 37, "length": 339, "hash": "eeb14c23f65df920fcc954f0a8f56265"}
{"id": "mcs500_programming_manual_38", "text": "Mecademic Inc. assumes no responsibility for any errors or omissions in this document.", "source": "mcs500_programming_manual", "chunk_index": 38, "length": 86, "hash": "675a09e90bcea6c374de1e99d63fd0b9"}
{"id": "mcs500_programming_manual_39", "text": "Mecademic Inc. assumes no responsibility for any errors or omissions in this document.", "source": "mcs500_programming_manual", "chunk_index": 39, "length": 86, "hash": "675a09e90bcea6c374de1e99d63fd0b9"}
{"id": "mcs500_programming_manual_40", "text": "\u00a9 Copyright 2025, Mecademic Inc.", "source": "mcs500_programming_manual", "chunk_index": 40, "length": 32, "hash": "4454ec9905accd633601b68418c5c719"}
{"id": "mcs500_programming_manual_41", "text": "\u00a9 Copyright 2025, Mecademic Inc.", "source": "mcs500_programming_manual", "chunk_index": 41, "length": 32, "hash": "4454ec9905accd633601b68418c5c719"}
{"id": "mcs500_programming_manual_42", "text": "This manual describes the key concepts for industrial robots and the communication methods\nused with our robots through an Ethernet-enabled computing device (IPC, PLC, PC, Mac,\nRaspberry Pi, etc.): using either TCP/IP, EtherCAT, EtherNet/IP, or PROFINET protocols. To\nmaximize flexibility, we do not use a proprietary programming language. Instead, we provide\na set of robot-related instructions, an API, making it possible to use any modern programming\nlanguage that can run on your computing device.", "source": "mcs500_programming_manual", "chunk_index": 42, "length": 501, "hash": "9258476771ef72f374964665a3b3530e"}
{"id": "mcs500_programming_manual_43", "text": "This manual describes the key concepts for industrial robots and the communication methods\nused with our robots through an Ethernet-enabled computing device (IPC, PLC, PC, Mac,\nRaspberry Pi, etc.): using either TCP/IP, EtherCAT, EtherNet/IP, or PROFINET protocols. To\nmaximize flexibility, we do not use a proprietary programming language. Instead, we provide\na set of robot-related instructions, an API, making it possible to use any modern programming\nlanguage that can run on your computing device.", "source": "mcs500_programming_manual", "chunk_index": 43, "length": 501, "hash": "9258476771ef72f374964665a3b3530e"}
{"id": "mcs500_programming_manual_44", "text": "The default communication protocol for Mecademic robots is TCP/IP; it consists of a set of\ntext-based motion and request commands sent to and returned by the robot. Additional\ncyclic communication protocols (EtherCAT, EtherNet/IP, and PROFINET) are also available\nand described in this manual. However, even if you do not intend to use the TCP/IP protocol,\nit is necessary to read the chapter that describes its text-based commands.", "source": "mcs500_programming_manual", "chunk_index": 44, "length": 432, "hash": "4681af3a3f2c5b7ca550816b817f22de"}
{"id": "mcs500_programming_manual_45", "text": "The default communication protocol for Mecademic robots is TCP/IP; it consists of a set of\ntext-based motion and request commands sent to and returned by the robot. Additional\ncyclic communication protocols (EtherCAT, EtherNet/IP, and PROFINET) are also available\nand described in this manual. However, even if you do not intend to use the TCP/IP protocol,", "source": "mcs500_programming_manual", "chunk_index": 45, "length": 356, "hash": "ac61c6272c9d16e28f82a81813ef252a"}
{"id": "mcs500_programming_manual_46", "text": "it is necessary to read the chapter that describes its text-based commands.", "source": "mcs500_programming_manual", "chunk_index": 46, "length": 75, "hash": "417a2d7086ffa445fef965b97b4c3154"}
{"id": "mcs500_programming_manual_47", "text": "Furthermore, we offer a fully-fledged Python API, available from our GitHub account. That\nAPI is self-documented, but you still need to read the present programming manual.", "source": "mcs500_programming_manual", "chunk_index": 47, "length": 172, "hash": "d2d6166ab53051055c96b774c3d148bc"}
{"id": "mcs500_programming_manual_48", "text": "Furthermore, we offer a fully-fledged Python API, available from our GitHub account. That\nAPI is self-documented, but you still need to read the present programming manual.", "source": "mcs500_programming_manual", "chunk_index": 48, "length": 172, "hash": "d2d6166ab53051055c96b774c3d148bc"}
{"id": "mcs500_programming_manual_49", "text": "Reading the user manual of your robot (MC-UM-MCS500) and understanding the robot\u2019s\noperating principles is a prerequisite to reading this programming manual.", "source": "mcs500_programming_manual", "chunk_index": 49, "length": 157, "hash": "c822234d064391ad477118760c1337ef"}
{"id": "mcs500_programming_manual_50", "text": "Reading the user manual of your robot (MC-UM-MCS500) and understanding the robot\u2019s\noperating principles is a prerequisite to reading this programming manual.", "source": "mcs500_programming_manual", "chunk_index": 50, "length": 157, "hash": "c822234d064391ad477118760c1337ef"}
{"id": "mcs500_programming_manual_51", "text": "For\nAll of our robot models are programmed similarly, with only minor differences.\ninstance, certain commands and messages are specific to particular models and their optional\naccessories. To streamline your experience, this programming manual has been tailored\nspecifically for the MCS500 robot and its accessories.", "source": "mcs500_programming_manual", "chunk_index": 51, "length": 316, "hash": "dded8bd14dbfe47ff24e90e4bdddf5cd"}
{"id": "mcs500_programming_manual_52", "text": "For\nAll of our robot models are programmed similarly, with only minor differences.\ninstance, certain commands and messages are specific to particular models and their optional\naccessories. To streamline your experience, this programming manual has been tailored\nspecifically for the MCS500 robot and its accessories.", "source": "mcs500_programming_manual", "chunk_index": 52, "length": 316, "hash": "dded8bd14dbfe47ff24e90e4bdddf5cd"}
{"id": "mcs500_programming_manual_53", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 53, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_54", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 54, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_55", "text": "The following table lists the symbols that may be used in Mecademic documents to denote\ncertain conditions. Particular attention must be paid to the warning and danger messages in\nthis manual.", "source": "mcs500_programming_manual", "chunk_index": 55, "length": 192, "hash": "0973feaa29e681e2fe68673684a51ffb"}
{"id": "mcs500_programming_manual_56", "text": "The following table lists the symbols that may be used in Mecademic documents to denote\ncertain conditions. Particular attention must be paid to the warning and danger messages in\nthis manual.", "source": "mcs500_programming_manual", "chunk_index": 56, "length": 192, "hash": "0973feaa29e681e2fe68673684a51ffb"}
{"id": "mcs500_programming_manual_57", "text": "Identifies information that requires special consideration.", "source": "mcs500_programming_manual", "chunk_index": 57, "length": 59, "hash": "a5b45361b036c8a0f7ffc23277ddb253"}
{"id": "mcs500_programming_manual_58", "text": "Identifies information that requires special consideration.", "source": "mcs500_programming_manual", "chunk_index": 58, "length": 59, "hash": "a5b45361b036c8a0f7ffc23277ddb253"}
{"id": "mcs500_programming_manual_59", "text": "Provides indications that must be respected in order to avoid equipment or work (data) on\nthe system being damaged or lost.", "source": "mcs500_programming_manual", "chunk_index": 59, "length": 123, "hash": "d113d381a4a86307a8206f113a7474a6"}
{"id": "mcs500_programming_manual_60", "text": "Provides indications that must be respected in order to avoid equipment or work (data) on", "source": "mcs500_programming_manual", "chunk_index": 60, "length": 89, "hash": "99c6313e8154ca91599348a8dff0723d"}
{"id": "mcs500_programming_manual_61", "text": "the system being damaged or lost.", "source": "mcs500_programming_manual", "chunk_index": 61, "length": 33, "hash": "27af36328c1f2ea913d8854d934c397c"}
{"id": "mcs500_programming_manual_62", "text": "Provides indications that must be respected in order to avoid a potentially hazardous\nsituation, which could result in injury.", "source": "mcs500_programming_manual", "chunk_index": 62, "length": 126, "hash": "93ed603b5dcb402ebc3036659e14671b"}
{"id": "mcs500_programming_manual_63", "text": "Provides indications that must be respected in order to avoid a potentially hazardous\nsituation, which could result in injury.", "source": "mcs500_programming_manual", "chunk_index": 63, "length": 126, "hash": "93ed603b5dcb402ebc3036659e14671b"}
{"id": "mcs500_programming_manual_64", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 64, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_65", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 65, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_66", "text": "The firmware that is installed on Mecademic products has the following numbering\nconvention:", "source": "mcs500_programming_manual", "chunk_index": 66, "length": 92, "hash": "24a5c198605e4ba3e16719e105ab0725"}
{"id": "mcs500_programming_manual_67", "text": "The firmware that is installed on Mecademic products has the following numbering\nconvention:", "source": "mcs500_programming_manual", "chunk_index": 67, "length": 92, "hash": "24a5c198605e4ba3e16719e105ab0725"}
{"id": "mcs500_programming_manual_68", "text": "{major}.{minor}.{patch}.{build}", "source": "mcs500_programming_manual", "chunk_index": 68, "length": 31, "hash": "27b339360b1f079ddfe4477ee5b0ca81"}
{"id": "mcs500_programming_manual_69", "text": "{major}.{minor}.{patch}.{build}", "source": "mcs500_programming_manual", "chunk_index": 69, "length": 31, "hash": "27b339360b1f079ddfe4477ee5b0ca81"}
{"id": "mcs500_programming_manual_70", "text": "Each Mecademic manual is written for a specific {major}.{minor}.{*}.{*} firmware version.\nOn a regular basis, we revise each manual, adding further information and improving certain\nexplanations. We only provide the latest revision for each {major}.{minor}.{*}.{*} firmware\nversion. Below is a summary of the changes made in each revision.", "source": "mcs500_programming_manual", "chunk_index": 70, "length": 339, "hash": "b271f7bc8c4061cc4962bdcf7d043186"}
{"id": "mcs500_programming_manual_71", "text": "Each Mecademic manual is written for a specific {major}.{minor}.{*}.{*} firmware version.\nOn a regular basis, we revise each manual, adding further information and improving certain\nexplanations. We only provide the latest revision for each {major}.{minor}.{*}.{*} firmware\nversion. Below is a summary of the changes made in each revision.", "source": "mcs500_programming_manual", "chunk_index": 71, "length": 339, "hash": "b271f7bc8c4061cc4962bdcf7d043186"}
{"id": "mcs500_programming_manual_72", "text": "Substantial revision of Sections 3 and 4.", "source": "mcs500_programming_manual", "chunk_index": 72, "length": 41, "hash": "ebd037876773b4b34834f3e52b1c188d"}
{"id": "mcs500_programming_manual_73", "text": "Substantial revision of Sections 3 and 4.", "source": "mcs500_programming_manual", "chunk_index": 73, "length": 41, "hash": "ebd037876773b4b34834f3e52b1c188d"}
{"id": "mcs500_programming_manual_74", "text": "Addition of Cyclic protocols subsection to every API\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 74, "length": 61, "hash": "04b11204d87204c17b3a64beaddb6ed0"}
{"id": "mcs500_programming_manual_75", "text": "subsection to every API\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 75, "length": 32, "hash": "2a9c73f15d07bd922356bb2cffdcdaf7"}
{"id": "mcs500_programming_manual_76", "text": "The document ID for each Mecademic manual in a particular language is the same, regardless\nof the firmware version and the revision number.", "source": "mcs500_programming_manual", "chunk_index": 76, "length": 139, "hash": "888e4855158ebd7c79e2c094a426b0a3"}
{"id": "mcs500_programming_manual_77", "text": "The document ID for each Mecademic manual in a particular language is the same, regardless\nof the firmware version and the revision number.", "source": "mcs500_programming_manual", "chunk_index": 77, "length": 139, "hash": "888e4855158ebd7c79e2c094a426b0a3"}
{"id": "mcs500_programming_manual_78", "text": "Basic theory and definitions", "source": "mcs500_programming_manual", "chunk_index": 78, "length": 28, "hash": "f64a6c28bcf45309829ae91f1cb3a9da"}
{"id": "mcs500_programming_manual_79", "text": "Basic theory and definitions", "source": "mcs500_programming_manual", "chunk_index": 79, "length": 28, "hash": "f64a6c28bcf45309829ae91f1cb3a9da"}
{"id": "mcs500_programming_manual_80", "text": "We place a high value on technical accuracy, detail, and consistency, and use terminology\nthat may not always align with standard industry terms. Therefore, it is important to read\nthis section carefully, even if you have prior experience with industrial robot arms.", "source": "mcs500_programming_manual", "chunk_index": 80, "length": 266, "hash": "fcc5dbdc93e9d7028bc91dc2cf88ec92"}
{"id": "mcs500_programming_manual_81", "text": "We place a high value on technical accuracy, detail, and consistency, and use terminology\nthat may not always align with standard industry terms. Therefore, it is important to read\nthis section carefully, even if you have prior experience with industrial robot arms.", "source": "mcs500_programming_manual", "chunk_index": 81, "length": 266, "hash": "fcc5dbdc93e9d7028bc91dc2cf88ec92"}
{"id": "mcs500_programming_manual_82", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 82, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_83", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 83, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_84", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 84, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_85", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 85, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_86", "text": "Distances that are displaced to or defined by the user are in millimeters (mm), angles are in\ndegrees (\u00b0) and time is in seconds (s), except for timestamps.", "source": "mcs500_programming_manual", "chunk_index": 86, "length": 156, "hash": "21aa172e7484db2c4c14f397019b9602"}
{"id": "mcs500_programming_manual_87", "text": "Distances that are displaced to or defined by the user are in millimeters (mm), angles are in\ndegrees (\u00b0) and time is in seconds (s), except for timestamps.", "source": "mcs500_programming_manual", "chunk_index": 87, "length": 156, "hash": "21aa172e7484db2c4c14f397019b9602"}
{"id": "mcs500_programming_manual_88", "text": "The joints of the MCS500 are also numbered in ascending order, starting from the base, but\nthe last two \u201cjoints\u201d are actually independent degrees of freedom, a translation and a rotation,\nand are achieved by driving a ball nut and a spline nut about a ball-screw spline. Thus, the\ntranslational motion is arbitrarily designated as joint 3, while the rotation about the spline\nshaft axis is designated as joint 4. Figure 1 shows the joint numbering, the joint directions\nand the zero joint position in the MCS500 robot. In that \u201czero\u201d robot position, the axes of\njoints 1, 2, and 4 are coplanar and the spline shaft is all the way up.", "source": "mcs500_programming_manual", "chunk_index": 88, "length": 633, "hash": "4df1c6cc39a988e55ff9562847411d6b"}
{"id": "mcs500_programming_manual_89", "text": "The joints of the MCS500 are also numbered in ascending order, starting from the base, but\nthe last two \u201cjoints\u201d are actually independent degrees of freedom, a translation and a rotation,\nand are achieved by driving a ball nut and a spline nut about a ball-screw spline. Thus, the\ntranslational motion is arbitrarily designated as joint 3, while the rotation about the spline\nshaft axis is designated as joint 4. Figure 1 shows the joint numbering, the joint directions\nand the zero joint position in the MCS500 robot. In that \u201czero\u201d robot position, the axes of", "source": "mcs500_programming_manual", "chunk_index": 89, "length": 561, "hash": "31e5b352dd35efafccf2188ffa688718"}
{"id": "mcs500_programming_manual_90", "text": "joints 1, 2, and 4 are coplanar and the spline shaft is all the way up.", "source": "mcs500_programming_manual", "chunk_index": 90, "length": 71, "hash": "30c32059fbf799dbe5013a187b16a29f"}
{"id": "mcs500_programming_manual_91", "text": "Figure 1: MCS500\u2019s joint numbering, joint directions and zero joint positions", "source": "mcs500_programming_manual", "chunk_index": 91, "length": 77, "hash": "f350980637889b5aa12222a34d1b393d"}
{"id": "mcs500_programming_manual_92", "text": "Figure 1: MCS500\u2019s joint numbering, joint directions and zero joint positions", "source": "mcs500_programming_manual", "chunk_index": 92, "length": 77, "hash": "f350980637889b5aa12222a34d1b393d"}
{"id": "mcs500_programming_manual_93", "text": "We use right-handed Cartesian coordinate systems (reference frames). There are only four\nof them that you need to be familiar with, as shown in Figure 2 (x axes are red, y axes are\ngreen, and z axes are blue). These four reference frames and the key term related to them\nare:", "source": "mcs500_programming_manual", "chunk_index": 93, "length": 275, "hash": "ee9dc8d1cae2e5ecbb41d52d555aa04a"}
{"id": "mcs500_programming_manual_94", "text": "We use right-handed Cartesian coordinate systems (reference frames). There are only four\nof them that you need to be familiar with, as shown in Figure 2 (x axes are red, y axes are\ngreen, and z axes are blue). These four reference frames and the key term related to them\nare:", "source": "mcs500_programming_manual", "chunk_index": 94, "length": 275, "hash": "ee9dc8d1cae2e5ecbb41d52d555aa04a"}
{"id": "mcs500_programming_manual_95", "text": "\u2022 BRF (page 339): Base reference frame (page 339). Static reference frame fixed to the\nrobot base. Its z axis coincides with the axis of joint 1 and points upwards, its origin lies\non the bottom of the robot base, and its x axis is normal to the base front edge and points\nforward.", "source": "mcs500_programming_manual", "chunk_index": 95, "length": 281, "hash": "1660b38775037a022aff7d326db48be2"}
{"id": "mcs500_programming_manual_96", "text": "Base reference frame", "source": "mcs500_programming_manual", "chunk_index": 96, "length": 20, "hash": "a7b1a00f89b0b7504a502b92e8db969a"}
{"id": "mcs500_programming_manual_97", "text": "(page 339). Static reference frame fixed to the\nrobot base. Its z axis coincides with the axis of joint 1 and points upwards, its origin lies\non the bottom of the robot base, and its x axis is normal to the base front edge and points\nforward.", "source": "mcs500_programming_manual", "chunk_index": 97, "length": 242, "hash": "cfaf8b82909b59e34a4f3d3c13a42c4d"}
{"id": "mcs500_programming_manual_98", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 98, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_99", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 99, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_100", "text": "1\n\n2\n\n3\n\n4\n\n+\n+\n+\n+\n\u2212\n\u2212\n\u2212\n\u2212", "source": "mcs500_programming_manual", "chunk_index": 100, "length": 27, "hash": "bbc970cfc089c3d5168fdb02b0183c39"}
{"id": "mcs500_programming_manual_101", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 101, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_102", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 102, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_103", "text": "\u2022 WRF (page 341): World reference frame (page 341). The main static reference frame\ncoincides with the BRF by default. It can be defined with respect to the BRF using the\nSetWrf (page 168) command.", "source": "mcs500_programming_manual", "chunk_index": 103, "length": 197, "hash": "22c6fe0258ba8d40607890147df47d81"}
{"id": "mcs500_programming_manual_104", "text": "World reference frame", "source": "mcs500_programming_manual", "chunk_index": 104, "length": 21, "hash": "c8f896c1b02da97170862de0c8a578a5"}
{"id": "mcs500_programming_manual_105", "text": "(page 341). The main static reference frame\ncoincides with the BRF by default. It can be defined with respect to the BRF using the", "source": "mcs500_programming_manual", "chunk_index": 105, "length": 130, "hash": "b580ae9f74de5e01e71e7722630d1442"}
{"id": "mcs500_programming_manual_106", "text": "\u2022 FRF (page 339): Flange reference frame (page 339). Mobile reference frame fixed to\nthe robot\u2019s flange. The FRF is fixed to the end of the spline shaft that is closer to the\nrobot\u2019s base, so that its z axis coincides with the axis of the spline shaft and points away\nfrom the robot\u2019s base, its origin is at the very end of the spline shaft, and its x axis is\nperpendicular to the plane of the Weldon flat.", "source": "mcs500_programming_manual", "chunk_index": 106, "length": 406, "hash": "31fa5882f69b848d27c4b3e234b43872"}
{"id": "mcs500_programming_manual_107", "text": "Flange reference frame", "source": "mcs500_programming_manual", "chunk_index": 107, "length": 22, "hash": "044f9ddc58a1113c131296604ad45e08"}
{"id": "mcs500_programming_manual_108", "text": "(page 339). Mobile reference frame fixed to\nthe robot\u2019s flange. The FRF is fixed to the end of the spline shaft that is closer to the\nrobot\u2019s base, so that its z axis coincides with the axis of the spline shaft and points away\nfrom the robot\u2019s base, its origin is at the very end of the spline shaft, and its x axis is\nperpendicular to the plane of the Weldon flat.", "source": "mcs500_programming_manual", "chunk_index": 108, "length": 365, "hash": "d89fada689824cd3ebe72072b4e8d135"}
{"id": "mcs500_programming_manual_109", "text": "\u2022 FCP (page 339): Flange center point (page 339). Origin of the FRF.", "source": "mcs500_programming_manual", "chunk_index": 109, "length": 68, "hash": "94f9baa102a5148b2fabc32c234dd4a8"}
{"id": "mcs500_programming_manual_110", "text": "(page 339). Origin of the FRF.", "source": "mcs500_programming_manual", "chunk_index": 110, "length": 30, "hash": "613606922ca59f1c928125ca58fd7a30"}
{"id": "mcs500_programming_manual_111", "text": "\u2022 TRF (page 341): Tool reference frame (page 341).", "source": "mcs500_programming_manual", "chunk_index": 111, "length": 50, "hash": "0e03f4b078cfe8fb0dac249ab7883ffb"}
{"id": "mcs500_programming_manual_112", "text": "Tool reference frame", "source": "mcs500_programming_manual", "chunk_index": 112, "length": 20, "hash": "423b552d0adcf86e2facf5fd50e65ad1"}
{"id": "mcs500_programming_manual_113", "text": "The mobile reference frame\nassociated with the robot\u2019s end-effector. By default, the TRF coincides with the FRF.\nIt can be defined with respect to the FRF with the SetTrf (page 166) command.", "source": "mcs500_programming_manual", "chunk_index": 113, "length": 190, "hash": "54c824f93df20009f8b205f866e4eb7f"}
{"id": "mcs500_programming_manual_114", "text": "The mobile reference frame\nassociated with the robot\u2019s end-effector. By default, the TRF coincides with the FRF.\nIt can be defined with respect to the FRF with the", "source": "mcs500_programming_manual", "chunk_index": 114, "length": 163, "hash": "b35553b75158587bd3d99f181f1d2c12"}
{"id": "mcs500_programming_manual_115", "text": "\u2022 TCP (page 341): Tool center point (page 341). Origin of the TRF. (Not to be confused\nwith the Transmission Control Protocol acronym, which is also used in this document.)", "source": "mcs500_programming_manual", "chunk_index": 115, "length": 172, "hash": "b48f0cdfbed6d6c7199a0a1297fa4c4e"}
{"id": "mcs500_programming_manual_116", "text": "(page 341). Origin of the TRF. (Not to be confused", "source": "mcs500_programming_manual", "chunk_index": 116, "length": 50, "hash": "1fe95eff51072f8c5de14aeca31089b1"}
{"id": "mcs500_programming_manual_117", "text": "with the Transmission Control Protocol acronym, which is also used in this document.)", "source": "mcs500_programming_manual", "chunk_index": 117, "length": 85, "hash": "c369968da6e0113c00ac2322441639f7"}
{"id": "mcs500_programming_manual_118", "text": "(b) Flange Reference Frame (FRF)", "source": "mcs500_programming_manual", "chunk_index": 118, "length": 32, "hash": "ee4d7bca71e600a35f6744f8f0170337"}
{"id": "mcs500_programming_manual_119", "text": "(b) Flange Reference Frame (FRF)", "source": "mcs500_programming_manual", "chunk_index": 119, "length": 32, "hash": "ee4d7bca71e600a35f6744f8f0170337"}
{"id": "mcs500_programming_manual_120", "text": "Figure 2: Reference frames for the MCS500", "source": "mcs500_programming_manual", "chunk_index": 120, "length": 41, "hash": "a09db9e938f4a661ed0c5db00e6b72bc"}
{"id": "mcs500_programming_manual_121", "text": "Figure 2: Reference frames for the MCS500", "source": "mcs500_programming_manual", "chunk_index": 121, "length": 41, "hash": "a09db9e938f4a661ed0c5db00e6b72bc"}
{"id": "mcs500_programming_manual_122", "text": "Some Mecademic commands accept pose (page 340) (position and orientation of one\nreference frame with respect to another) as arguments. In these commands, and in the the\nMecaPortal web interface, a pose consists of a Cartesian position, {x, y, z}, and the single\norientation angle \u03b3, about a vertical axis. All reference frames have their z axes upwards. It\nis impossible, for example, to specify a TRF with the z-axis pointing downwards.", "source": "mcs500_programming_manual", "chunk_index": 122, "length": 437, "hash": "2d32bf5cb399452b1b54c1f6c5abf774"}
{"id": "mcs500_programming_manual_123", "text": "Some Mecademic commands accept", "source": "mcs500_programming_manual", "chunk_index": 123, "length": 30, "hash": "a342bff06f258baf309ddcec89dff2ab"}
{"id": "mcs500_programming_manual_124", "text": "(page 340) (position and orientation of one\nreference frame with respect to another) as arguments. In these commands, and in the the\nMecaPortal web interface, a pose consists of a Cartesian position, {x, y, z}, and the single\norientation angle \u03b3, about a vertical axis.", "source": "mcs500_programming_manual", "chunk_index": 124, "length": 269, "hash": "b0b95ac1fded08ed75d0b5a3c250d747"}
{"id": "mcs500_programming_manual_125", "text": "All reference frames have their z axes upwards. It\nis impossible, for example, to specify a TRF with the z-axis pointing downwards.", "source": "mcs500_programming_manual", "chunk_index": 125, "length": 131, "hash": "d95034e1756227b36223a10a6bdaec23"}
{"id": "mcs500_programming_manual_126", "text": "Joint positions and last joint turn configuration", "source": "mcs500_programming_manual", "chunk_index": 126, "length": 49, "hash": "210e6be3a0e71364e50accd1b534e3b4"}
{"id": "mcs500_programming_manual_127", "text": "Joint positions and last joint turn configuration", "source": "mcs500_programming_manual", "chunk_index": 127, "length": 49, "hash": "210e6be3a0e71364e50accd1b534e3b4"}
{"id": "mcs500_programming_manual_128", "text": "The angle associated with the rotational joints 1, 2, and 4, \u03b81, \u03b82, and \u03b84, respectively, and\nthe position of the translational joint 3, d3, will collectively be referred to as joint position\n(page 340) i (i = 1, 2, 3, 4). Since the last joint of the robot (joint 4) can rotate more than\none revolution, you should think of the joint angle as a motor angle, rather than as the angle", "source": "mcs500_programming_manual", "chunk_index": 128, "length": 383, "hash": "8ed6a51cd7cd826bebe23a931474adb8"}
{"id": "mcs500_programming_manual_129", "text": "The angle associated with the rotational joints 1, 2, and 4, \u03b8", "source": "mcs500_programming_manual", "chunk_index": 129, "length": 62, "hash": "2f6b3e9992ce52b7aa465584e88c179c"}
{"id": "mcs500_programming_manual_130", "text": ", respectively, and\nthe position of the translational joint 3, d", "source": "mcs500_programming_manual", "chunk_index": 130, "length": 64, "hash": "9a84a3725495e0641455b2bf107db4a3"}
{"id": "mcs500_programming_manual_131", "text": ", will collectively be referred to as", "source": "mcs500_programming_manual", "chunk_index": 131, "length": 37, "hash": "f2c412271d1ff3c9310a0f0f359918eb"}
{"id": "mcs500_programming_manual_132", "text": "(page 340) i (i = 1, 2, 3, 4). Since the last joint of the robot (joint 4) can rotate more than\none revolution, you should think of the joint angle as a motor angle, rather than as the angle", "source": "mcs500_programming_manual", "chunk_index": 132, "length": 190, "hash": "215e223d67199d49dc88ed5f3ccc95b8"}
{"id": "mcs500_programming_manual_133", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 133, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_134", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 134, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_135", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 135, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_136", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 136, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_137", "text": "between two consecutive robot links. Unless you attach an end-effector with cabling to the\nrobot flange, there is no way of knowing the value of the last joint angle just by observing the\nrobot.", "source": "mcs500_programming_manual", "chunk_index": 137, "length": 194, "hash": "43a3521202ddf0bcf5e9d1b56943f269"}
{"id": "mcs500_programming_manual_138", "text": "between two consecutive robot links. Unless you attach an end-effector with cabling to the\nrobot flange, there is no way of knowing the value of the last joint angle just by observing the\nrobot.", "source": "mcs500_programming_manual", "chunk_index": 138, "length": 194, "hash": "43a3521202ddf0bcf5e9d1b56943f269"}
{"id": "mcs500_programming_manual_139", "text": "Note that the directions for each joint are engraved on the robot\u2019s body and shown in Figure 1.\nAlso, as previously mentioned, all joint positions are zero in that figure.", "source": "mcs500_programming_manual", "chunk_index": 139, "length": 171, "hash": "1f371738e76ba3b0f6ec266aae9032bb"}
{"id": "mcs500_programming_manual_140", "text": "Note that the directions for each joint are engraved on the robot\u2019s body and shown in Figure 1.\nAlso, as previously mentioned, all joint positions are zero in that figure.", "source": "mcs500_programming_manual", "chunk_index": 140, "length": 171, "hash": "1f371738e76ba3b0f6ec266aae9032bb"}
{"id": "mcs500_programming_manual_141", "text": "The mechanical limits for the first three robot joints are as follows:", "source": "mcs500_programming_manual", "chunk_index": 141, "length": 70, "hash": "5a3c8175a33aa7db38d26141778be623"}
{"id": "mcs500_programming_manual_142", "text": "The mechanical limits for the first three robot joints are as follows:", "source": "mcs500_programming_manual", "chunk_index": 142, "length": 70, "hash": "5a3c8175a33aa7db38d26141778be623"}
{"id": "mcs500_programming_manual_143", "text": "\u2212140\u00b0 \u2264 \u03b81 \u2264 140\u00b0,\n\u2212145\u00b0 \u2264 \u03b82 \u2264 145\u00b0,\n\u2212102 mm \u2264 d3 \u2264 0 mm.", "source": "mcs500_programming_manual", "chunk_index": 143, "length": 58, "hash": "f1296c5073069e8b843fbc8ead2810a4"}
{"id": "mcs500_programming_manual_144", "text": "Joint 4 has no mechanical limits, but its software limits are \u00b110 turns. Finally, we define the\ninteger ct as the joint 4 turn configuration parameter (page 341), so that", "source": "mcs500_programming_manual", "chunk_index": 144, "length": 170, "hash": "228cb0176d96c7711333775f7e19258d"}
{"id": "mcs500_programming_manual_145", "text": "Joint 4 has no mechanical limits, but its software limits are \u00b110 turns. Finally, we define the", "source": "mcs500_programming_manual", "chunk_index": 145, "length": 95, "hash": "969196a966ed6cbed27f75181b64b937"}
{"id": "mcs500_programming_manual_146", "text": "turn configuration parameter", "source": "mcs500_programming_manual", "chunk_index": 146, "length": 28, "hash": "a30bb88e7239bd8dafc0dae4dbaebbd5"}
{"id": "mcs500_programming_manual_147", "text": "\u2212180\u00b0 + ct360\u00b0 < \u03b84 \u2264 180\u00b0 + ct360\u00b0.", "source": "mcs500_programming_manual", "chunk_index": 147, "length": 36, "hash": "dcdde7235a674cc606c6bc6d97b4e842"}
{"id": "mcs500_programming_manual_148", "text": "Joints can be further constrained using the SetJointLimits (page 190) command (or via the\nMecaPortal).", "source": "mcs500_programming_manual", "chunk_index": 148, "length": 102, "hash": "02cd476ca79f78c9224468e368c848a8"}
{"id": "mcs500_programming_manual_149", "text": "Joints can be further constrained using the", "source": "mcs500_programming_manual", "chunk_index": 149, "length": 43, "hash": "00b1def770100e203f70a3e80f171305"}
{"id": "mcs500_programming_manual_150", "text": "(page 190) command (or via the\nMecaPortal).", "source": "mcs500_programming_manual", "chunk_index": 150, "length": 43, "hash": "7600ca5310de7576060733661e6d08b1"}
{"id": "mcs500_programming_manual_151", "text": "Joint set and robot posture", "source": "mcs500_programming_manual", "chunk_index": 151, "length": 27, "hash": "4d0d22207ce3b1ff05a6959cb68a5900"}
{"id": "mcs500_programming_manual_152", "text": "Joint set and robot posture", "source": "mcs500_programming_manual", "chunk_index": 152, "length": 27, "hash": "4d0d22207ce3b1ff05a6959cb68a5900"}
{"id": "mcs500_programming_manual_153", "text": "There are several possible solutions for joint positions, for a desired pose of the robot end-\neffector with respect to the robot base, i.e., several possible sets {\u03b81, \u03b82, d3, \u03b84}. The simplest\nway to describe how the robot is postured, is by giving its set of joint positions. This set will\nbe referred to as the joint set (page 340).", "source": "mcs500_programming_manual", "chunk_index": 153, "length": 336, "hash": "b5d3e86018826010bd3636bfa52106f2"}
{"id": "mcs500_programming_manual_154", "text": "There are several possible solutions for joint positions, for a desired pose of the robot end-\neffector with respect to the robot base, i.e., several possible sets {\u03b8", "source": "mcs500_programming_manual", "chunk_index": 154, "length": 166, "hash": "a157d43034c7ddbb255b7463c36ee036"}
{"id": "mcs500_programming_manual_155", "text": "}. The simplest\nway to describe how the robot is postured, is by giving its set of joint positions. This set will\nbe referred to as the", "source": "mcs500_programming_manual", "chunk_index": 155, "length": 135, "hash": "2533ad5af3b8cfc0a6e606956096de2a"}
{"id": "mcs500_programming_manual_156", "text": "A joint set completely defines the relative poses of each pair of adjacent links, i.e., the robot\nposture (page 341). However, the joint sets {\u03b81, \u03b82, d3, \u03b84} and {\u03b81, \u03b82, d3, \u03b84 + ct 360\u00b0},\nwhere \u2212180\u00b0 < \u03b84 \u2264 180\u00b0 and ct is the turn configuration for joint 4, correspond to the same\nrobot posture.", "source": "mcs500_programming_manual", "chunk_index": 156, "length": 298, "hash": "57d0a29e41f355e69f490834cceefb20"}
{"id": "mcs500_programming_manual_157", "text": "A joint set completely defines the relative poses of each pair of adjacent links, i.e., the", "source": "mcs500_programming_manual", "chunk_index": 157, "length": 91, "hash": "cf96d2b24385cf6c24b8b82c8ea5f461"}
{"id": "mcs500_programming_manual_158", "text": "(page 341). However, the joint sets {\u03b8", "source": "mcs500_programming_manual", "chunk_index": 158, "length": 38, "hash": "1ba94e5c81a07061d0fecc05ee7ee49e"}
{"id": "mcs500_programming_manual_159", "text": "is the turn configuration for joint 4, correspond to the same\nrobot posture.", "source": "mcs500_programming_manual", "chunk_index": 159, "length": 76, "hash": "bddba898c6637dd40b437e198987cff8"}
{"id": "mcs500_programming_manual_160", "text": "Therefore, a joint set conveys the same information as a robot posture AND the turn\nconfiguration of the last joint.", "source": "mcs500_programming_manual", "chunk_index": 160, "length": 116, "hash": "cde0987f8f36b26e2fa3cd923fe4e38f"}
{"id": "mcs500_programming_manual_161", "text": "a joint set conveys the same information as a robot posture AND the turn\nconfiguration of the last joint", "source": "mcs500_programming_manual", "chunk_index": 161, "length": 104, "hash": "a5e4955c56b6968c14cc2a901373b272"}
{"id": "mcs500_programming_manual_162", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 162, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_163", "text": "Definitions and conventions", "source": "mcs500_programming_manual", "chunk_index": 163, "length": 27, "hash": "26b62ec407f642227cb651c2392ce3f8"}
{"id": "mcs500_programming_manual_164", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 164, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_165", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 165, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_166", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 166, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_167", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 167, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_168", "text": "Inverse kinematic solutions and configuration parameters", "source": "mcs500_programming_manual", "chunk_index": 168, "length": 56, "hash": "854155d2149733b5623f02c3d271c5e8"}
{"id": "mcs500_programming_manual_169", "text": "Inverse kinematic solutions and configuration parameters", "source": "mcs500_programming_manual", "chunk_index": 169, "length": 56, "hash": "854155d2149733b5623f02c3d271c5e8"}
{"id": "mcs500_programming_manual_170", "text": "The inverse kinematics (page 339) is the problem of obtaining the robot joint sets that\ncorrespond to a desired end-effector pose.", "source": "mcs500_programming_manual", "chunk_index": 170, "length": 130, "hash": "45bd451a97511dd709c7aa29cbf262ef"}
{"id": "mcs500_programming_manual_171", "text": "(page 339) is the problem of obtaining the robot joint sets that\ncorrespond to a desired end-effector pose.", "source": "mcs500_programming_manual", "chunk_index": 171, "length": 107, "hash": "78c466e655eb83c4886a03d13fa3eb58"}
{"id": "mcs500_programming_manual_172", "text": "The inverse kinematics of our SCARA robots provide two feasible robot postures for a desired\npose of the TRF with respect to the WRF, as shown in Figure 3, and many more joint sets\n(since if \u03b84 is a solution, then \u03b84 \u00b1 n360\u00b0, where n is an integer, is also a solution). These two\nsolutions are distinguished with a binary parameters called the robot posture configuration\nparameter (page 340): ce:", "source": "mcs500_programming_manual", "chunk_index": 172, "length": 397, "hash": "fd2190d1276520bae9ae9a08223d3755"}
{"id": "mcs500_programming_manual_173", "text": "The inverse kinematics of our SCARA robots provide two feasible robot postures for a desired\npose of the TRF with respect to the WRF, as shown in Figure 3, and many more joint sets\n(since if \u03b8", "source": "mcs500_programming_manual", "chunk_index": 173, "length": 192, "hash": "7bcc935b5a7f465705b02d27a196f979"}
{"id": "mcs500_programming_manual_174", "text": "is a solution, then \u03b8", "source": "mcs500_programming_manual", "chunk_index": 174, "length": 21, "hash": "803569e6ba82db405cd58eaf918e3ef4"}
{"id": "mcs500_programming_manual_175", "text": "\u00b1 n360\u00b0, where n is an integer, is also a solution). These two\nsolutions are distinguished with a binary parameters called the", "source": "mcs500_programming_manual", "chunk_index": 175, "length": 126, "hash": "af555b3a4deca8dfd79159bbb6240464"}
{"id": "mcs500_programming_manual_176", "text": "robot posture configuration\nparameter", "source": "mcs500_programming_manual", "chunk_index": 176, "length": 37, "hash": "d27bd36290aaf2f982a053f4d6700e39"}
{"id": "mcs500_programming_manual_177", "text": "\u2022 ce (elbow configuration parameter)", "source": "mcs500_programming_manual", "chunk_index": 177, "length": 36, "hash": "58bf48c900501bd5570da0485c8772a8"}
{"id": "mcs500_programming_manual_178", "text": "(elbow configuration parameter)", "source": "mcs500_programming_manual", "chunk_index": 178, "length": 31, "hash": "ba993028dcabe94b255351cbc08cb48d"}
{"id": "mcs500_programming_manual_179", "text": "\u2013 ce = 1, if \u03b83 > 0\u00b0. The condition ce = 1 is also referred to as \u201crighty\u201d (see Figure 3a);", "source": "mcs500_programming_manual", "chunk_index": 179, "length": 91, "hash": "ac2715e0b24b64f73f23930e396ad7aa"}
{"id": "mcs500_programming_manual_180", "text": "> 0\u00b0. The condition c", "source": "mcs500_programming_manual", "chunk_index": 180, "length": 21, "hash": "16a05f09affbf81bd7f655ff6c2ce373"}
{"id": "mcs500_programming_manual_181", "text": "= 1 is also referred to as \u201crighty\u201d (see Figure 3a);", "source": "mcs500_programming_manual", "chunk_index": 181, "length": 52, "hash": "263d041d5f85661438c6971e202df6a1"}
{"id": "mcs500_programming_manual_182", "text": "\u2013 ce = \u22121, if \u03b83 < 0\u00b0. The condition ce = \u22121 is also referred to as \u201clefty\u201d (see Figure 3b);", "source": "mcs500_programming_manual", "chunk_index": 182, "length": 92, "hash": "174d3a0af87256eb61c93f14f3df7da1"}
{"id": "mcs500_programming_manual_183", "text": "< 0\u00b0. The condition c", "source": "mcs500_programming_manual", "chunk_index": 183, "length": 21, "hash": "e9f92c96d9bcba9bae3cce2c20b7aa2c"}
{"id": "mcs500_programming_manual_184", "text": "= \u22121 is also referred to as \u201clefty\u201d (see Figure 3b);", "source": "mcs500_programming_manual", "chunk_index": 184, "length": 52, "hash": "35a4bd80794c4ce8d001b4f908f70ffd"}
{"id": "mcs500_programming_manual_185", "text": "(b) elbow singularity", "source": "mcs500_programming_manual", "chunk_index": 185, "length": 21, "hash": "dd1a831a02514472a20b834dc435f0da"}
{"id": "mcs500_programming_manual_186", "text": "(b) elbow singularity", "source": "mcs500_programming_manual", "chunk_index": 186, "length": 21, "hash": "dd1a831a02514472a20b834dc435f0da"}
{"id": "mcs500_programming_manual_187", "text": "Figure 3: Posture configuration parameter and the singularity in the MCS500", "source": "mcs500_programming_manual", "chunk_index": 187, "length": 75, "hash": "ee2a688695cb33e8943c90ae0893c555"}
{"id": "mcs500_programming_manual_188", "text": "Figure 3: Posture configuration parameter and the singularity in the MCS500", "source": "mcs500_programming_manual", "chunk_index": 188, "length": 75, "hash": "ee2a688695cb33e8943c90ae0893c555"}
{"id": "mcs500_programming_manual_189", "text": "The robot calculates the solution to the inverse kinematics that corresponds to the desired\nposture configuration, ce, defined by the SetConf (page 147) command. In addition, it solves\n\u03b84 by choosing the angle that corresponds to the desired turn configuration, ct, defined by\nthe SetConfTurn (page 148) command. The turn is therefore the last inverse kinematics\nconfiguration parameter.", "source": "mcs500_programming_manual", "chunk_index": 189, "length": 387, "hash": "08fbb7b85800a0cf30c3d092bfe5b09b"}
{"id": "mcs500_programming_manual_190", "text": "The robot calculates the solution to the inverse kinematics that corresponds to the desired\nposture configuration, c", "source": "mcs500_programming_manual", "chunk_index": 190, "length": 116, "hash": "b72548ea84701ee1c315c98ff4a213a1"}
{"id": "mcs500_programming_manual_191", "text": "(page 147) command. In addition, it solves", "source": "mcs500_programming_manual", "chunk_index": 191, "length": 42, "hash": "2f279af3202df4143c6f1bcab9554a89"}
{"id": "mcs500_programming_manual_192", "text": "by choosing the angle that corresponds to the desired turn configuration, c", "source": "mcs500_programming_manual", "chunk_index": 192, "length": 75, "hash": "6cf61f2899b822b6d90e6100b8995312"}
{"id": "mcs500_programming_manual_193", "text": "(page 148) command. The turn is therefore the last inverse kinematics\nconfiguration parameter.", "source": "mcs500_programming_manual", "chunk_index": 193, "length": 94, "hash": "a59df8d4db0a4085a9c6a94d69bf3ec5"}
{"id": "mcs500_programming_manual_194", "text": "Both the turn configuration and the robot posture configuration parameter are needed", "source": "mcs500_programming_manual", "chunk_index": 194, "length": 84, "hash": "ecdf38e5da0d173276bbcfbf89787e9f"}
{"id": "mcs500_programming_manual_195", "text": "Both the turn configuration and the robot posture configuration parameter are needed", "source": "mcs500_programming_manual", "chunk_index": 195, "length": 84, "hash": "ecdf38e5da0d173276bbcfbf89787e9f"}
{"id": "mcs500_programming_manual_196", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 196, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_197", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 197, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_198", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 198, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_199", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 199, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_200", "text": "to pinpoint the solution to the robot inverse kinematics (i.e., to pinpoint the joint set\ncorresponding to the desired pose). However, there are major differences between the turn\nand robot posture configuration parameters; mainly that the change of turn does not involve\nsingularities. This is why different commands are used (SetConf (page 147) and SetConfTurn\n(page 148), SetAutoConf (page 139) and SetAutoConfTurn (page 140), etc.).", "source": "mcs500_programming_manual", "chunk_index": 200, "length": 436, "hash": "61e970c9d98f373dcf9a4c87e5e5419b"}
{"id": "mcs500_programming_manual_201", "text": "to pinpoint the solution to the robot inverse kinematics", "source": "mcs500_programming_manual", "chunk_index": 201, "length": 56, "hash": "8b3838dbff8efcb9e468d1ef6c15e8d7"}
{"id": "mcs500_programming_manual_202", "text": "(i.e., to pinpoint the joint set\ncorresponding to the desired pose). However, there are major differences between the turn\nand robot posture configuration parameters; mainly that the change of turn does not involve\nsingularities. This is why different commands are used (", "source": "mcs500_programming_manual", "chunk_index": 202, "length": 271, "hash": "8a2337ae19a5d7665bb782dbe7ed05d1"}
{"id": "mcs500_programming_manual_203", "text": "Although it is possible to calculate the optimal inverse kinematic solution (the shortest\nmove from the current robot position) using the commands SetAutoConf (page 139) and\nSetAutoConfTurn (page 140), we strongly recommend always specifying the desired values\nfor the configuration parameters with SetConf (page 147) and SetConfTurn (page 148). This\nshould be done for every Cartesian motion command (e.g., MovePose (page 138) and the\nvarious MoveLin* commands) when programming your robot in online mode programming\n(page 340).", "source": "mcs500_programming_manual", "chunk_index": 203, "length": 529, "hash": "b33106ae1e797558a01936a5cbea9af4"}
{"id": "mcs500_programming_manual_204", "text": "Although it is possible to calculate the optimal inverse kinematic solution (the shortest\nmove from the current robot position) using the commands", "source": "mcs500_programming_manual", "chunk_index": 204, "length": 146, "hash": "c240f79517ec2d692bb71a88698498f7"}
{"id": "mcs500_programming_manual_205", "text": "(page 140), we strongly recommend always specifying the desired values\nfor the configuration parameters with", "source": "mcs500_programming_manual", "chunk_index": 205, "length": 108, "hash": "ca7af79d0336a7d50fc5c0917e17832a"}
{"id": "mcs500_programming_manual_206", "text": "(page 148). This\nshould be done for every Cartesian motion command (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 206, "length": 73, "hash": "3565061f0eb49a5a0cfafbd26606d246"}
{"id": "mcs500_programming_manual_207", "text": "(page 138) and the\nvarious MoveLin* commands) when programming your robot in", "source": "mcs500_programming_manual", "chunk_index": 207, "length": 76, "hash": "96c04d7c2e20e482f05bea0e9ce64bd4"}
{"id": "mcs500_programming_manual_208", "text": "online mode programming", "source": "mcs500_programming_manual", "chunk_index": 208, "length": 23, "hash": "0132caa04a6bfe2e90f1b439db743e28"}
{"id": "mcs500_programming_manual_209", "text": "If you are teaching the robot position (page 341) and later want the end-effector to move\nto the current pose along a linear path, you must record not only the current pose of the\nTRF relative to the WRF (using GetRtCartPos (page 259)), but also the definitions of both\nthe TRF and the WRF (using GetTrf (page 251) and GetWrf (page 253)). Additionally, you\nneed to capture the corresponding configuration parameters (using GetRtConf (page 261)\nand GetRtConfTurn (page 262)). Then, to ensure accurate execution of the command MoveLin\n(page 132) when approaching the previously recorded robot position from a starting position,\nyou must verify that the robot is already in the same posture configuration and that \u03b84 is\nwithin half a revolution of the desired value. If you do not require the robot\u2019s TCP to follow\na linear trajectory, it is preferable to retrieve only the current joint set using GetRtJointPos\n(page 263). You can later move the robot to that joint set with the MoveJoints (page 126)\ncommand, eliminating the need to record or specify the four configuration parameters and\nthe definitions of the TRF and WRF.", "source": "mcs500_programming_manual", "chunk_index": 209, "length": 1123, "hash": "73a4f4688d44617b675f801f6cbb92e1"}
{"id": "mcs500_programming_manual_210", "text": "If you are teaching the", "source": "mcs500_programming_manual", "chunk_index": 210, "length": 23, "hash": "d305eaeeee48ae90af5b1d9b088007a0"}
{"id": "mcs500_programming_manual_211", "text": "(page 341) and later want the end-effector to move\nto the current pose along a linear path, you must record not only the current pose of the", "source": "mcs500_programming_manual", "chunk_index": 211, "length": 140, "hash": "f14008f77f0b0ce1cdff1c7d3f31df7f"}
{"id": "mcs500_programming_manual_212", "text": "TRF relative to the WRF (using", "source": "mcs500_programming_manual", "chunk_index": 212, "length": 30, "hash": "2b8077163c1acc82d5c2e275ee765279"}
{"id": "mcs500_programming_manual_213", "text": "(page 259)), but also the definitions of both\nthe TRF and the WRF (using", "source": "mcs500_programming_manual", "chunk_index": 213, "length": 72, "hash": "06194bd1b366b62a109f6c6d7ec978c2"}
{"id": "mcs500_programming_manual_214", "text": "(page 253)). Additionally, you\nneed to capture the corresponding configuration parameters (using", "source": "mcs500_programming_manual", "chunk_index": 214, "length": 96, "hash": "300c58544af27fa5146a8d97d2e14618"}
{"id": "mcs500_programming_manual_215", "text": "(page 262)). Then, to ensure accurate execution of the command", "source": "mcs500_programming_manual", "chunk_index": 215, "length": 62, "hash": "d2be0c18d56462440530d15b125462d1"}
{"id": "mcs500_programming_manual_216", "text": "(page 132) when approaching the previously recorded robot position from a starting position,\nyou must verify that the robot is already in the same posture configuration and that \u03b8", "source": "mcs500_programming_manual", "chunk_index": 216, "length": 179, "hash": "ffbb7ae735fc7fe812fbc2569379fa1c"}
{"id": "mcs500_programming_manual_217", "text": "is\nwithin half a revolution of the desired value. If you do not require the robot\u2019s TCP to follow\na linear trajectory, it is preferable to retrieve only the current joint set using", "source": "mcs500_programming_manual", "chunk_index": 217, "length": 180, "hash": "f742d0417d01b68c32d8c827bce8a870"}
{"id": "mcs500_programming_manual_218", "text": "(page 263). You can later move the robot to that joint set with the", "source": "mcs500_programming_manual", "chunk_index": 218, "length": 67, "hash": "1dce54746471076dff128e62275e4c9a"}
{"id": "mcs500_programming_manual_219", "text": "(page 126)\ncommand, eliminating the need to record or specify the four configuration parameters and\nthe definitions of the TRF and WRF.", "source": "mcs500_programming_manual", "chunk_index": 219, "length": 135, "hash": "69c4da19afea8e34504674172813271f"}
{"id": "mcs500_programming_manual_220", "text": "Automatic configuration selection", "source": "mcs500_programming_manual", "chunk_index": 220, "length": 33, "hash": "f1d385522cc3be2e5eb93a5fdd50b479"}
{"id": "mcs500_programming_manual_221", "text": "Automatic configuration selection", "source": "mcs500_programming_manual", "chunk_index": 221, "length": 33, "hash": "f1d385522cc3be2e5eb93a5fdd50b479"}
{"id": "mcs500_programming_manual_222", "text": "The automatic configuration selection should only be used once you understand how this\nselection is done, and mainly while programming and testing. For example, when jogging in\nCartesian space with the MecaPortal, the automatic configuration selection is always enabled.\nOr, if a target pose is identified in real-time based on input from a sensor (e.g., a camera),\nenabling the automatic configuration selection will increase your chances of reaching that\npose, and in the fastest way.", "source": "mcs500_programming_manual", "chunk_index": 222, "length": 486, "hash": "ffbb1c706fcd2ac3ed4356153538290f"}
{"id": "mcs500_programming_manual_223", "text": "The automatic configuration selection should only be used once you understand how this\nselection is done, and mainly while programming and testing. For example, when jogging in\nCartesian space with the MecaPortal, the automatic configuration selection is always enabled.", "source": "mcs500_programming_manual", "chunk_index": 223, "length": 270, "hash": "5802705f7f628f9d03eea02850bda029"}
{"id": "mcs500_programming_manual_224", "text": "Or, if a target pose is identified in real-time based on input from a sensor (e.g., a camera),\nenabling the automatic configuration selection will increase your chances of reaching that\npose, and in the fastest way.", "source": "mcs500_programming_manual", "chunk_index": 224, "length": 215, "hash": "a9ef746f53caed63945ec2970c870006"}
{"id": "mcs500_programming_manual_225", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 225, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_226", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 226, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_227", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 227, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_228", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 228, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_229", "text": "Figure 4: Effect of configuration parameters on robot movement commands", "source": "mcs500_programming_manual", "chunk_index": 229, "length": 71, "hash": "6117675861a108f7a93aedd7075de5d0"}
{"id": "mcs500_programming_manual_230", "text": "Figure 4: Effect of configuration parameters on robot movement commands", "source": "mcs500_programming_manual", "chunk_index": 230, "length": 71, "hash": "6117675861a108f7a93aedd7075de5d0"}
{"id": "mcs500_programming_manual_231", "text": "Figure 4 illustrates how the automatic and manual configuration selections work, with the\nfollowing five remarks:", "source": "mcs500_programming_manual", "chunk_index": 231, "length": 113, "hash": "f94e419e84492db82b90a4f859d96b27"}
{"id": "mcs500_programming_manual_232", "text": "Figure 4 illustrates how the automatic and manual configuration selections work, with the\nfollowing five remarks:", "source": "mcs500_programming_manual", "chunk_index": 232, "length": 113, "hash": "f94e419e84492db82b90a4f859d96b27"}
{"id": "mcs500_programming_manual_233", "text": "1. Setting a desired posture or turn configuration (with SetConf (page 147) or SetConfTurn\nrespectively) disables the automatic posture or turn configuration\n(page 148),\nInversely, enabling the\nselection, respectively, which are both set by default.\nautomatic posture or turn configuration selection, with SetAutoConf(1) (page 139)\nor SetAutoConfTurn(1) (page 140), respectively, removes the desired posture or\nturn configuration, respectively. At any moment,\nif SetAutoConf(0) (page 139) or\nSetAutoConfTurn(0) (page 140) is executed, the robot posture or turn configuration\nof the current robot position is set as the desired posture or turn configuration,\nrespectively.", "source": "mcs500_programming_manual", "chunk_index": 233, "length": 671, "hash": "0b9f22a135192d3f1aa3825865c52a9e"}
{"id": "mcs500_programming_manual_234", "text": "1. Setting a desired posture or turn configuration (with", "source": "mcs500_programming_manual", "chunk_index": 234, "length": 56, "hash": "2f028fb469aaa91eda59e9b95e63ea2e"}
{"id": "mcs500_programming_manual_235", "text": "respectively) disables the automatic posture or turn configuration\n(page 148),\nInversely, enabling the\nselection, respectively, which are both set by default.\nautomatic posture or turn configuration selection, with", "source": "mcs500_programming_manual", "chunk_index": 235, "length": 214, "hash": "4816a783da2cf2165d5a253d06112626"}
{"id": "mcs500_programming_manual_236", "text": "(page 140), respectively, removes the desired posture or\nturn configuration, respectively. At any moment,\nif", "source": "mcs500_programming_manual", "chunk_index": 236, "length": 108, "hash": "a01128028a3d200e0acc2fe101446068"}
{"id": "mcs500_programming_manual_237", "text": "(page 140) is executed, the robot posture or turn configuration\nof the current robot position is set as the desired posture or turn configuration,\nrespectively.", "source": "mcs500_programming_manual", "chunk_index": 237, "length": 160, "hash": "b8ab6d3553a7629a618391852a9768a3"}
{"id": "mcs500_programming_manual_238", "text": "2. The commands MoveJoints (page 126), MoveJointsRel (page 128), and MoveJointsVel\n(page 129) ignore the automatic and manual configuration selections. Thus, the robot\nmay end up in a posture or turn configuration different from the desired ones, if such\nwere set. If you want to update the desired configurations with the current ones, simply\nexecute the commands SetAutoConf(0) (page 139) or SetAutoConfTurn(0) (page 140).", "source": "mcs500_programming_manual", "chunk_index": 238, "length": 424, "hash": "2860159439b54697d661799aa7e5a237"}
{"id": "mcs500_programming_manual_239", "text": "(page 129) ignore the automatic and manual configuration selections. Thus, the robot\nmay end up in a posture or turn configuration different from the desired ones, if such\nwere set. If you want to update the desired configurations with the current ones, simply\nexecute the commands", "source": "mcs500_programming_manual", "chunk_index": 239, "length": 281, "hash": "fd793d84f3e1f94ebd2a97c42219f22a"}
{"id": "mcs500_programming_manual_240", "text": "3. The command MovePose (page 138) respects any desired posture or turn configuration,\nas long as the desired robot position is reachable. In contrast, if automatic posture and/or\nturn configuration selection is enabled, MovePose (page 138) will choose the joint set\ncorresponding to the desired end-effector pose, that is fastest to reach and that satisfies\nthe desired posture or turn configuration, if any.", "source": "mcs500_programming_manual", "chunk_index": 240, "length": 409, "hash": "64f36312c15a3054d92b972ee27ca4b2"}
{"id": "mcs500_programming_manual_241", "text": "(page 138) respects any desired posture or turn configuration,\nas long as the desired robot position is reachable. In contrast, if automatic posture and/or", "source": "mcs500_programming_manual", "chunk_index": 241, "length": 155, "hash": "6f1fc9331b4cf85d2c2c43b4607aa7db"}
{"id": "mcs500_programming_manual_242", "text": "turn configuration selection is enabled,", "source": "mcs500_programming_manual", "chunk_index": 242, "length": 40, "hash": "d8fa526a04f94f2d8c2616262ea84c7a"}
{"id": "mcs500_programming_manual_243", "text": "(page 138) will choose the joint set\ncorresponding to the desired end-effector pose, that is fastest to reach and that satisfies\nthe desired posture or turn configuration, if any.", "source": "mcs500_programming_manual", "chunk_index": 243, "length": 179, "hash": "f24d5335dc0b670eef447f9e963ccf01"}
{"id": "mcs500_programming_manual_244", "text": "4. In the case of MoveLin* commands, the desired posture and turn configurations will\nforce the linear move to remain within the specified posture and turn configurations.\nThis means that a MoveLin (page 132) or MoveLinRel* command will be executed only if\nthe posture and turn configurations of the initial and final robot positions are the same\nas the desired configurations. In the case of MoveLinVel*, the robot will start to move\nonly if the posture and turn configurations of the initial and final robot positions are the\nsame as the desired configurations, and will stop if desired configuration parameter has\nto change.", "source": "mcs500_programming_manual", "chunk_index": 244, "length": 627, "hash": "cf100200862fd1e96eb84d4f8a624bc0"}
{"id": "mcs500_programming_manual_245", "text": "4. In the case of MoveLin* commands, the desired posture and turn configurations will\nforce the linear move to remain within the specified posture and turn configurations.\nThis means that a", "source": "mcs500_programming_manual", "chunk_index": 245, "length": 189, "hash": "743d9587b28c56b23544cff49597c8d0"}
{"id": "mcs500_programming_manual_246", "text": "(page 132) or MoveLinRel* command will be executed only if\nthe posture and turn configurations of the initial and final robot positions are the same\nas the desired configurations. In the case of MoveLinVel*, the robot will start to move", "source": "mcs500_programming_manual", "chunk_index": 246, "length": 236, "hash": "d802e55799f777a574b30dc3dc303ed2"}
{"id": "mcs500_programming_manual_247", "text": "only if the posture and turn configurations of the initial and final robot positions are the\nsame as the desired configurations, and will stop if desired configuration parameter has\nto change.", "source": "mcs500_programming_manual", "chunk_index": 247, "length": 192, "hash": "68b1afa4ba9648be07b5a145d05e9507"}
{"id": "mcs500_programming_manual_248", "text": "5. When automatic configuration selection is enabled, a MoveLin* command may lead", "source": "mcs500_programming_manual", "chunk_index": 248, "length": 81, "hash": "0226a7fef8110e6d80971a410196f431"}
{"id": "mcs500_programming_manual_249", "text": "5. When automatic configuration selection is enabled, a MoveLin* command may lead", "source": "mcs500_programming_manual", "chunk_index": 249, "length": 81, "hash": "0226a7fef8110e6d80971a410196f431"}
{"id": "mcs500_programming_manual_250", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 250, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_251", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 251, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_252", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 252, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_253", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 253, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_254", "text": "to changing the posture (if passing through a wrist or shoulder singularity) or turn\nconfiguration along the path.", "source": "mcs500_programming_manual", "chunk_index": 254, "length": 114, "hash": "5fa32d8539ecd18b8165dba591943bb5"}
{"id": "mcs500_programming_manual_255", "text": "to changing the posture (if passing through a wrist or shoulder singularity) or turn\nconfiguration along the path.", "source": "mcs500_programming_manual", "chunk_index": 255, "length": 114, "hash": "5fa32d8539ecd18b8165dba591943bb5"}
{"id": "mcs500_programming_manual_256", "text": "Workspace and singularities", "source": "mcs500_programming_manual", "chunk_index": 256, "length": 27, "hash": "8d7a83138e67d0087a6ad631922a5259"}
{"id": "mcs500_programming_manual_257", "text": "Workspace and singularities", "source": "mcs500_programming_manual", "chunk_index": 257, "length": 27, "hash": "8d7a83138e67d0087a6ad631922a5259"}
{"id": "mcs500_programming_manual_258", "text": "The workspace of our MCS500, or more specifically the set of possible positions for the origin\nof its FRF, is essentially the set of two zones of height d3,max (i.e., 102 mm), one for the righty\n(ce > 0) configuration and one of the lefty (ce < 0) configuration, as shown in Figure 5. In\nCartesian mode, you can move only in one of these two zones. These overlapping zones are\n\u201cseparated\u201d by the elbow singularity (the thick circular arc in Figure 5).", "source": "mcs500_programming_manual", "chunk_index": 258, "length": 451, "hash": "de4d3b06627fd342ebb2d39852244a97"}
{"id": "mcs500_programming_manual_259", "text": "The workspace of our MCS500, or more specifically the set of possible positions for the origin\nof its FRF, is essentially the set of two zones of height d", "source": "mcs500_programming_manual", "chunk_index": 259, "length": 154, "hash": "2b0340604ab5e1d81afdd8a39b30f4b1"}
{"id": "mcs500_programming_manual_260", "text": "(i.e., 102 mm), one for the righty\n(c", "source": "mcs500_programming_manual", "chunk_index": 260, "length": 37, "hash": "38eab563eaba006064378c226cba5cce"}
{"id": "mcs500_programming_manual_261", "text": "> 0) configuration and one of the lefty (c", "source": "mcs500_programming_manual", "chunk_index": 261, "length": 42, "hash": "f226dd78bbf6af13af8355ef4a9588e6"}
{"id": "mcs500_programming_manual_262", "text": "< 0) configuration, as shown in Figure 5. In\nCartesian mode, you can move only in one of these two zones. These overlapping zones are\n\u201cseparated\u201d by the elbow singularity (the thick circular arc in Figure 5).", "source": "mcs500_programming_manual", "chunk_index": 262, "length": 208, "hash": "538d2aa4977c21d98cb38783c3b47b2e"}
{"id": "mcs500_programming_manual_263", "text": "Figure 5: The working range of the MCS500 robot", "source": "mcs500_programming_manual", "chunk_index": 263, "length": 47, "hash": "173bd49d7d98903e17b3a01e22b1cecb"}
{"id": "mcs500_programming_manual_264", "text": "Figure 5: The working range of the MCS500 robot", "source": "mcs500_programming_manual", "chunk_index": 264, "length": 47, "hash": "173bd49d7d98903e17b3a01e22b1cecb"}
{"id": "mcs500_programming_manual_265", "text": "Crossing singularities with linear Cartesian-space movements", "source": "mcs500_programming_manual", "chunk_index": 265, "length": 60, "hash": "34a42a77fadc00a5283cdee37c35593c"}
{"id": "mcs500_programming_manual_266", "text": "Crossing singularities with linear Cartesian-space movements", "source": "mcs500_programming_manual", "chunk_index": 266, "length": 60, "hash": "34a42a77fadc00a5283cdee37c35593c"}
{"id": "mcs500_programming_manual_267", "text": "For convenience, our SCARA robots allow you to move the robot in Cartesian mode even from\na singular configuration (i.e., one in which \u03b83 = 0\u00b0) or end up in a singular configuration. This\nfeature is mainly usefull when jogging the robot.", "source": "mcs500_programming_manual", "chunk_index": 267, "length": 237, "hash": "0a1d282f002fe5010b5dc5a9bc0b784a"}
{"id": "mcs500_programming_manual_268", "text": "For convenience, our SCARA robots allow you to move the robot in Cartesian mode even from", "source": "mcs500_programming_manual", "chunk_index": 268, "length": 89, "hash": "1105bb3f6a407d908f98684300801f50"}
{"id": "mcs500_programming_manual_269", "text": "a singular configuration (i.e., one in which \u03b8", "source": "mcs500_programming_manual", "chunk_index": 269, "length": 46, "hash": "6d99bc890cb4c19b0ceeeb7df8888825"}
{"id": "mcs500_programming_manual_270", "text": "= 0\u00b0) or end up in a singular configuration. This\nfeature is mainly usefull when jogging the robot.", "source": "mcs500_programming_manual", "chunk_index": 270, "length": 99, "hash": "10a322ebe412d8ef57376fc88f827a22"}
{"id": "mcs500_programming_manual_271", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 271, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_272", "text": "Configurations, singularities and workspace", "source": "mcs500_programming_manual", "chunk_index": 272, "length": 43, "hash": "7d6a972607dba21ad4d49b8720937e94"}
{"id": "mcs500_programming_manual_273", "text": "units:mmR225,correspondstoasingularity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR125\n\n\n\n\n\nR72ZonesaccessiblebysplineshaftaxiswithbothrobotconfigurationsZoneaccessiblebysplineshaftaxiswithconfiguration\u201clefty\u201donly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZoneaccessiblebysplineshaftaxiswithconfiguration\u201crighty\u201donly", "source": "mcs500_programming_manual", "chunk_index": 273, "length": 899, "hash": "99911b0747263dab097d79cf4b9e9564"}
{"id": "mcs500_programming_manual_274", "text": "units:mmR225,correspondstoasingularity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR125\n\n\n\n\n\nR72Zonesaccessibleby", "source": "mcs500_programming_manual", "chunk_index": 274, "length": 344, "hash": "2931cb08ca94454fb2d20dabe907fa41"}
{"id": "mcs500_programming_manual_275", "text": "bothrobotconfigurationsZoneaccessiblebysplineshaftaxiswithconfiguration\u201clefty\u201donly\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZoneaccessiblebysplineshaftaxiswithconfiguration\u201crighty\u201donly", "source": "mcs500_programming_manual", "chunk_index": 275, "length": 536, "hash": "9bd87f52f3427e5b83ae7d121170306f"}
{"id": "mcs500_programming_manual_276", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 276, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_277", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 277, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_278", "text": "Key concepts for Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 278, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "mcs500_programming_manual_279", "text": "Key concepts for Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 279, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "mcs500_programming_manual_280", "text": "In the case of the MCS500, homing is not needed as the robot is equipped with high-accuracy\nabsolute encoders. However, you should never manually rotate joint 4 beyond its software-\ndefined limits.", "source": "mcs500_programming_manual", "chunk_index": 280, "length": 197, "hash": "aa149d8bb77f18e2be2ebbab4d2ed592"}
{"id": "mcs500_programming_manual_281", "text": "In the case of the MCS500, homing is not needed as the robot is equipped with high-accuracy\nabsolute encoders. However, you should never manually rotate joint 4 beyond its software-\ndefined limits.", "source": "mcs500_programming_manual", "chunk_index": 281, "length": 197, "hash": "aa149d8bb77f18e2be2ebbab4d2ed592"}
{"id": "mcs500_programming_manual_282", "text": "The range of the absolute encoder and of the software limits of joint 4 of the MCS500 is\nonly \u00b13,600\u00b0. Do not manually rotate joint 4 beyond its software limits (e.g., by disabling\nthe brakes).", "source": "mcs500_programming_manual", "chunk_index": 282, "length": 193, "hash": "7bf84013ebeed1e6195ef3835543a228"}
{"id": "mcs500_programming_manual_283", "text": "The range of the absolute encoder and of the software limits of joint 4 of the MCS500 is\nonly \u00b13,600\u00b0.", "source": "mcs500_programming_manual", "chunk_index": 283, "length": 102, "hash": "81e054aed1e587f636c9f8d3dc94fdff"}
{"id": "mcs500_programming_manual_284", "text": "Do not manually rotate joint 4 beyond its software limits (e.g., by disabling\nthe brakes).", "source": "mcs500_programming_manual", "chunk_index": 284, "length": 90, "hash": "900498522b2157d90d065a84dda5737e"}
{"id": "mcs500_programming_manual_285", "text": "Once activated, if the robot is outside the user-defined joint limits (SetJointLimits (page 190)),\nif the work zone has been breached (SetWorkZoneLimits (page 290), SetWorkZoneCfg\n(page 289)), if a collision has been detected (SetCollisionCfg (page 287)), or if the robot\nis too close to an obstacle, it may be necessary to move the robot to a secure position even\nif these conditions prevent activating the robot or resuming motion. We have implemented\nthe recovery mode (see the command SetRecoveryMode (page 198)) for these situations. In\nthis mode, virtually all motion commands are permitted without restrictions such as software\njoint limits, work zone boundaries, self-collision avoidance, or torque overload protection, as\nlong as the robot is activated. However, joint speeds are significantly reduced.", "source": "mcs500_programming_manual", "chunk_index": 285, "length": 811, "hash": "0ad35406a4bf2c0156032b0e2d6f5da3"}
{"id": "mcs500_programming_manual_286", "text": "Once activated, if the robot is outside the user-defined joint limits (", "source": "mcs500_programming_manual", "chunk_index": 286, "length": 71, "hash": "667dec4f961c2feaac86f4282e5c18f8"}
{"id": "mcs500_programming_manual_287", "text": "(page 190)),\nif the work zone has been breached (", "source": "mcs500_programming_manual", "chunk_index": 287, "length": 49, "hash": "1e68aebd2f5b422db8cb904db8f1e589"}
{"id": "mcs500_programming_manual_288", "text": "(page 289)), if a collision has been detected (", "source": "mcs500_programming_manual", "chunk_index": 288, "length": 47, "hash": "07d5a258bc31b9d568788179298f3341"}
{"id": "mcs500_programming_manual_289", "text": "(page 287)), or if the robot\nis too close to an obstacle, it may be necessary to move the robot to a secure position even\nif these conditions prevent activating the robot or resuming motion. We have implemented\nthe recovery mode (see the command", "source": "mcs500_programming_manual", "chunk_index": 289, "length": 245, "hash": "52aa0c3be27ac81ae90bc7f3aececed0"}
{"id": "mcs500_programming_manual_290", "text": "(page 198)) for these situations. In\nthis mode, virtually all motion commands are permitted without restrictions such as software\njoint limits, work zone boundaries, self-collision avoidance, or torque overload protection, as\nlong as the robot is activated. However,", "source": "mcs500_programming_manual", "chunk_index": 290, "length": 266, "hash": "be2a51970dbfce226f22e7d28694ab32"}
{"id": "mcs500_programming_manual_291", "text": "joint speeds are significantly reduced", "source": "mcs500_programming_manual", "chunk_index": 291, "length": 38, "hash": "167bb5fb1663a8a00c30217ead49db73"}
{"id": "mcs500_programming_manual_292", "text": "Enabling the recovery mode will significantly limit the joint and Cartesian velocities and\naccelerations, for safety reasons.", "source": "mcs500_programming_manual", "chunk_index": 292, "length": 125, "hash": "09bfbaa49decc068e3a39d0925bb6068"}
{"id": "mcs500_programming_manual_293", "text": "Enabling the recovery mode will significantly limit the joint and Cartesian velocities and\naccelerations, for safety reasons.", "source": "mcs500_programming_manual", "chunk_index": 293, "length": 125, "hash": "09bfbaa49decc068e3a39d0925bb6068"}
{"id": "mcs500_programming_manual_294", "text": "Industrial robots are most often controlled in position mode (page 340), using two groups of\ncommands:", "source": "mcs500_programming_manual", "chunk_index": 294, "length": 102, "hash": "9f3640eedb34ce569008d810525e288a"}
{"id": "mcs500_programming_manual_295", "text": "Industrial robots are most often controlled in", "source": "mcs500_programming_manual", "chunk_index": 295, "length": 46, "hash": "a73cc55b73e8a1ec2c2cbc84cc80f4e7"}
{"id": "mcs500_programming_manual_296", "text": "(page 340), using two groups of", "source": "mcs500_programming_manual", "chunk_index": 296, "length": 31, "hash": "57ac6aef43eef6a039eb40f36ac78cda"}
{"id": "mcs500_programming_manual_297", "text": "\u2022 With Cartesian-space (page 339) commands (MoveLin (page 132), MoveLinRelWrf\n(page 135), MoveLinRelTrf (page 134)), the robot is instructed to move its end-effector\ntowards a target pose along a specified Cartesian path. To follow a complex Cartesian\npath, it must be broken down into small linear segments and executed using multiple\nCartesian-space commands. Recall that singularities can pose challenges when using\nCartesian-space commands.", "source": "mcs500_programming_manual", "chunk_index": 297, "length": 444, "hash": "2664d31648f2aecaf841daab17041c9a"}
{"id": "mcs500_programming_manual_298", "text": "(page 339) commands (", "source": "mcs500_programming_manual", "chunk_index": 298, "length": 21, "hash": "a54c12888a8be4fa9079626fd6cf41e2"}
{"id": "mcs500_programming_manual_299", "text": "(page 134)), the robot is instructed to move its end-effector\ntowards a target pose along a specified Cartesian path. To follow a complex Cartesian\npath, it must be broken down into small linear segments and executed using multiple\nCartesian-space commands. Recall that singularities can pose challenges when using\nCartesian-space commands.", "source": "mcs500_programming_manual", "chunk_index": 299, "length": 340, "hash": "06a46079e5d4d01253b1bfbddd9e84a7"}
{"id": "mcs500_programming_manual_300", "text": "\u2022 with joint-space (page 340) commands (MoveJoints (page 126), MoveJointsRel\n(page 128), MovePose (page 138), MoveJump (page 130)), the robot is instructed \u2014\ndirectly or indirectly \u2014 to move its joints linearly towards a target joint set. Recall\nthat when using joint-space commands, singularities are generally not an issue (except\npossibly for the MovePose (page 138) command).", "source": "mcs500_programming_manual", "chunk_index": 300, "length": 379, "hash": "ab302530363c0ddf94fd216114e5051e"}
{"id": "mcs500_programming_manual_301", "text": "(page 340) commands (", "source": "mcs500_programming_manual", "chunk_index": 301, "length": 21, "hash": "51e3dc2a23d419d3de5fb34a702aa40d"}
{"id": "mcs500_programming_manual_302", "text": "(page 130)), the robot is instructed \u2014\ndirectly or indirectly \u2014 to move its joints linearly towards a target joint set. Recall\nthat when using joint-space commands, singularities are generally not an issue (except\npossibly for the", "source": "mcs500_programming_manual", "chunk_index": 302, "length": 230, "hash": "5bdd6bc38c0460f3e090d825d3b9a7c4"}
{"id": "mcs500_programming_manual_303", "text": "(page 138) command).", "source": "mcs500_programming_manual", "chunk_index": 303, "length": 20, "hash": "1fd19ce73abe030cee11ad45d79629f5"}
{"id": "mcs500_programming_manual_304", "text": "Key concepts for Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 304, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "mcs500_programming_manual_305", "text": "Key concepts for Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 305, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "mcs500_programming_manual_306", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 306, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_307", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 307, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_308", "text": "Often, the target poses or joint sets act as \u201cvia points,\u201d where the goal is not to reach the\ntarget precisely but simply to pass near it. Blending enables the robot to transition smoothly\nbetween motion segments instead of stopping at the end of each segment and making sharp\nchanges in direction. Blending can be thought of as taking a rounded shortcut.", "source": "mcs500_programming_manual", "chunk_index": 308, "length": 355, "hash": "aa1687930ce2b35238828cc8e8d3016f"}
{"id": "mcs500_programming_manual_309", "text": "Often, the target poses or joint sets act as \u201cvia points,\u201d where the goal is not to reach the\ntarget precisely but simply to pass near it. Blending enables the robot to transition smoothly\nbetween motion segments instead of stopping at the end of each segment and making sharp\nchanges in direction. Blending can be thought of as taking a rounded shortcut.", "source": "mcs500_programming_manual", "chunk_index": 309, "length": 355, "hash": "aa1687930ce2b35238828cc8e8d3016f"}
{"id": "mcs500_programming_manual_310", "text": "Blending allows the trajectory planner to maintain the end-effector\u2019s acceleration to a\nminimum between two position-mode joint-space movements or two position-mode Cartesian-\nspace movements. When blending is activated, the trajectory planner will transition between\nthe two paths using a blended curve (Figure 6). The higher the TCP speed, the more rounded\nthe transition will be (the radius of the blending cannot be explicitly controlled, only the\nblending duration is configurable).", "source": "mcs500_programming_manual", "chunk_index": 310, "length": 487, "hash": "39b1141d59447bb2ffc8bbff077510f1"}
{"id": "mcs500_programming_manual_311", "text": "Blending allows the trajectory planner to maintain the end-effector\u2019s acceleration to a\nminimum between two position-mode joint-space movements or two position-mode Cartesian-\nspace movements. When blending is activated, the trajectory planner will transition between\nthe two paths using a blended curve (Figure 6).", "source": "mcs500_programming_manual", "chunk_index": 311, "length": 315, "hash": "a38bfb81e9338738314ec2b48b7d9078"}
{"id": "mcs500_programming_manual_312", "text": "The higher the TCP speed, the more rounded\nthe transition will be", "source": "mcs500_programming_manual", "chunk_index": 312, "length": 65, "hash": "050f22df87688c81c8f43eeb3cfcd54f"}
{"id": "mcs500_programming_manual_313", "text": "(the radius of the blending cannot be explicitly controlled, only the\nblending duration is configurable).", "source": "mcs500_programming_manual", "chunk_index": 313, "length": 105, "hash": "b4acfed940fb006c0ef6f27a38eb3ee7"}
{"id": "mcs500_programming_manual_314", "text": "Figure 6: TCP path for two consecutive linear movements, with and without blending", "source": "mcs500_programming_manual", "chunk_index": 314, "length": 82, "hash": "2dd830042375abe5a2eef849be060a92"}
{"id": "mcs500_programming_manual_315", "text": "Figure 6: TCP path for two consecutive linear movements, with and without blending", "source": "mcs500_programming_manual", "chunk_index": 315, "length": 82, "hash": "2dd830042375abe5a2eef849be060a92"}
{"id": "mcs500_programming_manual_316", "text": "Even if blending is enabled, the robot will come to a full stop after a joint-space movement that\nis followed by a Cartesian-space movement, or vice-versa. When blending is disabled, each\nmotion will begin from a full stop and end in a full stop. Blending is enabled by default. It can\nbe completely disabled or only partially enabled with the SetBlending (page 141) command.", "source": "mcs500_programming_manual", "chunk_index": 316, "length": 375, "hash": "1e4f748841ced8a125474efd1eb9ab8d"}
{"id": "mcs500_programming_manual_317", "text": "Even if blending is enabled, the robot will come to a full stop after a joint-space movement that\nis followed by a Cartesian-space movement, or vice-versa. When blending is disabled, each\nmotion will begin from a full stop and end in a full stop. Blending is enabled by default. It can\nbe completely disabled or only partially enabled with the", "source": "mcs500_programming_manual", "chunk_index": 317, "length": 343, "hash": "4ba14b7303140e5dce98ab0ccda715d5"}
{"id": "mcs500_programming_manual_318", "text": "Key concepts for Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 318, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "mcs500_programming_manual_319", "text": "Key concepts for Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 319, "length": 33, "hash": "8c650bde8574269515a104eb3cdaea3b"}
{"id": "mcs500_programming_manual_320", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 320, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_321", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 321, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_322", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 322, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_323", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 323, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_324", "text": "As mentioned in the previous section, the conventional method for moving an industrial\nrobot involves either commanding its end-effector to reach a desired pose along a specified\nCartesian path or directing its joints to rotate to a desired joint set. This basic control method\nis called position mode (page 340). If the robot needs to follow a linear path, the Cartesian-\nspace motion commands MoveLin (page 132), MoveLinRelTrf (page 134), and MoveLinRelWrf\n(page 135) should be used. To move the robot\u2019s end-effector to a specific pose (without\nconcern for the path followed by the end-effector) or to rotate the robot\u2019s joints to a given\njoint set or by a specified amount, the joint-space motion commands MovePose (page 138),\nMoveJoints (page 126), or MoveJointsRel (page 128) should be used, respectively.", "source": "mcs500_programming_manual", "chunk_index": 324, "length": 810, "hash": "3a1c3be95797866649c209c734811362"}
{"id": "mcs500_programming_manual_325", "text": "As mentioned in the previous section, the conventional method for moving an industrial\nrobot involves either commanding its end-effector to reach a desired pose along a specified\nCartesian path or directing its joints to rotate to a desired joint set. This basic control method\nis called", "source": "mcs500_programming_manual", "chunk_index": 325, "length": 287, "hash": "02de525d63c9ed77c97a1ccc89394b69"}
{"id": "mcs500_programming_manual_326", "text": "(page 340). If the robot needs to follow a linear path, the Cartesian-\nspace motion commands", "source": "mcs500_programming_manual", "chunk_index": 326, "length": 92, "hash": "51ff6717b00bc4220caaa5f04910d287"}
{"id": "mcs500_programming_manual_327", "text": "(page 135) should be used. To move the robot\u2019s end-effector to a specific pose (without\nconcern for the path followed by the end-effector) or to rotate the robot\u2019s joints to a given\njoint set or by a specified amount, the joint-space motion commands", "source": "mcs500_programming_manual", "chunk_index": 327, "length": 249, "hash": "fd05d0405b364cd0c54b86ce8febee18"}
{"id": "mcs500_programming_manual_328", "text": "(page 128) should be used, respectively.", "source": "mcs500_programming_manual", "chunk_index": 328, "length": 40, "hash": "e1068325f6edaac63115c28bbf5a1f0e"}
{"id": "mcs500_programming_manual_329", "text": "In position mode, with Cartesian-space motion commands,\nit is possible to specify the\nmaximum linear and angular velocities, and the maximum accelerations for the end-effector.\nAlternatively, you can specify the time duration of your movement. However, you cannot\nset a limit on the joint accelerations. Thus, if the robot executes a Cartesian-space motion\ncommand and passes very close to a singular robot posture, even if its end-effector speed\nand accelerations are very small, some joints may rotate at maximum speed (as defined\nby SetJointVelLimit (page 152)) and with maximum acceleration. Similarly, with joint-space\nmotion commands, it is possible to specify the maximum velocity and acceleration of the joints\nor the time duration of the movement. However, it is impossible to limit either the velocity\nor the acceleration of the robot\u2019s end-effector. Figure 7 summarizes the possible settings for\nthe velocity and acceleration in position mode.", "source": "mcs500_programming_manual", "chunk_index": 329, "length": 954, "hash": "55cdbe5abd9e7bed2ef10f1eb076b627"}
{"id": "mcs500_programming_manual_330", "text": "In position mode, with Cartesian-space motion commands,\nit is possible to specify the\nmaximum linear and angular velocities, and the maximum accelerations for the end-effector.\nAlternatively, you can specify the time duration of your movement. However, you cannot", "source": "mcs500_programming_manual", "chunk_index": 330, "length": 263, "hash": "d21e49aac768c783ef76ec80317c2437"}
{"id": "mcs500_programming_manual_331", "text": "set a limit on the joint accelerations. Thus, if the robot executes a Cartesian-space motion\ncommand and passes very close to a singular robot posture, even if its end-effector speed\nand accelerations are very small, some joints may rotate at maximum speed (as defined\nby", "source": "mcs500_programming_manual", "chunk_index": 331, "length": 271, "hash": "ea173e7e48b967e7b82a05543f6fbd4f"}
{"id": "mcs500_programming_manual_332", "text": "(page 152)) and with maximum acceleration. Similarly, with joint-space\nmotion commands, it is possible to specify the maximum velocity and acceleration of the joints\nor the time duration of the movement. However, it is impossible to limit either the velocity\nor the acceleration of the robot\u2019s end-effector. Figure 7 summarizes the possible settings for\nthe velocity and acceleration in position mode.", "source": "mcs500_programming_manual", "chunk_index": 332, "length": 401, "hash": "8998883f44ffe733be47b0df17360b79"}
{"id": "mcs500_programming_manual_333", "text": "As mentioned, in position mode, you can specify either the desired velocities (SetJointVel\n(page 151) or SetCartLinVel (page 144) and SetCartAngVel (page 143)) or the movement\u2019s\ntime duration (SetMoveDuration (page 153)). This choice is made using the SetMoveMode\n(page 159) command.\nIn velocity-based position mode, the robot attempts to follow the\nspecified velocities without exceeding them while respecting acceleration limits. However,\nportions of the movement may not maintain the exact desired velocities, and the robot\nwill NOT notify you of these deviations.\nIn time-based position mode, you can use\nSetMoveDurationCfg (page 154) to define how the robot should respond if it cannot complete\nthe movement within the specified duration.", "source": "mcs500_programming_manual", "chunk_index": 333, "length": 743, "hash": "014ccd93de1a22d58106fdaeb75ac939"}
{"id": "mcs500_programming_manual_334", "text": "As mentioned, in position mode, you can specify either the desired velocities (", "source": "mcs500_programming_manual", "chunk_index": 334, "length": 79, "hash": "841c0c53e46507a1d1c78e63d1dbdc22"}
{"id": "mcs500_programming_manual_335", "text": "(page 143)) or the movement\u2019s\ntime duration (", "source": "mcs500_programming_manual", "chunk_index": 335, "length": 45, "hash": "f45cb10e2bbb9bedba7f7d2cb3de5b45"}
{"id": "mcs500_programming_manual_336", "text": "(page 153)). This choice is made using the", "source": "mcs500_programming_manual", "chunk_index": 336, "length": 42, "hash": "eef50000e7863c04387339012d0e0d82"}
{"id": "mcs500_programming_manual_337", "text": "(page 159) command.\nIn", "source": "mcs500_programming_manual", "chunk_index": 337, "length": 22, "hash": "a624bec21a7a57b4ac8474cac694c83c"}
{"id": "mcs500_programming_manual_338", "text": "velocity-based position mode", "source": "mcs500_programming_manual", "chunk_index": 338, "length": 28, "hash": "c3e619ba4c927af5346cbc6a00620fe7"}
{"id": "mcs500_programming_manual_339", "text": ", the robot attempts to follow the\nspecified velocities without exceeding them while respecting acceleration limits. However,\nportions of the movement may not maintain the exact desired velocities, and the robot\nwill NOT notify you of these deviations.\nIn", "source": "mcs500_programming_manual", "chunk_index": 339, "length": 255, "hash": "1699b62c56679f307a82a940a1c7c8e1"}
{"id": "mcs500_programming_manual_340", "text": "time-based position mode", "source": "mcs500_programming_manual", "chunk_index": 340, "length": 24, "hash": "e370cbfc995bfa6c23819c2b2718fdd6"}
{"id": "mcs500_programming_manual_341", "text": "(page 154) to define how the robot should respond if it cannot complete\nthe movement within the specified duration.", "source": "mcs500_programming_manual", "chunk_index": 341, "length": 115, "hash": "7e52629e2608a2187a4fbdd884397d69"}
{"id": "mcs500_programming_manual_342", "text": "There is a second method to control a Mecademic robot, by defining either its end-effector\nvelocity or its joint velocities. This robot control method is called the velocity mode (page 341).\nVelocity mode is designed for advanced applications such as force control, dynamic path\ncorrections, or telemanipulation (for example, the jogging feature in the MecaPortal is\nimplemented using velocity-mode commands).", "source": "mcs500_programming_manual", "chunk_index": 342, "length": 409, "hash": "7c05e2d331694e67157b2a76ef55168a"}
{"id": "mcs500_programming_manual_343", "text": "There is a second method to control a Mecademic robot, by defining either its end-effector\nvelocity or its joint velocities. This robot control method is called the", "source": "mcs500_programming_manual", "chunk_index": 343, "length": 164, "hash": "f97ff20320faa386fcd1c31792f0e828"}
{"id": "mcs500_programming_manual_344", "text": "(page 341).\nVelocity mode is designed for advanced applications such as force control, dynamic path\ncorrections, or telemanipulation (for example, the jogging feature in the MecaPortal is\nimplemented using velocity-mode commands).", "source": "mcs500_programming_manual", "chunk_index": 344, "length": 230, "hash": "43bf5909be4c1d0d72865d8ebea38e86"}
{"id": "mcs500_programming_manual_345", "text": "(page 129), MoveLinVelTrf", "source": "mcs500_programming_manual", "chunk_index": 345, "length": 25, "hash": "ac3ad3386f5f4a59ad24ef2813f62136"}
{"id": "mcs500_programming_manual_346", "text": "Controlling the robot in velocity mode requires one of the three velocity-mode motion\n(page 136) or MoveLinVelWrf\ncommands: MoveJointsVel\n(page 137). Note that the effect from a velocity-mode motion command lasts the time specified\nin the SetVelTimeout (page 167) command or until a new velocity-mode command is received.\nThis timeout must be very small (the default value is 0.05 s, and the maximum value 1 s). For\nthe robot to continue moving after this timeout, another velocity-mode command can be sent\nbefore this timeout. This new command will immediately replace the previous command and", "source": "mcs500_programming_manual", "chunk_index": 346, "length": 594, "hash": "6fed6bddd376578ca1d3e55a8d35d3ed"}
{"id": "mcs500_programming_manual_347", "text": "Controlling the robot in velocity mode requires one of the three velocity-mode motion\n(page 136) or", "source": "mcs500_programming_manual", "chunk_index": 347, "length": 99, "hash": "10b48b181ec66af197d2415f0bbea7c7"}
{"id": "mcs500_programming_manual_348", "text": "(page 137). Note that the effect from a velocity-mode motion command lasts the time specified", "source": "mcs500_programming_manual", "chunk_index": 348, "length": 93, "hash": "804d4819cb54b7ade5a3113e737b2d1c"}
{"id": "mcs500_programming_manual_349", "text": "(page 167) command or until a new velocity-mode command is received.\nThis timeout must be very small (the default value is 0.05 s, and the maximum value 1 s). For\nthe robot to continue moving after this timeout, another velocity-mode command can be sent\nbefore this timeout. This new command will immediately replace the previous command and", "source": "mcs500_programming_manual", "chunk_index": 349, "length": 341, "hash": "3af4a70c319d0e4189a2b5d7519b46a6"}
{"id": "mcs500_programming_manual_350", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 350, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_351", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 351, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_352", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 352, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_353", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 353, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_354", "text": "restart the timeout. Position-mode and velocity-mode motion commands can be sent to the\nrobot, in any order. However, if the robot is moving in velocity mode, the only commands that\nwill be executed immediately, rather than after the velocity timeout, are other velocity-mode\nmotion commands and SetCheckpoint (page 145), GripperOpen (page 310) and GripperClose\n(page 309) commands.", "source": "mcs500_programming_manual", "chunk_index": 354, "length": 382, "hash": "f615dd02eae73b26bb65d942bf45866d"}
{"id": "mcs500_programming_manual_355", "text": "restart the timeout. Position-mode and velocity-mode motion commands can be sent to the\nrobot, in any order. However, if the robot is moving in velocity mode, the only commands that\nwill be executed immediately, rather than after the velocity timeout, are other velocity-mode\nmotion commands and", "source": "mcs500_programming_manual", "chunk_index": 355, "length": 295, "hash": "572d935b6c6614283801bd638be22142"}
{"id": "mcs500_programming_manual_356", "text": "(page 309) commands.", "source": "mcs500_programming_manual", "chunk_index": 356, "length": 20, "hash": "8d90796e25940c3a2661582f49dbd68c"}
{"id": "mcs500_programming_manual_357", "text": "There is a significant difference in the behavior of position- and velocity-mode motion\ncommands. In position mode, if a Cartesian-space motion command cannot be completely\nperformed due to a singularity or a joint limit, the motion will normally not start and a\nmotion error will be raised, that must be reset.", "source": "mcs500_programming_manual", "chunk_index": 357, "length": 311, "hash": "9566bdcb1cf6c6e7c29d717d427c33dd"}
{"id": "mcs500_programming_manual_358", "text": "There is a significant difference in the behavior of position- and velocity-mode motion\ncommands. In position mode, if a Cartesian-space motion command cannot be completely\nperformed due to a singularity or a joint limit, the motion will normally not start and a\nmotion error will be raised, that must be reset.", "source": "mcs500_programming_manual", "chunk_index": 358, "length": 311, "hash": "9566bdcb1cf6c6e7c29d717d427c33dd"}
{"id": "mcs500_programming_manual_359", "text": "In velocity mode, if the robot runs into a singularity that cannot be crossed or a joint limit,\nit will simply stop without raising an error. Furthermore, the velocity of the robot\u2019s end-\neffector or of the robot joints is directly controlled, but is subject to the constraint set\nby the SetJointVelLimit (page 152) command. The SetJointVelLimit (page 152) command\naffects the position-mode commands too. See Figure 7 for a complete description of how\nvelocity and acceleration settings affect the two modes.", "source": "mcs500_programming_manual", "chunk_index": 359, "length": 508, "hash": "5ebfe2a44899040552285b9b82207e96"}
{"id": "mcs500_programming_manual_360", "text": "In velocity mode, if the robot runs into a singularity that cannot be crossed or a joint limit,\nit will simply stop without raising an error. Furthermore, the velocity of the robot\u2019s end-", "source": "mcs500_programming_manual", "chunk_index": 360, "length": 187, "hash": "bcc688df6ed90b75497d1898251cf5e2"}
{"id": "mcs500_programming_manual_361", "text": "effector or of the robot joints is directly controlled, but is subject to the constraint set\nby the", "source": "mcs500_programming_manual", "chunk_index": 361, "length": 99, "hash": "d787356c463124e54de4c383edc7bbe0"}
{"id": "mcs500_programming_manual_362", "text": "(page 152) command. The", "source": "mcs500_programming_manual", "chunk_index": 362, "length": 23, "hash": "6ed2d4f228010765b2b6ee4ce6a560ac"}
{"id": "mcs500_programming_manual_363", "text": "(page 152) command\naffects the position-mode commands too. See Figure 7 for a complete description of how\nvelocity and acceleration settings affect the two modes.", "source": "mcs500_programming_manual", "chunk_index": 363, "length": 162, "hash": "7fb3f36f63b3ee80e0f70396387606c7"}
{"id": "mcs500_programming_manual_364", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 364, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_365", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 365, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_366", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 366, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_367", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 367, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_368", "text": "Figure 7: Settings that influence the robot motion in position and velocity modes. (Note:\nMoveJump (page 130) is always executed in velocity-based position mode)", "source": "mcs500_programming_manual", "chunk_index": 368, "length": 161, "hash": "3fe1a3ae5a5b0b5362b13b874bce05a1"}
{"id": "mcs500_programming_manual_369", "text": "Figure 7: Settings that influence the robot motion in position and velocity modes. (Note:", "source": "mcs500_programming_manual", "chunk_index": 369, "length": 89, "hash": "932f5b5b21626c627b0457f5ab94e49d"}
{"id": "mcs500_programming_manual_370", "text": "(page 130) is always executed in velocity-based position mode)", "source": "mcs500_programming_manual", "chunk_index": 370, "length": 62, "hash": "7a2784e1e59859a203c7b78d1064c7a5"}
{"id": "mcs500_programming_manual_371", "text": "The instantaneous command SetTimeScaling (page 202) affects all velocities,\naccelerations and even time durations (including the timeout set with SetVelTimeout\n(page 167) and the pause set with the Delay (page 125) command).", "source": "mcs500_programming_manual", "chunk_index": 371, "length": 224, "hash": "caf855ce3b9359a034201a213c0c0c81"}
{"id": "mcs500_programming_manual_372", "text": "The instantaneous command", "source": "mcs500_programming_manual", "chunk_index": 372, "length": 25, "hash": "609c5104198af4b2201da3377ba57e51"}
{"id": "mcs500_programming_manual_373", "text": "(page 202) affects all velocities,\naccelerations and even time durations (including the timeout set with", "source": "mcs500_programming_manual", "chunk_index": 373, "length": 104, "hash": "56476aac15fc200c45d114cf0d4b3a8c"}
{"id": "mcs500_programming_manual_374", "text": "(page 167) and the pause set with the", "source": "mcs500_programming_manual", "chunk_index": 374, "length": 37, "hash": "86c249a65de1f07d1c1474acf942e770"}
{"id": "mcs500_programming_manual_375", "text": "(page 125) command).", "source": "mcs500_programming_manual", "chunk_index": 375, "length": 20, "hash": "98abffd4c3c81e18f07aed0f99ca5c14"}
{"id": "mcs500_programming_manual_376", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 376, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_377", "text": "Position and velocity modes", "source": "mcs500_programming_manual", "chunk_index": 377, "length": 27, "hash": "8a8514ed078c3d68f2f80b7ce0688e81"}
{"id": "mcs500_programming_manual_378", "text": "TCP/IP communication", "source": "mcs500_programming_manual", "chunk_index": 378, "length": 20, "hash": "0c0aa463c82953a4ce9d66b63dd1a4a9"}
{"id": "mcs500_programming_manual_379", "text": "TCP/IP communication", "source": "mcs500_programming_manual", "chunk_index": 379, "length": 20, "hash": "0c0aa463c82953a4ce9d66b63dd1a4a9"}
{"id": "mcs500_programming_manual_380", "text": "Mecademic robots must be connected to a computer or to a PLC over Ethernet. API commands\nmay be sent through Mecademic\u2019s web interface, the MecaPortal, or through a custom\ncomputer program using either the TCP/IP protocol, as detailed in the remainder of this\nsection, or any of three cyclic protocols, as detailed in the next three sections. When the\nrobot communicates using the TCP/IP protocol, it uses null-terminated ASCII strings. The\ndefault robot IP address is 192.168.0.100, and its default TCP port is 10000, referred to as\nthe control port (page 339). Commands to and messages from the robot are sent over the\ncontrol port. The robot will periodically send data over TCP port 10001, referred to as the\nmonitoring port (page 340), at the rate specified by the SetMonitoringInterval (page 192)\ncommand. This data includes the joint set and TRF pose (only when it changes), and\nother optional data enabled with the SetRealTimeMonitoring (page 196) command. To avoid\ndesynchronization between the data received from both parts, it is possible to send a copy of\nthe monitoring port data to the control port data with the SetCtrlPortMonitoring (page 187)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 380, "length": 1168, "hash": "b65e2e3324724333ff9b188880a57b87"}
{"id": "mcs500_programming_manual_381", "text": "Mecademic robots must be connected to a computer or to a PLC over Ethernet. API commands\nmay be sent through Mecademic\u2019s web interface, the MecaPortal, or through a custom\ncomputer program using either the TCP/IP protocol, as detailed in the remainder of this\nsection, or any of three cyclic protocols, as detailed in the next three sections. When the\nrobot communicates using the TCP/IP protocol, it uses null-terminated ASCII strings.", "source": "mcs500_programming_manual", "chunk_index": 381, "length": 436, "hash": "914ea25498265f1669417cf586039097"}
{"id": "mcs500_programming_manual_382", "text": "The\ndefault robot IP address is 192.168.0.100, and its default TCP port is 10000", "source": "mcs500_programming_manual", "chunk_index": 382, "length": 80, "hash": "8e088d6d7ea35810facb6c1d912f6c33"}
{"id": "mcs500_programming_manual_383", "text": ", referred to as\nthe", "source": "mcs500_programming_manual", "chunk_index": 383, "length": 20, "hash": "108420139741a1af7c8b84023429567f"}
{"id": "mcs500_programming_manual_384", "text": "(page 339). Commands to and messages from the robot are sent over the\ncontrol port. The robot will periodically send data over", "source": "mcs500_programming_manual", "chunk_index": 384, "length": 126, "hash": "1879953cd7afacb006dfc5a265ba6174"}
{"id": "mcs500_programming_manual_385", "text": ", referred to as the", "source": "mcs500_programming_manual", "chunk_index": 385, "length": 20, "hash": "6b61e4c4e38ef7f0b7f11c8884b239f1"}
{"id": "mcs500_programming_manual_386", "text": "(page 340), at the rate specified by the", "source": "mcs500_programming_manual", "chunk_index": 386, "length": 40, "hash": "69b612fb23f5126f01e29293abf302ac"}
{"id": "mcs500_programming_manual_387", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 387, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_388", "text": "(page 192)\ncommand. This data includes the joint set and TRF pose (only when it changes), and\nother optional data enabled with the", "source": "mcs500_programming_manual", "chunk_index": 388, "length": 130, "hash": "856f93d89c680939ed6f081393c0550f"}
{"id": "mcs500_programming_manual_389", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 389, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_390", "text": "(page 196) command. To avoid", "source": "mcs500_programming_manual", "chunk_index": 390, "length": 28, "hash": "c57079f5c2366da30fe46a4c47844b5c"}
{"id": "mcs500_programming_manual_391", "text": "desynchronization between the data received from both parts, it is possible to send a copy of\nthe monitoring port data to the control port data with the", "source": "mcs500_programming_manual", "chunk_index": 391, "length": 152, "hash": "21b27adb8706cb7071a1a39f5dca3cab"}
{"id": "mcs500_programming_manual_392", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 392, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_393", "text": "API commands are regrouped in the following categories, in terms of functionality:", "source": "mcs500_programming_manual", "chunk_index": 393, "length": 82, "hash": "44ee47a90bebf47b3a581b77c350ff19"}
{"id": "mcs500_programming_manual_394", "text": "API commands are regrouped in the following categories, in terms of functionality:", "source": "mcs500_programming_manual", "chunk_index": 394, "length": 82, "hash": "44ee47a90bebf47b3a581b77c350ff19"}
{"id": "mcs500_programming_manual_395", "text": "\u2022 motion commands (page 340), which are the commands used to construct the\nrobot trajectory (e.g., Delay (page 125), MoveJoints (page 126), SetTRF (page 166),\nSetBlending (page 141)),", "source": "mcs500_programming_manual", "chunk_index": 395, "length": 183, "hash": "eb194996c0254cf45c67ba6cf68b0732"}
{"id": "mcs500_programming_manual_396", "text": "(page 340), which are the commands used to construct the\nrobot trajectory (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 396, "length": 80, "hash": "6953826b6b88a42eb8e6ada64ea51add"}
{"id": "mcs500_programming_manual_397", "text": "\u2022 robot control commands (page 340), which are commands used to control the robot (e.g.,\nActivateRobot (page 171), PauseMotion (page 182), SetNetworkOptions (page 193)),", "source": "mcs500_programming_manual", "chunk_index": 397, "length": 169, "hash": "94a0fa0acc750df2d96663421b3f51ca"}
{"id": "mcs500_programming_manual_398", "text": "robot control commands", "source": "mcs500_programming_manual", "chunk_index": 398, "length": 22, "hash": "76125ada5f59cf4007423506c75d1afe"}
{"id": "mcs500_programming_manual_399", "text": "(page 340), which are commands used to control the robot (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 399, "length": 63, "hash": "b9496bec3d75733b596a4fb7c85e96b6"}
{"id": "mcs500_programming_manual_400", "text": "\u2022 data request commands (page 339), which are commands used to request some data\nregarding the robot (e.g., GetTRF (page 251), GetBlending (page 215), GetJointVel\n(page 229)),", "source": "mcs500_programming_manual", "chunk_index": 400, "length": 175, "hash": "f3da02ed6c35ceb9d0c1debdb8e8cde0"}
{"id": "mcs500_programming_manual_401", "text": "data request commands", "source": "mcs500_programming_manual", "chunk_index": 401, "length": 21, "hash": "98619a04001f4cb3e796fb1870e56f10"}
{"id": "mcs500_programming_manual_402", "text": "(page 339), which are commands used to request some data\nregarding the robot (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 402, "length": 83, "hash": "d5ab4900baeb75b0838aaa144136f5bf"}
{"id": "mcs500_programming_manual_403", "text": "\u2022 real-time data request commands (page 340), which are commands used to request some\nreal-time data regarding the robot (e.g., GetRtTrf (page 273), GetRtCartPos (page 259),\nGetStatusRobot (page 277)),", "source": "mcs500_programming_manual", "chunk_index": 403, "length": 201, "hash": "bd6cb50271c855a60072da125073bb34"}
{"id": "mcs500_programming_manual_404", "text": "real-time data request commands", "source": "mcs500_programming_manual", "chunk_index": 404, "length": 31, "hash": "4f75e7b3ce56efd38db92f8a466049e1"}
{"id": "mcs500_programming_manual_405", "text": "(page 340), which are commands used to request some\nreal-time data regarding the robot (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 405, "length": 93, "hash": "9845cbcda43388e63703b0d117028723"}
{"id": "mcs500_programming_manual_406", "text": "\u2022 work zone supervision and collision detection commands, which are commands used to\nset a bounding box for the robot and its tooling and define collision conditions, and query\nthese settings and related statuses,", "source": "mcs500_programming_manual", "chunk_index": 406, "length": 213, "hash": "dcfd077f3499d86cc5fcbf97c4bdf952"}
{"id": "mcs500_programming_manual_407", "text": "\u2022 work zone supervision and collision detection commands, which are commands used to\nset a bounding box for the robot and its tooling and define collision conditions, and query\nthese settings and related statuses,", "source": "mcs500_programming_manual", "chunk_index": 407, "length": 213, "hash": "dcfd077f3499d86cc5fcbf97c4bdf952"}
{"id": "mcs500_programming_manual_408", "text": "\u2022 optional accessories commands, which are commands used to control or request data", "source": "mcs500_programming_manual", "chunk_index": 408, "length": 83, "hash": "615a6b2c9c769b4e5719ec43df5cfd4e"}
{"id": "mcs500_programming_manual_409", "text": "\u2022 optional accessories commands, which are commands used to control or request data", "source": "mcs500_programming_manual", "chunk_index": 409, "length": 83, "hash": "615a6b2c9c769b4e5719ec43df5cfd4e"}
{"id": "mcs500_programming_manual_410", "text": "from the optional tools and modules for our robots (i.e.,", "source": "mcs500_programming_manual", "chunk_index": 410, "length": 57, "hash": "b15f4b9a91380838c3a72204ef42c0f0"}
{"id": "mcs500_programming_manual_411", "text": "from the optional tools and modules for our robots (i.e.,", "source": "mcs500_programming_manual", "chunk_index": 411, "length": 57, "hash": "b15f4b9a91380838c3a72204ef42c0f0"}
{"id": "mcs500_programming_manual_412", "text": "the vacuum and I/O module).", "source": "mcs500_programming_manual", "chunk_index": 412, "length": 27, "hash": "5789854eb1d65c87124ac9ede74afdf1"}
{"id": "mcs500_programming_manual_413", "text": "the vacuum and I/O module).", "source": "mcs500_programming_manual", "chunk_index": 413, "length": 27, "hash": "5789854eb1d65c87124ac9ede74afdf1"}
{"id": "mcs500_programming_manual_414", "text": "\u2022 commands for managing variables, which allow the definition and management of", "source": "mcs500_programming_manual", "chunk_index": 414, "length": 79, "hash": "9698a0e701fbe0565aadcf1524609a0b"}
{"id": "mcs500_programming_manual_415", "text": "\u2022 commands for managing variables, which allow the definition and management of", "source": "mcs500_programming_manual", "chunk_index": 415, "length": 79, "hash": "9698a0e701fbe0565aadcf1524609a0b"}
{"id": "mcs500_programming_manual_416", "text": "persistent variables.", "source": "mcs500_programming_manual", "chunk_index": 416, "length": 21, "hash": "24c701d2bb8b8c529b912b12169d85a7"}
{"id": "mcs500_programming_manual_417", "text": "persistent variables.", "source": "mcs500_programming_manual", "chunk_index": 417, "length": 21, "hash": "24c701d2bb8b8c529b912b12169d85a7"}
{"id": "mcs500_programming_manual_418", "text": "However, commands can also be categorized in terms of whether they are executed\nimmediately or not. Queued commands (page 340) are placed in a motion queue (page 340),\nonce received by the robot, and are executed on a FIFO basis. All motion commands and", "source": "mcs500_programming_manual", "chunk_index": 418, "length": 253, "hash": "a450965a540564dcb06b69cd89b409e3"}
{"id": "mcs500_programming_manual_419", "text": "However, commands can also be categorized in terms of whether they are executed\nimmediately or not.", "source": "mcs500_programming_manual", "chunk_index": 419, "length": 99, "hash": "755caa1715f043399623bca28a893c96"}
{"id": "mcs500_programming_manual_420", "text": "(page 340) are placed in a", "source": "mcs500_programming_manual", "chunk_index": 420, "length": 26, "hash": "3c76e34c57d27a53f80cae439b54e637"}
{"id": "mcs500_programming_manual_421", "text": "(page 340),\nonce received by the robot, and are executed on a FIFO basis. All motion commands and", "source": "mcs500_programming_manual", "chunk_index": 421, "length": 97, "hash": "bfcd134f5c66bcaa7e580e46b7bcedf9"}
{"id": "mcs500_programming_manual_422", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 422, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_423", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 423, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_424", "text": "some external tool commands are queued. Instantaneous commands (page 339) are executed\nimmediately, as soon as received by the robot. All data request commands (Get*), all robot\ncontrol commands, all Work zone supervision and collision prevention commands and some\noptional accessories (*_Immediate) are instantaneous.", "source": "mcs500_programming_manual", "chunk_index": 424, "length": 318, "hash": "22f4f7256d978593ec9fcaaeabe3ebd2"}
{"id": "mcs500_programming_manual_425", "text": "some external tool commands are queued.", "source": "mcs500_programming_manual", "chunk_index": 425, "length": 39, "hash": "22ba437274ae30dd70f27904a8bc1af6"}
{"id": "mcs500_programming_manual_426", "text": "Instantaneous commands", "source": "mcs500_programming_manual", "chunk_index": 426, "length": 22, "hash": "ec6f18fbbd80c18879195a711a2e0f10"}
{"id": "mcs500_programming_manual_427", "text": "(page 339) are executed\nimmediately, as soon as received by the robot. All data request commands (Get*), all robot\ncontrol commands, all Work zone supervision and collision prevention commands and some\noptional accessories (*_Immediate) are instantaneous.", "source": "mcs500_programming_manual", "chunk_index": 427, "length": 255, "hash": "b260f89e185583fb3cd608988d949651"}
{"id": "mcs500_programming_manual_428", "text": "Finally, some command descriptions refer to default values (page 339): these are essentially\nvariables that are initialized every time the robot boots. Of these, those that correspond\nto motion commands are also initialized every time the robot is deactivated (e.g., after an\nemergency stop). In contrast, certain parameter values are persistent (page 340): they have\nmanufacturer\u2019s default values, but the changes you make to these are written on an SD drive\nand persist even if you power off the robot.", "source": "mcs500_programming_manual", "chunk_index": 428, "length": 504, "hash": "ec4c1138e65646856f39503ced78e0de"}
{"id": "mcs500_programming_manual_429", "text": "Finally, some command descriptions refer to", "source": "mcs500_programming_manual", "chunk_index": 429, "length": 43, "hash": "4b98594824e42b412c993ab85377fc75"}
{"id": "mcs500_programming_manual_430", "text": "(page 339): these are essentially\nvariables that are initialized every time the robot boots. Of these, those that correspond\nto motion commands are also initialized every time the robot is deactivated (e.g., after an\nemergency stop). In contrast, certain parameter values are", "source": "mcs500_programming_manual", "chunk_index": 430, "length": 275, "hash": "baa13e8fe5bf97f684c09da327a422ac"}
{"id": "mcs500_programming_manual_431", "text": "(page 340): they have\nmanufacturer\u2019s default values, but the changes you make to these are written on an SD drive\nand persist even if you power off the robot.", "source": "mcs500_programming_manual", "chunk_index": 431, "length": 158, "hash": "fd1e9e3eaec58986b3c0cb91546c477f"}
{"id": "mcs500_programming_manual_432", "text": "For convenience, since TCP API commands used in the TCP/IP protocol form the backbone\nof other communication protocols, they are presented in a separate part of this manual.", "source": "mcs500_programming_manual", "chunk_index": 432, "length": 173, "hash": "389630ed737f15e0941e7a7187a93080"}
{"id": "mcs500_programming_manual_433", "text": "For convenience, since TCP API commands used in the TCP/IP protocol form the backbone", "source": "mcs500_programming_manual", "chunk_index": 433, "length": 85, "hash": "6659a6982444921242b282cf5ccf863f"}
{"id": "mcs500_programming_manual_434", "text": "of other communication protocols, they are presented in a separate part of this manual.", "source": "mcs500_programming_manual", "chunk_index": 434, "length": 87, "hash": "7e8d1e2a32d625fc8d9f9db77de66c68"}
{"id": "mcs500_programming_manual_435", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 435, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_436", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 436, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_437", "text": "Responses and messages", "source": "mcs500_programming_manual", "chunk_index": 437, "length": 22, "hash": "878d9bb08875e220cd26c11bb7206a6c"}
{"id": "mcs500_programming_manual_438", "text": "Responses and messages", "source": "mcs500_programming_manual", "chunk_index": 438, "length": 22, "hash": "878d9bb08875e220cd26c11bb7206a6c"}
{"id": "mcs500_programming_manual_439", "text": "Every Mecademic robot sends responses and messages over its control port in various\nsituations: when it encounters an error, receives a request or certain motion commands,\nor experiences a status change. Additionally, the robot periodically or occasionally sends\nsimilar responses and messages, along with other information, on its monitoring port.", "source": "mcs500_programming_manual", "chunk_index": 439, "length": 348, "hash": "5d64a0f95e4f143914c5dc2a9ccabab6"}
{"id": "mcs500_programming_manual_440", "text": "Every Mecademic robot sends responses and messages over its control port in various\nsituations: when it encounters an error, receives a request or certain motion commands,\nor experiences a status change. Additionally, the robot periodically or occasionally sends\nsimilar responses and messages, along with other information, on its monitoring port.", "source": "mcs500_programming_manual", "chunk_index": 440, "length": 348, "hash": "5d64a0f95e4f143914c5dc2a9ccabab6"}
{"id": "mcs500_programming_manual_441", "text": "All responses and messages from the robot are formatted as ASCII strings in the following\nstructure:", "source": "mcs500_programming_manual", "chunk_index": 441, "length": 100, "hash": "be14471781585ff6bd71d6f0715f6d06"}
{"id": "mcs500_programming_manual_442", "text": "All responses and messages from the robot are formatted as ASCII strings in the following\nstructure:", "source": "mcs500_programming_manual", "chunk_index": 442, "length": 100, "hash": "be14471781585ff6bd71d6f0715f6d06"}
{"id": "mcs500_programming_manual_443", "text": "[4-digit code][text message OR comma-separated return values]", "source": "mcs500_programming_manual", "chunk_index": 443, "length": 61, "hash": "1ccf4326dc193a6f6a79424e13db0441"}
{"id": "mcs500_programming_manual_444", "text": "[4-digit code][text message OR comma-separated return values]", "source": "mcs500_programming_manual", "chunk_index": 444, "length": 61, "hash": "1ccf4326dc193a6f6a79424e13db0441"}
{"id": "mcs500_programming_manual_445", "text": "The second part of a response or message consists of either a descriptive text or a set of\ncomma-separated return values. Descriptive text is intended to provide information to the\nuser and is subject to change without prior notice. For example, the description \u201cHoming\nfailed\u201d may later be updated to \u201cHoming has failed.\u201d Therefore, you should rely solely on the\nfour-digit code when processing messages.", "source": "mcs500_programming_manual", "chunk_index": 445, "length": 405, "hash": "d18d211809dec4c2f243689d658b706d"}
{"id": "mcs500_programming_manual_446", "text": "The second part of a response or message consists of either a descriptive text or a set of\ncomma-separated return values. Descriptive text is intended to provide information to the", "source": "mcs500_programming_manual", "chunk_index": 446, "length": 180, "hash": "9378b02b3a06d5dec78d99b751e64005"}
{"id": "mcs500_programming_manual_447", "text": "user and is subject to change without prior notice. For example, the description \u201cHoming\nfailed\u201d may later be updated to \u201cHoming has failed.\u201d Therefore, you should rely solely on the\nfour-digit code when processing messages.", "source": "mcs500_programming_manual", "chunk_index": 447, "length": 224, "hash": "af3d14c81de87573a880e848dd41ba33"}
{"id": "mcs500_programming_manual_448", "text": "Any changes to these codes or the format of comma-separated return values will always be\ndocumented in the firmware upgrade manual. Return values are provided as either integers\nor IEEE-754 floating-point numbers with up to nine decimal places.", "source": "mcs500_programming_manual", "chunk_index": 448, "length": 244, "hash": "4c5fcc421408a36e27da599b4b3c50ae"}
{"id": "mcs500_programming_manual_449", "text": "Any changes to these codes or the format of comma-separated return values will always be\ndocumented in the firmware upgrade manual. Return values are provided as either integers\nor IEEE-754 floating-point numbers with up to nine decimal places.", "source": "mcs500_programming_manual", "chunk_index": 449, "length": 244, "hash": "4c5fcc421408a36e27da599b4b3c50ae"}
{"id": "mcs500_programming_manual_450", "text": "When the robot encounters an error while executing a command, it goes into error mode. See\nSection 4 for details on how to manage these errors. The following table lists all command\nerror messages. These messages are sent on the control port.", "source": "mcs500_programming_manual", "chunk_index": 450, "length": 242, "hash": "dacf514c6efc2b0efe66e6f7a9ca5f04"}
{"id": "mcs500_programming_manual_451", "text": "When the robot encounters an error while executing a command, it goes into error mode. See\nSection 4 for details on how to manage these errors. The following table lists all command\nerror messages.", "source": "mcs500_programming_manual", "chunk_index": 451, "length": 197, "hash": "637f30d2891d3c191ad659dba76a8337"}
{"id": "mcs500_programming_manual_452", "text": "These messages are sent on the control port.", "source": "mcs500_programming_manual", "chunk_index": 452, "length": 44, "hash": "4bd7852bc1202ee3601f802e52530b27"}
{"id": "mcs500_programming_manual_453", "text": "Table 1: Error messages; sent on the control port only", "source": "mcs500_programming_manual", "chunk_index": 453, "length": 54, "hash": "cccd707add6e7378788fcd0cf8008c87"}
{"id": "mcs500_programming_manual_454", "text": "Table 1: Error messages; sent on the control port only", "source": "mcs500_programming_manual", "chunk_index": 454, "length": 54, "hash": "cccd707add6e7378788fcd0cf8008c87"}
{"id": "mcs500_programming_manual_455", "text": "[1000][Command buffer is full.]", "source": "mcs500_programming_manual", "chunk_index": 455, "length": 31, "hash": "e472c6b8c5586caf6085ed6ca4c0aefa"}
{"id": "mcs500_programming_manual_456", "text": "[1000][Command buffer is full.]", "source": "mcs500_programming_manual", "chunk_index": 456, "length": 31, "hash": "e472c6b8c5586caf6085ed6ca4c0aefa"}
{"id": "mcs500_programming_manual_457", "text": "or\n[1001][Empty\nunrecognized. - Command: \u2018\u2026\u2019]\n[1002][Syntax error, symbol missing.\nCommand: \u2018\u2026\u2019]\n[1003][Argument error. - Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 457, "length": 135, "hash": "44e5a4b324d1380e4fd09e5db36f06e3"}
{"id": "mcs500_programming_manual_458", "text": "or\n[1001][Empty\nunrecognized. - Command: \u2018\u2026\u2019]\n[1002][Syntax error, symbol missing.\nCommand: \u2018\u2026\u2019]\n[1003][Argument error. - Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 458, "length": 135, "hash": "44e5a4b324d1380e4fd09e5db36f06e3"}
{"id": "mcs500_programming_manual_459", "text": "[1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 459, "length": 35, "hash": "aa65790704b5c4fb6e74d95977bfd1ee"}
{"id": "mcs500_programming_manual_460", "text": "[1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 460, "length": 35, "hash": "aa65790704b5c4fb6e74d95977bfd1ee"}
{"id": "mcs500_programming_manual_461", "text": "Maximum number of queued commands\nreached. Retry by sending commands at a\nslower rate.\nUnknown or empty command.", "source": "mcs500_programming_manual", "chunk_index": 461, "length": 112, "hash": "8c14a1012e84654ff8a670530dd4d41f"}
{"id": "mcs500_programming_manual_462", "text": "Maximum number of queued commands\nreached. Retry by sending commands at a\nslower rate.\nUnknown or empty command.", "source": "mcs500_programming_manual", "chunk_index": 462, "length": 112, "hash": "8c14a1012e84654ff8a670530dd4d41f"}
{"id": "mcs500_programming_manual_463", "text": "A parenthesis or a comma has been omitted.", "source": "mcs500_programming_manual", "chunk_index": 463, "length": 42, "hash": "401843938cab854d10af6dfeb738823b"}
{"id": "mcs500_programming_manual_464", "text": "A parenthesis or a comma has been omitted.", "source": "mcs500_programming_manual", "chunk_index": 464, "length": 42, "hash": "401843938cab854d10af6dfeb738823b"}
{"id": "mcs500_programming_manual_465", "text": "Wrong number of arguments or invalid input\n(e.g., the argument is out of range).\nThe robot must be activated,\nbefore\nexecuting the command that caused this\nerror.", "source": "mcs500_programming_manual", "chunk_index": 465, "length": 162, "hash": "7e2b05ef5c770237a349a613ed0e614d"}
{"id": "mcs500_programming_manual_466", "text": "Wrong number of arguments or invalid input\n(e.g., the argument is out of range).", "source": "mcs500_programming_manual", "chunk_index": 466, "length": 80, "hash": "228ef41208504d4789e284bcfca48ed6"}
{"id": "mcs500_programming_manual_467", "text": "The robot must be activated,\nbefore\nexecuting the command that caused this\nerror.", "source": "mcs500_programming_manual", "chunk_index": 467, "length": 81, "hash": "7254940d112d5b0458632e29a4cf51d8"}
{"id": "mcs500_programming_manual_468", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 468, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_469", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 469, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_470", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 470, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_471", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 471, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_472", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 472, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_473", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 473, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_474", "text": "[1006][The robot is not homed.]", "source": "mcs500_programming_manual", "chunk_index": 474, "length": 31, "hash": "2678e68db28c245332539e8a4f72c7aa"}
{"id": "mcs500_programming_manual_475", "text": "[1006][The robot is not homed.]", "source": "mcs500_programming_manual", "chunk_index": 475, "length": 31, "hash": "2678e68db28c245332539e8a4f72c7aa"}
{"id": "mcs500_programming_manual_476", "text": "[1007][Joint over limit (\u2026 is not in range\n[\u2026,\u2026] for joint \u2026). - Command: \u2018\u2026\u2019.]", "source": "mcs500_programming_manual", "chunk_index": 476, "length": 79, "hash": "ed59a8ba434ecbfcda71e9afb9cc11b1"}
{"id": "mcs500_programming_manual_477", "text": "[1007][Joint over limit (\u2026 is not in range\n[\u2026,\u2026] for joint \u2026). - Command: \u2018\u2026\u2019.]", "source": "mcs500_programming_manual", "chunk_index": 477, "length": 79, "hash": "ed59a8ba434ecbfcda71e9afb9cc11b1"}
{"id": "mcs500_programming_manual_478", "text": "[1010][Linear move is blocked because a\n-\njoint would rotate by more than 180deg.\nCommand: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 478, "length": 95, "hash": "7ef4c8537cd1ef63b48c98964c05346a"}
{"id": "mcs500_programming_manual_479", "text": "[1010][Linear move is blocked because a\n-\njoint would rotate by more than 180deg.\nCommand: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 479, "length": 95, "hash": "7ef4c8537cd1ef63b48c98964c05346a"}
{"id": "mcs500_programming_manual_480", "text": "[1011][The robot is in error.]", "source": "mcs500_programming_manual", "chunk_index": 480, "length": 30, "hash": "55a6a617d265973729905c1762fe6341"}
{"id": "mcs500_programming_manual_481", "text": "[1011][The robot is in error.]", "source": "mcs500_programming_manual", "chunk_index": 481, "length": 30, "hash": "55a6a617d265973729905c1762fe6341"}
{"id": "mcs500_programming_manual_482", "text": "[1012][Linear move is blocked because it\nrequires a reorientation of 180 degrees of\nthe end- effector - Command: \u2018\u2026\u2019.]", "source": "mcs500_programming_manual", "chunk_index": 482, "length": 118, "hash": "8aaf05e9e1a90af61b4cb0bc3c511a6d"}
{"id": "mcs500_programming_manual_483", "text": "[1012][Linear move is blocked because it\nrequires a reorientation of 180 degrees of\nthe end- effector - Command: \u2018\u2026\u2019.]", "source": "mcs500_programming_manual", "chunk_index": 483, "length": 118, "hash": "8aaf05e9e1a90af61b4cb0bc3c511a6d"}
{"id": "mcs500_programming_manual_484", "text": "[1013][Activation failed.]", "source": "mcs500_programming_manual", "chunk_index": 484, "length": 26, "hash": "25677f32ea33285f8e0655d6883bbc1c"}
{"id": "mcs500_programming_manual_485", "text": "[1013][Activation failed.]", "source": "mcs500_programming_manual", "chunk_index": 485, "length": 26, "hash": "25677f32ea33285f8e0655d6883bbc1c"}
{"id": "mcs500_programming_manual_486", "text": "[1014][Homing failed.]", "source": "mcs500_programming_manual", "chunk_index": 486, "length": 22, "hash": "530ee7c89d930646f81b406cd1ab94df"}
{"id": "mcs500_programming_manual_487", "text": "[1014][Homing failed.]", "source": "mcs500_programming_manual", "chunk_index": 487, "length": 22, "hash": "530ee7c89d930646f81b406cd1ab94df"}
{"id": "mcs500_programming_manual_488", "text": "[1016][Destination pose out of reach for\nany configuration. - Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 488, "length": 75, "hash": "f5d2fb78803ba110e4700c9c82beeea3"}
{"id": "mcs500_programming_manual_489", "text": "[1016][Destination pose out of reach for\nany configuration. - Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 489, "length": 75, "hash": "f5d2fb78803ba110e4700c9c82beeea3"}
{"id": "mcs500_programming_manual_490", "text": "[1016][Destination pose out of reach for\nselected conf(\u2026,\u2026,\u2026 turn \u2026). - Command:\n\u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 490, "length": 85, "hash": "72b180227dbd5dccb0097df41c77a22c"}
{"id": "mcs500_programming_manual_491", "text": "[1016][Destination pose out of reach for\nselected conf(\u2026,\u2026,\u2026 turn \u2026). - Command:\n\u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 491, "length": 85, "hash": "72b180227dbd5dccb0097df41c77a22c"}
{"id": "mcs500_programming_manual_492", "text": "[1016][The requested linear move is not\npossible due to a pose out of reach along\nthe path. - Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 492, "length": 107, "hash": "bb9d12b2babec2cfe6eeab0898c35c67"}
{"id": "mcs500_programming_manual_493", "text": "[1016][The requested linear move is not\npossible due to a pose out of reach along\nthe path. - Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 493, "length": 107, "hash": "bb9d12b2babec2cfe6eeab0898c35c67"}
{"id": "mcs500_programming_manual_494", "text": "[1022][Robot was not saving the program.]", "source": "mcs500_programming_manual", "chunk_index": 494, "length": 41, "hash": "c4e2f81e277a011c5351d5b00c00bc57"}
{"id": "mcs500_programming_manual_495", "text": "[1022][Robot was not saving the program.]", "source": "mcs500_programming_manual", "chunk_index": 495, "length": 41, "hash": "c4e2f81e277a011c5351d5b00c00bc57"}
{"id": "mcs500_programming_manual_496", "text": "The robot must be homed, before executing\nthe command that cased this error.\nThe robot cannot execute the MoveJoints\n(page 126) or MoveJointsRel (page 128)\ncommand because at least one joint is either\ncurrently outside or will move beyond the\nuser-defined limits.\nThe linear motion cannot be executed\nbecause it requires a reorientation of 180\u00b0\nof the end-effector, and there may be two\npossible paths.\nA command has been sent but the robot is\nin error mode and cannot process it until a\nResetError (page 184) command is sent.\nThe MoveLin (page 132) or MoveLinRel*\ncommand sent requires that the robot pass\nthrough a singularity that cannot be crossed\nor pass too close to a singularity with\nexcessive joint rotations.\nActivation failed (for example, because the\nSWStop is active).\nHoming procedure failed. Try again.\nrequested in the MoveLin\nThe pose\n(page\n132), MoveLinRel*, MovePose\n(page 138) or MoveJump (page 130)\ncommand is out of reach, with the desired\n(or with any) configurations.\nIn the case\nof the MoveLin (page 132) command, this\nerror code is also produced if a pose along\nthe path is out of reach.", "source": "mcs500_programming_manual", "chunk_index": 496, "length": 1113, "hash": "78cdc2e01123417a04714fb6e53626f0"}
{"id": "mcs500_programming_manual_497", "text": "The robot must be homed, before executing\nthe command that cased this error.\nThe robot cannot execute the", "source": "mcs500_programming_manual", "chunk_index": 497, "length": 105, "hash": "b8c3663cfbd54ae167d25cf79d49e977"}
{"id": "mcs500_programming_manual_498", "text": "(page 128)\ncommand because at least one joint is either\ncurrently outside or will move beyond the\nuser-defined limits.\nThe linear motion cannot be executed\nbecause it requires a reorientation of 180\u00b0\nof the end-effector, and there may be two\npossible paths.\nA command has been sent but the robot is", "source": "mcs500_programming_manual", "chunk_index": 498, "length": 298, "hash": "73d9dddbc90a19094a6a5392fed3bba1"}
{"id": "mcs500_programming_manual_499", "text": "in error mode and cannot process it until a", "source": "mcs500_programming_manual", "chunk_index": 499, "length": 43, "hash": "ffab78f0fd5fd82a17b1ca15ad140f84"}
{"id": "mcs500_programming_manual_500", "text": "(page 184) command is sent.\nThe", "source": "mcs500_programming_manual", "chunk_index": 500, "length": 31, "hash": "411d98071f81295a835e3fd87751185f"}
{"id": "mcs500_programming_manual_501", "text": "command sent requires that the robot pass\nthrough a singularity that cannot be crossed\nor pass too close to a singularity with\nexcessive joint rotations.\nActivation failed (for example, because the\nSWStop is active).\nHoming procedure failed. Try again.\nrequested in the", "source": "mcs500_programming_manual", "chunk_index": 501, "length": 269, "hash": "2902dc905046ab92b27b6ac1429c2606"}
{"id": "mcs500_programming_manual_502", "text": "The pose\n(page\n132), MoveLinRel*,", "source": "mcs500_programming_manual", "chunk_index": 502, "length": 33, "hash": "540891656ee502e07a4dec870f2fab82"}
{"id": "mcs500_programming_manual_503", "text": "(page 130)\ncommand is out of reach, with the desired\n(or with any) configurations.\nIn the case\nof the", "source": "mcs500_programming_manual", "chunk_index": 503, "length": 101, "hash": "405027da30459e1f5a9d6c2050e6f036"}
{"id": "mcs500_programming_manual_504", "text": "(page 132) command, this\nerror code is also produced if a pose along", "source": "mcs500_programming_manual", "chunk_index": 504, "length": 68, "hash": "c4bcee7f370766e9adfd3adac7d0ebb1"}
{"id": "mcs500_programming_manual_505", "text": "the path is out of reach.", "source": "mcs500_programming_manual", "chunk_index": 505, "length": 25, "hash": "fd22cf1922f8f9340918be684560d78d"}
{"id": "mcs500_programming_manual_506", "text": "The StopSaving (page 206) command was\nsent, but\nthe robot was not saving a\nprogram.\nThe command cannot be executed in the\noffline program.", "source": "mcs500_programming_manual", "chunk_index": 506, "length": 138, "hash": "0419a13bd2cc03a6f0545a3837ac82c0"}
{"id": "mcs500_programming_manual_507", "text": "(page 206) command was\nsent, but\nthe robot was not saving a\nprogram.\nThe command cannot be executed in the\noffline program.", "source": "mcs500_programming_manual", "chunk_index": 507, "length": 123, "hash": "176c047d20bd22ba49a5056f574f7ba2"}
{"id": "mcs500_programming_manual_508", "text": "[1023][Ignoring command for offline mode.\n- Command: \u2018\u2026\u2019]\n[1024][Mastering needed. - Command: \u2018\u2026\u2019] Mastering was lost. Contact Mecademic.\n[1025][Impossible to reset the error. Please,\npower-cycle the robot.]", "source": "mcs500_programming_manual", "chunk_index": 508, "length": 207, "hash": "0d46e319ba1f9f01aee7abb9c7d038d0"}
{"id": "mcs500_programming_manual_509", "text": "[1023][Ignoring command for offline mode.\n- Command: \u2018\u2026\u2019]", "source": "mcs500_programming_manual", "chunk_index": 509, "length": 57, "hash": "892426b51f3f2e87ae4ac15578b55580"}
{"id": "mcs500_programming_manual_510", "text": "[1024][Mastering needed. - Command: \u2018\u2026\u2019] Mastering was lost. Contact Mecademic.\n[1025][Impossible to reset the error. Please,\npower-cycle the robot.]", "source": "mcs500_programming_manual", "chunk_index": 510, "length": 149, "hash": "db16255e8adcb31360b954e83d68a2a2"}
{"id": "mcs500_programming_manual_511", "text": "Deactivate and reactivate the robot, in order\nto reset the error.", "source": "mcs500_programming_manual", "chunk_index": 511, "length": 65, "hash": "7c44bbaab83eca6920ba46a68563e540"}
{"id": "mcs500_programming_manual_512", "text": "Deactivate and reactivate the robot, in order\nto reset the error.", "source": "mcs500_programming_manual", "chunk_index": 512, "length": 65, "hash": "7c44bbaab83eca6920ba46a68563e540"}
{"id": "mcs500_programming_manual_513", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 513, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_514", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 514, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_515", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 515, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_516", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 516, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_517", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 517, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_518", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 518, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_519", "text": "[1026][Deactivation needed to execute the\ncommand. - Command: \u2018\u2026\u2019]\n[1027][Simulation mode\nenabled/ disabled while the robot\ndeactivated.]\n[1029][Offline program full.\nMaximum\nprogram size is 13,000 commands. Saving\nstopped.]\n[1030][Already saving.]", "source": "mcs500_programming_manual", "chunk_index": 519, "length": 248, "hash": "7336be02b538b33078b224b71ea25e42"}
{"id": "mcs500_programming_manual_520", "text": "[1026][Deactivation needed to execute the\ncommand. - Command: \u2018\u2026\u2019]\n[1027][Simulation mode\nenabled/ disabled while the robot\ndeactivated.]\n[1029][Offline program full.\nMaximum\nprogram size is 13,000 commands. Saving\nstopped.]\n[1030][Already saving.]", "source": "mcs500_programming_manual", "chunk_index": 520, "length": 248, "hash": "7336be02b538b33078b224b71ea25e42"}
{"id": "mcs500_programming_manual_521", "text": "[1031][Program saving\nreceiving illegal command.\n\u2018\u2026\u2019]\n[1033][Start conf mismatch]", "source": "mcs500_programming_manual", "chunk_index": 521, "length": 81, "hash": "120c358587dad6e30903959d71d26c47"}
{"id": "mcs500_programming_manual_522", "text": "[1031][Program saving\nreceiving illegal command.", "source": "mcs500_programming_manual", "chunk_index": 522, "length": 48, "hash": "3c4e40eaf70cb8f6bafc89d3ad73bb7c"}
{"id": "mcs500_programming_manual_523", "text": "\u2018\u2026\u2019]\n[1033][Start conf mismatch]", "source": "mcs500_programming_manual", "chunk_index": 523, "length": 32, "hash": "deb7e057769979504b105d71c10bd1a0"}
{"id": "mcs500_programming_manual_524", "text": "[1038][No gripper connected.]\n[1040][Command failed.]\n[1041][No Vbox]\n[1042][Ext tool sim must deactivated]", "source": "mcs500_programming_manual", "chunk_index": 524, "length": 107, "hash": "63b6200a2287311bef4dcd6d7b980385"}
{"id": "mcs500_programming_manual_525", "text": "[1038][No gripper connected.]\n[1040][Command failed.]\n[1041][No Vbox]\n[1042][Ext tool sim must deactivated]", "source": "mcs500_programming_manual", "chunk_index": 525, "length": 107, "hash": "63b6200a2287311bef4dcd6d7b980385"}
{"id": "mcs500_programming_manual_526", "text": "[1043][The specified IO bank is not present\non this robot]\n[1044][There is no vacuum module present\non this robot.]", "source": "mcs500_programming_manual", "chunk_index": 526, "length": 115, "hash": "d0cacb584f1ac5865497cb47dd123b83"}
{"id": "mcs500_programming_manual_527", "text": "[1043][The specified IO bank is not present\non this robot]\n[1044][There is no vacuum module present\non this robot.]", "source": "mcs500_programming_manual", "chunk_index": 527, "length": 115, "hash": "d0cacb584f1ac5865497cb47dd123b83"}
{"id": "mcs500_programming_manual_528", "text": "The robot must be deactivated in order to\nexecute this command.\nThe robot must be deactivated in order to\nexecute this command.", "source": "mcs500_programming_manual", "chunk_index": 528, "length": 127, "hash": "380209c425cb9eb952dad160d4f5d61d"}
{"id": "mcs500_programming_manual_529", "text": "The robot must be deactivated in order to\nexecute this command.\nThe robot must be deactivated in order to\nexecute this command.", "source": "mcs500_programming_manual", "chunk_index": 529, "length": 127, "hash": "380209c425cb9eb952dad160d4f5d61d"}
{"id": "mcs500_programming_manual_530", "text": "The program saving was\ninterrupted\nbecause the limit of 13,000 commands\nwas reached.\nThe robot is already saving a program. Wait\nuntil finished to save another program.\nThe command cannot be executed because\nthe robot is currently saving a program.", "source": "mcs500_programming_manual", "chunk_index": 530, "length": 248, "hash": "d7e7fa14759c16be22f5111045e96a61"}
{"id": "mcs500_programming_manual_531", "text": "The program saving was\ninterrupted\nbecause the limit of 13,000 commands\nwas reached.\nThe robot is already saving a program. Wait\nuntil finished to save another program.\nThe command cannot be executed because\nthe robot is currently saving a program.", "source": "mcs500_programming_manual", "chunk_index": 531, "length": 248, "hash": "d7e7fa14759c16be22f5111045e96a61"}
{"id": "mcs500_programming_manual_532", "text": "Requested move blocked because start\nrobot position is not\nin the requested\nconfiguration.\nAvailable only on the Meca500.\nGeneral error for various commands.\nAvailable only on the Meca500\nSwitching external tool type is only possible\nwhen the robot is deactivated.\nThe argument for the I/O bank ID is different\nthan 1.`\nNo MVK01 vacuum and I/O module present\nor simulated, but a command such as\nVacuumGrip (page 324) was sent.\nVariables\nListVariables (page 337)\nspecified in the error message.\nThe variable could not be retrieved with\nGetVariable (page 336)\nfor the reason\nspecified in the error message.\nwith\ncreation\nThe\nCreateVariable (page 334) for the reason\nspecified in the error message.\nThe\nwith\ndeletion\nDeleteVariable (page 335) for the reason\nspecified in the error message.\nThe\nSetVariable (page 337)\nspecified in the error message.", "source": "mcs500_programming_manual", "chunk_index": 532, "length": 845, "hash": "4c59ab1e637e40e1b706bf06838e40cc"}
{"id": "mcs500_programming_manual_533", "text": "Requested move blocked because start\nrobot position is not\nin the requested\nconfiguration.\nAvailable only on the Meca500.\nGeneral error for various commands.\nAvailable only on the Meca500\nSwitching external tool type is only possible\nwhen the robot is deactivated.\nThe argument for the I/O bank ID is different\nthan 1.`\nNo MVK01 vacuum and I/O module present\nor simulated, but a command such as", "source": "mcs500_programming_manual", "chunk_index": 533, "length": 394, "hash": "2c5ec2e9cad94a21123d27f8951ae499"}
{"id": "mcs500_programming_manual_534", "text": "(page 324) was sent.\nVariables", "source": "mcs500_programming_manual", "chunk_index": 534, "length": 30, "hash": "40eea434ccef3cc886baf8238147dd52"}
{"id": "mcs500_programming_manual_535", "text": "(page 337)\nspecified in the error message.", "source": "mcs500_programming_manual", "chunk_index": 535, "length": 42, "hash": "cfae6f367dc34d2d8f27bbe26ec3ef16"}
{"id": "mcs500_programming_manual_536", "text": "The variable could not be retrieved with", "source": "mcs500_programming_manual", "chunk_index": 536, "length": 40, "hash": "02a7e542a3b76038c61bfc3cb6d87f04"}
{"id": "mcs500_programming_manual_537", "text": "(page 336)\nfor the reason\nspecified in the error message.\nwith\ncreation\nThe", "source": "mcs500_programming_manual", "chunk_index": 537, "length": 75, "hash": "fd837c93ccd49cfbbadbb5ff80595587"}
{"id": "mcs500_programming_manual_538", "text": "(page 334) for the reason\nspecified in the error message.\nThe\nwith\ndeletion", "source": "mcs500_programming_manual", "chunk_index": 538, "length": 75, "hash": "83744f16abe2be3b65c7eb6a8325fd97"}
{"id": "mcs500_programming_manual_539", "text": "(page 335) for the reason\nspecified in the error message.", "source": "mcs500_programming_manual", "chunk_index": 539, "length": 57, "hash": "4ffa03aa6ee90086bc6eaea999351e5b"}
{"id": "mcs500_programming_manual_540", "text": "(page 337)\nspecified in the error message.", "source": "mcs500_programming_manual", "chunk_index": 540, "length": 42, "hash": "cfae6f367dc34d2d8f27bbe26ec3ef16"}
{"id": "mcs500_programming_manual_541", "text": "variable modification failed with\nfor the reason", "source": "mcs500_programming_manual", "chunk_index": 541, "length": 48, "hash": "fb51f729421bb69350fc17bc4a7425c6"}
{"id": "mcs500_programming_manual_542", "text": "variable modification failed with\nfor the reason", "source": "mcs500_programming_manual", "chunk_index": 542, "length": 48, "hash": "fb51f729421bb69350fc17bc4a7425c6"}
{"id": "mcs500_programming_manual_543", "text": "listed with\nfor the reason", "source": "mcs500_programming_manual", "chunk_index": 543, "length": 26, "hash": "ea39bbed752bd214652454a613d651ee"}
{"id": "mcs500_programming_manual_544", "text": "listed with\nfor the reason", "source": "mcs500_programming_manual", "chunk_index": 544, "length": 26, "hash": "ea39bbed752bd214652454a613d651ee"}
{"id": "mcs500_programming_manual_545", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 545, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_546", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 546, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_547", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 547, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_548", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 548, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_549", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 549, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_550", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 550, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_551", "text": "[3001][Another user is already connected,\nclosing connection.]", "source": "mcs500_programming_manual", "chunk_index": 551, "length": 62, "hash": "bda281850189c166f7dbb634a0d46560"}
{"id": "mcs500_programming_manual_552", "text": "[3001][Another user is already connected,\nclosing connection.]", "source": "mcs500_programming_manual", "chunk_index": 552, "length": 62, "hash": "bda281850189c166f7dbb634a0d46560"}
{"id": "mcs500_programming_manual_553", "text": "[3002][A firmware upgrade is in progress\n(connection refused).]\n[3003][Command has reached the maximum\nlength.]", "source": "mcs500_programming_manual", "chunk_index": 553, "length": 111, "hash": "0ab3f920e44710fdb5c161802f881358"}
{"id": "mcs500_programming_manual_554", "text": "[3002][A firmware upgrade is in progress\n(connection refused).]\n[3003][Command has reached the maximum\nlength.]", "source": "mcs500_programming_manual", "chunk_index": 554, "length": 111, "hash": "0ab3f920e44710fdb5c161802f881358"}
{"id": "mcs500_programming_manual_555", "text": "[3005][Error of motion.]", "source": "mcs500_programming_manual", "chunk_index": 555, "length": 24, "hash": "8ef6d522cf4f3aadc85f9e375bcf3a88"}
{"id": "mcs500_programming_manual_556", "text": "[3005][Error of motion.]", "source": "mcs500_programming_manual", "chunk_index": 556, "length": 24, "hash": "8ef6d522cf4f3aadc85f9e375bcf3a88"}
{"id": "mcs500_programming_manual_557", "text": "Another user is already connected to the\nrobot. The robot disconnects from the user\nimmediately after sending this message.\nThe firmware of the robot is being updated.", "source": "mcs500_programming_manual", "chunk_index": 557, "length": 167, "hash": "6d17a6162f352ea25731b37033105a45"}
{"id": "mcs500_programming_manual_558", "text": "Another user is already connected to the\nrobot. The robot disconnects from the user\nimmediately after sending this message.\nThe firmware of the robot is being updated.", "source": "mcs500_programming_manual", "chunk_index": 558, "length": 167, "hash": "6d17a6162f352ea25731b37033105a45"}
{"id": "mcs500_programming_manual_559", "text": "Too many characters before the NULL\ncharacter. Possibly caused by a missing\nNULL character\nMotion error. Possibly caused by a collision\nor overload. Correct the situation and send\nthe ResetError (page 184) command. If the\nmotion error persists, try power-cycling the\nrobot.", "source": "mcs500_programming_manual", "chunk_index": 559, "length": 273, "hash": "7348ae96d49bb7b0285003950cad0690"}
{"id": "mcs500_programming_manual_560", "text": "Too many characters before the NULL\ncharacter. Possibly caused by a missing\nNULL character\nMotion error. Possibly caused by a collision\nor overload. Correct the situation and send\nthe", "source": "mcs500_programming_manual", "chunk_index": 560, "length": 183, "hash": "019155228565837533eed5946f2778aa"}
{"id": "mcs500_programming_manual_561", "text": "(page 184) command. If the\nmotion error persists, try power-cycling the", "source": "mcs500_programming_manual", "chunk_index": 561, "length": 71, "hash": "4f5ae002d8f45ed9030f975749d80f68"}
{"id": "mcs500_programming_manual_562", "text": "[3006][Error of communication with drives] This error cannot be reset. The robot needs", "source": "mcs500_programming_manual", "chunk_index": 562, "length": 86, "hash": "55c20f6ce9fab4f6e8225031ad9e5e80"}
{"id": "mcs500_programming_manual_563", "text": "[3006][Error of communication with drives] This error cannot be reset. The robot needs", "source": "mcs500_programming_manual", "chunk_index": 563, "length": 86, "hash": "55c20f6ce9fab4f6e8225031ad9e5e80"}
{"id": "mcs500_programming_manual_564", "text": "[3009][Robot initialization failed due to an\ninternal error. Restart the robot.]", "source": "mcs500_programming_manual", "chunk_index": 564, "length": 80, "hash": "bd7ff82babd53d49cafb0699dec0cae2"}
{"id": "mcs500_programming_manual_565", "text": "[3009][Robot initialization failed due to an\ninternal error. Restart the robot.]", "source": "mcs500_programming_manual", "chunk_index": 565, "length": 80, "hash": "bd7ff82babd53d49cafb0699dec0cae2"}
{"id": "mcs500_programming_manual_566", "text": "[3014][Problem with saved program, save a\nnew program.]\n[3017][No offline program saved.]\n[3020][Offline program \u2026 is invalid]", "source": "mcs500_programming_manual", "chunk_index": 566, "length": 126, "hash": "a03f6bb1009ebb42f8945d4322d0d7c1"}
{"id": "mcs500_programming_manual_567", "text": "[3014][Problem with saved program, save a\nnew program.]\n[3017][No offline program saved.]\n[3020][Offline program \u2026 is invalid]", "source": "mcs500_programming_manual", "chunk_index": 567, "length": 126, "hash": "a03f6bb1009ebb42f8945d4322d0d7c1"}
{"id": "mcs500_programming_manual_568", "text": "[3025][Gripper error.]", "source": "mcs500_programming_manual", "chunk_index": 568, "length": 22, "hash": "070d62dfa737f31b45d60c14dd3fbc82"}
{"id": "mcs500_programming_manual_569", "text": "[3025][Gripper error.]", "source": "mcs500_programming_manual", "chunk_index": 569, "length": 22, "hash": "070d62dfa737f31b45d60c14dd3fbc82"}
{"id": "mcs500_programming_manual_570", "text": "[3026][Robot\u2019s maintenance check has\ndiscovered a problem. Mecademic cannot\nguarantee correct movements.\nPlease\ncontact Mecademic.]\n[3027][Internal error occurred.]\n[3029][Excessive torque error occurred]\n[3031][A previously\ncommand was incorrect.]", "source": "mcs500_programming_manual", "chunk_index": 570, "length": 248, "hash": "491523e772b8973708a21b187eae30ef"}
{"id": "mcs500_programming_manual_571", "text": "[3026][Robot\u2019s maintenance check has\ndiscovered a problem. Mecademic cannot\nguarantee correct movements.\nPlease\ncontact Mecademic.]", "source": "mcs500_programming_manual", "chunk_index": 571, "length": 131, "hash": "ae39236af29e1b9e5f5f176908d81d74"}
{"id": "mcs500_programming_manual_572", "text": "[3027][Internal error occurred.]\n[3029][Excessive torque error occurred]\n[3031][A previously\ncommand was incorrect.]", "source": "mcs500_programming_manual", "chunk_index": 572, "length": 116, "hash": "01fef1c914d07fa96909369dc60d9cd7"}
{"id": "mcs500_programming_manual_573", "text": "[3037][Pneumatic module error]", "source": "mcs500_programming_manual", "chunk_index": 573, "length": 30, "hash": "d6840ef729d36a41edfba2fb62ec0c28"}
{"id": "mcs500_programming_manual_574", "text": "[3037][Pneumatic module error]", "source": "mcs500_programming_manual", "chunk_index": 574, "length": 30, "hash": "d6840ef729d36a41edfba2fb62ec0c28"}
{"id": "mcs500_programming_manual_575", "text": "[3039][External\nupdated.]", "source": "mcs500_programming_manual", "chunk_index": 575, "length": 25, "hash": "da46d9bc156888409869e69b21b72ea0"}
{"id": "mcs500_programming_manual_576", "text": "[3039][External\nupdated.]", "source": "mcs500_programming_manual", "chunk_index": 576, "length": 25, "hash": "da46d9bc156888409869e69b21b72ea0"}
{"id": "mcs500_programming_manual_577", "text": "tool firmware must be", "source": "mcs500_programming_manual", "chunk_index": 577, "length": 21, "hash": "e00b0f4aa6cad2fb3a60cd0c31f5f7fd"}
{"id": "mcs500_programming_manual_578", "text": "tool firmware must be", "source": "mcs500_programming_manual", "chunk_index": 578, "length": 21, "hash": "e00b0f4aa6cad2fb3a60cd0c31f5f7fd"}
{"id": "mcs500_programming_manual_579", "text": "to be rebooted to recover from this error.\nError in robot startup procedure. Contact\nour technical support team if restarting the\nrobot did not resolve the issue.\nThere was a problem saving the program.", "source": "mcs500_programming_manual", "chunk_index": 579, "length": 202, "hash": "cccb93ed125fefa22da656b9e5006c35"}
{"id": "mcs500_programming_manual_580", "text": "to be rebooted to recover from this error.\nError in robot startup procedure. Contact\nour technical support team if restarting the\nrobot did not resolve the issue.\nThere was a problem saving the program.", "source": "mcs500_programming_manual", "chunk_index": 580, "length": 202, "hash": "cccb93ed125fefa22da656b9e5006c35"}
{"id": "mcs500_programming_manual_581", "text": "There is no program in memory.\nThere was a problem starting a particular\nprogram with StartProgram (page 203).\nThis command is available only on the\nMeca500.\nA hardware problem was detected. Contact\nour technical support team.", "source": "mcs500_programming_manual", "chunk_index": 581, "length": 226, "hash": "38f1826b030687b88b41c06d338407e8"}
{"id": "mcs500_programming_manual_582", "text": "There is no program in memory.\nThere was a problem starting a particular\nprogram with", "source": "mcs500_programming_manual", "chunk_index": 582, "length": 85, "hash": "bfc6396ba871f79482165c162c8afa8c"}
{"id": "mcs500_programming_manual_583", "text": "(page 203).\nThis command is available only on the\nMeca500.\nA hardware problem was detected. Contact\nour technical support team.", "source": "mcs500_programming_manual", "chunk_index": 583, "length": 127, "hash": "2bcb033cd88ac68f3aae1da8ca6a672f"}
{"id": "mcs500_programming_manual_584", "text": "In case of internal, software error.\nExcessive motor torque was detected.\nWhen using EtherNet/IP, this code (received\nin the input tag assembly only) indicates\nthat the last command sent by TCP/IP was\ninvalid.\nA communication error with the pneumatic\nmodule was detected. Contact our technical\nsupport team.\nActivation has failed, because the robot has\ndetected that the firmware of the EOAT is\nolder than the firmware of the robot.", "source": "mcs500_programming_manual", "chunk_index": 584, "length": 432, "hash": "1d8f83c1854c3867abdbb69c1145d9b4"}
{"id": "mcs500_programming_manual_585", "text": "In case of internal, software error.\nExcessive motor torque was detected.\nWhen using EtherNet/IP, this code (received\nin the input tag assembly only) indicates\nthat the last command sent by TCP/IP was\ninvalid.\nA communication error with the pneumatic\nmodule was detected. Contact our technical\nsupport team.", "source": "mcs500_programming_manual", "chunk_index": 585, "length": 307, "hash": "541346c92ca19d8eea9692f6fd572b44"}
{"id": "mcs500_programming_manual_586", "text": "Activation has failed, because the robot has\ndetected that the firmware of the EOAT is\nolder than the firmware of the robot.", "source": "mcs500_programming_manual", "chunk_index": 586, "length": 124, "hash": "79d0b0158ad7bfe8ba8f326df0ae268c"}
{"id": "mcs500_programming_manual_587", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 587, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_588", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 588, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_589", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 589, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_590", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 590, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_591", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 591, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_592", "text": "Table 1 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 592, "length": 38, "hash": "89403ab91edb4a51c69d13a6b29766fd"}
{"id": "mcs500_programming_manual_593", "text": "[3041][Robot\ncollision.]", "source": "mcs500_programming_manual", "chunk_index": 593, "length": 24, "hash": "d488b0a68a5aa56fa3cc6239f9771052"}
{"id": "mcs500_programming_manual_594", "text": "[3041][Robot\ncollision.]", "source": "mcs500_programming_manual", "chunk_index": 594, "length": 24, "hash": "d488b0a68a5aa56fa3cc6239f9771052"}
{"id": "mcs500_programming_manual_595", "text": "[3042][Detected\nfirmware update.\nfirmware again.]\n[3043][Excessive\nwith external tool.]", "source": "mcs500_programming_manual", "chunk_index": 595, "length": 87, "hash": "95b81001e09ee430540a5997bce3e3fa"}
{"id": "mcs500_programming_manual_596", "text": "[3042][Detected\nfirmware update.\nfirmware again.]\n[3043][Excessive\nwith external tool.]", "source": "mcs500_programming_manual", "chunk_index": 596, "length": 87, "hash": "95b81001e09ee430540a5997bce3e3fa"}
{"id": "mcs500_programming_manual_597", "text": "in\nPlease re-install", "source": "mcs500_programming_manual", "chunk_index": 597, "length": 20, "hash": "e805f35c2d53decaa5bd76b7354719d0"}
{"id": "mcs500_programming_manual_598", "text": "in\nPlease re-install", "source": "mcs500_programming_manual", "chunk_index": 598, "length": 20, "hash": "e805f35c2d53decaa5bd76b7354719d0"}
{"id": "mcs500_programming_manual_599", "text": "[3044][Abnormal communication error with\nexternal port.]", "source": "mcs500_programming_manual", "chunk_index": 599, "length": 56, "hash": "e2edecee3ae5b3ba52b28a519b1cff6f"}
{"id": "mcs500_programming_manual_600", "text": "[3044][Abnormal communication error with\nexternal port.]", "source": "mcs500_programming_manual", "chunk_index": 600, "length": 56, "hash": "e2edecee3ae5b3ba52b28a519b1cff6f"}
{"id": "mcs500_programming_manual_601", "text": "[3045][Imminent collision detected, robot\nwill decelerate now.]", "source": "mcs500_programming_manual", "chunk_index": 601, "length": 63, "hash": "6403598cc00c0d78e2ebd2683f3e1fb0"}
{"id": "mcs500_programming_manual_602", "text": "[3045][Imminent collision detected, robot\nwill decelerate now.]", "source": "mcs500_programming_manual", "chunk_index": 602, "length": 63, "hash": "6403598cc00c0d78e2ebd2683f3e1fb0"}
{"id": "mcs500_programming_manual_603", "text": "[3046][Power-supply\nnon-\na\nPlease check\nresettable power error.\npower connection then power-cycle the\nrobot]\n[3047][Robot failed to mount drive. Please\ntry to power-cycle the robot. If the problem\npersists contact Mecademic support.]\n[3049][Robot error at work zone limit]", "source": "mcs500_programming_manual", "chunk_index": 603, "length": 272, "hash": "1f598b15f957f2f1188b486098aea076"}
{"id": "mcs500_programming_manual_604", "text": "[3046][Power-supply\nnon-\na\nPlease check\nresettable power error.\npower connection then power-cycle the\nrobot]\n[3047][Robot failed to mount drive. Please\ntry to power-cycle the robot. If the problem\npersists contact Mecademic support.]\n[3049][Robot error at work zone limit]", "source": "mcs500_programming_manual", "chunk_index": 604, "length": 272, "hash": "1f598b15f957f2f1188b486098aea076"}
{"id": "mcs500_programming_manual_605", "text": "[3050][A power lost error was detected,\nrobot is going to shutdown]", "source": "mcs500_programming_manual", "chunk_index": 605, "length": 67, "hash": "bd98803276d240d98fa987ad81dac29a"}
{"id": "mcs500_programming_manual_606", "text": "[3050][A power lost error was detected,\nrobot is going to shutdown]", "source": "mcs500_programming_manual", "chunk_index": 606, "length": 67, "hash": "bd98803276d240d98fa987ad81dac29a"}
{"id": "mcs500_programming_manual_607", "text": "Sent when robot\nin error due to\nis\nimminent collision detected while severity\nis configured to generate an error.\nAn error was detected during the firmware\nupdate. Try to reinstall software.", "source": "mcs500_programming_manual", "chunk_index": 607, "length": 190, "hash": "6e5507bd75547ff6e20013cc7f04324f"}
{"id": "mcs500_programming_manual_608", "text": "Sent when robot\nin error due to\nis\nimminent collision detected while severity\nis configured to generate an error.\nAn error was detected during the firmware\nupdate. Try to reinstall software.", "source": "mcs500_programming_manual", "chunk_index": 608, "length": 190, "hash": "6e5507bd75547ff6e20013cc7f04324f"}
{"id": "mcs500_programming_manual_609", "text": "Too many communication errors were\ndetected between the I/O port and the\nEOAT connected to that port. This may\nmean that the cable is damaged and needs\nto be replaced or that it is not screwed\ntightly enough on either side. There may\nalso be a hardware problem with the I/O\nport.\nDetected internal communication errors\nwith the robot\u2019s I/O port. Please contact\nMecademic support for further diagnostic.\nSent when the robot is in error due to\nthe detection of an imminent collision while\nseverity is configured to Pause or Clear\nMotion.\nTry to power-cycle the robot.", "source": "mcs500_programming_manual", "chunk_index": 609, "length": 565, "hash": "55f70b93c0027d4a72f03ad8617d1cbe"}
{"id": "mcs500_programming_manual_610", "text": "Too many communication errors were\ndetected between the I/O port and the\nEOAT connected to that port. This may\nmean that the cable is damaged and needs\nto be replaced or that it is not screwed\ntightly enough on either side. There may", "source": "mcs500_programming_manual", "chunk_index": 610, "length": 233, "hash": "948fe23079385663115975bdc26dfcbb"}
{"id": "mcs500_programming_manual_611", "text": "also be a hardware problem with the I/O\nport.\nDetected internal communication errors\nwith the robot\u2019s I/O port. Please contact\nMecademic support for further diagnostic.\nSent when the robot is in error due to\nthe detection of an imminent collision while\nseverity is configured to Pause or Clear\nMotion.\nTry to power-cycle the robot.", "source": "mcs500_programming_manual", "chunk_index": 611, "length": 331, "hash": "06719a1b884e8785f4ca811e16f7ace3"}
{"id": "mcs500_programming_manual_612", "text": "Robot has unexpectedly booted in safe\nmode. Try to power-cycle the robot.", "source": "mcs500_programming_manual", "chunk_index": 612, "length": 73, "hash": "9190f60eba83c67f395ff95c13473bb6"}
{"id": "mcs500_programming_manual_613", "text": "Robot has unexpectedly booted in safe\nmode. Try to power-cycle the robot.", "source": "mcs500_programming_manual", "chunk_index": 613, "length": 73, "hash": "9190f60eba83c67f395ff95c13473bb6"}
{"id": "mcs500_programming_manual_614", "text": "Sent when robot\nin error due to\nis\nimminent work zone breach while severity\nis configured to generate an error.", "source": "mcs500_programming_manual", "chunk_index": 614, "length": 111, "hash": "e147d77544c2b1d3da8666e4f9ce104c"}
{"id": "mcs500_programming_manual_615", "text": "Sent when robot\nin error due to\nis", "source": "mcs500_programming_manual", "chunk_index": 615, "length": 34, "hash": "e96f6870e18ff36886a4fdc1e4c19157"}
{"id": "mcs500_programming_manual_616", "text": "imminent work zone breach while severity\nis configured to generate an error.", "source": "mcs500_programming_manual", "chunk_index": 616, "length": 76, "hash": "4acaa2b15de0d3528034ab2a1852d53d"}
{"id": "mcs500_programming_manual_617", "text": "Power has been lost and the robot is shutting\ndown.", "source": "mcs500_programming_manual", "chunk_index": 617, "length": 51, "hash": "6088e1e23f4443dc64b7893fcbd38967"}
{"id": "mcs500_programming_manual_618", "text": "Power has been lost and the robot is shutting\ndown.", "source": "mcs500_programming_manual", "chunk_index": 618, "length": 51, "hash": "6088e1e23f4443dc64b7893fcbd38967"}
{"id": "mcs500_programming_manual_619", "text": "The following provides a summary of all possible non-error responses to commands sent via\nthe control port. Some of these responses are also transmitted on the monitoring port, as\ndiscussed in the next section. Note that motion commands do not generate any non-error\nresponses, except for the optional EOB and EOM messages and any messages generated by\nthe SetCheckpoint (page 145) command.", "source": "mcs500_programming_manual", "chunk_index": 619, "length": 390, "hash": "8596eac4c105153dd91b95a5afeb0d4e"}
{"id": "mcs500_programming_manual_620", "text": "The following provides a summary of all possible non-error responses to commands", "source": "mcs500_programming_manual", "chunk_index": 620, "length": 80, "hash": "0773f771cfb6abc801eb23b31ea03f6d"}
{"id": "mcs500_programming_manual_621", "text": ". Some of these responses are also transmitted on the monitoring port, as\ndiscussed in the next section. Note that motion commands do not generate any non-error\nresponses, except for the optional EOB and EOM messages and any messages generated by\nthe", "source": "mcs500_programming_manual", "chunk_index": 621, "length": 250, "hash": "d3acedf66a674e4cec87fc22a6122a7d"}
{"id": "mcs500_programming_manual_622", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 622, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_623", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 623, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_624", "text": "Table 2: Possible responses to commands, sent on the control port", "source": "mcs500_programming_manual", "chunk_index": 624, "length": 65, "hash": "bca071cf1e4911e1a1127e90f49fb2e7"}
{"id": "mcs500_programming_manual_625", "text": "Table 2: Possible responses to commands, sent on the control port", "source": "mcs500_programming_manual", "chunk_index": 625, "length": 65, "hash": "bca071cf1e4911e1a1127e90f49fb2e7"}
{"id": "mcs500_programming_manual_626", "text": "[2000][Motors activated.]\n[2002][Homing done.]\n[2004][Motors deactivated.]", "source": "mcs500_programming_manual", "chunk_index": 626, "length": 74, "hash": "11eb31a1a3cf2d9d05d469be579d54ae"}
{"id": "mcs500_programming_manual_627", "text": "[2000][Motors activated.]\n[2002][Homing done.]\n[2004][Motors deactivated.]", "source": "mcs500_programming_manual", "chunk_index": 627, "length": 74, "hash": "11eb31a1a3cf2d9d05d469be579d54ae"}
{"id": "mcs500_programming_manual_628", "text": "[2005][The error was reset.]", "source": "mcs500_programming_manual", "chunk_index": 628, "length": 28, "hash": "d2d9abf83ef0a464661441c105c90cfb"}
{"id": "mcs500_programming_manual_629", "text": "[2005][The error was reset.]", "source": "mcs500_programming_manual", "chunk_index": 629, "length": 28, "hash": "d2d9abf83ef0a464661441c105c90cfb"}
{"id": "mcs500_programming_manual_630", "text": "[2006][There was no error to reset.]", "source": "mcs500_programming_manual", "chunk_index": 630, "length": 36, "hash": "a6a62c0d4f62f8cebfde1882b7c2df06"}
{"id": "mcs500_programming_manual_631", "text": "[2006][There was no error to reset.]", "source": "mcs500_programming_manual", "chunk_index": 631, "length": 36, "hash": "a6a62c0d4f62f8cebfde1882b7c2df06"}
{"id": "mcs500_programming_manual_632", "text": "[2007][as, hs, sm, es, pm, eob, eom]\n[2013][x, y, z , \u03b3]\n[2014][x, y, z , \u03b3]\n[2015][p]", "source": "mcs500_programming_manual", "chunk_index": 632, "length": 86, "hash": "764fc5166060c57ebbb312be4fa3c0d6"}
{"id": "mcs500_programming_manual_633", "text": "[2007][as, hs, sm, es, pm, eob, eom]\n[2013][x, y, z , \u03b3]\n[2014][x, y, z , \u03b3]\n[2015][p]", "source": "mcs500_programming_manual", "chunk_index": 633, "length": 86, "hash": "764fc5166060c57ebbb312be4fa3c0d6"}
{"id": "mcs500_programming_manual_634", "text": "[2028][e]\n[2029][ce]\n[2031][e]\n[2036][c\u209c]\n[2042][Motion paused.]\n[2043][Motion resumed.]\n[2044][The motion was cleared.]\n[2045][The simulation mode is enabled.]\n[2046][The simulation mode is disabled.]\n[2047][External tool simulation mode has changed.]", "source": "mcs500_programming_manual", "chunk_index": 634, "length": 252, "hash": "edcd095eb6cbc056f76724d532ea4acd"}
{"id": "mcs500_programming_manual_635", "text": "]\n[2031][e]\n[2036][c\u209c]\n[2042][Motion paused.]\n[2043][Motion resumed.]\n[2044][The motion was cleared.]\n[2045][The simulation mode is enabled.]\n[2046][The simulation mode is disabled.]\n[2047][External tool simulation mode has changed.]", "source": "mcs500_programming_manual", "chunk_index": 635, "length": 233, "hash": "8a2e560f661d43ad1096b7bcc3dcca0d"}
{"id": "mcs500_programming_manual_636", "text": "[2049][Robot is in recovery mode]", "source": "mcs500_programming_manual", "chunk_index": 636, "length": 33, "hash": "3c36043a4385f152dc1326f6d5010ef1"}
{"id": "mcs500_programming_manual_637", "text": "[2049][Robot is in recovery mode]", "source": "mcs500_programming_manual", "chunk_index": 637, "length": 33, "hash": "3c36043a4385f152dc1326f6d5010ef1"}
{"id": "mcs500_programming_manual_638", "text": "[2050][Robot is not in recovery mode]", "source": "mcs500_programming_manual", "chunk_index": 638, "length": 37, "hash": "7d980e9fcebba2c6729dd94ada7727f7"}
{"id": "mcs500_programming_manual_639", "text": "[2050][Robot is not in recovery mode]", "source": "mcs500_programming_manual", "chunk_index": 639, "length": 37, "hash": "7d980e9fcebba2c6729dd94ada7727f7"}
{"id": "mcs500_programming_manual_640", "text": "[2051][Joint velocity/acceleration \u2026 will be limited to\n\u2026 due to recovery mode]", "source": "mcs500_programming_manual", "chunk_index": 640, "length": 79, "hash": "c16dce713ce7b0452542a0cbffebcd7e"}
{"id": "mcs500_programming_manual_641", "text": "[2051][Joint velocity/acceleration \u2026 will be limited to", "source": "mcs500_programming_manual", "chunk_index": 641, "length": 55, "hash": "fc1acb497553524151f4624e1dd93326"}
{"id": "mcs500_programming_manual_642", "text": "\u2026 due to recovery mode]", "source": "mcs500_programming_manual", "chunk_index": 642, "length": 23, "hash": "22910d08aeef60e2c8879491f2e599da"}
{"id": "mcs500_programming_manual_643", "text": "[2052][End of movement is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 643, "length": 35, "hash": "aac50a1ef9677b48f08ae4681fdfb264"}
{"id": "mcs500_programming_manual_644", "text": "[2052][End of movement is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 644, "length": 35, "hash": "aac50a1ef9677b48f08ae4681fdfb264"}
{"id": "mcs500_programming_manual_645", "text": "[2053][End of movement is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 645, "length": 36, "hash": "51e1497b1ef66af7bbf6049e82ca917a"}
{"id": "mcs500_programming_manual_646", "text": "[2053][End of movement is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 646, "length": 36, "hash": "51e1497b1ef66af7bbf6049e82ca917a"}
{"id": "mcs500_programming_manual_647", "text": "ActivateRobot (page 171)\nHome (page 179)\nDeactivateRobot (page 175)\nResetError (page 184)", "source": "mcs500_programming_manual", "chunk_index": 647, "length": 89, "hash": "2c89d922b5d040eb7d2252e22eef7699"}
{"id": "mcs500_programming_manual_648", "text": "GetStatusRobot (page 277)\nGetWrf (page 253)\nGetTrf (page 251)\nSetTimeScaling\nGetTimeScaling (page 248)\nGetAutoConf (page 213)\nGetConf (page 222)\nGetAutoConfTurn (page 214)\nGetConfTurn (page 223)\nPauseMotion (page 182)\nResumeMotion (page 185)\nClearMotion (page 173)\nActivateSim (page 172)\nDeactivateSim (page 176)\nSetExtToolSim (page 312)\nSetRecoveryMode (page 198)", "source": "mcs500_programming_manual", "chunk_index": 648, "length": 364, "hash": "8b88880521927f407b844b7a1258648f"}
{"id": "mcs500_programming_manual_649", "text": "MoveJointsVel\nMoveLinVelTrf\nSetCartAcc\nMoveLinVelWrf\nSetCartAngVel\n(page\nSetCartAcc\nSetJointAcc\n(page\nSetJointVel (page 151)\nSetEom (page 189)", "source": "mcs500_programming_manual", "chunk_index": 649, "length": 142, "hash": "eb5ddac8f52d31d2d63bd17233c678c2"}
{"id": "mcs500_programming_manual_650", "text": "MoveLinVelTrf\nSetCartAcc\nMoveLinVelWrf\nSetCartAngVel", "source": "mcs500_programming_manual", "chunk_index": 650, "length": 52, "hash": "949fb12133785941dd3325aa8ce6ea07"}
{"id": "mcs500_programming_manual_651", "text": "SetCartAcc\nSetJointAcc", "source": "mcs500_programming_manual", "chunk_index": 651, "length": 22, "hash": "d9ea6090b5e2355330e4ce933aa22968"}
{"id": "mcs500_programming_manual_652", "text": "129),\n136),\n142),\n137),\n143),\n142),\n150),", "source": "mcs500_programming_manual", "chunk_index": 652, "length": 41, "hash": "1798165a1ce2a59600716178ce669d51"}
{"id": "mcs500_programming_manual_653", "text": "136),\n142),\n137),\n143),\n142),\n150),", "source": "mcs500_programming_manual", "chunk_index": 653, "length": 35, "hash": "d2790a62fb14cde8c24206ce62b45b38"}
{"id": "mcs500_programming_manual_654", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 654, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_655", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 655, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_656", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 656, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_657", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 657, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_658", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 658, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_659", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 659, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_660", "text": "[2054][End of block is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 660, "length": 32, "hash": "ede8a83542c6c482b33439b615e377a4"}
{"id": "mcs500_programming_manual_661", "text": "[2054][End of block is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 661, "length": 32, "hash": "ede8a83542c6c482b33439b615e377a4"}
{"id": "mcs500_programming_manual_662", "text": "[2055][End of block is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 662, "length": 33, "hash": "8e81e88e13bbbff9aec5669b14bcd792"}
{"id": "mcs500_programming_manual_663", "text": "[2055][End of block is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 663, "length": 33, "hash": "8e81e88e13bbbff9aec5669b14bcd792"}
{"id": "mcs500_programming_manual_664", "text": "[2056][bid, e]\n[2056][bid, e]\n[2060][Start saving program.]\n[2061][n commands saved.]\n[2063][Offline program n started.]", "source": "mcs500_programming_manual", "chunk_index": 664, "length": 120, "hash": "18a4550f8817bda5d3146bc11b64992f"}
{"id": "mcs500_programming_manual_665", "text": ", e]\n[2060][Start saving program.]\n[2061][n commands saved.]\n[2063][Offline program n started.]", "source": "mcs500_programming_manual", "chunk_index": 665, "length": 95, "hash": "73032d46946f18579007aa709fa09f52"}
{"id": "mcs500_programming_manual_666", "text": "[2064][Offline program looping is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 666, "length": 43, "hash": "471e57514ce9be617a598cb4b90a0cd0"}
{"id": "mcs500_programming_manual_667", "text": "[2064][Offline program looping is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 667, "length": 43, "hash": "471e57514ce9be617a598cb4b90a0cd0"}
{"id": "mcs500_programming_manual_668", "text": "[2065][Offline program looping is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 668, "length": 44, "hash": "dd31b1405a13af940992dd05ea7c6f9c"}
{"id": "mcs500_programming_manual_669", "text": "[2065][Offline program looping is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 669, "length": 44, "hash": "dd31b1405a13af940992dd05ea7c6f9c"}
{"id": "mcs500_programming_manual_670", "text": "[2080][n]\n[2081][vx.x.x]\n[2085][Command successful. \u2026]", "source": "mcs500_programming_manual", "chunk_index": 670, "length": 54, "hash": "b69cc2ca6ba621d3be650f04932b1e60"}
{"id": "mcs500_programming_manual_671", "text": "[2080][n]\n[2081][vx.x.x]\n[2085][Command successful. \u2026]", "source": "mcs500_programming_manual", "chunk_index": 671, "length": 54, "hash": "b69cc2ca6ba621d3be650f04932b1e60"}
{"id": "mcs500_programming_manual_672", "text": "[2088][vx.x.x]\n[2083][robot\u2019s serial number]\n[2084][MCS500]\n[2086][vx.x.x]\n[2090][n, \u03b8n,min, \u03b8n,max]\n[2092][n]", "source": "mcs500_programming_manual", "chunk_index": 672, "length": 110, "hash": "ac8f4b388df5e064ca08358a23a31fae"}
{"id": "mcs500_programming_manual_673", "text": "[2088][vx.x.x]\n[2083][robot\u2019s serial number]\n[2084][MCS500]\n[2086][vx.x.x]\n[2090][n, \u03b8", "source": "mcs500_programming_manual", "chunk_index": 673, "length": 86, "hash": "60a0b0c5d83b47cc3a455b45014ec0ce"}
{"id": "mcs500_programming_manual_674", "text": "[2093][User-defined joint limits enabled.]", "source": "mcs500_programming_manual", "chunk_index": 674, "length": 42, "hash": "4777261ab2ce6280c11e6770f42de60c"}
{"id": "mcs500_programming_manual_675", "text": "[2093][User-defined joint limits enabled.]", "source": "mcs500_programming_manual", "chunk_index": 675, "length": 42, "hash": "4777261ab2ce6280c11e6770f42de60c"}
{"id": "mcs500_programming_manual_676", "text": "[2093][User-defined joint limits disabled.]", "source": "mcs500_programming_manual", "chunk_index": 676, "length": 43, "hash": "17255401c27224d47e46e2d0785ab2f0"}
{"id": "mcs500_programming_manual_677", "text": "[2093][User-defined joint limits disabled.]", "source": "mcs500_programming_manual", "chunk_index": 677, "length": 43, "hash": "17255401c27224d47e46e2d0785ab2f0"}
{"id": "mcs500_programming_manual_678", "text": "[2094][e]\n[2095][s]\n[2096][Monitoring on control port enabled/disabled]\n[2097][n]\n[2113][q1, q2, q3\u2026]\n[2116][t]\n[2117][n1, n2, \u2026]", "source": "mcs500_programming_manual", "chunk_index": 678, "length": 129, "hash": "5d0ccc88fe82102ace8f4fbdf3116e81"}
{"id": "mcs500_programming_manual_679", "text": "[2094][e]\n[2095][s]\n[2096][Monitoring on control port enabled/disabled]\n[2097][n]\n[2113][q", "source": "mcs500_programming_manual", "chunk_index": 679, "length": 90, "hash": "95361122b19dade5e8be3e23d1c34889"}
{"id": "mcs500_programming_manual_680", "text": "\u2026]\n[2116][t]\n[2117][n", "source": "mcs500_programming_manual", "chunk_index": 680, "length": 21, "hash": "93268cbe2f79b04c0e95be7f79bd3a14"}
{"id": "mcs500_programming_manual_681", "text": "[2119][n1, n2, n3, n4, n5, n6]\n[2140][t]", "source": "mcs500_programming_manual", "chunk_index": 681, "length": 40, "hash": "b0cf275f9728e496e1b3338bf31d320d"}
{"id": "mcs500_programming_manual_682", "text": "GetIoSim (page 296)\nSetIoSim (page 316)\nStartSaving (page 204)\nStopSaving (page 206)\nStartProgram (page 203)\nStopSaving (page 206)", "source": "mcs500_programming_manual", "chunk_index": 682, "length": 130, "hash": "dd6a3881e56000b161af60dcb96ef382"}
{"id": "mcs500_programming_manual_683", "text": "GetCmdPendingCount (page 256)\nGetFwVersion (page 225)\nResponse to various instantaneous\ncommands\nGetExtToolFwVersion (page 292)\nGetRobotSerial (page 246)\nGetProductType (page 241)\nGetExtToolFwVersion (page 292)\nGetJointLimits (page 227)\nSetJointLimits (page 190)\nSetJointLimitsCfg (page 191)", "source": "mcs500_programming_manual", "chunk_index": 683, "length": 291, "hash": "e82d25e93f021426a527ad795c10865f"}
{"id": "mcs500_programming_manual_684", "text": "(page 225)\nResponse to various instantaneous\ncommands", "source": "mcs500_programming_manual", "chunk_index": 684, "length": 53, "hash": "8d3643200d0fd6a9a6cdefa431a21d5d"}
{"id": "mcs500_programming_manual_685", "text": "GetJointLimitsCfg (page 228)\nGetRobotName (page 245)\nSetCtrlPortMonitoring (page 187)\nSyncCmdQueue (page 208)\nGetModelJointLimits (page 231)\nGetMonitoringInterval (page 232)\nGetRealTimeMonitoring\n(page\nSetRealTimeMonitoring\n(page 196)\nGetNetworkOptions (page 238)\nGetRtc (page 275)", "source": "mcs500_programming_manual", "chunk_index": 685, "length": 281, "hash": "97a449c52b1d0c2955eae31e8c6144ba"}
{"id": "mcs500_programming_manual_686", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 686, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_687", "text": "GetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 687, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "mcs500_programming_manual_688", "text": "GetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 688, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "mcs500_programming_manual_689", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 689, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_690", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 690, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_691", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 691, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_692", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 692, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_693", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 693, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_694", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 694, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_695", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 695, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_696", "text": "[2150][p]\n[2151][t]\n[2152][p]\n[2153][p]\n[2154][v]\n[2155][\u03c9]\n[2156][n]\n[2157][n]\n[2158][p]\n[2159][p]\n[2160][l, m]\n[2161][\u03c41, \u03c42, \u03c43, \u03c44 ]\n[2162][dclosed, dopen]\n[2163][l, m]\n[2164][Workspace configuration set successfully.]\n[2165][xmin, ymin, zmin, xmax, ymax, zmax]\n[2166] [Workspace limits set successfully.]\n[2167][x, y, z, r]\n[2168][Tool sphere set successfully.]\n[2169][p]\n[2172][ph, pr]\n[2173][tp]", "source": "mcs500_programming_manual", "chunk_index": 696, "length": 402, "hash": "8c0a0719ac2173e97f3688b8d415823f"}
{"id": "mcs500_programming_manual_697", "text": "[2150][p]\n[2151][t]\n[2152][p]\n[2153][p]\n[2154][v]\n[2155][\u03c9]\n[2156][n]\n[2157][n]\n[2158][p]\n[2159][p]", "source": "mcs500_programming_manual", "chunk_index": 697, "length": 99, "hash": "e24761e9ced910c4bdf89a59f2d3411f"}
{"id": "mcs500_programming_manual_698", "text": "[2160][l, m]\n[2161][\u03c4", "source": "mcs500_programming_manual", "chunk_index": 698, "length": 21, "hash": "6d43bc66ec16e3c58e05fb899cae26c9"}
{"id": "mcs500_programming_manual_699", "text": "]\n[2163][l, m]\n[2164][Workspace configuration set successfully.]\n[2165][x", "source": "mcs500_programming_manual", "chunk_index": 699, "length": 73, "hash": "7e35558c40c8728621718bc1831add56"}
{"id": "mcs500_programming_manual_700", "text": "]\n[2166] [Workspace limits set successfully.]\n[2167][x, y, z, r]\n[2168][Tool sphere set successfully.]\n[2169][p]\n[2172][p", "source": "mcs500_programming_manual", "chunk_index": 700, "length": 121, "hash": "8365165e4383afb2772a9adcc2813c33"}
{"id": "mcs500_programming_manual_701", "text": "[2174][hstart, hend, hmin, hmax]\n[2175][vstart, pstart, vend, pend]", "source": "mcs500_programming_manual", "chunk_index": 701, "length": 67, "hash": "209a2c8ba37a7ea43b1c60a20cc9c79d"}
{"id": "mcs500_programming_manual_702", "text": "[2176][m]\n[2177][l]\n[2178][PStop2 configuration set successfully]\n[2179][l]\n[2181][l]\n[2182][v, g1, oid,1, g2, oid,2]\n[2183][v, g, oid]\n[2189][m]\n[2190][s]\n[2191][t]\n[2192][t]\n[2200][t, \u03b81, \u03b82, d3, \u03b84]\n[2201][t, x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 702, "length": 223, "hash": "52a389ce892971738af324a7000a6d6e"}
{"id": "mcs500_programming_manual_703", "text": "[2177][l]\n[2178][PStop2 configuration set successfully]\n[2179][l]\n[2181][l]\n[2182][v, g", "source": "mcs500_programming_manual", "chunk_index": 703, "length": 87, "hash": "02989d263ac5af77769c32fe7c9e11db"}
{"id": "mcs500_programming_manual_704", "text": "]\n[2189][m]\n[2190][s]\n[2191][t]", "source": "mcs500_programming_manual", "chunk_index": 704, "length": 31, "hash": "8fb0622f369205e7da14a2e644b1bace"}
{"id": "mcs500_programming_manual_705", "text": "[2192][t]\n[2200][t, \u03b8", "source": "mcs500_programming_manual", "chunk_index": 705, "length": 21, "hash": "5f4ecfa567b880913be409970ff11a57"}
{"id": "mcs500_programming_manual_706", "text": "]\n[2201][t, x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 706, "length": 23, "hash": "be045cb7b3784a5f224d2b22652093de"}
{"id": "mcs500_programming_manual_707", "text": "GetCheckpointDiscarded\n(page 221)\nGetBlending (page 215)\nGetVelTimeout (page 252)\nGetJointVel (page 229)\nGetJointAcc (page 226)\nGetCartLinVel (page 219)\nGetCartAngVel (page 218)\nGetCartAcc (page 217)\nGetCheckpoint (page 220)\nGetGripperForce (page 293)\nGetGripperVel (page 295)\nGetTorqueLimitsCfg (page 250)\nGetTorqueLimits (page 249)\nGetGripperForce (page 293)\nGetWorkZoneCfg (page 284)\nSetWorkZoneCfg (page 289)\nGetWorkZoneLimits (page 285)\nSetWorkZoneLimits (page 290)\nGetToolSphere (page 283)\nSetToolSphere (page 288)\nGetJointVelLimit (page 230)\nGetVacuumThreshold (page 308)\nGetVacuumPurgeDuration\n(page 307)\nGetMoveJumpHeight (page 236)\nGetMoveJumpApproachVel\n(page 235)\nGetOperationMode (page 257)\nConnectionWatchdog (page 174)\nSetPStop2Cfg (page 195)\nGetPStop2Cfg (page 239)\nGetCollisionCfg (page 281)\nGetCollisionStatus (page 282)\nGetWorkZoneStatus (page 286)\nGetMoveMode (page 237)\nGetMoveDurationCfg (page 234)\nGetMoveDuration (page 233)\nGetPayload (page 240)\nGetRtTargetJointPos (page 270)\nGetRtTargetCartPos (page 266)", "source": "mcs500_programming_manual", "chunk_index": 707, "length": 1030, "hash": "9c41f2188fc711f66397c96b1692c8c6"}
{"id": "mcs500_programming_manual_708", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 708, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_709", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 709, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_710", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 710, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_711", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 711, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_712", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 712, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_713", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 713, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_714", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 714, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_715", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 715, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_716", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 716, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_717", "text": "[2202][t, \u03c91, \u03c92, v3, \u03c94]\n[2203][t, \u03c41, \u03c42, \u03c43, \u03c44]\n[2204][t, \u1e8b, \u1e8f, \u017c, \u03c9z]\n[2208][t, ce]\n[2209][t, ct]\n[2210][t, \u03b81, \u03b82, d3, \u03b84]\n[2211][t, x, y, z, \u03b3]\n[2212][t, \u03c91, \u03c92, v3, \u03c94]\n[2213][t, \u03c41, \u03c42, \u03c43, \u03c44]\n[2214][t, \u1e8b, \u1e8f, \u017c, \u03c9z]\n[2218][t, ce]\n[2219][t, ct]\n[2220][t, n, ax, ay, az]\n[2228][t, x, y, z, \u03b3]\n[2229][t, x, y, z, \u03b3]\n[2300][t, simType, phyType, hs, es, oh]\n[2310][t, v1, v2]\n[2320][t, hp, dr, gc, go]\n[2321][t, p]\n[2322][t, d]\n[2330][t, bid, present, simMode, errorCode]\n[2340][t, bid, p1, p2, p3, p4, p5, p6, p7, p8]\n[2341][t, bid, p1, p2, p3, p4, p5, p6, p7, p8]\n[2342][t, v, h, p]\n[2343][t, p]\n[3000][Connected to \u2026 x_x_x.x.x.]\n[3000][Connected to \u2026 x_x_x.x.x.]", "source": "mcs500_programming_manual", "chunk_index": 717, "length": 670, "hash": "3a32b467568577f5ce3b2b3de0904971"}
{"id": "mcs500_programming_manual_718", "text": "]\n[2204][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 718, "length": 22, "hash": "145a5d428eed75377f19b7d2fa449123"}
{"id": "mcs500_programming_manual_719", "text": "]\n[2211][t, x, y, z, \u03b3]\n[2212][t, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 719, "length": 35, "hash": "9fbb1beb642f8a28d0c1f831c4d9bf43"}
{"id": "mcs500_programming_manual_720", "text": "]\n[2214][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 720, "length": 22, "hash": "f7b95467fecb9e739ea396142ac57094"}
{"id": "mcs500_programming_manual_721", "text": "]\n[2228][t, x, y, z, \u03b3]\n[2229][t, x, y, z, \u03b3]\n[2300][t, simType, phyType, hs, es, oh]\n[2310][t, v", "source": "mcs500_programming_manual", "chunk_index": 721, "length": 97, "hash": "0b12becab8a514d5469d508f3c926c83"}
{"id": "mcs500_programming_manual_722", "text": "]\n[2320][t, hp, dr, gc, go]\n[2321][t, p]\n[2322][t, d]\n[2330][t, b", "source": "mcs500_programming_manual", "chunk_index": 722, "length": 65, "hash": "9416a4221fb6a6d2927cfbf30a4a0ab2"}
{"id": "mcs500_programming_manual_723", "text": ", present, simMode, errorCode]\n[2340][t, b", "source": "mcs500_programming_manual", "chunk_index": 723, "length": 42, "hash": "810f040f328f6ffda5849162604927b1"}
{"id": "mcs500_programming_manual_724", "text": "]\n[2342][t, v, h, p]\n[2343][t, p]\n[3000][Connected to \u2026 x_x_x.x.x.]\n[3000][Connected to \u2026 x_x_x.x.x.]", "source": "mcs500_programming_manual", "chunk_index": 724, "length": 101, "hash": "899c9f74a06b8e3675879422da1bc72d"}
{"id": "mcs500_programming_manual_725", "text": "[3004][End of movement.]\n[3012][End of block.]", "source": "mcs500_programming_manual", "chunk_index": 725, "length": 46, "hash": "f0c03c5c80765b8b3dfea67d4c83015a"}
{"id": "mcs500_programming_manual_726", "text": "[3004][End of movement.]", "source": "mcs500_programming_manual", "chunk_index": 726, "length": 24, "hash": "7850f4a5fcb0962b4461ba105b042d88"}
{"id": "mcs500_programming_manual_727", "text": "[3012][End of block.]", "source": "mcs500_programming_manual", "chunk_index": 727, "length": 21, "hash": "75ba7b7ff787edf4878a3034613f1261"}
{"id": "mcs500_programming_manual_728", "text": "[3013][End of offline program.]\n[3028][s]\n[3030][n]\n[3032][2/1/0]", "source": "mcs500_programming_manual", "chunk_index": 728, "length": 65, "hash": "b214778c5fa9d2ae1fc16eee1c2fb31b"}
{"id": "mcs500_programming_manual_729", "text": "[3013][End of offline program.]\n[3028][s]\n[3030][n]\n[3032][2/1/0]", "source": "mcs500_programming_manual", "chunk_index": 729, "length": 65, "hash": "b214778c5fa9d2ae1fc16eee1c2fb31b"}
{"id": "mcs500_programming_manual_730", "text": "[3035][TCP dump capture started for x seconds]", "source": "mcs500_programming_manual", "chunk_index": 730, "length": 46, "hash": "5bf909f6e3068a49ea9ac89e89897453"}
{"id": "mcs500_programming_manual_731", "text": "[3035][TCP dump capture started for x seconds]", "source": "mcs500_programming_manual", "chunk_index": 731, "length": 46, "hash": "5bf909f6e3068a49ea9ac89e89897453"}
{"id": "mcs500_programming_manual_732", "text": "GetRtTargetJointVel (page 272)\nGetRtTargetJointTorq (page 271)\nGetRtTargetCartVel (page 267)\nGetRtTargetConf (page 268)\nGetRtTargetConfTurn (page 269)\nGetRtJointPos (page 263)\nGetRtCartPos (page 259)\nGetRtJointVel (page 265)\nGetRtJointTorq (page 264)\nGetRtCartVel (page 260)\nGetRtConf (page 261)\nGetRtConfTurn (page 262)\nGetRtAccelerometer (page 258)\nGetRtWrf (page 274)\nGetRtTrf (page 273)\nGetRtExtToolStatus (page 297)\nGetRtValveState (page 306)\nGetRtGripperState (page 300)\nGetRtGripperForce (page 298)\nGetRtGripperPos (page 299)\nGetRtIoStatus (page 302)\nGetRtOutputState (page 303)\nGetRtInputState (page 301)\nGetRtVacuumState (page 305)\nGetRtVacuumPressure (page 304)\nConfirms connection to robot.\nConfirms connection to robot. Sent\nonly at initial connection.\nThe robot has stopped moving.\nNo motion command in queue and\nrobot joints do not move.\nThe offline program has finished.\nA torque limit was exceeded.\nCheckpoint n was reached.\nA P-Stop 2 is active (1), is no longer\nactive but needs to be reset (2) or\nis already cleared (0).\nSent to indicate that the requested\nTCP dump capture has started and\nconfirms the maximum duration of\nx seconds.", "source": "mcs500_programming_manual", "chunk_index": 732, "length": 1152, "hash": "81129ccbe22066b96c5dd9a775b8c83c"}
{"id": "mcs500_programming_manual_733", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 733, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_734", "text": "(page 304)\nConfirms connection to robot.\nConfirms connection to robot. Sent\nonly at initial connection.\nThe robot has stopped moving.", "source": "mcs500_programming_manual", "chunk_index": 734, "length": 133, "hash": "9140e0cb7865dd0d3edeb6ee672c4d19"}
{"id": "mcs500_programming_manual_735", "text": "No motion command in queue and\nrobot joints do not move.\nThe offline program has finished.\nA torque limit was exceeded.\nCheckpoint n was reached.\nA P-Stop 2 is active (1), is no longer\nactive but needs to be reset (2) or\nis already cleared (0).\nSent to indicate that the requested", "source": "mcs500_programming_manual", "chunk_index": 735, "length": 280, "hash": "d383049fc42b86b63672946dffd70fc1"}
{"id": "mcs500_programming_manual_736", "text": "TCP dump capture has started and\nconfirms the maximum duration of\nx seconds.", "source": "mcs500_programming_manual", "chunk_index": 736, "length": 76, "hash": "c53b3d628bb277722966c3a7a50860c3"}
{"id": "mcs500_programming_manual_737", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 737, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_738", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 738, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_739", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 739, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_740", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 740, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_741", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 741, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_742", "text": "Table 2 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 742, "length": 38, "hash": "b81e2f008d8dba206eaf9cb76c071df4"}
{"id": "mcs500_programming_manual_743", "text": "[3036][TCP dump capture stopped]", "source": "mcs500_programming_manual", "chunk_index": 743, "length": 32, "hash": "76c7b335ef9be7330b342ad8fc40749b"}
{"id": "mcs500_programming_manual_744", "text": "[3036][TCP dump capture stopped]", "source": "mcs500_programming_manual", "chunk_index": 744, "length": 32, "hash": "76c7b335ef9be7330b342ad8fc40749b"}
{"id": "mcs500_programming_manual_745", "text": "[3051][Move duration too short: \u2026 is too short.\nFastest possible \u2026 Command: \u2026]", "source": "mcs500_programming_manual", "chunk_index": 745, "length": 78, "hash": "147fe91fec430bebe6113ed104844aa8"}
{"id": "mcs500_programming_manual_746", "text": "[3051][Move duration too short: \u2026 is too short.\nFastest possible \u2026 Command: \u2026]", "source": "mcs500_programming_manual", "chunk_index": 746, "length": 78, "hash": "147fe91fec430bebe6113ed104844aa8"}
{"id": "mcs500_programming_manual_747", "text": "Sent after a previously started TCP\ndump capture has finished.\nCheckpoint n is discarded before\nreaching it, because motion was\ncleared.\nin time-\nSent by the robot\nrequested\nbased move mode,\nduration\nto meet,\nimpossible\nand severity was set to 4 with\nSetMoveDurationCfg (page 154).\nResponse\nGetSafetyStopStatus(3069)\n(page 276).\nResponse\nGetSafetyStopStatus(3070)\n(page 276).\nResponse\nGetSafetyStopStatus(3080)\n(page 276).\nResponse\nGetSafetyStopStatus(3081)\n(page 276).\nResponse\nGetSafetyStopStatus(3082)\n(page 276).\nResponse\nGetSafetyStopStatus(3083)\n(page 276).\nResponse\nGetSafetyStopStatus(3084)\n(page 276).\nResponse\nGetSafetyStopStatus(3085)\n(page 276).\nResponse\nGetSafetyStopStatus(3086)\n(page 276).\nResponse\nGetSafetyStopStatus(3087)\n(page 276).", "source": "mcs500_programming_manual", "chunk_index": 747, "length": 751, "hash": "7ac020dca43cd486127bae487ae52817"}
{"id": "mcs500_programming_manual_748", "text": "Sent after a previously started TCP\ndump capture has finished.\nCheckpoint n is discarded before\nreaching it, because motion was\ncleared.\nin time-\nSent by the robot\nrequested\nbased move mode,\nduration\nto meet,\nimpossible\nand severity was set to 4 with", "source": "mcs500_programming_manual", "chunk_index": 748, "length": 250, "hash": "e4a36eb3800efe8ee55c0f061182b8d5"}
{"id": "mcs500_programming_manual_749", "text": "(page 154).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 749, "length": 20, "hash": "3250cbd26918bb3fbdfc5a9d88c32d2f"}
{"id": "mcs500_programming_manual_750", "text": "GetSafetyStopStatus(3069)", "source": "mcs500_programming_manual", "chunk_index": 750, "length": 25, "hash": "1f3845e26ac34870912bb38c1c8d2bcb"}
{"id": "mcs500_programming_manual_751", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 751, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_752", "text": "GetSafetyStopStatus(3070)", "source": "mcs500_programming_manual", "chunk_index": 752, "length": 25, "hash": "b1096313855717bd81bdd39b68ea1d9a"}
{"id": "mcs500_programming_manual_753", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 753, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_754", "text": "GetSafetyStopStatus(3080)", "source": "mcs500_programming_manual", "chunk_index": 754, "length": 25, "hash": "d09019515752cff5f3bd1f136538dd71"}
{"id": "mcs500_programming_manual_755", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 755, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_756", "text": "GetSafetyStopStatus(3081)", "source": "mcs500_programming_manual", "chunk_index": 756, "length": 25, "hash": "80a2d37f90ed91f3a436d441bfe6092a"}
{"id": "mcs500_programming_manual_757", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 757, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_758", "text": "GetSafetyStopStatus(3082)", "source": "mcs500_programming_manual", "chunk_index": 758, "length": 25, "hash": "36ec46cbdb9b6dc01f4942901de6e45d"}
{"id": "mcs500_programming_manual_759", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 759, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_760", "text": "GetSafetyStopStatus(3083)", "source": "mcs500_programming_manual", "chunk_index": 760, "length": 25, "hash": "77b2e71fe6dd0516c99066239e9ebbd2"}
{"id": "mcs500_programming_manual_761", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 761, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_762", "text": "GetSafetyStopStatus(3084)", "source": "mcs500_programming_manual", "chunk_index": 762, "length": 25, "hash": "49b397688b980d614061710b946e30b0"}
{"id": "mcs500_programming_manual_763", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 763, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_764", "text": "GetSafetyStopStatus(3085)", "source": "mcs500_programming_manual", "chunk_index": 764, "length": 25, "hash": "ad8769df0898099db5223c4c3e81ec26"}
{"id": "mcs500_programming_manual_765", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 765, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_766", "text": "GetSafetyStopStatus(3086)", "source": "mcs500_programming_manual", "chunk_index": 766, "length": 25, "hash": "074105553509eb6b021a461a430a0961"}
{"id": "mcs500_programming_manual_767", "text": "(page 276).\nResponse", "source": "mcs500_programming_manual", "chunk_index": 767, "length": 20, "hash": "fc423540aec750da2a495e801c033095"}
{"id": "mcs500_programming_manual_768", "text": "GetSafetyStopStatus(3087)", "source": "mcs500_programming_manual", "chunk_index": 768, "length": 25, "hash": "75be2a4541067b66a07d061fa35559f3"}
{"id": "mcs500_programming_manual_769", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 769, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_770", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 770, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_771", "text": "Monitoring port messages", "source": "mcs500_programming_manual", "chunk_index": 771, "length": 24, "hash": "14ee218f352317ebff67027896431ec9"}
{"id": "mcs500_programming_manual_772", "text": "Monitoring port messages", "source": "mcs500_programming_manual", "chunk_index": 772, "length": 24, "hash": "14ee218f352317ebff67027896431ec9"}
{"id": "mcs500_programming_manual_773", "text": "Mecademic robots are configured to send immediate feedback over TCP port 10001, also\nknown as the monitoring port. Several types of messages are transmitted via this port, as\nshown in Table 3.", "source": "mcs500_programming_manual", "chunk_index": 773, "length": 192, "hash": "e90a80c50b0d2ede87edf2f198b12ecd"}
{"id": "mcs500_programming_manual_774", "text": "Mecademic robots are configured to send immediate feedback over TCP port 10001, also\nknown as the monitoring port. Several types of messages are transmitted via this port, as\nshown in Table 3.", "source": "mcs500_programming_manual", "chunk_index": 774, "length": 192, "hash": "e90a80c50b0d2ede87edf2f198b12ecd"}
{"id": "mcs500_programming_manual_775", "text": "Most messages related to state changes are sent either as soon as the state changes or upon\nestablishing a connection. These messages are marked with a tick in the \u201cchg\u201d column of\nTable 3.", "source": "mcs500_programming_manual", "chunk_index": 775, "length": 188, "hash": "4ecb4a47b6ed18df44e3a87c9a57bc78"}
{"id": "mcs500_programming_manual_776", "text": "Most messages related to state changes are sent either as soon as the state changes or upon\nestablishing a connection. These messages are marked with a tick in the \u201cchg\u201d column of\nTable 3.", "source": "mcs500_programming_manual", "chunk_index": 776, "length": 188, "hash": "4ecb4a47b6ed18df44e3a87c9a57bc78"}
{"id": "mcs500_programming_manual_777", "text": "Some messages are sent periodically (every 15 ms or as defined by the SetMonitoringInterval\n(page 192) command) and are marked with a tick in the \u201cprd\u201d column of Table 3.", "source": "mcs500_programming_manual", "chunk_index": 777, "length": 170, "hash": "6ab4b51bfc6f5736b17f91b68a9fd3c1"}
{"id": "mcs500_programming_manual_778", "text": "Some messages are sent periodically (every 15 ms or as defined by the", "source": "mcs500_programming_manual", "chunk_index": 778, "length": 69, "hash": "9cc397d032165f3f7cc4f1e00ddddc2d"}
{"id": "mcs500_programming_manual_779", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 779, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_780", "text": "(page 192) command) and are marked with a tick in the \u201cprd\u201d column of Table 3.", "source": "mcs500_programming_manual", "chunk_index": 780, "length": 78, "hash": "f435724f7e92f31113352c4991d08a48"}
{"id": "mcs500_programming_manual_781", "text": "Other messages, which are neither state-related nor periodic, are sent as appropriate when\nspecific conditions occur on the robot. Some of these messages are also sent upon connection.", "source": "mcs500_programming_manual", "chunk_index": 781, "length": 184, "hash": "d003c68769f77b9b404dd619abf26e03"}
{"id": "mcs500_programming_manual_782", "text": "Other messages, which are neither state-related nor periodic, are sent as appropriate when\nspecific conditions occur on the robot. Some of these messages are also sent upon connection.", "source": "mcs500_programming_manual", "chunk_index": 782, "length": 184, "hash": "d003c68769f77b9b404dd619abf26e03"}
{"id": "mcs500_programming_manual_783", "text": "Additionally, note that some messages are optional and will not be sent by default unless\nexplicitly enabled using the SetRealTimeMonitoring (page 196) command. Optional messages\nare marked with a tick in the \u201copt\u201d column of Table 3.", "source": "mcs500_programming_manual", "chunk_index": 783, "length": 233, "hash": "a82b67dda73cb624cca1e7f104a64fcb"}
{"id": "mcs500_programming_manual_784", "text": "Additionally, note that some messages are optional and will not be sent by default unless\nexplicitly enabled using the", "source": "mcs500_programming_manual", "chunk_index": 784, "length": 118, "hash": "a45e6ccd6dd9149f159617bb45caef74"}
{"id": "mcs500_programming_manual_785", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 785, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_786", "text": "(page 196) command. Optional messages", "source": "mcs500_programming_manual", "chunk_index": 786, "length": 37, "hash": "e502245b0d86333576db9cc43098b91f"}
{"id": "mcs500_programming_manual_787", "text": "are marked with a tick in the \u201copt\u201d column of Table 3.", "source": "mcs500_programming_manual", "chunk_index": 787, "length": 54, "hash": "41e58673e1c46fa5a1537e8ff59ea73b"}
{"id": "mcs500_programming_manual_788", "text": "Table 3: Monitoring port messages", "source": "mcs500_programming_manual", "chunk_index": 788, "length": 33, "hash": "feea0c175e76b58536171b3a9d1f4fa2"}
{"id": "mcs500_programming_manual_789", "text": "Table 3: Monitoring port messages", "source": "mcs500_programming_manual", "chunk_index": 789, "length": 33, "hash": "feea0c175e76b58536171b3a9d1f4fa2"}
{"id": "mcs500_programming_manual_790", "text": "[2007][as, hs, sm, es, pm, eob,\neom]\n[2015][p]", "source": "mcs500_programming_manual", "chunk_index": 790, "length": 46, "hash": "d65a5cb932859943890cf2417a32b4bb"}
{"id": "mcs500_programming_manual_791", "text": "[2007][as, hs, sm, es, pm, eob,\neom]\n[2015][p]", "source": "mcs500_programming_manual", "chunk_index": 791, "length": 46, "hash": "d65a5cb932859943890cf2417a32b4bb"}
{"id": "mcs500_programming_manual_792", "text": "[2026][\u03b81, \u03b82, d3, \u03b84]", "source": "mcs500_programming_manual", "chunk_index": 792, "length": 22, "hash": "ab59c7eee0a572ae123d4987f73813a3"}
{"id": "mcs500_programming_manual_793", "text": "[2044][The\ncleared.]\n[2049][Robot is in recovery\nmode]\n[2050][Robot\nrecovery mode]\n[2051][Joint\nvelocity/acceleration \u2026 will be\nlimited to \u2026 due to recovery\nmode]\n[2079][ge, hs, hp, lr, es, oh]", "source": "mcs500_programming_manual", "chunk_index": 793, "length": 193, "hash": "685d2bb6885a72fe0b36ee8f63415d07"}
{"id": "mcs500_programming_manual_794", "text": "[2044][The\ncleared.]\n[2049][Robot is in recovery\nmode]", "source": "mcs500_programming_manual", "chunk_index": 794, "length": 54, "hash": "5d21e5412c4e1a4188b7b1fd488ba291"}
{"id": "mcs500_programming_manual_795", "text": "[2050][Robot\nrecovery mode]\n[2051][Joint\nvelocity/acceleration \u2026 will be\nlimited to \u2026 due to recovery\nmode]\n[2079][ge, hs, hp, lr, es, oh]", "source": "mcs500_programming_manual", "chunk_index": 795, "length": 138, "hash": "6d6abd5dbc47f833da3725a285ac5d40"}
{"id": "mcs500_programming_manual_796", "text": "[2082][vx.x.x.xxxxx]\n[2086][vx.x.x]\n[2095][s]", "source": "mcs500_programming_manual", "chunk_index": 796, "length": 45, "hash": "9017364c70ab200143d4fad2f0919c63"}
{"id": "mcs500_programming_manual_797", "text": "[2082][vx.x.x.xxxxx]", "source": "mcs500_programming_manual", "chunk_index": 797, "length": 20, "hash": "9d3079f309352232c7138736ae9b7eaa"}
{"id": "mcs500_programming_manual_798", "text": "[2086][vx.x.x]\n[2095][s]", "source": "mcs500_programming_manual", "chunk_index": 798, "length": 24, "hash": "9c0a2f37e8d67f4b5d9d892fb23607bd"}
{"id": "mcs500_programming_manual_799", "text": "response of GetStatusRobot", "source": "mcs500_programming_manual", "chunk_index": 799, "length": 26, "hash": "506080d72a5cfc741bb110d05de8c51a"}
{"id": "mcs500_programming_manual_800", "text": "response of GetTimeScaling", "source": "mcs500_programming_manual", "chunk_index": 800, "length": 26, "hash": "abd18a31578b5e31a4dd2d385373aebb"}
{"id": "mcs500_programming_manual_801", "text": "Same\nas\n(page 277)\nSame as\n(page 248)\nThe same as the response of the legacy\ncommand GetPose\nThe same as the response of the legacy\ncommand GetJoints\nSame as response of ClearMotion (page 173)", "source": "mcs500_programming_manual", "chunk_index": 801, "length": 192, "hash": "41c977d10ddc11aa422cf00578714582"}
{"id": "mcs500_programming_manual_802", "text": "Same\nas\n(page 277)\nSame as\n(page 248)\nThe same as the response of the legacy\ncommand GetPose\nThe same as the response of the legacy\ncommand GetJoints\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 802, "length": 169, "hash": "bd0e84da7f403441e562e4c272348aa0"}
{"id": "mcs500_programming_manual_803", "text": "Same as response of SetRecoveryMode\n(page 198)\nSame as response of SetRecoveryMode\n(page 198)\nResponse\nwhen\nvelocity/acceleration is\nrecovery mode", "source": "mcs500_programming_manual", "chunk_index": 803, "length": 146, "hash": "41008549fe0a6d4a56dbe7b6b2b88a5a"}
{"id": "mcs500_programming_manual_804", "text": "(page 198)\nResponse\nwhen\nvelocity/acceleration is\nrecovery mode", "source": "mcs500_programming_manual", "chunk_index": 804, "length": 63, "hash": "81a9fac7e5503a0d5e93ed2917ade6e0"}
{"id": "mcs500_programming_manual_805", "text": "requested\nlimited due to", "source": "mcs500_programming_manual", "chunk_index": 805, "length": 24, "hash": "dba1a501818712f9abf172b1be30eeba"}
{"id": "mcs500_programming_manual_806", "text": "requested\nlimited due to", "source": "mcs500_programming_manual", "chunk_index": 806, "length": 24, "hash": "dba1a501818712f9abf172b1be30eeba"}
{"id": "mcs500_programming_manual_807", "text": "Same\nGetStatusGripper\nComplete firmware version of robot\nExternal firmware version\nas\nSame\n(page 245)", "source": "mcs500_programming_manual", "chunk_index": 807, "length": 101, "hash": "78e46a8e686d1531f31efcad2903f5fc"}
{"id": "mcs500_programming_manual_808", "text": "Same\nGetStatusGripper\nComplete firmware version of robot", "source": "mcs500_programming_manual", "chunk_index": 808, "length": 56, "hash": "d89d4c9c4c2ee7085808376fb59abb56"}
{"id": "mcs500_programming_manual_809", "text": "External firmware version\nas\nSame\n(page 245)", "source": "mcs500_programming_manual", "chunk_index": 809, "length": 44, "hash": "d77b22ac29c3d199d4664266351e7cfb"}
{"id": "mcs500_programming_manual_810", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 810, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_811", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 811, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_812", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 812, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_813", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 813, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_814", "text": "Table 3 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 814, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "mcs500_programming_manual_815", "text": "Table 3 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 815, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "mcs500_programming_manual_816", "text": "[2165][xmin, ymin, zmin, xmax,\nymax, zmax]\n[2167][x, y, z, r]", "source": "mcs500_programming_manual", "chunk_index": 816, "length": 61, "hash": "436d801a12d75048560731de46fe451a"}
{"id": "mcs500_programming_manual_817", "text": "]\n[2167][x, y, z, r]", "source": "mcs500_programming_manual", "chunk_index": 817, "length": 20, "hash": "ccb7dfa0c770d8e4c49fed0c994db19a"}
{"id": "mcs500_programming_manual_818", "text": "[2182][v, g1, oid,1, g2, oid,2]", "source": "mcs500_programming_manual", "chunk_index": 818, "length": 31, "hash": "745544b1f58a059cf8184313d471db5f"}
{"id": "mcs500_programming_manual_819", "text": "\u2713 \u2713 [2200][t, \u03b81, \u03b82, d3 \u03b84]", "source": "mcs500_programming_manual", "chunk_index": 819, "length": 28, "hash": "0b6c8e8354cbabc69c48e016cbfb83f9"}
{"id": "mcs500_programming_manual_820", "text": "\u2713 \u2713 [2201][t, x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 820, "length": 25, "hash": "d31d388f59e8962783097c215767bd36"}
{"id": "mcs500_programming_manual_821", "text": "[2201][t, x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 821, "length": 21, "hash": "b9d63f53da0348ad28c8231b4c8559c9"}
{"id": "mcs500_programming_manual_822", "text": "\u2713 \u2713 [2202][t, \u03c91, \u03c92, v3, \u03c94]", "source": "mcs500_programming_manual", "chunk_index": 822, "length": 29, "hash": "db278673d25becf7a63a75a5435c958d"}
{"id": "mcs500_programming_manual_823", "text": "\u2713 \u2713 [2203][t, \u03c41, \u03c42, \u03c43, \u03c44]", "source": "mcs500_programming_manual", "chunk_index": 823, "length": 29, "hash": "e7cff949dae9482409c5d6b3a10a2acc"}
{"id": "mcs500_programming_manual_824", "text": "\u2713 \u2713 [2204][t, \u1e8b, \u1e8f, \u017c, \u03c9z]", "source": "mcs500_programming_manual", "chunk_index": 824, "length": 26, "hash": "54d5d9017208c493f554b957f636672a"}
{"id": "mcs500_programming_manual_825", "text": "[2204][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 825, "length": 20, "hash": "da956b26a2e3edf792395e0954fa4d24"}
{"id": "mcs500_programming_manual_826", "text": "\u2713 \u2713 [2210][t, \u03b81, \u03b82, d3, \u03b84]", "source": "mcs500_programming_manual", "chunk_index": 826, "length": 29, "hash": "1f8e73161a979929ec39b5945fd28bd6"}
{"id": "mcs500_programming_manual_827", "text": "\u2713 \u2713 [2211][t, x, y, z, , \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 827, "length": 27, "hash": "bec621591d96bc1fa49dd5a3078a701e"}
{"id": "mcs500_programming_manual_828", "text": "[2211][t, x, y, z, , \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 828, "length": 23, "hash": "40b826f999f02d801f0c5660ba09f05f"}
{"id": "mcs500_programming_manual_829", "text": "\u2713 \u2713 [2212][t, \u03c91, \u03c92, v3, \u03c94]", "source": "mcs500_programming_manual", "chunk_index": 829, "length": 29, "hash": "461a59f0db030adff46a3125db0719c5"}
{"id": "mcs500_programming_manual_830", "text": "\u2713 \u2713 [2213][t, \u03c41, \u03c42, \u03c43, \u03c44]", "source": "mcs500_programming_manual", "chunk_index": 830, "length": 29, "hash": "aec154308e92fcc78ecbe30197a2d55d"}
{"id": "mcs500_programming_manual_831", "text": "\u2713 \u2713 [2214][t, \u1e8b, \u1e8f, \u017c, \u03c9z]", "source": "mcs500_programming_manual", "chunk_index": 831, "length": 26, "hash": "09c6e1693dab6c103a33bdcab03daf54"}
{"id": "mcs500_programming_manual_832", "text": "[2214][t, \u1e8b, \u1e8f, \u017c, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 832, "length": 20, "hash": "d888804bdefe0dc34ce4525fc306c0ec"}
{"id": "mcs500_programming_manual_833", "text": "[2218][t, ce]\n[2219][t, ct]", "source": "mcs500_programming_manual", "chunk_index": 833, "length": 27, "hash": "6e4afa2d1031f4949dcad0c95ecc95bf"}
{"id": "mcs500_programming_manual_834", "text": "Same as response of GetWorkZoneCfg\n(page 284)\nSame as response of GetWorkZoneLimits\n(page 285)\nas\nSame\n(page 283)\nSame\nas\n(page 281)\nSame as response of GetCollisionStatus\n(page 282)\nSame as response of GetWorkZoneStatus\n(page 286)\nSame\nas\n(page 237)\nSame as response of GetRtTargetJointPos\n(page 270)\nSame as response of GetRtTargetCartPos\n(page 266)\nSame as response of GetRtTargetJointVel\n(page 272)\nSame as response of GetRtTargetJointTorq\n(page 271)\nSame as response of GetRtTargetCartVel\n(page 267)\nSame as\n(page 268)\nSame as response of GetRtTargetConfTurn\n(page 269)\nSame\nas\n(page 263)\nSame\nas\n(page 259)\nas\nSame\n(page 265)\nSame\nas\n(page 264)\nas\nSame\n(page 260)\nSame as response of GetRtConf (page 261)\nof GetRtConfTurn\nas\nSame\n(page 262)", "source": "mcs500_programming_manual", "chunk_index": 834, "length": 746, "hash": "e5ddf1143bcce8c2e481b61635643c30"}
{"id": "mcs500_programming_manual_835", "text": "(page 284)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 835, "length": 30, "hash": "76310ba5f7254b6aa568cd4ea5f54686"}
{"id": "mcs500_programming_manual_836", "text": "(page 285)\nas\nSame\n(page 283)\nSame\nas\n(page 281)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 836, "length": 68, "hash": "014666ac93f8c887611d03a5df7d7bac"}
{"id": "mcs500_programming_manual_837", "text": "(page 282)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 837, "length": 30, "hash": "02855e63878bf5dff09cbb86f85e9685"}
{"id": "mcs500_programming_manual_838", "text": "Same\nas\n(page 237)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 838, "length": 38, "hash": "7e22e760b28feecb0dacf51c334e813a"}
{"id": "mcs500_programming_manual_839", "text": "(page 270)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 839, "length": 30, "hash": "83ea105195b19a242bdba41e086ac830"}
{"id": "mcs500_programming_manual_840", "text": "(page 266)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 840, "length": 30, "hash": "ba820ad429ee1cdba37fa7b70a638bdf"}
{"id": "mcs500_programming_manual_841", "text": "(page 272)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 841, "length": 30, "hash": "fa78fdff379591c6d2e7155535871343"}
{"id": "mcs500_programming_manual_842", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 842, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_843", "text": "(page 271)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 843, "length": 30, "hash": "35c793b7dd4a90a208806f08119cc268"}
{"id": "mcs500_programming_manual_844", "text": "(page 267)\nSame as\n(page 268)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 844, "length": 49, "hash": "a72b08ff4637e308ab4403075dae4b6a"}
{"id": "mcs500_programming_manual_845", "text": "(page 263)\nSame\nas\n(page 259)\nas\nSame\n(page 265)\nSame\nas\n(page 264)\nas\nSame\n(page 260)", "source": "mcs500_programming_manual", "chunk_index": 845, "length": 86, "hash": "4dcf2ec58b432c29b2ab6b186e88df8a"}
{"id": "mcs500_programming_manual_846", "text": "response of GetRtTargetConf", "source": "mcs500_programming_manual", "chunk_index": 846, "length": 27, "hash": "3f28d3a53a29a6b8298d53f89d6917bb"}
{"id": "mcs500_programming_manual_847", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 847, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_848", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 848, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_849", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 849, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_850", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 850, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_851", "text": "Table 3 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 851, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "mcs500_programming_manual_852", "text": "Table 3 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 852, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "mcs500_programming_manual_853", "text": "\u2713 \u2713 [2220][t, n, ax, ay, az]", "source": "mcs500_programming_manual", "chunk_index": 853, "length": 28, "hash": "8241e56c8fad20ed1da0fc40f8004105"}
{"id": "mcs500_programming_manual_854", "text": "[2226][t,hardDecel,linDistance,angDistance]\n[2227][t,n]", "source": "mcs500_programming_manual", "chunk_index": 854, "length": 55, "hash": "9c2cc886bd96fbb4e155f2c85dd2a412"}
{"id": "mcs500_programming_manual_855", "text": "[2226][t,hardDecel,linDistance,angDistance]\n[2227][t,n]", "source": "mcs500_programming_manual", "chunk_index": 855, "length": 55, "hash": "9c2cc886bd96fbb4e155f2c85dd2a412"}
{"id": "mcs500_programming_manual_856", "text": "\u2713 [2228][t, x, y, z, \u03b3]\n\u2713 [2229][t, x, y, z, \u03b3]\n\u2713 [2230][t]", "source": "mcs500_programming_manual", "chunk_index": 856, "length": 59, "hash": "c2a8c5e49c1bdaecfcbdb7f216c273fb"}
{"id": "mcs500_programming_manual_857", "text": "[2228][t, x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 857, "length": 21, "hash": "cb417cd926471e845141e95a479ce6e5"}
{"id": "mcs500_programming_manual_858", "text": "[2229][t, x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 858, "length": 21, "hash": "c77e7ba65091b06ff3646d8d78e171a5"}
{"id": "mcs500_programming_manual_859", "text": "[2300][t, simType, phyType,\nhs, es, oh]\n[2310][t, v1, v2]", "source": "mcs500_programming_manual", "chunk_index": 859, "length": 57, "hash": "684b53a929cc65d98135e728bc6037b6"}
{"id": "mcs500_programming_manual_860", "text": "[2300][t, simType, phyType,\nhs, es, oh]\n[2310][t, v", "source": "mcs500_programming_manual", "chunk_index": 860, "length": 51, "hash": "72f6b2a56605181c13c4f30b335038eb"}
{"id": "mcs500_programming_manual_861", "text": "[2320][t, hp, dr, gc, go]", "source": "mcs500_programming_manual", "chunk_index": 861, "length": 25, "hash": "d597f7a6f5fd4da92ca23d93564a8623"}
{"id": "mcs500_programming_manual_862", "text": "[2320][t, hp, dr, gc, go]", "source": "mcs500_programming_manual", "chunk_index": 862, "length": 25, "hash": "d597f7a6f5fd4da92ca23d93564a8623"}
{"id": "mcs500_programming_manual_863", "text": "[2330][t,\nsimMode, errorCode]\n[2340][t, bid, p1, p2, p3, p4, p5,\np6, p7, p8]\n[2341][t, bid, p1, p2, p3, p4, p5,\np6, p7, p8]\n[2342][t, v, h, p]", "source": "mcs500_programming_manual", "chunk_index": 863, "length": 142, "hash": "dad595833768e3426185bafe7b1bd4a1"}
{"id": "mcs500_programming_manual_864", "text": "[2330][t,\nsimMode, errorCode]\n[2340][t, b", "source": "mcs500_programming_manual", "chunk_index": 864, "length": 41, "hash": "b7103202ce2fb8e3e385128f7bc97a98"}
{"id": "mcs500_programming_manual_865", "text": "]\n[2342][t, v, h, p]", "source": "mcs500_programming_manual", "chunk_index": 865, "length": 20, "hash": "af397b09b13055d3b66c9e1f7877b324"}
{"id": "mcs500_programming_manual_866", "text": "[3000][Connected\nx_x_x.x.x.]\n[3028][s]\n[3032][2/1/0]", "source": "mcs500_programming_manual", "chunk_index": 866, "length": 52, "hash": "73b6105957af4b7c2f64c4b407743243"}
{"id": "mcs500_programming_manual_867", "text": "[3000][Connected\nx_x_x.x.x.]", "source": "mcs500_programming_manual", "chunk_index": 867, "length": 28, "hash": "60c286ae2fcc7ed0d2dc3c5b39834284"}
{"id": "mcs500_programming_manual_868", "text": "[3028][s]\n[3032][2/1/0]", "source": "mcs500_programming_manual", "chunk_index": 868, "length": 23, "hash": "6b67beed5aad3b591aea9a296a186efe"}
{"id": "mcs500_programming_manual_869", "text": "response of GetRtValveState", "source": "mcs500_programming_manual", "chunk_index": 869, "length": 27, "hash": "284484f1436902c71788887b3422a38a"}
{"id": "mcs500_programming_manual_870", "text": "Same as response of GetRtAccelerometer\n(page 258)\nWhen starting or finishing hard deceleration\nWhen latest checkpoint reached changes\nSame as response of GetRtWrf (page 274)\nSame as response of GetRtTrf (page 273)\nSame as response of GetRtTrf (page 273)\nSame as response of GetRtExtToolStatus\n(page 297)\nSame as\n(page 306)\nSame as response of GetRtGripperState\n(page 300)\nSame as response of GetRtGripperForce\n(page 298)\nSame as\n(page 299)\nSame\nas\n(page 302)\nSame as response of GetRtOutputState\n(page 303)\nSame as\n(page 301)\nSame as response of GetRtVacuumState\n(page 305)\nSame as response of GetRtVacuumPressure\n(page 304)\nConfirms connection to robot", "source": "mcs500_programming_manual", "chunk_index": 870, "length": 653, "hash": "51804a889470f14a9abd72a9f00568e4"}
{"id": "mcs500_programming_manual_871", "text": "(page 258)\nWhen starting or finishing hard deceleration\nWhen latest checkpoint reached changes\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 871, "length": 114, "hash": "c22579fbc9ce58817bc7da742a6c16df"}
{"id": "mcs500_programming_manual_872", "text": "(page 274)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 872, "length": 30, "hash": "0c26c0c7acea7f43a424bc175b2ab828"}
{"id": "mcs500_programming_manual_873", "text": "(page 273)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 873, "length": 30, "hash": "c72e5e43d15adc4ea270a008ea448404"}
{"id": "mcs500_programming_manual_874", "text": "(page 273)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 874, "length": 30, "hash": "c72e5e43d15adc4ea270a008ea448404"}
{"id": "mcs500_programming_manual_875", "text": "(page 297)\nSame as\n(page 306)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 875, "length": 49, "hash": "c59ecbb39fa97f69a29f420203b436b6"}
{"id": "mcs500_programming_manual_876", "text": "(page 300)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 876, "length": 30, "hash": "0607169de2bb124f9f4ec368ed8255cc"}
{"id": "mcs500_programming_manual_877", "text": "(page 298)\nSame as\n(page 299)\nSame\nas\n(page 302)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 877, "length": 68, "hash": "68fde6a5d4d43266d00d407f57e337fb"}
{"id": "mcs500_programming_manual_878", "text": "(page 303)\nSame as\n(page 301)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 878, "length": 49, "hash": "f047c0c27bd100d9c5901c48c2158a27"}
{"id": "mcs500_programming_manual_879", "text": "(page 305)\nSame as response of", "source": "mcs500_programming_manual", "chunk_index": 879, "length": 30, "hash": "98dbd899b1d338c94bf34071947fdab5"}
{"id": "mcs500_programming_manual_880", "text": "(page 304)\nConfirms connection to robot", "source": "mcs500_programming_manual", "chunk_index": 880, "length": 39, "hash": "41f9bbed0c9281e8a8ed5ce24fb3c0df"}
{"id": "mcs500_programming_manual_881", "text": "response of GetRtGripperPos", "source": "mcs500_programming_manual", "chunk_index": 881, "length": 27, "hash": "6fcb78f0d14132af114330c5c6f9ab27"}
{"id": "mcs500_programming_manual_882", "text": "response of GetRtInputState", "source": "mcs500_programming_manual", "chunk_index": 882, "length": 27, "hash": "820ef64e4cca285c4e7cf9c1a5ee8bbf"}
{"id": "mcs500_programming_manual_883", "text": "Torque limit exceeded status\nResponse to a change in the state of the P-\nStop 2 safety stop signal.\nSent by the robot whenever a drive is near to\nor in overload. The first value corresponds\nto drive 1, and so on, and it is 1 if the drive\nis near or in overload, and zero otherwise.\nResponse to a change in the state of the P-\nStop 1 safety stop signal\nResponse to a change in the state of the E-\nStop safety stop signal", "source": "mcs500_programming_manual", "chunk_index": 883, "length": 419, "hash": "2609565894ade508615db7ad1d2cea74"}
{"id": "mcs500_programming_manual_884", "text": "Torque limit exceeded status\nResponse to a change in the state of the P-\nStop 2 safety stop signal.\nSent by the robot whenever a drive is near to\nor in overload. The first value corresponds\nto drive 1, and so on, and it is 1 if the drive\nis near or in overload, and zero otherwise.\nResponse to a change in the state of the P-\nStop 1 safety stop signal", "source": "mcs500_programming_manual", "chunk_index": 884, "length": 351, "hash": "a12fa00080465ad4bcacb54c94cc70f2"}
{"id": "mcs500_programming_manual_885", "text": "Response to a change in the state of the E-\nStop safety stop signal", "source": "mcs500_programming_manual", "chunk_index": 885, "length": 67, "hash": "24b05ccb2dd4edcf5f055302e6de2f99"}
{"id": "mcs500_programming_manual_886", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 886, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_887", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 887, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_888", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 888, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_889", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 889, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_890", "text": "Table 3 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 890, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "mcs500_programming_manual_891", "text": "Table 3 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 891, "length": 38, "hash": "0bffae3b0c02f45b7d1434d1e4658edd"}
{"id": "mcs500_programming_manual_892", "text": "Response to a change in the state of the\noperation mode safety stop signal state\nResponse to a change in the state of the\nEnabling Device Released safety stop signal,\nwhen the robot is in manual mode\nOccurs when supply voltage fluctuation is\ndetected\nOccurs after robot is rebooted, and after\nReset button is pressed for the first time\nRedundancy fault. Occurs if a safety signal\nmismatch is detected\nStandstill fault. Occurs if robot moves while\nin pause mode\nResponse to a change in the connection drop\nsafety signal change\nMinor error (e.g., power supply reset button\npressed too long). Motor voltage is removed\nand robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 892, "length": 640, "hash": "ad7071fb2d9fc611f0da5665d56e8b75"}
{"id": "mcs500_programming_manual_893", "text": "Response to a change in the state of the\noperation mode safety stop signal state\nResponse to a change in the state of the\nEnabling Device Released safety stop signal,\nwhen the robot is in manual mode\nOccurs when supply voltage fluctuation is\ndetected\nOccurs after robot is rebooted, and after\nReset button is pressed for the first time\nRedundancy fault. Occurs if a safety signal\nmismatch is detected\nStandstill fault. Occurs if robot moves while", "source": "mcs500_programming_manual", "chunk_index": 893, "length": 446, "hash": "3be2e525505c9cdb165ea9632ab9c780"}
{"id": "mcs500_programming_manual_894", "text": "in pause mode\nResponse to a change in the connection drop\nsafety signal change\nMinor error (e.g., power supply reset button\npressed too long). Motor voltage is removed\nand robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 894, "length": 193, "hash": "c257e5a97693cc9816e051e621c5b096"}
{"id": "mcs500_programming_manual_895", "text": "Note that multiple ASCII messages are separated by a single null-character and that there\nare no blank spaces in any of these messages. Here is an example of messages sent over TCP\nport 10001 in one interval (for clarity, the null-characters have been replaced by line breaks):", "source": "mcs500_programming_manual", "chunk_index": 895, "length": 277, "hash": "1eadf3cb2382862b88a44a64b9049ee8"}
{"id": "mcs500_programming_manual_896", "text": "Note that multiple ASCII messages are separated by a single null-character and that there\nare no blank spaces in any of these messages. Here is an example of messages sent over TCP\nport 10001 in one interval (for clarity, the null-characters have been replaced by line breaks):", "source": "mcs500_programming_manual", "chunk_index": 896, "length": 277, "hash": "1eadf3cb2382862b88a44a64b9049ee8"}
{"id": "mcs500_programming_manual_897", "text": "[2026][-102.6011,-0.0000,-78.9239,-0.0000,15.7848,110.3150]", "source": "mcs500_programming_manual", "chunk_index": 897, "length": 59, "hash": "b96b1f886fb1c2e3626e2bf313c28d83"}
{"id": "mcs500_programming_manual_898", "text": "[2026][-102.6011,-0.0000,-78.9239,-0.0000,15.7848,110.3150]", "source": "mcs500_programming_manual", "chunk_index": 898, "length": 59, "hash": "b96b1f886fb1c2e3626e2bf313c28d83"}
{"id": "mcs500_programming_manual_899", "text": "[2027][-3.7936,-16.9703,457.5125,26.3019,-5.6569,9.0367]", "source": "mcs500_programming_manual", "chunk_index": 899, "length": 56, "hash": "ccf33e9ffa06f929302f27bc52c6bfed"}
{"id": "mcs500_programming_manual_900", "text": "[2027][-3.7936,-16.9703,457.5125,26.3019,-5.6569,9.0367]", "source": "mcs500_programming_manual", "chunk_index": 900, "length": 56, "hash": "ccf33e9ffa06f929302f27bc52c6bfed"}
{"id": "mcs500_programming_manual_901", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 901, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_902", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 902, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_903", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 903, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_904", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 904, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_905", "text": "Errors detected by the robot", "source": "mcs500_programming_manual", "chunk_index": 905, "length": 28, "hash": "2b2ccec73d9c1250004941e4b9209c30"}
{"id": "mcs500_programming_manual_906", "text": "Errors detected by the robot", "source": "mcs500_programming_manual", "chunk_index": 906, "length": 28, "hash": "2b2ccec73d9c1250004941e4b9209c30"}
{"id": "mcs500_programming_manual_907", "text": "The robot enters error mode (page 339) when it encounters an issue while executing a\ncommand (see Table 1) or due to a hardware problem (e.g., exceeding a torque limit). When\nthis occurs, the robot sets the value of es (error state) to 1 in the response [2007][as, hs, sm,\nes, pm, eob, eom] of the GetStatusRobot (page 277).", "source": "mcs500_programming_manual", "chunk_index": 907, "length": 324, "hash": "ba5c143348ccb9f90cd785d0fd8d508e"}
{"id": "mcs500_programming_manual_908", "text": "(page 339) when it encounters an issue while executing a\ncommand (see Table 1) or due to a hardware problem (e.g., exceeding a torque limit). When\nthis occurs, the robot sets the value of es (error state) to 1 in the response [2007][as, hs, sm,\nes, pm, eob, eom] of the", "source": "mcs500_programming_manual", "chunk_index": 908, "length": 269, "hash": "6e987d68b74fde2d85764a5c56938be0"}
{"id": "mcs500_programming_manual_909", "text": "This message can also be received over the monitoring port (see Section 4). Additionally,\nif you send other commands to the robot while it is in error mode, it will respond with the\nmessage [1011][The robot is in error.].", "source": "mcs500_programming_manual", "chunk_index": 909, "length": 221, "hash": "a2308a90daae7ad7249589fdbcd5e324"}
{"id": "mcs500_programming_manual_910", "text": "This message can also be received over the monitoring port (see Section 4). Additionally,\nif you send other commands to the robot while it is in error mode, it will respond with the\nmessage [1011][The robot is in error.].", "source": "mcs500_programming_manual", "chunk_index": 910, "length": 221, "hash": "a2308a90daae7ad7249589fdbcd5e324"}
{"id": "mcs500_programming_manual_911", "text": "When the robot is in error mode, all pending motion commands are canceled (i.e., the motion\nqueue is cleared). The robot stops and ignores subsequent commands but responds with the\n[1011][The robot is in error.] message until it receives a ResetError (page 184) command.", "source": "mcs500_programming_manual", "chunk_index": 911, "length": 270, "hash": "b1c84679aa794f47a1a656984241ff6c"}
{"id": "mcs500_programming_manual_912", "text": "When the robot is in error mode, all pending motion commands are canceled (i.e., the motion\nqueue is cleared). The robot stops and ignores subsequent commands but responds with the\n[1011][The robot is in error.] message until it receives a", "source": "mcs500_programming_manual", "chunk_index": 912, "length": 239, "hash": "c70606121a5795f56341569916f024e5"}
{"id": "mcs500_programming_manual_913", "text": "After the error is reset, the robot will execute all request commands and begin accumulating\nmotion commands in its motion queue. However, these motion commands will only be\nexecuted once the ResumeMotion (page 185) command is received by the robot.", "source": "mcs500_programming_manual", "chunk_index": 913, "length": 249, "hash": "3fc15cdd7a50860b62de72ce25ac2441"}
{"id": "mcs500_programming_manual_914", "text": "After the error is reset, the robot will execute all request commands and begin accumulating\nmotion commands in its motion queue. However, these motion commands will only be\nexecuted once the", "source": "mcs500_programming_manual", "chunk_index": 914, "length": 191, "hash": "f358f6fa2412f125433cc72e3195034c"}
{"id": "mcs500_programming_manual_915", "text": "(page 185) command is received by the robot.", "source": "mcs500_programming_manual", "chunk_index": 915, "length": 44, "hash": "8212232f0d6aa7c527e428a91874d46e"}
{"id": "mcs500_programming_manual_916", "text": "As soon as the externally wired P-Stop 2 is activated (see the robot\u2019s user manual), the robot\nmotion is immediately decelerated to a stop, and the response [3032][1] is sent by the robot.\nThe motors and the EOAT remain active (i.e., the brakes are not applied) but stay immobilized\nuntil the stop is reset.", "source": "mcs500_programming_manual", "chunk_index": 916, "length": 307, "hash": "5584d7c062a71e6ea14680349653bbea"}
{"id": "mcs500_programming_manual_917", "text": "As soon as the externally wired P-Stop 2 is activated (see the robot\u2019s user manual), the robot\nmotion is immediately decelerated to a stop, and the response [3032][1] is sent by the robot.\nThe motors and the EOAT remain active (i.e., the brakes are not applied) but stay immobilized\nuntil the stop is reset.", "source": "mcs500_programming_manual", "chunk_index": 917, "length": 307, "hash": "5584d7c062a71e6ea14680349653bbea"}
{"id": "mcs500_programming_manual_918", "text": "If a motion command is sent to the robot while the stop signal is still active (and the robot\nis still activated and homed), the command will be ignored if the P-Stop 2 is configured in\n\u201cClear motion\u201d mode (SetPStop2Cfg (page 195)). In this case, the message [3032][1] will be\nsent again by the robot. However, if the P-Stop 2 is configured in \u201cPause motion\u201d mode, the\ncommands will continue to be accepted (queued) even while the robot is in a P-Stop 2 state.", "source": "mcs500_programming_manual", "chunk_index": 918, "length": 460, "hash": "0621cc53ad984b2d5792a7cbcbd0d546"}
{"id": "mcs500_programming_manual_919", "text": "If a motion command is sent to the robot while the stop signal is still active (and the robot\nis still activated and homed), the command will be ignored if the P-Stop 2 is configured in\n\u201cClear motion\u201d mode (", "source": "mcs500_programming_manual", "chunk_index": 919, "length": 207, "hash": "3c86ea5f336479e01f49a448e69d4160"}
{"id": "mcs500_programming_manual_920", "text": "(page 195)). In this case, the message [3032][1] will be\nsent again by the robot. However, if the P-Stop 2 is configured in \u201cPause motion\u201d mode, the\ncommands will continue to be accepted (queued) even while the robot is in a P-Stop 2 state.", "source": "mcs500_programming_manual", "chunk_index": 920, "length": 240, "hash": "e0cf937a542ce73bd1ec5ca84a0cb04d"}
{"id": "mcs500_programming_manual_921", "text": "Once the stop signal is removed, the message [3032][2] is returned. The P-Stop 2 condition\nis now ready to be reset using ResumeMotion (page 185). The robot will then respond with\nthe messages [2043][Motion resumed.] and [3032][0].", "source": "mcs500_programming_manual", "chunk_index": 921, "length": 231, "hash": "0af3a8bd8389795076de32742fe5fd69"}
{"id": "mcs500_programming_manual_922", "text": "Once the stop signal is removed, the message [3032][2] is returned. The P-Stop 2 condition", "source": "mcs500_programming_manual", "chunk_index": 922, "length": 90, "hash": "b812fb906ae3c9ac24d1056ace09da69"}
{"id": "mcs500_programming_manual_923", "text": "is now ready to be reset using", "source": "mcs500_programming_manual", "chunk_index": 923, "length": 30, "hash": "72c9de0f9da920251245271e51d10788"}
{"id": "mcs500_programming_manual_924", "text": "(page 185). The robot will then respond with\nthe messages [2043][Motion resumed.] and [3032][0].", "source": "mcs500_programming_manual", "chunk_index": 924, "length": 96, "hash": "288b4e58f004ee6391ee61571ac8bbb9"}
{"id": "mcs500_programming_manual_925", "text": "When the E-Stop is activated, the robot decelerates to a full stop, power to the motors is cut,\nthe brakes are applied, and the robot is deactivated. The robot then sends the message\n[3070][1], along with the messages [2044][The motion was cleared.] and [2004][Motors\ndeactivated.].", "source": "mcs500_programming_manual", "chunk_index": 925, "length": 282, "hash": "85211785c38673bc98d2c937c27f56ba"}
{"id": "mcs500_programming_manual_926", "text": "When the E-Stop is activated, the robot decelerates to a full stop,", "source": "mcs500_programming_manual", "chunk_index": 926, "length": 67, "hash": "9827fa930ee54281da36cb549b21b63c"}
{"id": "mcs500_programming_manual_927", "text": "power to the motors is cut", "source": "mcs500_programming_manual", "chunk_index": 927, "length": 26, "hash": "ee4c319902e72cff2f6eb51dee0e5556"}
{"id": "mcs500_programming_manual_928", "text": ",\nthe brakes are applied, and the robot is", "source": "mcs500_programming_manual", "chunk_index": 928, "length": 42, "hash": "e750f720daf60f00d3e00e0407da04ff"}
{"id": "mcs500_programming_manual_929", "text": ". The robot then sends the message\n[3070][1], along with the messages [2044][The motion was cleared.] and [2004][Motors\ndeactivated.].", "source": "mcs500_programming_manual", "chunk_index": 929, "length": 134, "hash": "712d0417cb6d477a130b36387ab774ce"}
{"id": "mcs500_programming_manual_930", "text": "To reactivate the motors, you must first clear the E-Stop condition, which will produce the\nmessage [3070][2]. Then, press the RESET button or activate the external Reset, which\nwill produce the message [3070][0]. Afterward, you need to re-activate the robot with the\nActivateRobot (page 171) command.", "source": "mcs500_programming_manual", "chunk_index": 930, "length": 301, "hash": "c4c65ba212ed417a2a6872f24339a2a0"}
{"id": "mcs500_programming_manual_931", "text": "To reactivate the motors, you must first clear the E-Stop condition, which will produce the\nmessage [3070][2]. Then, press the RESET button or activate the external Reset, which\nwill produce the message [3070][0]. Afterward, you need to re-activate the robot with the", "source": "mcs500_programming_manual", "chunk_index": 931, "length": 267, "hash": "1a92f8743da2a910d71f483e0cc77b7c"}
{"id": "mcs500_programming_manual_932", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 932, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_933", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 933, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_934", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 934, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_935", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 935, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_936", "text": "The robot can differentiate between the Emergency Stop function signal and the P-Stop 1.\nWhen the P-Stop 1 signal is activated and the robot is in automatic mode, the robot decelerates\nto a full stop, power to the motors and the vacuum generator of the MVK01 is cut, the brakes\nare applied, and the robot is deactivated. The robot then sends the message [3069][1], along\nwith the messages [2044][The motion was cleared.] and [2004][Motors deactivated.].", "source": "mcs500_programming_manual", "chunk_index": 936, "length": 453, "hash": "a9c0e404a4e1711caf6b8c35b4f32e98"}
{"id": "mcs500_programming_manual_937", "text": "The robot can differentiate between the Emergency Stop function signal and the P-Stop 1.\nWhen the P-Stop 1 signal is activated and the robot is in automatic mode, the robot decelerates\nto a full stop,", "source": "mcs500_programming_manual", "chunk_index": 937, "length": 200, "hash": "9b5fc147f20729dd73def2975dcdbf57"}
{"id": "mcs500_programming_manual_938", "text": "power to the motors and the vacuum generator of the MVK01 is cut", "source": "mcs500_programming_manual", "chunk_index": 938, "length": 64, "hash": "45ad7da89e040dede8e8c48257bae6b7"}
{"id": "mcs500_programming_manual_939", "text": ", the brakes\nare applied, and the robot is", "source": "mcs500_programming_manual", "chunk_index": 939, "length": 42, "hash": "c5c6a12110628dd292565db2db844d09"}
{"id": "mcs500_programming_manual_940", "text": ". The robot then sends the message [3069][1], along\nwith the messages [2044][The motion was cleared.] and [2004][Motors deactivated.].", "source": "mcs500_programming_manual", "chunk_index": 940, "length": 134, "hash": "ad625b3b32af798e2b80ff6a9a9ad2d3"}
{"id": "mcs500_programming_manual_941", "text": "To reactivate the motors (and the I/O and vacuum module), you must first clear the P-Stop\n1 condition, which will produce the message [3069][2]. Then, press the RESET button or\nactivate the external Reset, which will produce the message [3069][0]. Afterward, you need\nto re-activate the robot with the ActivateRobot (page 171) command.", "source": "mcs500_programming_manual", "chunk_index": 941, "length": 335, "hash": "af05643664353ac2bbac43e5f3d53345"}
{"id": "mcs500_programming_manual_942", "text": "To reactivate the motors (and the I/O and vacuum module), you must first clear the P-Stop\n1 condition, which will produce the message [3069][2]. Then, press the RESET button or\nactivate the external Reset, which will produce the message [3069][0]. Afterward, you need\nto re-activate the robot with the", "source": "mcs500_programming_manual", "chunk_index": 942, "length": 301, "hash": "55d3255c925cb928225a918ed7e1ab88"}
{"id": "mcs500_programming_manual_943", "text": "When the operation mode switch is turned to the \u201cManual Mode\u201d position, the robot monitors\nthe position of the enabling device. Whenever the enabling device is not pressed halfway, the\nsafety signal [3081][1] is sent, and the robot motion is paused.", "source": "mcs500_programming_manual", "chunk_index": 943, "length": 249, "hash": "df2127cc898ba046bf937fa049329a5d"}
{"id": "mcs500_programming_manual_944", "text": "When the operation mode switch is turned to the \u201cManual Mode\u201d position, the robot monitors\nthe position of the enabling device. Whenever the enabling device is not pressed halfway, the\nsafety signal [3081][1] is sent, and the robot motion is paused.", "source": "mcs500_programming_manual", "chunk_index": 944, "length": 249, "hash": "df2127cc898ba046bf937fa049329a5d"}
{"id": "mcs500_programming_manual_945", "text": "To move the robot, you must press the enabling device halfway (or release and press\nit halfway again), which will produce the message [3081][2]. At this point, using the\nResumeMotion (page 185) command is allowed, and it will produce the messages [3081][0]\nand [2043][Motion resumed.].", "source": "mcs500_programming_manual", "chunk_index": 945, "length": 285, "hash": "2a65b281bfb7a52ea967cbac81d4f2d5"}
{"id": "mcs500_programming_manual_946", "text": "To move the robot, you must press the enabling device halfway (or release and press\nit halfway again), which will produce the message [3081][2]. At this point, using the", "source": "mcs500_programming_manual", "chunk_index": 946, "length": 169, "hash": "cf9f226ecccb68fca2af77415797d787"}
{"id": "mcs500_programming_manual_947", "text": "(page 185) command is allowed, and it will produce the messages [3081][0]\nand [2043][Motion resumed.].", "source": "mcs500_programming_manual", "chunk_index": 947, "length": 102, "hash": "e0857083c9fd80fc089aa44f307ccf68"}
{"id": "mcs500_programming_manual_948", "text": "Operation mode switch", "source": "mcs500_programming_manual", "chunk_index": 948, "length": 21, "hash": "0afb8ea0ebea8ebde37b532506b46cf1"}
{"id": "mcs500_programming_manual_949", "text": "Operation mode switch", "source": "mcs500_programming_manual", "chunk_index": 949, "length": 21, "hash": "0afb8ea0ebea8ebde37b532506b46cf1"}
{"id": "mcs500_programming_manual_950", "text": "When the robot is powered, any change in the operation mode switch position causes the\nrobot to decelerate to a full stop and removes power from the robot motors. If the switch is\nset to \u201cLocked,\u201d the message [3080][1] is sent. If the switch is set to \u201cAutomatic\u201d or \u201cManual,\u201d\nthe message [3080][2] is sent. You must then press the Reset button on the power supply (or\nthe external reset button), which will produce the message [3080][0].", "source": "mcs500_programming_manual", "chunk_index": 950, "length": 438, "hash": "dd3ffbb176b67649758db37ad0d0be01"}
{"id": "mcs500_programming_manual_951", "text": "When the robot is powered, any change in the operation mode switch position causes the\nrobot to decelerate to a full stop and removes power from the robot motors. If the switch is\nset to \u201cLocked,\u201d the message [3080][1] is sent. If the switch is set to \u201cAutomatic\u201d or \u201cManual,\u201d\nthe message [3080][2] is sent. You must then press the Reset button on the power supply (or\nthe external reset button), which will produce the message [3080][0].", "source": "mcs500_programming_manual", "chunk_index": 951, "length": 438, "hash": "dd3ffbb176b67649758db37ad0d0be01"}
{"id": "mcs500_programming_manual_952", "text": "To activate the robot after switching to \u201cManual\u201d mode, in addition to pressing the Reset\nbutton, the enabling device must be pressed halfway (or released and pressed halfway again).\nOnce this is done, the robot can be activated using the ActivateRobot (page 171) command.", "source": "mcs500_programming_manual", "chunk_index": 952, "length": 272, "hash": "104b72bb7fd00daebec920dc9e8fef88"}
{"id": "mcs500_programming_manual_953", "text": "To activate the robot after switching to \u201cManual\u201d mode, in addition to pressing the Reset\nbutton, the enabling device must be pressed halfway (or released and pressed halfway again).\nOnce this is done, the robot can be activated using the", "source": "mcs500_programming_manual", "chunk_index": 953, "length": 238, "hash": "e343c9cfddbc63c30c5dd61fa57992fd"}
{"id": "mcs500_programming_manual_954", "text": "For safety reasons, the robot continuously supervises the TCP connection. If the robot detects\nthat the TCP connection has dropped while it is moving, it will immediately stop the motion\nand send the message [3081][1].", "source": "mcs500_programming_manual", "chunk_index": 954, "length": 218, "hash": "9090b72686113644693746ab361e4ec2"}
{"id": "mcs500_programming_manual_955", "text": "For safety reasons, the robot continuously supervises the TCP connection. If the robot detects\nthat the TCP connection has dropped while it is moving, it will immediately stop the motion\nand send the message [3081][1].", "source": "mcs500_programming_manual", "chunk_index": 955, "length": 218, "hash": "9090b72686113644693746ab361e4ec2"}
{"id": "mcs500_programming_manual_956", "text": "If the connection watchdog is enabled and the robot does not receive a ConnectionWatchdog\n(page 174) message before the established timeout, the robot will drop the TCP connection\nand raise the safety signal [3081][1], regardless of whether the robot is moving or not.", "source": "mcs500_programming_manual", "chunk_index": 956, "length": 268, "hash": "2b60cf847de3cbab843e34964f959c2c"}
{"id": "mcs500_programming_manual_957", "text": "If the connection watchdog is enabled and the robot does not receive a", "source": "mcs500_programming_manual", "chunk_index": 957, "length": 70, "hash": "9e56f9651a5bc7e1568bc851621b5a93"}
{"id": "mcs500_programming_manual_958", "text": "(page 174) message before the established timeout, the robot will drop the TCP connection\nand raise the safety signal [3081][1], regardless of whether the robot is moving or not.", "source": "mcs500_programming_manual", "chunk_index": 958, "length": 178, "hash": "0c2d34feafafe202201389baaa660fee"}
{"id": "mcs500_programming_manual_959", "text": "Once a new TCP/IP connection is established, the robot will send the message [3081][2].\nAfterward, you must send the ResumeMotion (page 185) command, to which the robot will\nrespond with the message [3081][0].", "source": "mcs500_programming_manual", "chunk_index": 959, "length": 209, "hash": "0caec61c004bae657cf8a6722c23dc21"}
{"id": "mcs500_programming_manual_960", "text": "Once a new TCP/IP connection is established, the robot will send the message [3081][2].\nAfterward, you must send the", "source": "mcs500_programming_manual", "chunk_index": 960, "length": 116, "hash": "419dad4058bf44f1456e941efd2d8316"}
{"id": "mcs500_programming_manual_961", "text": "(page 185) command, to which the robot will\nrespond with the message [3081][0].", "source": "mcs500_programming_manual", "chunk_index": 961, "length": 79, "hash": "b991f509cbf765980079bd54e122f4d6"}
{"id": "mcs500_programming_manual_962", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 962, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_963", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 963, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_964", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 964, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_965", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 965, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_966", "text": "Supply voltage fluctuation", "source": "mcs500_programming_manual", "chunk_index": 966, "length": 26, "hash": "109af32a36fc58eeb99198212b28100d"}
{"id": "mcs500_programming_manual_967", "text": "Supply voltage fluctuation", "source": "mcs500_programming_manual", "chunk_index": 967, "length": 26, "hash": "109af32a36fc58eeb99198212b28100d"}
{"id": "mcs500_programming_manual_968", "text": "If the robot detects a short supply voltage fluctuation, it will generate the signal [3082][1],\ndecelerate to a full stop, remove power from its motors, and then send the message [3082][2].\nYou must press the Reset button on the power supply (or the external reset button), which\nwill cause the robot to send the message [3082][0].", "source": "mcs500_programming_manual", "chunk_index": 968, "length": 331, "hash": "a2f64e64d553e384eb8d27baf879f1ab"}
{"id": "mcs500_programming_manual_969", "text": "If the robot detects a short supply voltage fluctuation, it will generate the signal [3082][1],\ndecelerate to a full stop, remove power from its motors, and then send the message [3082][2].\nYou must press the Reset button on the power supply (or the external reset button), which\nwill cause the robot to send the message [3082][0].", "source": "mcs500_programming_manual", "chunk_index": 969, "length": 331, "hash": "a2f64e64d553e384eb8d27baf879f1ab"}
{"id": "mcs500_programming_manual_970", "text": "If the supply voltage fluctuations are more significant or prolonged, the robot will shut itself\noff and attempt to reboot a few seconds later.", "source": "mcs500_programming_manual", "chunk_index": 970, "length": 143, "hash": "420a97fcb3dc60330d0227abffbac897"}
{"id": "mcs500_programming_manual_971", "text": "If the supply voltage fluctuations are more significant or prolonged, the robot will shut itself\noff and attempt to reboot a few seconds later.", "source": "mcs500_programming_manual", "chunk_index": 971, "length": 143, "hash": "420a97fcb3dc60330d0227abffbac897"}
{"id": "mcs500_programming_manual_972", "text": "After a reboot, the robot motors are not powered, and the message [3083][2] is sent. Once\nthe Reset button is pressed, the message [3083][0] is sent, and the robot motors are powered.", "source": "mcs500_programming_manual", "chunk_index": 972, "length": 183, "hash": "f7f71bc002a4248f958d6dd2965eef60"}
{"id": "mcs500_programming_manual_973", "text": "After a reboot, the robot motors are not powered, and the message [3083][2] is sent. Once\nthe Reset button is pressed, the message [3083][0] is sent, and the robot motors are powered.", "source": "mcs500_programming_manual", "chunk_index": 973, "length": 183, "hash": "f7f71bc002a4248f958d6dd2965eef60"}
{"id": "mcs500_programming_manual_974", "text": "If a redundant safety signal mismatch is detected for more than 1 second, the robot will\nimmediately decelerate to a full stop, remove power from its motors, and send the message\n[3084][1].", "source": "mcs500_programming_manual", "chunk_index": 974, "length": 189, "hash": "84eb693f5af7e417adefdd160ab9af4a"}
{"id": "mcs500_programming_manual_975", "text": "If a redundant safety signal mismatch is detected for more than 1 second, the robot will\nimmediately decelerate to a full stop, remove power from its motors, and send the message\n[3084][1].", "source": "mcs500_programming_manual", "chunk_index": 975, "length": 189, "hash": "84eb693f5af7e417adefdd160ab9af4a"}
{"id": "mcs500_programming_manual_976", "text": "Redundant safety signals include the E-Stop, the P-Stop 1, the P-Stop 2, and the three-position\nenabling device.", "source": "mcs500_programming_manual", "chunk_index": 976, "length": 112, "hash": "ad89373cdc97cdd4401e4c4b1a6654b8"}
{"id": "mcs500_programming_manual_977", "text": "Redundant safety signals include the E-Stop, the P-Stop 1, the P-Stop 2, and the three-position\nenabling device.", "source": "mcs500_programming_manual", "chunk_index": 977, "length": 112, "hash": "ad89373cdc97cdd4401e4c4b1a6654b8"}
{"id": "mcs500_programming_manual_978", "text": "If the robot is supposed to be in pause mode but moves, the message [3085][1] is sent, power\nto the motors is removed, and once the robot comes to a complete stop, the message [3085][2]\nis sent.", "source": "mcs500_programming_manual", "chunk_index": 978, "length": 194, "hash": "409cc42a5cae948b82c97e16cc5703fe"}
{"id": "mcs500_programming_manual_979", "text": "If the robot is supposed to be in pause mode but moves, the message [3085][1] is sent, power\nto the motors is removed, and once the robot comes to a complete stop, the message [3085][2]\nis sent.", "source": "mcs500_programming_manual", "chunk_index": 979, "length": 194, "hash": "409cc42a5cae948b82c97e16cc5703fe"}
{"id": "mcs500_programming_manual_980", "text": "Once the Reset button is pressed, the message [3085][0] is sent.", "source": "mcs500_programming_manual", "chunk_index": 980, "length": 64, "hash": "69fc391a79c08ccf0c6541ff2460efaa"}
{"id": "mcs500_programming_manual_981", "text": "Once the Reset button is pressed, the message [3085][0] is sent.", "source": "mcs500_programming_manual", "chunk_index": 981, "length": 64, "hash": "69fc391a79c08ccf0c6541ff2460efaa"}
{"id": "mcs500_programming_manual_982", "text": "Certain minor errors unrelated to safety signals can result in the removal of power from the\nmotors and the sending of the message [3087][1]. These include prolonged reset signals and\nsome drive errors. The exact cause of these minor errors can be found in the robot logs.", "source": "mcs500_programming_manual", "chunk_index": 982, "length": 272, "hash": "e71d6c9ab575e24cfb1b10d9c2fdfabc"}
{"id": "mcs500_programming_manual_983", "text": "Certain minor errors unrelated to safety signals can result in the removal of power from the", "source": "mcs500_programming_manual", "chunk_index": 983, "length": 92, "hash": "2f719bd93b384b3bb208ff6e169c5432"}
{"id": "mcs500_programming_manual_984", "text": "motors and the sending of the message [3087][1]. These include prolonged reset signals and\nsome drive errors. The exact cause of these minor errors can be found in the robot logs.", "source": "mcs500_programming_manual", "chunk_index": 984, "length": 179, "hash": "9223cd07987d70c52ccf03c648d8ceb7"}
{"id": "mcs500_programming_manual_985", "text": "Once the error source is resolved, the message [3087][2] is sent. Afterward, following a reset,\nthe message [3087][0] is sent.", "source": "mcs500_programming_manual", "chunk_index": 985, "length": 126, "hash": "f2da1cd8dde17cf2b59e64d8baafb453"}
{"id": "mcs500_programming_manual_986", "text": "Once the error source is resolved, the message [3087][2] is sent. Afterward, following a reset,\nthe message [3087][0] is sent.", "source": "mcs500_programming_manual", "chunk_index": 986, "length": 126, "hash": "f2da1cd8dde17cf2b59e64d8baafb453"}
{"id": "mcs500_programming_manual_987", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 987, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_988", "text": "Management of errors and safety stops", "source": "mcs500_programming_manual", "chunk_index": 988, "length": 37, "hash": "0fcdfee4866a0b4b0f4d57127339e473"}
{"id": "mcs500_programming_manual_989", "text": "Communicating over cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 989, "length": 35, "hash": "4f9e00723a5a5e3e2a89d846360af285"}
{"id": "mcs500_programming_manual_990", "text": "Communicating over cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 990, "length": 35, "hash": "4f9e00723a5a5e3e2a89d846360af285"}
{"id": "mcs500_programming_manual_991", "text": "Our robots can also be controlled using the following three cyclic protocols: EtherCAT,\nEtherNetIP, and PROFINET. These protocols are described in Section 6, Section 7, and\nSection 8, respectively. While inherently different, they share the same cyclic data format\nand API, so we will cover all common concepts in this section.", "source": "mcs500_programming_manual", "chunk_index": 991, "length": 327, "hash": "247db3227c595ebd0cafac6b06d2dc04"}
{"id": "mcs500_programming_manual_992", "text": "Our robots can also be controlled using the following three cyclic protocols: EtherCAT,\nEtherNetIP, and PROFINET. These protocols are described in Section 6, Section 7, and\nSection 8, respectively. While inherently different, they share the same cyclic data format\nand API, so we will cover all common concepts in this section.", "source": "mcs500_programming_manual", "chunk_index": 992, "length": 327, "hash": "247db3227c595ebd0cafac6b06d2dc04"}
{"id": "mcs500_programming_manual_993", "text": "With cyclic protocols, the robot is controlled using cyclic data fields, which are detailed in\nthis section. PLCs use these fields to activate, configure, move, and monitor the robot. The\ncyclic data payload format is identical across all supported protocols.", "source": "mcs500_programming_manual", "chunk_index": 993, "length": 259, "hash": "f7ba725176b18cf82b1c06163dbfbbbe"}
{"id": "mcs500_programming_manual_994", "text": "With cyclic protocols, the robot is controlled using cyclic data fields, which are detailed in\nthis section. PLCs use these fields to activate, configure, move, and monitor the robot. The\ncyclic data payload format is identical across all supported protocols.", "source": "mcs500_programming_manual", "chunk_index": 994, "length": 259, "hash": "f7ba725176b18cf82b1c06163dbfbbbe"}
{"id": "mcs500_programming_manual_995", "text": "Some TCP/IP commands are not available when using cyclic protocols, such as the command\nSetNetworkOptions (page 193) for changing network settings, or the commands for creating,\nmodifying, and deleting offline programs.", "source": "mcs500_programming_manual", "chunk_index": 995, "length": 219, "hash": "506ea0c569a26f1901427530b8dd11fa"}
{"id": "mcs500_programming_manual_996", "text": "Some TCP/IP commands are not available when using cyclic protocols, such as the command", "source": "mcs500_programming_manual", "chunk_index": 996, "length": 87, "hash": "4e15452ddea4e52aa58e5b33e07260c1"}
{"id": "mcs500_programming_manual_997", "text": "(page 193) for changing network settings, or the commands for creating,\nmodifying, and deleting offline programs.", "source": "mcs500_programming_manual", "chunk_index": 997, "length": 113, "hash": "54b5f3cbc5f44f4b63982ccdbe0a7fd1"}
{"id": "mcs500_programming_manual_998", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 998, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_999", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 999, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1000", "text": "Types of cyclic protocol commands", "source": "mcs500_programming_manual", "chunk_index": 1000, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "mcs500_programming_manual_1001", "text": "Types of cyclic protocol commands", "source": "mcs500_programming_manual", "chunk_index": 1001, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "mcs500_programming_manual_1002", "text": "Cyclic data output is used to control the robot\u2019s state, trigger actions, or send motion-related\ncommands. Cyclic data input provides feedback from the robot such as status and joint\npositions.", "source": "mcs500_programming_manual", "chunk_index": 1002, "length": 193, "hash": "71023261daee71bab866207c7f3bb787"}
{"id": "mcs500_programming_manual_1003", "text": "Cyclic data output is used to control the robot\u2019s state, trigger actions, or send motion-related\ncommands. Cyclic data input provides feedback from the robot such as status and joint\npositions.", "source": "mcs500_programming_manual", "chunk_index": 1003, "length": 193, "hash": "71023261daee71bab866207c7f3bb787"}
{"id": "mcs500_programming_manual_1004", "text": "Below, we briefly describe how our cyclic protocol API handles each type of action.", "source": "mcs500_programming_manual", "chunk_index": 1004, "length": 83, "hash": "1644e26c69a10181bf862b45bab55df2"}
{"id": "mcs500_programming_manual_1005", "text": "Below, we briefly describe how our cyclic protocol API handles each type of action.", "source": "mcs500_programming_manual", "chunk_index": 1005, "length": 83, "hash": "1644e26c69a10181bf862b45bab55df2"}
{"id": "mcs500_programming_manual_1006", "text": "Status change commands", "source": "mcs500_programming_manual", "chunk_index": 1006, "length": 22, "hash": "d935630102b05f5232f8fb215dad0e3c"}
{"id": "mcs500_programming_manual_1007", "text": "Status change commands", "source": "mcs500_programming_manual", "chunk_index": 1007, "length": 22, "hash": "d935630102b05f5232f8fb215dad0e3c"}
{"id": "mcs500_programming_manual_1008", "text": "Some fields (bits) directly control the robot\u2019s state, such as:", "source": "mcs500_programming_manual", "chunk_index": 1008, "length": 63, "hash": "2317dbf5d4927c6a6409c6940b90e1c6"}
{"id": "mcs500_programming_manual_1009", "text": "Some fields (bits) directly control the robot\u2019s state, such as:", "source": "mcs500_programming_manual", "chunk_index": 1009, "length": 63, "hash": "2317dbf5d4927c6a6409c6940b90e1c6"}
{"id": "mcs500_programming_manual_1010", "text": "Set these bits to change the robot\u2019s state.\ncorresponding status bit in the cyclic data input (Section 5, Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1010, "length": 117, "hash": "c9d6458d9f880784218aa5543e281d1f"}
{"id": "mcs500_programming_manual_1011", "text": "Set these bits to change the robot\u2019s state.\ncorresponding status bit in the cyclic data input (Section 5, Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1011, "length": 117, "hash": "c9d6458d9f880784218aa5543e281d1f"}
{"id": "mcs500_programming_manual_1012", "text": "The robot confirms completion via the", "source": "mcs500_programming_manual", "chunk_index": 1012, "length": 37, "hash": "f599a0b1b0ec808c977807348f00114f"}
{"id": "mcs500_programming_manual_1013", "text": "The robot confirms completion via the", "source": "mcs500_programming_manual", "chunk_index": 1013, "length": 37, "hash": "f599a0b1b0ec808c977807348f00114f"}
{"id": "mcs500_programming_manual_1014", "text": "Do not rely on cycle count or time delay to confirm a state change. Always check the\ncorresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the state change.", "source": "mcs500_programming_manual", "chunk_index": 1014, "length": 196, "hash": "7a9ee3c102ee864ed2d6608270a8cf3d"}
{"id": "mcs500_programming_manual_1015", "text": "Do not rely on cycle count or time delay to confirm a state change. Always check the\ncorresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the state change.", "source": "mcs500_programming_manual", "chunk_index": 1015, "length": 196, "hash": "7a9ee3c102ee864ed2d6608270a8cf3d"}
{"id": "mcs500_programming_manual_1016", "text": "Some fields (bits) in the cyclic data directly trigger actions on the robot, such as:", "source": "mcs500_programming_manual", "chunk_index": 1016, "length": 85, "hash": "1a4239ef12c52559303d88bf8defab5a"}
{"id": "mcs500_programming_manual_1017", "text": "Some fields (bits) in the cyclic data directly trigger actions on the robot, such as:", "source": "mcs500_programming_manual", "chunk_index": 1017, "length": 85, "hash": "1a4239ef12c52559303d88bf8defab5a"}
{"id": "mcs500_programming_manual_1018", "text": "To trigger an action, set the corresponding bit to 1, and clear it (reset it to 0) only after the\naction is completed. Completion is confirmed by the corresponding status bit in the cyclic\ndata input (Section 5, Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1018, "length": 223, "hash": "42c1b753c9e750f7788782fa69de80fc"}
{"id": "mcs500_programming_manual_1019", "text": "To trigger an action, set the corresponding bit to 1, and clear it (reset it to 0) only after the\naction is completed. Completion is confirmed by the corresponding status bit in the cyclic\ndata input (Section 5, Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1019, "length": 223, "hash": "42c1b753c9e750f7788782fa69de80fc"}
{"id": "mcs500_programming_manual_1020", "text": "Types of cyclic protocol commands", "source": "mcs500_programming_manual", "chunk_index": 1020, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "mcs500_programming_manual_1021", "text": "Types of cyclic protocol commands", "source": "mcs500_programming_manual", "chunk_index": 1021, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "mcs500_programming_manual_1022", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1022, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1023", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1023, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1024", "text": "Do not rely on cycle count or time delay to confirm action completion. Always check\nthe corresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the action.", "source": "mcs500_programming_manual", "chunk_index": 1024, "length": 193, "hash": "0212fdc6cd3648618970b3095e731389"}
{"id": "mcs500_programming_manual_1025", "text": "Do not rely on cycle count or time delay to confirm action completion. Always check\nthe corresponding confirmation bit (Section 5, Section 5) before assuming the robot has\ncompleted the action.", "source": "mcs500_programming_manual", "chunk_index": 1025, "length": 193, "hash": "0212fdc6cd3648618970b3095e731389"}
{"id": "mcs500_programming_manual_1026", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1026, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_1027", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1027, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_1028", "text": "There are three types of motion-related commands that can be sent using cyclic protocols:", "source": "mcs500_programming_manual", "chunk_index": 1028, "length": 89, "hash": "4b502a5c6f8578f36976d455469e538e"}
{"id": "mcs500_programming_manual_1029", "text": "There are three types of motion-related commands that can be sent using cyclic protocols:", "source": "mcs500_programming_manual", "chunk_index": 1029, "length": 89, "hash": "4b502a5c6f8578f36976d455469e538e"}
{"id": "mcs500_programming_manual_1030", "text": "\u2022 Instantaneous commands (e.g., SetWorkZoneLimits (page 290)) that are executed", "source": "mcs500_programming_manual", "chunk_index": 1030, "length": 79, "hash": "2d376e89821846189d981dcecfca5e51"}
{"id": "mcs500_programming_manual_1031", "text": "\u2022 Instantaneous commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1031, "length": 31, "hash": "02e633e890b80e77597d6150766c0a18"}
{"id": "mcs500_programming_manual_1032", "text": "(page 290)) that are executed", "source": "mcs500_programming_manual", "chunk_index": 1032, "length": 29, "hash": "9bbdd2f423d5310a036d3c5cf1acba23"}
{"id": "mcs500_programming_manual_1033", "text": "immediately by the robot;", "source": "mcs500_programming_manual", "chunk_index": 1033, "length": 25, "hash": "bd1d08f9fbf619450146890e9f224e8c"}
{"id": "mcs500_programming_manual_1034", "text": "immediately by the robot;", "source": "mcs500_programming_manual", "chunk_index": 1034, "length": 25, "hash": "bd1d08f9fbf619450146890e9f224e8c"}
{"id": "mcs500_programming_manual_1035", "text": "\u2022 Queued commands (e.g., MoveJoints (page 126)) that are queued and executed one after", "source": "mcs500_programming_manual", "chunk_index": 1035, "length": 86, "hash": "5dbae41cc3524bceede3635d8c4be019"}
{"id": "mcs500_programming_manual_1036", "text": "\u2022 Queued commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1036, "length": 24, "hash": "799e5520a74e2d28da4df845912919eb"}
{"id": "mcs500_programming_manual_1037", "text": "(page 126)) that are queued and executed one after", "source": "mcs500_programming_manual", "chunk_index": 1037, "length": 50, "hash": "106510caf84e9cd60f87dbce118df339"}
{"id": "mcs500_programming_manual_1038", "text": "\u2022 Velocity-mode commands (e.g., MoveJointsVel", "source": "mcs500_programming_manual", "chunk_index": 1038, "length": 45, "hash": "f35f7ab3f6983de6df677df97cc31344"}
{"id": "mcs500_programming_manual_1039", "text": "\u2022 Velocity-mode commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1039, "length": 31, "hash": "17ce8a99c2d311204e26a9798745ad93"}
{"id": "mcs500_programming_manual_1040", "text": "that are executed\ncontinuously until a new command is received (or until the configured velocity\ntimeout is reached).", "source": "mcs500_programming_manual", "chunk_index": 1040, "length": 117, "hash": "c2c52e76b1aed3e02b1b56f8368ce926"}
{"id": "mcs500_programming_manual_1041", "text": "that are executed\ncontinuously until a new command is received (or until the configured velocity\ntimeout is reached).", "source": "mcs500_programming_manual", "chunk_index": 1041, "length": 117, "hash": "c2c52e76b1aed3e02b1b56f8368ce926"}
{"id": "mcs500_programming_manual_1042", "text": "The next section provides a detailed explanation of how these motion-related commands are\nused.", "source": "mcs500_programming_manual", "chunk_index": 1042, "length": 95, "hash": "01143fdf38c7b939f7469d083c139a60"}
{"id": "mcs500_programming_manual_1043", "text": "The next section provides a detailed explanation of how these motion-related commands are\nused.", "source": "mcs500_programming_manual", "chunk_index": 1043, "length": 95, "hash": "01143fdf38c7b939f7469d083c139a60"}
{"id": "mcs500_programming_manual_1044", "text": "Types of cyclic protocol commands", "source": "mcs500_programming_manual", "chunk_index": 1044, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "mcs500_programming_manual_1045", "text": "Types of cyclic protocol commands", "source": "mcs500_programming_manual", "chunk_index": 1045, "length": 33, "hash": "384a69b25889967447dfe311f2e58328"}
{"id": "mcs500_programming_manual_1046", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1046, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1047", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1047, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1048", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1048, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1049", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1049, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1050", "text": "Motion-related commands are sent to the robot via:", "source": "mcs500_programming_manual", "chunk_index": 1050, "length": 50, "hash": "cb9f8a8463d470dd247d936435ef5359"}
{"id": "mcs500_programming_manual_1051", "text": "Motion-related commands are sent to the robot via:", "source": "mcs500_programming_manual", "chunk_index": 1051, "length": 50, "hash": "cb9f8a8463d470dd247d936435ef5359"}
{"id": "mcs500_programming_manual_1052", "text": "\u2022 three cyclic data fields, MotionCommandID, MoveID, and SetPoint (Table 5 and Table 6),", "source": "mcs500_programming_manual", "chunk_index": 1052, "length": 88, "hash": "2d26e42af3216f13fa2ec6fbf63515a1"}
{"id": "mcs500_programming_manual_1053", "text": "\u2022 three cyclic data fields,", "source": "mcs500_programming_manual", "chunk_index": 1053, "length": 27, "hash": "2a46ba4bad2dad3fdbe615e5bc4c575e"}
{"id": "mcs500_programming_manual_1054", "text": "(Table 5 and Table 6),", "source": "mcs500_programming_manual", "chunk_index": 1054, "length": 22, "hash": "715b74ece8c75d11e0ccdbe7b9ad5438"}
{"id": "mcs500_programming_manual_1055", "text": "\u2022 six command arguments (Table 7).", "source": "mcs500_programming_manual", "chunk_index": 1055, "length": 34, "hash": "7457bd5de1911bd624f0c3e7f120036f"}
{"id": "mcs500_programming_manual_1056", "text": "\u2022 six command arguments (Table 7).", "source": "mcs500_programming_manual", "chunk_index": 1056, "length": 34, "hash": "7457bd5de1911bd624f0c3e7f120036f"}
{"id": "mcs500_programming_manual_1057", "text": "Each motion-related command has a unique ID (Table 8).\nMotionCommandID field specifies which command to send.", "source": "mcs500_programming_manual", "chunk_index": 1057, "length": 109, "hash": "3748898ada21e7dd27bddff35d6beb37"}
{"id": "mcs500_programming_manual_1058", "text": "Each motion-related command has a unique ID (Table 8).", "source": "mcs500_programming_manual", "chunk_index": 1058, "length": 54, "hash": "9916f29a1eb8b0e2ec32f19f9ccb0330"}
{"id": "mcs500_programming_manual_1059", "text": "field specifies which command to send.", "source": "mcs500_programming_manual", "chunk_index": 1059, "length": 38, "hash": "d6da087860ff1f8241d5bf6bb9f35b06"}
{"id": "mcs500_programming_manual_1060", "text": "Entering this ID in the", "source": "mcs500_programming_manual", "chunk_index": 1060, "length": 23, "hash": "6df19b6b366cf201b7c7c985311c687a"}
{"id": "mcs500_programming_manual_1061", "text": "Entering this ID in the", "source": "mcs500_programming_manual", "chunk_index": 1061, "length": 23, "hash": "6df19b6b366cf201b7c7c985311c687a"}
{"id": "mcs500_programming_manual_1062", "text": "The field name MotionCommandID is retained for historical reasons, although it is also used\nto send commands other than motion commands, such as configuration commands (e.g.,\nSetWorkZoneLimits (page 290)).", "source": "mcs500_programming_manual", "chunk_index": 1062, "length": 205, "hash": "ad90e9238d9e1be85eb31398f25f24c3"}
{"id": "mcs500_programming_manual_1063", "text": "is retained for historical reasons, although it is also used\nto send commands other than motion commands, such as configuration commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1063, "length": 143, "hash": "54900206cdc9f677af1bc311986e7505"}
{"id": "mcs500_programming_manual_1064", "text": "The combination of MoveID and SetPoint fields is used to send cyclic or non-cyclic commands\n(Section 5):", "source": "mcs500_programming_manual", "chunk_index": 1064, "length": 104, "hash": "cba1c4c22e261863b216439bb3422c50"}
{"id": "mcs500_programming_manual_1065", "text": "fields is used to send cyclic or non-cyclic commands\n(Section 5):", "source": "mcs500_programming_manual", "chunk_index": 1065, "length": 65, "hash": "18fa1a1df3a803244b9d9e6eaa65887b"}
{"id": "mcs500_programming_manual_1066", "text": "\u2022 The SetPoint bit enables or disables command reception by the robot. When cleared,", "source": "mcs500_programming_manual", "chunk_index": 1066, "length": 84, "hash": "491df4e18ff8ac1f3af74ecb886dcddc"}
{"id": "mcs500_programming_manual_1067", "text": "bit enables or disables command reception by the robot. When cleared,", "source": "mcs500_programming_manual", "chunk_index": 1067, "length": 69, "hash": "545cb0d94426475a5db53aa397a20f9d"}
{"id": "mcs500_programming_manual_1068", "text": "the robot ignores the MotionCommandID and MoveID fields;", "source": "mcs500_programming_manual", "chunk_index": 1068, "length": 56, "hash": "9308f48747ce500f3c3f1a7389997e10"}
{"id": "mcs500_programming_manual_1069", "text": "the robot ignores the", "source": "mcs500_programming_manual", "chunk_index": 1069, "length": 21, "hash": "0246ec5f42dcf229e2810b313ddaa9a2"}
{"id": "mcs500_programming_manual_1070", "text": "\u2022 The MoveID field determines the command type: cyclic (MoveID is 0) or non-cyclic\n(MoveID is not 0, with a new command queued each time the MoveID value changes).", "source": "mcs500_programming_manual", "chunk_index": 1070, "length": 163, "hash": "3e97a5f15cabc88055f46ec0dc1c18b9"}
{"id": "mcs500_programming_manual_1071", "text": "field determines the command type: cyclic (", "source": "mcs500_programming_manual", "chunk_index": 1071, "length": 43, "hash": "cb7bef0ee550ebb530b43505633be6cf"}
{"id": "mcs500_programming_manual_1072", "text": "is 0) or non-cyclic\n(", "source": "mcs500_programming_manual", "chunk_index": 1072, "length": 21, "hash": "6950c3e6fc5d4ad67b318612f2fcfe6c"}
{"id": "mcs500_programming_manual_1073", "text": "is not 0, with a new command queued each time the", "source": "mcs500_programming_manual", "chunk_index": 1073, "length": 49, "hash": "951893405b8e49aac5146fd2c3ad9c90"}
{"id": "mcs500_programming_manual_1074", "text": "Ensure SetPoint is cleared (0) when connecting to the robot, or it may unexpectedly\nexecute a command.", "source": "mcs500_programming_manual", "chunk_index": 1074, "length": 102, "hash": "da588304f93b39f6765fecb1a128da93"}
{"id": "mcs500_programming_manual_1075", "text": "is cleared (0) when connecting to the robot, or it may unexpectedly", "source": "mcs500_programming_manual", "chunk_index": 1075, "length": 67, "hash": "8746f2e5626ee26c0487af668a242477"}
{"id": "mcs500_programming_manual_1076", "text": "Sending non-cyclic commands", "source": "mcs500_programming_manual", "chunk_index": 1076, "length": 27, "hash": "05523aac76ce5e2d7eb6f67f58755222"}
{"id": "mcs500_programming_manual_1077", "text": "Sending non-cyclic commands", "source": "mcs500_programming_manual", "chunk_index": 1077, "length": 27, "hash": "05523aac76ce5e2d7eb6f67f58755222"}
{"id": "mcs500_programming_manual_1078", "text": "This section explains how to send non-cyclic commands (i.e., configuration or motion\ncommands). For cyclic commands (i.e., velocity-mode commands), see Section 5.", "source": "mcs500_programming_manual", "chunk_index": 1078, "length": 162, "hash": "2c5e54c57f11341333aaab59977d596c"}
{"id": "mcs500_programming_manual_1079", "text": "This section explains how to send", "source": "mcs500_programming_manual", "chunk_index": 1079, "length": 33, "hash": "4ceb8e120f13a469a2763a3a8302acac"}
{"id": "mcs500_programming_manual_1080", "text": "commands (i.e., configuration or motion\ncommands). For cyclic commands (i.e., velocity-mode commands), see Section 5.", "source": "mcs500_programming_manual", "chunk_index": 1080, "length": 117, "hash": "ddedd2e3d275693db9ff3c45b5bdf862"}
{"id": "mcs500_programming_manual_1081", "text": "Commands are sent by changing the MoveID field to a different non-zero integer (while\nSetPoint is set to 1).", "source": "mcs500_programming_manual", "chunk_index": 1081, "length": 108, "hash": "e1b9211b2518f52043b41f45c7884686"}
{"id": "mcs500_programming_manual_1082", "text": "Commands are sent by changing the", "source": "mcs500_programming_manual", "chunk_index": 1082, "length": 33, "hash": "f70e3a335debb7509c941d92569d9780"}
{"id": "mcs500_programming_manual_1083", "text": "field to a different non-zero integer (while", "source": "mcs500_programming_manual", "chunk_index": 1083, "length": 44, "hash": "4f2ab6fb3103677ec251c2fb361fb95c"}
{"id": "mcs500_programming_manual_1084", "text": "\u2022 Configuration commands (e.g., SetWorkZoneLimits (page 290)) execute immediately.\nThe robot confirms completion by updating its MoveID field (Section 5) to match yours;", "source": "mcs500_programming_manual", "chunk_index": 1084, "length": 169, "hash": "46d2dc04267af59ca4effa87d0d8b11c"}
{"id": "mcs500_programming_manual_1085", "text": "\u2022 Configuration commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1085, "length": 31, "hash": "27a0f34dbc9d89ffd089a42e997e95bb"}
{"id": "mcs500_programming_manual_1086", "text": "(page 290)) execute immediately.\nThe robot confirms completion by updating its", "source": "mcs500_programming_manual", "chunk_index": 1086, "length": 78, "hash": "d444780d000af4b164d8151d510301d5"}
{"id": "mcs500_programming_manual_1087", "text": "field (Section 5) to match yours;", "source": "mcs500_programming_manual", "chunk_index": 1087, "length": 33, "hash": "be1983c1b9ba42087d64dfe36acd066e"}
{"id": "mcs500_programming_manual_1088", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1088, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1089", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1089, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1090", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1090, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1091", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1091, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1092", "text": "\u2022 Motion commands (e.g., MoveJoints (page 126)) are added to the motion queue and\nprocessed sequentially. The robot confirms that the command was added to the queue\n(not yet executed) by updating its MoveID field (Section 5) to match yours.", "source": "mcs500_programming_manual", "chunk_index": 1092, "length": 240, "hash": "d91df062a33ae9b4c0dfb16d58d6815d"}
{"id": "mcs500_programming_manual_1093", "text": "\u2022 Motion commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1093, "length": 24, "hash": "505a56ef41b8043f89d94fb94390ec7e"}
{"id": "mcs500_programming_manual_1094", "text": "(page 126)) are added to the motion queue and\nprocessed sequentially. The robot confirms that the command was added to the queue\n(not yet executed) by updating its", "source": "mcs500_programming_manual", "chunk_index": 1094, "length": 163, "hash": "114550bcb42075207c9791b6fb6145fe"}
{"id": "mcs500_programming_manual_1095", "text": "field (Section 5) to match yours.", "source": "mcs500_programming_manual", "chunk_index": 1095, "length": 33, "hash": "7d253c538b190abb53b88bfcbb3782a2"}
{"id": "mcs500_programming_manual_1096", "text": "The following sequence must be followed:", "source": "mcs500_programming_manual", "chunk_index": 1096, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "mcs500_programming_manual_1097", "text": "The following sequence must be followed:", "source": "mcs500_programming_manual", "chunk_index": 1097, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "mcs500_programming_manual_1098", "text": "\u2022 At connection, clear both the MoveID and SetPoint fields;", "source": "mcs500_programming_manual", "chunk_index": 1098, "length": 59, "hash": "cd1597de91b35044e44f6001abe88c8c"}
{"id": "mcs500_programming_manual_1099", "text": "\u2022 At connection, clear both the", "source": "mcs500_programming_manual", "chunk_index": 1099, "length": 31, "hash": "846313e9f3ff3141508fdefc8146e16f"}
{"id": "mcs500_programming_manual_1100", "text": "\u2022 Then, to add a motion command to the robot\u2019s motion queue:", "source": "mcs500_programming_manual", "chunk_index": 1100, "length": 60, "hash": "bb2b7217e7044e83074478939da9beda"}
{"id": "mcs500_programming_manual_1101", "text": "\u2022 Then, to add a motion command to the robot\u2019s motion queue:", "source": "mcs500_programming_manual", "chunk_index": 1101, "length": 60, "hash": "bb2b7217e7044e83074478939da9beda"}
{"id": "mcs500_programming_manual_1102", "text": "\u2013 Set MotionCommandID to the desired command;", "source": "mcs500_programming_manual", "chunk_index": 1102, "length": 45, "hash": "de581a5709b44f7a396b67aa35958d14"}
{"id": "mcs500_programming_manual_1103", "text": "to the desired command;", "source": "mcs500_programming_manual", "chunk_index": 1103, "length": 23, "hash": "1fa38b90e266027dd58eb98b41d82d7c"}
{"id": "mcs500_programming_manual_1104", "text": "\u2013 Enter the command arguments;", "source": "mcs500_programming_manual", "chunk_index": 1104, "length": 30, "hash": "914c2fc498397bf2068c3d0b372dbd9d"}
{"id": "mcs500_programming_manual_1105", "text": "Enter the command arguments;", "source": "mcs500_programming_manual", "chunk_index": 1105, "length": 28, "hash": "1f55ab1213972bb3d8d51460c1f03500"}
{"id": "mcs500_programming_manual_1106", "text": "\u2013 Change MoveID to a different non-zero integer value;", "source": "mcs500_programming_manual", "chunk_index": 1106, "length": 54, "hash": "4575a9a3fbe280a90f3d2dfd12a9f9e7"}
{"id": "mcs500_programming_manual_1107", "text": "to a different non-zero integer value;", "source": "mcs500_programming_manual", "chunk_index": 1107, "length": 38, "hash": "2c5c43ab354db7e7b9bfeccf24b9d36f"}
{"id": "mcs500_programming_manual_1108", "text": "\u2013 Set SetPoint to 1.", "source": "mcs500_programming_manual", "chunk_index": 1108, "length": 20, "hash": "605a4dd62a853a2b828c51ac8a911e95"}
{"id": "mcs500_programming_manual_1109", "text": "\u2022 To stop the robot immediately, set the PauseMotion or ClearMotion bit.", "source": "mcs500_programming_manual", "chunk_index": 1109, "length": 72, "hash": "e5d904c72e5ce39b3a8526220e17e92b"}
{"id": "mcs500_programming_manual_1110", "text": "\u2022 To stop the robot immediately, set the", "source": "mcs500_programming_manual", "chunk_index": 1110, "length": 40, "hash": "0cfcfd0633ea8ff66b93a3b7098fa965"}
{"id": "mcs500_programming_manual_1111", "text": "The MoveID, MotionCommandID, and command arguments (Section 5) must not be changed\nuntil the robot acknowledges the previous command by returning the corresponding\nMoveID (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1111, "length": 183, "hash": "bf33f9daddec496844bad693f7394020"}
{"id": "mcs500_programming_manual_1112", "text": ", and command arguments (Section 5) must not be changed\nuntil the robot acknowledges the previous command by returning the corresponding", "source": "mcs500_programming_manual", "chunk_index": 1112, "length": 136, "hash": "74a79b5cd9f8340a88ee6ac8f5da22a4"}
{"id": "mcs500_programming_manual_1113", "text": "Change the MoveID only after (or in the same cycle as) MotionCommandID and arguments,\nor the robot may receive a mix of old and new MotionCommandID and arguments.", "source": "mcs500_programming_manual", "chunk_index": 1113, "length": 162, "hash": "bfc54058a4686032e8e9d5ebaae4c9e5"}
{"id": "mcs500_programming_manual_1114", "text": "only after (or in the same cycle as)", "source": "mcs500_programming_manual", "chunk_index": 1114, "length": 36, "hash": "da61cd84ef472043c588e4700b850f82"}
{"id": "mcs500_programming_manual_1115", "text": "and arguments,\nor the robot may receive a mix of old and new", "source": "mcs500_programming_manual", "chunk_index": 1115, "length": 60, "hash": "9a0b41052715732fa82da13a74e5d09b"}
{"id": "mcs500_programming_manual_1116", "text": "Sending cyclic commands", "source": "mcs500_programming_manual", "chunk_index": 1116, "length": 23, "hash": "f0c4fdb10ab80074a2c03a9d41e08a96"}
{"id": "mcs500_programming_manual_1117", "text": "Sending cyclic commands", "source": "mcs500_programming_manual", "chunk_index": 1117, "length": 23, "hash": "f0c4fdb10ab80074a2c03a9d41e08a96"}
{"id": "mcs500_programming_manual_1118", "text": "Cyclic commands, i.e., velocity-mode commands (MoveJointsVel (page 129), MoveLinVelWrf\n(page 137), and MoveLinVelTrf (page 136)), are executed continuously while MoveID is 0 and\nSetPoint is 1. The desired velocity can be changed at any time during this period.", "source": "mcs500_programming_manual", "chunk_index": 1118, "length": 260, "hash": "6a70a23b924faeb22e144b0e29f163dd"}
{"id": "mcs500_programming_manual_1119", "text": "Cyclic commands, i.e., velocity-mode commands (", "source": "mcs500_programming_manual", "chunk_index": 1119, "length": 47, "hash": "69bb5ed435cab508b7b581f01f40cd03"}
{"id": "mcs500_programming_manual_1120", "text": "(page 136)), are executed continuously while", "source": "mcs500_programming_manual", "chunk_index": 1120, "length": 44, "hash": "40594c519e0f963d07cb470a14cec4ce"}
{"id": "mcs500_programming_manual_1121", "text": "is 1. The desired velocity can be changed at any time during this period.", "source": "mcs500_programming_manual", "chunk_index": 1121, "length": 73, "hash": "cbc6e48b7085590b8864e009c9b7308e"}
{"id": "mcs500_programming_manual_1122", "text": "The following sequence must be followed:", "source": "mcs500_programming_manual", "chunk_index": 1122, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "mcs500_programming_manual_1123", "text": "The following sequence must be followed:", "source": "mcs500_programming_manual", "chunk_index": 1123, "length": 40, "hash": "2ad28f5d015e35d395d9cef3b11a9d7e"}
{"id": "mcs500_programming_manual_1124", "text": "\u2022 At connection, clear both the MoveID and SetPoint fields;", "source": "mcs500_programming_manual", "chunk_index": 1124, "length": 59, "hash": "cd1597de91b35044e44f6001abe88c8c"}
{"id": "mcs500_programming_manual_1125", "text": "\u2022 At connection, clear both the", "source": "mcs500_programming_manual", "chunk_index": 1125, "length": 31, "hash": "846313e9f3ff3141508fdefc8146e16f"}
{"id": "mcs500_programming_manual_1126", "text": "\u2022 To start moving the robot:", "source": "mcs500_programming_manual", "chunk_index": 1126, "length": 28, "hash": "8efa418a1c36b6bb5dbba5136c5aa72c"}
{"id": "mcs500_programming_manual_1127", "text": "\u2022 To start moving the robot:", "source": "mcs500_programming_manual", "chunk_index": 1127, "length": 28, "hash": "8efa418a1c36b6bb5dbba5136c5aa72c"}
{"id": "mcs500_programming_manual_1128", "text": "\u2013 Set MotionCommandID to the desired velocity-mode command ID;", "source": "mcs500_programming_manual", "chunk_index": 1128, "length": 62, "hash": "a254ac6f13b40b951da3a7adb7747a19"}
{"id": "mcs500_programming_manual_1129", "text": "to the desired velocity-mode command ID;", "source": "mcs500_programming_manual", "chunk_index": 1129, "length": 40, "hash": "d753f5f1ad390cb183209557147101f9"}
{"id": "mcs500_programming_manual_1130", "text": "\u2013 Enter the six command arguments;", "source": "mcs500_programming_manual", "chunk_index": 1130, "length": 34, "hash": "7a1a8a2804ce14d19beab3303d03272e"}
{"id": "mcs500_programming_manual_1131", "text": "Enter the six command arguments;", "source": "mcs500_programming_manual", "chunk_index": 1131, "length": 32, "hash": "fee8752173255254d2d73d3eeb574691"}
{"id": "mcs500_programming_manual_1132", "text": "\u2013 Set SetPoint to 1.", "source": "mcs500_programming_manual", "chunk_index": 1132, "length": 20, "hash": "605a4dd62a853a2b828c51ac8a911e95"}
{"id": "mcs500_programming_manual_1133", "text": "\u2022 To change the velocity, modify the six arguments. The robot will apply the new velocities", "source": "mcs500_programming_manual", "chunk_index": 1133, "length": 91, "hash": "eb20146cfc2a83aa171f0f737fd0dbb8"}
{"id": "mcs500_programming_manual_1134", "text": "\u2022 To change the velocity, modify the six arguments. The robot will apply the new velocities", "source": "mcs500_programming_manual", "chunk_index": 1134, "length": 91, "hash": "eb20146cfc2a83aa171f0f737fd0dbb8"}
{"id": "mcs500_programming_manual_1135", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1135, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1136", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1136, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1137", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1137, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1138", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1138, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1139", "text": "\u2022 To stop the robot, reset SetPoint to 0, set all velocity arguments to zero, or set the", "source": "mcs500_programming_manual", "chunk_index": 1139, "length": 88, "hash": "6ce7c6915aa5d28b9f04cb28e173cfcc"}
{"id": "mcs500_programming_manual_1140", "text": "\u2022 To stop the robot, reset", "source": "mcs500_programming_manual", "chunk_index": 1140, "length": 26, "hash": "20e67da4c9a8585f31e0429be22ada18"}
{"id": "mcs500_programming_manual_1141", "text": "to 0, set all velocity arguments to zero, or set the", "source": "mcs500_programming_manual", "chunk_index": 1141, "length": 52, "hash": "25c3533bc49175dbadea237d29c3d03a"}
{"id": "mcs500_programming_manual_1142", "text": "PauseMotion or ClearMotion bit.", "source": "mcs500_programming_manual", "chunk_index": 1142, "length": 31, "hash": "a2a6c5caf55a856b5035f240dfbf4702"}
{"id": "mcs500_programming_manual_1143", "text": "To change to a different velocity-mode command ID, ensure that you change\nMotionCommandID and all the arguments in the same cycle to prevent a command to be\nexecuted with the arguments that belongs to another command. Alternatively, you may\nchange SetPoint to 0 before changing the command and arguments.", "source": "mcs500_programming_manual", "chunk_index": 1143, "length": 304, "hash": "d6fcc9b91ce23cdae51580547127f49e"}
{"id": "mcs500_programming_manual_1144", "text": "To change to a different velocity-mode command ID, ensure that you change", "source": "mcs500_programming_manual", "chunk_index": 1144, "length": 73, "hash": "32db795f4537894ed4db2cb89be169de"}
{"id": "mcs500_programming_manual_1145", "text": "and all the arguments", "source": "mcs500_programming_manual", "chunk_index": 1145, "length": 21, "hash": "f2d584447f3db8c96c7a21bb6aa63f4f"}
{"id": "mcs500_programming_manual_1146", "text": "to prevent a command to be\nexecuted with the arguments that belongs to another command. Alternatively, you may\nchange", "source": "mcs500_programming_manual", "chunk_index": 1146, "length": 117, "hash": "4bc08235292b967602e77f80ec2511a1"}
{"id": "mcs500_programming_manual_1147", "text": "to 0 before changing the command and arguments.", "source": "mcs500_programming_manual", "chunk_index": 1147, "length": 47, "hash": "091ac1dc72f1055892003d6ad9c2e2b1"}
{"id": "mcs500_programming_manual_1148", "text": "Using a position-mode command in cyclic mode (e.g., MoveJoints (page 126)), with MoveID\nset to 0 and SetPoint set to 1, will quickly fill the motion queue with copies of the same\ncommand every cycle, which is certainly not the desired result.", "source": "mcs500_programming_manual", "chunk_index": 1148, "length": 242, "hash": "4af259a7c06fcc49b4d0d70f96fbf96d"}
{"id": "mcs500_programming_manual_1149", "text": "Using a position-mode command in cyclic mode (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 1149, "length": 51, "hash": "17def39f073cb2c8d55189304068f1cb"}
{"id": "mcs500_programming_manual_1150", "text": "set to 1, will quickly fill the motion queue with copies of the same\ncommand every cycle, which is certainly not the desired result.", "source": "mcs500_programming_manual", "chunk_index": 1150, "length": 132, "hash": "c22e4ca08c816c46f45149f2491f85a2"}
{"id": "mcs500_programming_manual_1151", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1151, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1152", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1152, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1153", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1153, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1154", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1154, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1155", "text": "The robot cyclic data includes output fields for sending commands and actions to the robot,\nas well as input fields that report the complete robot status, position, and configuration.", "source": "mcs500_programming_manual", "chunk_index": 1155, "length": 183, "hash": "c0cd7013973c6a65f02cef0bb684aaf7"}
{"id": "mcs500_programming_manual_1156", "text": "The robot cyclic data includes output fields for sending commands and actions to the robot,\nas well as input fields that report the complete robot status, position, and configuration.", "source": "mcs500_programming_manual", "chunk_index": 1156, "length": 183, "hash": "c0cd7013973c6a65f02cef0bb684aaf7"}
{"id": "mcs500_programming_manual_1157", "text": "Section 5 and Section 5 provide the necessary details to identify each field across all supported\ncyclic protocols. The binary format of the cyclic data is identical for all protocols.", "source": "mcs500_programming_manual", "chunk_index": 1157, "length": 184, "hash": "c172701c6ea488ec73019af10349b23f"}
{"id": "mcs500_programming_manual_1158", "text": "Section 5 and Section 5 provide the necessary details to identify each field across all supported\ncyclic protocols. The binary format of the cyclic data is identical for all protocols.", "source": "mcs500_programming_manual", "chunk_index": 1158, "length": 184, "hash": "c172701c6ea488ec73019af10349b23f"}
{"id": "mcs500_programming_manual_1159", "text": "Protocol-specific details are provided in Section 6, Section 7, and Section 8.", "source": "mcs500_programming_manual", "chunk_index": 1159, "length": 78, "hash": "06431d2be8091b3208eb408e3e72fdcf"}
{"id": "mcs500_programming_manual_1160", "text": "Protocol-specific details are provided in Section 6, Section 7, and Section 8.", "source": "mcs500_programming_manual", "chunk_index": 1160, "length": 78, "hash": "06431d2be8091b3208eb408e3e72fdcf"}
{"id": "mcs500_programming_manual_1161", "text": "You will also find standard cyclic protocol definition files in the robot firmware package:", "source": "mcs500_programming_manual", "chunk_index": 1161, "length": 91, "hash": "9ba522ac12b807e607eb9e021ac4a09d"}
{"id": "mcs500_programming_manual_1162", "text": "You will also find standard cyclic protocol definition files in the robot firmware package:", "source": "mcs500_programming_manual", "chunk_index": 1162, "length": 91, "hash": "9ba522ac12b807e607eb9e021ac4a09d"}
{"id": "mcs500_programming_manual_1163", "text": "\u2022 EtherNetIP: Mcs500_vX.X.X.X.eds", "source": "mcs500_programming_manual", "chunk_index": 1163, "length": 33, "hash": "0c9c2eb0c99cc8ddde1bac4fae0b7739"}
{"id": "mcs500_programming_manual_1164", "text": "\u2022 PROFINET: GSDML-V2.42-Mecademic-mcs500-XXXXXXXX.xml", "source": "mcs500_programming_manual", "chunk_index": 1164, "length": 53, "hash": "9e1ba56abeda5d4b8474cc9784e44aa2"}
{"id": "mcs500_programming_manual_1165", "text": "GSDML-V2.42-Mecademic-mcs500-XXXXXXXX.xml", "source": "mcs500_programming_manual", "chunk_index": 1165, "length": 41, "hash": "09b28b402fad3e22fbed7f238c90e828"}
{"id": "mcs500_programming_manual_1166", "text": "\u2022 EtherCAT: Mcs500_EtherCAT_ESI_vX.X.X.X.xml", "source": "mcs500_programming_manual", "chunk_index": 1166, "length": 44, "hash": "966e6fc25ac220a5af7229e045318296"}
{"id": "mcs500_programming_manual_1167", "text": "Mcs500_EtherCAT_ESI_vX.X.X.X.xml", "source": "mcs500_programming_manual", "chunk_index": 1167, "length": 32, "hash": "cbc68864180290a996cb8d3a28b9bf95"}
{"id": "mcs500_programming_manual_1168", "text": "These files can be imported into your PLC to automatically describe the robot and populate a\nstructure with all its cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 1168, "length": 130, "hash": "50fa2f392853ee68232ea71c2d33044b"}
{"id": "mcs500_programming_manual_1169", "text": "These files can be imported into your PLC to automatically describe the robot and populate a\nstructure with all its cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 1169, "length": 130, "hash": "50fa2f392853ee68232ea71c2d33044b"}
{"id": "mcs500_programming_manual_1170", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1170, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1171", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1171, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1172", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1172, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1173", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1173, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1174", "text": "The cyclic output (sent to the robot) contains fields for sending commands and actions.", "source": "mcs500_programming_manual", "chunk_index": 1174, "length": 87, "hash": "9beb4fdc9d8fe28164726100c1b6a64a"}
{"id": "mcs500_programming_manual_1175", "text": "The cyclic output (sent to the robot) contains fields for sending commands and actions.", "source": "mcs500_programming_manual", "chunk_index": 1175, "length": 87, "hash": "9beb4fdc9d8fe28164726100c1b6a64a"}
{"id": "mcs500_programming_manual_1176", "text": "The total size of the cyclic output is 60 bytes, divided into the following sections:", "source": "mcs500_programming_manual", "chunk_index": 1176, "length": 85, "hash": "76bc965d72a2a458c3dc8543d5c19277"}
{"id": "mcs500_programming_manual_1177", "text": "The total size of the cyclic output is 60 bytes, divided into the following sections:", "source": "mcs500_programming_manual", "chunk_index": 1177, "length": 85, "hash": "76bc965d72a2a458c3dc8543d5c19277"}
{"id": "mcs500_programming_manual_1178", "text": "\u2022 Robot control (page 44): Controls the general robot state (activation, simulation mode,", "source": "mcs500_programming_manual", "chunk_index": 1178, "length": 89, "hash": "3060554287af60804e51fd296793bf91"}
{"id": "mcs500_programming_manual_1179", "text": "(page 44): Controls the general robot state (activation, simulation mode,", "source": "mcs500_programming_manual", "chunk_index": 1179, "length": 73, "hash": "f46ee108025086e8637f2ecfb779765a"}
{"id": "mcs500_programming_manual_1180", "text": "recovery mode, etc.);", "source": "mcs500_programming_manual", "chunk_index": 1180, "length": 21, "hash": "b8270855eca80dcb773990ab1f8eede2"}
{"id": "mcs500_programming_manual_1181", "text": "recovery mode, etc.);", "source": "mcs500_programming_manual", "chunk_index": 1181, "length": 21, "hash": "b8270855eca80dcb773990ab1f8eede2"}
{"id": "mcs500_programming_manual_1182", "text": "\u2022 Motion control (page 47): Controls robot motion (pausing, resuming, sending motion", "source": "mcs500_programming_manual", "chunk_index": 1182, "length": 84, "hash": "9112afeee7965cb4a5abdf7360c6ce08"}
{"id": "mcs500_programming_manual_1183", "text": "(page 47): Controls robot motion (pausing, resuming, sending motion", "source": "mcs500_programming_manual", "chunk_index": 1183, "length": 67, "hash": "cd37bd5a70b33116d53be039f59be041"}
{"id": "mcs500_programming_manual_1184", "text": "\u2022 Motion-related commands (page 50): ID and arguments of the command to execute;", "source": "mcs500_programming_manual", "chunk_index": 1184, "length": 80, "hash": "bd37d2b53ca30a26f8c8de57fd679da8"}
{"id": "mcs500_programming_manual_1185", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1185, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_1186", "text": "(page 50): ID and arguments of the command to execute;", "source": "mcs500_programming_manual", "chunk_index": 1186, "length": 54, "hash": "e0983f46cefeabab10fa4efd521bd5ce"}
{"id": "mcs500_programming_manual_1187", "text": "\u2022 Host time (page 55): Synchronizes the robot\u2019s time with the host time;", "source": "mcs500_programming_manual", "chunk_index": 1187, "length": 72, "hash": "592e1a7e337769b7e9ef3ccd928640ea"}
{"id": "mcs500_programming_manual_1188", "text": "(page 55): Synchronizes the robot\u2019s time with the host time;", "source": "mcs500_programming_manual", "chunk_index": 1188, "length": 60, "hash": "8d4efa06fff4f75e11315e1e8db12b85"}
{"id": "mcs500_programming_manual_1189", "text": "\u2022 Brake control (page 57): Controls the robot\u2019s brakes when deactivated;", "source": "mcs500_programming_manual", "chunk_index": 1189, "length": 72, "hash": "f47d66c3228a19a0e323806ad8f4fb63"}
{"id": "mcs500_programming_manual_1190", "text": "(page 57): Controls the robot\u2019s brakes when deactivated;", "source": "mcs500_programming_manual", "chunk_index": 1190, "length": 56, "hash": "f7a0339002212f0a139f5d712aca37ba"}
{"id": "mcs500_programming_manual_1191", "text": "\u2022 Dynamic data configuration (page 59): Selects which dynamic data the robot reports in", "source": "mcs500_programming_manual", "chunk_index": 1191, "length": 87, "hash": "167e4e01143e33954a9effa94c1d070c"}
{"id": "mcs500_programming_manual_1192", "text": "Dynamic data configuration", "source": "mcs500_programming_manual", "chunk_index": 1192, "length": 26, "hash": "c3616a5be3c9cc55f5430053c0e1c3a9"}
{"id": "mcs500_programming_manual_1193", "text": "(page 59): Selects which dynamic data the robot reports in", "source": "mcs500_programming_manual", "chunk_index": 1193, "length": 58, "hash": "42344aa0f06a764655de30eed693d111"}
{"id": "mcs500_programming_manual_1194", "text": "its cyclic input payload.", "source": "mcs500_programming_manual", "chunk_index": 1194, "length": 25, "hash": "fd2a845163c6557939c9338e482ba126"}
{"id": "mcs500_programming_manual_1195", "text": "its cyclic input payload.", "source": "mcs500_programming_manual", "chunk_index": 1195, "length": 25, "hash": "fd2a845163c6557939c9338e482ba126"}
{"id": "mcs500_programming_manual_1196", "text": "The RobotControl section in the cyclic output controls general robot states. Changes to bits\nin this output trigger robot actions, depending on the conditions.", "source": "mcs500_programming_manual", "chunk_index": 1196, "length": 159, "hash": "d5f76fec08aa7ff1b8e49a7654010118"}
{"id": "mcs500_programming_manual_1197", "text": "section in the cyclic output controls general robot states. Changes to bits\nin this output trigger robot actions, depending on the conditions.", "source": "mcs500_programming_manual", "chunk_index": 1197, "length": 142, "hash": "064aa8aba2f507b77e1a552b7c814d75"}
{"id": "mcs500_programming_manual_1198", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1198, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1199", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1199, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1200", "text": "Table 4: RobotControl (Offset 0, size 4, EtherCAT index 7200h)", "source": "mcs500_programming_manual", "chunk_index": 1200, "length": 62, "hash": "3ca3fccf57f7deb41a9110bd37d0113f"}
{"id": "mcs500_programming_manual_1201", "text": "(Offset 0, size 4, EtherCAT index 7200h)", "source": "mcs500_programming_manual", "chunk_index": 1201, "length": 40, "hash": "f1b5275c0bbc2f03533676395d027b83"}
{"id": "mcs500_programming_manual_1202", "text": "DeactivateRobot Bool", "source": "mcs500_programming_manual", "chunk_index": 1202, "length": 20, "hash": "cb31be434bd00750745fa89ee5799c17"}
{"id": "mcs500_programming_manual_1203", "text": "Deactivates the robot (see DeactivateRobot\n(page 175)) when set to 1.", "source": "mcs500_programming_manual", "chunk_index": 1203, "length": 69, "hash": "dc82d2373c5bb8a63eb16e7ad9247899"}
{"id": "mcs500_programming_manual_1204", "text": "Deactivates the robot (see", "source": "mcs500_programming_manual", "chunk_index": 1204, "length": 26, "hash": "b736351d9fd6e62fb177d02d6abe8db9"}
{"id": "mcs500_programming_manual_1205", "text": "(page 175)) when set to 1.", "source": "mcs500_programming_manual", "chunk_index": 1205, "length": 26, "hash": "234888a90d785c2971618d1e83ee2826"}
{"id": "mcs500_programming_manual_1206", "text": "Deactivation is confirmed by the Activated status bit\n(Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1206, "length": 66, "hash": "f90c41e0cd4b65785c7410d967a1f3f1"}
{"id": "mcs500_programming_manual_1207", "text": "Deactivation is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1207, "length": 32, "hash": "60d85f7afedd2e4f513b21deae4c5fe3"}
{"id": "mcs500_programming_manual_1208", "text": "status bit\n(Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1208, "length": 23, "hash": "4c0708368080f0f054fb50f492704354"}
{"id": "mcs500_programming_manual_1209", "text": "Activates the robot (see ActivateRobot (page 171))\nwhen set to 1, but only if the Deactivate bit is 0.", "source": "mcs500_programming_manual", "chunk_index": 1209, "length": 102, "hash": "dbb06e72d02b472f4ad7d69715a9deb7"}
{"id": "mcs500_programming_manual_1210", "text": "Activates the robot (see", "source": "mcs500_programming_manual", "chunk_index": 1210, "length": 24, "hash": "10182722e08684a0a4b44a1e2b77f623"}
{"id": "mcs500_programming_manual_1211", "text": "(page 171))\nwhen set to 1, but only if the", "source": "mcs500_programming_manual", "chunk_index": 1211, "length": 42, "hash": "2fddef6f332da20bd949f60997782edc"}
{"id": "mcs500_programming_manual_1212", "text": "Activation is confirmed by the Activated status bit\n(Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1212, "length": 64, "hash": "ca102e0d34dff7038252aeef2dedb663"}
{"id": "mcs500_programming_manual_1213", "text": "Activation is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1213, "length": 30, "hash": "10413c9e885e1ab85741567cdc53ae72"}
{"id": "mcs500_programming_manual_1214", "text": "status bit\n(Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1214, "length": 23, "hash": "4c0708368080f0f054fb50f492704354"}
{"id": "mcs500_programming_manual_1215", "text": "Not available on this robot.", "source": "mcs500_programming_manual", "chunk_index": 1215, "length": 28, "hash": "538206e119bbd7b21ed2fdc85247b57c"}
{"id": "mcs500_programming_manual_1216", "text": "Not available on this robot.", "source": "mcs500_programming_manual", "chunk_index": 1216, "length": 28, "hash": "538206e119bbd7b21ed2fdc85247b57c"}
{"id": "mcs500_programming_manual_1217", "text": "Resets the error (see ResetError (page 184)) when set\nto 1.", "source": "mcs500_programming_manual", "chunk_index": 1217, "length": 59, "hash": "c5d4e5bde3c6d5aa7e3058e1f9f3968b"}
{"id": "mcs500_programming_manual_1218", "text": "Resets the error (see", "source": "mcs500_programming_manual", "chunk_index": 1218, "length": 21, "hash": "dcc19ca7bf78b75de2e6439a03d211a4"}
{"id": "mcs500_programming_manual_1219", "text": "(page 184)) when set\nto 1.", "source": "mcs500_programming_manual", "chunk_index": 1219, "length": 26, "hash": "920f6760bbe2e483001c59cba803f5a5"}
{"id": "mcs500_programming_manual_1220", "text": "The reset is confirmed when ErrorCode becomes 0\n(Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1220, "length": 60, "hash": "c03339e5290ca150edc5e86553a537cf"}
{"id": "mcs500_programming_manual_1221", "text": "The reset is confirmed when", "source": "mcs500_programming_manual", "chunk_index": 1221, "length": 27, "hash": "c114b436c0125c4432c429ad2c6f85fa"}
{"id": "mcs500_programming_manual_1222", "text": "becomes 0\n(Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1222, "length": 22, "hash": "053df6c611acf4269e82f33d707c4b6e"}
{"id": "mcs500_programming_manual_1223", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1223, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1224", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1224, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1225", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1225, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1226", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1226, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1227", "text": "Table 4 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1227, "length": 38, "hash": "ab33e80ef362a19b80f340d17ac69a5b"}
{"id": "mcs500_programming_manual_1228", "text": "Table 4 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1228, "length": 38, "hash": "ab33e80ef362a19b80f340d17ac69a5b"}
{"id": "mcs500_programming_manual_1229", "text": "EnableRecoveryModeBool", "source": "mcs500_programming_manual", "chunk_index": 1229, "length": 22, "hash": "a193ecc81c86b1339b1b04bff694b81d"}
{"id": "mcs500_programming_manual_1230", "text": "Enables (set to 1) or disables (set to 0) the default\nsimulation mode type (only applies when the robot is\ndeactivated and has no safety stop signal). See\nActivateSim (page 172).", "source": "mcs500_programming_manual", "chunk_index": 1230, "length": 178, "hash": "258316402cf4266ef3c4afdc4124f276"}
{"id": "mcs500_programming_manual_1231", "text": "Enables (set to 1) or disables (set to 0) the default\nsimulation mode type (only applies when the robot is\ndeactivated and has no safety stop signal). See", "source": "mcs500_programming_manual", "chunk_index": 1231, "length": 154, "hash": "e05d6e05ec71283141698fbbac0921a8"}
{"id": "mcs500_programming_manual_1232", "text": "The simulation mode status is confirmed by the\nSimActivated bit (Section 5). Note that the type of\nsimulation mode (fast or normal) is not reported in\ncyclic protocols. Also, to change the default simulation\nmode type, use the TCP command SetSimModeCfg\n(page 201).", "source": "mcs500_programming_manual", "chunk_index": 1232, "length": 264, "hash": "5d1df1ccc3a43440aee423d56b6c86f8"}
{"id": "mcs500_programming_manual_1233", "text": "The simulation mode status is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1233, "length": 46, "hash": "a909b8b801948077fa38c2dc4064a5e8"}
{"id": "mcs500_programming_manual_1234", "text": "bit (Section 5). Note that the type of\nsimulation mode (fast or normal) is not reported in\ncyclic protocols. Also, to change the default simulation\nmode type, use the TCP command", "source": "mcs500_programming_manual", "chunk_index": 1234, "length": 178, "hash": "507ee570205aff44f0849f9bbd684a61"}
{"id": "mcs500_programming_manual_1235", "text": "Enables (set to 1) or disables (set to 0) recovery mode\n(see SetRecoveryMode (page 198)).", "source": "mcs500_programming_manual", "chunk_index": 1235, "length": 89, "hash": "cfe5934348e19c21682ff52cca9e49ac"}
{"id": "mcs500_programming_manual_1236", "text": "Enables (set to 1) or disables (set to 0) recovery mode\n(see", "source": "mcs500_programming_manual", "chunk_index": 1236, "length": 60, "hash": "92cedd13ffafd3fa16dbab5c2931c076"}
{"id": "mcs500_programming_manual_1237", "text": "The recovery mode state is confirmed by the\nRecoveryMode status bit (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1237, "length": 80, "hash": "7edc5047692633f5ad79ff341b97948a"}
{"id": "mcs500_programming_manual_1238", "text": "The recovery mode state is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1238, "length": 43, "hash": "585353a4d32aa673106ba6e2f3352267"}
{"id": "mcs500_programming_manual_1239", "text": "status bit (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1239, "length": 23, "hash": "eb67769bb3623c60b12add1496731d44"}
{"id": "mcs500_programming_manual_1240", "text": "DisableEtherCAT Bool\n(Reserved)", "source": "mcs500_programming_manual", "chunk_index": 1240, "length": 31, "hash": "bd2a64d81305cf0b626d5a26dd4010c8"}
{"id": "mcs500_programming_manual_1241", "text": "Disables the EtherCAT protocol when set to 1.\nReserved for future use.", "source": "mcs500_programming_manual", "chunk_index": 1241, "length": 70, "hash": "077f630fd0864d4e1c589bbe326d73f2"}
{"id": "mcs500_programming_manual_1242", "text": "Disables the EtherCAT protocol when set to 1.\nReserved for future use.", "source": "mcs500_programming_manual", "chunk_index": 1242, "length": 70, "hash": "077f630fd0864d4e1c589bbe326d73f2"}
{"id": "mcs500_programming_manual_1243", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1243, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1244", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1244, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1245", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1245, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1246", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1246, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1247", "text": "The MotionControl section in the cyclic output controls robot motion. Changes to bits in this\noutput trigger robot actions, depending on the conditions.", "source": "mcs500_programming_manual", "chunk_index": 1247, "length": 152, "hash": "d00958c3eeedc18151d8f80526293610"}
{"id": "mcs500_programming_manual_1248", "text": "section in the cyclic output controls robot motion. Changes to bits in this\noutput trigger robot actions, depending on the conditions.", "source": "mcs500_programming_manual", "chunk_index": 1248, "length": 134, "hash": "096b40d08cebab1cdb61c5801bf0aa78"}
{"id": "mcs500_programming_manual_1249", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1249, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1250", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1250, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1251", "text": "Table 5: MotionControl (Offset 4, size 4, EtherCAT index 7310h)", "source": "mcs500_programming_manual", "chunk_index": 1251, "length": 63, "hash": "4844a0251a6793ded7fea3e0c9094e74"}
{"id": "mcs500_programming_manual_1252", "text": "(Offset 4, size 4, EtherCAT index 7310h)", "source": "mcs500_programming_manual", "chunk_index": 1252, "length": 40, "hash": "13f0f4c45f1de692d17dcbbc94443e87"}
{"id": "mcs500_programming_manual_1253", "text": "A user-defined number. Changing it triggers the\ncommand specified in MotionCommandID to be added to\nthe motion queue.", "source": "mcs500_programming_manual", "chunk_index": 1253, "length": 117, "hash": "3df841e10c5eae520c1b45e3a5bf8bed"}
{"id": "mcs500_programming_manual_1254", "text": "A user-defined number. Changing it triggers the\ncommand specified in", "source": "mcs500_programming_manual", "chunk_index": 1254, "length": 68, "hash": "d6022092f90cc4e773d4cc28c2add154"}
{"id": "mcs500_programming_manual_1255", "text": "to be added to\nthe motion queue.", "source": "mcs500_programming_manual", "chunk_index": 1255, "length": 32, "hash": "abd7905f295c36cdc05de9b56ea48f22"}
{"id": "mcs500_programming_manual_1256", "text": "Reception of the command is confirmed by the MoveID\nstatus bit (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1256, "length": 75, "hash": "a8a820fbe72ed94d33ed4bde9e8f412d"}
{"id": "mcs500_programming_manual_1257", "text": "Reception of the command is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1257, "length": 44, "hash": "8fad4b0ab426a576fa4a753fd36e22ca"}
{"id": "mcs500_programming_manual_1258", "text": "status bit (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1258, "length": 23, "hash": "eb67769bb3623c60b12add1496731d44"}
{"id": "mcs500_programming_manual_1259", "text": "See Section 5 for details.", "source": "mcs500_programming_manual", "chunk_index": 1259, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "mcs500_programming_manual_1260", "text": "See Section 5 for details.", "source": "mcs500_programming_manual", "chunk_index": 1260, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "mcs500_programming_manual_1261", "text": "Must be set to 1 for commands to be sent to the robot.", "source": "mcs500_programming_manual", "chunk_index": 1261, "length": 54, "hash": "e4d776bc5b7f910cae0a8a42f79c392b"}
{"id": "mcs500_programming_manual_1262", "text": "Must be set to 1 for commands to be sent to the robot.", "source": "mcs500_programming_manual", "chunk_index": 1262, "length": 54, "hash": "e4d776bc5b7f910cae0a8a42f79c392b"}
{"id": "mcs500_programming_manual_1263", "text": "See Section 5 for details.", "source": "mcs500_programming_manual", "chunk_index": 1263, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "mcs500_programming_manual_1264", "text": "See Section 5 for details.", "source": "mcs500_programming_manual", "chunk_index": 1264, "length": 26, "hash": "ee0262f6c756adf19abebc39e93c809b"}
{"id": "mcs500_programming_manual_1265", "text": "Pauses robot motion without clearing commands in the\nqueue (PauseMotion (page 182)).", "source": "mcs500_programming_manual", "chunk_index": 1265, "length": 84, "hash": "41699a0704644b8bb257efef3b6c9b00"}
{"id": "mcs500_programming_manual_1266", "text": "Pauses robot motion without clearing commands in the", "source": "mcs500_programming_manual", "chunk_index": 1266, "length": 52, "hash": "58c30b9ba9a4b136413e921876d319f8"}
{"id": "mcs500_programming_manual_1267", "text": "Pause is confirmed by the Paused status bit (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1267, "length": 56, "hash": "c1abdc4c353da8b2a0591495216464f3"}
{"id": "mcs500_programming_manual_1268", "text": "Pause is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1268, "length": 25, "hash": "f046418c467d7acde676865ebf27062d"}
{"id": "mcs500_programming_manual_1269", "text": "status bit (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1269, "length": 23, "hash": "eb67769bb3623c60b12add1496731d44"}
{"id": "mcs500_programming_manual_1270", "text": "Clears the motion queue and pauses the robot\n(ClearMotion (page 173)).", "source": "mcs500_programming_manual", "chunk_index": 1270, "length": 70, "hash": "ffe06e52b0c62716cc93f9f56629b422"}
{"id": "mcs500_programming_manual_1271", "text": "Clears the motion queue and pauses the robot\n(", "source": "mcs500_programming_manual", "chunk_index": 1271, "length": 46, "hash": "cbb6aff5c578b8c2a3eb31ba64ff9a97"}
{"id": "mcs500_programming_manual_1272", "text": "Clear is confirmed by the Cleared status bit (Section\n5).", "source": "mcs500_programming_manual", "chunk_index": 1272, "length": 57, "hash": "1c5a99e0bacdeba25aaefd973f7b2d62"}
{"id": "mcs500_programming_manual_1273", "text": "Clear is confirmed by the", "source": "mcs500_programming_manual", "chunk_index": 1273, "length": 25, "hash": "918a8f62a4df8919b56995e1533c8572"}
{"id": "mcs500_programming_manual_1274", "text": "status bit (Section\n5).", "source": "mcs500_programming_manual", "chunk_index": 1274, "length": 23, "hash": "2723c0a8afefa5d16d279115e1dd2919"}
{"id": "mcs500_programming_manual_1275", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1275, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1276", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1276, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1277", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1277, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1278", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1278, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1279", "text": "Table 5 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1279, "length": 38, "hash": "3fc15f17417a39dfb115aedce5272564"}
{"id": "mcs500_programming_manual_1280", "text": "Table 5 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1280, "length": 38, "hash": "3fc15f17417a39dfb115aedce5272564"}
{"id": "mcs500_programming_manual_1281", "text": "A rising edge (value changed from 0 to 1) resumes\nrobot motion (ResumeMotion (page 185)) if the\nfollowing conditions are met:", "source": "mcs500_programming_manual", "chunk_index": 1281, "length": 125, "hash": "a7c1953927e8f665f7dfbc28fa31e837"}
{"id": "mcs500_programming_manual_1282", "text": "A rising edge (value changed from 0 to 1) resumes\nrobot motion (", "source": "mcs500_programming_manual", "chunk_index": 1282, "length": 64, "hash": "9f11d837b5063751c9129aac6f7fb931"}
{"id": "mcs500_programming_manual_1283", "text": "(page 185)) if the\nfollowing conditions are met:", "source": "mcs500_programming_manual", "chunk_index": 1283, "length": 48, "hash": "7c62ac4d608a6624742ef4947b9e5135"}
{"id": "mcs500_programming_manual_1284", "text": "- PauseMotion and ClearMotion are cleared;", "source": "mcs500_programming_manual", "chunk_index": 1284, "length": 42, "hash": "18e1bce245b25dd63109b0bf7e712219"}
{"id": "mcs500_programming_manual_1285", "text": "- No safety stop signals are active.", "source": "mcs500_programming_manual", "chunk_index": 1285, "length": 36, "hash": "69f8e9be9bdbbf1191960bbd836dacc1"}
{"id": "mcs500_programming_manual_1286", "text": "- No safety stop signals are active.", "source": "mcs500_programming_manual", "chunk_index": 1286, "length": 36, "hash": "69f8e9be9bdbbf1191960bbd836dacc1"}
{"id": "mcs500_programming_manual_1287", "text": "Resuming also clears resettable safety stops (such as\nP-Stop 2 or enabling device released safety stop\nsignals).", "source": "mcs500_programming_manual", "chunk_index": 1287, "length": 112, "hash": "44497258aae439a8262f3850d6449e1f"}
{"id": "mcs500_programming_manual_1288", "text": "Resuming also clears resettable safety stops (such as\nP-Stop 2 or", "source": "mcs500_programming_manual", "chunk_index": 1288, "length": 65, "hash": "7855297c3c246d041aa8dbc5b5efabc9"}
{"id": "mcs500_programming_manual_1289", "text": "enabling device released", "source": "mcs500_programming_manual", "chunk_index": 1289, "length": 24, "hash": "2368f4ac704eee10741348b773c0ca39"}
{"id": "mcs500_programming_manual_1290", "text": "safety stop\nsignals).", "source": "mcs500_programming_manual", "chunk_index": 1290, "length": 21, "hash": "21f6ac48679e0b5a93a64c3eb64f1249"}
{"id": "mcs500_programming_manual_1291", "text": "It also clears collision and work zone events.", "source": "mcs500_programming_manual", "chunk_index": 1291, "length": 46, "hash": "b83c1578bdaba0c7d18ae53325c2c07f"}
{"id": "mcs500_programming_manual_1292", "text": "It also clears collision and work zone events.", "source": "mcs500_programming_manual", "chunk_index": 1292, "length": 46, "hash": "b83c1578bdaba0c7d18ae53325c2c07f"}
{"id": "mcs500_programming_manual_1293", "text": "Motion resume is confirmed when the Paused status\nbit is cleared (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1293, "length": 77, "hash": "13551e16feae5153e52ede851590353f"}
{"id": "mcs500_programming_manual_1294", "text": "Motion resume is confirmed when the", "source": "mcs500_programming_manual", "chunk_index": 1294, "length": 35, "hash": "99b5f37da3e24db2f2f03be8223cead6"}
{"id": "mcs500_programming_manual_1295", "text": "status\nbit is cleared (Section 5).", "source": "mcs500_programming_manual", "chunk_index": 1295, "length": 34, "hash": "5fd825a69a0edc90ade1ca454a385e8d"}
{"id": "mcs500_programming_manual_1296", "text": "When set, the robot interprets float arguments\n(Section 5) as the cyclic ID of variables to use as\nfunction arguments.", "source": "mcs500_programming_manual", "chunk_index": 1296, "length": 118, "hash": "1ea3fe5ce3dd5175e2d9993c573d86c8"}
{"id": "mcs500_programming_manual_1297", "text": "When set, the robot interprets float arguments", "source": "mcs500_programming_manual", "chunk_index": 1297, "length": 46, "hash": "1125a50c69bc559841f9addf8c413cb4"}
{"id": "mcs500_programming_manual_1298", "text": "(Section 5) as the cyclic ID of variables to use as\nfunction arguments.", "source": "mcs500_programming_manual", "chunk_index": 1298, "length": 71, "hash": "0ece47d3702d702342c706c46b4e3ae4"}
{"id": "mcs500_programming_manual_1299", "text": "See Managing variables with cyclic protocols\n(page 332) for details.", "source": "mcs500_programming_manual", "chunk_index": 1299, "length": 68, "hash": "0296615d45f35f4a5c8e30f20634de42"}
{"id": "mcs500_programming_manual_1300", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 1300, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_1301", "text": "(page 332) for details.", "source": "mcs500_programming_manual", "chunk_index": 1301, "length": 23, "hash": "74ecc73cc0931dc9d78b5d102c917f72"}
{"id": "mcs500_programming_manual_1302", "text": "Reserved for future use. Must be 0.", "source": "mcs500_programming_manual", "chunk_index": 1302, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "mcs500_programming_manual_1303", "text": "Reserved for future use. Must be 0.", "source": "mcs500_programming_manual", "chunk_index": 1303, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "mcs500_programming_manual_1304", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1304, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1305", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1305, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1306", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1306, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1307", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1307, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1308", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1308, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_1309", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1309, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_1310", "text": "The MotionCommand section in the cyclic output is used to specify the command to execute\n(Table 6) and its arguments (Table 7).", "source": "mcs500_programming_manual", "chunk_index": 1310, "length": 127, "hash": "9b00906653d005cb57cbb3000638c04e"}
{"id": "mcs500_programming_manual_1311", "text": "section in the cyclic output is used to specify the command to execute\n(Table 6) and its arguments (Table 7).", "source": "mcs500_programming_manual", "chunk_index": 1311, "length": 109, "hash": "e4a4fa0bb5f297c548ecc94417472c63"}
{"id": "mcs500_programming_manual_1312", "text": "The list of valid MotionCommandID values is provided in Table 8, along with the expected\narguments for each command.", "source": "mcs500_programming_manual", "chunk_index": 1312, "length": 116, "hash": "a2493bdb51177f13f49e0ba1476aa395"}
{"id": "mcs500_programming_manual_1313", "text": "values is provided in Table 8, along with the expected\narguments for each command.", "source": "mcs500_programming_manual", "chunk_index": 1313, "length": 82, "hash": "133c83efaa4c4d50c716b2b176e22b79"}
{"id": "mcs500_programming_manual_1314", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1314, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1315", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1315, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1316", "text": "Table 6: MotionCommand (Offset 8, size 4, EtherCAT index 7305h)", "source": "mcs500_programming_manual", "chunk_index": 1316, "length": 63, "hash": "b840db8e665a11a9a8bc6c03d797bc01"}
{"id": "mcs500_programming_manual_1317", "text": "(Offset 8, size 4, EtherCAT index 7305h)", "source": "mcs500_programming_manual", "chunk_index": 1317, "length": 40, "hash": "eeeeca49ca83f882f5696748dab6699f"}
{"id": "mcs500_programming_manual_1318", "text": "MotionCommandID Integer", "source": "mcs500_programming_manual", "chunk_index": 1318, "length": 23, "hash": "a9e13e20e6c7ee7fdf206f949cfd1ceb"}
{"id": "mcs500_programming_manual_1319", "text": "The ID of the motion-related command to execute.", "source": "mcs500_programming_manual", "chunk_index": 1319, "length": 48, "hash": "59c64370418517813798f2899fca71ff"}
{"id": "mcs500_programming_manual_1320", "text": "The ID of the motion-related command to execute.", "source": "mcs500_programming_manual", "chunk_index": 1320, "length": 48, "hash": "59c64370418517813798f2899fca71ff"}
{"id": "mcs500_programming_manual_1321", "text": "See Table 8 for command IDs and Using motion-related\ncommands (page 40) for more information.", "source": "mcs500_programming_manual", "chunk_index": 1321, "length": 93, "hash": "70df7d82622eefa849489b7aaa79070d"}
{"id": "mcs500_programming_manual_1322", "text": "See Table 8 for command IDs and", "source": "mcs500_programming_manual", "chunk_index": 1322, "length": 31, "hash": "48f04100d843ad6e71ef14cb697cad1e"}
{"id": "mcs500_programming_manual_1323", "text": "Using motion-related\ncommands", "source": "mcs500_programming_manual", "chunk_index": 1323, "length": 29, "hash": "63d74a05abc9b9a3ca5cd99072976f51"}
{"id": "mcs500_programming_manual_1324", "text": "(page 40) for more information.", "source": "mcs500_programming_manual", "chunk_index": 1324, "length": 31, "hash": "77ee1e854ab545cdee6c19d515befb3a"}
{"id": "mcs500_programming_manual_1325", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1325, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1326", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1326, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1327", "text": "Table 7: MotionCommandArgs (Offset 12, size 24, EtherCAT index 7306h)", "source": "mcs500_programming_manual", "chunk_index": 1327, "length": 69, "hash": "a771f2dacb69979e8d554517cd39069d"}
{"id": "mcs500_programming_manual_1328", "text": "(Offset 12, size 24, EtherCAT index 7306h)", "source": "mcs500_programming_manual", "chunk_index": 1328, "length": 42, "hash": "79027add359ead23640da8d19b8f3120"}
{"id": "mcs500_programming_manual_1329", "text": "First argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.", "source": "mcs500_programming_manual", "chunk_index": 1329, "length": 365, "hash": "cc1b8bed086176bc5ca1af0081154137"}
{"id": "mcs500_programming_manual_1330", "text": "First argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.\nFirst argument of the motion-related command, if\napplicable.", "source": "mcs500_programming_manual", "chunk_index": 1330, "length": 365, "hash": "cc1b8bed086176bc5ca1af0081154137"}
{"id": "mcs500_programming_manual_1331", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1331, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1332", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1332, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1333", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1333, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1334", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1334, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1335", "text": "Table 8: MotionCommandID numbers", "source": "mcs500_programming_manual", "chunk_index": 1335, "length": 32, "hash": "60627d5280cfc7c6a7da5419c0b8f79a"}
{"id": "mcs500_programming_manual_1336", "text": "No movement: all six arguments are ignored.\nMoveJoints (page 126)\u2020\nMovePose (page 138)\u2020\nMoveLin (page 132)\u2020\nMoveLinRelTrf (page 134)\u2020\nMoveLinRelWrf (page 135)\u2020\nDelay (page 125)\u2020\nSetBlending (page 141)\u2020\nSetJointVel (page 151)\u2020\nSetJointAcc (page 150)\u2020\nSetCartAngVel (page 143)\u2020\nSetCartLinVel (page 144)\u2020\nSetCartAcc (page 142)\u2020\nSetTrf (page 166)\u2020\nSetWrf (page 168)\u2020\nSetConf (page 147) (the posture configuration parameter, c\u2091, must be provided\nas the second argument).\nSetAutoConf (page 139)\u2020\nSetCheckpoint (page 145)\u2020\nGripper action: argument 1 is 0 for GripperClose (page 309) and 1 for\nGripperOpen (page 310) (not available on this robot)\nSetGripperVel (page 315)\u2020 (not available on this robot)\nSetGripperForce (page 313)\u2020 (not available on this robot)\nMoveJointsVel (page 129)\u2020\nMoveLinVelWrf (page 137)\u2020\nMoveLinVelTrf (page 136)\u2020\nSetVelTimeout (page 167)\u2020\nSetConfTurn (page 148)\u2020\nSetAutoConfTurn (page 140)\u2020\nSetTorqueLimits (page 162)\u2020\nSetTorqueLimitsCfg (page 164)\u2020\nMoveJointsRel (page 128)\u2020\nSetValveState (page 323)\u2020 (not available on this robot)\nSetGripperRange (page 314)\u2020 (not available on this robot)\nMoveGripper (page 311)\u2020 (not available on this robot)\nSetJointVelLimit (page 152)\u2020", "source": "mcs500_programming_manual", "chunk_index": 1336, "length": 1190, "hash": "7dc07d62ba98d5308319b026452c037f"}
{"id": "mcs500_programming_manual_1337", "text": "No movement: all six arguments are ignored.", "source": "mcs500_programming_manual", "chunk_index": 1337, "length": 43, "hash": "1600c2d88712e03bbd211018b0d0104a"}
{"id": "mcs500_programming_manual_1338", "text": "(page 147) (the posture configuration parameter, c\u2091, must be provided\nas the second argument).", "source": "mcs500_programming_manual", "chunk_index": 1338, "length": 94, "hash": "1be0ddc523bdb5eedade4a662c9bee69"}
{"id": "mcs500_programming_manual_1339", "text": "Gripper action: argument 1 is 0 for", "source": "mcs500_programming_manual", "chunk_index": 1339, "length": 35, "hash": "8dbf36cb3ede9cc023d4a89273b77a9f"}
{"id": "mcs500_programming_manual_1340", "text": "(page 309) and 1 for", "source": "mcs500_programming_manual", "chunk_index": 1340, "length": 20, "hash": "b44ee9122eaf64096b0ff4eb01833320"}
{"id": "mcs500_programming_manual_1341", "text": "(page 310) (not available on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1341, "length": 40, "hash": "07863c2c71b6f6f6c4544858d4cd7d49"}
{"id": "mcs500_programming_manual_1342", "text": "(not available on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1342, "length": 29, "hash": "1c4c2c4d4d5b7184c05cbc995ded06b5"}
{"id": "mcs500_programming_manual_1343", "text": "(not available on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1343, "length": 29, "hash": "1c4c2c4d4d5b7184c05cbc995ded06b5"}
{"id": "mcs500_programming_manual_1344", "text": "(not available on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1344, "length": 29, "hash": "1c4c2c4d4d5b7184c05cbc995ded06b5"}
{"id": "mcs500_programming_manual_1345", "text": "(not available on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1345, "length": 29, "hash": "1c4c2c4d4d5b7184c05cbc995ded06b5"}
{"id": "mcs500_programming_manual_1346", "text": "(not available on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1346, "length": 29, "hash": "1c4c2c4d4d5b7184c05cbc995ded06b5"}
{"id": "mcs500_programming_manual_1347", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1347, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1348", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1348, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1349", "text": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15", "source": "mcs500_programming_manual", "chunk_index": 1349, "length": 37, "hash": "532de0f77f879e4b357dd8460ccd42eb"}
{"id": "mcs500_programming_manual_1350", "text": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "source": "mcs500_programming_manual", "chunk_index": 1350, "length": 22, "hash": "f0f70c52e5fcca490b7dfba5dc585c99"}
{"id": "mcs500_programming_manual_1351", "text": "19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33", "source": "mcs500_programming_manual", "chunk_index": 1351, "length": 44, "hash": "3436ed6cd2c23d3a69775b44e8fcaf39"}
{"id": "mcs500_programming_manual_1352", "text": "19\n20\n21\n22\n23\n24\n25", "source": "mcs500_programming_manual", "chunk_index": 1352, "length": 20, "hash": "1a3fed5f6998e1cd5ab5e7d41915133f"}
{"id": "mcs500_programming_manual_1353", "text": "26\n27\n28\n29\n30\n31\n32\n33", "source": "mcs500_programming_manual", "chunk_index": 1353, "length": 23, "hash": "c4470a9e22aa5229aa55fa437645a002"}
{"id": "mcs500_programming_manual_1354", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1354, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1355", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1355, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1356", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1356, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1357", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1357, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1358", "text": "Table 8 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1358, "length": 38, "hash": "27ff40f9c5a5ae3343a1a69cc91966d5"}
{"id": "mcs500_programming_manual_1359", "text": "Table 8 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1359, "length": 38, "hash": "27ff40f9c5a5ae3343a1a69cc91966d5"}
{"id": "mcs500_programming_manual_1360", "text": "SetOutputState (page 317), arguments are 32-bit integers: [BankId,\noutput-values, output-mask].", "source": "mcs500_programming_manual", "chunk_index": 1360, "length": 95, "hash": "0cdb5dfb95aebf9fbe18fbc38352297f"}
{"id": "mcs500_programming_manual_1361", "text": "(page 317), arguments are 32-bit integers: [", "source": "mcs500_programming_manual", "chunk_index": 1361, "length": 44, "hash": "424261755fe07de96c4083b62a87c1da"}
{"id": "mcs500_programming_manual_1362", "text": "The mask specifies which outputs will change; only outputs with the\ncorresponding bit set in the mask are affected.", "source": "mcs500_programming_manual", "chunk_index": 1362, "length": 115, "hash": "bd587fbefa071d67f0f479e5ad93fc87"}
{"id": "mcs500_programming_manual_1363", "text": "The mask specifies which outputs will change; only outputs with the\ncorresponding bit set in the mask are affected.", "source": "mcs500_programming_manual", "chunk_index": 1363, "length": 115, "hash": "bd587fbefa071d67f0f479e5ad93fc87"}
{"id": "mcs500_programming_manual_1364", "text": "the same arguments as", "source": "mcs500_programming_manual", "chunk_index": 1364, "length": 21, "hash": "d1e27214ce942b2d98d8e089036a9db2"}
{"id": "mcs500_programming_manual_1365", "text": "the same arguments as", "source": "mcs500_programming_manual", "chunk_index": 1365, "length": 21, "hash": "d1e27214ce942b2d98d8e089036a9db2"}
{"id": "mcs500_programming_manual_1366", "text": "SetOutputState_Immediate (page 318), uses\nSetOutputState (page 317).\nSetIoSim (page 316)\u2020\nVacuumGrip (page 324), all six arguments are ignored.\nVacuumGrip_Immediate (page 325), all six arguments are ignored.\nVacuumRelease (page 326), all six arguments are ignored.\nVacuumRelease_Immediate (page 327), all six arguments are ignored.\nSetVacuumThreshold (page 321)\u2020\nSetVacuumThreshold_Immediate (page 322)\u2020\nSetVacuumPurgeDuration (page 319)\u2020\nSetVacuumPurgeDuration_Immediate (page 320)\u2020\nMoveJump (page 130)\u2020\nSetMoveJumpHeight (page 157)\u2020\nSetMoveJumpApproachVel (page 156)\u2020\nSetTimeScaling (page 202)\u2020\nSetMoveMode (page 159)\u2020\nSetMoveDurationCfg (page 154)\u2020\nSetMoveDuration (page 153)\u2020\nSetPayload (page 160)\u2020\nStartProgram (page 203)\u2020\nSetJointLimits (page 190)\u2020\nSetJointLimitsCfg (page 191)\u2020\nSetWorkZoneCfg (page 289)\u2020\nSetWorkZoneLimits (page 290)\u2020\nSetCollisionCfg (page 287)\u2020\nSetToolSphere (page 288)\u2020\nSetCalibrationCfg (page 186)\u2020\nRebootRobot (page 183)\nSet a robot variable (see Setting a variable (page 332))", "source": "mcs500_programming_manual", "chunk_index": 1366, "length": 1005, "hash": "11da89f33e5d6de594bfd47aa1ea2170"}
{"id": "mcs500_programming_manual_1367", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 1367, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_1368", "text": "(page 324), all six arguments are ignored.", "source": "mcs500_programming_manual", "chunk_index": 1368, "length": 42, "hash": "0c6e1ff1e1a806c689d65b3c216630e1"}
{"id": "mcs500_programming_manual_1369", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 1369, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_1370", "text": "(page 325), all six arguments are ignored.", "source": "mcs500_programming_manual", "chunk_index": 1370, "length": 42, "hash": "3032b7a8f80611107c555808a30730c7"}
{"id": "mcs500_programming_manual_1371", "text": "(page 326), all six arguments are ignored.", "source": "mcs500_programming_manual", "chunk_index": 1371, "length": 42, "hash": "2fb39ab1eda8cf37f6bd0dda5f3f698f"}
{"id": "mcs500_programming_manual_1372", "text": "VacuumRelease_Immediate", "source": "mcs500_programming_manual", "chunk_index": 1372, "length": 23, "hash": "8b36e69120d10c16f258423e04a4472c"}
{"id": "mcs500_programming_manual_1373", "text": "(page 327), all six arguments are ignored.", "source": "mcs500_programming_manual", "chunk_index": 1373, "length": 42, "hash": "33083443dabd3b08558434238ef22ffd"}
{"id": "mcs500_programming_manual_1374", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 1374, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_1375", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 1375, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_1376", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 1376, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_1377", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 1377, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_1378", "text": "(page 183)\nSet a robot variable (see", "source": "mcs500_programming_manual", "chunk_index": 1378, "length": 36, "hash": "dedb39323c7a6372b484baf32837a7e6"}
{"id": "mcs500_programming_manual_1379", "text": "36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n60\n100\n150\n151\n152\n153\n154\n155\n156\n200\n10,000\nto\n19,999", "source": "mcs500_programming_manual", "chunk_index": 1379, "length": 103, "hash": "83ccedd7104313cbf085eef8875b72db"}
{"id": "mcs500_programming_manual_1380", "text": "39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n60\n100\n150\n151\n152", "source": "mcs500_programming_manual", "chunk_index": 1380, "length": 57, "hash": "086c4b3ab94b1f402d7442dc5a5ac2d4"}
{"id": "mcs500_programming_manual_1381", "text": "153\n154\n155\n156\n200\n10,000\nto\n19,999", "source": "mcs500_programming_manual", "chunk_index": 1381, "length": 36, "hash": "ca0ff21bc5e9c94e9d6311c383929544"}
{"id": "mcs500_programming_manual_1382", "text": "\u2020 Argument count and type match those of the related TCP/IP command. Extra arguments\nare ignored.", "source": "mcs500_programming_manual", "chunk_index": 1382, "length": 97, "hash": "7ba586b16876a17b56c9d593e6596462"}
{"id": "mcs500_programming_manual_1383", "text": "Argument count and type match those of the related TCP/IP command. Extra arguments\nare ignored.", "source": "mcs500_programming_manual", "chunk_index": 1383, "length": 95, "hash": "f47c969564411ebddc9cf4360d3f5e12"}
{"id": "mcs500_programming_manual_1384", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1384, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1385", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1385, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1386", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1386, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1387", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1387, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1388", "text": "For commands with a pose (or Cartesian velocity vector), the fourth and fifth arguments\nmust be zero, and the sixth argument is the gamma angle (or rotational velocity about the\nz-axis). For example, for command ID 2 (MovePose (page 138)), use [x, y, z, 0, 0, \u03b3].", "source": "mcs500_programming_manual", "chunk_index": 1388, "length": 263, "hash": "d33db379d432742c0ce7652018d15b9e"}
{"id": "mcs500_programming_manual_1389", "text": "For commands with a pose (or Cartesian velocity vector), the fourth and fifth arguments\nmust be zero, and the sixth argument is the gamma angle (or rotational velocity about the\nz-axis). For example, for command ID 2 (", "source": "mcs500_programming_manual", "chunk_index": 1389, "length": 218, "hash": "ac75200f17aa27cd01da5a544cade2da"}
{"id": "mcs500_programming_manual_1390", "text": "The HostTime section in the cyclic output synchronizes the robot\u2019s date/time with the host\u2019s\n(see SetRtc (page 200)).", "source": "mcs500_programming_manual", "chunk_index": 1390, "length": 117, "hash": "196e206e981baea7b21b9c6bd1994072"}
{"id": "mcs500_programming_manual_1391", "text": "section in the cyclic output synchronizes the robot\u2019s date/time with the host\u2019s\n(see", "source": "mcs500_programming_manual", "chunk_index": 1391, "length": 84, "hash": "a027959e829f8fc17aec533573b2c260"}
{"id": "mcs500_programming_manual_1392", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1392, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1393", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1393, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1394", "text": "Table 9: HostTime (Offset 36, size 4, EtherCAT index 7400h)", "source": "mcs500_programming_manual", "chunk_index": 1394, "length": 59, "hash": "7fa371f08885115db204f51e043cb9e3"}
{"id": "mcs500_programming_manual_1395", "text": "(Offset 36, size 4, EtherCAT index 7400h)", "source": "mcs500_programming_manual", "chunk_index": 1395, "length": 41, "hash": "1e7ffcacb4cccc01100316c4a3e2c35b"}
{"id": "mcs500_programming_manual_1396", "text": "Current time in seconds since UNIX epoch (00:00:00\nUTC, January 1, 1970).", "source": "mcs500_programming_manual", "chunk_index": 1396, "length": 73, "hash": "a45dcd533f69c7010bd08d6587ca9b55"}
{"id": "mcs500_programming_manual_1397", "text": "Current time in seconds since UNIX epoch (00:00:00\nUTC, January 1, 1970).", "source": "mcs500_programming_manual", "chunk_index": 1397, "length": 73, "hash": "a45dcd533f69c7010bd08d6587ca9b55"}
{"id": "mcs500_programming_manual_1398", "text": "If non-zero, the robot updates its time to this value\n(same as SetRtc (page 200)).", "source": "mcs500_programming_manual", "chunk_index": 1398, "length": 82, "hash": "d56a70b80b447321b7c7deb51837e1f8"}
{"id": "mcs500_programming_manual_1399", "text": "If non-zero, the robot updates its time to this value\n(same as", "source": "mcs500_programming_manual", "chunk_index": 1399, "length": 62, "hash": "8c936b36c1749d2f089ce5d7c9dcc73e"}
{"id": "mcs500_programming_manual_1400", "text": "This ensures accurate timestamps in robot logs, as the\nrobot resets its time on reboot.`", "source": "mcs500_programming_manual", "chunk_index": 1400, "length": 88, "hash": "9b298851eb5d848ec37cf130d1ef4a87"}
{"id": "mcs500_programming_manual_1401", "text": "This ensures accurate timestamps in robot logs, as the\nrobot resets its time on reboot.`", "source": "mcs500_programming_manual", "chunk_index": 1401, "length": 88, "hash": "9b298851eb5d848ec37cf130d1ef4a87"}
{"id": "mcs500_programming_manual_1402", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1402, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1403", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1403, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1404", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1404, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1405", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1405, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1406", "text": "The BrakesControl section in the cyclic output controls the robot\u2019s brakes when it is\ndeactivated.", "source": "mcs500_programming_manual", "chunk_index": 1406, "length": 98, "hash": "bf6e63b49c25cdec080adb865e32b1e0"}
{"id": "mcs500_programming_manual_1407", "text": "section in the cyclic output controls the robot\u2019s brakes when it is\ndeactivated.", "source": "mcs500_programming_manual", "chunk_index": 1407, "length": 80, "hash": "b90e030df0bcb1467b8a9f7574fe369c"}
{"id": "mcs500_programming_manual_1408", "text": "The robot has brakes on joints 3 and 4.", "source": "mcs500_programming_manual", "chunk_index": 1408, "length": 39, "hash": "bc6b96ab86b7cf67228a50a1804b2aa4"}
{"id": "mcs500_programming_manual_1409", "text": "The robot has brakes on joints 3 and 4.", "source": "mcs500_programming_manual", "chunk_index": 1409, "length": 39, "hash": "bc6b96ab86b7cf67228a50a1804b2aa4"}
{"id": "mcs500_programming_manual_1410", "text": "The brakes behave as follows:", "source": "mcs500_programming_manual", "chunk_index": 1410, "length": 29, "hash": "b57c886df8c2338501eb649738237118"}
{"id": "mcs500_programming_manual_1411", "text": "The brakes behave as follows:", "source": "mcs500_programming_manual", "chunk_index": 1411, "length": 29, "hash": "b57c886df8c2338501eb649738237118"}
{"id": "mcs500_programming_manual_1412", "text": "\u2022 Brakes disengage automatically when the robot is activated (it holds position when not", "source": "mcs500_programming_manual", "chunk_index": 1412, "length": 88, "hash": "5af7ef2492fcd2cbc11f064dec711bbf"}
{"id": "mcs500_programming_manual_1413", "text": "\u2022 Brakes disengage automatically when the robot is activated (it holds position when not", "source": "mcs500_programming_manual", "chunk_index": 1413, "length": 88, "hash": "5af7ef2492fcd2cbc11f064dec711bbf"}
{"id": "mcs500_programming_manual_1414", "text": "\u2022 Brakes engage automatically when the robot is deactivated (including safety signals or", "source": "mcs500_programming_manual", "chunk_index": 1414, "length": 88, "hash": "c628b585a5f2479c21bb155b9f2ece37"}
{"id": "mcs500_programming_manual_1415", "text": "\u2022 Brakes engage automatically when the robot is deactivated (including safety signals or", "source": "mcs500_programming_manual", "chunk_index": 1415, "length": 88, "hash": "c628b585a5f2479c21bb155b9f2ece37"}
{"id": "mcs500_programming_manual_1416", "text": "\u2022 While deactivated, the brakes can be controlled using the fields in Table 10.", "source": "mcs500_programming_manual", "chunk_index": 1416, "length": 79, "hash": "0da778284a928404742dd793507aebc4"}
{"id": "mcs500_programming_manual_1417", "text": "\u2022 While deactivated, the brakes can be controlled using the fields in Table 10.", "source": "mcs500_programming_manual", "chunk_index": 1417, "length": 79, "hash": "0da778284a928404742dd793507aebc4"}
{"id": "mcs500_programming_manual_1418", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1418, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1419", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1419, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1420", "text": "Table 10: BrakesControl (Offset 40, size 4, EtherCAT index 7410h)", "source": "mcs500_programming_manual", "chunk_index": 1420, "length": 65, "hash": "09f9cd7fa1df11bca317d4ab02365965"}
{"id": "mcs500_programming_manual_1421", "text": "(Offset 40, size 4, EtherCAT index 7410h)", "source": "mcs500_programming_manual", "chunk_index": 1421, "length": 41, "hash": "b87dea52a16d7080a72354d4a78c2066"}
{"id": "mcs500_programming_manual_1422", "text": "BrakesControlAllowed", "source": "mcs500_programming_manual", "chunk_index": 1422, "length": 20, "hash": "92be62653d8f23786af47dd390e6e158"}
{"id": "mcs500_programming_manual_1423", "text": "BrakesControlAllowed", "source": "mcs500_programming_manual", "chunk_index": 1423, "length": 20, "hash": "92be62653d8f23786af47dd390e6e158"}
{"id": "mcs500_programming_manual_1424", "text": "Must be set to 1 to allow brakes control through cyclic\ndata.", "source": "mcs500_programming_manual", "chunk_index": 1424, "length": 61, "hash": "059d0dd31e6d95dc15c785fd7992c92a"}
{"id": "mcs500_programming_manual_1425", "text": "Must be set to 1 to allow brakes control through cyclic\ndata.", "source": "mcs500_programming_manual", "chunk_index": 1425, "length": 61, "hash": "059d0dd31e6d95dc15c785fd7992c92a"}
{"id": "mcs500_programming_manual_1426", "text": "This bit ensures that the brakes are not inadvertently\ndisengaged if cyclic data sent to the robot contains all\nzeros.", "source": "mcs500_programming_manual", "chunk_index": 1426, "length": 118, "hash": "b07832f1d7075c6bbe923edbc0b03e92"}
{"id": "mcs500_programming_manual_1427", "text": "This bit ensures that the brakes are not inadvertently\ndisengaged if cyclic data sent to the robot contains all\nzeros.", "source": "mcs500_programming_manual", "chunk_index": 1427, "length": 118, "hash": "b07832f1d7075c6bbe923edbc0b03e92"}
{"id": "mcs500_programming_manual_1428", "text": "If set to 1, the brakes are engaged.", "source": "mcs500_programming_manual", "chunk_index": 1428, "length": 36, "hash": "34adb9aa1a7db4e14f75861aa400e96e"}
{"id": "mcs500_programming_manual_1429", "text": "If set to 1, the brakes are engaged.", "source": "mcs500_programming_manual", "chunk_index": 1429, "length": 36, "hash": "34adb9aa1a7db4e14f75861aa400e96e"}
{"id": "mcs500_programming_manual_1430", "text": "If 0, the brakes are disengaged, and the robot may fall\nunder the effects of gravity.", "source": "mcs500_programming_manual", "chunk_index": 1430, "length": 85, "hash": "222b3e0ea47e54921e28354661ac2def"}
{"id": "mcs500_programming_manual_1431", "text": "If 0, the brakes are disengaged, and the robot may fall\nunder the effects of gravity.", "source": "mcs500_programming_manual", "chunk_index": 1431, "length": 85, "hash": "222b3e0ea47e54921e28354661ac2def"}
{"id": "mcs500_programming_manual_1432", "text": "This bit is ignored if the BrakesControlAllowed bit is\ncleared or if the robot is activated.", "source": "mcs500_programming_manual", "chunk_index": 1432, "length": 92, "hash": "1f8b3db4bcc88ae10e5fac605099edb4"}
{"id": "mcs500_programming_manual_1433", "text": "This bit is ignored if the", "source": "mcs500_programming_manual", "chunk_index": 1433, "length": 26, "hash": "610571d676dbafe6563b053639fb8c78"}
{"id": "mcs500_programming_manual_1434", "text": "BrakesControlAllowed", "source": "mcs500_programming_manual", "chunk_index": 1434, "length": 20, "hash": "92be62653d8f23786af47dd390e6e158"}
{"id": "mcs500_programming_manual_1435", "text": "bit is\ncleared or if the robot is activated.", "source": "mcs500_programming_manual", "chunk_index": 1435, "length": 44, "hash": "90e8551de22d27b18dc68771db2842ab"}
{"id": "mcs500_programming_manual_1436", "text": "Reserved for future use. Must be 0.", "source": "mcs500_programming_manual", "chunk_index": 1436, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "mcs500_programming_manual_1437", "text": "Reserved for future use. Must be 0.", "source": "mcs500_programming_manual", "chunk_index": 1437, "length": 35, "hash": "be4070b2ce94d2f82f681066fe6268e7"}
{"id": "mcs500_programming_manual_1438", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1438, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1439", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1439, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1440", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1440, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1441", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1441, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1442", "text": "Dynamic data configuration", "source": "mcs500_programming_manual", "chunk_index": 1442, "length": 26, "hash": "c3616a5be3c9cc55f5430053c0e1c3a9"}
{"id": "mcs500_programming_manual_1443", "text": "Dynamic data configuration", "source": "mcs500_programming_manual", "chunk_index": 1443, "length": 26, "hash": "c3616a5be3c9cc55f5430053c0e1c3a9"}
{"id": "mcs500_programming_manual_1444", "text": "The DynamicDataConfiguration section in the cyclic output determines which dynamic data\nthe robot reports in each of the 4 available dynamic-data slots in its cyclic input payload.", "source": "mcs500_programming_manual", "chunk_index": 1444, "length": 180, "hash": "1f595a3d74a295d872d5df60b4cdc20a"}
{"id": "mcs500_programming_manual_1445", "text": "DynamicDataConfiguration", "source": "mcs500_programming_manual", "chunk_index": 1445, "length": 24, "hash": "0799f5c97dc873df918a4fa222fd0126"}
{"id": "mcs500_programming_manual_1446", "text": "section in the cyclic output determines which dynamic data\nthe robot reports in each of the 4 available dynamic-data slots in its cyclic input payload.", "source": "mcs500_programming_manual", "chunk_index": 1446, "length": 151, "hash": "f4e7322ac87f84c82d79d96685b665d4"}
{"id": "mcs500_programming_manual_1447", "text": "When a specific dynamic data type is chosen (in Table 11), the robot will return the\ncorresponding values in Table 22, Table 23, Table 24, or Table 25.", "source": "mcs500_programming_manual", "chunk_index": 1447, "length": 151, "hash": "aa9f3522d8e3d8ecf590d4be2e7c3389"}
{"id": "mcs500_programming_manual_1448", "text": "When a specific dynamic data type is chosen (in Table 11), the robot will return the\ncorresponding values in Table 22, Table 23, Table 24, or Table 25.", "source": "mcs500_programming_manual", "chunk_index": 1448, "length": 151, "hash": "aa9f3522d8e3d8ecf590d4be2e7c3389"}
{"id": "mcs500_programming_manual_1449", "text": "If dynamic data type 0 (Automatic) is used, the robot cycles through available dynamic data\ntypes, reporting a different type each cycle.", "source": "mcs500_programming_manual", "chunk_index": 1449, "length": 137, "hash": "58a47a0139351195922705e7068aa542"}
{"id": "mcs500_programming_manual_1450", "text": "If dynamic data type 0 (", "source": "mcs500_programming_manual", "chunk_index": 1450, "length": 24, "hash": "33840273e6d8b5da21f42249954057a5"}
{"id": "mcs500_programming_manual_1451", "text": ") is used, the robot cycles through available dynamic data\ntypes, reporting a different type each cycle.", "source": "mcs500_programming_manual", "chunk_index": 1451, "length": 104, "hash": "582bf98ddb44e1febcffd52c82410bd1"}
{"id": "mcs500_programming_manual_1452", "text": "See Table 12 for a list of available dynamic data types.", "source": "mcs500_programming_manual", "chunk_index": 1452, "length": 56, "hash": "c97dccc6a2971db595e92a5f69f33980"}
{"id": "mcs500_programming_manual_1453", "text": "See Table 12 for a list of available dynamic data types.", "source": "mcs500_programming_manual", "chunk_index": 1453, "length": 56, "hash": "c97dccc6a2971db595e92a5f69f33980"}
{"id": "mcs500_programming_manual_1454", "text": "A delay of one or two cycles may occur before a change to the requested dynamic data\ntype takes effect.", "source": "mcs500_programming_manual", "chunk_index": 1454, "length": 103, "hash": "a218531afff9a2ae75d9462d854478cb"}
{"id": "mcs500_programming_manual_1455", "text": "A delay of one or two cycles may occur before a change to the requested dynamic data\ntype takes effect.", "source": "mcs500_programming_manual", "chunk_index": 1455, "length": 103, "hash": "a218531afff9a2ae75d9462d854478cb"}
{"id": "mcs500_programming_manual_1456", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1456, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1457", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1457, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1458", "text": "Table 11: DynamicDataConfiguration (Offset 44, size 16, EtherCAT indices 7420h, 7421h, 7422h, 7423h)", "source": "mcs500_programming_manual", "chunk_index": 1458, "length": 100, "hash": "54b22cb8080588fd5343685ae68be9fe"}
{"id": "mcs500_programming_manual_1459", "text": "DynamicDataConfiguration", "source": "mcs500_programming_manual", "chunk_index": 1459, "length": 24, "hash": "0799f5c97dc873df918a4fa222fd0126"}
{"id": "mcs500_programming_manual_1460", "text": "(Offset 44, size 16, EtherCAT indices 7420h, 7421h, 7422h, 7423h)", "source": "mcs500_programming_manual", "chunk_index": 1460, "length": 65, "hash": "51aea9738f7806fdaf962cf8e5819030"}
{"id": "mcs500_programming_manual_1461", "text": "DynamicDataTypeID 1Integer\nDynamicDataTypeID 2Integer\nDynamicDataTypeID 3Integer\nDynamicDataTypeID 4Integer", "source": "mcs500_programming_manual", "chunk_index": 1461, "length": 107, "hash": "9a3d8b081e22b1a3360139ae1abf9010"}
{"id": "mcs500_programming_manual_1462", "text": "1620h:1\n1621h:1\n1622h:1\n1623h:1", "source": "mcs500_programming_manual", "chunk_index": 1462, "length": 31, "hash": "9eee929c74adc82e97ac3c45875ba2a6"}
{"id": "mcs500_programming_manual_1463", "text": "1620h:1\n1621h:1\n1622h:1\n1623h:1", "source": "mcs500_programming_manual", "chunk_index": 1463, "length": 31, "hash": "9eee929c74adc82e97ac3c45875ba2a6"}
{"id": "mcs500_programming_manual_1464", "text": "Dynamic data type for index #1 (see Table 12).\nDynamic data type for index #2 (see Table 12).\nDynamic data type for index #3 (see Table 12).\nDynamic data type for index #4 (see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 1464, "length": 187, "hash": "707656feaf4c9a23d469c33a555e70e6"}
{"id": "mcs500_programming_manual_1465", "text": "Dynamic data type for index #1 (see Table 12).\nDynamic data type for index #2 (see Table 12).\nDynamic data type for index #3 (see Table 12).\nDynamic data type for index #4 (see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 1465, "length": 187, "hash": "707656feaf4c9a23d469c33a555e70e6"}
{"id": "mcs500_programming_manual_1466", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1466, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1467", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1467, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1468", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1468, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1469", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1469, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1470", "text": "Table 12: List of DynamicDataTypeID values", "source": "mcs500_programming_manual", "chunk_index": 1470, "length": 42, "hash": "6dfd998c8fe2b5c117b958efeba10fc5"}
{"id": "mcs500_programming_manual_1471", "text": "The robot will automatically choose a dynamic data type and change it every cycle,\ngoing through all of them in around-robin manner.", "source": "mcs500_programming_manual", "chunk_index": 1471, "length": 132, "hash": "cd7d1293d720a7c2e17df60a7f4a237a"}
{"id": "mcs500_programming_manual_1472", "text": "The robot will automatically choose a dynamic data type and change it every cycle,\ngoing through all of them in around-robin manner.", "source": "mcs500_programming_manual", "chunk_index": 1472, "length": 132, "hash": "cd7d1293d720a7c2e17df60a7f4a237a"}
{"id": "mcs500_programming_manual_1473", "text": "This is the easiest way for the host to receive all possible values periodically.", "source": "mcs500_programming_manual", "chunk_index": 1473, "length": 81, "hash": "80f496b067f3665f6a0ad638c44206ea"}
{"id": "mcs500_programming_manual_1474", "text": "This is the easiest way for the host to receive all possible values periodically.", "source": "mcs500_programming_manual", "chunk_index": 1474, "length": 81, "hash": "80f496b067f3665f6a0ad638c44206ea"}
{"id": "mcs500_programming_manual_1475", "text": "Firmware version (GetFwVersion (page 225)).", "source": "mcs500_programming_manual", "chunk_index": 1475, "length": 43, "hash": "6a8bcf069acdf8be469010a2a95b80c1"}
{"id": "mcs500_programming_manual_1476", "text": "Values: [major version, minor version, patch version, build number].", "source": "mcs500_programming_manual", "chunk_index": 1476, "length": 68, "hash": "6270483d3880b5c1ce7b008ce4c708e6"}
{"id": "mcs500_programming_manual_1477", "text": "Values: [major version, minor version, patch version, build number].", "source": "mcs500_programming_manual", "chunk_index": 1477, "length": 68, "hash": "6270483d3880b5c1ce7b008ce4c708e6"}
{"id": "mcs500_programming_manual_1478", "text": "Product type (GetProductType (page 241)).", "source": "mcs500_programming_manual", "chunk_index": 1478, "length": 41, "hash": "16ecb37e6087c138b783a7cd1bbc5cb4"}
{"id": "mcs500_programming_manual_1479", "text": "Values: [product type] where 3 = Meca500 R3, 4 = Meca500 R4, 20 = MCS500 R1.", "source": "mcs500_programming_manual", "chunk_index": 1479, "length": 76, "hash": "81e183a576a9040e926edd6d29809798"}
{"id": "mcs500_programming_manual_1480", "text": "Values: [product type] where 3 = Meca500 R3, 4 = Meca500 R4, 20 = MCS500 R1.", "source": "mcs500_programming_manual", "chunk_index": 1480, "length": 76, "hash": "81e183a576a9040e926edd6d29809798"}
{"id": "mcs500_programming_manual_1481", "text": "Serial number (GetRobotSerial (page 246)).", "source": "mcs500_programming_manual", "chunk_index": 1481, "length": 42, "hash": "b48921f0c1e7697d16468c4941fd1ccf"}
{"id": "mcs500_programming_manual_1482", "text": "Values: [serial number].", "source": "mcs500_programming_manual", "chunk_index": 1482, "length": 24, "hash": "4205162fdb9f98c20c3e1ae2d1f66a3f"}
{"id": "mcs500_programming_manual_1483", "text": "Values: [serial number].", "source": "mcs500_programming_manual", "chunk_index": 1483, "length": 24, "hash": "4205162fdb9f98c20c3e1ae2d1f66a3f"}
{"id": "mcs500_programming_manual_1484", "text": "Joint limits configuration (GetJointLimitsCfg (page 228)).", "source": "mcs500_programming_manual", "chunk_index": 1484, "length": 58, "hash": "c0c9f13edc64e005c052cf17f7ffae74"}
{"id": "mcs500_programming_manual_1485", "text": "Joint limits configuration", "source": "mcs500_programming_manual", "chunk_index": 1485, "length": 26, "hash": "c485542da81b934643bcd4c3a5932d8a"}
{"id": "mcs500_programming_manual_1486", "text": "Model joint limits (GetModelJointLimits (page 231)), for joints 1, 2, and 3.", "source": "mcs500_programming_manual", "chunk_index": 1486, "length": 76, "hash": "19b60fc09efd52d51daaf1edb5647303"}
{"id": "mcs500_programming_manual_1487", "text": "(page 231)), for joints 1, 2, and 3.", "source": "mcs500_programming_manual", "chunk_index": 1487, "length": 36, "hash": "de681ec3d2477bb0d62a26db4226b166"}
{"id": "mcs500_programming_manual_1488", "text": "Values: [q1,min, q2,min, q3,min, q1,max, q2,max, q3,max], in or mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 1488, "length": 81, "hash": "aea828a725b7897991f53dc3680d0dd6"}
{"id": "mcs500_programming_manual_1489", "text": "], in or mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 1489, "length": 26, "hash": "06e60b591ec0810d3cb1e70750913432"}
{"id": "mcs500_programming_manual_1490", "text": "Model joint limits (GetModelJointLimits (page 231)), for joint 4.", "source": "mcs500_programming_manual", "chunk_index": 1490, "length": 65, "hash": "8360c3db18893fc39a8044fa4199e0cb"}
{"id": "mcs500_programming_manual_1491", "text": "(page 231)), for joint 4.", "source": "mcs500_programming_manual", "chunk_index": 1491, "length": 25, "hash": "c0e24912534a14f466d5526973f78ec1"}
{"id": "mcs500_programming_manual_1492", "text": "Values: [q4,min, 0, 0, q4,max, 0, 0], in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1492, "length": 43, "hash": "7c76ecd9f1c62eebd68c2f528dceffcf"}
{"id": "mcs500_programming_manual_1493", "text": "Effective joint limits (GetJointLimits (page 227)), for joints 1, 2, and 3.", "source": "mcs500_programming_manual", "chunk_index": 1493, "length": 75, "hash": "c92f2e7db24168728c136c15c3676215"}
{"id": "mcs500_programming_manual_1494", "text": "Effective joint limits", "source": "mcs500_programming_manual", "chunk_index": 1494, "length": 22, "hash": "f5668ae7799955aca6c0adb64d82a996"}
{"id": "mcs500_programming_manual_1495", "text": "(page 227)), for joints 1, 2, and 3.", "source": "mcs500_programming_manual", "chunk_index": 1495, "length": 36, "hash": "0eda6c4019687dc3988cec7c4975a858"}
{"id": "mcs500_programming_manual_1496", "text": "Values: [q1,min, q2,min, q3,min, q1,max, q2,max, q3,max], in or mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 1496, "length": 81, "hash": "aea828a725b7897991f53dc3680d0dd6"}
{"id": "mcs500_programming_manual_1497", "text": "], in or mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 1497, "length": 26, "hash": "06e60b591ec0810d3cb1e70750913432"}
{"id": "mcs500_programming_manual_1498", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1498, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1499", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1499, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1500", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1500, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1501", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1501, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1502", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1502, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1503", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1503, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1504", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1504, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1505", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1505, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1506", "text": "Effective joint limits (GetJointLimits (page 227)), for joint 4.", "source": "mcs500_programming_manual", "chunk_index": 1506, "length": 64, "hash": "6b9aaecd35263d9d7f0a9abf066490de"}
{"id": "mcs500_programming_manual_1507", "text": "Effective joint limits", "source": "mcs500_programming_manual", "chunk_index": 1507, "length": 22, "hash": "f5668ae7799955aca6c0adb64d82a996"}
{"id": "mcs500_programming_manual_1508", "text": "(page 227)), for joint 4.", "source": "mcs500_programming_manual", "chunk_index": 1508, "length": 25, "hash": "fc03471b3b14f2f7bd131994879a83d7"}
{"id": "mcs500_programming_manual_1509", "text": "Values: [q4,min, 0, 0, q4,max, 0, 0], in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1509, "length": 43, "hash": "7c76ecd9f1c62eebd68c2f528dceffcf"}
{"id": "mcs500_programming_manual_1510", "text": "Work zone configuration (GetWorkZoneCfg (page 284)).", "source": "mcs500_programming_manual", "chunk_index": 1510, "length": 52, "hash": "495f5cbf9644daa2819bbf35e795276c"}
{"id": "mcs500_programming_manual_1511", "text": "Work zone configuration", "source": "mcs500_programming_manual", "chunk_index": 1511, "length": 23, "hash": "044501f0273af11fb3ebb02e36f6dea7"}
{"id": "mcs500_programming_manual_1512", "text": "Values: [work zone limits severity, work zone limits detection mode].", "source": "mcs500_programming_manual", "chunk_index": 1512, "length": 69, "hash": "091c4c19711b27d760f78a1825e9fd1f"}
{"id": "mcs500_programming_manual_1513", "text": "Values: [work zone limits severity, work zone limits detection mode].", "source": "mcs500_programming_manual", "chunk_index": 1513, "length": 69, "hash": "091c4c19711b27d760f78a1825e9fd1f"}
{"id": "mcs500_programming_manual_1514", "text": "Work zone limits (GetWorkZoneLimits (page 285)).", "source": "mcs500_programming_manual", "chunk_index": 1514, "length": 48, "hash": "9f3975685ad28e024d3c5c28cd560a67"}
{"id": "mcs500_programming_manual_1515", "text": "Values: [xmin, ymin, zmin, xmax, ymax, zmax], in mm.", "source": "mcs500_programming_manual", "chunk_index": 1515, "length": 52, "hash": "ba2f0a5fb9adbf1598d487afa53a5888"}
{"id": "mcs500_programming_manual_1516", "text": "Tool sphere (GetToolSphere (page 283)).", "source": "mcs500_programming_manual", "chunk_index": 1516, "length": 39, "hash": "7b9fbc67416607f64c92a2e73b6bb564"}
{"id": "mcs500_programming_manual_1517", "text": "Values: [x, y, z, r], in mm.", "source": "mcs500_programming_manual", "chunk_index": 1517, "length": 28, "hash": "8a5907039c5ef784600383b07bfb35b0"}
{"id": "mcs500_programming_manual_1518", "text": "Values: [x, y, z, r], in mm.", "source": "mcs500_programming_manual", "chunk_index": 1518, "length": 28, "hash": "8a5907039c5ef784600383b07bfb35b0"}
{"id": "mcs500_programming_manual_1519", "text": "Conf and Conf turn (GetConf (page 222), GetConfTurn (page 223), GetAutoConf\n(page 213), GetAutoConfTurn (page 214)).", "source": "mcs500_programming_manual", "chunk_index": 1519, "length": 116, "hash": "e439eb3e09a8abce40dec578fb7a9e2f"}
{"id": "mcs500_programming_manual_1520", "text": "Values: [0, elbow \u22121/1/NaN, 0, last joint turn or NaN].", "source": "mcs500_programming_manual", "chunk_index": 1520, "length": 55, "hash": "be1b9d58824a5885d35a88ab1b6aa15a"}
{"id": "mcs500_programming_manual_1521", "text": "Values: [0, elbow \u22121/1/NaN, 0, last joint turn or NaN].", "source": "mcs500_programming_manual", "chunk_index": 1521, "length": 55, "hash": "be1b9d58824a5885d35a88ab1b6aa15a"}
{"id": "mcs500_programming_manual_1522", "text": "NaN indicates auto-conf or auto-conf-turn.", "source": "mcs500_programming_manual", "chunk_index": 1522, "length": 42, "hash": "87f85f43ef12c486593b512a36248425"}
{"id": "mcs500_programming_manual_1523", "text": "NaN indicates auto-conf or auto-conf-turn.", "source": "mcs500_programming_manual", "chunk_index": 1523, "length": 42, "hash": "87f85f43ef12c486593b512a36248425"}
{"id": "mcs500_programming_manual_1524", "text": "Motion queue parameters (GetBlending (page 215), GetVelTimeout (page 252)).", "source": "mcs500_programming_manual", "chunk_index": 1524, "length": 75, "hash": "1a3e8e43dc1e052cd513dbe5084c3110"}
{"id": "mcs500_programming_manual_1525", "text": "Motion queue parameters", "source": "mcs500_programming_manual", "chunk_index": 1525, "length": 23, "hash": "7781bfcb0a05560c60de2a5d85637b32"}
{"id": "mcs500_programming_manual_1526", "text": "Values: [blending ratio percent, velocity timeout in seconds].", "source": "mcs500_programming_manual", "chunk_index": 1526, "length": 62, "hash": "a5bae45f9cba9afb5870ce36f3a8de71"}
{"id": "mcs500_programming_manual_1527", "text": "Values: [blending ratio percent, velocity timeout in seconds].", "source": "mcs500_programming_manual", "chunk_index": 1527, "length": 62, "hash": "a5bae45f9cba9afb5870ce36f3a8de71"}
{"id": "mcs500_programming_manual_1528", "text": "Motion queue velocities and accelerations (GetJointVel (page 229),\nGetJointAcc (page 226), GetCartLinVel (page 219), GetCartAngVel (page 218),\nGetCartAcc (page 217), GetJointVelLimit (page 230)).", "source": "mcs500_programming_manual", "chunk_index": 1528, "length": 195, "hash": "92e664f7114d585fd678e0da06e625c3"}
{"id": "mcs500_programming_manual_1529", "text": "Motion queue velocities and accelerations", "source": "mcs500_programming_manual", "chunk_index": 1529, "length": 41, "hash": "b6e4561601274580a381c7938a8e014d"}
{"id": "mcs500_programming_manual_1530", "text": "Values: [joint velocity, joint acceleration, Cartesian linear velocity, Cartesian\nangular velocity, Cartesian acceleration, joint velocity limit], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1530, "length": 158, "hash": "ed04f1606f59c0dc4a1b8570f9aa2c97"}
{"id": "mcs500_programming_manual_1531", "text": "Values: [joint velocity, joint acceleration, Cartesian linear velocity, Cartesian\nangular velocity, Cartesian acceleration, joint velocity limit], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1531, "length": 158, "hash": "ed04f1606f59c0dc4a1b8570f9aa2c97"}
{"id": "mcs500_programming_manual_1532", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1532, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1533", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1533, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1534", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1534, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1535", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1535, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1536", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1536, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1537", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1537, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1538", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1538, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1539", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1539, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1540", "text": "Gripper parameters (GetGripperForce (page 293), GetGripperVel (page 295),\nGetGripperRange (page 294)).", "source": "mcs500_programming_manual", "chunk_index": 1540, "length": 102, "hash": "ec8a4d50d8f1dee56b019d5b3307513d"}
{"id": "mcs500_programming_manual_1541", "text": "Values: [gripper force, gripper velocity, fingers opening corresponding to closed\nstate, fingers opening corresponding to open state].", "source": "mcs500_programming_manual", "chunk_index": 1541, "length": 134, "hash": "6b0770a66e6ed33104f6ff3e16b4a3a4"}
{"id": "mcs500_programming_manual_1542", "text": "Values: [gripper force, gripper velocity, fingers opening corresponding to closed\nstate, fingers opening corresponding to open state].", "source": "mcs500_programming_manual", "chunk_index": 1542, "length": 134, "hash": "6b0770a66e6ed33104f6ff3e16b4a3a4"}
{"id": "mcs500_programming_manual_1543", "text": "Arguments 1 and 2 are in percentage, while arguments 3 and 4 are in mm.", "source": "mcs500_programming_manual", "chunk_index": 1543, "length": 71, "hash": "754782e5a9cc0f13c9c7c6caed5918a6"}
{"id": "mcs500_programming_manual_1544", "text": "Arguments 1 and 2 are in percentage, while arguments 3 and 4 are in mm.", "source": "mcs500_programming_manual", "chunk_index": 1544, "length": 71, "hash": "754782e5a9cc0f13c9c7c6caed5918a6"}
{"id": "mcs500_programming_manual_1545", "text": "Torque limits configuration (GetTorqueLimitsCfg (page 250)).", "source": "mcs500_programming_manual", "chunk_index": 1545, "length": 60, "hash": "02974fe594d9f9c34519072574779e55"}
{"id": "mcs500_programming_manual_1546", "text": "Torque limits configuration", "source": "mcs500_programming_manual", "chunk_index": 1546, "length": 27, "hash": "242bce2dec3fcc4c7e4d0b7ab2cd09bb"}
{"id": "mcs500_programming_manual_1547", "text": "Values: [severity, detection mode].", "source": "mcs500_programming_manual", "chunk_index": 1547, "length": 35, "hash": "adcdd4b7f59b060e2951e165345f1039"}
{"id": "mcs500_programming_manual_1548", "text": "Values: [severity, detection mode].", "source": "mcs500_programming_manual", "chunk_index": 1548, "length": 35, "hash": "adcdd4b7f59b060e2951e165345f1039"}
{"id": "mcs500_programming_manual_1549", "text": "Torque limits (GetTorqueLimits (page 249)).", "source": "mcs500_programming_manual", "chunk_index": 1549, "length": 43, "hash": "fa71720e5f70f6abe13e9618ee864967"}
{"id": "mcs500_programming_manual_1550", "text": "Values: [motor 1 limit, motor 2 limit, \u2026], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1550, "length": 54, "hash": "95373a6d970030bec8d8436d19105824"}
{"id": "mcs500_programming_manual_1551", "text": "Values: [motor 1 limit, motor 2 limit, \u2026], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1551, "length": 54, "hash": "95373a6d970030bec8d8436d19105824"}
{"id": "mcs500_programming_manual_1552", "text": "Vacuum configuration (GetVacuumThreshold (page 308),\nGetVacuumPurgeDuration (page 307)).", "source": "mcs500_programming_manual", "chunk_index": 1552, "length": 88, "hash": "507529ae8f4f5f831ee096e2639c16e6"}
{"id": "mcs500_programming_manual_1553", "text": "Vacuum configuration", "source": "mcs500_programming_manual", "chunk_index": 1553, "length": 20, "hash": "17ce646235c4420e3e017a9617ef21a6"}
{"id": "mcs500_programming_manual_1554", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 1554, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_1555", "text": "Values: [holdThreshold, releaseThreshold, purgeDuration].", "source": "mcs500_programming_manual", "chunk_index": 1555, "length": 57, "hash": "e575ac62c8caa681c13d6fda1ec4d4a0"}
{"id": "mcs500_programming_manual_1556", "text": "Values: [holdThreshold, releaseThreshold, purgeDuration].", "source": "mcs500_programming_manual", "chunk_index": 1556, "length": 57, "hash": "e575ac62c8caa681c13d6fda1ec4d4a0"}
{"id": "mcs500_programming_manual_1557", "text": "Arguments 1 and 2 are in kPa, argument 3 is in seconds.", "source": "mcs500_programming_manual", "chunk_index": 1557, "length": 55, "hash": "bf3e4a9bf7b8fa429672fe8c08378977"}
{"id": "mcs500_programming_manual_1558", "text": "Arguments 1 and 2 are in kPa, argument 3 is in seconds.", "source": "mcs500_programming_manual", "chunk_index": 1558, "length": 55, "hash": "bf3e4a9bf7b8fa429672fe8c08378977"}
{"id": "mcs500_programming_manual_1559", "text": "Move jump height (GetMoveJumpHeight (page 236)).", "source": "mcs500_programming_manual", "chunk_index": 1559, "length": 48, "hash": "b59df72c35e330d894f404b9f8de712b"}
{"id": "mcs500_programming_manual_1560", "text": "Values: [hstart, hend, hmin, hmax], in mm.", "source": "mcs500_programming_manual", "chunk_index": 1560, "length": 42, "hash": "72224c8ce9f8c57d638803cbbae2f38e"}
{"id": "mcs500_programming_manual_1561", "text": "Move jump approach velocity (GetMoveJumpApproachVel (page 235)).", "source": "mcs500_programming_manual", "chunk_index": 1561, "length": 64, "hash": "48870a8a60b8969d8077ffd836bb7bc7"}
{"id": "mcs500_programming_manual_1562", "text": "Move jump approach velocity", "source": "mcs500_programming_manual", "chunk_index": 1562, "length": 27, "hash": "7990c6a6de47484836775fbda7ad8586"}
{"id": "mcs500_programming_manual_1563", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 1563, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_1564", "text": "Values: [vstart, pstart, vend, pend], in mm or mm/s.", "source": "mcs500_programming_manual", "chunk_index": 1564, "length": 52, "hash": "44ed44eda365f9e55cb09d8093d20968"}
{"id": "mcs500_programming_manual_1565", "text": "Move mode configuration (GetMoveMode (page 237), GetMoveDurationCfg\n(page 234), GetMoveDuration (page 233)).", "source": "mcs500_programming_manual", "chunk_index": 1565, "length": 108, "hash": "9541765782672baa8e86fc3f80ca2162"}
{"id": "mcs500_programming_manual_1566", "text": "Move mode configuration", "source": "mcs500_programming_manual", "chunk_index": 1566, "length": 23, "hash": "93ef9eea2e73a72e4637f25b183d6ab8"}
{"id": "mcs500_programming_manual_1567", "text": "Values: [move mode, severity, duration].", "source": "mcs500_programming_manual", "chunk_index": 1567, "length": 40, "hash": "628f23a9d18a800c35843431e1bf8f9d"}
{"id": "mcs500_programming_manual_1568", "text": "Values: [move mode, severity, duration].", "source": "mcs500_programming_manual", "chunk_index": 1568, "length": 40, "hash": "628f23a9d18a800c35843431e1bf8f9d"}
{"id": "mcs500_programming_manual_1569", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1569, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1570", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1570, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1571", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1571, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1572", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1572, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1573", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1573, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1574", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1574, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1575", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1575, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1576", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1576, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1577", "text": "Robot calibration status (GetCalibrationCfg (page 216), GetRobotCalibrated\n(page 244)).", "source": "mcs500_programming_manual", "chunk_index": 1577, "length": 87, "hash": "22296302b5bc636102d6fc5d6ed73bb2"}
{"id": "mcs500_programming_manual_1578", "text": "Robot calibration status", "source": "mcs500_programming_manual", "chunk_index": 1578, "length": 24, "hash": "6ae29c62e5c89367d38598f89f6eca1e"}
{"id": "mcs500_programming_manual_1579", "text": "Values: [calibrationEnabled, calibrated].", "source": "mcs500_programming_manual", "chunk_index": 1579, "length": 41, "hash": "d15dd6d560c85f203e2b863270f75c03"}
{"id": "mcs500_programming_manual_1580", "text": "Values: [calibrationEnabled, calibrated].", "source": "mcs500_programming_manual", "chunk_index": 1580, "length": 41, "hash": "d15dd6d560c85f203e2b863270f75c03"}
{"id": "mcs500_programming_manual_1581", "text": "Robot payload (GetPayload (page 240)).", "source": "mcs500_programming_manual", "chunk_index": 1581, "length": 38, "hash": "a58f88624f52a6bc004d01339acbb2f8"}
{"id": "mcs500_programming_manual_1582", "text": "Values: [m, cx, cy, cz], in kg or mm.", "source": "mcs500_programming_manual", "chunk_index": 1582, "length": 37, "hash": "ae31c3fe1ab3dec19cd1a0d2c791be28"}
{"id": "mcs500_programming_manual_1583", "text": "Target real-time joint velocity (GetRtTargetJointVel (page 272)).", "source": "mcs500_programming_manual", "chunk_index": 1583, "length": 65, "hash": "7fb7cae857d5b9c042c31a2a6b780da4"}
{"id": "mcs500_programming_manual_1584", "text": "Target real-time joint velocity", "source": "mcs500_programming_manual", "chunk_index": 1584, "length": 31, "hash": "730cdcfbd1b4eb98ab301387aa51cbb0"}
{"id": "mcs500_programming_manual_1585", "text": "Values: [\u03c91, \u03c92, \u2026], in mm/s (for joint 3) or \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 1585, "length": 50, "hash": "b6edbdb20819a43a607848bdf9d3265f"}
{"id": "mcs500_programming_manual_1586", "text": ", \u2026], in mm/s (for joint 3) or \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 1586, "length": 35, "hash": "cf9da54a863afc4f70568d7871b7bbd6"}
{"id": "mcs500_programming_manual_1587", "text": "Target real-time joint torque (GetRtTargetJointTorq (page 271)).", "source": "mcs500_programming_manual", "chunk_index": 1587, "length": 64, "hash": "48e88a7801f1b9d3c8bfbf22041339d6"}
{"id": "mcs500_programming_manual_1588", "text": "Target real-time joint torque", "source": "mcs500_programming_manual", "chunk_index": 1588, "length": 29, "hash": "606def9c13e32c2843848be7681aa3a2"}
{"id": "mcs500_programming_manual_1589", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 1589, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_1590", "text": "Values: [motor 1 torque, motor 2 torque, \u2026], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1590, "length": 56, "hash": "bad899e05353aa07441e98d6666dd62b"}
{"id": "mcs500_programming_manual_1591", "text": "Values: [motor 1 torque, motor 2 torque, \u2026], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1591, "length": 56, "hash": "bad899e05353aa07441e98d6666dd62b"}
{"id": "mcs500_programming_manual_1592", "text": "Target real-time Cartesian velocity (GetRtTargetCartVel (page 267)).", "source": "mcs500_programming_manual", "chunk_index": 1592, "length": 68, "hash": "bbef0d7d9ecb74e27a772cc34a09217c"}
{"id": "mcs500_programming_manual_1593", "text": "Target real-time Cartesian velocity", "source": "mcs500_programming_manual", "chunk_index": 1593, "length": 35, "hash": "7e33b3d99ecff427f5685e287ed384e0"}
{"id": "mcs500_programming_manual_1594", "text": "Values: [\u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y, \u03c9z], in mm/s or \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 1594, "length": 46, "hash": "ab0725e03d9a33ad76cb50ed01609d7e"}
{"id": "mcs500_programming_manual_1595", "text": "Collision configuration (GetCollisionCfg (page 281)).", "source": "mcs500_programming_manual", "chunk_index": 1595, "length": 53, "hash": "d5b64c7bc307240a978a98f4cda88916"}
{"id": "mcs500_programming_manual_1596", "text": "Collision configuration", "source": "mcs500_programming_manual", "chunk_index": 1596, "length": 23, "hash": "868297253ff760adfc0dd71c3c3f32aa"}
{"id": "mcs500_programming_manual_1597", "text": "Values: [collision severity level].", "source": "mcs500_programming_manual", "chunk_index": 1597, "length": 35, "hash": "9b60dd1bc09eda17cd90f766e3f5c7b4"}
{"id": "mcs500_programming_manual_1598", "text": "Values: [collision severity level].", "source": "mcs500_programming_manual", "chunk_index": 1598, "length": 35, "hash": "9b60dd1bc09eda17cd90f766e3f5c7b4"}
{"id": "mcs500_programming_manual_1599", "text": "Collision status (GetCollisionStatus (page 282)).", "source": "mcs500_programming_manual", "chunk_index": 1599, "length": 49, "hash": "766bbf70cd15ca7834efc1fd0cda97f2"}
{"id": "mcs500_programming_manual_1600", "text": "Values: [collision boolean state, group of colliding object 1, ID of colliding object\n1, group of colliding object 2, ID of colliding object 2].", "source": "mcs500_programming_manual", "chunk_index": 1600, "length": 144, "hash": "b96b27f5b0f512f4730625d2d1cfd815"}
{"id": "mcs500_programming_manual_1601", "text": "Values: [collision boolean state, group of colliding object 1, ID of colliding object\n1, group of colliding object 2, ID of colliding object 2].", "source": "mcs500_programming_manual", "chunk_index": 1601, "length": 144, "hash": "b96b27f5b0f512f4730625d2d1cfd815"}
{"id": "mcs500_programming_manual_1602", "text": "Work zone status (GetWorkZoneStatus (page 286)).", "source": "mcs500_programming_manual", "chunk_index": 1602, "length": 48, "hash": "320aaebf83c9630f9be9fb3291318c31"}
{"id": "mcs500_programming_manual_1603", "text": "Values: [work zone breach Boolean state, group of object in breach, ID of object in\nbreach].", "source": "mcs500_programming_manual", "chunk_index": 1603, "length": 92, "hash": "89f84acecb32493a528dc8f88bc88cc2"}
{"id": "mcs500_programming_manual_1604", "text": "Values: [work zone breach Boolean state, group of object in breach, ID of object in", "source": "mcs500_programming_manual", "chunk_index": 1604, "length": 83, "hash": "571e8425b16c0ff9f8bf8264e1509464"}
{"id": "mcs500_programming_manual_1605", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1605, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1606", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1606, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1607", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1607, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1608", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1608, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1609", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1609, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1610", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1610, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1611", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1611, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1612", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1612, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1613", "text": "Actual joint position (GetRtJointPos (page 263)).", "source": "mcs500_programming_manual", "chunk_index": 1613, "length": 49, "hash": "1a83f3ea3cff41ebd3b0de41997ac9da"}
{"id": "mcs500_programming_manual_1614", "text": "Actual joint position", "source": "mcs500_programming_manual", "chunk_index": 1614, "length": 21, "hash": "3e9e3e436e159ce9444256ab730709e1"}
{"id": "mcs500_programming_manual_1615", "text": "Values: [q1, q2, q3, \u2026]. Unit is mm (for joint 3) or \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1615, "length": 55, "hash": "380b50616ee0799be9ee92d46cdbd74e"}
{"id": "mcs500_programming_manual_1616", "text": ", \u2026]. Unit is mm (for joint 3) or \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1616, "length": 36, "hash": "f5a9be51ccf6de792e9b17f5efd27e8d"}
{"id": "mcs500_programming_manual_1617", "text": "Actual end-effector pose ( GetRtCartPos (page 259)).", "source": "mcs500_programming_manual", "chunk_index": 1617, "length": 52, "hash": "f513d22fdd5eb5944d0eabdb1d1ae2ba"}
{"id": "mcs500_programming_manual_1618", "text": "Actual end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1618, "length": 24, "hash": "2ee9fe06d84f79dc3fa4013d0e44fb88"}
{"id": "mcs500_programming_manual_1619", "text": "Values: [x, y, z, \u03b1, \u03b2, \u03b3]. Units are mm or \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1619, "length": 46, "hash": "5a8ac95f4c532fc8993e14047828ec8f"}
{"id": "mcs500_programming_manual_1620", "text": "Values: [x, y, z, \u03b1, \u03b2, \u03b3]. Units are mm or \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1620, "length": 46, "hash": "5a8ac95f4c532fc8993e14047828ec8f"}
{"id": "mcs500_programming_manual_1621", "text": "Actual joint velocity (GetRtJointVel (page 265)).", "source": "mcs500_programming_manual", "chunk_index": 1621, "length": 49, "hash": "d6c31dea73f2c6c48f141215a0bd35c0"}
{"id": "mcs500_programming_manual_1622", "text": "Actual joint velocity", "source": "mcs500_programming_manual", "chunk_index": 1622, "length": 21, "hash": "c58b5c1a5fef111e341a5f329d3abfcc"}
{"id": "mcs500_programming_manual_1623", "text": "Values: [\u03c91, \u03c92, \u2026], in mm/s (for joint 3) or \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 1623, "length": 50, "hash": "b6edbdb20819a43a607848bdf9d3265f"}
{"id": "mcs500_programming_manual_1624", "text": ", \u2026], in mm/s (for joint 3) or \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 1624, "length": 35, "hash": "cf9da54a863afc4f70568d7871b7bbd6"}
{"id": "mcs500_programming_manual_1625", "text": "Actual joint torque (GetRtJointTorq (page 264)).", "source": "mcs500_programming_manual", "chunk_index": 1625, "length": 48, "hash": "f6c846b63ca7882c1ed0628c8990c705"}
{"id": "mcs500_programming_manual_1626", "text": "Values: [joint 1 torque, joint 2 torque, \u2026], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1626, "length": 56, "hash": "3e2701c4ff312d32a95048ee2ca5847a"}
{"id": "mcs500_programming_manual_1627", "text": "Values: [joint 1 torque, joint 2 torque, \u2026], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1627, "length": 56, "hash": "3e2701c4ff312d32a95048ee2ca5847a"}
{"id": "mcs500_programming_manual_1628", "text": "Actual Cartesian velocity (GetRtCartVel (page 260)).", "source": "mcs500_programming_manual", "chunk_index": 1628, "length": 52, "hash": "1142e08f7ec6f3bd90121031666eba4f"}
{"id": "mcs500_programming_manual_1629", "text": "Actual Cartesian velocity", "source": "mcs500_programming_manual", "chunk_index": 1629, "length": 25, "hash": "e25856d3b7b14c89eb52a915f9109ac7"}
{"id": "mcs500_programming_manual_1630", "text": "Values: [\u1e8b, \u1e8f, \u017c, \u03c9x, \u03c9y, \u03c9z], in mm/s or \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 1630, "length": 46, "hash": "ab0725e03d9a33ad76cb50ed01609d7e"}
{"id": "mcs500_programming_manual_1631", "text": "Actual conf and conf turn (GetRtConf (page 261), GetRtConfTurn (page 262)).", "source": "mcs500_programming_manual", "chunk_index": 1631, "length": 75, "hash": "fd1a9d309975ac7287568d7bfc1a899f"}
{"id": "mcs500_programming_manual_1632", "text": "Actual conf and conf turn", "source": "mcs500_programming_manual", "chunk_index": 1632, "length": 25, "hash": "5121cca8434c9691a29ddda7aa80dd4f"}
{"id": "mcs500_programming_manual_1633", "text": "Values: [0, elbow \u22121/0/1, 0, last joint turn].", "source": "mcs500_programming_manual", "chunk_index": 1633, "length": 46, "hash": "c3b8e87b778fcd4dfec1ff30a723271f"}
{"id": "mcs500_programming_manual_1634", "text": "Values: [0, elbow \u22121/0/1, 0, last joint turn].", "source": "mcs500_programming_manual", "chunk_index": 1634, "length": 46, "hash": "c3b8e87b778fcd4dfec1ff30a723271f"}
{"id": "mcs500_programming_manual_1635", "text": "Not available on this robot.\nNot available on this robot.\nNot available on this robot.", "source": "mcs500_programming_manual", "chunk_index": 1635, "length": 86, "hash": "843b07ad9317af4729eccaf1bfad848e"}
{"id": "mcs500_programming_manual_1636", "text": "Not available on this robot.", "source": "mcs500_programming_manual", "chunk_index": 1636, "length": 28, "hash": "538206e119bbd7b21ed2fdc85247b57c"}
{"id": "mcs500_programming_manual_1637", "text": "Not available on this robot.\nNot available on this robot.", "source": "mcs500_programming_manual", "chunk_index": 1637, "length": 57, "hash": "3004a635a9a1e2b37a472d4ccfc88ae9"}
{"id": "mcs500_programming_manual_1638", "text": "Time scaling (GetTimeScaling (page 248)).", "source": "mcs500_programming_manual", "chunk_index": 1638, "length": 41, "hash": "1ed2b6f4f0d21160a302a32d0a27fd0f"}
{"id": "mcs500_programming_manual_1639", "text": "Values: [p], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1639, "length": 24, "hash": "a9913bea92ae41e1641c66002362df5c"}
{"id": "mcs500_programming_manual_1640", "text": "Values: [p], in percent.", "source": "mcs500_programming_manual", "chunk_index": 1640, "length": 24, "hash": "a9913bea92ae41e1641c66002362df5c"}
{"id": "mcs500_programming_manual_1641", "text": "Configured joint limits (GetJointLimits (page 227)), for joints 1, 2, and 3\n(ignored if joint limits are disabled).", "source": "mcs500_programming_manual", "chunk_index": 1641, "length": 115, "hash": "5e99cbb95047722077ef61aa75d9935c"}
{"id": "mcs500_programming_manual_1642", "text": "Configured joint limits", "source": "mcs500_programming_manual", "chunk_index": 1642, "length": 23, "hash": "ed3ecd09ff247dac9f4d84f677239260"}
{"id": "mcs500_programming_manual_1643", "text": "(page 227)), for joints 1, 2, and 3", "source": "mcs500_programming_manual", "chunk_index": 1643, "length": 35, "hash": "822392928a3601d73d79472385cbb5d1"}
{"id": "mcs500_programming_manual_1644", "text": "(ignored if joint limits are disabled).", "source": "mcs500_programming_manual", "chunk_index": 1644, "length": 39, "hash": "37da29a3aa12ae6bfea8f4b337d1eaed"}
{"id": "mcs500_programming_manual_1645", "text": "Values: [q1,min, q2,min, q3,min, q1,max, q2,max, q3,max], in or mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 1645, "length": 81, "hash": "aea828a725b7897991f53dc3680d0dd6"}
{"id": "mcs500_programming_manual_1646", "text": "], in or mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 1646, "length": 26, "hash": "06e60b591ec0810d3cb1e70750913432"}
{"id": "mcs500_programming_manual_1647", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1647, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1648", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1648, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1649", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1649, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1650", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1650, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1651", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1651, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1652", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1652, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1653", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1653, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1654", "text": "Table 12 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1654, "length": 39, "hash": "7a34466e98f2db8c04edda0ec9339b64"}
{"id": "mcs500_programming_manual_1655", "text": "Configured joint limits (GetJointLimits (page 227)), for joint 4 (ignored if joint\nlimits are disabled).", "source": "mcs500_programming_manual", "chunk_index": 1655, "length": 104, "hash": "fd2d638edfb157e1704e6c3832dde98a"}
{"id": "mcs500_programming_manual_1656", "text": "Configured joint limits", "source": "mcs500_programming_manual", "chunk_index": 1656, "length": 23, "hash": "ed3ecd09ff247dac9f4d84f677239260"}
{"id": "mcs500_programming_manual_1657", "text": "(page 227)), for joint 4 (ignored if joint\nlimits are disabled).", "source": "mcs500_programming_manual", "chunk_index": 1657, "length": 64, "hash": "a2c2f7d3e3729eba15a9e96f1c521956"}
{"id": "mcs500_programming_manual_1658", "text": "Values: [q4,min, 0, 0, q4,max, 0, 0], in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1658, "length": 43, "hash": "7c76ecd9f1c62eebd68c2f528dceffcf"}
{"id": "mcs500_programming_manual_1659", "text": "Digital input and output states (GetRtIoStatus (page 302), GetRtInputState\n(page 301), GetRtOutputState (page 303)).", "source": "mcs500_programming_manual", "chunk_index": 1659, "length": 116, "hash": "fa0a28277e4313f5b47c04b503bbc44b"}
{"id": "mcs500_programming_manual_1660", "text": "Digital input and output states", "source": "mcs500_programming_manual", "chunk_index": 1660, "length": 31, "hash": "00f1caff2992c55139130a711befad9e"}
{"id": "mcs500_programming_manual_1661", "text": "Unlike most other dynamic data types that report up to six float values, this one\nmaps the 12 bytes of the first three float values as follows:", "source": "mcs500_programming_manual", "chunk_index": 1661, "length": 143, "hash": "80cb5d672bf4a56245ec11267bb39415"}
{"id": "mcs500_programming_manual_1662", "text": "Unlike most other dynamic data types that report up to six float values, this one\nmaps the 12 bytes of the first three float values as follows:", "source": "mcs500_programming_manual", "chunk_index": 1662, "length": 143, "hash": "80cb5d672bf4a56245ec11267bb39415"}
{"id": "mcs500_programming_manual_1663", "text": "- Bits 1-7: reserved", "source": "mcs500_programming_manual", "chunk_index": 1663, "length": 20, "hash": "a46aa9d53118dbb178f3d4f214efbcbc"}
{"id": "mcs500_programming_manual_1664", "text": "- Bits 1-7: reserved", "source": "mcs500_programming_manual", "chunk_index": 1664, "length": 20, "hash": "a46aa9d53118dbb178f3d4f214efbcbc"}
{"id": "mcs500_programming_manual_1665", "text": "- Byte index 1: errorCode.", "source": "mcs500_programming_manual", "chunk_index": 1665, "length": 26, "hash": "c5c1e28ee24f1b7c8ac37c795649d50d"}
{"id": "mcs500_programming_manual_1666", "text": "- Byte index 1: errorCode.", "source": "mcs500_programming_manual", "chunk_index": 1666, "length": 26, "hash": "c5c1e28ee24f1b7c8ac37c795649d50d"}
{"id": "mcs500_programming_manual_1667", "text": "- Byte index 2: number of digital outputs.", "source": "mcs500_programming_manual", "chunk_index": 1667, "length": 42, "hash": "a80ef4d80a9ad297f49332d7b1dfdd83"}
{"id": "mcs500_programming_manual_1668", "text": "- Byte index 2: number of digital outputs.", "source": "mcs500_programming_manual", "chunk_index": 1668, "length": 42, "hash": "a80ef4d80a9ad297f49332d7b1dfdd83"}
{"id": "mcs500_programming_manual_1669", "text": "- Byte index 3: number of digital inputs.", "source": "mcs500_programming_manual", "chunk_index": 1669, "length": 41, "hash": "ce369e81340189e69064199d59ea44aa"}
{"id": "mcs500_programming_manual_1670", "text": "- Byte index 3: number of digital inputs.", "source": "mcs500_programming_manual", "chunk_index": 1670, "length": 41, "hash": "ce369e81340189e69064199d59ea44aa"}
{"id": "mcs500_programming_manual_1671", "text": "- Bytes indices 4\u20137: digital outputs values. One bit per output. Least significant\nbit/byte first.", "source": "mcs500_programming_manual", "chunk_index": 1671, "length": 98, "hash": "e111751c78ad4decf574ae1f138555c1"}
{"id": "mcs500_programming_manual_1672", "text": "- Bytes indices 4\u20137: digital outputs values. One bit per output. Least significant\nbit/byte first.", "source": "mcs500_programming_manual", "chunk_index": 1672, "length": 98, "hash": "e111751c78ad4decf574ae1f138555c1"}
{"id": "mcs500_programming_manual_1673", "text": "- Bytes indices 8\u201311: digital inputs values. One bit per input. Least significant\nbit/byte first.", "source": "mcs500_programming_manual", "chunk_index": 1673, "length": 97, "hash": "a717e557f19c583c69e13914b246e604"}
{"id": "mcs500_programming_manual_1674", "text": "- Bytes indices 8\u201311: digital inputs values. One bit per input. Least significant\nbit/byte first.", "source": "mcs500_programming_manual", "chunk_index": 1674, "length": 97, "hash": "a717e557f19c583c69e13914b246e604"}
{"id": "mcs500_programming_manual_1675", "text": "Vacuum state (GetRtVacuumState (page 305), GetRtVacuumPressure (page 304)).", "source": "mcs500_programming_manual", "chunk_index": 1675, "length": 75, "hash": "b4870c4aca726d9d212fc7cd7cf9eee3"}
{"id": "mcs500_programming_manual_1676", "text": "Values: [vacuumOn, purgeOn, holdingPart, pressure]. Pressure is in kPa.", "source": "mcs500_programming_manual", "chunk_index": 1676, "length": 71, "hash": "acc78812cae71ec537579d7dbf9b344f"}
{"id": "mcs500_programming_manual_1677", "text": "Values: [vacuumOn, purgeOn, holdingPart, pressure]. Pressure is in kPa.", "source": "mcs500_programming_manual", "chunk_index": 1677, "length": 71, "hash": "acc78812cae71ec537579d7dbf9b344f"}
{"id": "mcs500_programming_manual_1678", "text": "Each DynamicDataTypeID returns six values as defined in Section 5. Unused values are\nset to 0. For example, ID 19 provides four meaningful values, and the last two are 0. In\nSCARA robots, some values (such as the Euler angles \u03b1 and \u03b2) are always zero.", "source": "mcs500_programming_manual", "chunk_index": 1678, "length": 251, "hash": "9ed4c420372daeba925bd242080b6995"}
{"id": "mcs500_programming_manual_1679", "text": "returns six values as defined in Section 5. Unused values are\nset to 0. For example, ID 19 provides four meaningful values, and the last two are 0. In\nSCARA robots, some values (such as the Euler angles \u03b1 and \u03b2) are always zero.", "source": "mcs500_programming_manual", "chunk_index": 1679, "length": 228, "hash": "31631a7d126a57bb731e7db288f717db"}
{"id": "mcs500_programming_manual_1680", "text": "No dynamic data IDs are defined for information that is already available in other cyclic\ndata fields, such as Target joint set (page 75), Target end-effector pose (page 77), Target", "source": "mcs500_programming_manual", "chunk_index": 1680, "length": 181, "hash": "a773f6a4f97b5d8715f1811697007b22"}
{"id": "mcs500_programming_manual_1681", "text": "No dynamic data IDs are defined for information that is already available in other cyclic\ndata fields, such as", "source": "mcs500_programming_manual", "chunk_index": 1681, "length": 110, "hash": "03139134a4976ce51e7aaeb8d1e0a5be"}
{"id": "mcs500_programming_manual_1682", "text": "Target end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1682, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "mcs500_programming_manual_1683", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1683, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1684", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1684, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1685", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1685, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1686", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1686, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1687", "text": "configuration (page 79), Target WRF (page 81), etc. See Cyclic input format (page 68) for\ndetails.", "source": "mcs500_programming_manual", "chunk_index": 1687, "length": 98, "hash": "08a0167320432a2f094065882e2cdaa5"}
{"id": "mcs500_programming_manual_1688", "text": "(page 68) for\ndetails.", "source": "mcs500_programming_manual", "chunk_index": 1688, "length": 22, "hash": "4716cc00a267f267a794f463922122e3"}
{"id": "mcs500_programming_manual_1689", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1689, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1690", "text": "Cyclic output format", "source": "mcs500_programming_manual", "chunk_index": 1690, "length": 20, "hash": "afdd31d0ad11579997be508b363cdb72"}
{"id": "mcs500_programming_manual_1691", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1691, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1692", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1692, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1693", "text": "The cyclic input (received from the robot) provides the complete status, position, and\nconfiguration of the robot.", "source": "mcs500_programming_manual", "chunk_index": 1693, "length": 114, "hash": "1cb90fa70dfdaa4f153a7b279de3323c"}
{"id": "mcs500_programming_manual_1694", "text": "The cyclic input (received from the robot) provides the complete status, position, and\nconfiguration of the robot.", "source": "mcs500_programming_manual", "chunk_index": 1694, "length": 114, "hash": "1cb90fa70dfdaa4f153a7b279de3323c"}
{"id": "mcs500_programming_manual_1695", "text": "The total size of the cyclic input is 252 bytes, divided into the following sections:", "source": "mcs500_programming_manual", "chunk_index": 1695, "length": 85, "hash": "5fc04935e7b4ca7c1a7a407534fb929e"}
{"id": "mcs500_programming_manual_1696", "text": "The total size of the cyclic input is 252 bytes, divided into the following sections:", "source": "mcs500_programming_manual", "chunk_index": 1696, "length": 85, "hash": "5fc04935e7b4ca7c1a7a407534fb929e"}
{"id": "mcs500_programming_manual_1697", "text": "\u2022 Robot status (page 68): General robot state (e.g., activation, simulation mode, recovery", "source": "mcs500_programming_manual", "chunk_index": 1697, "length": 90, "hash": "d6ee598f83b057945ef0e9ead3c98226"}
{"id": "mcs500_programming_manual_1698", "text": "(page 68): General robot state (e.g., activation, simulation mode, recovery", "source": "mcs500_programming_manual", "chunk_index": 1698, "length": 75, "hash": "384469b7f460aca376d8333ae40b2fde"}
{"id": "mcs500_programming_manual_1699", "text": "\u2022 Motion status (page 70): Robot motion status (e.g., paused state, motion queue status,", "source": "mcs500_programming_manual", "chunk_index": 1699, "length": 88, "hash": "d11c78cd1ffbd72bab6e9148dd7ee092"}
{"id": "mcs500_programming_manual_1700", "text": "(page 70): Robot motion status (e.g., paused state, motion queue status,", "source": "mcs500_programming_manual", "chunk_index": 1700, "length": 72, "hash": "a4f53ec11ded11092bbe4c652d5c72f3"}
{"id": "mcs500_programming_manual_1701", "text": "and other motion-related conditions);", "source": "mcs500_programming_manual", "chunk_index": 1701, "length": 37, "hash": "94fe073cc0f49e1f94fba6213fed4206"}
{"id": "mcs500_programming_manual_1702", "text": "and other motion-related conditions);", "source": "mcs500_programming_manual", "chunk_index": 1702, "length": 37, "hash": "94fe073cc0f49e1f94fba6213fed4206"}
{"id": "mcs500_programming_manual_1703", "text": "\u2022 Target joint set (page 75): Real-time calculated joint positions (GetRtTargetJointPos", "source": "mcs500_programming_manual", "chunk_index": 1703, "length": 87, "hash": "a7ed8f2cce00a3cf920951dce5b47a97"}
{"id": "mcs500_programming_manual_1704", "text": "(page 75): Real-time calculated joint positions (", "source": "mcs500_programming_manual", "chunk_index": 1704, "length": 49, "hash": "cf252b8cc1026ef25a66d01d7e809e7c"}
{"id": "mcs500_programming_manual_1705", "text": "\u2022 Target end-effector pose (page 77):", "source": "mcs500_programming_manual", "chunk_index": 1705, "length": 37, "hash": "e170ff730c742a4e0d8862c7acf92c37"}
{"id": "mcs500_programming_manual_1706", "text": "Target end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1706, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "mcs500_programming_manual_1707", "text": "Real-time calculated Cartesian position", "source": "mcs500_programming_manual", "chunk_index": 1707, "length": 39, "hash": "ff6b2eedd09f011fb3ed77bf3769f63d"}
{"id": "mcs500_programming_manual_1708", "text": "Real-time calculated Cartesian position", "source": "mcs500_programming_manual", "chunk_index": 1708, "length": 39, "hash": "ff6b2eedd09f011fb3ed77bf3769f63d"}
{"id": "mcs500_programming_manual_1709", "text": "(GetRtTargetCartPos (page 266));", "source": "mcs500_programming_manual", "chunk_index": 1709, "length": 32, "hash": "7aac57be4bac372d268dd8a7b6d87d23"}
{"id": "mcs500_programming_manual_1710", "text": "\u2022 Target configuration (page 79): Real-time calculated shoulder, elbow, wrist, and turn", "source": "mcs500_programming_manual", "chunk_index": 1710, "length": 87, "hash": "22524fe627f19cb216b29471742c386e"}
{"id": "mcs500_programming_manual_1711", "text": "Target configuration", "source": "mcs500_programming_manual", "chunk_index": 1711, "length": 20, "hash": "b4b42d35279073d3c644c40f5e5e8178"}
{"id": "mcs500_programming_manual_1712", "text": "(page 79): Real-time calculated shoulder, elbow, wrist, and turn", "source": "mcs500_programming_manual", "chunk_index": 1712, "length": 64, "hash": "cb9fddaff74e11b893732f5d35635819"}
{"id": "mcs500_programming_manual_1713", "text": "configuration (GetRtTargetConf (page 268) and GetRtTargetConfTurn (page 269));", "source": "mcs500_programming_manual", "chunk_index": 1713, "length": 78, "hash": "7f8175c4aeb5ac7669a8871531e91168"}
{"id": "mcs500_programming_manual_1714", "text": "\u2022 Target WRF (page 81): World reference frame used in the real-time calculated position", "source": "mcs500_programming_manual", "chunk_index": 1714, "length": 87, "hash": "309eadf808e1bf3443cfa5859131672d"}
{"id": "mcs500_programming_manual_1715", "text": "(page 81): World reference frame used in the real-time calculated position", "source": "mcs500_programming_manual", "chunk_index": 1715, "length": 74, "hash": "253667aca4f3fbcc73a256d756847dbc"}
{"id": "mcs500_programming_manual_1716", "text": "(GetRtWrf (page 274), GetWrf (page 253));", "source": "mcs500_programming_manual", "chunk_index": 1716, "length": 41, "hash": "509b290af4bb9dec0188d826feae270b"}
{"id": "mcs500_programming_manual_1717", "text": "\u2022 Target TRF (page 83): Tool reference frame used in the real-time calculated position", "source": "mcs500_programming_manual", "chunk_index": 1717, "length": 86, "hash": "858e4c318500d3e7aa1c8aafd98ace8e"}
{"id": "mcs500_programming_manual_1718", "text": "(page 83): Tool reference frame used in the real-time calculated position", "source": "mcs500_programming_manual", "chunk_index": 1718, "length": 73, "hash": "d2612572aa7074ca2680ecde711ba5a4"}
{"id": "mcs500_programming_manual_1719", "text": "(GetRtTrf (page 273), GetTrf (page 251));", "source": "mcs500_programming_manual", "chunk_index": 1719, "length": 41, "hash": "e049d49b957d32d498c95155f9b45070"}
{"id": "mcs500_programming_manual_1720", "text": "\u2022 Robot timestamp (page 85): Precise monotonic robot timestamp associated with this", "source": "mcs500_programming_manual", "chunk_index": 1720, "length": 83, "hash": "fc03bb5c12e0e391c7fd52a3c4a44e53"}
{"id": "mcs500_programming_manual_1721", "text": "(page 85): Precise monotonic robot timestamp associated with this", "source": "mcs500_programming_manual", "chunk_index": 1721, "length": 65, "hash": "e28015752fe14ae18cb0c62f2bd8f307"}
{"id": "mcs500_programming_manual_1722", "text": "cyclic data (GetRtc (page 275));", "source": "mcs500_programming_manual", "chunk_index": 1722, "length": 32, "hash": "4d6ce818ae04b39c2fca2ff3bf973694"}
{"id": "mcs500_programming_manual_1723", "text": "\u2022 Safety status (page 87): Safety-related information (e.g., safety signals, power supply", "source": "mcs500_programming_manual", "chunk_index": 1723, "length": 89, "hash": "f22837c786f9a8772f81a5f5a1d4252f"}
{"id": "mcs500_programming_manual_1724", "text": "(page 87): Safety-related information (e.g., safety signals, power supply", "source": "mcs500_programming_manual", "chunk_index": 1724, "length": 73, "hash": "402b3cbcab05807a793741b84d17688f"}
{"id": "mcs500_programming_manual_1725", "text": "states, operating mode);", "source": "mcs500_programming_manual", "chunk_index": 1725, "length": 24, "hash": "5e2fa871b933bedda5fd4348e9f89769"}
{"id": "mcs500_programming_manual_1726", "text": "states, operating mode);", "source": "mcs500_programming_manual", "chunk_index": 1726, "length": 24, "hash": "5e2fa871b933bedda5fd4348e9f89769"}
{"id": "mcs500_programming_manual_1727", "text": "\u2022 Dynamic data (page 90): Additional robot information not included in the above; contents", "source": "mcs500_programming_manual", "chunk_index": 1727, "length": 90, "hash": "d81085cb3dbf5f8b6312a4bc4385d220"}
{"id": "mcs500_programming_manual_1728", "text": "(page 90): Additional robot information not included in the above; contents", "source": "mcs500_programming_manual", "chunk_index": 1728, "length": 75, "hash": "99f763df67d02be0acb246a760fbfd7a"}
{"id": "mcs500_programming_manual_1729", "text": "The RobotStatus section in the cyclic input reports the general robot state (similar to\nGetStatusRobot (page 277)).", "source": "mcs500_programming_manual", "chunk_index": 1729, "length": 115, "hash": "d3acfd4b75aaa54c233691ae6e3c8286"}
{"id": "mcs500_programming_manual_1730", "text": "section in the cyclic input reports the general robot state (similar to", "source": "mcs500_programming_manual", "chunk_index": 1730, "length": 71, "hash": "f65ae5d21d236364aadf277d381cd918"}
{"id": "mcs500_programming_manual_1731", "text": "BrakesEngaged Bool\nBool\nRecoveryMode", "source": "mcs500_programming_manual", "chunk_index": 1731, "length": 36, "hash": "8b264752d5b4f189e40c4a2bd4601f4c"}
{"id": "mcs500_programming_manual_1732", "text": "CollisionStatus Bool", "source": "mcs500_programming_manual", "chunk_index": 1732, "length": 20, "hash": "26eab84c149848604cb0bc1490d45f72"}
{"id": "mcs500_programming_manual_1733", "text": "(Reserved)\nErrorCode", "source": "mcs500_programming_manual", "chunk_index": 1733, "length": 20, "hash": "e3bc681659109f51c7250d1bb2e4cce6"}
{"id": "mcs500_programming_manual_1734", "text": "Table 13: RobotStatus (Offset 0, size 4, EtherCAT index 6010h)", "source": "mcs500_programming_manual", "chunk_index": 1734, "length": 62, "hash": "443a57b9d0b0ed42e89eb671b17f5735"}
{"id": "mcs500_programming_manual_1735", "text": "(Offset 0, size 4, EtherCAT index 6010h)", "source": "mcs500_programming_manual", "chunk_index": 1735, "length": 40, "hash": "10dbe8496dfd8c0db172d91aa27d7660"}
{"id": "mcs500_programming_manual_1736", "text": "True only while the robot is being activated, homed, or\ndeactivated.\nIndicates whether the motors are on (powered) and\nthe robot is ready to receive motion commands.\nNot available on this robot.\nIndicates whether the robot simulation mode is\nactivated.\nIndicates whether the brakes are engaged.\nIndicates whether the robot recovery mode is\nactivated.", "source": "mcs500_programming_manual", "chunk_index": 1736, "length": 350, "hash": "2aa0d94832b88c07cb9d76e0b9a5bcb4"}
{"id": "mcs500_programming_manual_1737", "text": "True only while the robot is being activated, homed, or\ndeactivated.\nIndicates whether the motors are on (powered) and\nthe robot is ready to receive motion commands.\nNot available on this robot.\nIndicates whether the robot simulation mode is\nactivated.\nIndicates whether the brakes are engaged.\nIndicates whether the robot recovery mode is\nactivated.", "source": "mcs500_programming_manual", "chunk_index": 1737, "length": 350, "hash": "2aa0d94832b88c07cb9d76e0b9a5bcb4"}
{"id": "mcs500_programming_manual_1738", "text": "Indicates whether the emergency stop safety signal is\nactivated.", "source": "mcs500_programming_manual", "chunk_index": 1738, "length": 64, "hash": "084bb867f25c8544d1bef948605b6a4d"}
{"id": "mcs500_programming_manual_1739", "text": "Indicates whether the emergency stop safety signal is\nactivated.", "source": "mcs500_programming_manual", "chunk_index": 1739, "length": 64, "hash": "084bb867f25c8544d1bef948605b6a4d"}
{"id": "mcs500_programming_manual_1740", "text": "Deprecated; use EStop bit from SafetyStatus instead.", "source": "mcs500_programming_manual", "chunk_index": 1740, "length": 52, "hash": "7d3594373e0fafd8d4756d251b1a3de8"}
{"id": "mcs500_programming_manual_1741", "text": "Indicates whether the robot has detected an imminent\ncollision (SetCollisionCfg (page 287)).\nIndicates whether the robot has detected a work zone\nbreach (SetWorkZoneCfg (page 289),\nSetWorkZoneLimits (page 290)).\n1 if this connection with the robot only allows\nmonitoring, not controlling.\nReserved for future use.\nIndicates the error code (see Table 1 and Table 3) or 0,\nif there is no error.", "source": "mcs500_programming_manual", "chunk_index": 1741, "length": 392, "hash": "8c359c4b57b32b91a97574d339d3592a"}
{"id": "mcs500_programming_manual_1742", "text": "Indicates whether the robot has detected an imminent\ncollision (", "source": "mcs500_programming_manual", "chunk_index": 1742, "length": 64, "hash": "a489517cf7cb79059cc0415f98832d82"}
{"id": "mcs500_programming_manual_1743", "text": "(page 287)).\nIndicates whether the robot has detected a work zone\nbreach (", "source": "mcs500_programming_manual", "chunk_index": 1743, "length": 74, "hash": "94ec7fd4cadfcc6da00690ba718c1eaf"}
{"id": "mcs500_programming_manual_1744", "text": "(page 290)).\n1 if this connection with the robot only allows\nmonitoring, not controlling.\nReserved for future use.\nIndicates the error code (see Table 1 and Table 3) or 0,", "source": "mcs500_programming_manual", "chunk_index": 1744, "length": 171, "hash": "b3350684ab6908b908c863edefbfbd82"}
{"id": "mcs500_programming_manual_1745", "text": "if there is no error.", "source": "mcs500_programming_manual", "chunk_index": 1745, "length": 21, "hash": "c87f5e5b376c39db9587f7987784510e"}
{"id": "mcs500_programming_manual_1746", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1746, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1747", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1747, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1748", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1748, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1749", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1749, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1750", "text": "The MotionStatus section in the cyclic input reports the robot\u2019s motion status (similar to\nGetStatusRobot (page 277)).", "source": "mcs500_programming_manual", "chunk_index": 1750, "length": 118, "hash": "54203c04e27d9ba0ada2204281208dba"}
{"id": "mcs500_programming_manual_1751", "text": "section in the cyclic input reports the robot\u2019s motion status (similar to", "source": "mcs500_programming_manual", "chunk_index": 1751, "length": 73, "hash": "040f37fd364f80a1835e1e6bd9ab4337"}
{"id": "mcs500_programming_manual_1752", "text": "Table 14: MotionStatus (Offset 4, size 12, EtherCAT index 6015h)", "source": "mcs500_programming_manual", "chunk_index": 1752, "length": 64, "hash": "d45ec09ebfd080b3486060faf02417da"}
{"id": "mcs500_programming_manual_1753", "text": "(Offset 4, size 12, EtherCAT index 6015h)", "source": "mcs500_programming_manual", "chunk_index": 1753, "length": 41, "hash": "062200cbd0913632b55a5b9686450193"}
{"id": "mcs500_programming_manual_1754", "text": "CheckpointReachedInteger", "source": "mcs500_programming_manual", "chunk_index": 1754, "length": 24, "hash": "db89e1a35963473cab6a6e48bb2c7243"}
{"id": "mcs500_programming_manual_1755", "text": "Indicates the last checkpoint number reached\n(GetCheckpoint (page 220)).", "source": "mcs500_programming_manual", "chunk_index": 1755, "length": 72, "hash": "5f4d89e37462094b50c158aa7cc01c1e"}
{"id": "mcs500_programming_manual_1756", "text": "Indicates the last checkpoint number reached\n(", "source": "mcs500_programming_manual", "chunk_index": 1756, "length": 46, "hash": "63332abd344af4e6f9e3b0bcf4e30914"}
{"id": "mcs500_programming_manual_1757", "text": "The value remains the same until another checkpoint\nis reached.", "source": "mcs500_programming_manual", "chunk_index": 1757, "length": 63, "hash": "4a581cdbadf16cf8388b6038e6d7c611"}
{"id": "mcs500_programming_manual_1758", "text": "The value remains the same until another checkpoint\nis reached.", "source": "mcs500_programming_manual", "chunk_index": 1758, "length": 63, "hash": "4a581cdbadf16cf8388b6038e6d7c611"}
{"id": "mcs500_programming_manual_1759", "text": "Indicates the last checkpoint number discarded\n(GetCheckpointDiscarded (page 221)).", "source": "mcs500_programming_manual", "chunk_index": 1759, "length": 83, "hash": "f1c182216d51cd362451aa8eda958a71"}
{"id": "mcs500_programming_manual_1760", "text": "Indicates the last checkpoint number discarded\n(", "source": "mcs500_programming_manual", "chunk_index": 1760, "length": 48, "hash": "c02910a053e427298102f6cf66771285"}
{"id": "mcs500_programming_manual_1761", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 1761, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_1762", "text": "The value remains unchanged until another checkpoint\nis discarded.", "source": "mcs500_programming_manual", "chunk_index": 1762, "length": 66, "hash": "6f83e0c3efcf190864b2a1ab30841a4f"}
{"id": "mcs500_programming_manual_1763", "text": "The value remains unchanged until another checkpoint\nis discarded.", "source": "mcs500_programming_manual", "chunk_index": 1763, "length": 66, "hash": "6f83e0c3efcf190864b2a1ab30841a4f"}
{"id": "mcs500_programming_manual_1764", "text": "Acknowledges the MoveID of the last command the\nrobot received (Motion control (page 47)).", "source": "mcs500_programming_manual", "chunk_index": 1764, "length": 90, "hash": "ea12c038763df44c4c4c6d7958e1b564"}
{"id": "mcs500_programming_manual_1765", "text": "of the last command the", "source": "mcs500_programming_manual", "chunk_index": 1765, "length": 23, "hash": "0c2bed039f23e73d3263c44ed8167f9c"}
{"id": "mcs500_programming_manual_1766", "text": "For details, refer to Using motion-related commands\n(page 40).", "source": "mcs500_programming_manual", "chunk_index": 1766, "length": 62, "hash": "e29f5736eb9c27f4c4bd248cfc9b918e"}
{"id": "mcs500_programming_manual_1767", "text": "For details, refer to", "source": "mcs500_programming_manual", "chunk_index": 1767, "length": 21, "hash": "3af9dbd09fc317ce13a919a093461dda"}
{"id": "mcs500_programming_manual_1768", "text": "Using motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 1768, "length": 29, "hash": "520773a10076d6a4f70400ce564dc355"}
{"id": "mcs500_programming_manual_1769", "text": "The number of commands that can be added to the\nrobot\u2019s motion queue at any time (the maximum is\n13,000).", "source": "mcs500_programming_manual", "chunk_index": 1769, "length": 105, "hash": "10fe91ea22099042d9033a955e6b45b4"}
{"id": "mcs500_programming_manual_1770", "text": "The number of commands that can be added to the\nrobot\u2019s motion queue at any time (the maximum is\n13,000).", "source": "mcs500_programming_manual", "chunk_index": 1770, "length": 105, "hash": "10fe91ea22099042d9033a955e6b45b4"}
{"id": "mcs500_programming_manual_1771", "text": "If 0 (too many commands sent), subsequent commands\nwill be ignored.", "source": "mcs500_programming_manual", "chunk_index": 1771, "length": 67, "hash": "5b3d971e3c14d7ba75d01524ef24ced5"}
{"id": "mcs500_programming_manual_1772", "text": "If 0 (too many commands sent), subsequent commands\nwill be ignored.", "source": "mcs500_programming_manual", "chunk_index": 1772, "length": 67, "hash": "5b3d971e3c14d7ba75d01524ef24ced5"}
{"id": "mcs500_programming_manual_1773", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1773, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1774", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1774, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1775", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1775, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1776", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1776, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1777", "text": "Table 14 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1777, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "mcs500_programming_manual_1778", "text": "Table 14 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1778, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "mcs500_programming_manual_1779", "text": "Indicates whether motion is paused.", "source": "mcs500_programming_manual", "chunk_index": 1779, "length": 35, "hash": "c3bef2e3bc6f7d961a6b2e1c8a741ccd"}
{"id": "mcs500_programming_manual_1780", "text": "Indicates whether motion is paused.", "source": "mcs500_programming_manual", "chunk_index": 1780, "length": 35, "hash": "c3bef2e3bc6f7d961a6b2e1c8a741ccd"}
{"id": "mcs500_programming_manual_1781", "text": "This bit stays set (and the robot remains paused) until\nmotion is resumed with Motion control (page 47) bit\nResumeMotion.", "source": "mcs500_programming_manual", "chunk_index": 1781, "length": 121, "hash": "1de182a779d309120f63bc84ebf9746d"}
{"id": "mcs500_programming_manual_1782", "text": "This bit stays set (and the robot remains paused) until\nmotion is resumed with", "source": "mcs500_programming_manual", "chunk_index": 1782, "length": 78, "hash": "26a1b8f33dd38dd099804df96e80d52f"}
{"id": "mcs500_programming_manual_1783", "text": "The End of Block (EOB) bit is set when the robot is not\nmoving and there are no motion commands left in the\nqueue.", "source": "mcs500_programming_manual", "chunk_index": 1783, "length": 114, "hash": "287184951cc588ee41b7995cb0220dc2"}
{"id": "mcs500_programming_manual_1784", "text": ") bit is set when the robot is not\nmoving and there are no motion commands left in the\nqueue.", "source": "mcs500_programming_manual", "chunk_index": 1784, "length": 93, "hash": "14e9a71ddd6537762e253e04a53746cf"}
{"id": "mcs500_programming_manual_1785", "text": "Note that the EOB bit may occasionally be set before all\ncommands are completed due to network or\nprocessing delays.", "source": "mcs500_programming_manual", "chunk_index": 1785, "length": 116, "hash": "f38d1b3a5ae8f94f98dfbffa462f7833"}
{"id": "mcs500_programming_manual_1786", "text": "bit may occasionally be set before all\ncommands are completed due to network or\nprocessing delays.", "source": "mcs500_programming_manual", "chunk_index": 1786, "length": 98, "hash": "6ceb49d91978c33e2f53f3d928d70412"}
{"id": "mcs500_programming_manual_1787", "text": "Therefore, don\u2019t rely on this flag to determine when all\nmovements have finished. Use a checkpoint instead\n(SetCheckpoint (page 145)).", "source": "mcs500_programming_manual", "chunk_index": 1787, "length": 134, "hash": "87c280cf83eb9635e9c9313f8d57c9ba"}
{"id": "mcs500_programming_manual_1788", "text": "Therefore, don\u2019t rely on this flag to determine when all\nmovements have finished. Use a checkpoint instead", "source": "mcs500_programming_manual", "chunk_index": 1788, "length": 106, "hash": "db5d8fe7fd0a0711b49b540936a277f8"}
{"id": "mcs500_programming_manual_1789", "text": "The End of Motion (EOM) bit is set when the robot is not\nmoving.", "source": "mcs500_programming_manual", "chunk_index": 1789, "length": 64, "hash": "e0fa4a400507992fec5125bdfc4edda4"}
{"id": "mcs500_programming_manual_1790", "text": ") bit is set when the robot is not\nmoving.", "source": "mcs500_programming_manual", "chunk_index": 1790, "length": 42, "hash": "d64a6483d67a0f4a37c3095dce63ea9c"}
{"id": "mcs500_programming_manual_1791", "text": "Note that the EOM bit may occasionally be set between\ntwo consecutive motion commands.", "source": "mcs500_programming_manual", "chunk_index": 1791, "length": 86, "hash": "f21b8c66fed56f17e4afe416876ecfad"}
{"id": "mcs500_programming_manual_1792", "text": "bit may occasionally be set between\ntwo consecutive motion commands.", "source": "mcs500_programming_manual", "chunk_index": 1792, "length": 68, "hash": "7a27c3c33b7e6571c2c07ed645d86708"}
{"id": "mcs500_programming_manual_1793", "text": "Therefore, do not rely on this flag to determine when\nall movements have finished. Use a checkpoint instead\n(SetCheckpoint (page 145)).", "source": "mcs500_programming_manual", "chunk_index": 1793, "length": 135, "hash": "0b848fcfed1ba24487a3ac667fe95b79"}
{"id": "mcs500_programming_manual_1794", "text": "Therefore, do not rely on this flag to determine when", "source": "mcs500_programming_manual", "chunk_index": 1794, "length": 53, "hash": "7e92c4892ff8fea0d6f4869b92258b0f"}
{"id": "mcs500_programming_manual_1795", "text": "all movements have finished. Use a checkpoint instead\n(", "source": "mcs500_programming_manual", "chunk_index": 1795, "length": 55, "hash": "3a71210e94dacf4dd49b3fca91d3d2cd"}
{"id": "mcs500_programming_manual_1796", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1796, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1797", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1797, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1798", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1798, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1799", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1799, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1800", "text": "Table 14 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1800, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "mcs500_programming_manual_1801", "text": "Table 14 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1801, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "mcs500_programming_manual_1802", "text": "ExcessiveTorque Bool", "source": "mcs500_programming_manual", "chunk_index": 1802, "length": 20, "hash": "96bcb38e6b794407b9d050076e4b0112"}
{"id": "mcs500_programming_manual_1803", "text": "Indicates whether the motion queue is cleared. If the\nqueue is cleared, the robot is not moving.", "source": "mcs500_programming_manual", "chunk_index": 1803, "length": 96, "hash": "1e598c3b221c340328c05581c0560744"}
{"id": "mcs500_programming_manual_1804", "text": "Indicates whether the motion queue is cleared. If the\nqueue is cleared, the robot is not moving.", "source": "mcs500_programming_manual", "chunk_index": 1804, "length": 96, "hash": "1e598c3b221c340328c05581c0560744"}
{"id": "mcs500_programming_manual_1805", "text": "This bit remains set (and the robot remains paused)\nwhen the motion queue is cleared due to the\nClearMotion control bit, robot deactivation, or a safety\nsignal.", "source": "mcs500_programming_manual", "chunk_index": 1805, "length": 160, "hash": "32417eeed4df58492a8681dbb20c7457"}
{"id": "mcs500_programming_manual_1806", "text": "This bit remains set (and the robot remains paused)\nwhen the motion queue is cleared due to the", "source": "mcs500_programming_manual", "chunk_index": 1806, "length": 95, "hash": "8e8fd6eaf5d6cdfec1a6e2d924902d9b"}
{"id": "mcs500_programming_manual_1807", "text": "control bit, robot deactivation, or a safety\nsignal.", "source": "mcs500_programming_manual", "chunk_index": 1807, "length": 52, "hash": "dfaf25539c52cd3b7f6b7c0192addf2b"}
{"id": "mcs500_programming_manual_1808", "text": "It remains set until motion is resumed with Motion\ncontrol (page 47) bit ResumeMotion (if the robot is still\nactivated) or the robot is reactivated (if it was\ndeactivated).", "source": "mcs500_programming_manual", "chunk_index": 1808, "length": 172, "hash": "6bc33959c413cb3483811a622bb5c13a"}
{"id": "mcs500_programming_manual_1809", "text": "It remains set until motion is resumed with", "source": "mcs500_programming_manual", "chunk_index": 1809, "length": 43, "hash": "78b2ff61325486bbd51c0340638161fe"}
{"id": "mcs500_programming_manual_1810", "text": "(if the robot is still\nactivated) or the robot is reactivated (if it was\ndeactivated).", "source": "mcs500_programming_manual", "chunk_index": 1810, "length": 86, "hash": "b3c6a791ceac5391035d67a9589a55d9"}
{"id": "mcs500_programming_manual_1811", "text": "Indicates whether the P-Stop 2 safety signal is set.", "source": "mcs500_programming_manual", "chunk_index": 1811, "length": 52, "hash": "25f4e9255bf1187f759151f1985ef5dd"}
{"id": "mcs500_programming_manual_1812", "text": "Indicates whether the P-Stop 2 safety signal is set.", "source": "mcs500_programming_manual", "chunk_index": 1812, "length": 52, "hash": "25f4e9255bf1187f759151f1985ef5dd"}
{"id": "mcs500_programming_manual_1813", "text": "Deprecated; use the PStop2 bit from SafetyStatus\ninstead.", "source": "mcs500_programming_manual", "chunk_index": 1813, "length": 57, "hash": "03117ac81ba5f6d491d7a44a387a47bc"}
{"id": "mcs500_programming_manual_1814", "text": "Indicates whether a joint torque is exceeding the\ncorresponding user-defined torque limit\n(SetTorqueLimits (page 162), GetTorqueLimitsStatus\n(page 278)).", "source": "mcs500_programming_manual", "chunk_index": 1814, "length": 153, "hash": "8d3471960ad1316458f77a1df913c6fe"}
{"id": "mcs500_programming_manual_1815", "text": "Indicates whether a joint torque is exceeding the\ncorresponding user-defined torque limit\n(", "source": "mcs500_programming_manual", "chunk_index": 1815, "length": 91, "hash": "dfe5147d8cd31350e0abf6f86f2cfa4b"}
{"id": "mcs500_programming_manual_1816", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 1816, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_1817", "text": "Reserved for future use.", "source": "mcs500_programming_manual", "chunk_index": 1817, "length": 24, "hash": "933c55bd5b643b15e2a23cdbacbc4c95"}
{"id": "mcs500_programming_manual_1818", "text": "Reserved for future use.", "source": "mcs500_programming_manual", "chunk_index": 1818, "length": 24, "hash": "933c55bd5b643b15e2a23cdbacbc4c95"}
{"id": "mcs500_programming_manual_1819", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1819, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1820", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 1820, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_1821", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1821, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1822", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1822, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1823", "text": "OfflineProgramIDInteger", "source": "mcs500_programming_manual", "chunk_index": 1823, "length": 23, "hash": "8326a3e9ae2a78365929cc9a3dd57cfd"}
{"id": "mcs500_programming_manual_1824", "text": "Table 14 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1824, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "mcs500_programming_manual_1825", "text": "Table 14 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 1825, "length": 39, "hash": "5711ca43b4f03fb5bb20269f7d3c2c3e"}
{"id": "mcs500_programming_manual_1826", "text": "ID of the offline program currently running; 0 if none\n(StartProgram (page 203)).", "source": "mcs500_programming_manual", "chunk_index": 1826, "length": 81, "hash": "85b1ddafda28ef15efbb3507425e603d"}
{"id": "mcs500_programming_manual_1827", "text": "ID of the offline program currently running; 0 if none\n(", "source": "mcs500_programming_manual", "chunk_index": 1827, "length": 56, "hash": "2afdb95a799f75808ef0ddcb72325fce"}
{"id": "mcs500_programming_manual_1828", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1828, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1829", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1829, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1830", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1830, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1831", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1831, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1832", "text": "The TargetJointSet section in the cyclic input reports the robot\u2019s real-time calculated joint\nposition (similar to GetRtTargetJointPos (page 270)).", "source": "mcs500_programming_manual", "chunk_index": 1832, "length": 147, "hash": "7c790ece4a966b2f7aecbbea1054f2d9"}
{"id": "mcs500_programming_manual_1833", "text": "section in the cyclic input reports the robot\u2019s real-time calculated joint\nposition (similar to", "source": "mcs500_programming_manual", "chunk_index": 1833, "length": 95, "hash": "429bce058b7118a69bab8c0258025502"}
{"id": "mcs500_programming_manual_1834", "text": "Table 15: TargetJointSet (Offset 16, size 24, EtherCAT index 6030h)", "source": "mcs500_programming_manual", "chunk_index": 1834, "length": 67, "hash": "e3f78177abb6c1a63e9601e097923b93"}
{"id": "mcs500_programming_manual_1835", "text": "(Offset 16, size 24, EtherCAT index 6030h)", "source": "mcs500_programming_manual", "chunk_index": 1835, "length": 42, "hash": "c9a2f87b2cb404592be6bb644e03be7c"}
{"id": "mcs500_programming_manual_1836", "text": "Real-time calculated target position for joint 1, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1836, "length": 55, "hash": "986863f9d6846f5051acb9b2ea324d06"}
{"id": "mcs500_programming_manual_1837", "text": "Real-time calculated target position for joint 1, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1837, "length": 55, "hash": "986863f9d6846f5051acb9b2ea324d06"}
{"id": "mcs500_programming_manual_1838", "text": "Real-time calculated target position for joint 2, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1838, "length": 55, "hash": "06e4aa03e3d23a9eafc929841bd77da0"}
{"id": "mcs500_programming_manual_1839", "text": "Real-time calculated target position for joint 2, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1839, "length": 55, "hash": "06e4aa03e3d23a9eafc929841bd77da0"}
{"id": "mcs500_programming_manual_1840", "text": "Real-time calculated target position for joint 3, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1840, "length": 56, "hash": "da83f06488d4f4bb66aa80af7b4f20a4"}
{"id": "mcs500_programming_manual_1841", "text": "Real-time calculated target position for joint 3, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1841, "length": 56, "hash": "da83f06488d4f4bb66aa80af7b4f20a4"}
{"id": "mcs500_programming_manual_1842", "text": "Real-time calculated target position for joint 4, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1842, "length": 55, "hash": "e1c410e76d865bd4485d375050fa5860"}
{"id": "mcs500_programming_manual_1843", "text": "Real-time calculated target position for joint 4, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1843, "length": 55, "hash": "e1c410e76d865bd4485d375050fa5860"}
{"id": "mcs500_programming_manual_1844", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1844, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1845", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1845, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1846", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1846, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1847", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1847, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1848", "text": "Target end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1848, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "mcs500_programming_manual_1849", "text": "Target end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1849, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "mcs500_programming_manual_1850", "text": "The TargetEndEffectorPose section in the cyclic input reports the robot\u2019s real-time\ncalculated Cartesian position of the origin of the TRF with respect to the WRF (similar to\nGetRtTargetCartPos (page 266)).", "source": "mcs500_programming_manual", "chunk_index": 1850, "length": 206, "hash": "623de93106abdb27bfe66cd963d21f40"}
{"id": "mcs500_programming_manual_1851", "text": "TargetEndEffectorPose", "source": "mcs500_programming_manual", "chunk_index": 1851, "length": 21, "hash": "196d3a576601ac16b2753c86a3b70da3"}
{"id": "mcs500_programming_manual_1852", "text": "section in the cyclic input reports the robot\u2019s real-time\ncalculated Cartesian position of the origin of the TRF with respect to the WRF (similar to", "source": "mcs500_programming_manual", "chunk_index": 1852, "length": 148, "hash": "b7447c69376d22d65c44bc0d0be88d2f"}
{"id": "mcs500_programming_manual_1853", "text": "Table 16: TargetEndEffectorPose (Offset 40, size 24, EtherCAT index 6031h)", "source": "mcs500_programming_manual", "chunk_index": 1853, "length": 74, "hash": "f837702dd382144122e34b4614a50b87"}
{"id": "mcs500_programming_manual_1854", "text": "TargetEndEffectorPose", "source": "mcs500_programming_manual", "chunk_index": 1854, "length": 21, "hash": "196d3a576601ac16b2753c86a3b70da3"}
{"id": "mcs500_programming_manual_1855", "text": "(Offset 40, size 24, EtherCAT index 6031h)", "source": "mcs500_programming_manual", "chunk_index": 1855, "length": 42, "hash": "63766af61dadad666418982e482bfad9"}
{"id": "mcs500_programming_manual_1856", "text": "X coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1856, "length": 69, "hash": "3643488b8a0145d3c88bd5abd7eb0067"}
{"id": "mcs500_programming_manual_1857", "text": "X coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1857, "length": 69, "hash": "3643488b8a0145d3c88bd5abd7eb0067"}
{"id": "mcs500_programming_manual_1858", "text": "Y coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1858, "length": 69, "hash": "e9a870d8ee11ef72d0dca52903f6cdab"}
{"id": "mcs500_programming_manual_1859", "text": "Y coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1859, "length": 69, "hash": "e9a870d8ee11ef72d0dca52903f6cdab"}
{"id": "mcs500_programming_manual_1860", "text": "Z coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1860, "length": 69, "hash": "876e54ea33efd13fd83db13d93f24fd9"}
{"id": "mcs500_programming_manual_1861", "text": "Z coordinate of the origin of the TRF with respect to\nthe WRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1861, "length": 69, "hash": "876e54ea33efd13fd83db13d93f24fd9"}
{"id": "mcs500_programming_manual_1862", "text": "\u03b1 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1862, "length": 84, "hash": "49ff6ba9758f5c0317321a383ecb02bb"}
{"id": "mcs500_programming_manual_1863", "text": "\u03b1 Euler angle representing the orientation of the TRF", "source": "mcs500_programming_manual", "chunk_index": 1863, "length": 53, "hash": "85353d321887f3a79ab40b66f09a89e4"}
{"id": "mcs500_programming_manual_1864", "text": "with respect to the WRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1864, "length": 30, "hash": "aa61a53f49873049a8b1c49c2f127f78"}
{"id": "mcs500_programming_manual_1865", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1865, "length": 84, "hash": "cce7124cd013b519865409ecfd210fa4"}
{"id": "mcs500_programming_manual_1866", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1866, "length": 84, "hash": "cce7124cd013b519865409ecfd210fa4"}
{"id": "mcs500_programming_manual_1867", "text": "\u03b3 Euler angle representing the orientation of the TRF\nwith respect to the WRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1867, "length": 84, "hash": "6b7f8a86ecfb68cc559650f929fb4985"}
{"id": "mcs500_programming_manual_1868", "text": "\u03b3 Euler angle representing the orientation of the TRF", "source": "mcs500_programming_manual", "chunk_index": 1868, "length": 53, "hash": "6f4f4b08799eeeca32ab6fc21929d23d"}
{"id": "mcs500_programming_manual_1869", "text": "with respect to the WRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1869, "length": 30, "hash": "aa61a53f49873049a8b1c49c2f127f78"}
{"id": "mcs500_programming_manual_1870", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1870, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1871", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1871, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1872", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1872, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1873", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1873, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1874", "text": "Target configuration", "source": "mcs500_programming_manual", "chunk_index": 1874, "length": 20, "hash": "b4b42d35279073d3c644c40f5e5e8178"}
{"id": "mcs500_programming_manual_1875", "text": "Target configuration", "source": "mcs500_programming_manual", "chunk_index": 1875, "length": 20, "hash": "b4b42d35279073d3c644c40f5e5e8178"}
{"id": "mcs500_programming_manual_1876", "text": "The TargetConfiguration section in the cyclic input reports robot real-time posture and\nturn configurations that correspond to the calculated joint set (GetRtTargetConf (page 268),\nGetRtTargetConfTurn (page 269)). For more details, see Section 3.", "source": "mcs500_programming_manual", "chunk_index": 1876, "length": 246, "hash": "65357b8340fc917fd1251944781a63a4"}
{"id": "mcs500_programming_manual_1877", "text": "section in the cyclic input reports robot real-time posture and\nturn configurations that correspond to the calculated joint set (", "source": "mcs500_programming_manual", "chunk_index": 1877, "length": 129, "hash": "7b1062c81c6de752733a2f69717d67fb"}
{"id": "mcs500_programming_manual_1878", "text": "(page 269)). For more details, see Section 3.", "source": "mcs500_programming_manual", "chunk_index": 1878, "length": 45, "hash": "20dc0e9b8e3729ac5710c28fa7b70300"}
{"id": "mcs500_programming_manual_1879", "text": "Table 17: TargetConfiguration (Offset 64, size 4, EtherCAT index 6046h)", "source": "mcs500_programming_manual", "chunk_index": 1879, "length": 71, "hash": "2e6f7de74dcb12ce11c051a0f023ef0e"}
{"id": "mcs500_programming_manual_1880", "text": "(Offset 64, size 4, EtherCAT index 6046h)", "source": "mcs500_programming_manual", "chunk_index": 1880, "length": 41, "hash": "4e7a78329295320fcb33940c46fe62b4"}
{"id": "mcs500_programming_manual_1881", "text": "(Not used on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1881, "length": 24, "hash": "92785e5f2bc67e4c079eaddd4dad4ca7"}
{"id": "mcs500_programming_manual_1882", "text": "(Not used on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1882, "length": 24, "hash": "92785e5f2bc67e4c079eaddd4dad4ca7"}
{"id": "mcs500_programming_manual_1883", "text": "Real-time elbow posture configuration corresponding\nto the calculated joint position.", "source": "mcs500_programming_manual", "chunk_index": 1883, "length": 85, "hash": "5d9c854b4b7ec129d2d7320333a0c235"}
{"id": "mcs500_programming_manual_1884", "text": "Real-time elbow posture configuration corresponding\nto the calculated joint position.", "source": "mcs500_programming_manual", "chunk_index": 1884, "length": 85, "hash": "5d9c854b4b7ec129d2d7320333a0c235"}
{"id": "mcs500_programming_manual_1885", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the elbow singularity.", "source": "mcs500_programming_manual", "chunk_index": 1885, "length": 94, "hash": "80247496d896c3ece9d16cec8102c216"}
{"id": "mcs500_programming_manual_1886", "text": "The value is typically \u22121 or 1 but may also be 0 when\nthe robot is near the elbow singularity.", "source": "mcs500_programming_manual", "chunk_index": 1886, "length": 94, "hash": "80247496d896c3ece9d16cec8102c216"}
{"id": "mcs500_programming_manual_1887", "text": "(Not used on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1887, "length": 24, "hash": "92785e5f2bc67e4c079eaddd4dad4ca7"}
{"id": "mcs500_programming_manual_1888", "text": "(Not used on this robot)", "source": "mcs500_programming_manual", "chunk_index": 1888, "length": 24, "hash": "92785e5f2bc67e4c079eaddd4dad4ca7"}
{"id": "mcs500_programming_manual_1889", "text": "Real-time turn configuration for the last joint.", "source": "mcs500_programming_manual", "chunk_index": 1889, "length": 48, "hash": "22b5ea62b821c59536b011b053ea3653"}
{"id": "mcs500_programming_manual_1890", "text": "Real-time turn configuration for the last joint.", "source": "mcs500_programming_manual", "chunk_index": 1890, "length": 48, "hash": "22b5ea62b821c59536b011b053ea3653"}
{"id": "mcs500_programming_manual_1891", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1891, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1892", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1892, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1893", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1893, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1894", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1894, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1895", "text": "The TargetWrf section in the cyclic input reports the WRF (with respect of the BRF) used for\nreporting the current end-effector pose (Target end-effector pose (page 77)), similar to the\nGetRtWrf (page 274) and GetWrf (page 253) command.", "source": "mcs500_programming_manual", "chunk_index": 1895, "length": 236, "hash": "53603646dfaca98b8d6bde77207f4647"}
{"id": "mcs500_programming_manual_1896", "text": "section in the cyclic input reports the WRF (with respect of the BRF) used for\nreporting the current end-effector pose (", "source": "mcs500_programming_manual", "chunk_index": 1896, "length": 120, "hash": "46e6080cb89dc63cc1fcf69fd694cf56"}
{"id": "mcs500_programming_manual_1897", "text": "Target end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1897, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "mcs500_programming_manual_1898", "text": "(page 77)), similar to the", "source": "mcs500_programming_manual", "chunk_index": 1898, "length": 26, "hash": "6d3fa3384857100923cf0c5f1e0422b4"}
{"id": "mcs500_programming_manual_1899", "text": "Table 18: TargetWrf (Offset 68, size 24, EtherCAT index 6050h)", "source": "mcs500_programming_manual", "chunk_index": 1899, "length": 62, "hash": "94d26ac79bdaf0262c124ff185d312bd"}
{"id": "mcs500_programming_manual_1900", "text": "(Offset 68, size 24, EtherCAT index 6050h)", "source": "mcs500_programming_manual", "chunk_index": 1900, "length": 42, "hash": "2908abed10ab1747ed4278648ea46523"}
{"id": "mcs500_programming_manual_1901", "text": "X coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1901, "length": 69, "hash": "6792ec01f375968f8fc9f31aa023d9a0"}
{"id": "mcs500_programming_manual_1902", "text": "X coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1902, "length": 69, "hash": "6792ec01f375968f8fc9f31aa023d9a0"}
{"id": "mcs500_programming_manual_1903", "text": "Y coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1903, "length": 69, "hash": "593edc33e42a0bdc604b05b2af84ebe5"}
{"id": "mcs500_programming_manual_1904", "text": "Y coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1904, "length": 69, "hash": "593edc33e42a0bdc604b05b2af84ebe5"}
{"id": "mcs500_programming_manual_1905", "text": "Z coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1905, "length": 69, "hash": "e5258f739fb0900c1e6d5346a59c4aef"}
{"id": "mcs500_programming_manual_1906", "text": "Z coordinate of the origin of the WRF with respect to\nthe BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1906, "length": 69, "hash": "e5258f739fb0900c1e6d5346a59c4aef"}
{"id": "mcs500_programming_manual_1907", "text": "\u03b1 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1907, "length": 84, "hash": "c7dfaef531237172774b767b73eef73e"}
{"id": "mcs500_programming_manual_1908", "text": "\u03b1 Euler angle representing the orientation of the WRF", "source": "mcs500_programming_manual", "chunk_index": 1908, "length": 53, "hash": "7e86bfabd34b34906c03196c4cdc43d8"}
{"id": "mcs500_programming_manual_1909", "text": "with respect to the BRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1909, "length": 30, "hash": "eaed98cac65a74ee86369eb67959025e"}
{"id": "mcs500_programming_manual_1910", "text": "\u03b2 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1910, "length": 84, "hash": "340f0be7c75e08504386bf4f85c18119"}
{"id": "mcs500_programming_manual_1911", "text": "\u03b2 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1911, "length": 84, "hash": "340f0be7c75e08504386bf4f85c18119"}
{"id": "mcs500_programming_manual_1912", "text": "\u03b3 Euler angle representing the orientation of the WRF\nwith respect to the BRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1912, "length": 84, "hash": "ba607ff8a8899c7b1100d3cb45837602"}
{"id": "mcs500_programming_manual_1913", "text": "\u03b3 Euler angle representing the orientation of the WRF", "source": "mcs500_programming_manual", "chunk_index": 1913, "length": 53, "hash": "08090b120aee6223ee31c8188d96d4fb"}
{"id": "mcs500_programming_manual_1914", "text": "with respect to the BRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1914, "length": 30, "hash": "eaed98cac65a74ee86369eb67959025e"}
{"id": "mcs500_programming_manual_1915", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1915, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1916", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1916, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1917", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1917, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1918", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1918, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1919", "text": "The TargetTrf section in the cyclic input reports the TRF (with respect of the FRF) used for\nreporting the current end-effector pose (Target end-effector pose (page 77)), similar to the\nGetRtTrf (page 273) and GetTrf (page 251) commands.", "source": "mcs500_programming_manual", "chunk_index": 1919, "length": 237, "hash": "22b48e043531b30a9436a822ee408276"}
{"id": "mcs500_programming_manual_1920", "text": "section in the cyclic input reports the TRF (with respect of the FRF) used for\nreporting the current end-effector pose (", "source": "mcs500_programming_manual", "chunk_index": 1920, "length": 120, "hash": "80c8256689d6f5de9707644b26530167"}
{"id": "mcs500_programming_manual_1921", "text": "Target end-effector pose", "source": "mcs500_programming_manual", "chunk_index": 1921, "length": 24, "hash": "3e1267595c930fd779df594197f3e1a7"}
{"id": "mcs500_programming_manual_1922", "text": "(page 77)), similar to the", "source": "mcs500_programming_manual", "chunk_index": 1922, "length": 26, "hash": "6d3fa3384857100923cf0c5f1e0422b4"}
{"id": "mcs500_programming_manual_1923", "text": "(page 251) commands.", "source": "mcs500_programming_manual", "chunk_index": 1923, "length": 20, "hash": "062d4d044952cc6c0d1a93660b062824"}
{"id": "mcs500_programming_manual_1924", "text": "Table 19: TargetTRF (Offset 92, size 24, EtherCAT index 6051h)", "source": "mcs500_programming_manual", "chunk_index": 1924, "length": 62, "hash": "eabe987629b91435edff465c37d802b2"}
{"id": "mcs500_programming_manual_1925", "text": "(Offset 92, size 24, EtherCAT index 6051h)", "source": "mcs500_programming_manual", "chunk_index": 1925, "length": 42, "hash": "8471d9d60f378796f86a24563eb9bd80"}
{"id": "mcs500_programming_manual_1926", "text": "X coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1926, "length": 69, "hash": "f511792ef3e5d596d845765edb5d72a9"}
{"id": "mcs500_programming_manual_1927", "text": "X coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1927, "length": 69, "hash": "f511792ef3e5d596d845765edb5d72a9"}
{"id": "mcs500_programming_manual_1928", "text": "Y coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1928, "length": 69, "hash": "970e20caaede5aee38e3e811410c4a7b"}
{"id": "mcs500_programming_manual_1929", "text": "Y coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1929, "length": 69, "hash": "970e20caaede5aee38e3e811410c4a7b"}
{"id": "mcs500_programming_manual_1930", "text": "Z coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1930, "length": 69, "hash": "189e44b8d25f9ef8d0c35836b2131abf"}
{"id": "mcs500_programming_manual_1931", "text": "Z coordinate of the origin of the TRF with respect to\nthe FRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 1931, "length": 69, "hash": "189e44b8d25f9ef8d0c35836b2131abf"}
{"id": "mcs500_programming_manual_1932", "text": "\u03b1 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1932, "length": 84, "hash": "1e128192713ce2d884e5b3eb9ab887ab"}
{"id": "mcs500_programming_manual_1933", "text": "\u03b1 Euler angle representing the orientation of the TRF", "source": "mcs500_programming_manual", "chunk_index": 1933, "length": 53, "hash": "85353d321887f3a79ab40b66f09a89e4"}
{"id": "mcs500_programming_manual_1934", "text": "with respect to the FRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1934, "length": 30, "hash": "4ef0e4b77f04f731761bddaca22f2ab4"}
{"id": "mcs500_programming_manual_1935", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1935, "length": 84, "hash": "a08b1b410dc7e0ea449eb47aec3e5edc"}
{"id": "mcs500_programming_manual_1936", "text": "\u03b2 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1936, "length": 84, "hash": "a08b1b410dc7e0ea449eb47aec3e5edc"}
{"id": "mcs500_programming_manual_1937", "text": "\u03b3 Euler angle representing the orientation of the TRF\nwith respect to the FRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1937, "length": 84, "hash": "1a6957e88ec730f7207e4e3791f1abb8"}
{"id": "mcs500_programming_manual_1938", "text": "\u03b3 Euler angle representing the orientation of the TRF", "source": "mcs500_programming_manual", "chunk_index": 1938, "length": 53, "hash": "6f4f4b08799eeeca32ab6fc21929d23d"}
{"id": "mcs500_programming_manual_1939", "text": "with respect to the FRF, in \u00b0.", "source": "mcs500_programming_manual", "chunk_index": 1939, "length": 30, "hash": "4ef0e4b77f04f731761bddaca22f2ab4"}
{"id": "mcs500_programming_manual_1940", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1940, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1941", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1941, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1942", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1942, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1943", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1943, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1944", "text": "The RobotTimestamp section in the cyclic input reports a precise, monotonic robot timestamp\nassociated with the cyclic data (similar to the command GetRtc (page 275)).", "source": "mcs500_programming_manual", "chunk_index": 1944, "length": 167, "hash": "a8ac848c22a3cd98e83a2e1060dc30f4"}
{"id": "mcs500_programming_manual_1945", "text": "section in the cyclic input reports a precise, monotonic robot timestamp\nassociated with the cyclic data (similar to the command", "source": "mcs500_programming_manual", "chunk_index": 1945, "length": 128, "hash": "8a7014108b560e68f66f650021139cc9"}
{"id": "mcs500_programming_manual_1946", "text": "Table 20: RobotTimestamp (Offset 116, size 12, EtherCAT index 6060h)", "source": "mcs500_programming_manual", "chunk_index": 1946, "length": 68, "hash": "f691cd7540d941d0d285fde82de38f98"}
{"id": "mcs500_programming_manual_1947", "text": "(Offset 116, size 12, EtherCAT index 6060h)", "source": "mcs500_programming_manual", "chunk_index": 1947, "length": 43, "hash": "d523229873da611149ab153404f0712c"}
{"id": "mcs500_programming_manual_1948", "text": "DynamicDataCyclesInteger", "source": "mcs500_programming_manual", "chunk_index": 1948, "length": 24, "hash": "db2b1e645f0a823370d18b75a16b61e7"}
{"id": "mcs500_programming_manual_1949", "text": "Robot\u2019s monotonic timestamp in seconds, based on an\narbitrary reference.\nRobot\u2019s monotonic timestamp in microseconds, within\nthe current second.", "source": "mcs500_programming_manual", "chunk_index": 1949, "length": 144, "hash": "481bab38ef4242f7dc96609234570ec7"}
{"id": "mcs500_programming_manual_1950", "text": "Robot\u2019s monotonic timestamp in seconds, based on an\narbitrary reference.\nRobot\u2019s monotonic timestamp in microseconds, within\nthe current second.", "source": "mcs500_programming_manual", "chunk_index": 1950, "length": 144, "hash": "481bab38ef4242f7dc96609234570ec7"}
{"id": "mcs500_programming_manual_1951", "text": "Incremented each time the robot cycles through all\navailable dynamic data to report.", "source": "mcs500_programming_manual", "chunk_index": 1951, "length": 84, "hash": "322fedbfd54885f499b1279dc680edf7"}
{"id": "mcs500_programming_manual_1952", "text": "Incremented each time the robot cycles through all\navailable dynamic data to report.", "source": "mcs500_programming_manual", "chunk_index": 1952, "length": 84, "hash": "322fedbfd54885f499b1279dc680edf7"}
{"id": "mcs500_programming_manual_1953", "text": "Applies only if at least one dynamic data slot (Table 11)\nis configured with ID 0 (Automatic).", "source": "mcs500_programming_manual", "chunk_index": 1953, "length": 94, "hash": "73c3f38fdecd3098af3fd90c93e355c0"}
{"id": "mcs500_programming_manual_1954", "text": "Applies only if at least one dynamic data slot (Table 11)\nis configured with ID 0 (", "source": "mcs500_programming_manual", "chunk_index": 1954, "length": 83, "hash": "f14b7de9cb0a3dacdef4502779a381ec"}
{"id": "mcs500_programming_manual_1955", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 1955, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_1956", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 1956, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_1957", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1957, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1958", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 1958, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_1959", "text": "The SafetyStatus section in the cyclic input reports safety-related information (safety\nsignals, power supply input states, operating mode, etc.). See Management of errors and\nsafety stops (page 34).", "source": "mcs500_programming_manual", "chunk_index": 1959, "length": 199, "hash": "745d4bf936e5cb4696bc0a536fc87f50"}
{"id": "mcs500_programming_manual_1960", "text": "section in the cyclic input reports safety-related information (safety\nsignals, power supply input states, operating mode, etc.). See", "source": "mcs500_programming_manual", "chunk_index": 1960, "length": 133, "hash": "50584be40cefc77adbcc8d79906e190b"}
{"id": "mcs500_programming_manual_1961", "text": "Management of errors and\nsafety stops", "source": "mcs500_programming_manual", "chunk_index": 1961, "length": 37, "hash": "90758a3aef5c62f0976af107ad5a10ec"}
{"id": "mcs500_programming_manual_1962", "text": "Table 21: SafetyStatus (Offset 128, size 12, EtherCAT index 6065h)", "source": "mcs500_programming_manual", "chunk_index": 1962, "length": 66, "hash": "4c629a0a1c5a225208342071032dfc23"}
{"id": "mcs500_programming_manual_1963", "text": "(Offset 128, size 12, EtherCAT index 6065h)", "source": "mcs500_programming_manual", "chunk_index": 1963, "length": 43, "hash": "6284a93a53710e018a8ace2d022714bb"}
{"id": "mcs500_programming_manual_1964", "text": "EStop\nPStop1\nPStop2\n(Reserved)\nOperationModeChangeBool\nBool\nEnablingDeviceReleased\nVoltageFluctuationBool\nBool\nReboot\nRedundancyFault Bool\nStandstillFault Bool\nConnectionDroppedBool\nBool\nMinorError\n(Reserved)\nEStopResettable Bool", "source": "mcs500_programming_manual", "chunk_index": 1964, "length": 229, "hash": "38fa94be4a98bb38aa072c9d01ca2d7e"}
{"id": "mcs500_programming_manual_1965", "text": "EnablingDeviceReleased\nVoltageFluctuation", "source": "mcs500_programming_manual", "chunk_index": 1965, "length": 41, "hash": "6f09406927c17bb0a8f1bbda946ddc2f"}
{"id": "mcs500_programming_manual_1966", "text": "Reboot\nRedundancyFault", "source": "mcs500_programming_manual", "chunk_index": 1966, "length": 22, "hash": "58eed5543cc95b2dddf81d926de0f95a"}
{"id": "mcs500_programming_manual_1967", "text": "128:0\n128:1\n128:2\n128:3\n128:4\n128:5\n128:6\n128:7\n129:0\n129:1\n129:2\n129:3\n129:4\n132:0", "source": "mcs500_programming_manual", "chunk_index": 1967, "length": 83, "hash": "276db2440f10f0cd1e8c23b1507150fe"}
{"id": "mcs500_programming_manual_1968", "text": "128:0\n128:1\n128:2\n128:3\n128:4\n128:5\n128:6\n128:7\n129:0\n129:1\n129:2\n129:3\n129:4\n132:0", "source": "mcs500_programming_manual", "chunk_index": 1968, "length": 83, "hash": "276db2440f10f0cd1e8c23b1507150fe"}
{"id": "mcs500_programming_manual_1969", "text": "PStop1ResettableBool", "source": "mcs500_programming_manual", "chunk_index": 1969, "length": 20, "hash": "d038038c5a9dee23f4634e164723eda2"}
{"id": "mcs500_programming_manual_1970", "text": "PStop2ResettableBool", "source": "mcs500_programming_manual", "chunk_index": 1970, "length": 20, "hash": "1314bc1c7422da9d951ba6c5ead4d4d0"}
{"id": "mcs500_programming_manual_1971", "text": "(Reserved)\nOperationModeChangeResettable", "source": "mcs500_programming_manual", "chunk_index": 1971, "length": 40, "hash": "53df886e2b130d4796c8184cd2594960"}
{"id": "mcs500_programming_manual_1972", "text": "OperationModeChangeResettable", "source": "mcs500_programming_manual", "chunk_index": 1972, "length": 29, "hash": "bb8b22c589de86e3939557aec656798d"}
{"id": "mcs500_programming_manual_1973", "text": "132:5\nEnablingDeviceReleasedResettable", "source": "mcs500_programming_manual", "chunk_index": 1973, "length": 38, "hash": "baae524e1d020b9c534eb2bd45f3b1d9"}
{"id": "mcs500_programming_manual_1974", "text": "EnablingDeviceReleasedResettable", "source": "mcs500_programming_manual", "chunk_index": 1974, "length": 32, "hash": "be84a45b767a85ad3310c14e9bb2532f"}
{"id": "mcs500_programming_manual_1975", "text": "VoltageFluctuationResettable", "source": "mcs500_programming_manual", "chunk_index": 1975, "length": 28, "hash": "f21ebe7ce92ace684762c95f597c637d"}
{"id": "mcs500_programming_manual_1976", "text": "VoltageFluctuationResettable", "source": "mcs500_programming_manual", "chunk_index": 1976, "length": 28, "hash": "f21ebe7ce92ace684762c95f597c637d"}
{"id": "mcs500_programming_manual_1977", "text": "RebootResettableBool", "source": "mcs500_programming_manual", "chunk_index": 1977, "length": 20, "hash": "dfea2724bdf77d58d556c7904344067d"}
{"id": "mcs500_programming_manual_1978", "text": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n20\n1", "source": "mcs500_programming_manual", "chunk_index": 1978, "length": 28, "hash": "8e71573bae6b78849bb0057178d52a8f"}
{"id": "mcs500_programming_manual_1979", "text": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n20\n1", "source": "mcs500_programming_manual", "chunk_index": 1979, "length": 28, "hash": "8e71573bae6b78849bb0057178d52a8f"}
{"id": "mcs500_programming_manual_1980", "text": "1A11h:1\n1A11h:2\n1A11h:3", "source": "mcs500_programming_manual", "chunk_index": 1980, "length": 23, "hash": "222874597ee3f0c77ba93ee4c6322dc8"}
{"id": "mcs500_programming_manual_1981", "text": "1A11h:1\n1A11h:2\n1A11h:3", "source": "mcs500_programming_manual", "chunk_index": 1981, "length": 23, "hash": "222874597ee3f0c77ba93ee4c6322dc8"}
{"id": "mcs500_programming_manual_1982", "text": "1A11h:5\n1A11h:6\n1A11h:7\n1A11h:8\n1A11h:9\n1A11h:10\n1A11h:11\n1A11h:12", "source": "mcs500_programming_manual", "chunk_index": 1982, "length": 66, "hash": "b7e30c1ea773780eee52b54ea9ff4cf0"}
{"id": "mcs500_programming_manual_1983", "text": "1A11h:5\n1A11h:6\n1A11h:7\n1A11h:8\n1A11h:9\n1A11h:10\n1A11h:11\n1A11h:12", "source": "mcs500_programming_manual", "chunk_index": 1983, "length": 66, "hash": "b7e30c1ea773780eee52b54ea9ff4cf0"}
{"id": "mcs500_programming_manual_1984", "text": "E-Stop safety stop signal state\u2020\nP-Stop 1 safety stop signal state\u2020\nP-Stop 2 safety stop signal state\u2020\nReserved for future use.\nOperation mode change safety stop signal state\u2020\nEnabling device released safety stop signal state\u2020\nVoltage fluctuation safety stop signal state\u2020\nRobot rebooted safety stop signal state\u2020\nRedundancy fault safety stop signal state\u2020\nStandstill fault safety stop signal state\u2020\nTCP/IP connection dropped safety stop signal state\u2020\nMinor error safety stop signal state\u2020\nReserved for future use.\nE-Stop safety stop signal ready to be reset (Reset\nbutton)\nP-Stop 1 safety stop signal ready to be reset (Reset\nbutton)\nP-Stop 2 safety stop signal ready to be reset (with\nResumeMotion)\nReserved for future use.\nOperation mode change safety stop signal ready to be\nreset (Reset button)\nEnabling device released safety stop signal ready to be\nreset (with ResumeMotion)\nVoltage fluctuation safety stop signal ready to be reset\n(Reset button)\nRobot rebooted safety stop signal ready to be reset\n(Reset button)", "source": "mcs500_programming_manual", "chunk_index": 1984, "length": 1020, "hash": "0a39fdf5f165a0c307f540dd3d4a4bbc"}
{"id": "mcs500_programming_manual_1985", "text": "E-Stop safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1985, "length": 31, "hash": "3bd8d13f514a1f7bc35894a5685c8a83"}
{"id": "mcs500_programming_manual_1986", "text": "P-Stop 1 safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1986, "length": 33, "hash": "b02fdf8c30f5a4372fd6d78c26ac1710"}
{"id": "mcs500_programming_manual_1987", "text": "P-Stop 2 safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1987, "length": 33, "hash": "493d054659e55e55a41c5f4b1181d1cc"}
{"id": "mcs500_programming_manual_1988", "text": "Reserved for future use.\nOperation mode change safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1988, "length": 71, "hash": "7b6fecc3c35cfdea0ad7e5ee63316176"}
{"id": "mcs500_programming_manual_1989", "text": "Enabling device released safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1989, "length": 49, "hash": "6137c987293cb0d70a12c9750dee3985"}
{"id": "mcs500_programming_manual_1990", "text": "Voltage fluctuation safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1990, "length": 44, "hash": "74c65e7cbdd307a2410ed33eef68bb75"}
{"id": "mcs500_programming_manual_1991", "text": "Robot rebooted safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1991, "length": 39, "hash": "8f2f7d85755b1737249fc566f35961f5"}
{"id": "mcs500_programming_manual_1992", "text": "Redundancy fault safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1992, "length": 41, "hash": "48accee595c6f34a81581734aef81059"}
{"id": "mcs500_programming_manual_1993", "text": "Standstill fault safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1993, "length": 41, "hash": "71e587c0a7c24853a86a97986000930a"}
{"id": "mcs500_programming_manual_1994", "text": "TCP/IP connection dropped safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1994, "length": 50, "hash": "e2b6655085585bff025b031d51a47c39"}
{"id": "mcs500_programming_manual_1995", "text": "Minor error safety stop signal state", "source": "mcs500_programming_manual", "chunk_index": 1995, "length": 36, "hash": "0f943195abe030ac5fea6668592fc762"}
{"id": "mcs500_programming_manual_1996", "text": "Reserved for future use.\nE-Stop safety stop signal ready to be reset (Reset\nbutton)\nP-Stop 1 safety stop signal ready to be reset (Reset", "source": "mcs500_programming_manual", "chunk_index": 1996, "length": 136, "hash": "50712f4bcd76bea7ad2b49dff35451ac"}
{"id": "mcs500_programming_manual_1997", "text": "button)\nP-Stop 2 safety stop signal ready to be reset (with", "source": "mcs500_programming_manual", "chunk_index": 1997, "length": 59, "hash": "e4a5d297c8bb2a7a0e8dd4a9d7c858a5"}
{"id": "mcs500_programming_manual_1998", "text": ")\nReserved for future use.\nOperation mode change safety stop signal ready to be\nreset (Reset button)\nEnabling device released safety stop signal ready to be\nreset (with", "source": "mcs500_programming_manual", "chunk_index": 1998, "length": 168, "hash": "73027b09aa4bae9303d2525a0719c8f3"}
{"id": "mcs500_programming_manual_1999", "text": ")\nVoltage fluctuation safety stop signal ready to be reset", "source": "mcs500_programming_manual", "chunk_index": 1999, "length": 58, "hash": "814a53d60936b3e4acc7bbc72f1d1961"}
{"id": "mcs500_programming_manual_2000", "text": "(Reset button)\nRobot rebooted safety stop signal ready to be reset\n(Reset button)", "source": "mcs500_programming_manual", "chunk_index": 2000, "length": 81, "hash": "fdc02e4f991a63495ab9e0b65bb6bec6"}
{"id": "mcs500_programming_manual_2001", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2001, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2002", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2002, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2003", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2003, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2004", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2004, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2005", "text": "Table 21 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2005, "length": 39, "hash": "e9c192236af5d508c6eb73392d48c093"}
{"id": "mcs500_programming_manual_2006", "text": "Table 21 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2006, "length": 39, "hash": "e9c192236af5d508c6eb73392d48c093"}
{"id": "mcs500_programming_manual_2007", "text": "RedundancyFaultResettable", "source": "mcs500_programming_manual", "chunk_index": 2007, "length": 25, "hash": "111797c187a668cef582c62ed3021758"}
{"id": "mcs500_programming_manual_2008", "text": "RedundancyFaultResettable", "source": "mcs500_programming_manual", "chunk_index": 2008, "length": 25, "hash": "111797c187a668cef582c62ed3021758"}
{"id": "mcs500_programming_manual_2009", "text": "StandstillFaultResettable", "source": "mcs500_programming_manual", "chunk_index": 2009, "length": 25, "hash": "40fb4f28a9de3a1472a90b928d74b051"}
{"id": "mcs500_programming_manual_2010", "text": "StandstillFaultResettable", "source": "mcs500_programming_manual", "chunk_index": 2010, "length": 25, "hash": "40fb4f28a9de3a1472a90b928d74b051"}
{"id": "mcs500_programming_manual_2011", "text": "ConnectionDroppedResettable", "source": "mcs500_programming_manual", "chunk_index": 2011, "length": 27, "hash": "f3a77b539cb25d92bdfb6a2b68fc14c3"}
{"id": "mcs500_programming_manual_2012", "text": "ConnectionDroppedResettable", "source": "mcs500_programming_manual", "chunk_index": 2012, "length": 27, "hash": "f3a77b539cb25d92bdfb6a2b68fc14c3"}
{"id": "mcs500_programming_manual_2013", "text": "MinorErrorResettable", "source": "mcs500_programming_manual", "chunk_index": 2013, "length": 20, "hash": "5f2010c9bf7bd8aa7b795c77efdc4fdb"}
{"id": "mcs500_programming_manual_2014", "text": "MinorErrorResettable", "source": "mcs500_programming_manual", "chunk_index": 2014, "length": 20, "hash": "5f2010c9bf7bd8aa7b795c77efdc4fdb"}
{"id": "mcs500_programming_manual_2015", "text": "(Reserved)\nOperationMode\nResetReady", "source": "mcs500_programming_manual", "chunk_index": 2015, "length": 35, "hash": "db9735519c3339935cec60cf9ceed8d1"}
{"id": "mcs500_programming_manual_2016", "text": "OperationMode\nResetReady", "source": "mcs500_programming_manual", "chunk_index": 2016, "length": 24, "hash": "fdadca02101e9471bb56c17611ae2588"}
{"id": "mcs500_programming_manual_2017", "text": "VMotorOn\n(Reserved)\nPsuInputs_Estop Bool", "source": "mcs500_programming_manual", "chunk_index": 2017, "length": 40, "hash": "ed39a6e003e134408e39d3c2eb79514a"}
{"id": "mcs500_programming_manual_2018", "text": "PsuInputs_PStop1Bool", "source": "mcs500_programming_manual", "chunk_index": 2018, "length": 20, "hash": "16584b1889537190ce5ef431c667cf88"}
{"id": "mcs500_programming_manual_2019", "text": "PsuInputs_PStop2Bool", "source": "mcs500_programming_manual", "chunk_index": 2019, "length": 20, "hash": "20a4da484ad9b10d7002902eed86cedf"}
{"id": "mcs500_programming_manual_2020", "text": "PsuInputs_ResetExtBool\nBool\nPsuInputs_ResetKeypad", "source": "mcs500_programming_manual", "chunk_index": 2020, "length": 49, "hash": "704e94d24934f45c9fade8b7b9c897da"}
{"id": "mcs500_programming_manual_2021", "text": "PsuInputs_ResetKeypad", "source": "mcs500_programming_manual", "chunk_index": 2021, "length": 21, "hash": "7f69b2345d6e666cd3837ce8efd00792"}
{"id": "mcs500_programming_manual_2022", "text": "PsuInputs_EnablingDevice", "source": "mcs500_programming_manual", "chunk_index": 2022, "length": 24, "hash": "219586431b4c52ef28a4b093a4216007"}
{"id": "mcs500_programming_manual_2023", "text": "PsuInputs_EnablingDevice", "source": "mcs500_programming_manual", "chunk_index": 2023, "length": 24, "hash": "219586431b4c52ef28a4b093a4216007"}
{"id": "mcs500_programming_manual_2024", "text": "Always 0. A redundancy fault requires rebooting the\nrobot; it cannot be reset.\nStandstill fault safety stop signal ready to be reset\n(Reset button)\nConnection dropped safety stop signal ready to be\nreset (with ResumeMotion)\nMinor error safety stop signal ready to be reset (with\nResumeMotion)\nReserved for future use.\n0 for locked, 1 for automatic, 2 for manual\nIf no more safety signals causing motor power to be\nremoved are present, and the robot is ready to be\nreset with the Reset button\nRobot motors powered or not\nReserved for future use\nSet (1) when at least one of the two power supply\nE-Stop inputs is asserted\nSet (1) when at least one of the two power supply\nP-Stop 1 inputs is asserted\nSet (1) when at least one of the two power supply\nP-Stop 2 inputs is asserted\nSet (1) when the power supply Reset input is asserted\nSet (1) when the power supply keypad reset button is\npressed\nSet (1) when both enabling device inputs are asserted\n(i.e., the enabling device is pressed)\nReserved for future use.", "source": "mcs500_programming_manual", "chunk_index": 2024, "length": 1008, "hash": "7845a3a2d913bce4aafe60c8acaa8984"}
{"id": "mcs500_programming_manual_2025", "text": "Always 0. A redundancy fault requires rebooting the\nrobot; it cannot be reset.\nStandstill fault safety stop signal ready to be reset\n(Reset button)\nConnection dropped safety stop signal ready to be\nreset (with", "source": "mcs500_programming_manual", "chunk_index": 2025, "length": 209, "hash": "8c689b7c9eb03affd3d3112b03b6c514"}
{"id": "mcs500_programming_manual_2026", "text": ")\nMinor error safety stop signal ready to be reset (with", "source": "mcs500_programming_manual", "chunk_index": 2026, "length": 56, "hash": "db3d52d961c6770a7bcb3533c46fa684"}
{"id": "mcs500_programming_manual_2027", "text": ")\nReserved for future use.\n0 for locked, 1 for automatic, 2 for manual\nIf no more safety signals causing motor power to be\nremoved are present, and the robot is ready to be\nreset with the Reset button\nRobot motors powered or not\nReserved for future use\nSet (1) when at least one of the two power supply\nE-Stop inputs is asserted", "source": "mcs500_programming_manual", "chunk_index": 2027, "length": 328, "hash": "b49f74cd1437363acfe14de3ab42f30a"}
{"id": "mcs500_programming_manual_2028", "text": "Set (1) when at least one of the two power supply\nP-Stop 1 inputs is asserted\nSet (1) when at least one of the two power supply\nP-Stop 2 inputs is asserted\nSet (1) when the power supply Reset input is asserted\nSet (1) when the power supply keypad reset button is\npressed\nSet (1) when both enabling device inputs are asserted\n(i.e., the enabling device is pressed)", "source": "mcs500_programming_manual", "chunk_index": 2028, "length": 363, "hash": "1b34c353a705db1e8d7ccddcebdea11b"}
{"id": "mcs500_programming_manual_2029", "text": "Reserved for future use.", "source": "mcs500_programming_manual", "chunk_index": 2029, "length": 24, "hash": "933c55bd5b643b15e2a23cdbacbc4c95"}
{"id": "mcs500_programming_manual_2030", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2030, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2031", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2031, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2032", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2032, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2033", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2033, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2034", "text": "\u2020 1 when safety signal is present or resettable, 0 when safety signal has been successfully\nreset", "source": "mcs500_programming_manual", "chunk_index": 2034, "length": 97, "hash": "c239934dc8d379147d8d3dd50f10c3f2"}
{"id": "mcs500_programming_manual_2035", "text": "1 when safety signal is present or resettable, 0 when safety signal has been successfully\nreset", "source": "mcs500_programming_manual", "chunk_index": 2035, "length": 95, "hash": "83507c7b067e8f1cd49ec6914ea0c84a"}
{"id": "mcs500_programming_manual_2036", "text": "The DynamicData section in the cyclic input reports additional robot information that is not\ncovered by other cyclic input fields.", "source": "mcs500_programming_manual", "chunk_index": 2036, "length": 130, "hash": "1e456b0dbd5667ed230d90da5c5a4e52"}
{"id": "mcs500_programming_manual_2037", "text": "section in the cyclic input reports additional robot information that is not\ncovered by other cyclic input fields.", "source": "mcs500_programming_manual", "chunk_index": 2037, "length": 114, "hash": "c9949dcaa95e446ad12f5e12b9e4be59"}
{"id": "mcs500_programming_manual_2038", "text": "The contents of each dynamic data slot are controlled by Table 11. Slots can be set to a specific\ndynamic data type (Table 12) or configured in Automatic mode, in which case the robot will\nautomatically cycle through all available dynamic data types, changing the reported data\nevery cycle.", "source": "mcs500_programming_manual", "chunk_index": 2038, "length": 290, "hash": "259aeed976a76b4379918895a1bff2c8"}
{"id": "mcs500_programming_manual_2039", "text": "The contents of each dynamic data slot are controlled by Table 11. Slots can be set to a specific\ndynamic data type (Table 12) or configured in", "source": "mcs500_programming_manual", "chunk_index": 2039, "length": 143, "hash": "bb1b9879ac6826846d1dd225325f13c1"}
{"id": "mcs500_programming_manual_2040", "text": "mode, in which case the robot will\nautomatically cycle through all available dynamic data types, changing the reported data\nevery cycle.", "source": "mcs500_programming_manual", "chunk_index": 2040, "length": 136, "hash": "8da2f82be59196d84c0e4cfc54ac540f"}
{"id": "mcs500_programming_manual_2041", "text": "Table 22: DynamicData0 (Offset 140, size 28, EtherCAT index 6070h)", "source": "mcs500_programming_manual", "chunk_index": 2041, "length": 66, "hash": "10defe4d94218093a3d40b90749f5e2b"}
{"id": "mcs500_programming_manual_2042", "text": "(Offset 140, size 28, EtherCAT index 6070h)", "source": "mcs500_programming_manual", "chunk_index": 2042, "length": 43, "hash": "6abd0c9356ee123881d2db282cfd8ad2"}
{"id": "mcs500_programming_manual_2043", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2043, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2044", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2044, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2045", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2045, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2046", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2046, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2047", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2047, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "mcs500_programming_manual_2048", "text": "Value index 0 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2048, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "mcs500_programming_manual_2049", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2049, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "mcs500_programming_manual_2050", "text": "Value index 1 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2050, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "mcs500_programming_manual_2051", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2051, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "mcs500_programming_manual_2052", "text": "Value index 2 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2052, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "mcs500_programming_manual_2053", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2053, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "mcs500_programming_manual_2054", "text": "Value index 3 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2054, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "mcs500_programming_manual_2055", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2055, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "mcs500_programming_manual_2056", "text": "Value index 4 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2056, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "mcs500_programming_manual_2057", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2057, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2058", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2058, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2059", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2059, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2060", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2060, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2061", "text": "Table 22 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2061, "length": 39, "hash": "3f0055aa96b432d7ae544f10a9078b01"}
{"id": "mcs500_programming_manual_2062", "text": "Table 22 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2062, "length": 39, "hash": "3f0055aa96b432d7ae544f10a9078b01"}
{"id": "mcs500_programming_manual_2063", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2063, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "mcs500_programming_manual_2064", "text": "Value index 5 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2064, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "mcs500_programming_manual_2065", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2065, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2066", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2066, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2067", "text": "Table 23: DynamicData1 (Offset 168, size 28, EtherCAT index 6071h)", "source": "mcs500_programming_manual", "chunk_index": 2067, "length": 66, "hash": "9435c6944cfbb1ea8b4a515286111d21"}
{"id": "mcs500_programming_manual_2068", "text": "(Offset 168, size 28, EtherCAT index 6071h)", "source": "mcs500_programming_manual", "chunk_index": 2068, "length": 43, "hash": "55bc214b7a2e85fa98b62471fc12e881"}
{"id": "mcs500_programming_manual_2069", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2069, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2070", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2070, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2071", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2071, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2072", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2072, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2073", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2073, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "mcs500_programming_manual_2074", "text": "Value index 0 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2074, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "mcs500_programming_manual_2075", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2075, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "mcs500_programming_manual_2076", "text": "Value index 1 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2076, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "mcs500_programming_manual_2077", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2077, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "mcs500_programming_manual_2078", "text": "Value index 2 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2078, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "mcs500_programming_manual_2079", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2079, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "mcs500_programming_manual_2080", "text": "Value index 3 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2080, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "mcs500_programming_manual_2081", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2081, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "mcs500_programming_manual_2082", "text": "Value index 4 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2082, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "mcs500_programming_manual_2083", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2083, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2084", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2084, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2085", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2085, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2086", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2086, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2087", "text": "Table 23 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2087, "length": 39, "hash": "0766d12014f41cb317b1452f04096261"}
{"id": "mcs500_programming_manual_2088", "text": "Table 23 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2088, "length": 39, "hash": "0766d12014f41cb317b1452f04096261"}
{"id": "mcs500_programming_manual_2089", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2089, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "mcs500_programming_manual_2090", "text": "Value index 5 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2090, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "mcs500_programming_manual_2091", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2091, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2092", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2092, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2093", "text": "Table 24: DynamicData2 (Offset 196, size 28, EtherCAT index 6072h)", "source": "mcs500_programming_manual", "chunk_index": 2093, "length": 66, "hash": "08a8269e1f1c82045f2d17f54c40af7c"}
{"id": "mcs500_programming_manual_2094", "text": "(Offset 196, size 28, EtherCAT index 6072h)", "source": "mcs500_programming_manual", "chunk_index": 2094, "length": 43, "hash": "2a4e1d721a6d415829e82f04332212d1"}
{"id": "mcs500_programming_manual_2095", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2095, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2096", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2096, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2097", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2097, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2098", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2098, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2099", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2099, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "mcs500_programming_manual_2100", "text": "Value index 0 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2100, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "mcs500_programming_manual_2101", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2101, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "mcs500_programming_manual_2102", "text": "Value index 1 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2102, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "mcs500_programming_manual_2103", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2103, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "mcs500_programming_manual_2104", "text": "Value index 2 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2104, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "mcs500_programming_manual_2105", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2105, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "mcs500_programming_manual_2106", "text": "Value index 3 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2106, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "mcs500_programming_manual_2107", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2107, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "mcs500_programming_manual_2108", "text": "Value index 4 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2108, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "mcs500_programming_manual_2109", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2109, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2110", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2110, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2111", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2111, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2112", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2112, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2113", "text": "Table 24 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2113, "length": 39, "hash": "09b1f06c0a5f0eb9852c1b4de27c856f"}
{"id": "mcs500_programming_manual_2114", "text": "Table 24 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2114, "length": 39, "hash": "09b1f06c0a5f0eb9852c1b4de27c856f"}
{"id": "mcs500_programming_manual_2115", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2115, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "mcs500_programming_manual_2116", "text": "Value index 5 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2116, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "mcs500_programming_manual_2117", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2117, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2118", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2118, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2119", "text": "Table 25: DynamicData3 (Offset 224, size 28, EtherCAT index 6073h)", "source": "mcs500_programming_manual", "chunk_index": 2119, "length": 66, "hash": "2274ef041f89b8640047a5e88292879b"}
{"id": "mcs500_programming_manual_2120", "text": "(Offset 224, size 28, EtherCAT index 6073h)", "source": "mcs500_programming_manual", "chunk_index": 2120, "length": 43, "hash": "8f29e4d7d7f737848ff7eabf04f46af6"}
{"id": "mcs500_programming_manual_2121", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2121, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2122", "text": "DynamicType\nValueIdx_0", "source": "mcs500_programming_manual", "chunk_index": 2122, "length": 22, "hash": "04533d566d5b4a9d6470c6e1aa827520"}
{"id": "mcs500_programming_manual_2123", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2123, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2124", "text": "Dynamic data type (see Table 12 for available values).", "source": "mcs500_programming_manual", "chunk_index": 2124, "length": 54, "hash": "bfce42e59674c4662170c2c360569f63"}
{"id": "mcs500_programming_manual_2125", "text": "Value index 0 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2125, "length": 69, "hash": "b3491f3239472dcb962ef81ee2500815"}
{"id": "mcs500_programming_manual_2126", "text": "Value index 0 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2126, "length": 41, "hash": "3b1a9b2364389e74c922bb6a1f5f7958"}
{"id": "mcs500_programming_manual_2127", "text": "Value index 1 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2127, "length": 69, "hash": "481f01cae738f0d4b20219d61b2f16ef"}
{"id": "mcs500_programming_manual_2128", "text": "Value index 1 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2128, "length": 41, "hash": "25c8ffb368194b6405b0b394b32d2965"}
{"id": "mcs500_programming_manual_2129", "text": "Value index 2 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2129, "length": 69, "hash": "a2251b7eda4b816dc92c4cd99bf4997b"}
{"id": "mcs500_programming_manual_2130", "text": "Value index 2 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2130, "length": 41, "hash": "974e4417b30ff703360fe69e13134e56"}
{"id": "mcs500_programming_manual_2131", "text": "Value index 3 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2131, "length": 69, "hash": "778143321320a270a64d453f0138c6aa"}
{"id": "mcs500_programming_manual_2132", "text": "Value index 3 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2132, "length": 41, "hash": "3653b11d3b384ce6e52b1d615053709c"}
{"id": "mcs500_programming_manual_2133", "text": "Value index 4 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2133, "length": 69, "hash": "d0a4ca9283554dec8e86a72de675c2b1"}
{"id": "mcs500_programming_manual_2134", "text": "Value index 4 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2134, "length": 41, "hash": "047d42bce21eab0398f0a1e6cb3062bf"}
{"id": "mcs500_programming_manual_2135", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2135, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2136", "text": "continues on next page", "source": "mcs500_programming_manual", "chunk_index": 2136, "length": 22, "hash": "5b37a4224e6f4a44cd49809113d75f2e"}
{"id": "mcs500_programming_manual_2137", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2137, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2138", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2138, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2139", "text": "Table 25 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2139, "length": 39, "hash": "f10fa1278e1c14436485f9dd124744c6"}
{"id": "mcs500_programming_manual_2140", "text": "Table 25 \u2013 continued from previous page", "source": "mcs500_programming_manual", "chunk_index": 2140, "length": 39, "hash": "f10fa1278e1c14436485f9dd124744c6"}
{"id": "mcs500_programming_manual_2141", "text": "Value index 5 (the meaning depends on the\nDynamicType, see Table 12).", "source": "mcs500_programming_manual", "chunk_index": 2141, "length": 69, "hash": "03a9155dcd5aac11cb78a4851eca402b"}
{"id": "mcs500_programming_manual_2142", "text": "Value index 5 (the meaning depends on the", "source": "mcs500_programming_manual", "chunk_index": 2142, "length": 41, "hash": "a01861bf0d581ef9638db73bef559d22"}
{"id": "mcs500_programming_manual_2143", "text": "M\nC\n-\nP\nM\nM\nC\nS\n5\n0\n0\n,", "source": "mcs500_programming_manual", "chunk_index": 2143, "length": 23, "hash": "7f5c704bbb420b0753edadb9fd76c469"}
{"id": "mcs500_programming_manual_2144", "text": "R\ne\nv\ni\ns\ni\no\nn\nn\nu\nm\nb\ne\nr\n:", "source": "mcs500_programming_manual", "chunk_index": 2144, "length": 29, "hash": "32127c0e5353c0526d53c92f461ea703"}
{"id": "mcs500_programming_manual_2145", "text": "EtherCAT communication", "source": "mcs500_programming_manual", "chunk_index": 2145, "length": 22, "hash": "73d027205aa7930499a3b3cc596dceb2"}
{"id": "mcs500_programming_manual_2146", "text": "EtherCAT communication", "source": "mcs500_programming_manual", "chunk_index": 2146, "length": 22, "hash": "73d027205aa7930499a3b3cc596dceb2"}
{"id": "mcs500_programming_manual_2147", "text": "EtherCAT is an open real-time Ethernet protocol originally developed by Beckhoff Automation.\nWhen communicating with a Mecademic robot over EtherCAT, you can achieve guaranteed\nresponse times of 1 ms. Furthermore, you no longer need to parse strings as you do with the\nTCP/IP protocol.", "source": "mcs500_programming_manual", "chunk_index": 2147, "length": 285, "hash": "672d07d8c3f3f32f76113acf7add84f0"}
{"id": "mcs500_programming_manual_2148", "text": "EtherCAT is an open real-time Ethernet protocol originally developed by Beckhoff Automation.\nWhen communicating with a Mecademic robot over EtherCAT, you can achieve guaranteed\nresponse times of 1 ms. Furthermore, you no longer need to parse strings as you do with the\nTCP/IP protocol.", "source": "mcs500_programming_manual", "chunk_index": 2148, "length": 285, "hash": "672d07d8c3f3f32f76113acf7add84f0"}
{"id": "mcs500_programming_manual_2149", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2149, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2150", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2150, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2151", "text": "With EtherCAT, you can connect several Mecademic robots in various network topologies,\nincluding line, star, tree, or ring, as each robot has a unique node address. This allows\ntargeted access to a specific robot, even if your network topology changes.", "source": "mcs500_programming_manual", "chunk_index": 2151, "length": 252, "hash": "dd6367761b586d24cd2baa2ccb5efe12"}
{"id": "mcs500_programming_manual_2152", "text": "With EtherCAT, you can connect several Mecademic robots in various network topologies,\nincluding line, star, tree, or ring, as each robot has a unique node address. This allows\ntargeted access to a specific robot, even if your network topology changes.", "source": "mcs500_programming_manual", "chunk_index": 2152, "length": 252, "hash": "dd6367761b586d24cd2baa2ccb5efe12"}
{"id": "mcs500_programming_manual_2153", "text": "Each EtherCAT slave device is described by an EtherCAT Slave Information (ESI) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherCAT controllers (PLC) use\nthis file to properly identify detected EtherCAT slave devices, such as a Mecademic robot.", "source": "mcs500_programming_manual", "chunk_index": 2153, "length": 272, "hash": "6d5ce0258bc131bf2f74d52cacbef482"}
{"id": "mcs500_programming_manual_2154", "text": "Each EtherCAT slave device is described by an EtherCAT Slave Information (ESI) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherCAT controllers (PLC) use\nthis file to properly identify detected EtherCAT slave devices, such as a Mecademic robot.", "source": "mcs500_programming_manual", "chunk_index": 2154, "length": 272, "hash": "6d5ce0258bc131bf2f74d52cacbef482"}
{"id": "mcs500_programming_manual_2155", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "mcs500_programming_manual", "chunk_index": 2155, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "mcs500_programming_manual_2156", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "mcs500_programming_manual", "chunk_index": 2156, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "mcs500_programming_manual_2157", "text": "(Mcs500_EtherCAT_ESI_vX.X.X.X.xml).", "source": "mcs500_programming_manual", "chunk_index": 2157, "length": 35, "hash": "4adf215688f231a18fba7ccd31e7397f"}
{"id": "mcs500_programming_manual_2158", "text": "(Mcs500_EtherCAT_ESI_vX.X.X.X.xml).", "source": "mcs500_programming_manual", "chunk_index": 2158, "length": 35, "hash": "4adf215688f231a18fba7ccd31e7397f"}
{"id": "mcs500_programming_manual_2159", "text": "The default communication protocol of the robot is the Ethernet TCP/IP protocol. This\nprotocol is required for jogging the robot through its web interface.", "source": "mcs500_programming_manual", "chunk_index": 2159, "length": 155, "hash": "98164d229bb52247889e0d001ea570de"}
{"id": "mcs500_programming_manual_2160", "text": "The default communication protocol of the robot is the Ethernet TCP/IP protocol. This\nprotocol is required for jogging the robot through its web interface.", "source": "mcs500_programming_manual", "chunk_index": 2160, "length": 155, "hash": "98164d229bb52247889e0d001ea570de"}
{"id": "mcs500_programming_manual_2161", "text": "To switch to EtherCAT, use the Network configuration panel in the MecaPortal configuration\nmenu.", "source": "mcs500_programming_manual", "chunk_index": 2161, "length": 96, "hash": "31fbf38f35c5b1f0728bc69460e6ea17"}
{"id": "mcs500_programming_manual_2162", "text": "To switch to EtherCAT, use the Network configuration panel in the MecaPortal configuration\nmenu.", "source": "mcs500_programming_manual", "chunk_index": 2162, "length": 96, "hash": "31fbf38f35c5b1f0728bc69460e6ea17"}
{"id": "mcs500_programming_manual_2163", "text": "Alternatively, you can use the SwitchToEtherCAT (page 207) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the TCP/IP API (page 18).", "source": "mcs500_programming_manual", "chunk_index": 2163, "length": 169, "hash": "8d70570e2376aa8a856830be73f9b1d2"}
{"id": "mcs500_programming_manual_2164", "text": "Alternatively, you can use the", "source": "mcs500_programming_manual", "chunk_index": 2164, "length": 30, "hash": "1830f37443a4f1c50e7e68a474a82af8"}
{"id": "mcs500_programming_manual_2165", "text": "(page 207) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the", "source": "mcs500_programming_manual", "chunk_index": 2165, "length": 99, "hash": "fdf8442f1dcbc8a9fbdeefcfac0e96dd"}
{"id": "mcs500_programming_manual_2166", "text": "This command is persistent. The robot will remain in EtherCAT mode even after being\nrebooted.", "source": "mcs500_programming_manual", "chunk_index": 2166, "length": 93, "hash": "1d5831657412628a1e6d1281c0e8bac2"}
{"id": "mcs500_programming_manual_2167", "text": "This command is persistent. The robot will remain in EtherCAT mode even after being\nrebooted.", "source": "mcs500_programming_manual", "chunk_index": 2167, "length": 93, "hash": "1d5831657412628a1e6d1281c0e8bac2"}
{"id": "mcs500_programming_manual_2168", "text": "When the robot is in EtherCAT mode, TCP/IP or EtherNet/IP communication is not possible\n(e.g., you cannot use the robot\u2019s web interface or other cyclic protocols).", "source": "mcs500_programming_manual", "chunk_index": 2168, "length": 163, "hash": "2c096aa8508c7c46a208c29047022db3"}
{"id": "mcs500_programming_manual_2169", "text": "When the robot is in EtherCAT mode, TCP/IP or EtherNet/IP communication is not possible", "source": "mcs500_programming_manual", "chunk_index": 2169, "length": 87, "hash": "9478f909c5cb4fd2b41ffe60fd24b00f"}
{"id": "mcs500_programming_manual_2170", "text": "(e.g., you cannot use the robot\u2019s web interface or other cyclic protocols).", "source": "mcs500_programming_manual", "chunk_index": 2170, "length": 75, "hash": "660d82df7d0aa8f33c1bfd9133fdd165"}
{"id": "mcs500_programming_manual_2171", "text": "To disable EtherCAT (and restore standard TCP/IP communication mode), use the\nRobotControl PDO (see Table 4) or perform a network-configuration-reset.", "source": "mcs500_programming_manual", "chunk_index": 2171, "length": 150, "hash": "55183f07fe189df7c4cdde5d64e7fb6c"}
{"id": "mcs500_programming_manual_2172", "text": "To disable EtherCAT (and restore standard TCP/IP communication mode), use the", "source": "mcs500_programming_manual", "chunk_index": 2172, "length": 77, "hash": "5b34a32f2bb105b6f8ee944532ec43da"}
{"id": "mcs500_programming_manual_2173", "text": "PDO (see Table 4) or perform a network-configuration-reset.", "source": "mcs500_programming_manual", "chunk_index": 2173, "length": 59, "hash": "46e3bdd221f86bd826a8b6ea92ac3c4d"}
{"id": "mcs500_programming_manual_2174", "text": "Your robot has three green LEDs on its base, labeled Link/Act IN, Link/Act OUT, and Run.\nWhen EtherCAT communication is enabled, these three LEDs indicate the state of the\nEtherCAT connection, as summarized in Table 26. The MCS500 also has a red LED, labeled\nERR.", "source": "mcs500_programming_manual", "chunk_index": 2174, "length": 263, "hash": "62a5669995a89de36507770cb2b33b17"}
{"id": "mcs500_programming_manual_2175", "text": "Your robot has three green LEDs on its base, labeled Link/Act IN, Link/Act OUT, and Run.\nWhen EtherCAT communication is enabled, these three LEDs indicate the state of the\nEtherCAT connection, as summarized in Table 26. The MCS500 also has a red LED, labeled\nERR.", "source": "mcs500_programming_manual", "chunk_index": 2175, "length": 263, "hash": "62a5669995a89de36507770cb2b33b17"}
{"id": "mcs500_programming_manual_2176", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2176, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2177", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2177, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2178", "text": "Table 26: EtherCAT LED description", "source": "mcs500_programming_manual", "chunk_index": 2178, "length": 34, "hash": "609287a667f51b8bfcd216f3d4bfe506"}
{"id": "mcs500_programming_manual_2179", "text": "Table 26: EtherCAT LED description", "source": "mcs500_programming_manual", "chunk_index": 2179, "length": 34, "hash": "609287a667f51b8bfcd216f3d4bfe506"}
{"id": "mcs500_programming_manual_2180", "text": "Blinking\nOff\nOn\nBlinking\nSingle flash\nFlashing\nOff\nOn\nFlickering\nDouble flash\nSingle flash\nBlinking\nOff", "source": "mcs500_programming_manual", "chunk_index": 2180, "length": 103, "hash": "53e4a92cb6f3307a9415700fbe4211e6"}
{"id": "mcs500_programming_manual_2181", "text": "Blinking\nOff\nOn\nBlinking\nSingle flash", "source": "mcs500_programming_manual", "chunk_index": 2181, "length": 37, "hash": "7f0ec1e30eae471ebf31fad2e09a8ccb"}
{"id": "mcs500_programming_manual_2182", "text": "Flashing\nOff\nOn\nFlickering\nDouble flash\nSingle flash\nBlinking\nOff", "source": "mcs500_programming_manual", "chunk_index": 2182, "length": 65, "hash": "cf1c3d74fff021e104ada85b8a55dd40"}
{"id": "mcs500_programming_manual_2183", "text": "Link is active but\nactivity\nLink is active and there is activity\nLink is inactive\nLink is active but\nactivity\nLink is active and there is activity\nLink is inactive\nOperational\nPre-Operational\nSafe-Operational\nInitialization or Bootstrap\nInit\nPDI Watchdog Timeout\nBooting Error\nApplication Watchdog Timeout\nUnsolicited State Change\nInvalid Configuration\nNo Error", "source": "mcs500_programming_manual", "chunk_index": 2183, "length": 361, "hash": "8329bfdef2e75b2432b259d77bfc95a1"}
{"id": "mcs500_programming_manual_2184", "text": "Link is active but\nactivity\nLink is active and there is activity\nLink is inactive\nLink is active but\nactivity\nLink is active and there is activity\nLink is inactive\nOperational\nPre-Operational\nSafe-Operational", "source": "mcs500_programming_manual", "chunk_index": 2184, "length": 208, "hash": "b7a72d244208234a2558ad3b03fa632f"}
{"id": "mcs500_programming_manual_2185", "text": "Initialization or Bootstrap\nInit\nPDI Watchdog Timeout\nBooting Error\nApplication Watchdog Timeout\nUnsolicited State Change\nInvalid Configuration\nNo Error", "source": "mcs500_programming_manual", "chunk_index": 2185, "length": 152, "hash": "90ecc5664e4a477bb1ae3c2a8a833b20"}
{"id": "mcs500_programming_manual_2186", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2186, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2187", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2187, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2188", "text": "The process data objects (PDOs) provide the interface to the application objects. PDOs are\nused to transfer data via cyclic communications in real time. PDOs can be reception PDOs\n(RxPDOs), which receive data from the EtherCAT master (the PLC or the industrial PC), or\ntransmission PDOs (TxPDOs), which send the current value from the slave (the Mecademic\nrobot) to the EtherCAT master. In the previous subsection, we listed the PDOs in the object\ndictionary. PDO assignment is summarized in the next two tables.", "source": "mcs500_programming_manual", "chunk_index": 2188, "length": 512, "hash": "8de864837818b012fb437bcc6b0a4c87"}
{"id": "mcs500_programming_manual_2189", "text": "The process data objects (PDOs) provide the interface to the application objects. PDOs are\nused to transfer data via cyclic communications in real time. PDOs can be reception PDOs\n(RxPDOs), which receive data from the EtherCAT master (the PLC or the industrial PC), or\ntransmission PDOs (TxPDOs), which send the current value from the slave (the Mecademic\nrobot) to the EtherCAT master. In the previous subsection, we listed the PDOs in the object\ndictionary. PDO assignment is summarized in the next two tables.", "source": "mcs500_programming_manual", "chunk_index": 2189, "length": 512, "hash": "8de864837818b012fb437bcc6b0a4c87"}
{"id": "mcs500_programming_manual_2190", "text": "RobotControl\nMotionControl", "source": "mcs500_programming_manual", "chunk_index": 2190, "length": 26, "hash": "63579e8736764bf504f83f0878b7576d"}
{"id": "mcs500_programming_manual_2191", "text": "RobotControl\nMotionControl", "source": "mcs500_programming_manual", "chunk_index": 2191, "length": 26, "hash": "63579e8736764bf504f83f0878b7576d"}
{"id": "mcs500_programming_manual_2192", "text": "Mandatory. See Table 4.\n1600h 7200h\nMandatory. See Table 5.\n1601h 7310h\nMandatory. See Table 6.\n1602h 7305h, 7306h Movement\nMandatory. See Table 9.\nHostTime\n1610h 7400h\nBrakesControl\n1611h 7410h\nMandatory. See Table 10.\nDynamicDataConfiguration 1 Mandatory. See Table 11.\n1620h 7420h\nDynamicDataConfiguration 2 Mandatory. See Table 11.\n1621h 7421h\nDynamicDataConfiguration 3 Mandatory. See Table 11.\n1622h 7422h\nDynamicDataConfiguration 4 Mandatory. See Table 11.\n1623h 7423h", "source": "mcs500_programming_manual", "chunk_index": 2192, "length": 475, "hash": "a468c52f148a3df7594c61fae65f431a"}
{"id": "mcs500_programming_manual_2193", "text": "Mandatory. See Table 4.\n1600h 7200h\nMandatory. See Table 5.\n1601h 7310h\nMandatory. See Table 6.\n1602h 7305h, 7306h Movement", "source": "mcs500_programming_manual", "chunk_index": 2193, "length": 123, "hash": "46564708a53cb5b96e18835632de290f"}
{"id": "mcs500_programming_manual_2194", "text": "Mandatory. See Table 9.\nHostTime\n1610h 7400h\nBrakesControl\n1611h 7410h\nMandatory. See Table 10.\nDynamicDataConfiguration 1 Mandatory. See Table 11.\n1620h 7420h\nDynamicDataConfiguration 2 Mandatory. See Table 11.\n1621h 7421h\nDynamicDataConfiguration 3 Mandatory. See Table 11.\n1622h 7422h\nDynamicDataConfiguration 4 Mandatory. See Table 11.\n1623h 7423h", "source": "mcs500_programming_manual", "chunk_index": 2194, "length": 351, "hash": "ce263e3d29612fd27f31e101d856b9b5"}
{"id": "mcs500_programming_manual_2195", "text": "1A00h 6010h RobotStatus\nMandatory. See Table 13.\n1A01h 6015h MotionStatus\nMandatory. See Table 14.\nMandatory. See Table 15.\n1A02h 6030h TargetJointSet\n1A03h 6031h TargetEndEffectorPose Mandatory. See Table 16.\nMandatory. See Table 17.\n1A08h 6046h TargetConfiguration\nMandatory. See Table 18.\n1A09h 6050h WRF\nMandatory. See Table 19.\n1A0Ah 6051h TRF\nMandatory. See Table 20.\n1A10h 6060h RobotTimestamp\nMandatory. See Table 21.\n1A11h 6065h SafetyStatus\nMandatory. See Table 22.\n1A20h 6070h DynamicData index 0\nMandatory. See Table 23.\n1A21h 6071h DynamicData index 1\nMandatory. See Table 24.\n1A22h 6072h DynamicData index 2\nMandatory. See Table 25.\n1A23h 6073h DynamicData index 3", "source": "mcs500_programming_manual", "chunk_index": 2195, "length": 678, "hash": "3d984ad5d53d4a483196f9881b655b92"}
{"id": "mcs500_programming_manual_2196", "text": "1A00h 6010h RobotStatus\nMandatory. See Table 13.\n1A01h 6015h MotionStatus\nMandatory. See Table 14.\nMandatory. See Table 15.\n1A02h 6030h TargetJointSet\n1A03h 6031h TargetEndEffectorPose Mandatory. See Table 16.\nMandatory. See Table 17.\n1A08h 6046h TargetConfiguration\nMandatory. See Table 18.\n1A09h 6050h WRF", "source": "mcs500_programming_manual", "chunk_index": 2196, "length": 307, "hash": "6962f9550fbbe5a1322723db415eb078"}
{"id": "mcs500_programming_manual_2197", "text": "Mandatory. See Table 19.\n1A0Ah 6051h TRF\nMandatory. See Table 20.\n1A10h 6060h RobotTimestamp\nMandatory. See Table 21.\n1A11h 6065h SafetyStatus\nMandatory. See Table 22.\n1A20h 6070h DynamicData index 0\nMandatory. See Table 23.\n1A21h 6071h DynamicData index 1\nMandatory. See Table 24.\n1A22h 6072h DynamicData index 2\nMandatory. See Table 25.\n1A23h 6073h DynamicData index 3", "source": "mcs500_programming_manual", "chunk_index": 2197, "length": 370, "hash": "7a2ff418f8f9615fbadc906a890799ae"}
{"id": "mcs500_programming_manual_2198", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2198, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2199", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2199, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2200", "text": "Using the PDO data to control and monitor Mecademic robots with EtherCAT is explained in\nSection 5 of this manual.", "source": "mcs500_programming_manual", "chunk_index": 2200, "length": 114, "hash": "508894db5804e3e6bb6a4450b06dd1ef"}
{"id": "mcs500_programming_manual_2201", "text": "Using the PDO data to control and monitor Mecademic robots with EtherCAT is explained in\nSection 5 of this manual.", "source": "mcs500_programming_manual", "chunk_index": 2201, "length": 114, "hash": "508894db5804e3e6bb6a4450b06dd1ef"}
{"id": "mcs500_programming_manual_2202", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "mcs500_programming_manual", "chunk_index": 2202, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "mcs500_programming_manual_2203", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "mcs500_programming_manual", "chunk_index": 2203, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "mcs500_programming_manual_2204", "text": "Please refer to the robot\u2019s ESI file (page 100) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 2204, "length": 162, "hash": "0a82d7d9289f43cb8cbce2dff6a1b899"}
{"id": "mcs500_programming_manual_2205", "text": "Please refer to the robot\u2019s", "source": "mcs500_programming_manual", "chunk_index": 2205, "length": 27, "hash": "52b21299adf016c5aea4dbeeeb0288b4"}
{"id": "mcs500_programming_manual_2206", "text": "(page 100) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 2206, "length": 125, "hash": "a899f554f3e406b7e2cbbaa3e59a41e3"}
{"id": "mcs500_programming_manual_2207", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "mcs500_programming_manual", "chunk_index": 2207, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "mcs500_programming_manual_2208", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "mcs500_programming_manual", "chunk_index": 2208, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "mcs500_programming_manual_2209", "text": "EtherNet/IP communication", "source": "mcs500_programming_manual", "chunk_index": 2209, "length": 25, "hash": "b1478d92e84bb7928b156a779fe78b6b"}
{"id": "mcs500_programming_manual_2210", "text": "EtherNet/IP communication", "source": "mcs500_programming_manual", "chunk_index": 2210, "length": 25, "hash": "b1478d92e84bb7928b156a779fe78b6b"}
{"id": "mcs500_programming_manual_2211", "text": "Mecademic robots are compatible with the EtherNet/IP protocol. The MCS500 is certified\nby ODVA. A common industry standard, EtherNet/IP can be used with many different PLC\nbrands. Tested to work at 10 ms, faster response times are also possible. Our robots typically\nuse implicit (cyclic) messaging.", "source": "mcs500_programming_manual", "chunk_index": 2211, "length": 299, "hash": "e6f1aaf059a859abdc6ab39190deb74b"}
{"id": "mcs500_programming_manual_2212", "text": "Mecademic robots are compatible with the EtherNet/IP protocol. The MCS500 is certified\nby ODVA. A common industry standard, EtherNet/IP can be used with many different PLC\nbrands. Tested to work at 10 ms, faster response times are also possible. Our robots typically\nuse implicit (cyclic) messaging.", "source": "mcs500_programming_manual", "chunk_index": 2212, "length": 299, "hash": "e6f1aaf059a859abdc6ab39190deb74b"}
{"id": "mcs500_programming_manual_2213", "text": "Refer to our Support Center for specific PLC examples.", "source": "mcs500_programming_manual", "chunk_index": 2213, "length": 54, "hash": "8658a8522a1a7b4d0c2da0e17d0a4e80"}
{"id": "mcs500_programming_manual_2214", "text": "Refer to our Support Center for specific PLC examples.", "source": "mcs500_programming_manual", "chunk_index": 2214, "length": 54, "hash": "8658a8522a1a7b4d0c2da0e17d0a4e80"}
{"id": "mcs500_programming_manual_2215", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2215, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2216", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2216, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2217", "text": "When using EtherNet/IP, you can connect several Mecademic robots in the same way as with\nTCP/IP. Either Ethernet port on the robot can be used. The robots can either be daisy-chained\ntogether or connected in a star pattern. The two ports on the Mecademic robot act as a switch\nin EtherNet/IP mode.", "source": "mcs500_programming_manual", "chunk_index": 2217, "length": 297, "hash": "424f62160c3a4940a47736bb9f9dc3d1"}
{"id": "mcs500_programming_manual_2218", "text": "When using EtherNet/IP, you can connect several Mecademic robots in the same way as with\nTCP/IP. Either Ethernet port on the robot can be used. The robots can either be daisy-chained\ntogether or connected in a star pattern. The two ports on the Mecademic robot act as a switch\nin EtherNet/IP mode.", "source": "mcs500_programming_manual", "chunk_index": 2218, "length": 297, "hash": "424f62160c3a4940a47736bb9f9dc3d1"}
{"id": "mcs500_programming_manual_2219", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2219, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2220", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2220, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2221", "text": "Each EtherNet/IP slave device is described by an Electronic Data Sheet (EDS) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherNet/IP controllers (PLC)\nuse this file to properly identify detected EtherNet/IP slave devices, such as a Mecademic\nrobot.", "source": "mcs500_programming_manual", "chunk_index": 2221, "length": 276, "hash": "f6b21121ce9486de44a6a9031e8449c1"}
{"id": "mcs500_programming_manual_2222", "text": "Each EtherNet/IP slave device is described by an Electronic Data Sheet (EDS) file that\ndescribes its identity, capabilities, and cyclic payload. The EtherNet/IP controllers (PLC)\nuse this file to properly identify detected EtherNet/IP slave devices, such as a Mecademic\nrobot.", "source": "mcs500_programming_manual", "chunk_index": 2222, "length": 276, "hash": "f6b21121ce9486de44a6a9031e8449c1"}
{"id": "mcs500_programming_manual_2223", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "mcs500_programming_manual", "chunk_index": 2223, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "mcs500_programming_manual_2224", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "mcs500_programming_manual", "chunk_index": 2224, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "mcs500_programming_manual_2225", "text": "(Mcs500_vX.X.X.X.eds).", "source": "mcs500_programming_manual", "chunk_index": 2225, "length": 22, "hash": "d9a95fc4adf135afa7ea64bd3183a70a"}
{"id": "mcs500_programming_manual_2226", "text": "(Mcs500_vX.X.X.X.eds).", "source": "mcs500_programming_manual", "chunk_index": 2226, "length": 22, "hash": "d9a95fc4adf135afa7ea64bd3183a70a"}
{"id": "mcs500_programming_manual_2227", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2227, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2228", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2228, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2229", "text": "Forward open exclusivity", "source": "mcs500_programming_manual", "chunk_index": 2229, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "mcs500_programming_manual_2230", "text": "Forward open exclusivity", "source": "mcs500_programming_manual", "chunk_index": 2230, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "mcs500_programming_manual_2231", "text": "A Mecademic robot allows only one controlling connection at a time (either a TCP/IP\nconnection or through an EtherNet/IP forward-open request).", "source": "mcs500_programming_manual", "chunk_index": 2231, "length": 143, "hash": "a9b76cb76dc3f6ae52c5c9cc14b5ebcc"}
{"id": "mcs500_programming_manual_2232", "text": "A Mecademic robot allows only one controlling connection at a time (either a TCP/IP\nconnection or through an EtherNet/IP forward-open request).", "source": "mcs500_programming_manual", "chunk_index": 2232, "length": 143, "hash": "a9b76cb76dc3f6ae52c5c9cc14b5ebcc"}
{"id": "mcs500_programming_manual_2233", "text": "If the robot is already being controlled, it will refuse a forward-open request with status\nerror 0x106, Ownership Conflict, in EtherNet/IP. It will refuse a TCP/IP connection with error\n[3001]. However, the web interface can still be used in monitoring mode.", "source": "mcs500_programming_manual", "chunk_index": 2233, "length": 259, "hash": "c07df4f30ba528425e27cfb4c353fe8c"}
{"id": "mcs500_programming_manual_2234", "text": "If the robot is already being controlled, it will refuse a forward-open request with status\nerror 0x106, Ownership Conflict, in EtherNet/IP. It will refuse a TCP/IP connection with error\n[3001]. However, the web interface can still be used in monitoring mode.", "source": "mcs500_programming_manual", "chunk_index": 2234, "length": 259, "hash": "c07df4f30ba528425e27cfb4c353fe8c"}
{"id": "mcs500_programming_manual_2235", "text": "Forward open exclusivity", "source": "mcs500_programming_manual", "chunk_index": 2235, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "mcs500_programming_manual_2236", "text": "Forward open exclusivity", "source": "mcs500_programming_manual", "chunk_index": 2236, "length": 24, "hash": "a59330cedf6ac84bbfb9934bcef04ac3"}
{"id": "mcs500_programming_manual_2237", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2237, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2238", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2238, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2239", "text": "Enabling Ethernet/IP", "source": "mcs500_programming_manual", "chunk_index": 2239, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "mcs500_programming_manual_2240", "text": "Enabling Ethernet/IP", "source": "mcs500_programming_manual", "chunk_index": 2240, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "mcs500_programming_manual_2241", "text": "The Ethernet/IP protocol can be enabled using the Network configuration panel in the\nMecaPortal configuration menu.", "source": "mcs500_programming_manual", "chunk_index": 2241, "length": 115, "hash": "0550b93e975201a7f7bcdd957ac29ed1"}
{"id": "mcs500_programming_manual_2242", "text": "The Ethernet/IP protocol can be enabled using the", "source": "mcs500_programming_manual", "chunk_index": 2242, "length": 49, "hash": "1fddafeb1fa9b6887030742400f9eeaf"}
{"id": "mcs500_programming_manual_2243", "text": "Network configuration", "source": "mcs500_programming_manual", "chunk_index": 2243, "length": 21, "hash": "5dd57c2a315d3af44c2eb40eefc47111"}
{"id": "mcs500_programming_manual_2244", "text": "panel in the\nMecaPortal configuration menu.", "source": "mcs500_programming_manual", "chunk_index": 2244, "length": 43, "hash": "02c4797d0fcd577920030375f0f51ea5"}
{"id": "mcs500_programming_manual_2245", "text": "Alternatively, you can use the EnableEtherNetIp() (page 177) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the TCP/IP API (page 18).", "source": "mcs500_programming_manual", "chunk_index": 2245, "length": 171, "hash": "a2ad33dd3d3120d3921310721c7e36f8"}
{"id": "mcs500_programming_manual_2246", "text": "Alternatively, you can use the", "source": "mcs500_programming_manual", "chunk_index": 2246, "length": 30, "hash": "1830f37443a4f1c50e7e68a474a82af8"}
{"id": "mcs500_programming_manual_2247", "text": "(page 177) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the", "source": "mcs500_programming_manual", "chunk_index": 2247, "length": 99, "hash": "bfc5206c9b4edbf37bc42f37ccc85373"}
{"id": "mcs500_programming_manual_2248", "text": "This is a persistent configuration and only needs to be set once.", "source": "mcs500_programming_manual", "chunk_index": 2248, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "mcs500_programming_manual_2249", "text": "This is a persistent configuration and only needs to be set once.", "source": "mcs500_programming_manual", "chunk_index": 2249, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "mcs500_programming_manual_2250", "text": "Note that Ethernet/IP can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the SwitchToEtherCAT (page 207) command.", "source": "mcs500_programming_manual", "chunk_index": 2250, "length": 176, "hash": "f800359477ac3d2e177ea2f16f4c5be9"}
{"id": "mcs500_programming_manual_2251", "text": "Note that Ethernet/IP can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the", "source": "mcs500_programming_manual", "chunk_index": 2251, "length": 139, "hash": "a20e95b0e0b3fca71f80a54e381113b5"}
{"id": "mcs500_programming_manual_2252", "text": "Enabling Ethernet/IP", "source": "mcs500_programming_manual", "chunk_index": 2252, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "mcs500_programming_manual_2253", "text": "Enabling Ethernet/IP", "source": "mcs500_programming_manual", "chunk_index": 2253, "length": 20, "hash": "8b7b63845d764983c6635e0490fe8afb"}
{"id": "mcs500_programming_manual_2254", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2254, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2255", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2255, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2256", "text": "Using cyclic data to control and monitor Mecademic robots with Ethernet/IP is explained in\nSection 5 of this manual.", "source": "mcs500_programming_manual", "chunk_index": 2256, "length": 116, "hash": "029467195209de80682a2f03055f40b3"}
{"id": "mcs500_programming_manual_2257", "text": "Using cyclic data to control and monitor Mecademic robots with Ethernet/IP is explained in\nSection 5 of this manual.", "source": "mcs500_programming_manual", "chunk_index": 2257, "length": 116, "hash": "029467195209de80682a2f03055f40b3"}
{"id": "mcs500_programming_manual_2258", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "mcs500_programming_manual", "chunk_index": 2258, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "mcs500_programming_manual_2259", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "mcs500_programming_manual", "chunk_index": 2259, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "mcs500_programming_manual_2260", "text": "Please refer to the robot\u2019s EDS file (page 106) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 2260, "length": 162, "hash": "8338e5594a9f9bc3932fa39079915fd4"}
{"id": "mcs500_programming_manual_2261", "text": "Please refer to the robot\u2019s", "source": "mcs500_programming_manual", "chunk_index": 2261, "length": 27, "hash": "52b21299adf016c5aea4dbeeeb0288b4"}
{"id": "mcs500_programming_manual_2262", "text": "(page 106) for the list of cyclic input/output fields. Refer\nto Section 5 for instructions on how to use these cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 2262, "length": 125, "hash": "0a61ba6e6f1e5c609ace16e490c2b9e6"}
{"id": "mcs500_programming_manual_2263", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "mcs500_programming_manual", "chunk_index": 2263, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "mcs500_programming_manual_2264", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "mcs500_programming_manual", "chunk_index": 2264, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "mcs500_programming_manual_2265", "text": "PROFINET communication", "source": "mcs500_programming_manual", "chunk_index": 2265, "length": 22, "hash": "9e93f5175238ae043cc3674271282f01"}
{"id": "mcs500_programming_manual_2266", "text": "PROFINET communication", "source": "mcs500_programming_manual", "chunk_index": 2266, "length": 22, "hash": "9e93f5175238ae043cc3674271282f01"}
{"id": "mcs500_programming_manual_2267", "text": "Mecademic robots are compatible with the PROFINET protocol, a common industry\nstandard that can be used with many different PLC brands. The MCS500 is certified by\nPROFIBUS. Cyclic times up to 1 ms (though not as \u201chard-real-time\u201d as EtherCAT) are\npossible. PROFINET\u2014like EtherCAT or EtherNet/IP protocols\u2014controls the robot using\ncyclic messaging (\u2018CR Input\u2019 and \u2018CR Output\u2019 in PROFINET terms).", "source": "mcs500_programming_manual", "chunk_index": 2267, "length": 393, "hash": "8f925aa45ec48420bff1ef9c725a3ec2"}
{"id": "mcs500_programming_manual_2268", "text": "Mecademic robots are compatible with the PROFINET protocol, a common industry\nstandard that can be used with many different PLC brands. The MCS500 is certified by\nPROFIBUS. Cyclic times up to 1 ms (though not as \u201chard-real-time\u201d as EtherCAT) are\npossible. PROFINET\u2014like EtherCAT or EtherNet/IP protocols\u2014controls the robot using\ncyclic messaging (\u2018CR Input\u2019 and \u2018CR Output\u2019 in PROFINET terms).", "source": "mcs500_programming_manual", "chunk_index": 2268, "length": 393, "hash": "8f925aa45ec48420bff1ef9c725a3ec2"}
{"id": "mcs500_programming_manual_2269", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2269, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2270", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2270, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2271", "text": "PROFINET conformance class", "source": "mcs500_programming_manual", "chunk_index": 2271, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "mcs500_programming_manual_2272", "text": "PROFINET conformance class", "source": "mcs500_programming_manual", "chunk_index": 2272, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "mcs500_programming_manual_2273", "text": "The Mecademic robots PROFINET stack conforms to class-A, as described in the GSDML file\n(page 115).", "source": "mcs500_programming_manual", "chunk_index": 2273, "length": 99, "hash": "dcf7613d15a5aafc030acb5067db169b"}
{"id": "mcs500_programming_manual_2274", "text": "The Mecademic robots PROFINET stack conforms to class-A, as described in the", "source": "mcs500_programming_manual", "chunk_index": 2274, "length": 76, "hash": "06d68b10ddfc91c63573f53335f9cd92"}
{"id": "mcs500_programming_manual_2275", "text": "PROFINET limitations on Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 2275, "length": 40, "hash": "3f3bb7d1baf9e4b73c7eb28024c8a643"}
{"id": "mcs500_programming_manual_2276", "text": "PROFINET limitations on Mecademic robots", "source": "mcs500_programming_manual", "chunk_index": 2276, "length": 40, "hash": "3f3bb7d1baf9e4b73c7eb28024c8a643"}
{"id": "mcs500_programming_manual_2277", "text": "Mecademic robots do not support the following PROFINET features:", "source": "mcs500_programming_manual", "chunk_index": 2277, "length": 64, "hash": "aa84e54a1ab13ab3279a17f36ab6f26d"}
{"id": "mcs500_programming_manual_2278", "text": "Mecademic robots do not support the following PROFINET features:", "source": "mcs500_programming_manual", "chunk_index": 2278, "length": 64, "hash": "aa84e54a1ab13ab3279a17f36ab6f26d"}
{"id": "mcs500_programming_manual_2279", "text": "\u2022 Startup mode: legacy startup mode (only advanced startup mode is supported).", "source": "mcs500_programming_manual", "chunk_index": 2279, "length": 78, "hash": "ce93859ed0a40fa8aee3527a042dfbc4"}
{"id": "mcs500_programming_manual_2280", "text": "\u2022 Startup mode: legacy startup mode (only advanced startup mode is supported).", "source": "mcs500_programming_manual", "chunk_index": 2280, "length": 78, "hash": "ce93859ed0a40fa8aee3527a042dfbc4"}
{"id": "mcs500_programming_manual_2281", "text": "\u2022 SNMP: part of PROFINET conformance class B (the robot supports class A only).", "source": "mcs500_programming_manual", "chunk_index": 2281, "length": 79, "hash": "c5d4ee1a92b3510e6837c87307af66cf"}
{"id": "mcs500_programming_manual_2282", "text": "\u2022 SNMP: part of PROFINET conformance class B (the robot supports class A only).", "source": "mcs500_programming_manual", "chunk_index": 2282, "length": 79, "hash": "c5d4ee1a92b3510e6837c87307af66cf"}
{"id": "mcs500_programming_manual_2283", "text": "\u2022 DHCP: the robot does not support selecting DHCP mode via the PROFINET protocol.\nNote that configuring the robot to use DHCP mode remains possible through the\nMecaPortal.", "source": "mcs500_programming_manual", "chunk_index": 2283, "length": 171, "hash": "10f8c48d019cf9d73575dc60d5210938"}
{"id": "mcs500_programming_manual_2284", "text": "\u2022 DHCP: the robot does not support selecting DHCP mode via the PROFINET protocol.\nNote that configuring the robot to use DHCP mode remains possible through the\nMecaPortal.", "source": "mcs500_programming_manual", "chunk_index": 2284, "length": 171, "hash": "10f8c48d019cf9d73575dc60d5210938"}
{"id": "mcs500_programming_manual_2285", "text": "PROFINET conformance class", "source": "mcs500_programming_manual", "chunk_index": 2285, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "mcs500_programming_manual_2286", "text": "PROFINET conformance class", "source": "mcs500_programming_manual", "chunk_index": 2286, "length": 26, "hash": "dcef3fbfd9129010138488d3f9a9d1eb"}
{"id": "mcs500_programming_manual_2287", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2287, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2288", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2288, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2289", "text": "When using PROFINET, you can connect several Mecademic robots, just like with TCP/IP.\nEither Ethernet port on the robot can be used. The robots can be either daisy-chained\ntogether or connected in a star pattern.", "source": "mcs500_programming_manual", "chunk_index": 2289, "length": 212, "hash": "b1a2a1fcba7702d6c0315f72f3a67deb"}
{"id": "mcs500_programming_manual_2290", "text": "When using PROFINET, you can connect several Mecademic robots, just like with TCP/IP.\nEither Ethernet port on the robot can be used. The robots can be either daisy-chained\ntogether or connected in a star pattern.", "source": "mcs500_programming_manual", "chunk_index": 2290, "length": 212, "hash": "b1a2a1fcba7702d6c0315f72f3a67deb"}
{"id": "mcs500_programming_manual_2291", "text": "Limitations when daisy-chaining robots", "source": "mcs500_programming_manual", "chunk_index": 2291, "length": 38, "hash": "ea1e5597d8ca88e0df9e8ffa3eca1972"}
{"id": "mcs500_programming_manual_2292", "text": "Limitations when daisy-chaining robots", "source": "mcs500_programming_manual", "chunk_index": 2292, "length": 38, "hash": "ea1e5597d8ca88e0df9e8ffa3eca1972"}
{"id": "mcs500_programming_manual_2293", "text": "Please note that the two Ethernet ports on the robot act as an unmanaged Ethernet switch, not\nas a \u201cPROFINET-aware\u201d switch. In fact, this Ethernet switch will not respond to LLDP (Local\nLink Discovery Protocol) packets like a PROFINET-enabled switch would (instead, it forwards\nLLDP through the daisy chain). As a consequence, the LLDP protocol will not properly identify\nthe network topology when the two Ethernet ports of the robots are connected (in a daisy-\nchain configuration, for example). Fortunately, this does not prevent the use of the PROFINET\nprotocol, since daisy-chained robots will still be detected by the PROFINET controller.", "source": "mcs500_programming_manual", "chunk_index": 2293, "length": 643, "hash": "41ba1f47b50810163ca279b44cea4c7b"}
{"id": "mcs500_programming_manual_2294", "text": "Please note that the two Ethernet ports on the robot act as an unmanaged Ethernet switch, not\nas a \u201cPROFINET-aware\u201d switch. In fact, this Ethernet switch will not respond to LLDP (Local\nLink Discovery Protocol) packets like a PROFINET-enabled switch would (instead, it forwards\nLLDP through the daisy chain). As a consequence, the LLDP protocol will not properly identify\nthe network topology when the two Ethernet ports of the robots are connected (in a daisy-\nchain configuration, for example). Fortunately, this does not prevent the use of the PROFINET", "source": "mcs500_programming_manual", "chunk_index": 2294, "length": 555, "hash": "a76a65e23c18955568eca721362b35c8"}
{"id": "mcs500_programming_manual_2295", "text": "protocol, since daisy-chained robots will still be detected by the PROFINET controller.", "source": "mcs500_programming_manual", "chunk_index": 2295, "length": 87, "hash": "fbfcb82f8d12bd3d1ce562f4ee1d2f72"}
{"id": "mcs500_programming_manual_2296", "text": "If you need full network topology discovery using LLDP, we recommend connecting the robot\nto a PROFINET-enabled Ethernet switch rather than in a daisy chain.", "source": "mcs500_programming_manual", "chunk_index": 2296, "length": 157, "hash": "dc15cfdf6e772cb13c60753d1e9a1c43"}
{"id": "mcs500_programming_manual_2297", "text": "If you need full network topology discovery using LLDP, we recommend connecting the robot\nto a PROFINET-enabled Ethernet switch rather than in a daisy chain.", "source": "mcs500_programming_manual", "chunk_index": 2297, "length": 157, "hash": "dc15cfdf6e772cb13c60753d1e9a1c43"}
{"id": "mcs500_programming_manual_2298", "text": "PROFINET protocol over your Ethernet network", "source": "mcs500_programming_manual", "chunk_index": 2298, "length": 44, "hash": "2b4c76760b7a9551613ab9886bbf03c7"}
{"id": "mcs500_programming_manual_2299", "text": "PROFINET protocol over your Ethernet network", "source": "mcs500_programming_manual", "chunk_index": 2299, "length": 44, "hash": "2b4c76760b7a9551613ab9886bbf03c7"}
{"id": "mcs500_programming_manual_2300", "text": "The PROFINET protocol uses non-IP packets to communicate real-time data over the Ethernet\nnetwork. Please ensure that your Ethernet network and switches are properly forwarding\nthese packets between the PROFINET controller (PLC) and the Mecademic robots.", "source": "mcs500_programming_manual", "chunk_index": 2300, "length": 254, "hash": "80ae7a9aa7a97a3e10d669ce501cb9b2"}
{"id": "mcs500_programming_manual_2301", "text": "The PROFINET protocol uses non-IP packets to communicate real-time data over the Ethernet\nnetwork. Please ensure that your Ethernet network and switches are properly forwarding\nthese packets between the PROFINET controller (PLC) and the Mecademic robots.", "source": "mcs500_programming_manual", "chunk_index": 2301, "length": 254, "hash": "80ae7a9aa7a97a3e10d669ce501cb9b2"}
{"id": "mcs500_programming_manual_2302", "text": "Ethernet packets of type LLDP (0x88CC) are used for the LLDP protocol. This protocol makes\nit possible to discover the network topology.", "source": "mcs500_programming_manual", "chunk_index": 2302, "length": 136, "hash": "18346f84599095c89e2a03e1ad3f84d9"}
{"id": "mcs500_programming_manual_2303", "text": "Ethernet packets of type LLDP (0x88CC) are used for the LLDP protocol. This protocol makes\nit possible to discover the network topology.", "source": "mcs500_programming_manual", "chunk_index": 2303, "length": 136, "hash": "18346f84599095c89e2a03e1ad3f84d9"}
{"id": "mcs500_programming_manual_2304", "text": "Ethernet packets of type PN-DCP (0x8892) are used for the DCP protocol (Discovery and\nConfiguration Protocol). This protocol is used to discover PROFINET devices on the network.\nIt is also used to set host names and IP addresses to detect PROFINET devices.", "source": "mcs500_programming_manual", "chunk_index": 2304, "length": 256, "hash": "89c03636a6c5fe2b0ee96cf26c336afa"}
{"id": "mcs500_programming_manual_2305", "text": "Ethernet packets of type PN-DCP (0x8892) are used for the DCP protocol (Discovery and\nConfiguration Protocol). This protocol is used to discover PROFINET devices on the network.\nIt is also used to set host names and IP addresses to detect PROFINET devices.", "source": "mcs500_programming_manual", "chunk_index": 2305, "length": 256, "hash": "89c03636a6c5fe2b0ee96cf26c336afa"}
{"id": "mcs500_programming_manual_2306", "text": "Ethernet packets of type PROFINET RT (0x8892) are used for PROFINET cyclic data\nexchanges between the Mecademic robots and the PROFINET controller (PLC).", "source": "mcs500_programming_manual", "chunk_index": 2306, "length": 153, "hash": "94baf1a163f0f9ebe5ae12984b8a1421"}
{"id": "mcs500_programming_manual_2307", "text": "Ethernet packets of type PROFINET RT (0x8892) are used for PROFINET cyclic data\nexchanges between the Mecademic robots and the PROFINET controller (PLC).", "source": "mcs500_programming_manual", "chunk_index": 2307, "length": 153, "hash": "94baf1a163f0f9ebe5ae12984b8a1421"}
{"id": "mcs500_programming_manual_2308", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2308, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2309", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2309, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2310", "text": "The PROFINET protocol can enabled using the Network\nMecaPortal configuration menu.", "source": "mcs500_programming_manual", "chunk_index": 2310, "length": 82, "hash": "d3308e7a25e38b0b0cbb073f4084bd7a"}
{"id": "mcs500_programming_manual_2311", "text": "The PROFINET protocol can enabled using the", "source": "mcs500_programming_manual", "chunk_index": 2311, "length": 43, "hash": "8afced58a097d4063b06520f4abd37b8"}
{"id": "mcs500_programming_manual_2312", "text": "MecaPortal configuration menu.", "source": "mcs500_programming_manual", "chunk_index": 2312, "length": 30, "hash": "3577209debb39fd8685bcf5242843917"}
{"id": "mcs500_programming_manual_2313", "text": "Alternatively, you can use the EnableProfinet() (page 178) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the TCP/IP API (page 18).", "source": "mcs500_programming_manual", "chunk_index": 2313, "length": 169, "hash": "76517cd21546bcc5bb81a4b97d73ac2e"}
{"id": "mcs500_programming_manual_2314", "text": "Alternatively, you can use the", "source": "mcs500_programming_manual", "chunk_index": 2314, "length": 30, "hash": "1830f37443a4f1c50e7e68a474a82af8"}
{"id": "mcs500_programming_manual_2315", "text": "(page 178) command, which can be entered\nin the MecaPortal code editor or sent to the robot via the", "source": "mcs500_programming_manual", "chunk_index": 2315, "length": 99, "hash": "516dc0f9aae0ea0be4c4009711d5254d"}
{"id": "mcs500_programming_manual_2316", "text": "This is a persistent configuration and only needs to be set once.", "source": "mcs500_programming_manual", "chunk_index": 2316, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "mcs500_programming_manual_2317", "text": "This is a persistent configuration and only needs to be set once.", "source": "mcs500_programming_manual", "chunk_index": 2317, "length": 65, "hash": "3570409ab87076a84d228166b3ddb488"}
{"id": "mcs500_programming_manual_2318", "text": "Note that PROFINET can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the SwitchToEtherCAT (page 207) command.", "source": "mcs500_programming_manual", "chunk_index": 2318, "length": 173, "hash": "e092a2f1e3814663e3435f834cde1c4a"}
{"id": "mcs500_programming_manual_2319", "text": "Note that PROFINET can remain permanently enabled, as it does not interfere with the use\nof the TCP/IP protocol, unlike EtherCAT and the", "source": "mcs500_programming_manual", "chunk_index": 2319, "length": 136, "hash": "0c2cc8eae5fb29005b8da811467de9b0"}
{"id": "mcs500_programming_manual_2320", "text": "Also note that LLDP forwarding on the robot is enabled only when PROFINET is enabled on\nthe robot (so it will not be possible to detect a robot using LLDP until PROFINET is enabled\non it).", "source": "mcs500_programming_manual", "chunk_index": 2320, "length": 188, "hash": "8d146febbbed1257421f98fd854acf87"}
{"id": "mcs500_programming_manual_2321", "text": "Also note that LLDP forwarding on the robot is enabled only when PROFINET is enabled on\nthe robot (so it will not be possible to detect a robot using LLDP until PROFINET is enabled\non it).", "source": "mcs500_programming_manual", "chunk_index": 2321, "length": 188, "hash": "8d146febbbed1257421f98fd854acf87"}
{"id": "mcs500_programming_manual_2322", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2322, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2323", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2323, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2324", "text": "Only one AR (Application Relationship) can be established with the robot. Only one\nPROFINET controller (PLC) can control a Mecademic robot.", "source": "mcs500_programming_manual", "chunk_index": 2324, "length": 139, "hash": "2fb3f5543963dedb8e32e6aa7252ee0e"}
{"id": "mcs500_programming_manual_2325", "text": "Only one AR (Application Relationship) can be established with the robot. Only one\nPROFINET controller (PLC) can control a Mecademic robot.", "source": "mcs500_programming_manual", "chunk_index": 2325, "length": 139, "hash": "2fb3f5543963dedb8e32e6aa7252ee0e"}
{"id": "mcs500_programming_manual_2326", "text": "Controlling the robot is also exclusive between TCP/IP, EtherNet/IP, and PROFINET protocols.\nThe first connection to the robot on any of these cyclic protocols will prevent any other\nconnections on any protocol.", "source": "mcs500_programming_manual", "chunk_index": 2326, "length": 211, "hash": "0409fa091f08c71f1b1f010e2b01ed38"}
{"id": "mcs500_programming_manual_2327", "text": "Controlling the robot is also exclusive between TCP/IP, EtherNet/IP, and PROFINET protocols.\nThe first connection to the robot on any of these cyclic protocols will prevent any other\nconnections on any protocol.", "source": "mcs500_programming_manual", "chunk_index": 2327, "length": 211, "hash": "0409fa091f08c71f1b1f010e2b01ed38"}
{"id": "mcs500_programming_manual_2328", "text": "If a PROFINET connection request is refused because the robot is already being controlled\nby another PROFINET controller (PLC), the refused connect request will be returned with\nstandard error codes and the following values:", "source": "mcs500_programming_manual", "chunk_index": 2328, "length": 224, "hash": "7d6c7e35442ec90de88cb25cf691db8c"}
{"id": "mcs500_programming_manual_2329", "text": "If a PROFINET connection request is refused because the robot is already being controlled\nby another PROFINET controller (PLC), the refused connect request will be returned with\nstandard error codes and the following values:", "source": "mcs500_programming_manual", "chunk_index": 2329, "length": 224, "hash": "7d6c7e35442ec90de88cb25cf691db8c"}
{"id": "mcs500_programming_manual_2330", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "mcs500_programming_manual", "chunk_index": 2330, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "mcs500_programming_manual_2331", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "mcs500_programming_manual", "chunk_index": 2331, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "mcs500_programming_manual_2332", "text": "\u2022 Error decode \u201cPNIO\u201d (0x81)", "source": "mcs500_programming_manual", "chunk_index": 2332, "length": 28, "hash": "8169cc879764537409bed22293af4afa"}
{"id": "mcs500_programming_manual_2333", "text": "\u2022 Error decode \u201cPNIO\u201d (0x81)", "source": "mcs500_programming_manual", "chunk_index": 2333, "length": 28, "hash": "8169cc879764537409bed22293af4afa"}
{"id": "mcs500_programming_manual_2334", "text": "\u2022 Error1 \u201cCMRPC\u201d (0x40)", "source": "mcs500_programming_manual", "chunk_index": 2334, "length": 23, "hash": "05dfe065803b8dd5ff0899c1d80e3f29"}
{"id": "mcs500_programming_manual_2335", "text": "\u2022 Error1 \u201cCMRPC\u201d (0x40)", "source": "mcs500_programming_manual", "chunk_index": 2335, "length": 23, "hash": "05dfe065803b8dd5ff0899c1d80e3f29"}
{"id": "mcs500_programming_manual_2336", "text": "\u2022 Error2 \u201cNo AR resource\u201d (0x04)", "source": "mcs500_programming_manual", "chunk_index": 2336, "length": 32, "hash": "a4978b2f7a517df10f3805ce2926a552"}
{"id": "mcs500_programming_manual_2337", "text": "\u2022 Error2 \u201cNo AR resource\u201d (0x04)", "source": "mcs500_programming_manual", "chunk_index": 2337, "length": 32, "hash": "a4978b2f7a517df10f3805ce2926a552"}
{"id": "mcs500_programming_manual_2338", "text": "If a PROFINET connection request is refused because the robot is already being controlled by\nanother protocol (TCP/IP or EtherNet/IP), the refused connect request will be returned with\na vendor-specific error code and the following values:", "source": "mcs500_programming_manual", "chunk_index": 2338, "length": 239, "hash": "1c6f41ef1317dbcd4e55a1c4620cb690"}
{"id": "mcs500_programming_manual_2339", "text": "If a PROFINET connection request is refused because the robot is already being controlled by\nanother protocol (TCP/IP or EtherNet/IP), the refused connect request will be returned with\na vendor-specific error code and the following values:", "source": "mcs500_programming_manual", "chunk_index": 2339, "length": 239, "hash": "1c6f41ef1317dbcd4e55a1c4620cb690"}
{"id": "mcs500_programming_manual_2340", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "mcs500_programming_manual", "chunk_index": 2340, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "mcs500_programming_manual_2341", "text": "\u2022 Error code \u201cconnect\u201d (0xDB)", "source": "mcs500_programming_manual", "chunk_index": 2341, "length": 29, "hash": "72289e0e2ee081203728b1fe468a942a"}
{"id": "mcs500_programming_manual_2342", "text": "\u2022 Error decode \u201cManufacturer specific\u201d (0x82)", "source": "mcs500_programming_manual", "chunk_index": 2342, "length": 45, "hash": "e7a1437b990bd4ee21aed2fce914731e"}
{"id": "mcs500_programming_manual_2343", "text": "\u2022 Error decode \u201cManufacturer specific\u201d (0x82)", "source": "mcs500_programming_manual", "chunk_index": 2343, "length": 45, "hash": "e7a1437b990bd4ee21aed2fce914731e"}
{"id": "mcs500_programming_manual_2344", "text": "\u2022 Error1 \u201cMecademic Access denied\u201d (0x11)", "source": "mcs500_programming_manual", "chunk_index": 2344, "length": 41, "hash": "1ae1e265df3ad5cf4090c5683909d8ad"}
{"id": "mcs500_programming_manual_2345", "text": "\u2022 Error1 \u201cMecademic Access denied\u201d (0x11)", "source": "mcs500_programming_manual", "chunk_index": 2345, "length": 41, "hash": "1ae1e265df3ad5cf4090c5683909d8ad"}
{"id": "mcs500_programming_manual_2346", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2346, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2347", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2347, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2348", "text": "Each Profinet slave device is described by a GSDML (.xml) file that describes its identity,\ncapabilities, cyclic payload, PROFINET Modules and SubModules that it supports. The\nPROFINET controllers (PLC) use this file to properly identify detected PROFINET slave\ndevices, such as a Mecademic robot.", "source": "mcs500_programming_manual", "chunk_index": 2348, "length": 297, "hash": "dcb7aab7afd9bd3cf3573ba5aba7b4cc"}
{"id": "mcs500_programming_manual_2349", "text": "Each Profinet slave device is described by a GSDML (.xml) file that describes its identity,\ncapabilities, cyclic payload, PROFINET Modules and SubModules that it supports. The\nPROFINET controllers (PLC) use this file to properly identify detected PROFINET slave\ndevices, such as a Mecademic robot.", "source": "mcs500_programming_manual", "chunk_index": 2349, "length": 297, "hash": "dcb7aab7afd9bd3cf3573ba5aba7b4cc"}
{"id": "mcs500_programming_manual_2350", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "mcs500_programming_manual", "chunk_index": 2350, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "mcs500_programming_manual_2351", "text": "It can be found in the zip file that contains your robot\u2019s firmware update package", "source": "mcs500_programming_manual", "chunk_index": 2351, "length": 82, "hash": "5ad03bbdea2e773271620b96a994eadf"}
{"id": "mcs500_programming_manual_2352", "text": "(GSDML-V2.42-Mecademic-mcs500-XXXXXXXX.xml).", "source": "mcs500_programming_manual", "chunk_index": 2352, "length": 44, "hash": "2bb0d40a2fb482ec85aa95347819102b"}
{"id": "mcs500_programming_manual_2353", "text": "(GSDML-V2.42-Mecademic-mcs500-XXXXXXXX.xml).", "source": "mcs500_programming_manual", "chunk_index": 2353, "length": 44, "hash": "2bb0d40a2fb482ec85aa95347819102b"}
{"id": "mcs500_programming_manual_2354", "text": "Since the GSDML file contains necessary information to identify and list the robot capabilities,\nthis manual provides only a quick summary of the GSDML file.", "source": "mcs500_programming_manual", "chunk_index": 2354, "length": 157, "hash": "69dd87f4388d2bfb9a57816feadecce3"}
{"id": "mcs500_programming_manual_2355", "text": "Since the GSDML file contains necessary information to identify and list the robot capabilities,\nthis manual provides only a quick summary of the GSDML file.", "source": "mcs500_programming_manual", "chunk_index": 2355, "length": 157, "hash": "69dd87f4388d2bfb9a57816feadecce3"}
{"id": "mcs500_programming_manual_2356", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2356, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2357", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2357, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2358", "text": "Robot modules and sub-modules", "source": "mcs500_programming_manual", "chunk_index": 2358, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "mcs500_programming_manual_2359", "text": "Robot modules and sub-modules", "source": "mcs500_programming_manual", "chunk_index": 2359, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "mcs500_programming_manual_2360", "text": "The robot supports only one module and one sub-module, fixed in a predefined slot.", "source": "mcs500_programming_manual", "chunk_index": 2360, "length": 82, "hash": "c0e3159208214f250bf472efdf704307"}
{"id": "mcs500_programming_manual_2361", "text": "The robot supports only one module and one sub-module, fixed in a predefined slot.", "source": "mcs500_programming_manual", "chunk_index": 2361, "length": 82, "hash": "c0e3159208214f250bf472efdf704307"}
{"id": "mcs500_programming_manual_2362", "text": "\u2022 Module: \u201cRobotControlModule\u201d, ID=0x32, fixed in slot 1", "source": "mcs500_programming_manual", "chunk_index": 2362, "length": 56, "hash": "918816b7e97c0155bd7738b724ae80ee"}
{"id": "mcs500_programming_manual_2363", "text": "\u2022 Module: \u201cRobotControlModule\u201d, ID=0x32, fixed in slot 1", "source": "mcs500_programming_manual", "chunk_index": 2363, "length": 56, "hash": "918816b7e97c0155bd7738b724ae80ee"}
{"id": "mcs500_programming_manual_2364", "text": "\u2022 Sub-module: ID=0x132, fixed in sub-slot 1", "source": "mcs500_programming_manual", "chunk_index": 2364, "length": 43, "hash": "0e29c1e7e3f74ea42346a9c2f80ab1cb"}
{"id": "mcs500_programming_manual_2365", "text": "\u2022 Sub-module: ID=0x132, fixed in sub-slot 1", "source": "mcs500_programming_manual", "chunk_index": 2365, "length": 43, "hash": "0e29c1e7e3f74ea42346a9c2f80ab1cb"}
{"id": "mcs500_programming_manual_2366", "text": "This module provides fixed cyclic data input and output, used to control and monitor the robot.", "source": "mcs500_programming_manual", "chunk_index": 2366, "length": 95, "hash": "2e3da76b95a3800804063df200e31a91"}
{"id": "mcs500_programming_manual_2367", "text": "This module provides fixed cyclic data input and output, used to control and monitor the robot.", "source": "mcs500_programming_manual", "chunk_index": 2367, "length": 95, "hash": "2e3da76b95a3800804063df200e31a91"}
{"id": "mcs500_programming_manual_2368", "text": "Robot modules and sub-modules", "source": "mcs500_programming_manual", "chunk_index": 2368, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "mcs500_programming_manual_2369", "text": "Robot modules and sub-modules", "source": "mcs500_programming_manual", "chunk_index": 2369, "length": 29, "hash": "605408467a713f944460b16f872fb068"}
{"id": "mcs500_programming_manual_2370", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2370, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2371", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2371, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2372", "text": "Using cyclic data to control and monitor Mecademic robots with PROFINET is explained in\nSection 5 of this manual.", "source": "mcs500_programming_manual", "chunk_index": 2372, "length": 113, "hash": "cfaa488da3350554acfb5b2a90ec0eb1"}
{"id": "mcs500_programming_manual_2373", "text": "Using cyclic data to control and monitor Mecademic robots with PROFINET is explained in\nSection 5 of this manual.", "source": "mcs500_programming_manual", "chunk_index": 2373, "length": 113, "hash": "cfaa488da3350554acfb5b2a90ec0eb1"}
{"id": "mcs500_programming_manual_2374", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "mcs500_programming_manual", "chunk_index": 2374, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "mcs500_programming_manual_2375", "text": "The cyclic data format is the same for PROFINET, EtherNet/IP, and EtherCAT protocols.\nTherefore, it is easy to migrate a robot-controlling application on a controller/PLC between\nthese different protocols.", "source": "mcs500_programming_manual", "chunk_index": 2375, "length": 205, "hash": "a6795fe8de372f60fa3269788e081d60"}
{"id": "mcs500_programming_manual_2376", "text": "Please refer to the robot\u2019s GSDML file (page 115) for the list of cyclic input/output fields.\nRefer to Section 5 for instructions on how to use these cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 2376, "length": 164, "hash": "ecbee960afd46cd882c0f34a6ab3574c"}
{"id": "mcs500_programming_manual_2377", "text": "Please refer to the robot\u2019s", "source": "mcs500_programming_manual", "chunk_index": 2377, "length": 27, "hash": "52b21299adf016c5aea4dbeeeb0288b4"}
{"id": "mcs500_programming_manual_2378", "text": "(page 115) for the list of cyclic input/output fields.\nRefer to Section 5 for instructions on how to use these cyclic fields.", "source": "mcs500_programming_manual", "chunk_index": 2378, "length": 125, "hash": "4d71fca69cfcecd74ff0d0c767e92cb1"}
{"id": "mcs500_programming_manual_2379", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "mcs500_programming_manual", "chunk_index": 2379, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "mcs500_programming_manual_2380", "text": "Note that 16- and 32-bit integer values in the cyclic data use big-endian byte order. Some\nPLCs may need to be configured accordingly.", "source": "mcs500_programming_manual", "chunk_index": 2380, "length": 134, "hash": "c7c8de698198c24cfa2e520bf882dbe4"}
{"id": "mcs500_programming_manual_2381", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2381, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2382", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2382, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2383", "text": "Mecademic robots will not generate any PROFINET alarms. Any alarm or error condition\nwill be reported by the robot through the corresponding cyclic data fields. This allows the\nrobots to behave the same across various cyclic protocols (such as PROFINET, EtherNet/IP,\nor EtherCAT).", "source": "mcs500_programming_manual", "chunk_index": 2383, "length": 280, "hash": "826a6dbc3db9e7b59d621ca0bf61229c"}
{"id": "mcs500_programming_manual_2384", "text": "Mecademic robots will not generate any PROFINET alarms. Any alarm or error condition\nwill be reported by the robot through the corresponding cyclic data fields. This allows the\nrobots to behave the same across various cyclic protocols (such as PROFINET, EtherNet/IP,\nor EtherCAT).", "source": "mcs500_programming_manual", "chunk_index": 2384, "length": 280, "hash": "826a6dbc3db9e7b59d621ca0bf61229c"}
{"id": "mcs500_programming_manual_2385", "text": "Refer to Section 5 for more information about robot status and error states reported in the\ncyclic input data.", "source": "mcs500_programming_manual", "chunk_index": 2385, "length": 110, "hash": "bd4b49b226490842a27497a20c10a26d"}
{"id": "mcs500_programming_manual_2386", "text": "Refer to Section 5 for more information about robot status and error states reported in the\ncyclic input data.", "source": "mcs500_programming_manual", "chunk_index": 2386, "length": 110, "hash": "bd4b49b226490842a27497a20c10a26d"}
{"id": "mcs500_programming_manual_2387", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2387, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2388", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2388, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2389", "text": "From the MecaPortal, you can download three different log files that record state changes,\ncommands sent, responses received, and other data, as described below:", "source": "mcs500_programming_manual", "chunk_index": 2389, "length": 161, "hash": "6634861f8a45defa9fc2d899e6646d3a"}
{"id": "mcs500_programming_manual_2390", "text": "From the MecaPortal, you can download three different log files that record state changes,\ncommands sent, responses received, and other data, as described below:", "source": "mcs500_programming_manual", "chunk_index": 2390, "length": 161, "hash": "6634861f8a45defa9fc2d899e6646d3a"}
{"id": "mcs500_programming_manual_2391", "text": "\u2022 User log (page 341): A simplified log containing user-friendly traces of major events", "source": "mcs500_programming_manual", "chunk_index": 2391, "length": 87, "hash": "645ae7129254b7259f7ab16d1e5ab85d"}
{"id": "mcs500_programming_manual_2392", "text": "(page 341): A simplified log containing user-friendly traces of major events", "source": "mcs500_programming_manual", "chunk_index": 2392, "length": 76, "hash": "9e1d1f6cc7ea6ef44841ae4f7f6638da"}
{"id": "mcs500_programming_manual_2393", "text": "(e.g., robot activation, movement, E-Stop activation).", "source": "mcs500_programming_manual", "chunk_index": 2393, "length": 54, "hash": "91973219b449c5f2eb0083345bb52b84"}
{"id": "mcs500_programming_manual_2394", "text": "(e.g., robot activation, movement, E-Stop activation).", "source": "mcs500_programming_manual", "chunk_index": 2394, "length": 54, "hash": "91973219b449c5f2eb0083345bb52b84"}
{"id": "mcs500_programming_manual_2395", "text": "\u2022 Robot log (page 341): A more detailed version of the user log, intended primarily for the", "source": "mcs500_programming_manual", "chunk_index": 2395, "length": 91, "hash": "d48207456c280f98be45785f37f28f11"}
{"id": "mcs500_programming_manual_2396", "text": "(page 341): A more detailed version of the user log, intended primarily for the", "source": "mcs500_programming_manual", "chunk_index": 2396, "length": 79, "hash": "2b0eeb3d421dbb56d9bea8975ca4875f"}
{"id": "mcs500_programming_manual_2397", "text": "\u2022 Detailed event log (page 339): This file mirrors the content of the event log panel in the\nMecaPortal when in detailed mode, i.e., when all of the options are selected in the event\nlog panel settings menu,", "source": "mcs500_programming_manual", "chunk_index": 2397, "length": 207, "hash": "caeecf7863bd3c6adf96ec7a7a7d44cc"}
{"id": "mcs500_programming_manual_2398", "text": "(page 339): This file mirrors the content of the event log panel in the\nMecaPortal when in detailed mode, i.e., when all of the options are selected in the event\nlog panel settings menu,", "source": "mcs500_programming_manual", "chunk_index": 2398, "length": 186, "hash": "c2fdb7f2350bf792addc275487f18fc0"}
{"id": "mcs500_programming_manual_2399", "text": "Robot log files are stored on the robot\u2019s disk. The user log is also saved on the disk, except for\nthe Meca500 robot, where it is volatile. When a log file exceeds 10 MB, a new file is created,\nand older files are moved to the backup (see next subsection). As a result, some log files may\ncontain only a few lines of data, in which case you may need to check the robot\u2019s backup.", "source": "mcs500_programming_manual", "chunk_index": 2399, "length": 378, "hash": "9b7a7f2d788bac96e9d2a533e0a3e652"}
{"id": "mcs500_programming_manual_2400", "text": "Robot log files are stored on the robot\u2019s disk. The user log is also saved on the disk, except for", "source": "mcs500_programming_manual", "chunk_index": 2400, "length": 98, "hash": "5f22d4dfb86149d00eb71fb2d3bdb09c"}
{"id": "mcs500_programming_manual_2401", "text": "the Meca500 robot, where it is volatile. When a log file exceeds 10 MB, a new file is created,\nand older files are moved to the backup (see next subsection). As a result, some log files may\ncontain only a few lines of data, in which case you may need to check the robot\u2019s backup.", "source": "mcs500_programming_manual", "chunk_index": 2401, "length": 279, "hash": "e7652167f4352b52509fb179ebfc22d3"}
{"id": "mcs500_programming_manual_2402", "text": "The detailed event log is volatile and not saved, meaning it will be lost after a robot reboot.\nIt is also a circular buffer, storing only the most recent data.", "source": "mcs500_programming_manual", "chunk_index": 2402, "length": 160, "hash": "d7470764d022d5701011de85170b29d4"}
{"id": "mcs500_programming_manual_2403", "text": "The detailed event log is volatile and not saved, meaning it will be lost after a robot reboot.\nIt is also a circular buffer, storing only the most recent data.", "source": "mcs500_programming_manual", "chunk_index": 2403, "length": 160, "hash": "d7470764d022d5701011de85170b29d4"}
{"id": "mcs500_programming_manual_2404", "text": "You can enable additional details in the user and robot logs using the commands LogTrace\n(page 180) and LogUserCommands (page 181).", "source": "mcs500_programming_manual", "chunk_index": 2404, "length": 131, "hash": "3f80deead56f7f8ac0923a1c2537c207"}
{"id": "mcs500_programming_manual_2405", "text": "You can enable additional details in the user and robot logs using the commands", "source": "mcs500_programming_manual", "chunk_index": 2405, "length": 79, "hash": "22d53675e1d703899e4ec9fc28ad3a9b"}
{"id": "mcs500_programming_manual_2406", "text": "Finally, the user and robot log files can be downloaded from the Log files tab of the\nconfiguration menu,\n, in the MecaPortal. The detailed event log can be downloaded by\nclicking the", "source": "mcs500_programming_manual", "chunk_index": 2406, "length": 183, "hash": "0543bb16a6b8faf0bc1432bc8c02ef82"}
{"id": "mcs500_programming_manual_2407", "text": "Finally, the user and robot log files can be downloaded from the Log files tab of the\nconfiguration menu,\n, in the MecaPortal. The detailed event log can be downloaded by\nclicking the", "source": "mcs500_programming_manual", "chunk_index": 2407, "length": 183, "hash": "0543bb16a6b8faf0bc1432bc8c02ef82"}
{"id": "mcs500_programming_manual_2408", "text": "icon in the event log panel of the MecaPortal.", "source": "mcs500_programming_manual", "chunk_index": 2408, "length": 46, "hash": "c5f39b36f5056a61909aeb8601531d75"}
{"id": "mcs500_programming_manual_2409", "text": "icon in the event log panel of the MecaPortal.", "source": "mcs500_programming_manual", "chunk_index": 2409, "length": 46, "hash": "c5f39b36f5056a61909aeb8601531d75"}
{"id": "mcs500_programming_manual_2410", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2410, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2411", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2411, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2412", "text": "The full backup of the robot is a TAR archive file that contains the complete robot\nconfiguration, the latest user and robot log files, and their archived versions. You can\ndownload the full backup from the \u201cLog files\u201d tab of the configuration menu in the MecaPortal\nby clicking the \u201cGet all log and configuration files\u201d button with your primary mouse button.", "source": "mcs500_programming_manual", "chunk_index": 2412, "length": 359, "hash": "e427ed23a0f79560cceacb8760e63b08"}
{"id": "mcs500_programming_manual_2413", "text": "The full backup of the robot is a TAR archive file that contains the complete robot\nconfiguration, the latest user and robot log files, and their archived versions. You can\ndownload the full backup from the \u201cLog files\u201d tab of the configuration menu in the MecaPortal\nby clicking the \u201cGet all log and configuration files\u201d button with your primary mouse button.", "source": "mcs500_programming_manual", "chunk_index": 2413, "length": 359, "hash": "e427ed23a0f79560cceacb8760e63b08"}
{"id": "mcs500_programming_manual_2414", "text": "Alternatively, to download a smaller backup file without the archived user and robot logs,\nclick the same button with your secondary mouse button.", "source": "mcs500_programming_manual", "chunk_index": 2414, "length": 146, "hash": "9f089deac853b2a5ed36f200156fa659"}
{"id": "mcs500_programming_manual_2415", "text": "Alternatively, to download a smaller backup file without the archived user and robot logs,\nclick the same button with your secondary mouse button.", "source": "mcs500_programming_manual", "chunk_index": 2415, "length": 146, "hash": "9f089deac853b2a5ed36f200156fa659"}
{"id": "mcs500_programming_manual_2416", "text": "Motion commands are used to generate a trajectory for the robot. When a Mecademic robot\nreceives a motion command, it places it in a motion queue. The command will be run once\nall preceding motion commands have been executed. In other words, motion commands are\nsynchronous.", "source": "mcs500_programming_manual", "chunk_index": 2416, "length": 274, "hash": "1041307ebc6930033393247582c14deb"}
{"id": "mcs500_programming_manual_2417", "text": "Motion commands are used to generate a trajectory for the robot. When a Mecademic robot\nreceives a motion command, it places it in a motion queue. The command will be run once\nall preceding motion commands have been executed. In other words, motion commands are\nsynchronous.", "source": "mcs500_programming_manual", "chunk_index": 2417, "length": 274, "hash": "1041307ebc6930033393247582c14deb"}
{"id": "mcs500_programming_manual_2418", "text": "Most motion commands have arguments, but not all have default values (e.g., the argument\nfor the command Delay (page 125)). The arguments for most motion commands are IEEE-754\nfloating-point numbers, separated by commas and spaces (optional).", "source": "mcs500_programming_manual", "chunk_index": 2418, "length": 242, "hash": "b5e1586af90f88ea17fb1127fc54b81e"}
{"id": "mcs500_programming_manual_2419", "text": "Most motion commands have arguments, but not all have default values (e.g., the argument\nfor the command", "source": "mcs500_programming_manual", "chunk_index": 2419, "length": 104, "hash": "65c923b48e6d4db3b6ab7351dc49dbfc"}
{"id": "mcs500_programming_manual_2420", "text": "(page 125)). The arguments for most motion commands are IEEE-754\nfloating-point numbers, separated by commas and spaces (optional).", "source": "mcs500_programming_manual", "chunk_index": 2420, "length": 131, "hash": "8e940b33ef5c637923ecb3403d26854b"}
{"id": "mcs500_programming_manual_2421", "text": "Motion commands do not generate a direct response and the only way to know exactly when a\ncertain motion command has been executed is to use the command SetCheckpoint (page 145)\n(a response is then sent when the checkpoint has been reached).", "source": "mcs500_programming_manual", "chunk_index": 2421, "length": 241, "hash": "bfb75034ce805f2ecf37b729899da05b"}
{"id": "mcs500_programming_manual_2422", "text": "Motion commands do not generate a direct response", "source": "mcs500_programming_manual", "chunk_index": 2422, "length": 49, "hash": "b783a28c0fd474e44c6b9d5aa92a31df"}
{"id": "mcs500_programming_manual_2423", "text": "and the only way to know exactly when a\ncertain motion command has been executed is to use the command", "source": "mcs500_programming_manual", "chunk_index": 2423, "length": 102, "hash": "45d2dcee2f2088e9819cd616054266a9"}
{"id": "mcs500_programming_manual_2424", "text": "(page 145)\n(a response is then sent when the checkpoint has been reached).", "source": "mcs500_programming_manual", "chunk_index": 2424, "length": 74, "hash": "e0007bae8ee5753b3c612f7fa306d06f"}
{"id": "mcs500_programming_manual_2425", "text": "The robot sends an end-of-movement message (EOM (page 339), code 3004) whenever it has\nstopped moving for at least 1 ms, if this option is activated with SetEom (page 189). The EOM\nmessage is sent whether or not all queued commands have been executed.", "source": "mcs500_programming_manual", "chunk_index": 2425, "length": 251, "hash": "c05a16038b0cdaf7cadb46dfe3ffd8ec"}
{"id": "mcs500_programming_manual_2426", "text": "The robot sends an end-of-movement message (", "source": "mcs500_programming_manual", "chunk_index": 2426, "length": 44, "hash": "42bec5b08dca254e7c74db2f7773e019"}
{"id": "mcs500_programming_manual_2427", "text": "(page 339), code 3004) whenever it has\nstopped moving for at least 1 ms, if this option is activated with", "source": "mcs500_programming_manual", "chunk_index": 2427, "length": 105, "hash": "581dc7471a94883053c2f08c608f2e8d"}
{"id": "mcs500_programming_manual_2428", "text": "(page 189). The EOM\nmessage is sent whether or not all queued commands have been executed.", "source": "mcs500_programming_manual", "chunk_index": 2428, "length": 90, "hash": "34dec06505cb95c0550c0c02ea5195b2"}
{"id": "mcs500_programming_manual_2429", "text": "Furthermore, by default, the robot sends an end-of-block message (EOB (page 339), code\n3012) every time the robot has stopped moving AND its motion queue is empty. For\nexample, if both EOM and EOB messages are enabled, and you immediately send a MoveJoints\n(page 126), SetTrf (page 166), MovePose (page 138) and Delay (page 125) command one after\nthe other, the robot will send an EOM message when it has stopped, and then an EOB message\nas soon as the delay has elapsed.", "source": "mcs500_programming_manual", "chunk_index": 2429, "length": 471, "hash": "a4203b5079a325b85f23a87b9c378df3"}
{"id": "mcs500_programming_manual_2430", "text": "Furthermore, by default, the robot sends an end-of-block message (", "source": "mcs500_programming_manual", "chunk_index": 2430, "length": 66, "hash": "8fec20e3792d7607e45fec36030056da"}
{"id": "mcs500_programming_manual_2431", "text": "(page 339), code\n3012) every time the robot has stopped moving AND its motion queue is empty. For\nexample, if both EOM and EOB messages are enabled, and you immediately send a", "source": "mcs500_programming_manual", "chunk_index": 2431, "length": 175, "hash": "63a33c518f8d1eff6b1a070769ac5fcc"}
{"id": "mcs500_programming_manual_2432", "text": "(page 125) command one after\nthe other, the robot will send an EOM message when it has stopped, and then an EOB message\nas soon as the delay has elapsed.", "source": "mcs500_programming_manual", "chunk_index": 2432, "length": 153, "hash": "123933c13d25a65a2afd193d34d73b86"}
{"id": "mcs500_programming_manual_2433", "text": "Note that EOB and EOM messages should NOT be used to detect whether a sequence of\nmotion commands has been executed: communication delays mean that the robot may send\nan EOB message when it has finished processing all the previously received commands,\neven though there are more commands stacking up to be processed in the communication\nchannel (between robot and application). Using the SetCheckpoint (page 145) command is\nthe best way to follow the sequence of execution of commands. Finally, motion commands\ncan generate errors, explained in Section 4.", "source": "mcs500_programming_manual", "chunk_index": 2433, "length": 555, "hash": "6a6afd45ce5b036af236da774a90fefb"}
{"id": "mcs500_programming_manual_2434", "text": "Note that EOB and EOM messages should NOT be used to detect whether a sequence of\nmotion commands has been executed: communication delays mean that the robot may send\nan EOB message when it has finished processing all the previously received commands,\neven though there are more commands stacking up to be processed in the communication\nchannel (between robot and application). Using the", "source": "mcs500_programming_manual", "chunk_index": 2434, "length": 387, "hash": "97b6ccd37e4700a8594f664538be3e0a"}
{"id": "mcs500_programming_manual_2435", "text": "(page 145) command is\nthe best way to follow the sequence of execution of commands. Finally, motion commands\ncan generate errors, explained in Section 4.", "source": "mcs500_programming_manual", "chunk_index": 2435, "length": 153, "hash": "56cce818bedf561a5b6fce45b340c7a7"}
{"id": "mcs500_programming_manual_2436", "text": "The motion commands are listed below in several groups.", "source": "mcs500_programming_manual", "chunk_index": 2436, "length": 55, "hash": "4819e8708c2ce5644384291a0348315d"}
{"id": "mcs500_programming_manual_2437", "text": "The motion commands are listed below in several groups.", "source": "mcs500_programming_manual", "chunk_index": 2437, "length": 55, "hash": "4819e8708c2ce5644384291a0348315d"}
{"id": "mcs500_programming_manual_2438", "text": "Joint-space, position-mode movement commands", "source": "mcs500_programming_manual", "chunk_index": 2438, "length": 44, "hash": "7c73ef650c8ed4d9486a42ce17ac1220"}
{"id": "mcs500_programming_manual_2439", "text": "Joint-space, position-mode movement commands", "source": "mcs500_programming_manual", "chunk_index": 2439, "length": 44, "hash": "7c73ef650c8ed4d9486a42ce17ac1220"}
{"id": "mcs500_programming_manual_2440", "text": "\u2022 MoveJoints (page 126)", "source": "mcs500_programming_manual", "chunk_index": 2440, "length": 23, "hash": "8936e26533322ea1d8b72dcb115b23ee"}
{"id": "mcs500_programming_manual_2441", "text": "\u2022 MoveJointsRel (page 128)", "source": "mcs500_programming_manual", "chunk_index": 2441, "length": 26, "hash": "31156b77ae74676776a4cbd058ad4746"}
{"id": "mcs500_programming_manual_2442", "text": "\u2022 MovePose (page 138)", "source": "mcs500_programming_manual", "chunk_index": 2442, "length": 21, "hash": "be2604e8228fdbd45201e952a505c1d7"}
{"id": "mcs500_programming_manual_2443", "text": "\u2022 MoveJump (page 130)", "source": "mcs500_programming_manual", "chunk_index": 2443, "length": 21, "hash": "3911d54edef78a22f819ce97057ace3e"}
{"id": "mcs500_programming_manual_2444", "text": "\u2022 SetMoveJumpApproachVel (page 156)", "source": "mcs500_programming_manual", "chunk_index": 2444, "length": 35, "hash": "b4c7308bdf94b27ac5f9607152e347e6"}
{"id": "mcs500_programming_manual_2445", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 2445, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_2446", "text": "\u2022 SetMoveJumpHeight (page 157)", "source": "mcs500_programming_manual", "chunk_index": 2446, "length": 30, "hash": "405a851745aac7fe1baf957799002067"}
{"id": "mcs500_programming_manual_2447", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2447, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2448", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2448, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2449", "text": "\u2022 SetJointAcc (page 150)", "source": "mcs500_programming_manual", "chunk_index": 2449, "length": 24, "hash": "fee5b42c08a18d736b7b6656bca7ffcd"}
{"id": "mcs500_programming_manual_2450", "text": "\u2022 SetJointVel (page 151)", "source": "mcs500_programming_manual", "chunk_index": 2450, "length": 24, "hash": "e83821fd75c345d0733d00b0ef8d9156"}
{"id": "mcs500_programming_manual_2451", "text": "Cartesian-space, position-mode movement commands", "source": "mcs500_programming_manual", "chunk_index": 2451, "length": 48, "hash": "0cb73e3a216db301da57408c6940c119"}
{"id": "mcs500_programming_manual_2452", "text": "Cartesian-space, position-mode movement commands", "source": "mcs500_programming_manual", "chunk_index": 2452, "length": 48, "hash": "0cb73e3a216db301da57408c6940c119"}
{"id": "mcs500_programming_manual_2453", "text": "\u2022 MoveLin (page 132)", "source": "mcs500_programming_manual", "chunk_index": 2453, "length": 20, "hash": "e7f078b1c6c6ca615f6660d6c0dc14ba"}
{"id": "mcs500_programming_manual_2454", "text": "\u2022 MoveLinRelTrf (page 134)", "source": "mcs500_programming_manual", "chunk_index": 2454, "length": 26, "hash": "2eabe52cac4cf99a19f7dd49b672a21b"}
{"id": "mcs500_programming_manual_2455", "text": "\u2022 MoveLinRelWrf (page 135)", "source": "mcs500_programming_manual", "chunk_index": 2455, "length": 26, "hash": "6587511a5a23358ba3de36d5ddf0290c"}
{"id": "mcs500_programming_manual_2456", "text": "\u2022 SetCartAcc (page 142)", "source": "mcs500_programming_manual", "chunk_index": 2456, "length": 23, "hash": "a6443203e0d46f24ff30b7bb03e81f91"}
{"id": "mcs500_programming_manual_2457", "text": "\u2022 SetCartAngVel (page 143)", "source": "mcs500_programming_manual", "chunk_index": 2457, "length": 26, "hash": "93b72c1b04873e3cc5c3d8b5cbea9dfc"}
{"id": "mcs500_programming_manual_2458", "text": "\u2022 SetCartLinVel (page 144)", "source": "mcs500_programming_manual", "chunk_index": 2458, "length": 26, "hash": "01b5d4538a445c2e2c9e772cc81e4f59"}
{"id": "mcs500_programming_manual_2459", "text": "Velocity-mode movement commands", "source": "mcs500_programming_manual", "chunk_index": 2459, "length": 31, "hash": "e5d6c85ae8b5925baeda099c00c939d7"}
{"id": "mcs500_programming_manual_2460", "text": "Velocity-mode movement commands", "source": "mcs500_programming_manual", "chunk_index": 2460, "length": 31, "hash": "e5d6c85ae8b5925baeda099c00c939d7"}
{"id": "mcs500_programming_manual_2461", "text": "\u2022 MoveJointsVel (page 129)", "source": "mcs500_programming_manual", "chunk_index": 2461, "length": 26, "hash": "38f4ba93dd1c54e85d978f74f1ed4272"}
{"id": "mcs500_programming_manual_2462", "text": "\u2022 MoveLinVelTrf (page 136)", "source": "mcs500_programming_manual", "chunk_index": 2462, "length": 26, "hash": "674b56507912e5e3cce24de1b0a8f591"}
{"id": "mcs500_programming_manual_2463", "text": "\u2022 MoveLinVelWrf (page 137)", "source": "mcs500_programming_manual", "chunk_index": 2463, "length": 26, "hash": "9385d2b853d4ff20c90185bb98725ea1"}
{"id": "mcs500_programming_manual_2464", "text": "\u2022 SetVelTimeout (page 167)", "source": "mcs500_programming_manual", "chunk_index": 2464, "length": 26, "hash": "d81ff28c9f0781004bded29001495de9"}
{"id": "mcs500_programming_manual_2465", "text": "Robot posture and turn configuration commands", "source": "mcs500_programming_manual", "chunk_index": 2465, "length": 45, "hash": "374e6c9b5ebc62c185ba5853b89257fe"}
{"id": "mcs500_programming_manual_2466", "text": "Robot posture and turn configuration commands", "source": "mcs500_programming_manual", "chunk_index": 2466, "length": 45, "hash": "374e6c9b5ebc62c185ba5853b89257fe"}
{"id": "mcs500_programming_manual_2467", "text": "\u2022 SetAutoConf (page 139)", "source": "mcs500_programming_manual", "chunk_index": 2467, "length": 24, "hash": "57f28c012963f0b1c34300fa75bbc48d"}
{"id": "mcs500_programming_manual_2468", "text": "\u2022 SetAutoConfTurn (page 140)", "source": "mcs500_programming_manual", "chunk_index": 2468, "length": 28, "hash": "c69d5d8b9b2e6fe3a3766042596c5f1d"}
{"id": "mcs500_programming_manual_2469", "text": "\u2022 SetConf (page 147)", "source": "mcs500_programming_manual", "chunk_index": 2469, "length": 20, "hash": "c13570de2de3235ecf088e6d77cb0a6c"}
{"id": "mcs500_programming_manual_2470", "text": "\u2022 SetConfTurn (page 148)", "source": "mcs500_programming_manual", "chunk_index": 2470, "length": 24, "hash": "a829f17d00274b3562d4709124f7c566"}
{"id": "mcs500_programming_manual_2471", "text": "Other motion commands", "source": "mcs500_programming_manual", "chunk_index": 2471, "length": 21, "hash": "abfc01f916168f677d2f2f962bb0a290"}
{"id": "mcs500_programming_manual_2472", "text": "Other motion commands", "source": "mcs500_programming_manual", "chunk_index": 2472, "length": 21, "hash": "abfc01f916168f677d2f2f962bb0a290"}
{"id": "mcs500_programming_manual_2473", "text": "\u2022 SetBlending (page 141)", "source": "mcs500_programming_manual", "chunk_index": 2473, "length": 24, "hash": "35a587604556ec02bfae0d125296764a"}
{"id": "mcs500_programming_manual_2474", "text": "\u2022 SetCheckpoint (page 145)", "source": "mcs500_programming_manual", "chunk_index": 2474, "length": 26, "hash": "6761a9d927fe66103ce0dbfdc0b40165"}
{"id": "mcs500_programming_manual_2475", "text": "\u2022 SetJointVelLimit (page 152)", "source": "mcs500_programming_manual", "chunk_index": 2475, "length": 29, "hash": "89867a42d19c71119dc7efe653181847"}
{"id": "mcs500_programming_manual_2476", "text": "\u2022 SetMoveDuration (page 153)", "source": "mcs500_programming_manual", "chunk_index": 2476, "length": 28, "hash": "269b7c4a4f91e9f62c88587f6926dff1"}
{"id": "mcs500_programming_manual_2477", "text": "\u2022 SetMoveDurationCfg (page 154)", "source": "mcs500_programming_manual", "chunk_index": 2477, "length": 31, "hash": "fb8e697373c19cd5445300703c629cb3"}
{"id": "mcs500_programming_manual_2478", "text": "\u2022 SetMoveMode (page 159)", "source": "mcs500_programming_manual", "chunk_index": 2478, "length": 24, "hash": "591e3eb4e05f9e08e033fe913784b367"}
{"id": "mcs500_programming_manual_2479", "text": "\u2022 SetPayload (page 160)", "source": "mcs500_programming_manual", "chunk_index": 2479, "length": 23, "hash": "38a8983b8780f1a77362ee45eace416d"}
{"id": "mcs500_programming_manual_2480", "text": "\u2022 SetTorqueLimits (page 162)", "source": "mcs500_programming_manual", "chunk_index": 2480, "length": 28, "hash": "45f456f109c74fe17f3001f49398b976"}
{"id": "mcs500_programming_manual_2481", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2481, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2482", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2482, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2483", "text": "\u2022 SetTorqueLimitsCfg (page 164)", "source": "mcs500_programming_manual", "chunk_index": 2483, "length": 31, "hash": "7f760193dc2f010af331ea6c5c37ae04"}
{"id": "mcs500_programming_manual_2484", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2484, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2485", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2485, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2486", "text": "This command is used to add a time delay after a motion command. In other words, the robot\ncompletes all movements sent before the Delay (page 125) command and stops temporarily.\n(In contrast, the PauseMotion (page 182) command interrupts the motion as soon as received\nby the robot.)", "source": "mcs500_programming_manual", "chunk_index": 2486, "length": 284, "hash": "fab0aebfa5f796688a986cea4faf4aa5"}
{"id": "mcs500_programming_manual_2487", "text": "This command is used to add a time delay after a motion command. In other words, the robot\ncompletes all movements sent before the", "source": "mcs500_programming_manual", "chunk_index": 2487, "length": 130, "hash": "8df34f0b154ff03e4ee5462c63281d0e"}
{"id": "mcs500_programming_manual_2488", "text": "(page 125) command and stops temporarily.\n(In contrast, the", "source": "mcs500_programming_manual", "chunk_index": 2488, "length": 59, "hash": "095073707b3d77803cdc3c8b01ea4c66"}
{"id": "mcs500_programming_manual_2489", "text": "(page 182) command interrupts the motion as soon as received\nby the robot.)", "source": "mcs500_programming_manual", "chunk_index": 2489, "length": 75, "hash": "7be21fe5cc539f25d0a2ef277cc9c52e"}
{"id": "mcs500_programming_manual_2490", "text": "\u2022 t: desired pause duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 2490, "length": 39, "hash": "b2faaed74c3a0425ab3562c808765cfc"}
{"id": "mcs500_programming_manual_2491", "text": "\u2022 t: desired pause duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 2491, "length": 39, "hash": "b2faaed74c3a0425ab3562c808765cfc"}
{"id": "mcs500_programming_manual_2492", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2492, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2493", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2493, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2494", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2494, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2495", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2495, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2496", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2496, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2497", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2497, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2498", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2498, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2499", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2499, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2500", "text": "In cyclic protocols, the Delay (page 125) command is represented by MotionCommandID 6.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2500, "length": 118, "hash": "c745b2031b9702197ff0e425a18a1cdb"}
{"id": "mcs500_programming_manual_2501", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2501, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2502", "text": "(page 125) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2502, "length": 36, "hash": "750575fb327a19738eed090ba9e3b079"}
{"id": "mcs500_programming_manual_2503", "text": "6.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2503, "length": 34, "hash": "5263cad52a5e65e30d9dbfba86c0b3b8"}
{"id": "mcs500_programming_manual_2504", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2504, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2505", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2505, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2506", "text": "This command makes the robot simultaneously move all its joints to the target joint set, as\nfast as possible but subject to the limits set by the commands SetJointVel (page 151) and\nSetJointVelLimit (page 152). All joints start and stop moving at the same time, so there is\ngenerally only one joint that moves at the joint velocity indirectly specified in SetJointVel\n(page 151) and SetJointVelLimit (page 152). The robot takes a linear path in the joint space,\nbut nonlinear in the Cartesian space. Therefore, the TCP trajectory is not easily predictable\n(Figure 8). Finally, with MoveJoints (page 126), the robot can cross singularities without any\nproblem.", "source": "mcs500_programming_manual", "chunk_index": 2506, "length": 659, "hash": "89485a7de47fa9054e273ea7acaf8865"}
{"id": "mcs500_programming_manual_2507", "text": "This command makes the robot simultaneously move all its joints to the target joint set, as\nfast as possible but subject to the limits set by the commands", "source": "mcs500_programming_manual", "chunk_index": 2507, "length": 154, "hash": "281cf0ed067fbdf2f4676a3f86732f57"}
{"id": "mcs500_programming_manual_2508", "text": "(page 152). All joints start and stop moving at the same time, so there is\ngenerally only one joint that moves at the joint velocity indirectly specified in", "source": "mcs500_programming_manual", "chunk_index": 2508, "length": 156, "hash": "094af315d7501e585f8c6a57c2848cfd"}
{"id": "mcs500_programming_manual_2509", "text": "(page 152). The robot takes a linear path in the joint space,\nbut nonlinear in the Cartesian space. Therefore, the TCP trajectory is not easily predictable\n(Figure 8). Finally, with", "source": "mcs500_programming_manual", "chunk_index": 2509, "length": 181, "hash": "68c79709f337b60a0077b25cd900a9dc"}
{"id": "mcs500_programming_manual_2510", "text": "(page 126), the robot can cross singularities without any\nproblem.", "source": "mcs500_programming_manual", "chunk_index": 2510, "length": 66, "hash": "de262a6ccdaa7d5ca8dfff8852fac599"}
{"id": "mcs500_programming_manual_2511", "text": "MoveJoints(\u03b81,\u03b82,d3,\u03b84)", "source": "mcs500_programming_manual", "chunk_index": 2511, "length": 23, "hash": "00d72c5035d1917262d5eaa2059580b1"}
{"id": "mcs500_programming_manual_2512", "text": "\u2022 the target position of each joint, in degrees (for the revolute joints) and in mm (for the", "source": "mcs500_programming_manual", "chunk_index": 2512, "length": 92, "hash": "6f1fe10a769fb262f0d155e7312912b8"}
{"id": "mcs500_programming_manual_2513", "text": "\u2022 the target position of each joint, in degrees (for the revolute joints) and in mm (for the", "source": "mcs500_programming_manual", "chunk_index": 2513, "length": 92, "hash": "6f1fe10a769fb262f0d155e7312912b8"}
{"id": "mcs500_programming_manual_2514", "text": "The default ranges for the robot joints are given in technical-specifications-MCS500 of\nthe robot\u2019s user manual. Note that these ranges can be further limited with the command\nSetJointLimits (page 190). The target joints position must be within the allowable joint limits\nor else the command will not be executed.", "source": "mcs500_programming_manual", "chunk_index": 2514, "length": 313, "hash": "4a40e485b67fa3d3c7f9d562ed725849"}
{"id": "mcs500_programming_manual_2515", "text": "The default ranges for the robot joints are given in", "source": "mcs500_programming_manual", "chunk_index": 2515, "length": 52, "hash": "b4ac4850a525feb1f951b168ef9b5808"}
{"id": "mcs500_programming_manual_2516", "text": "technical-specifications-MCS500", "source": "mcs500_programming_manual", "chunk_index": 2516, "length": 31, "hash": "2e237a6991d8f4934324f81c3931821d"}
{"id": "mcs500_programming_manual_2517", "text": "of\nthe robot\u2019s user manual. Note that these ranges can be further limited with the command", "source": "mcs500_programming_manual", "chunk_index": 2517, "length": 90, "hash": "126f00668926468b2e2000465f9670a0"}
{"id": "mcs500_programming_manual_2518", "text": "(page 190). The target joints position must be within the allowable joint limits\nor else the command will not be executed.", "source": "mcs500_programming_manual", "chunk_index": 2518, "length": 122, "hash": "61460475e9d13a752192b9b5f42e483f"}
{"id": "mcs500_programming_manual_2519", "text": "Figure 8: An example showing the difference between a path that is linear in joint space\n(often referred to as a point-to-point motion) and one that is linear in Cartesian space (the\nTCP follows a line)", "source": "mcs500_programming_manual", "chunk_index": 2519, "length": 202, "hash": "5625087b5f1bae567a6d1c4df48b9f9a"}
{"id": "mcs500_programming_manual_2520", "text": "Figure 8: An example showing the difference between a path that is linear in joint space", "source": "mcs500_programming_manual", "chunk_index": 2520, "length": 88, "hash": "f71b542d31418225f1e57bf1ee408300"}
{"id": "mcs500_programming_manual_2521", "text": "(often referred to as a point-to-point motion) and one that is linear in Cartesian space (the\nTCP follows a line)", "source": "mcs500_programming_manual", "chunk_index": 2521, "length": 113, "hash": "ed0389c6a3ccd9a045150a17ffe62ae7"}
{"id": "mcs500_programming_manual_2522", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2522, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2523", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2523, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2524", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2524, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2525", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2525, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2526", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2526, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2527", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2527, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2528", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2528, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2529", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2529, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2530", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2530, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2531", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2531, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2532", "text": "In cyclic protocols, the MoveJoints (page 126) command is represented by MotionCommandID\n1. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2532, "length": 123, "hash": "ae98eb4a808ee320db1de0424b65b5e9"}
{"id": "mcs500_programming_manual_2533", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2533, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2534", "text": "(page 126) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2534, "length": 36, "hash": "7d5fe1265ce45c38ab5de6ea1eb03779"}
{"id": "mcs500_programming_manual_2535", "text": "1. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2535, "length": 34, "hash": "f3abb3fa23ae88a3ab4387e676480194"}
{"id": "mcs500_programming_manual_2536", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2536, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2537", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2537, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2538", "text": "This command has the exact behavior as the MoveJoints (page 126) command, but instead\nof accepting the desired (target) joint set as arguments, it takes the desired relative joint\ndisplacements. The command is particularly useful when you need to displace certain joints\na certain amount, but you do not know the current joint set and wish to avoid having to use\nthe command GetRtTargetJointPos (page 270).", "source": "mcs500_programming_manual", "chunk_index": 2538, "length": 406, "hash": "6686ee24eec8f2502b643b2e9a9f30d2"}
{"id": "mcs500_programming_manual_2539", "text": "This command has the exact behavior as the", "source": "mcs500_programming_manual", "chunk_index": 2539, "length": 42, "hash": "7d6c43914fd365f0f31417154c503f93"}
{"id": "mcs500_programming_manual_2540", "text": "(page 126) command, but instead\nof accepting the desired (target) joint set as arguments, it takes the desired relative joint\ndisplacements. The command is particularly useful when you need to displace certain joints\na certain amount, but you do not know the current joint set and wish to avoid having to use\nthe command", "source": "mcs500_programming_manual", "chunk_index": 2540, "length": 320, "hash": "736628c381d6fcca312aae572664a0b4"}
{"id": "mcs500_programming_manual_2541", "text": "MoveJointsRel(\u0394\u03b81,\u0394\u03b82,\u0394d3,\u0394\u03b84)", "source": "mcs500_programming_manual", "chunk_index": 2541, "length": 30, "hash": "301fdac9e432b8449353cff8f4edf702"}
{"id": "mcs500_programming_manual_2542", "text": "\u2022 the desired relative displacement of each joint, in degrees (for the revolute joints) and\nin mm (for the linear joint). The value of each of the arguments can be positive, negative\nor zero.", "source": "mcs500_programming_manual", "chunk_index": 2542, "length": 191, "hash": "e4cd69db1aaccbf626b4f95084908004"}
{"id": "mcs500_programming_manual_2543", "text": "\u2022 the desired relative displacement of each joint, in degrees (for the revolute joints) and", "source": "mcs500_programming_manual", "chunk_index": 2543, "length": 91, "hash": "8bf749675b2edc94d25c8840326cb1e4"}
{"id": "mcs500_programming_manual_2544", "text": "in mm (for the linear joint). The value of each of the arguments can be positive, negative\nor zero.", "source": "mcs500_programming_manual", "chunk_index": 2544, "length": 99, "hash": "2b5609959785c2a7e9d2b6ad947212f7"}
{"id": "mcs500_programming_manual_2545", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2545, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2546", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2546, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2547", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2547, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2548", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2548, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2549", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2549, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2550", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2550, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2551", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2551, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2552", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2552, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2553", "text": "In cyclic protocols,\nMotionCommandID 29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2553, "length": 72, "hash": "84106468646b351f59be2ae8a55484d0"}
{"id": "mcs500_programming_manual_2554", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2554, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2555", "text": "29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2555, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "mcs500_programming_manual_2556", "text": "(page 128) command is", "source": "mcs500_programming_manual", "chunk_index": 2556, "length": 21, "hash": "7730833568844c6b9d35cc9513fa45fb"}
{"id": "mcs500_programming_manual_2557", "text": "(page 128) command is", "source": "mcs500_programming_manual", "chunk_index": 2557, "length": 21, "hash": "7730833568844c6b9d35cc9513fa45fb"}
{"id": "mcs500_programming_manual_2558", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2558, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2559", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2559, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2560", "text": "This displaces the robot\u2019s joints simultaneously at the specified joint speeds. All joint\nmovements begin and end at the same time. The robot will decelerate to a complete stop\nafter a period defined by the command SetVelTimeout (page 167), unless a subsequent\nMoveJointsVel (page 129) command is issued. Unlike position-mode motion commands, the\nMoveJointsVel (page 129) command does not generate motion errors when a joint limit is\nreached; instead, the robot halts slightly before the limit. Additionally, as with all MoveJoints*\ncommands, the robot can cross singularities when using the MoveJointsVel (page 129)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 2560, "length": 625, "hash": "7b8552ff68f0f8401e5818c8298a37a7"}
{"id": "mcs500_programming_manual_2561", "text": "This displaces the robot\u2019s joints simultaneously at the specified joint speeds. All joint\nmovements begin and end at the same time. The robot will decelerate to a complete stop\nafter a period defined by the command", "source": "mcs500_programming_manual", "chunk_index": 2561, "length": 214, "hash": "548d6b707affa374d3caf9c7f31cd23a"}
{"id": "mcs500_programming_manual_2562", "text": "(page 167), unless a subsequent", "source": "mcs500_programming_manual", "chunk_index": 2562, "length": 31, "hash": "39f3ca55de8681043dff834f1c213180"}
{"id": "mcs500_programming_manual_2563", "text": "(page 129) command is issued. Unlike position-mode motion commands, the", "source": "mcs500_programming_manual", "chunk_index": 2563, "length": 71, "hash": "17a789f781dfec24bbe4f87e8eb09198"}
{"id": "mcs500_programming_manual_2564", "text": "does not generate motion errors when a joint limit is\nreached", "source": "mcs500_programming_manual", "chunk_index": 2564, "length": 61, "hash": "85eedc6719bbab5d1c95b46f3b2a660f"}
{"id": "mcs500_programming_manual_2565", "text": "; instead, the robot halts slightly before the limit. Additionally, as with all MoveJoints*\ncommands, the robot can cross singularities when using the", "source": "mcs500_programming_manual", "chunk_index": 2565, "length": 150, "hash": "ada072e45c228b100f0702a9a4ad049d"}
{"id": "mcs500_programming_manual_2566", "text": "MoveJointsVel(\u03c91,\u03c92,v3,\u03c94)", "source": "mcs500_programming_manual", "chunk_index": 2566, "length": 26, "hash": "6ed9a619fc25ca6efb279ca27c650a5d"}
{"id": "mcs500_programming_manual_2567", "text": "\u2022 the desired velocity of each joint, in \u00b0/s (for the revolute joints) and in mm/s (for the", "source": "mcs500_programming_manual", "chunk_index": 2567, "length": 91, "hash": "d6c455d2f0875b23fe59d6ad763ed4e3"}
{"id": "mcs500_programming_manual_2568", "text": "\u2022 the desired velocity of each joint, in \u00b0/s (for the revolute joints) and in mm/s (for the", "source": "mcs500_programming_manual", "chunk_index": 2568, "length": 91, "hash": "d6c455d2f0875b23fe59d6ad763ed4e3"}
{"id": "mcs500_programming_manual_2569", "text": "linear joint). The value of each of the arguments can be positive, negative or zero.", "source": "mcs500_programming_manual", "chunk_index": 2569, "length": 84, "hash": "5bb26329f8b0659f121d5542f201a9a8"}
{"id": "mcs500_programming_manual_2570", "text": "linear joint). The value of each of the arguments can be positive, negative or zero.", "source": "mcs500_programming_manual", "chunk_index": 2570, "length": 84, "hash": "5bb26329f8b0659f121d5542f201a9a8"}
{"id": "mcs500_programming_manual_2571", "text": "The maximum joint velocities are given in technical-specifications-MCS500 of the robot\u2019s\nuser manual.", "source": "mcs500_programming_manual", "chunk_index": 2571, "length": 101, "hash": "ee5c65def0f1651ec15fda6e8ae5eaed"}
{"id": "mcs500_programming_manual_2572", "text": "The maximum joint velocities are given in", "source": "mcs500_programming_manual", "chunk_index": 2572, "length": 41, "hash": "10dda236bd3874aa41db374c18a3c371"}
{"id": "mcs500_programming_manual_2573", "text": "technical-specifications-MCS500", "source": "mcs500_programming_manual", "chunk_index": 2573, "length": 31, "hash": "2e237a6991d8f4934324f81c3931821d"}
{"id": "mcs500_programming_manual_2574", "text": "of the robot\u2019s\nuser manual.", "source": "mcs500_programming_manual", "chunk_index": 2574, "length": 27, "hash": "3378c7a5710b561f614bac715d6a419c"}
{"id": "mcs500_programming_manual_2575", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2575, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2576", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2576, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2577", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2577, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2578", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2578, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2579", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2579, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2580", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2580, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2581", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2581, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2582", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2582, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2583", "text": "In cyclic protocols,\nMotionCommandID 21. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2583, "length": 72, "hash": "307450485dcbb5f086f71021c6a444cb"}
{"id": "mcs500_programming_manual_2584", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2584, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2585", "text": "21. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2585, "length": 35, "hash": "a6e248301b89dc2689c1fdbbbab9b1f5"}
{"id": "mcs500_programming_manual_2586", "text": "(page 129) command is", "source": "mcs500_programming_manual", "chunk_index": 2586, "length": 21, "hash": "a833d5052cc303fe1b942eb110acdf67"}
{"id": "mcs500_programming_manual_2587", "text": "(page 129) command is", "source": "mcs500_programming_manual", "chunk_index": 2587, "length": 21, "hash": "a833d5052cc303fe1b942eb110acdf67"}
{"id": "mcs500_programming_manual_2588", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2588, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2589", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2589, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2590", "text": "With this command, the robot moves up/down its end-effector a certain distance (retract\nmotion along a line and without changing its orientation), then moves it to a pose that is\na certain distance over/under the target pose (lateral motion), and finally moves it down/up\nto the target pose (approach linear motion without changing its orientation), as illustrated\nin Figure 9. The MoveJump (page 130) command is highly optimized for fast pick and place\nmotion and results in much faster cycle times than when using a simple sequence of MoveLin\n(page 132) - MovePose (page 138) - MoveLin (page 132) commands.", "source": "mcs500_programming_manual", "chunk_index": 2590, "length": 608, "hash": "1f672105a9687c99027505dda9eedee5"}
{"id": "mcs500_programming_manual_2591", "text": "With this command, the robot moves up/down its end-effector a certain distance (retract\nmotion along a line and without changing its orientation), then moves it to a pose that is\na certain distance over/under the target pose (lateral motion), and finally moves it down/up\nto the target pose (approach linear motion without changing its orientation), as illustrated\nin Figure 9. The", "source": "mcs500_programming_manual", "chunk_index": 2591, "length": 381, "hash": "36c4f919aad107dc10a22cda2c3a647c"}
{"id": "mcs500_programming_manual_2592", "text": "(page 130) command is highly optimized for fast pick and place\nmotion and results in much faster cycle times than when using a simple sequence of", "source": "mcs500_programming_manual", "chunk_index": 2592, "length": 145, "hash": "c6732195d537fff2d9b04cb34fee5423"}
{"id": "mcs500_programming_manual_2593", "text": "(page 132) commands.", "source": "mcs500_programming_manual", "chunk_index": 2593, "length": 20, "hash": "3a9409192b1aaaa5e9ff7e888fd674ed"}
{"id": "mcs500_programming_manual_2594", "text": "The MoveJump (page 130) command works only in velocity-base position mode (see Section\n3).", "source": "mcs500_programming_manual", "chunk_index": 2594, "length": 90, "hash": "91285cc86bf2a1e93f6c0b657cd6e60e"}
{"id": "mcs500_programming_manual_2595", "text": "(page 130) command works only in velocity-base position mode (see Section\n3).", "source": "mcs500_programming_manual", "chunk_index": 2595, "length": 77, "hash": "3c7caa9657c3d31913dff4a86a5b62d7"}
{"id": "mcs500_programming_manual_2596", "text": "The parameters defining the trajectory of the end-effector in a MoveJump (page 130) motion\nare set by the commands SetMoveJumpHeight (page 157) and SetMoveJumpApproachVel\n(page 156) (see Figure 10).", "source": "mcs500_programming_manual", "chunk_index": 2596, "length": 198, "hash": "812f1c3fad5e3669ddd5137966b06a59"}
{"id": "mcs500_programming_manual_2597", "text": "The parameters defining the trajectory of the end-effector in a", "source": "mcs500_programming_manual", "chunk_index": 2597, "length": 63, "hash": "21f76c619f3946a552b1f05851ccee50"}
{"id": "mcs500_programming_manual_2598", "text": "(page 130) motion\nare set by the commands", "source": "mcs500_programming_manual", "chunk_index": 2598, "length": 41, "hash": "94029dbdbd20e221d964b18dbda1b9ff"}
{"id": "mcs500_programming_manual_2599", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 2599, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_2600", "text": "(page 156) (see Figure 10).", "source": "mcs500_programming_manual", "chunk_index": 2600, "length": 27, "hash": "da9fb960b7be303d0206b4213cb8e2ea"}
{"id": "mcs500_programming_manual_2601", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2601, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "mcs500_programming_manual_2602", "text": ": the target position for the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2602, "length": 65, "hash": "098e09c562a0ea697c4eb4e6c830e341"}
{"id": "mcs500_programming_manual_2603", "text": "\u2022 \u03b3: the target orientation of the TRF about its z-axis with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2603, "length": 92, "hash": "e2123a5b7e460f9c9b2581b23515bed2"}
{"id": "mcs500_programming_manual_2604", "text": ": the target orientation of the TRF about its z-axis with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2604, "length": 89, "hash": "7669cfcc41477d8b7d8090d43e2a4ffa"}
{"id": "mcs500_programming_manual_2605", "text": "Figure 9: End-effector motion when using the MoveJump command", "source": "mcs500_programming_manual", "chunk_index": 2605, "length": 61, "hash": "05de54ca30a7d36bbce2d077bb377b05"}
{"id": "mcs500_programming_manual_2606", "text": "Figure 9: End-effector motion when using the MoveJump command", "source": "mcs500_programming_manual", "chunk_index": 2606, "length": 61, "hash": "05de54ca30a7d36bbce2d077bb377b05"}
{"id": "mcs500_programming_manual_2607", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2607, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2608", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2608, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2609", "text": "As with the MovePose (page 138) command, the joint set corresponding to the target pose is\ncalculated according to the desired robot posture and turn configurations, if such were set,\nor the one that is fastest to reach. Also, as with the MovePose (page 138) command, if the\ncomplete motion cannot be performed due to joint limits, it will not even start, and an error\nwill be generated. Note that since the robot uses the optimal (quickest) path in joint space,\nin the lateral motion, the end-effector follows a complex non-linear path. Finally, the speed\nand the acceleration during the MoveJump (page 130) motion are defined by the SetJointVel\n(page 151) and SetJointAcc (page 150) commands.", "source": "mcs500_programming_manual", "chunk_index": 2609, "length": 694, "hash": "8f3772a1a9f91fe13394607c51dbbecd"}
{"id": "mcs500_programming_manual_2610", "text": "(page 138) command, the joint set corresponding to the target pose is\ncalculated according to the desired robot posture and turn configurations, if such were set,\nor the one that is fastest to reach. Also, as with the", "source": "mcs500_programming_manual", "chunk_index": 2610, "length": 217, "hash": "9cae16019004a04474aa7ba672bd630e"}
{"id": "mcs500_programming_manual_2611", "text": "(page 138) command, if the\ncomplete motion cannot be performed due to joint limits, it will not even start, and an error\nwill be generated. Note that since the robot uses the optimal (quickest) path in joint space,\nin the lateral motion,", "source": "mcs500_programming_manual", "chunk_index": 2611, "length": 237, "hash": "5bdc9fa7634e7d76870cfb075592673c"}
{"id": "mcs500_programming_manual_2612", "text": "the end-effector follows a complex non-linear path", "source": "mcs500_programming_manual", "chunk_index": 2612, "length": 50, "hash": "ddd19623893feee6bfb54cb82933a5e0"}
{"id": "mcs500_programming_manual_2613", "text": ". Finally, the speed\nand the acceleration during the", "source": "mcs500_programming_manual", "chunk_index": 2613, "length": 52, "hash": "142e5557027bae82b0385947185ba8ca"}
{"id": "mcs500_programming_manual_2614", "text": "(page 130) motion are defined by the", "source": "mcs500_programming_manual", "chunk_index": 2614, "length": 36, "hash": "3ba7472cdfab8bf5a76376bb4ab4688c"}
{"id": "mcs500_programming_manual_2615", "text": "(page 150) commands.", "source": "mcs500_programming_manual", "chunk_index": 2615, "length": 20, "hash": "cf0e9a3a8731ba2daf360ebe4e8e8505"}
{"id": "mcs500_programming_manual_2616", "text": "The MoveJump (page 130) command is a joint-space command like MovePose (page 138).\nTherefore, if you execute two successive MoveJump (page 130) commands or a MoveJump\n(page 130) followed by a MovePose (page 138), you must first deactivate the blending, or\nelse the MoveJump (page 130) will not be completed as planned.", "source": "mcs500_programming_manual", "chunk_index": 2616, "length": 318, "hash": "40356b50a1bff9a377105bde5d01f6c1"}
{"id": "mcs500_programming_manual_2617", "text": "(page 130) command is a joint-space command like", "source": "mcs500_programming_manual", "chunk_index": 2617, "length": 48, "hash": "6dd39b7142e56bca2835f893b754d424"}
{"id": "mcs500_programming_manual_2618", "text": "(page 138).\nTherefore, if you execute two successive", "source": "mcs500_programming_manual", "chunk_index": 2618, "length": 52, "hash": "9d956c427411bee8d6f2705997995afc"}
{"id": "mcs500_programming_manual_2619", "text": "(page 130) commands or a", "source": "mcs500_programming_manual", "chunk_index": 2619, "length": 24, "hash": "239d8167359b35173fab6764e77ed2f5"}
{"id": "mcs500_programming_manual_2620", "text": "(page 130) followed by a", "source": "mcs500_programming_manual", "chunk_index": 2620, "length": 24, "hash": "948b9d826ee68234de568a5a18661f69"}
{"id": "mcs500_programming_manual_2621", "text": "(page 138), you must first deactivate the blending, or\nelse the", "source": "mcs500_programming_manual", "chunk_index": 2621, "length": 63, "hash": "c6b794f822579f167f5d147f4a29460e"}
{"id": "mcs500_programming_manual_2622", "text": "(page 130) will not be completed as planned.", "source": "mcs500_programming_manual", "chunk_index": 2622, "length": 44, "hash": "8c146a34fcb4e7cf421ebe0cda603abc"}
{"id": "mcs500_programming_manual_2623", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2623, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2624", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2624, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2625", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2625, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2626", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2626, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2627", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2627, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2628", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2628, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2629", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2629, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2630", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2630, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2631", "text": "In cyclic protocols, the MoveJump (page 130) command is represented by MotionCommandID\n45. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2631, "length": 122, "hash": "9363e47b6f78903acce0c0d3e05c860b"}
{"id": "mcs500_programming_manual_2632", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2632, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2633", "text": "(page 130) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2633, "length": 36, "hash": "c5e32d9ba019f24ce9db7e4b97367ad2"}
{"id": "mcs500_programming_manual_2634", "text": "45. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2634, "length": 35, "hash": "66ead3de7ba83855e7a3352cd27ad882"}
{"id": "mcs500_programming_manual_2635", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2635, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2636", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2636, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2637", "text": "This command makes the robot move its end-effector, so that its TRF ends up at a target\npose with respect to the WRF while the TCP moves along a linear path in Cartesian space,\nas illustrated in Figure 8b. If the target (desired) orientation of the TRF is different from the\ninitial orientation, the orientation will be modified along the path using a minimum-torque\npath.", "source": "mcs500_programming_manual", "chunk_index": 2637, "length": 372, "hash": "36fe4c7aa87c3c0da409be6057603ab3"}
{"id": "mcs500_programming_manual_2638", "text": "This command makes the robot move its end-effector, so that its TRF ends up at a target\npose with respect to the WRF while the TCP moves along a linear path in Cartesian space,\nas illustrated in Figure 8b. If the target (desired) orientation of the TRF is different from the\ninitial orientation, the orientation will be modified along the path using a minimum-torque\npath.", "source": "mcs500_programming_manual", "chunk_index": 2638, "length": 372, "hash": "36fe4c7aa87c3c0da409be6057603ab3"}
{"id": "mcs500_programming_manual_2639", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2639, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "mcs500_programming_manual_2640", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2640, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "mcs500_programming_manual_2641", "text": "\u2022 \u03b3: the target orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 2641, "length": 55, "hash": "ed4088414db4c52af548680e600bdb88"}
{"id": "mcs500_programming_manual_2642", "text": "\u2022 \u03b3: the target orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 2642, "length": 55, "hash": "ed4088414db4c52af548680e600bdb88"}
{"id": "mcs500_programming_manual_2643", "text": "with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2643, "length": 36, "hash": "c92a14db88d4d28b5bfec9bdfd9a750c"}
{"id": "mcs500_programming_manual_2644", "text": "with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2644, "length": 36, "hash": "c92a14db88d4d28b5bfec9bdfd9a750c"}
{"id": "mcs500_programming_manual_2645", "text": "It is physically impossible to follow a linear path with this command, while changing the\nconfiguration (i.e., crossing a singularity).", "source": "mcs500_programming_manual", "chunk_index": 2645, "length": 135, "hash": "320ad6232273bf5d19e337f999b7f181"}
{"id": "mcs500_programming_manual_2646", "text": "It is physically impossible to follow a linear path with this command, while changing the\nconfiguration (i.e., crossing a singularity).", "source": "mcs500_programming_manual", "chunk_index": 2646, "length": 135, "hash": "320ad6232273bf5d19e337f999b7f181"}
{"id": "mcs500_programming_manual_2647", "text": "If you specify a desired turn configuration, the MoveLin (page 132) command will be executed\nonly if the initial and final robot positions have the same turn configuration as the desired one.", "source": "mcs500_programming_manual", "chunk_index": 2647, "length": 191, "hash": "37de8ab3f8d2963330fe02fe99f4fb7a"}
{"id": "mcs500_programming_manual_2648", "text": "If you specify a desired turn configuration, the", "source": "mcs500_programming_manual", "chunk_index": 2648, "length": 48, "hash": "d41496f9b9cc8303546f457c3dce0fce"}
{"id": "mcs500_programming_manual_2649", "text": "(page 132) command will be executed\nonly if the initial and final robot positions have the same turn configuration as the desired one.", "source": "mcs500_programming_manual", "chunk_index": 2649, "length": 134, "hash": "64a2fd06aacd09b46f07a9be48fdbbdc"}
{"id": "mcs500_programming_manual_2650", "text": "If the complete motion cannot be performed due to singularities or joint limits, it will not\neven start, and an error will be generated. Similarly, the robot will not accept the MoveLin\n(page 132) command if the required end-effector reorientation is exactly 180\u00b0, because there\ncould be two possible paths.", "source": "mcs500_programming_manual", "chunk_index": 2650, "length": 307, "hash": "6969fa71b96ff63b1199cb1e80106b8d"}
{"id": "mcs500_programming_manual_2651", "text": "If the complete motion cannot be performed due to singularities or joint limits, it will not\neven start, and an error will be generated. Similarly, the robot will not accept the", "source": "mcs500_programming_manual", "chunk_index": 2651, "length": 177, "hash": "2274ab681df57c37d045d4fc50e84b5f"}
{"id": "mcs500_programming_manual_2652", "text": "(page 132) command if the required end-effector reorientation is exactly 180\u00b0, because there\ncould be two possible paths.", "source": "mcs500_programming_manual", "chunk_index": 2652, "length": 121, "hash": "cf2a61781a8425cb6770963bd75c4c14"}
{"id": "mcs500_programming_manual_2653", "text": "Use the MoveLin (page 132) command only when precise linear motion of the TCP is required.\nFor most cases, moving the robot between positions is faster using the MoveJoints (page 126)\nor MovePose (page 138) commands.", "source": "mcs500_programming_manual", "chunk_index": 2653, "length": 216, "hash": "a184327cc9f9b40fe310b4bd1dbc28af"}
{"id": "mcs500_programming_manual_2654", "text": "(page 132) command only when precise linear motion of the TCP is required.\nFor most cases, moving the robot between positions is faster using the", "source": "mcs500_programming_manual", "chunk_index": 2654, "length": 145, "hash": "779e0cc5e91d96523d1a40d6542d9dbe"}
{"id": "mcs500_programming_manual_2655", "text": "(page 138) commands.", "source": "mcs500_programming_manual", "chunk_index": 2655, "length": 20, "hash": "1c3f0331f582bb24f7145f3e03bdd3ed"}
{"id": "mcs500_programming_manual_2656", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2656, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2657", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2657, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2658", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2658, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2659", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2659, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2660", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2660, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2661", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2661, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2662", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2662, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2663", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2663, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2664", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2664, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2665", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2665, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2666", "text": "In cyclic protocols, the MoveLin (page 132) command is represented by MotionCommandID 3.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2666, "length": 120, "hash": "12789ebd3e5175b4d129d693dce98ec9"}
{"id": "mcs500_programming_manual_2667", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2667, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2668", "text": "(page 132) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2668, "length": 36, "hash": "7832774229b52d13662a76d68c8cf91e"}
{"id": "mcs500_programming_manual_2669", "text": "3.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2669, "length": 34, "hash": "56b4f7398b2556dd481d6ab131b7321e"}
{"id": "mcs500_programming_manual_2670", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2670, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2671", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2671, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2672", "text": "This command has the same behavior as the MoveLin (page 132) command, but allows a\ndesired pose to be specified relative to the current pose of the TRF. Thus, the arguments x,\ny, z, and \u03b3 represent the desired pose of the TRF with respect to the current pose of the TRF\n(i.e., the pose of the TRF just before executing the MoveLinRelTrf (page 134) command).", "source": "mcs500_programming_manual", "chunk_index": 2672, "length": 357, "hash": "42dbb1341525103be48361ac3f5361f8"}
{"id": "mcs500_programming_manual_2673", "text": "This command has the same behavior as the", "source": "mcs500_programming_manual", "chunk_index": 2673, "length": 41, "hash": "b3a4c85b3aa50d0f6a7b7925992523ec"}
{"id": "mcs500_programming_manual_2674", "text": "(page 132) command, but allows a\ndesired pose to be specified relative to the current pose of the TRF. Thus, the arguments x,\ny, z, and \u03b3 represent the desired pose of the TRF with respect to the current pose of the TRF\n(i.e., the pose of the TRF just before executing the", "source": "mcs500_programming_manual", "chunk_index": 2674, "length": 272, "hash": "751d06f95ad27645415636e6181a1ab4"}
{"id": "mcs500_programming_manual_2675", "text": "(page 134) command).", "source": "mcs500_programming_manual", "chunk_index": 2675, "length": 20, "hash": "cb0a8da077d79c6550cb16f3f8cef118"}
{"id": "mcs500_programming_manual_2676", "text": "As with the MoveLin (page 132) command, if the complete motion cannot be performed, it\nwill not even start and an error will be generated.", "source": "mcs500_programming_manual", "chunk_index": 2676, "length": 138, "hash": "3ba83d82b5bfbeb6ad9b8e7c14b23779"}
{"id": "mcs500_programming_manual_2677", "text": "(page 132) command, if the complete motion cannot be performed, it\nwill not even start and an error will be generated.", "source": "mcs500_programming_manual", "chunk_index": 2677, "length": 118, "hash": "f86d38de0a5f38c2cd38701340205a8c"}
{"id": "mcs500_programming_manual_2678", "text": "MoveLinRelTrf(x,y,z,\u03b3)", "source": "mcs500_programming_manual", "chunk_index": 2678, "length": 22, "hash": "1accdd569325e6a54ffc27894028680f"}
{"id": "mcs500_programming_manual_2679", "text": "MoveLinRelTrf(x,y,z,\u03b3)", "source": "mcs500_programming_manual", "chunk_index": 2679, "length": 22, "hash": "1accdd569325e6a54ffc27894028680f"}
{"id": "mcs500_programming_manual_2680", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2680, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "mcs500_programming_manual_2681", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2681, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "mcs500_programming_manual_2682", "text": "\u2022 \u03b3: the orientation angle, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2682, "length": 39, "hash": "ce33bf97402dd8e2f400a25b3eb89cc2"}
{"id": "mcs500_programming_manual_2683", "text": "\u2022 \u03b3: the orientation angle, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2683, "length": 39, "hash": "ce33bf97402dd8e2f400a25b3eb89cc2"}
{"id": "mcs500_programming_manual_2684", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2684, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2685", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2685, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2686", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2686, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2687", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2687, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2688", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2688, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2689", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2689, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2690", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2690, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2691", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2691, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2692", "text": "In cyclic protocols,\nMotionCommandID 4. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2692, "length": 71, "hash": "5a3bd19d4435d6c07ab8fdaa40245a17"}
{"id": "mcs500_programming_manual_2693", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2693, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2694", "text": "4. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2694, "length": 34, "hash": "4a9b7c8c63e2293dcc83afc4e8964f5f"}
{"id": "mcs500_programming_manual_2695", "text": "(page 134) command is", "source": "mcs500_programming_manual", "chunk_index": 2695, "length": 21, "hash": "1858cc7c3cdb260e7f202a1f99f6b3fe"}
{"id": "mcs500_programming_manual_2696", "text": "(page 134) command is", "source": "mcs500_programming_manual", "chunk_index": 2696, "length": 21, "hash": "1858cc7c3cdb260e7f202a1f99f6b3fe"}
{"id": "mcs500_programming_manual_2697", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2697, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2698", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2698, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2699", "text": "This command is similar to the MoveLinRelTrf (page 134) command, but instead of defining\nthe desired pose with respect to the current pose of the TRF it is defined with respect to\na reference frame that has the same orientation as the WRF but its origin is at the current\nposition of the TCP.", "source": "mcs500_programming_manual", "chunk_index": 2699, "length": 292, "hash": "0c35c0bd5b9a52001002b1bcc3715616"}
{"id": "mcs500_programming_manual_2700", "text": "This command is similar to the", "source": "mcs500_programming_manual", "chunk_index": 2700, "length": 30, "hash": "c95f4e09225d6d19fffccb318a2ce8e2"}
{"id": "mcs500_programming_manual_2701", "text": "(page 134) command, but instead of defining\nthe desired pose with respect to the current pose of the TRF it is defined with respect to\na reference frame that has the same orientation as the WRF but its origin is at the current\nposition of the TCP.", "source": "mcs500_programming_manual", "chunk_index": 2701, "length": 247, "hash": "09484f49c2b7bf5e188fbbf8a4146c11"}
{"id": "mcs500_programming_manual_2702", "text": "MoveLinRelWrf(x,y,z,\u03b3)", "source": "mcs500_programming_manual", "chunk_index": 2702, "length": 22, "hash": "12613a5d9b9b9603ed167f8788ff7315"}
{"id": "mcs500_programming_manual_2703", "text": "MoveLinRelWrf(x,y,z,\u03b3)", "source": "mcs500_programming_manual", "chunk_index": 2703, "length": 22, "hash": "12613a5d9b9b9603ed167f8788ff7315"}
{"id": "mcs500_programming_manual_2704", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2704, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "mcs500_programming_manual_2705", "text": "\u2022 x, y, z: the position coordinates, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2705, "length": 43, "hash": "9a8a94f4795c201113dfe6916e716a99"}
{"id": "mcs500_programming_manual_2706", "text": "\u2022 \u03b3: the orientation angle, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2706, "length": 39, "hash": "ce33bf97402dd8e2f400a25b3eb89cc2"}
{"id": "mcs500_programming_manual_2707", "text": "\u2022 \u03b3: the orientation angle, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2707, "length": 39, "hash": "ce33bf97402dd8e2f400a25b3eb89cc2"}
{"id": "mcs500_programming_manual_2708", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2708, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2709", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2709, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2710", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2710, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2711", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2711, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2712", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2712, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2713", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2713, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2714", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2714, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2715", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2715, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2716", "text": "In cyclic protocols,\nMotionCommandID 5. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2716, "length": 71, "hash": "8324b72d9689c0a2f4900020185f8354"}
{"id": "mcs500_programming_manual_2717", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2717, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2718", "text": "5. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2718, "length": 34, "hash": "b1dae8c7d511b0d344f996c9b1468553"}
{"id": "mcs500_programming_manual_2719", "text": "(page 135) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2719, "length": 36, "hash": "84ab618bd75017d038482e6ef1813e0a"}
{"id": "mcs500_programming_manual_2720", "text": "(page 135) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2720, "length": 36, "hash": "84ab618bd75017d038482e6ef1813e0a"}
{"id": "mcs500_programming_manual_2721", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2721, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2722", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2722, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2723", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe TRF, or at a lower velocity if limited by joint velocity constraints (see SetJointVelLimit\n(page 152)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "mcs500_programming_manual", "chunk_index": 2723, "length": 304, "hash": "8a3f24585e3e02da735e689827331834"}
{"id": "mcs500_programming_manual_2724", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe TRF, or at a lower velocity if limited by joint velocity constraints (see", "source": "mcs500_programming_manual", "chunk_index": 2724, "length": 169, "hash": "291dbfdac0b821ba4b4a99a8e0347785"}
{"id": "mcs500_programming_manual_2725", "text": "(page 152)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "mcs500_programming_manual", "chunk_index": 2725, "length": 117, "hash": "95f1820506550e300774f5c8da9ffdde"}
{"id": "mcs500_programming_manual_2726", "text": "The robot will decelerate to a complete stop after the duration specified by the command\nSetVelTimeout (page 167), unless a subsequent MoveLinVelTrf (page 136) or MoveLinVelWrf\n(page 137) command is issued, and. Additionally, the motion will stop if a PauseMotion\n(page 182) command is sent or if a motion limit is reached.", "source": "mcs500_programming_manual", "chunk_index": 2726, "length": 323, "hash": "86b8236ca9322aa9233065cfa9d428c7"}
{"id": "mcs500_programming_manual_2727", "text": "The robot will decelerate to a complete stop after the duration specified by the command", "source": "mcs500_programming_manual", "chunk_index": 2727, "length": 88, "hash": "9f314b6340480b8b27b175f8e519561b"}
{"id": "mcs500_programming_manual_2728", "text": "(page 167), unless a subsequent", "source": "mcs500_programming_manual", "chunk_index": 2728, "length": 31, "hash": "39f3ca55de8681043dff834f1c213180"}
{"id": "mcs500_programming_manual_2729", "text": "(page 137) command is issued, and. Additionally, the motion will stop if a", "source": "mcs500_programming_manual", "chunk_index": 2729, "length": 74, "hash": "7b6ca7ae09f80ce7867395eb2a787f8f"}
{"id": "mcs500_programming_manual_2730", "text": "(page 182) command is sent or if a motion limit is reached.", "source": "mcs500_programming_manual", "chunk_index": 2730, "length": 59, "hash": "9a8f19aa50430f00dcc6f062eb327550"}
{"id": "mcs500_programming_manual_2731", "text": "Note that this command, unlike position-mode motion commands, does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered. Instead, the robot simply stops before reaching the limit.", "source": "mcs500_programming_manual", "chunk_index": 2731, "length": 260, "hash": "e6b7126c2e0a2fa3f0fd840a7ad83c5a"}
{"id": "mcs500_programming_manual_2732", "text": "Note that this command, unlike position-mode motion commands,", "source": "mcs500_programming_manual", "chunk_index": 2732, "length": 61, "hash": "4daf9d6b3b17e51069640b2d67194c76"}
{"id": "mcs500_programming_manual_2733", "text": "does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered", "source": "mcs500_programming_manual", "chunk_index": 2733, "length": 138, "hash": "ec7e1e6ae87e52666c5a47cb71c4f717"}
{"id": "mcs500_programming_manual_2734", "text": ". Instead, the robot simply stops before reaching the limit.", "source": "mcs500_programming_manual", "chunk_index": 2734, "length": 60, "hash": "fe5aa25cfec86d3934e0262bd460120b"}
{"id": "mcs500_programming_manual_2735", "text": "MoveLinVelTrf(x\u0307,y\u0307,\u017c,\u03c9z)", "source": "mcs500_programming_manual", "chunk_index": 2735, "length": 25, "hash": "e95d6de80719b737f91f5176b5114500"}
{"id": "mcs500_programming_manual_2736", "text": "MoveLinVelTrf(x\u0307,y\u0307,\u017c,\u03c9", "source": "mcs500_programming_manual", "chunk_index": 2736, "length": 23, "hash": "8e2ba7526a9bb02aaf129ca35224d090"}
{"id": "mcs500_programming_manual_2737", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP expressed in the TRF, in mm/s;", "source": "mcs500_programming_manual", "chunk_index": 2737, "length": 90, "hash": "25638a824a45e875e140fd041e20bb42"}
{"id": "mcs500_programming_manual_2738", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP expressed in the TRF, in mm/s;", "source": "mcs500_programming_manual", "chunk_index": 2738, "length": 90, "hash": "25638a824a45e875e140fd041e20bb42"}
{"id": "mcs500_programming_manual_2739", "text": "the angular velocity of the TRF expressed in the TRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 2739, "length": 61, "hash": "02d40f77543be27394c3c04168931a27"}
{"id": "mcs500_programming_manual_2740", "text": "the angular velocity of the TRF expressed in the TRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 2740, "length": 61, "hash": "02d40f77543be27394c3c04168931a27"}
{"id": "mcs500_programming_manual_2741", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2741, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2742", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2742, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2743", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2743, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2744", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2744, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2745", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2745, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2746", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2746, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2747", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2747, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2748", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2748, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2749", "text": "In cyclic protocols,\nMotionCommandID 23. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2749, "length": 72, "hash": "9b6d7228d6b08f3081ba70fda24928cd"}
{"id": "mcs500_programming_manual_2750", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2750, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2751", "text": "23. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2751, "length": 35, "hash": "026d3741b3d95e3ace6b91414b436178"}
{"id": "mcs500_programming_manual_2752", "text": "(page 136) command is", "source": "mcs500_programming_manual", "chunk_index": 2752, "length": 21, "hash": "c48ccf46cae757c9a67079213fc905eb"}
{"id": "mcs500_programming_manual_2753", "text": "(page 136) command is", "source": "mcs500_programming_manual", "chunk_index": 2753, "length": 21, "hash": "c48ccf46cae757c9a67079213fc905eb"}
{"id": "mcs500_programming_manual_2754", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2754, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2755", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2755, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2756", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe WRF, or at a lower velocity if limited by joint velocity constraints (see SetJointVelLimit\n(page 152)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "mcs500_programming_manual", "chunk_index": 2756, "length": 304, "hash": "f6055bc0e214df47c18aed461124397f"}
{"id": "mcs500_programming_manual_2757", "text": "This command moves the robot\u2019s TRF at the specified Cartesian velocity, defined relative to\nthe WRF, or at a lower velocity if limited by joint velocity constraints (see", "source": "mcs500_programming_manual", "chunk_index": 2757, "length": 169, "hash": "75c20e6aaeeaadcf7d5ef885ac819693"}
{"id": "mcs500_programming_manual_2758", "text": "(page 152)). If needed, the joint velocities are proportionally reduced to ensure none exceed\ntheir specified limits.", "source": "mcs500_programming_manual", "chunk_index": 2758, "length": 117, "hash": "95f1820506550e300774f5c8da9ffdde"}
{"id": "mcs500_programming_manual_2759", "text": "The robot will decelerate to a complete stop after the duration specified by the command\nSetVelTimeout (page 167), unless a subsequent MoveLinVelTrf (page 136) or MoveLinVelWrf\n(page 137) command is issued, and. Additionally, the motion will stop if a PauseMotion\n(page 182) command is sent or if a motion limit is reached.", "source": "mcs500_programming_manual", "chunk_index": 2759, "length": 323, "hash": "86b8236ca9322aa9233065cfa9d428c7"}
{"id": "mcs500_programming_manual_2760", "text": "The robot will decelerate to a complete stop after the duration specified by the command", "source": "mcs500_programming_manual", "chunk_index": 2760, "length": 88, "hash": "9f314b6340480b8b27b175f8e519561b"}
{"id": "mcs500_programming_manual_2761", "text": "(page 167), unless a subsequent", "source": "mcs500_programming_manual", "chunk_index": 2761, "length": 31, "hash": "39f3ca55de8681043dff834f1c213180"}
{"id": "mcs500_programming_manual_2762", "text": "(page 137) command is issued, and. Additionally, the motion will stop if a", "source": "mcs500_programming_manual", "chunk_index": 2762, "length": 74, "hash": "7b6ca7ae09f80ce7867395eb2a787f8f"}
{"id": "mcs500_programming_manual_2763", "text": "(page 182) command is sent or if a motion limit is reached.", "source": "mcs500_programming_manual", "chunk_index": 2763, "length": 59, "hash": "9a8f19aa50430f00dcc6f062eb327550"}
{"id": "mcs500_programming_manual_2764", "text": "Note that this command, unlike position-mode motion commands, does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered. Instead, the robot simply stops before reaching the limit.", "source": "mcs500_programming_manual", "chunk_index": 2764, "length": 260, "hash": "e6b7126c2e0a2fa3f0fd840a7ad83c5a"}
{"id": "mcs500_programming_manual_2765", "text": "Note that this command, unlike position-mode motion commands,", "source": "mcs500_programming_manual", "chunk_index": 2765, "length": 61, "hash": "4daf9d6b3b17e51069640b2d67194c76"}
{"id": "mcs500_programming_manual_2766", "text": "does not generate motion\nerrors when a joint limit (including the desired turn configuration) or an uncrossable\nsingularity is encountered", "source": "mcs500_programming_manual", "chunk_index": 2766, "length": 138, "hash": "ec7e1e6ae87e52666c5a47cb71c4f717"}
{"id": "mcs500_programming_manual_2767", "text": ". Instead, the robot simply stops before reaching the limit.", "source": "mcs500_programming_manual", "chunk_index": 2767, "length": 60, "hash": "fe5aa25cfec86d3934e0262bd460120b"}
{"id": "mcs500_programming_manual_2768", "text": "MoveLinVelWrf(x\u0307,y\u0307,\u017c,\u03c9z)", "source": "mcs500_programming_manual", "chunk_index": 2768, "length": 25, "hash": "8821afdbe88b54bf749655bebe99d7e7"}
{"id": "mcs500_programming_manual_2769", "text": "MoveLinVelWrf(x\u0307,y\u0307,\u017c,\u03c9", "source": "mcs500_programming_manual", "chunk_index": 2769, "length": 23, "hash": "9e3262f3efa5bc4b17db96ad1f670abf"}
{"id": "mcs500_programming_manual_2770", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP with respect to the WRF, in mm/s;", "source": "mcs500_programming_manual", "chunk_index": 2770, "length": 93, "hash": "33ed9df0d9a229877343a43346b6faa7"}
{"id": "mcs500_programming_manual_2771", "text": "\u2022 \u1e8b, \u1e8f, \u017c: the components of the linear velocity of the TCP with respect to the WRF, in mm/s;", "source": "mcs500_programming_manual", "chunk_index": 2771, "length": 93, "hash": "33ed9df0d9a229877343a43346b6faa7"}
{"id": "mcs500_programming_manual_2772", "text": "the angular velocity of the TRF with respect to the WRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 2772, "length": 64, "hash": "a7f3d7bc0779e5fe4a87bed4b413d426"}
{"id": "mcs500_programming_manual_2773", "text": "the angular velocity of the TRF with respect to the WRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 2773, "length": 64, "hash": "a7f3d7bc0779e5fe4a87bed4b413d426"}
{"id": "mcs500_programming_manual_2774", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2774, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2775", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2775, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2776", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2776, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2777", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2777, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2778", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2778, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2779", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2779, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2780", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2780, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2781", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2781, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2782", "text": "In cyclic protocols,\nMotionCommandID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2782, "length": 72, "hash": "399b608cb12e85068e8b95f09309433e"}
{"id": "mcs500_programming_manual_2783", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2783, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2784", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2784, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_2785", "text": "(page 137) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2785, "length": 36, "hash": "e7a2f685af3b621c565d171940184b96"}
{"id": "mcs500_programming_manual_2786", "text": "(page 137) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2786, "length": 36, "hash": "e7a2f685af3b621c565d171940184b96"}
{"id": "mcs500_programming_manual_2787", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2787, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2788", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2788, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2789", "text": "This command moves the robot\u2019s TRF to a specified pose relative to the WRF. The robot\ncontroller calculates all possible joint sets corresponding to the target pose, including those\nassociated with singular robot postures.\nIt then selects the target joint set based on the\nspecified robot posture and turn configurations, if provided, or the one requiring the least\ntime to reach.", "source": "mcs500_programming_manual", "chunk_index": 2789, "length": 380, "hash": "0426df50dab6166fb08237fb23de329e"}
{"id": "mcs500_programming_manual_2790", "text": "This command moves the robot\u2019s TRF to a specified pose relative to the WRF. The robot\ncontroller calculates all possible joint sets corresponding to the target pose, including those\nassociated with singular robot postures.\nIt then selects the target joint set based on the\nspecified robot posture and turn configurations, if provided, or the one requiring the least\ntime to reach.", "source": "mcs500_programming_manual", "chunk_index": 2790, "length": 380, "hash": "0426df50dab6166fb08237fb23de329e"}
{"id": "mcs500_programming_manual_2791", "text": "The selected joint configuration is executed internally using a MoveJoints (page 126)\ncommand. As a result, all joint rotations start and stop simultaneously and move as quickly\nas possible, subject to the limits defined by the SetJointVel (page 151) and SetJointVelLimit\n(page 152) commands. The resulting motion is linear in joint space but nonlinear in Cartesian\nspace, meaning the TCP\u2019s path to its final destination is not easily predictable.", "source": "mcs500_programming_manual", "chunk_index": 2791, "length": 447, "hash": "c12cfe5f2c7f2426a2789ee655e5c3d1"}
{"id": "mcs500_programming_manual_2792", "text": "The selected joint configuration is executed internally using a", "source": "mcs500_programming_manual", "chunk_index": 2792, "length": 63, "hash": "8738264d0eaf63ecaf6df671474342c8"}
{"id": "mcs500_programming_manual_2793", "text": "(page 126)\ncommand. As a result, all joint rotations start and stop simultaneously and move as quickly\nas possible, subject to the limits defined by the", "source": "mcs500_programming_manual", "chunk_index": 2793, "length": 152, "hash": "33c6550ad320d8dce4ef7bf0301a36b2"}
{"id": "mcs500_programming_manual_2794", "text": "(page 152) commands. The resulting motion is linear in joint space but nonlinear in Cartesian\nspace, meaning the TCP\u2019s path to its final destination is not easily predictable.", "source": "mcs500_programming_manual", "chunk_index": 2794, "length": 175, "hash": "efed03d429d6246e95ba34cfa7a90b60"}
{"id": "mcs500_programming_manual_2795", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2795, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "mcs500_programming_manual_2796", "text": "\u2022 x, y, z: the target position for the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 2796, "length": 74, "hash": "12a6074574991a5977b35c416685640f"}
{"id": "mcs500_programming_manual_2797", "text": "\u2022 \u03b3: the target orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 2797, "length": 55, "hash": "ed4088414db4c52af548680e600bdb88"}
{"id": "mcs500_programming_manual_2798", "text": "\u2022 \u03b3: the target orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 2798, "length": 55, "hash": "ed4088414db4c52af548680e600bdb88"}
{"id": "mcs500_programming_manual_2799", "text": "relative to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2799, "length": 32, "hash": "b62301149d76820a3ae72d499bbcc803"}
{"id": "mcs500_programming_manual_2800", "text": "relative to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 2800, "length": 32, "hash": "b62301149d76820a3ae72d499bbcc803"}
{"id": "mcs500_programming_manual_2801", "text": "With this command, the robot can transition through or begin/end at singular robot postures\nwithout any issues. However, as with the MoveJoints (page 126) command, if the complete\nmotion cannot be executed due to joint limits, the motion will not start, and an error will be\ngenerated.", "source": "mcs500_programming_manual", "chunk_index": 2801, "length": 285, "hash": "7006dad300be04a981687f9e7f92af9b"}
{"id": "mcs500_programming_manual_2802", "text": "With this command, the robot can transition through or begin/end at singular robot postures\nwithout any issues. However, as with the", "source": "mcs500_programming_manual", "chunk_index": 2802, "length": 132, "hash": "1081d9a13f215ec1cb5c9c1439e74af4"}
{"id": "mcs500_programming_manual_2803", "text": "(page 126) command, if the complete\nmotion cannot be executed due to joint limits, the motion will not start, and an error will be\ngenerated.", "source": "mcs500_programming_manual", "chunk_index": 2803, "length": 141, "hash": "110c46208e5e8468676f5b3f34def032"}
{"id": "mcs500_programming_manual_2804", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2804, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2805", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2805, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2806", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2806, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2807", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2807, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2808", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2808, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2809", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2809, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2810", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2810, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2811", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2811, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2812", "text": "In cyclic protocols, the MovePose (page 138) command is represented by MotionCommandID\n2. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2812, "length": 121, "hash": "1248892f380015f29730319c1be8678b"}
{"id": "mcs500_programming_manual_2813", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2813, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2814", "text": "(page 138) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2814, "length": 36, "hash": "42ff15157c5e5c7380d8e575d7cb2a56"}
{"id": "mcs500_programming_manual_2815", "text": "2. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2815, "length": 34, "hash": "820ffeb2e2b5ca121ba4c2da658982cb"}
{"id": "mcs500_programming_manual_2816", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2816, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2817", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2817, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2818", "text": "This command enables or disables the automatic posture configuration selection, to be\nobserved in the MovePose (page 138) and MoveLin* commands. This automatic selection,\nin conjunction with the turn configuration selection (see Section 3 and Section 3), allows the\ncontroller to choose the \u201cclosest\u201d joint set corresponding to the target pose.", "source": "mcs500_programming_manual", "chunk_index": 2818, "length": 344, "hash": "9f31db7dbf2a9fb89a474f7d845e2162"}
{"id": "mcs500_programming_manual_2819", "text": "This command enables or disables the automatic posture configuration selection, to be\nobserved in the", "source": "mcs500_programming_manual", "chunk_index": 2819, "length": 101, "hash": "58a1a4cce11ba708a64b9d1aefce9ed2"}
{"id": "mcs500_programming_manual_2820", "text": "(page 138) and MoveLin* commands. This automatic selection,\nin conjunction with the turn configuration selection (see Section 3 and Section 3), allows the\ncontroller to choose the \u201cclosest\u201d joint set corresponding to the target pose.", "source": "mcs500_programming_manual", "chunk_index": 2820, "length": 233, "hash": "75167d050e7d70ba5c4820361aec8fc8"}
{"id": "mcs500_programming_manual_2821", "text": "\u2022 e: enable (1) or disable (0) automatic posture configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 2821, "length": 73, "hash": "c978fb42d213b260820008a448bb0075"}
{"id": "mcs500_programming_manual_2822", "text": "\u2022 e: enable (1) or disable (0) automatic posture configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 2822, "length": 73, "hash": "c978fb42d213b260820008a448bb0075"}
{"id": "mcs500_programming_manual_2823", "text": "The automatic posture configuration selection is enabled by default. If you disable it, the new\ndesired posture configuration will be the one corresponding to the current robot position, i.e.,\nthe one after all preceding motion commands have been completed. Note, however, that if you\ndisable the automatic posture configuration selection in a singular robot posture (i.e., when\n\u03b83 = 0), the new desired configuration will be {1}. Finally, the automatic robot configuration\nselection is also disabled as soon as the robot receives the command SetConf (page 147).", "source": "mcs500_programming_manual", "chunk_index": 2823, "length": 562, "hash": "7392924ac411094a8abfe973c6141acc"}
{"id": "mcs500_programming_manual_2824", "text": "The automatic posture configuration selection is enabled by default. If you disable it, the new\ndesired posture configuration will be the one corresponding to the current robot position, i.e.,\nthe one after all preceding motion commands have been completed. Note, however, that if you\ndisable the automatic posture configuration selection in a singular robot posture (i.e., when\n\u03b8", "source": "mcs500_programming_manual", "chunk_index": 2824, "length": 380, "hash": "d6db8076a8cc7ea4a811402ff37c63c8"}
{"id": "mcs500_programming_manual_2825", "text": "= 0), the new desired configuration will be {1}. Finally, the automatic robot configuration\nselection is also disabled as soon as the robot receives the command", "source": "mcs500_programming_manual", "chunk_index": 2825, "length": 160, "hash": "fb971ce550fd1e75e28a037c369177f3"}
{"id": "mcs500_programming_manual_2826", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2826, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2827", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2827, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2828", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2828, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2829", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2829, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2830", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2830, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2831", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2831, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2832", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2832, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2833", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2833, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2834", "text": "In cyclic protocols, the SetAutoConf (page 139) command is represented by MotionCommandID\n16. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2834, "length": 125, "hash": "6532eb5031d1205a63b5a9ad83f939f7"}
{"id": "mcs500_programming_manual_2835", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2835, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2836", "text": "(page 139) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2836, "length": 36, "hash": "03134fa8f79ecd94deb02ba51056137c"}
{"id": "mcs500_programming_manual_2837", "text": "16. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2837, "length": 35, "hash": "46b6e548dd5ee40c6cc7e2615ec725b0"}
{"id": "mcs500_programming_manual_2838", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2838, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2839", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2839, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2840", "text": "This command enables/disables the automatic turn selection for the last joint of the robot\n(see Section 3 and Section 3). It affects the MovePose (page 138) command and all MoveLin*\ncommands. When the automatic turn selection is enabled, and a MovePose (page 138)\ncommand is executed, the last joint will always take the shortest path, and rotate no more than\n180\u00b0. In the case of a MoveLin* command, however, enabling the automatic turn selection\nsimply allows the change of turn configuration along the linear move.", "source": "mcs500_programming_manual", "chunk_index": 2840, "length": 517, "hash": "0bb5a9e89d89f111c8425a20edc00b08"}
{"id": "mcs500_programming_manual_2841", "text": "This command enables/disables the automatic turn selection for the last joint of the robot\n(see Section 3 and Section 3). It affects the", "source": "mcs500_programming_manual", "chunk_index": 2841, "length": 136, "hash": "c7ee3d41b6b90c04a45013f66ef3c360"}
{"id": "mcs500_programming_manual_2842", "text": "(page 138) command and all MoveLin*\ncommands. When the automatic turn selection is enabled, and a", "source": "mcs500_programming_manual", "chunk_index": 2842, "length": 97, "hash": "9d5b851161d2be9e1fd3c8e74e983618"}
{"id": "mcs500_programming_manual_2843", "text": "(page 138)\ncommand is executed, the last joint will always take the shortest path, and rotate no more than\n180\u00b0. In the case of a MoveLin* command, however, enabling the automatic turn selection\nsimply allows the change of turn configuration along the linear move.", "source": "mcs500_programming_manual", "chunk_index": 2843, "length": 264, "hash": "4456ad5aa573704d78fbd3fbb7678cce"}
{"id": "mcs500_programming_manual_2844", "text": "\u2022 e: enable (1) or disable (0) automatic turn configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 2844, "length": 70, "hash": "9d51233bd67c815bf791c442506e81a7"}
{"id": "mcs500_programming_manual_2845", "text": "\u2022 e: enable (1) or disable (0) automatic turn configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 2845, "length": 70, "hash": "9d51233bd67c815bf791c442506e81a7"}
{"id": "mcs500_programming_manual_2846", "text": "SetAutoConfTurn (page 140) is enabled by default. If you disable the automatic turn selection,\nthe new desired turn configuration will be the one corresponding to the current robot\nposition, i.e., the one after all preceding motion commands have been completed. Finally,\nthe automatic turn configuration selection is also disabled as soon as the robot receives the\ncommand SetConfTurn (page 148).", "source": "mcs500_programming_manual", "chunk_index": 2846, "length": 396, "hash": "c8acc12ec4829bbcf4cd9f0aff6c7989"}
{"id": "mcs500_programming_manual_2847", "text": "(page 140) is enabled by default. If you disable the automatic turn selection,\nthe new desired turn configuration will be the one corresponding to the current robot\nposition, i.e., the one after all preceding motion commands have been completed. Finally,\nthe automatic turn configuration selection is also disabled as soon as the robot receives the\ncommand", "source": "mcs500_programming_manual", "chunk_index": 2847, "length": 356, "hash": "8dcdfd5caf1a699fead8eeff9bcade75"}
{"id": "mcs500_programming_manual_2848", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2848, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2849", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2849, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2850", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2850, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2851", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2851, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2852", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2852, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2853", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2853, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2854", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2854, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2855", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2855, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2856", "text": "In cyclic protocols,\nMotionCommandID 26. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2856, "length": 72, "hash": "eb1ae34230fb4d79b8d8d85e859cb6ac"}
{"id": "mcs500_programming_manual_2857", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2857, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2858", "text": "26. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2858, "length": 35, "hash": "72b26842366a26cbd946f316d46d4efa"}
{"id": "mcs500_programming_manual_2859", "text": "the SetAutoConfTurn (page 140) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2859, "length": 56, "hash": "e4cd3b98d09cfb9c7ac11be1cdaad124"}
{"id": "mcs500_programming_manual_2860", "text": "(page 140) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2860, "length": 36, "hash": "949a2266776c2d67dadbfc9d57f32cbf"}
{"id": "mcs500_programming_manual_2861", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2861, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2862", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2862, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2863", "text": "This command enables/disables the robot\u2019s blending feature (Section 3). Note that there is\nblending only between consecutive movements with the position-mode joint-space commands\nMoveJoints (page 126), MoveJointsRel (page 128), MovePose (page 138) and MoveJump\n(page 130), or between consecutive movements with the position-mode Cartesian-space\ncommands MoveLin (page 132), MoveLinRelTrf (page 134) and MoveLinRelTrf (page 134).\nFor example, there will never be blending between the trajectories of a MovePose (page 138)\ncommand followed by a MoveLin (page 132) command.", "source": "mcs500_programming_manual", "chunk_index": 2863, "length": 570, "hash": "7be50a99cad2cfba3a2108377f2aef9a"}
{"id": "mcs500_programming_manual_2864", "text": "This command enables/disables the robot\u2019s blending feature (Section 3). Note that there is\nblending only between consecutive movements with the position-mode joint-space commands", "source": "mcs500_programming_manual", "chunk_index": 2864, "length": 178, "hash": "4da4016cabf346bd4e7c60736e62d2be"}
{"id": "mcs500_programming_manual_2865", "text": "(page 130), or between consecutive movements with the position-mode Cartesian-space\ncommands", "source": "mcs500_programming_manual", "chunk_index": 2865, "length": 92, "hash": "e8af72041b63fe0c3cd6c914dd8f83b9"}
{"id": "mcs500_programming_manual_2866", "text": "(page 134).\nFor example, there will never be blending between the trajectories of a", "source": "mcs500_programming_manual", "chunk_index": 2866, "length": 83, "hash": "e5463c06b5f9b0a7f2145fe18da811ba"}
{"id": "mcs500_programming_manual_2867", "text": "(page 138)\ncommand followed by a", "source": "mcs500_programming_manual", "chunk_index": 2867, "length": 32, "hash": "4b79a5407dc6901c341e0f2ca4f8db33"}
{"id": "mcs500_programming_manual_2868", "text": "\u2022 p: percentage of blending, ranging from 0 (blending disabled) to 100.", "source": "mcs500_programming_manual", "chunk_index": 2868, "length": 71, "hash": "b4d92e7072bfbc242ac10537bc22a8bc"}
{"id": "mcs500_programming_manual_2869", "text": "\u2022 p: percentage of blending, ranging from 0 (blending disabled) to 100.", "source": "mcs500_programming_manual", "chunk_index": 2869, "length": 71, "hash": "b4d92e7072bfbc242ac10537bc22a8bc"}
{"id": "mcs500_programming_manual_2870", "text": "Blending is enabled at 100% by default.", "source": "mcs500_programming_manual", "chunk_index": 2870, "length": 39, "hash": "5ad9f515f7b67cec265f0d7f276cbdce"}
{"id": "mcs500_programming_manual_2871", "text": "Blending is enabled at 100% by default.", "source": "mcs500_programming_manual", "chunk_index": 2871, "length": 39, "hash": "5ad9f515f7b67cec265f0d7f276cbdce"}
{"id": "mcs500_programming_manual_2872", "text": "A blending of 100% corresponds to a blending that occurs 100% of the duration of the\nacceleration and develeration periods, controlled by SetJointAcc (page 150), SetCartAcc\n(page 142) and SetJointVelLimit (page 152).", "source": "mcs500_programming_manual", "chunk_index": 2872, "length": 216, "hash": "526fe7d1db3feb20be20fde6038b8cf6"}
{"id": "mcs500_programming_manual_2873", "text": "A blending of 100% corresponds to a blending that occurs 100% of the duration of the\nacceleration and develeration periods, controlled by", "source": "mcs500_programming_manual", "chunk_index": 2873, "length": 137, "hash": "d02904ed3e5578f04a2708f756cc2fd8"}
{"id": "mcs500_programming_manual_2874", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2874, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2875", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2875, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2876", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2876, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2877", "text": "(page 341), not in an error state and when no safety signal conditions are", "source": "mcs500_programming_manual", "chunk_index": 2877, "length": 74, "hash": "49abd4120e314f03a4b8cf9648619014"}
{"id": "mcs500_programming_manual_2878", "text": "present. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2878, "length": 63, "hash": "8863c95c2fb90f5a7199504e03bd575e"}
{"id": "mcs500_programming_manual_2879", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2879, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2880", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2880, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2881", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2881, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2882", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2882, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2883", "text": "In cyclic protocols, the SetBlending (page 141) command is represented by MotionCommandID\n7. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2883, "length": 124, "hash": "ff3aac94dec0780efabc5659a921e9f1"}
{"id": "mcs500_programming_manual_2884", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2884, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2885", "text": "(page 141) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2885, "length": 36, "hash": "e1e4d625dce5835d7ee77c0188317ffe"}
{"id": "mcs500_programming_manual_2886", "text": "7. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2886, "length": 34, "hash": "c3547f926bd0d065b2f87980b2b61479"}
{"id": "mcs500_programming_manual_2887", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2887, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2888", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2888, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2889", "text": "This command limits the Cartesian acceleration (both linear and angular) of the TRF relative\nto the WRF during movements resulting from Cartesian-space commands (see Figure 7). Note\nthat using this command causes the robot to come to a complete stop, even if blending is\nenabled.", "source": "mcs500_programming_manual", "chunk_index": 2889, "length": 279, "hash": "8b9b726ebbaac946176e28b943ec2444"}
{"id": "mcs500_programming_manual_2890", "text": "This command limits the Cartesian acceleration (both linear and angular) of the TRF relative\nto the WRF during movements resulting from Cartesian-space commands (see Figure 7). Note\nthat using this command causes the robot to come to a complete stop, even if blending is\nenabled.", "source": "mcs500_programming_manual", "chunk_index": 2890, "length": 279, "hash": "8b9b726ebbaac946176e28b943ec2444"}
{"id": "mcs500_programming_manual_2891", "text": "\u2022 p: percentage of maximum acceleration of the TRF, ranging from 0.001 to 600.", "source": "mcs500_programming_manual", "chunk_index": 2891, "length": 78, "hash": "a5bf48bc7ba90507999fccfdf5e68c51"}
{"id": "mcs500_programming_manual_2892", "text": "\u2022 p: percentage of maximum acceleration of the TRF, ranging from 0.001 to 600.", "source": "mcs500_programming_manual", "chunk_index": 2892, "length": 78, "hash": "a5bf48bc7ba90507999fccfdf5e68c51"}
{"id": "mcs500_programming_manual_2893", "text": "The default end-effector acceleration limit is 50%.", "source": "mcs500_programming_manual", "chunk_index": 2893, "length": 51, "hash": "d609db762fd490a04cf9308a6e0b9f92"}
{"id": "mcs500_programming_manual_2894", "text": "The default end-effector acceleration limit is 50%.", "source": "mcs500_programming_manual", "chunk_index": 2894, "length": 51, "hash": "d609db762fd490a04cf9308a6e0b9f92"}
{"id": "mcs500_programming_manual_2895", "text": "When using large accelerations and a heavy payload, we recommend using the SetPayload\n(page 160) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the SetTorqueLimitsCfg (page 164)).", "source": "mcs500_programming_manual", "chunk_index": 2895, "length": 324, "hash": "efbdf67b18c55301129d7ec2e0220caa"}
{"id": "mcs500_programming_manual_2896", "text": "When using large accelerations and a heavy payload, we recommend using the", "source": "mcs500_programming_manual", "chunk_index": 2896, "length": 74, "hash": "e0f135f73d70b15acb78be10ef16e337"}
{"id": "mcs500_programming_manual_2897", "text": "(page 160) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the", "source": "mcs500_programming_manual", "chunk_index": 2897, "length": 206, "hash": "03f9af4c3e98b0cd3dca5ceb39a7f816"}
{"id": "mcs500_programming_manual_2898", "text": "Note that the argument of this command is exceptionally limited to 600. This is because in\nfirmware 8, a change was made to allow the robot to accelerate much faster. For backwards\ncompatibility, however, 100% now corresponds to 100% in firmware 7 and before.", "source": "mcs500_programming_manual", "chunk_index": 2898, "length": 259, "hash": "bf5c9c2d0ed080551c5cfe0afeecf288"}
{"id": "mcs500_programming_manual_2899", "text": "Note that the argument of this command is exceptionally limited to 600. This is because in\nfirmware 8, a change was made to allow the robot to accelerate much faster. For backwards\ncompatibility, however, 100% now corresponds to 100% in firmware 7 and before.", "source": "mcs500_programming_manual", "chunk_index": 2899, "length": 259, "hash": "bf5c9c2d0ed080551c5cfe0afeecf288"}
{"id": "mcs500_programming_manual_2900", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2900, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2901", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2901, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2902", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2902, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2903", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2903, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2904", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2904, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2905", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2905, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2906", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2906, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2907", "text": "In cyclic protocols, the SetCartAcc (page 142) command is represented by MotionCommandID\n12. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2907, "length": 124, "hash": "d09ab59212f915954e28511a727f0281"}
{"id": "mcs500_programming_manual_2908", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 2908, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_2909", "text": "(page 142) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 2909, "length": 36, "hash": "d6cac4b244269da73af725d9bdfdda5e"}
{"id": "mcs500_programming_manual_2910", "text": "12. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2910, "length": 35, "hash": "268ba74d71174f53bfb8f40b9d7f7f86"}
{"id": "mcs500_programming_manual_2911", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2911, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2912", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2912, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2913", "text": "This command sets the desired and maximum angular velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the MoveLin (page 132), MoveLinRelTrf\n(page 134) and MoveLinRelWrf (page 135) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see SetMoveMode (page 159)).", "source": "mcs500_programming_manual", "chunk_index": 2913, "length": 342, "hash": "23260d066c818f551cdc1b160af4db2d"}
{"id": "mcs500_programming_manual_2914", "text": "This command sets the", "source": "mcs500_programming_manual", "chunk_index": 2914, "length": 21, "hash": "82426e4bbce9b39e98bca7221d468806"}
{"id": "mcs500_programming_manual_2915", "text": "angular velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the", "source": "mcs500_programming_manual", "chunk_index": 2915, "length": 105, "hash": "d0c381e0094a86efffbd59fbe86f8b86"}
{"id": "mcs500_programming_manual_2916", "text": "(page 135) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see", "source": "mcs500_programming_manual", "chunk_index": 2916, "length": 106, "hash": "51c647d7f167b18838324d406846d52a"}
{"id": "mcs500_programming_manual_2917", "text": "\u2022 \u03c9: TRF angular velocity limit, in \u00b0/s, ranging from 0.001 to 5,000.", "source": "mcs500_programming_manual", "chunk_index": 2917, "length": 69, "hash": "d853b4dea82c4da199ed298438cfa5df"}
{"id": "mcs500_programming_manual_2918", "text": "\u2022 \u03c9: TRF angular velocity limit, in \u00b0/s, ranging from 0.001 to 5,000.", "source": "mcs500_programming_manual", "chunk_index": 2918, "length": 69, "hash": "d853b4dea82c4da199ed298438cfa5df"}
{"id": "mcs500_programming_manual_2919", "text": "The default end-effector angular velocity limit is 45\u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 2919, "length": 57, "hash": "7e15a553ef440dccd65bd9bd6ce6dbe1"}
{"id": "mcs500_programming_manual_2920", "text": "The default end-effector angular velocity limit is 45\u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 2920, "length": 57, "hash": "7e15a553ef440dccd65bd9bd6ce6dbe1"}
{"id": "mcs500_programming_manual_2921", "text": "The actual angular velocity may be lower (but never higher) than requested at certain\nportions or throughout the linear path to ensure compliance with the joint velocity limits\nset by the SetJointVelLimit (page 152) command and the linear velocity limit set by the\nSetCartLinVel (page 144) command.", "source": "mcs500_programming_manual", "chunk_index": 2921, "length": 298, "hash": "3e14b756877e4613527112ff52ba2f01"}
{"id": "mcs500_programming_manual_2922", "text": "The actual angular velocity may be lower (but never higher) than requested at certain\nportions or throughout the linear path to ensure compliance with the joint velocity limits\nset by the", "source": "mcs500_programming_manual", "chunk_index": 2922, "length": 187, "hash": "9fdf1a9e6b849464831800600d431408"}
{"id": "mcs500_programming_manual_2923", "text": "(page 152) command and the linear velocity limit set by the", "source": "mcs500_programming_manual", "chunk_index": 2923, "length": 59, "hash": "9c278707ea6f82c98e9fa55c77931c22"}
{"id": "mcs500_programming_manual_2924", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2924, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2925", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2925, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2926", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2926, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2927", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2927, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2928", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2928, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2929", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2929, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2930", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2930, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2931", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2931, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2932", "text": "In cyclic protocols,\nMotionCommandID 10. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2932, "length": 72, "hash": "cb07808d5c8852f61216a90f0a909c7c"}
{"id": "mcs500_programming_manual_2933", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2933, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2934", "text": "10. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2934, "length": 35, "hash": "e815ae432376f48f3a6abb811b76617a"}
{"id": "mcs500_programming_manual_2935", "text": "(page 143) command is", "source": "mcs500_programming_manual", "chunk_index": 2935, "length": 21, "hash": "e3a9a29c053fe24338d294dd941b7db6"}
{"id": "mcs500_programming_manual_2936", "text": "(page 143) command is", "source": "mcs500_programming_manual", "chunk_index": 2936, "length": 21, "hash": "e3a9a29c053fe24338d294dd941b7db6"}
{"id": "mcs500_programming_manual_2937", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2937, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2938", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2938, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2939", "text": "This command sets the desired and maximum linear velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the MoveLin (page 132), MoveLinRelTrf\n(page 134) and MoveLinRelWrf (page 135) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see SetMoveMode (page 159)).", "source": "mcs500_programming_manual", "chunk_index": 2939, "length": 341, "hash": "0150d91ece29b315b0ebd752cb06bd1c"}
{"id": "mcs500_programming_manual_2940", "text": "This command sets the", "source": "mcs500_programming_manual", "chunk_index": 2940, "length": 21, "hash": "82426e4bbce9b39e98bca7221d468806"}
{"id": "mcs500_programming_manual_2941", "text": "linear velocity of the robot TRF with respect to\nits WRF. It only affects the movements generated by the", "source": "mcs500_programming_manual", "chunk_index": 2941, "length": 104, "hash": "fc97cf6c95421db99fec1b458120a0fa"}
{"id": "mcs500_programming_manual_2942", "text": "(page 135) commands.\nIt has impact on these movement\ncommands only if the move mode is velocity-based (see", "source": "mcs500_programming_manual", "chunk_index": 2942, "length": 106, "hash": "51c647d7f167b18838324d406846d52a"}
{"id": "mcs500_programming_manual_2943", "text": "\u2022 v: TRF linear velocity limit, in mm/s, ranging from 0.001 to 5,000.", "source": "mcs500_programming_manual", "chunk_index": 2943, "length": 69, "hash": "f2bd320950cc71f8bf38a6dbb6076525"}
{"id": "mcs500_programming_manual_2944", "text": "\u2022 v: TRF linear velocity limit, in mm/s, ranging from 0.001 to 5,000.", "source": "mcs500_programming_manual", "chunk_index": 2944, "length": 69, "hash": "f2bd320950cc71f8bf38a6dbb6076525"}
{"id": "mcs500_programming_manual_2945", "text": "The default end-effector angular velocity limit is 150 mm/s.", "source": "mcs500_programming_manual", "chunk_index": 2945, "length": 60, "hash": "dd5886ff8c936726b72c9578f4c4979e"}
{"id": "mcs500_programming_manual_2946", "text": "The default end-effector angular velocity limit is 150 mm/s.", "source": "mcs500_programming_manual", "chunk_index": 2946, "length": 60, "hash": "dd5886ff8c936726b72c9578f4c4979e"}
{"id": "mcs500_programming_manual_2947", "text": "The actual TCP velocity may be lower (but never higher) than requested at certain portions\nor throughout the linear path to ensure compliance with the joint velocity limits set by the\nSetJointVelLimit (page 152) command and the linear velocity limit set by the SetCartAngVel\n(page 143) command.", "source": "mcs500_programming_manual", "chunk_index": 2947, "length": 294, "hash": "15045c0991f76ab135a0ac3968e12509"}
{"id": "mcs500_programming_manual_2948", "text": "The actual TCP velocity may be lower (but never higher) than requested at certain portions\nor throughout the linear path to ensure compliance with the joint velocity limits set by the", "source": "mcs500_programming_manual", "chunk_index": 2948, "length": 183, "hash": "a64e58ffdd6c614117af217ec0219f23"}
{"id": "mcs500_programming_manual_2949", "text": "(page 152) command and the linear velocity limit set by the", "source": "mcs500_programming_manual", "chunk_index": 2949, "length": 59, "hash": "9c278707ea6f82c98e9fa55c77931c22"}
{"id": "mcs500_programming_manual_2950", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2950, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2951", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2951, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2952", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 2952, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_2953", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2953, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2954", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2954, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2955", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2955, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2956", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2956, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2957", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2957, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2958", "text": "In cyclic protocols,\nMotionCommandID 11. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2958, "length": 72, "hash": "ee3831050da177bd05aaa501df5afca1"}
{"id": "mcs500_programming_manual_2959", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2959, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2960", "text": "11. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2960, "length": 35, "hash": "40e9dadfdbbd6f4c3964f3252c4f8ab6"}
{"id": "mcs500_programming_manual_2961", "text": "(page 144) command is", "source": "mcs500_programming_manual", "chunk_index": 2961, "length": 21, "hash": "68f7662a57598e46b9ba22d94a4bc15d"}
{"id": "mcs500_programming_manual_2962", "text": "(page 144) command is", "source": "mcs500_programming_manual", "chunk_index": 2962, "length": 21, "hash": "68f7662a57598e46b9ba22d94a4bc15d"}
{"id": "mcs500_programming_manual_2963", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2963, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2964", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2964, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2965", "text": "This command defines a checkpoint in the motion queue. Thus, if you send a sequence of\nmotion commands to the robot, then the command SetCheckpoint (page 145), then other\nmotion commands, you will be able to know the exact moment when the motion command sent\njust before the SetCheckpoint (page 145) command was completed. At that precise moment,\nthe robot will send back the response [3030][n] (on both ports), where n is a positive integer\nIf blending was activated, the checkpoint response will be sent\nnumber defined by you.\nsomewhere along the blending. If a checkpoint is the last queued command, in the absence\nof blending with another command, the checkpoint response will be sent once the robot has\ncome to a stop (along with an EOB). Finally, note that you can use the same checkpoint\nnumber multiple times.", "source": "mcs500_programming_manual", "chunk_index": 2965, "length": 817, "hash": "0a4063b3f1a92cd8dc78df5f3f72ffbf"}
{"id": "mcs500_programming_manual_2966", "text": "This command defines a checkpoint in the motion queue. Thus, if you send a sequence of\nmotion commands to the robot, then the command", "source": "mcs500_programming_manual", "chunk_index": 2966, "length": 133, "hash": "89bbe879848cdee4242e4af7dbee5ec8"}
{"id": "mcs500_programming_manual_2967", "text": "(page 145), then other\nmotion commands, you will be able to know the exact moment when the motion command sent\njust before the", "source": "mcs500_programming_manual", "chunk_index": 2967, "length": 126, "hash": "b114ef5631228665e52a892268739649"}
{"id": "mcs500_programming_manual_2968", "text": "(page 145) command was completed. At that precise moment,\nthe robot will send back the response [3030][n] (on both ports), where n is a positive integer\nIf blending was activated, the checkpoint response will be sent\nnumber defined by you.\nsomewhere along the blending. If a checkpoint is the last queued command, in the absence\nof blending with another command, the checkpoint response will be sent once the robot has\ncome to a stop (along with an EOB). Finally, note that you can use the same checkpoint\nnumber multiple times.", "source": "mcs500_programming_manual", "chunk_index": 2968, "length": 528, "hash": "343c5c3582bcb7c42a1b6aebb34ae62a"}
{"id": "mcs500_programming_manual_2969", "text": "\u2022 n: an integer number, ranging from 1 to 8,000.", "source": "mcs500_programming_manual", "chunk_index": 2969, "length": 48, "hash": "02c5f6a6ee95461223fed0776f3ffcf7"}
{"id": "mcs500_programming_manual_2970", "text": "\u2022 n: an integer number, ranging from 1 to 8,000.", "source": "mcs500_programming_manual", "chunk_index": 2970, "length": 48, "hash": "02c5f6a6ee95461223fed0776f3ffcf7"}
{"id": "mcs500_programming_manual_2971", "text": "\u2013 Sent when the checkpoint was reached.", "source": "mcs500_programming_manual", "chunk_index": 2971, "length": 39, "hash": "a93c9cc2c1e796180f70bd4ce31b7bbe"}
{"id": "mcs500_programming_manual_2972", "text": "Sent when the checkpoint was reached.", "source": "mcs500_programming_manual", "chunk_index": 2972, "length": 37, "hash": "f47bf88d9fadb8160deaabb0ed87df25"}
{"id": "mcs500_programming_manual_2973", "text": "\u2013 Sent when the checkpoint was discarded and will never be reached (due to motion", "source": "mcs500_programming_manual", "chunk_index": 2973, "length": 81, "hash": "043722321c7e155019592e32e0595acb"}
{"id": "mcs500_programming_manual_2974", "text": "Sent when the checkpoint was discarded and will never be reached (due to motion", "source": "mcs500_programming_manual", "chunk_index": 2974, "length": 79, "hash": "f23e6d110cbc56b211ca421263521f4e"}
{"id": "mcs500_programming_manual_2975", "text": "cleared, robot deactivated, error, safety stop. etc.)", "source": "mcs500_programming_manual", "chunk_index": 2975, "length": 53, "hash": "bbbc42d956f97da6bbd04615d44f536b"}
{"id": "mcs500_programming_manual_2976", "text": "cleared, robot deactivated, error, safety stop. etc.)", "source": "mcs500_programming_manual", "chunk_index": 2976, "length": 53, "hash": "bbbc42d956f97da6bbd04615d44f536b"}
{"id": "mcs500_programming_manual_2977", "text": "Using a checkpoint is the only reliable method to confirm whether a specific motion\nsequence has been completed. Do not rely on the EOM or EOB messages, as these may\nbe received well before the motion or sequence is finished\u2014or not received at all if these\nmessages are not enabled.", "source": "mcs500_programming_manual", "chunk_index": 2977, "length": 282, "hash": "b7470b72e37394119981925583d2112f"}
{"id": "mcs500_programming_manual_2978", "text": "Using a checkpoint is the only reliable method to confirm whether a specific motion\nsequence has been completed. Do not rely on the EOM or EOB messages, as these may\nbe received well before the motion or sequence is finished\u2014or not received at all if these\nmessages are not enabled.", "source": "mcs500_programming_manual", "chunk_index": 2978, "length": 282, "hash": "b7470b72e37394119981925583d2112f"}
{"id": "mcs500_programming_manual_2979", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2979, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_2980", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 2980, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_2981", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 2981, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_2982", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2982, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2983", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 2983, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_2984", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2984, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2985", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 2985, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_2986", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2986, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2987", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2987, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2988", "text": "In cyclic protocols,\nMotionCommandID 17. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2988, "length": 72, "hash": "9d19f461659ddb4ff7cebcc30514a3ce"}
{"id": "mcs500_programming_manual_2989", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 2989, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_2990", "text": "17. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 2990, "length": 35, "hash": "75b8e07ed3415901ce52f98371b7d154"}
{"id": "mcs500_programming_manual_2991", "text": "(page 145) command is", "source": "mcs500_programming_manual", "chunk_index": 2991, "length": 21, "hash": "0a783837ab14a258083b8975e0168821"}
{"id": "mcs500_programming_manual_2992", "text": "(page 145) command is", "source": "mcs500_programming_manual", "chunk_index": 2992, "length": 21, "hash": "0a783837ab14a258083b8975e0168821"}
{"id": "mcs500_programming_manual_2993", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2993, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2994", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 2994, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_2995", "text": "This command sets the desired posture configuration to be observed in the MovePose\n(page 138) and MoveLin* commands (see Section 3 and Section 3). When a desired posture\nconfiguration is set, a MovePose (page 138) command will execute only if the final robot\nposition can be in the desired posture configuration. In contrast, a MoveLin* command will\nexecute only if the initial robot position already is in the desired posture configuration, and\nthe final robot position is also in the desired posture configuration.", "source": "mcs500_programming_manual", "chunk_index": 2995, "length": 516, "hash": "a858ce045e2a5d4c4ef4862cdf41a5f7"}
{"id": "mcs500_programming_manual_2996", "text": "This command sets the desired posture configuration to be observed in the", "source": "mcs500_programming_manual", "chunk_index": 2996, "length": 73, "hash": "b875f05bce24c897cdbc50331479570e"}
{"id": "mcs500_programming_manual_2997", "text": "(page 138) and MoveLin* commands (see Section 3 and Section 3). When a desired posture\nconfiguration is set, a", "source": "mcs500_programming_manual", "chunk_index": 2997, "length": 110, "hash": "99bb9e3ba6a8425495f2da3ce022adf8"}
{"id": "mcs500_programming_manual_2998", "text": "(page 138) command will execute only if the final robot\nposition can be in the desired posture configuration. In contrast, a MoveLin* command will\nexecute only if the initial robot position already is in the desired posture configuration, and\nthe final robot position is also in the desired posture configuration.", "source": "mcs500_programming_manual", "chunk_index": 2998, "length": 313, "hash": "bfd6562de5bc9dc91b188b02606e0ebe"}
{"id": "mcs500_programming_manual_2999", "text": "The posture configuration can be automatically selected, when executing a MovePose\n(page 138) or MoveLin* command, by using the SetAutoConf (page 139) command. Using\nSetConf (page 147) automatically disables the automatic posture configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 2999, "length": 254, "hash": "77a187105aeb016e67fdb8649699243f"}
{"id": "mcs500_programming_manual_3000", "text": "The posture configuration can be automatically selected, when executing a", "source": "mcs500_programming_manual", "chunk_index": 3000, "length": 73, "hash": "036bab04ccaad1b5c81962b84568fd4a"}
{"id": "mcs500_programming_manual_3001", "text": "(page 138) or MoveLin* command, by using the", "source": "mcs500_programming_manual", "chunk_index": 3001, "length": 44, "hash": "894e634c6593225c9836b90a1b47df68"}
{"id": "mcs500_programming_manual_3002", "text": "(page 139) command. Using", "source": "mcs500_programming_manual", "chunk_index": 3002, "length": 25, "hash": "2729f9b3022ee9caa9fed1da48ceaf89"}
{"id": "mcs500_programming_manual_3003", "text": "(page 147) automatically disables the automatic posture configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 3003, "length": 80, "hash": "6370068bb6665adbfddf284b2867f8de"}
{"id": "mcs500_programming_manual_3004", "text": "\u2022 ce: elbow configuration parameter, either \u22121 or 1.", "source": "mcs500_programming_manual", "chunk_index": 3004, "length": 52, "hash": "b44710a8afc4bfbbddcbbaab10e1f3b0"}
{"id": "mcs500_programming_manual_3005", "text": ": elbow configuration parameter, either \u22121 or 1.", "source": "mcs500_programming_manual", "chunk_index": 3005, "length": 48, "hash": "2f24f7596ab77fa9a966818c6aecfd14"}
{"id": "mcs500_programming_manual_3006", "text": "Automatic posture configuration selection is enabled by default (see SetAutoConf (page 139));\nwhen the robot starts, there is no default desired posture configuration. The desired posture\nconfiguration must be specified using the SetConf (page 147) command or the SetAutoConf(0)\n(page 139) command. The latter sets the desired posture configuration to the one of the\ncurrent robot posture.", "source": "mcs500_programming_manual", "chunk_index": 3006, "length": 389, "hash": "1d65bc49195b4da541853f8fcf1d90b0"}
{"id": "mcs500_programming_manual_3007", "text": "Automatic posture configuration selection is enabled by default (see", "source": "mcs500_programming_manual", "chunk_index": 3007, "length": 68, "hash": "04a51a63753fe76fabfba66f76cd1f83"}
{"id": "mcs500_programming_manual_3008", "text": "(page 139));\nwhen the robot starts, there is no default desired posture configuration. The desired posture\nconfiguration must be specified using the", "source": "mcs500_programming_manual", "chunk_index": 3008, "length": 148, "hash": "8da3a5af38de1fde09a0ed1f9d3931d4"}
{"id": "mcs500_programming_manual_3009", "text": "(page 147) command or the", "source": "mcs500_programming_manual", "chunk_index": 3009, "length": 25, "hash": "bda534f3a0af9262f754dd12d79921f3"}
{"id": "mcs500_programming_manual_3010", "text": "(page 139) command. The latter sets the desired posture configuration to the one of the\ncurrent robot posture.", "source": "mcs500_programming_manual", "chunk_index": 3010, "length": 110, "hash": "7b6bfed954693bcf3d2a2576506330d9"}
{"id": "mcs500_programming_manual_3011", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3011, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3012", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3012, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3013", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3013, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3014", "text": "(page 341), not in an error state and when no safety signal conditions are", "source": "mcs500_programming_manual", "chunk_index": 3014, "length": 74, "hash": "49abd4120e314f03a4b8cf9648619014"}
{"id": "mcs500_programming_manual_3015", "text": "present. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3015, "length": 63, "hash": "8863c95c2fb90f5a7199504e03bd575e"}
{"id": "mcs500_programming_manual_3016", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3016, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3017", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3017, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3018", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3018, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3019", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3019, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3020", "text": "In cyclic protocols, the SetConf (page 147) command is represented by MotionCommandID 15.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3020, "length": 121, "hash": "8bab79cf8580d7a99395991e84f06329"}
{"id": "mcs500_programming_manual_3021", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3021, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3022", "text": "(page 147) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3022, "length": 36, "hash": "aef8bbb72a3501d408714e6bbe726ff4"}
{"id": "mcs500_programming_manual_3023", "text": "15.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3023, "length": 35, "hash": "9c2a2baccc54ba2f15e9d22797b62097"}
{"id": "mcs500_programming_manual_3024", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3024, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3025", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3025, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3026", "text": "This command sets the desired turn configuration for the last joint, ct, to be observed in the\nMovePose (page 138) and MoveLin* commands (see Section 3 and Section 3). When ct is set,\na MovePose (page 138) command is executed only if the final robot position can be in the\ndesired turn configuration. In contrast, when a ct is set, a MoveLin* command will execute\nonly if the final robot position can be \u2014 and the initial robot position already is \u2014 in the\ndesired turn configuration.", "source": "mcs500_programming_manual", "chunk_index": 3026, "length": 484, "hash": "d005fc2cf3fa8f9ffe08aab895843453"}
{"id": "mcs500_programming_manual_3027", "text": "This command sets the desired turn configuration for the last joint, c", "source": "mcs500_programming_manual", "chunk_index": 3027, "length": 70, "hash": "4b8244235498adcc8ccc72ff68514040"}
{"id": "mcs500_programming_manual_3028", "text": ", to be observed in the", "source": "mcs500_programming_manual", "chunk_index": 3028, "length": 23, "hash": "dd610bca641d935dbb2cba05af830c99"}
{"id": "mcs500_programming_manual_3029", "text": "(page 138) and MoveLin* commands (see Section 3 and Section 3). When c", "source": "mcs500_programming_manual", "chunk_index": 3029, "length": 70, "hash": "42ba1329fe3f1c79ec300a7d5199fcaa"}
{"id": "mcs500_programming_manual_3030", "text": "(page 138) command is executed only if the final robot position can be in the\ndesired turn configuration. In contrast, when a c", "source": "mcs500_programming_manual", "chunk_index": 3030, "length": 127, "hash": "857f7bb12665d1b83632e0c37078c9f8"}
{"id": "mcs500_programming_manual_3031", "text": "is set, a MoveLin* command will execute\nonly if the final robot position can be \u2014 and the initial robot position already is \u2014 in the\ndesired turn configuration.", "source": "mcs500_programming_manual", "chunk_index": 3031, "length": 160, "hash": "65de94bb2dfca8ce8eb6de12397695a9"}
{"id": "mcs500_programming_manual_3032", "text": "The turn configuration can be automatically selected, when executing a MovePose (page 138)\nor MoveLin* command, by using the SetAutoConf (page 139) command. Using SetConfTurn\n(page 148) automatically disables the automatic turn configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 3032, "length": 252, "hash": "f2371941ebd2bb76c303e2f5cd0494b7"}
{"id": "mcs500_programming_manual_3033", "text": "The turn configuration can be automatically selected, when executing a", "source": "mcs500_programming_manual", "chunk_index": 3033, "length": 70, "hash": "220cb705565ad5474e42fd8081026541"}
{"id": "mcs500_programming_manual_3034", "text": "(page 138)\nor MoveLin* command, by using the", "source": "mcs500_programming_manual", "chunk_index": 3034, "length": 44, "hash": "a27d2495fdc3531db4248e382f9c9a3c"}
{"id": "mcs500_programming_manual_3035", "text": "(page 139) command. Using", "source": "mcs500_programming_manual", "chunk_index": 3035, "length": 25, "hash": "2729f9b3022ee9caa9fed1da48ceaf89"}
{"id": "mcs500_programming_manual_3036", "text": "(page 148) automatically disables the automatic turn configuration selection.", "source": "mcs500_programming_manual", "chunk_index": 3036, "length": 77, "hash": "9b98bd7f1c1ac2d4b8709178a2442d61"}
{"id": "mcs500_programming_manual_3037", "text": "\u2022 ct: turn configuration, an integer between \u221210 and 10.", "source": "mcs500_programming_manual", "chunk_index": 3037, "length": 56, "hash": "4d0e8531c71a7e9579e8d844785a7ae4"}
{"id": "mcs500_programming_manual_3038", "text": ": turn configuration, an integer between \u221210 and 10.", "source": "mcs500_programming_manual", "chunk_index": 3038, "length": 52, "hash": "0186c2ba7c6008d0c94ea1128c1dd34b"}
{"id": "mcs500_programming_manual_3039", "text": "The turn configuration parameter defines the desired range for joint 4, according to the\nfollowing inequality: \u2212180\u00b0 + ct360\u00b0 < \u03b84 \u2264 180\u00b0 + ct360\u00b0.", "source": "mcs500_programming_manual", "chunk_index": 3039, "length": 147, "hash": "0bf5efed39042d78a6ec5cef546fa89a"}
{"id": "mcs500_programming_manual_3040", "text": "The turn configuration parameter defines the desired range for joint 4, according to the\nfollowing inequality: \u2212180\u00b0 + c", "source": "mcs500_programming_manual", "chunk_index": 3040, "length": 120, "hash": "0093e3891a9b578a69fddcea08c0b13d"}
{"id": "mcs500_programming_manual_3041", "text": "There is no default desired turn configuration. The only way to set a desired turn configuration\nis to specify it with the command SetConfTurn (page 148) or to execute the command\nSetAutoConfTurn(0) (page 140). The latter sets the desired turn configuration to the one\nof the current position of the last joint.", "source": "mcs500_programming_manual", "chunk_index": 3041, "length": 311, "hash": "096290ff6b18c6d0d947af22d5ba1f9e"}
{"id": "mcs500_programming_manual_3042", "text": "There is no default desired turn configuration. The only way to set a desired turn configuration\nis to specify it with the command", "source": "mcs500_programming_manual", "chunk_index": 3042, "length": 130, "hash": "d9b37892850e6a9f03c7a7dada74131f"}
{"id": "mcs500_programming_manual_3043", "text": "(page 148) or to execute the command", "source": "mcs500_programming_manual", "chunk_index": 3043, "length": 36, "hash": "cc75bd4217d3ff5b48fb2c2189c751d6"}
{"id": "mcs500_programming_manual_3044", "text": "(page 140). The latter sets the desired turn configuration to the one\nof the current position of the last joint.", "source": "mcs500_programming_manual", "chunk_index": 3044, "length": 112, "hash": "29189f1aa5e1f74428f321a116b6e71b"}
{"id": "mcs500_programming_manual_3045", "text": "This command is primarily useful if your end-effector is wired. In such as case, limit the can\nrange of the last joint appropriately using the SetJointLimits (page 190) command. However,\nsince the cabling will not be configured identically when the last joint is at a 5\u00b0 versus 365\u00b0,\nfor example, it is advisable to specify which of these two alternatives is preferred for a given\npose. This can be achieved using the command SetConfTurn (page 148), with the appropriate\nturn configuration as argument.", "source": "mcs500_programming_manual", "chunk_index": 3045, "length": 502, "hash": "854365df6ccc1a8f54f7c2d399be77dc"}
{"id": "mcs500_programming_manual_3046", "text": "This command is primarily useful if your end-effector is wired. In such as case, limit the can\nrange of the last joint appropriately using the", "source": "mcs500_programming_manual", "chunk_index": 3046, "length": 142, "hash": "b62be5f4fb8e1df2198844c91302b2e5"}
{"id": "mcs500_programming_manual_3047", "text": "(page 190) command. However,\nsince the cabling will not be configured identically when the last joint is at a 5\u00b0 versus 365\u00b0,\nfor example, it is advisable to specify which of these two alternatives is preferred for a given\npose. This can be achieved using the command", "source": "mcs500_programming_manual", "chunk_index": 3047, "length": 267, "hash": "20619de2a8bfc821a710168e4f041049"}
{"id": "mcs500_programming_manual_3048", "text": "(page 148), with the appropriate\nturn configuration as argument.", "source": "mcs500_programming_manual", "chunk_index": 3048, "length": 64, "hash": "e642ac91d183ca8654cb49d461346ce4"}
{"id": "mcs500_programming_manual_3049", "text": "If using a cable-less end-effector, then the automatic turn configuration should never be\ndisabled.", "source": "mcs500_programming_manual", "chunk_index": 3049, "length": 99, "hash": "0db4cb807d77edb2bda84ae1260c6c4a"}
{"id": "mcs500_programming_manual_3050", "text": "If using a cable-less end-effector, then the automatic turn configuration should never be\ndisabled.", "source": "mcs500_programming_manual", "chunk_index": 3050, "length": 99, "hash": "0db4cb807d77edb2bda84ae1260c6c4a"}
{"id": "mcs500_programming_manual_3051", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3051, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3052", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3052, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3053", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3053, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3054", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3054, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3055", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3055, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3056", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3056, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3057", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3057, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3058", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3058, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3059", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3059, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3060", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3060, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3061", "text": "In cyclic protocols, the SetConfTurn (page 148) command is represented by MotionCommandID\n25. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3061, "length": 125, "hash": "8f93cc0d3365d0e6c9d46066bed5099f"}
{"id": "mcs500_programming_manual_3062", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3062, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3063", "text": "(page 148) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3063, "length": 36, "hash": "4d7546045260e0e011a84599db3754a0"}
{"id": "mcs500_programming_manual_3064", "text": "25. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3064, "length": 35, "hash": "33d3724857e5675d9f6491dc1afe0cf8"}
{"id": "mcs500_programming_manual_3065", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3065, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3066", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3066, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3067", "text": "This command limits the acceleration of the joints during movements resulting from joint-\nspace commands (see Figure 7). Note that this command makes the robot come to stop, even\nif blending is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3067, "length": 202, "hash": "4414ae231a01121a89d9bd27ec5ba39b"}
{"id": "mcs500_programming_manual_3068", "text": "This command limits the acceleration of the joints during movements resulting from joint-\nspace commands (see Figure 7). Note that this command makes the robot come to stop, even\nif blending is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3068, "length": 202, "hash": "4414ae231a01121a89d9bd27ec5ba39b"}
{"id": "mcs500_programming_manual_3069", "text": "\u2022 p: percentage of maximum acceleration of the joints, from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3069, "length": 73, "hash": "c06355ff022a2d7c643e1da47e1fd7c9"}
{"id": "mcs500_programming_manual_3070", "text": "\u2022 p: percentage of maximum acceleration of the joints, from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3070, "length": 73, "hash": "c06355ff022a2d7c643e1da47e1fd7c9"}
{"id": "mcs500_programming_manual_3071", "text": "The default joint acceleration limit is 100%.", "source": "mcs500_programming_manual", "chunk_index": 3071, "length": 45, "hash": "74b0205cb2c476d503f60c9c7d700179"}
{"id": "mcs500_programming_manual_3072", "text": "The default joint acceleration limit is 100%.", "source": "mcs500_programming_manual", "chunk_index": 3072, "length": 45, "hash": "74b0205cb2c476d503f60c9c7d700179"}
{"id": "mcs500_programming_manual_3073", "text": "When using large accelerations and a heavy payload, we recommend using the SetPayload\n(page 160) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the SetTorqueLimitsCfg (page 164)).", "source": "mcs500_programming_manual", "chunk_index": 3073, "length": 324, "hash": "efbdf67b18c55301129d7ec2e0220caa"}
{"id": "mcs500_programming_manual_3074", "text": "When using large accelerations and a heavy payload, we recommend using the", "source": "mcs500_programming_manual", "chunk_index": 3074, "length": 74, "hash": "e0f135f73d70b15acb78be10ef16e337"}
{"id": "mcs500_programming_manual_3075", "text": "(page 160) command. This allows the robot to predict the required torque with greater\nprecision, improving path tracking accuracy. It also helps reduce the required margins when\nusing torque limits (see the", "source": "mcs500_programming_manual", "chunk_index": 3075, "length": 206, "hash": "03f9af4c3e98b0cd3dca5ceb39a7f816"}
{"id": "mcs500_programming_manual_3076", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3076, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3077", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3077, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3078", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3078, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3079", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3079, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3080", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3080, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3081", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3081, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3082", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3082, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3083", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3083, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3084", "text": "In cyclic protocols, the SetJointAcc (page 150) command is represented by MotionCommandID\n9. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3084, "length": 124, "hash": "8d2a6990338d0da79c7af392b02d87ea"}
{"id": "mcs500_programming_manual_3085", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3085, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3086", "text": "(page 150) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3086, "length": 36, "hash": "d9648cb98638de4746c5fdf2bd871344"}
{"id": "mcs500_programming_manual_3087", "text": "9. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3087, "length": 34, "hash": "7bf6c0f6e995141d3279bebd244cbe67"}
{"id": "mcs500_programming_manual_3088", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3088, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3089", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3089, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3090", "text": "This command specifies the desired velocities of the robot joints during movements generated\nby the MovePose (page 138), MoveJoints (page 126), and MoveJointsRel (page 128)\ncommands. It has impact on these movement commands only if if the move mode is velocity-\nbased (see SetMoveMode (page 159)).", "source": "mcs500_programming_manual", "chunk_index": 3090, "length": 297, "hash": "6d65ea1572be543b55692465b02abbc3"}
{"id": "mcs500_programming_manual_3091", "text": "This command specifies the desired velocities of the robot joints during movements generated\nby the", "source": "mcs500_programming_manual", "chunk_index": 3091, "length": 99, "hash": "888a4b23ed73aeaa04786dfaa6b3ee89"}
{"id": "mcs500_programming_manual_3092", "text": "(page 128)\ncommands. It has impact on these movement commands only if if the move mode is velocity-\nbased (see", "source": "mcs500_programming_manual", "chunk_index": 3092, "length": 110, "hash": "36d7bd7ff769cbeaff332806155bfe7d"}
{"id": "mcs500_programming_manual_3093", "text": "\u2022 p: percentage of the top rated joint velocities, ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3093, "length": 77, "hash": "f07e3379f29b2a59932583ddf4763b19"}
{"id": "mcs500_programming_manual_3094", "text": "\u2022 p: percentage of the top rated joint velocities, ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3094, "length": 77, "hash": "f07e3379f29b2a59932583ddf4763b19"}
{"id": "mcs500_programming_manual_3095", "text": "Note that the value of p is overridden by the argument of the command SetJointVelLimit(p\u2092)\n(page 152) if p\u2092 < p. Also, it is not possible to limit the velocity of only one joint. With\nSetJointVel (page 151) and SetJointVelLimit (page 152), the maximum velocities of all joints\nare reduced proportionally.", "source": "mcs500_programming_manual", "chunk_index": 3095, "length": 304, "hash": "3ff66428264bec2c59d6734553e892e7"}
{"id": "mcs500_programming_manual_3096", "text": "Note that the value of p is overridden by the argument of the command", "source": "mcs500_programming_manual", "chunk_index": 3096, "length": 69, "hash": "9e44c0901b8f0d0d6d7ff51eda7b18f8"}
{"id": "mcs500_programming_manual_3097", "text": "SetJointVelLimit(p\u2092)", "source": "mcs500_programming_manual", "chunk_index": 3097, "length": 20, "hash": "ce437b2cdb05de991c5468598b38410f"}
{"id": "mcs500_programming_manual_3098", "text": "(page 152) if p\u2092 < p. Also, it is not possible to limit the velocity of only one joint. With", "source": "mcs500_programming_manual", "chunk_index": 3098, "length": 92, "hash": "51054fbbf78ddfc13bbd06bb59617df5"}
{"id": "mcs500_programming_manual_3099", "text": "(page 152), the maximum velocities of all joints\nare reduced proportionally.", "source": "mcs500_programming_manual", "chunk_index": 3099, "length": 76, "hash": "81f984dbc4079dfeddb39ad1ace48aad"}
{"id": "mcs500_programming_manual_3100", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3100, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3101", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3101, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3102", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3102, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3103", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3103, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3104", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3104, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3105", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3105, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3106", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3106, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3107", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3107, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3108", "text": "In cyclic protocols, the SetJointVel (page 151) command is represented by MotionCommandID\n8. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3108, "length": 124, "hash": "590e84e3ec23bf1ce1ddb3faf35bea3f"}
{"id": "mcs500_programming_manual_3109", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3109, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3110", "text": "(page 151) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3110, "length": 36, "hash": "6a9be307f7704e0db01752ad754d7a9b"}
{"id": "mcs500_programming_manual_3111", "text": "8. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3111, "length": 34, "hash": "e64933ed3383ba05e53065a46147d46a"}
{"id": "mcs500_programming_manual_3112", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3112, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3113", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3113, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3114", "text": "The SetJointVelLimit (page 152) overrides the default joint velocity limits. Unlike the\nSetJointVel (page 151) command, this command affects the movements generated by all\nMove* commands (even the MoveLinVel* ones).", "source": "mcs500_programming_manual", "chunk_index": 3114, "length": 215, "hash": "9f382201969ecc9adb4f2662784f6c35"}
{"id": "mcs500_programming_manual_3115", "text": "(page 152) overrides the default joint velocity limits. Unlike the", "source": "mcs500_programming_manual", "chunk_index": 3115, "length": 66, "hash": "4b43ef33ef09a3db856c809c2ccdeb4d"}
{"id": "mcs500_programming_manual_3116", "text": "(page 151) command, this command affects the movements generated by", "source": "mcs500_programming_manual", "chunk_index": 3116, "length": 67, "hash": "613a1803f65bc34b9ba17cde062cc008"}
{"id": "mcs500_programming_manual_3117", "text": "Move* commands (even the MoveLinVel* ones).", "source": "mcs500_programming_manual", "chunk_index": 3117, "length": 43, "hash": "f4abdb211b989239071fa5740d9f1def"}
{"id": "mcs500_programming_manual_3118", "text": "SetJointVelLimit(po)", "source": "mcs500_programming_manual", "chunk_index": 3118, "length": 20, "hash": "93f2ffc421a95ec670d66cd92bc26211"}
{"id": "mcs500_programming_manual_3119", "text": "\u2022 po: percentage of the top rated joint velocities, ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3119, "length": 78, "hash": "ce279900af5ae7cbdcb83b56bb59dc13"}
{"id": "mcs500_programming_manual_3120", "text": ": percentage of the top rated joint velocities, ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3120, "length": 74, "hash": "1509f3cdc7cef8f15dddbc8f5270b4fc"}
{"id": "mcs500_programming_manual_3121", "text": "By default, po = 100.", "source": "mcs500_programming_manual", "chunk_index": 3121, "length": 21, "hash": "6600f78d10f9346f64bb1f69255d29ee"}
{"id": "mcs500_programming_manual_3122", "text": "As of firmware 10.3, when the argument of SetJointVelLimit (page 152) is less than 100, the\nrobot will optimize its joint accelerations in the case of slower movements.", "source": "mcs500_programming_manual", "chunk_index": 3122, "length": 168, "hash": "23ec7ea0656768190b102d14c19b7cce"}
{"id": "mcs500_programming_manual_3123", "text": "As of firmware 10.3, when the argument of", "source": "mcs500_programming_manual", "chunk_index": 3123, "length": 41, "hash": "eaf5b8d05fc587d6e297ba6e1f4e3737"}
{"id": "mcs500_programming_manual_3124", "text": "(page 152) is less than 100, the\nrobot will optimize its joint accelerations in the case of slower movements.", "source": "mcs500_programming_manual", "chunk_index": 3124, "length": 109, "hash": "1ef1c7cda37c870b5df8274feb8d671c"}
{"id": "mcs500_programming_manual_3125", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3125, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3126", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3126, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3127", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3127, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3128", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3128, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3129", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3129, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3130", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3130, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3131", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3131, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3132", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3132, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3133", "text": "In cyclic protocols,\nMotionCommandID 33. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3133, "length": 72, "hash": "cc670c14bf479330c69b4da85d9e5073"}
{"id": "mcs500_programming_manual_3134", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3134, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3135", "text": "33. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3135, "length": 35, "hash": "737a2e666d6fcabfa49a14a243ee18ce"}
{"id": "mcs500_programming_manual_3136", "text": "the SetJointVelLimit", "source": "mcs500_programming_manual", "chunk_index": 3136, "length": 20, "hash": "ad1e2eacc44fbf7cf6b27146dfad0b0d"}
{"id": "mcs500_programming_manual_3137", "text": "(page 152) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3137, "length": 36, "hash": "b70e7d6136be02213c2107e6ea386b9a"}
{"id": "mcs500_programming_manual_3138", "text": "(page 152) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3138, "length": 36, "hash": "b70e7d6136be02213c2107e6ea386b9a"}
{"id": "mcs500_programming_manual_3139", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3139, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3140", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3140, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3141", "text": "When the move mode has been set to time-based with the command SetMoveMode(1)\n(page 159), the motion-queue SetMoveDuration (page 153) sets the desired duration for\nthe movement resulting from every subsequent position-mode command (except MoveJump\n(page 130)). The duration does not include the acceleration and deceleration phases.", "source": "mcs500_programming_manual", "chunk_index": 3141, "length": 332, "hash": "0a570d15f510f0290ef6b5ed1c0bfc71"}
{"id": "mcs500_programming_manual_3142", "text": "When the move mode has been set to time-based with the command", "source": "mcs500_programming_manual", "chunk_index": 3142, "length": 62, "hash": "c3821386b0737ee49cb4a035fac3deea"}
{"id": "mcs500_programming_manual_3143", "text": "(page 159), the motion-queue", "source": "mcs500_programming_manual", "chunk_index": 3143, "length": 28, "hash": "68029893871341b94a851e1938a7d9e3"}
{"id": "mcs500_programming_manual_3144", "text": "(page 153) sets the desired duration for\nthe movement resulting from every subsequent position-mode command (except", "source": "mcs500_programming_manual", "chunk_index": 3144, "length": 115, "hash": "2b9b566420e616b39feab08272d172cc"}
{"id": "mcs500_programming_manual_3145", "text": "(page 130)). The duration does not include the acceleration and deceleration phases.", "source": "mcs500_programming_manual", "chunk_index": 3145, "length": 84, "hash": "a1c354d62f34a72cee2b52e46567ce35"}
{"id": "mcs500_programming_manual_3146", "text": "\u2022 t: duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 3146, "length": 25, "hash": "2b8b2a2794458832923232b85b59c85a"}
{"id": "mcs500_programming_manual_3147", "text": "\u2022 t: duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 3147, "length": 25, "hash": "2b8b2a2794458832923232b85b59c85a"}
{"id": "mcs500_programming_manual_3148", "text": "If the duration is 0, the robot will move as fast as possible, but only if the severity set with\nSetMoveDurationCfg (page 154) is 0 or 1.", "source": "mcs500_programming_manual", "chunk_index": 3148, "length": 137, "hash": "8822fd27138f32a967f6a52cad08e720"}
{"id": "mcs500_programming_manual_3149", "text": "If the duration is 0, the robot will move as fast as possible, but only if the severity set with", "source": "mcs500_programming_manual", "chunk_index": 3149, "length": 96, "hash": "78c488b1894077542d53c328e5d3d4d4"}
{"id": "mcs500_programming_manual_3150", "text": "(page 154) is 0 or 1.", "source": "mcs500_programming_manual", "chunk_index": 3150, "length": 21, "hash": "c615e1cbdcd7277242249d12ec65e78d"}
{"id": "mcs500_programming_manual_3151", "text": "By default, the duration is 3 seconds.", "source": "mcs500_programming_manual", "chunk_index": 3151, "length": 38, "hash": "1d5401c4875c8ef382d1091ce7c59eb8"}
{"id": "mcs500_programming_manual_3152", "text": "By default, the duration is 3 seconds.", "source": "mcs500_programming_manual", "chunk_index": 3152, "length": 38, "hash": "1d5401c4875c8ef382d1091ce7c59eb8"}
{"id": "mcs500_programming_manual_3153", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3153, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3154", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3154, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3155", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3155, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3156", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3156, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3157", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3157, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3158", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3158, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3159", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3159, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3160", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3160, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3161", "text": "In cyclic protocols,\nMotionCommandID 51. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3161, "length": 72, "hash": "60e188635acafdb827061ab72a8bddb0"}
{"id": "mcs500_programming_manual_3162", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3162, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3163", "text": "51. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3163, "length": 35, "hash": "adba24d14d8093c02623eef61d6fe406"}
{"id": "mcs500_programming_manual_3164", "text": "the SetMoveDuration (page 153) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3164, "length": 56, "hash": "c1d68d6a64b7731d78c56ab1b9c7952f"}
{"id": "mcs500_programming_manual_3165", "text": "(page 153) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3165, "length": 36, "hash": "e7d0f09381cda98c6c1943b1d56b1049"}
{"id": "mcs500_programming_manual_3166", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3166, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3167", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3167, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3168", "text": "This motion-queue command specifies what happens when a move command cannot meet\nthe desired duration set by the SetMoveDuration (page 153) command, in time-based move\nmode.", "source": "mcs500_programming_manual", "chunk_index": 3168, "length": 173, "hash": "04047806d1779bdf7c6c94c046da4eaf"}
{"id": "mcs500_programming_manual_3169", "text": "This motion-queue command specifies what happens when a move command cannot meet\nthe desired duration set by the", "source": "mcs500_programming_manual", "chunk_index": 3169, "length": 112, "hash": "34c8be9302d7afdc8393a9d17b7abe91"}
{"id": "mcs500_programming_manual_3170", "text": "(page 153) command, in time-based move\nmode.", "source": "mcs500_programming_manual", "chunk_index": 3170, "length": 44, "hash": "7b29c3bbfd912a67c770a373cb497a65"}
{"id": "mcs500_programming_manual_3171", "text": "For joint-space moves, this occurs when one or more joints would need to exceed their\nmaximum velocity (SetJointVelLimit (page 152)). For linear moves, the robot may need to\nslow down in certain parts of the path due to joints reaching their velocity limits, such as\nnear singularities.", "source": "mcs500_programming_manual", "chunk_index": 3171, "length": 286, "hash": "12b76de1b21bdd7d02e1be2e60e7930c"}
{"id": "mcs500_programming_manual_3172", "text": "For joint-space moves, this occurs when one or more joints would need to exceed their\nmaximum velocity (", "source": "mcs500_programming_manual", "chunk_index": 3172, "length": 104, "hash": "557b72f142421a8da2bfbc4ed38509d5"}
{"id": "mcs500_programming_manual_3173", "text": "(page 152)). For linear moves, the robot may need to\nslow down in certain parts of the path due to joints reaching their velocity limits, such as\nnear singularities.", "source": "mcs500_programming_manual", "chunk_index": 3173, "length": 165, "hash": "f40c68040efe5dc9ba59e9746a19ac19"}
{"id": "mcs500_programming_manual_3174", "text": "SetMoveDurationCfg(s)", "source": "mcs500_programming_manual", "chunk_index": 3174, "length": 21, "hash": "0c0682e0004f8c41b4ea2155b84e552c"}
{"id": "mcs500_programming_manual_3175", "text": "SetMoveDurationCfg(s)", "source": "mcs500_programming_manual", "chunk_index": 3175, "length": 21, "hash": "0c0682e0004f8c41b4ea2155b84e552c"}
{"id": "mcs500_programming_manual_3176", "text": "\u2013 0 for silent mode (no warning),", "source": "mcs500_programming_manual", "chunk_index": 3176, "length": 33, "hash": "67e5c2e0b357e8fe32946816dd95262e"}
{"id": "mcs500_programming_manual_3177", "text": "0 for silent mode (no warning),", "source": "mcs500_programming_manual", "chunk_index": 3177, "length": 31, "hash": "9a2b4393c3cbcd4a2f0416e1a8d36d3e"}
{"id": "mcs500_programming_manual_3178", "text": "\u2013 1 for generating a warning message in the robot logs (also in MecaPortal), indicating\nthe shortest possible duration for the movement command that failed to meet the\ndesired duration,", "source": "mcs500_programming_manual", "chunk_index": 3178, "length": 185, "hash": "2f5b189c6997c1300628574cfe774b3f"}
{"id": "mcs500_programming_manual_3179", "text": "1 for generating a warning message in the robot logs (also in MecaPortal), indicating\nthe shortest possible duration for the movement command that failed to meet the\ndesired duration,", "source": "mcs500_programming_manual", "chunk_index": 3179, "length": 183, "hash": "2ba4b0c3ccd4f3ac24a869fef5d51d5b"}
{"id": "mcs500_programming_manual_3180", "text": "\u2013 4 for generating an error with a code [3051], also indicating the shortest possible", "source": "mcs500_programming_manual", "chunk_index": 3180, "length": 85, "hash": "20967f55a2ae8227d03b2e41476f5021"}
{"id": "mcs500_programming_manual_3181", "text": "4 for generating an error with a code [3051], also indicating the shortest possible", "source": "mcs500_programming_manual", "chunk_index": 3181, "length": 83, "hash": "ef23b0667a8ba3db8e9a2ceca346bada"}
{"id": "mcs500_programming_manual_3182", "text": "duration for the movement command that failed to meet the desired duration.", "source": "mcs500_programming_manual", "chunk_index": 3182, "length": 75, "hash": "4ff4a29684e9199d6ef201d0176b3f16"}
{"id": "mcs500_programming_manual_3183", "text": "duration for the movement command that failed to meet the desired duration.", "source": "mcs500_programming_manual", "chunk_index": 3183, "length": 75, "hash": "4ff4a29684e9199d6ef201d0176b3f16"}
{"id": "mcs500_programming_manual_3184", "text": "Time scaling (SetTimeScaling (page 202)), recovery mode (Section 3) and manual mode may\nextend the move duration beyond the requested time when using time-based move mode.\nHowever, validation (if severity is set to 1 or 4 with SetMoveDurationCfg (page 154)) is\nperformed regardless of whether time scaling, recovery mode, or manual mode has been\napplied. This ensures that programs do not need to be modified to run in reduced speed\n(time scaling), recovery, or manual mode.", "source": "mcs500_programming_manual", "chunk_index": 3184, "length": 474, "hash": "f96c50408279011436049991907c4e20"}
{"id": "mcs500_programming_manual_3185", "text": "(page 202)), recovery mode (Section 3) and manual mode may", "source": "mcs500_programming_manual", "chunk_index": 3185, "length": 58, "hash": "16539c2fd337447e4da09de26d93fa22"}
{"id": "mcs500_programming_manual_3186", "text": "extend the move duration beyond the requested time when using time-based move mode.\nHowever, validation (if severity is set to 1 or 4 with", "source": "mcs500_programming_manual", "chunk_index": 3186, "length": 138, "hash": "788fbb031c7863334e6c3735fcefddfe"}
{"id": "mcs500_programming_manual_3187", "text": "(page 154)) is\nperformed regardless of whether time scaling, recovery mode, or manual mode has been\napplied. This ensures that programs do not need to be modified to run in reduced speed\n(time scaling), recovery, or manual mode.", "source": "mcs500_programming_manual", "chunk_index": 3187, "length": 228, "hash": "63622a7e0a243c0c2babc7ed318962da"}
{"id": "mcs500_programming_manual_3188", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3188, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3189", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3189, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3190", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3190, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3191", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3191, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3192", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3192, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3193", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3193, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3194", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3194, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3195", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3195, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3196", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3196, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3197", "text": "In cyclic protocols,\nMotionCommandID 50. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3197, "length": 72, "hash": "fe867b1480b7db025df9725b63962023"}
{"id": "mcs500_programming_manual_3198", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3198, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3199", "text": "50. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3199, "length": 35, "hash": "053b38c5d9019f2ca9391f052ec665d8"}
{"id": "mcs500_programming_manual_3200", "text": "the SetMoveDurationCfg (page 154) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3200, "length": 59, "hash": "f1a45514f7bd8c172d869c7cc95583a6"}
{"id": "mcs500_programming_manual_3201", "text": "(page 154) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3201, "length": 36, "hash": "297707d55acb8a99a6eb217b1672a2bb"}
{"id": "mcs500_programming_manual_3202", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3202, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3203", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3203, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3204", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 3204, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_3205", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 3205, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_3206", "text": "This command is intended for reducing the speed during the initial and final moments of the\nMoveJump (page 130) motion (see Figure 10).", "source": "mcs500_programming_manual", "chunk_index": 3206, "length": 135, "hash": "74e83389dd4a46cf8c3410f10f1e3922"}
{"id": "mcs500_programming_manual_3207", "text": "This command is intended for reducing the speed during the initial and final moments of the", "source": "mcs500_programming_manual", "chunk_index": 3207, "length": 91, "hash": "c1e5f58db00f9bcd92c7b5392945f3a0"}
{"id": "mcs500_programming_manual_3208", "text": "(page 130) motion (see Figure 10).", "source": "mcs500_programming_manual", "chunk_index": 3208, "length": 34, "hash": "a2fd791c8a4beb2fd1d661c9d04ca4d7"}
{"id": "mcs500_programming_manual_3209", "text": "SetMoveJumpApproachVel(vstart,pstart,vend,pend)", "source": "mcs500_programming_manual", "chunk_index": 3209, "length": 47, "hash": "5e6a47c4775425acd1d5c04ad80b0694"}
{"id": "mcs500_programming_manual_3210", "text": "SetMoveJumpApproachVel(v", "source": "mcs500_programming_manual", "chunk_index": 3210, "length": 24, "hash": "24c5495e2f6bbecc3c16c636b61fb34a"}
{"id": "mcs500_programming_manual_3211", "text": "\u2022 vstart: maximum allowed vertical speed near the start pose, in mm/s, from 0.001 to 700;", "source": "mcs500_programming_manual", "chunk_index": 3211, "length": 89, "hash": "8cef22d0086cdef1d4bb4236a35dd45d"}
{"id": "mcs500_programming_manual_3212", "text": ": maximum allowed vertical speed near the start pose, in mm/s, from 0.001 to 700;", "source": "mcs500_programming_manual", "chunk_index": 3212, "length": 81, "hash": "ff11804e81119ff05759a27adb5a9d32"}
{"id": "mcs500_programming_manual_3213", "text": "\u2022 pstart: initial portion of the retreat motion during which vstart is applied, in mm, from 0 to", "source": "mcs500_programming_manual", "chunk_index": 3213, "length": 96, "hash": "72d9611addd92aee606fcb52b09eb500"}
{"id": "mcs500_programming_manual_3214", "text": ": initial portion of the retreat motion during which v", "source": "mcs500_programming_manual", "chunk_index": 3214, "length": 54, "hash": "10eb08f06c002d9483d237b778c24579"}
{"id": "mcs500_programming_manual_3215", "text": "is applied, in mm, from 0 to", "source": "mcs500_programming_manual", "chunk_index": 3215, "length": 28, "hash": "896c745d1ffd3fa907cbf917918a0003"}
{"id": "mcs500_programming_manual_3216", "text": "\u2022 vend: maximum allowed vertical speed near the end pose, in mm/s, from 0.001 to 700;", "source": "mcs500_programming_manual", "chunk_index": 3216, "length": 85, "hash": "7f9d4a7f4abee88b10743206d29e7ff6"}
{"id": "mcs500_programming_manual_3217", "text": ": maximum allowed vertical speed near the end pose, in mm/s, from 0.001 to 700;", "source": "mcs500_programming_manual", "chunk_index": 3217, "length": 79, "hash": "2b3166832786c0941b83a34ec7da6313"}
{"id": "mcs500_programming_manual_3218", "text": "\u2022 pend: final portion of the approach motion during which vstart is applied, in mm, from 0", "source": "mcs500_programming_manual", "chunk_index": 3218, "length": 90, "hash": "e0f8947a4ca2c9bae267878b773935b4"}
{"id": "mcs500_programming_manual_3219", "text": ": final portion of the approach motion during which v", "source": "mcs500_programming_manual", "chunk_index": 3219, "length": 53, "hash": "d1f38ab43f61a9b41c52f5b78d2a407d"}
{"id": "mcs500_programming_manual_3220", "text": "is applied, in mm, from 0", "source": "mcs500_programming_manual", "chunk_index": 3220, "length": 25, "hash": "6e63f2309548ac8e86f1e89a6a5691f6"}
{"id": "mcs500_programming_manual_3221", "text": "By default, vstart = vend = 10 and pstart = pend = 1.", "source": "mcs500_programming_manual", "chunk_index": 3221, "length": 53, "hash": "af8862fb19bcf4b6d905edc3bed8557f"}
{"id": "mcs500_programming_manual_3222", "text": "Note that if pstart \u2265 |hstart|, then the complete retract vertical motion will be limited in speed\nto vstart. Similarly, if pend \u2265 |hend|, then the complete approach vertical motion will be limited\nin speed to vend. Also, if vstart or vend is larger than the speed resulting from the SetJointVel\n(page 151) command, it will be ignored.", "source": "mcs500_programming_manual", "chunk_index": 3222, "length": 335, "hash": "d11bc2d17cf551074e2160689d0cd77f"}
{"id": "mcs500_programming_manual_3223", "text": "|, then the complete retract vertical motion will be limited in speed\nto v", "source": "mcs500_programming_manual", "chunk_index": 3223, "length": 74, "hash": "793630ad57eb51ec785b241be07dfbdb"}
{"id": "mcs500_programming_manual_3224", "text": "|, then the complete approach vertical motion will be limited\nin speed to v", "source": "mcs500_programming_manual", "chunk_index": 3224, "length": 75, "hash": "d5773c1d22e91df5e2039b2e695c2f3a"}
{"id": "mcs500_programming_manual_3225", "text": "is larger than the speed resulting from the", "source": "mcs500_programming_manual", "chunk_index": 3225, "length": 43, "hash": "c77c4b4671d69af17ec90eb824e1fa31"}
{"id": "mcs500_programming_manual_3226", "text": "(page 151) command, it will be ignored.", "source": "mcs500_programming_manual", "chunk_index": 3226, "length": 39, "hash": "88ff22296c822f60bfe44b7643c6b2c1"}
{"id": "mcs500_programming_manual_3227", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3227, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3228", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3228, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3229", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3229, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3230", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3230, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3231", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3231, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3232", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3232, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3233", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3233, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3234", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3234, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3235", "text": "In cyclic protocols, the SetMoveJumpApproachVel (page 156) command is represented by\nMotionCommandID 47. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3235, "length": 136, "hash": "0ba829556670a247d62474f47a110960"}
{"id": "mcs500_programming_manual_3236", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3236, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3237", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 3237, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_3238", "text": "(page 156) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3238, "length": 36, "hash": "d682ee6d5937fa24486416cb446457a3"}
{"id": "mcs500_programming_manual_3239", "text": "47. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3239, "length": 35, "hash": "c191e2ebae9724ec3963774eeba51787"}
{"id": "mcs500_programming_manual_3240", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 3240, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_3241", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 3241, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_3242", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3242, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3243", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3243, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3244", "text": "This command prescribes the exact distances the end-effector must move up or down, with a\npure vertical translational motion, during the vertical portions of the MoveJump (page 130)\nmovement.\nIt also prescribes the minimum and maximum allowed heights for the lateral\nmotion (see Figure 10).", "source": "mcs500_programming_manual", "chunk_index": 3244, "length": 290, "hash": "79ed90d4a1566da7f57a579531961b30"}
{"id": "mcs500_programming_manual_3245", "text": "This command prescribes the exact distances the end-effector must move up or down, with a\npure vertical translational motion, during the vertical portions of the", "source": "mcs500_programming_manual", "chunk_index": 3245, "length": 161, "hash": "d30be15f3559eb990471cda94732294d"}
{"id": "mcs500_programming_manual_3246", "text": "(page 130)\nmovement.\nIt also prescribes the minimum and maximum allowed heights for the lateral\nmotion (see Figure 10).", "source": "mcs500_programming_manual", "chunk_index": 3246, "length": 119, "hash": "edca2763f57cc47f8aebc5fe25e977e0"}
{"id": "mcs500_programming_manual_3247", "text": "SetMoveJumpHeight(hstart,hend,hmin,hmax)", "source": "mcs500_programming_manual", "chunk_index": 3247, "length": 40, "hash": "fd9a35b1f72a7b4a223e18b4a61957f1"}
{"id": "mcs500_programming_manual_3248", "text": "\u2022 hstart: height of the initial pure vertical translation, in mm, from \u2212102 to 102;", "source": "mcs500_programming_manual", "chunk_index": 3248, "length": 83, "hash": "9af52e8ce1bd2a2ed3e0402397c15dff"}
{"id": "mcs500_programming_manual_3249", "text": ": height of the initial pure vertical translation, in mm, from \u2212102 to 102;", "source": "mcs500_programming_manual", "chunk_index": 3249, "length": 75, "hash": "d2c471f42ad439ecdb61ce510818b39b"}
{"id": "mcs500_programming_manual_3250", "text": "\u2022 hend: height of the final pure vertical translation, in mm, from \u2212102 to 102;", "source": "mcs500_programming_manual", "chunk_index": 3250, "length": 79, "hash": "bd882fba2a3614a201f90e8fc84e3814"}
{"id": "mcs500_programming_manual_3251", "text": ": height of the final pure vertical translation, in mm, from \u2212102 to 102;", "source": "mcs500_programming_manual", "chunk_index": 3251, "length": 73, "hash": "110bb5c699866cac83cba1e0003d8afb"}
{"id": "mcs500_programming_manual_3252", "text": "\u2022 hmin: minimum height to reach while performing the lateral motion, with respect to the\nhighest (if hstart and hend are positive) or lowest (if hstart and hend are negative) between\nthe start and end poses, in mm, from \u2212102 to 102;", "source": "mcs500_programming_manual", "chunk_index": 3252, "length": 232, "hash": "31d73bbe2e8d30dd4e772f4e0c9b9893"}
{"id": "mcs500_programming_manual_3253", "text": ": minimum height to reach while performing the lateral motion, with respect to the\nhighest (if h", "source": "mcs500_programming_manual", "chunk_index": 3253, "length": 96, "hash": "7ac08ab843e2e89e83e398f0173cc511"}
{"id": "mcs500_programming_manual_3254", "text": "are positive) or lowest (if h", "source": "mcs500_programming_manual", "chunk_index": 3254, "length": 29, "hash": "d8db7fa83cb8cae7bbd4982f0c6e1da7"}
{"id": "mcs500_programming_manual_3255", "text": "are negative) between\nthe start and end poses, in mm, from \u2212102 to 102;", "source": "mcs500_programming_manual", "chunk_index": 3255, "length": 71, "hash": "610f01e8bc1fa8a196ce4e31030570cd"}
{"id": "mcs500_programming_manual_3256", "text": "\u2022 hmax: maximum height to reach while performing the lateral motion, with respect to the\nhighest (if hstart and hend are positive) or lowest (if hstart and hend are negative) between\nthe start and end poses, in mm, from \u2212102 to 102.", "source": "mcs500_programming_manual", "chunk_index": 3256, "length": 232, "hash": "f50074631e3d82c41b8529d902d4d94e"}
{"id": "mcs500_programming_manual_3257", "text": ": maximum height to reach while performing the lateral motion, with respect to the\nhighest (if h", "source": "mcs500_programming_manual", "chunk_index": 3257, "length": 96, "hash": "bf61d965fc9bc796a5ed9448a4260483"}
{"id": "mcs500_programming_manual_3258", "text": "are positive) or lowest (if h", "source": "mcs500_programming_manual", "chunk_index": 3258, "length": 29, "hash": "d8db7fa83cb8cae7bbd4982f0c6e1da7"}
{"id": "mcs500_programming_manual_3259", "text": "are negative) between\nthe start and end poses, in mm, from \u2212102 to 102.", "source": "mcs500_programming_manual", "chunk_index": 3259, "length": 71, "hash": "15b5249b98b6738a5cfdd4d9da89b6b3"}
{"id": "mcs500_programming_manual_3260", "text": "The direction of the heights (positive or negative) is with respect to the z-axis of the BRF.\nUse negative values if your robot is mounted upside-down (and your tool is installed at the\nflange farthest from the robot base).", "source": "mcs500_programming_manual", "chunk_index": 3260, "length": 223, "hash": "74b8f027f6677cdf3a1acf5f87bd785d"}
{"id": "mcs500_programming_manual_3261", "text": "The direction of the heights (positive or negative) is with respect to the z-axis of the BRF.\nUse negative values if your robot is mounted upside-down (and your tool is installed at the\nflange farthest from the robot base).", "source": "mcs500_programming_manual", "chunk_index": 3261, "length": 223, "hash": "74b8f027f6677cdf3a1acf5f87bd785d"}
{"id": "mcs500_programming_manual_3262", "text": "By default, hstart = hend = 10, hmin = 0, hmax = 102. The default values for hmin and hmax give\nfull freedom to choose the optimal (quickest) path between the start and end poses. You may\nchange hmin and hmax to avoid obstacles between the start and end poses, but be aware that\nthis may result in slower (suboptimal) cycle times. Also, note that the highest point during\nthe lateral motion can happen anywhere, not necessary in the middle. In addition, note that\nchanging the joint velocities with the command SetJointVel (page 151) will also change the\nprofile of the lateral motion.", "source": "mcs500_programming_manual", "chunk_index": 3262, "length": 585, "hash": "a7f288cffe38018f3a4fba6effcb2f46"}
{"id": "mcs500_programming_manual_3263", "text": "= 102. The default values for h", "source": "mcs500_programming_manual", "chunk_index": 3263, "length": 31, "hash": "4fe0b29df9812c20493e0f5aaf59f0d1"}
{"id": "mcs500_programming_manual_3264", "text": "give\nfull freedom to choose the optimal (quickest) path between the start and end poses. You may\nchange h", "source": "mcs500_programming_manual", "chunk_index": 3264, "length": 105, "hash": "81b2c1386277e87b15f4b1859c25be99"}
{"id": "mcs500_programming_manual_3265", "text": "to avoid obstacles between the start and end poses, but be aware that\nthis may result in slower (suboptimal) cycle times. Also, note that the highest point during\nthe lateral motion can happen anywhere, not necessary in the middle. In addition, note that\nchanging the joint velocities with the command", "source": "mcs500_programming_manual", "chunk_index": 3265, "length": 301, "hash": "1e450ba2716e6192ae50d8654a66c09b"}
{"id": "mcs500_programming_manual_3266", "text": "(page 151) will also change the\nprofile of the lateral motion.", "source": "mcs500_programming_manual", "chunk_index": 3266, "length": 62, "hash": "f07304473cd61694c9bdeafbbec700b0"}
{"id": "mcs500_programming_manual_3267", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3267, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3268", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3268, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3269", "text": "Figure 10: Settings for the MoveJump motion (projection on a vertical plane, the actual path\nis not in one plane)", "source": "mcs500_programming_manual", "chunk_index": 3269, "length": 113, "hash": "4c3574793e57e7eda752ce1e8dee48e9"}
{"id": "mcs500_programming_manual_3270", "text": "Figure 10: Settings for the MoveJump motion (projection on a vertical plane, the actual path\nis not in one plane)", "source": "mcs500_programming_manual", "chunk_index": 3270, "length": 113, "hash": "4c3574793e57e7eda752ce1e8dee48e9"}
{"id": "mcs500_programming_manual_3271", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3271, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3272", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3272, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3273", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3273, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3274", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3274, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3275", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3275, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3276", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3276, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3277", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3277, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3278", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3278, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3279", "text": "In cyclic protocols,\nMotionCommandID 46. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3279, "length": 72, "hash": "afda59b555ab218d2897307e764ce7e5"}
{"id": "mcs500_programming_manual_3280", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3280, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3281", "text": "46. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3281, "length": 35, "hash": "af1d013ebd128bb3764e939714e55ebc"}
{"id": "mcs500_programming_manual_3282", "text": "the SetMoveJumpHeight (page 157) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3282, "length": 58, "hash": "8b0b65c48625ea552831e799f56d6036"}
{"id": "mcs500_programming_manual_3283", "text": "(page 157) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3283, "length": 36, "hash": "2f1d0a35a9486f8d0f5325906d1c644b"}
{"id": "mcs500_programming_manual_3284", "text": "pstarthstartpendhendhminhmax\n\nstartpose\n\nendposehighestpoint\n\n\n\n\n\nretractmotionlateralmotion\n\n\n\napproachmotion", "source": "mcs500_programming_manual", "chunk_index": 3284, "length": 110, "hash": "de09e32e78b91589c3c7cf08ffc8d043"}
{"id": "mcs500_programming_manual_3285", "text": "startpose\n\nendposehighestpoint\n\n\n\n\n\nretractmotionlateralmotion\n\n\n\napproachmotion", "source": "mcs500_programming_manual", "chunk_index": 3285, "length": 80, "hash": "37cbf0713d70eac176c46242c840ecd8"}
{"id": "mcs500_programming_manual_3286", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3286, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3287", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3287, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3288", "text": "As discussed in Section 3, the timeline of a position-mode robot movement command (e.g.,\nMoveLin (page 132), MoveJoints (page 126), and MovePose (page 138)) can be determined\nby specifying either the desired velocities or the desired duration. The choice between these\ntwo \u201csubmodes\u201d is made using the motion-queue command SetMoveMode (page 159).", "source": "mcs500_programming_manual", "chunk_index": 3288, "length": 346, "hash": "08b356cb46f4b41ebdfcb76907240adb"}
{"id": "mcs500_programming_manual_3289", "text": "As discussed in Section 3, the timeline of a position-mode robot movement command (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 3289, "length": 88, "hash": "cf53dcbdaa019446a2c9a33e640f7e50"}
{"id": "mcs500_programming_manual_3290", "text": "(page 138)) can be determined\nby specifying either the desired velocities or the desired duration. The choice between these\ntwo \u201csubmodes\u201d is made using the motion-queue command", "source": "mcs500_programming_manual", "chunk_index": 3290, "length": 177, "hash": "5cff99f193352ef5a75d68196112a42d"}
{"id": "mcs500_programming_manual_3291", "text": "The command SetMoveDurationCfg (page 154) specifies what happens when a move\ncommand cannot meet the desired duration set by the SetMoveDuration (page 153) command,\nin time-based move mode.", "source": "mcs500_programming_manual", "chunk_index": 3291, "length": 189, "hash": "8900ccc29bfaf06839a581dd57b55094"}
{"id": "mcs500_programming_manual_3292", "text": "(page 154) specifies what happens when a move\ncommand cannot meet the desired duration set by the", "source": "mcs500_programming_manual", "chunk_index": 3292, "length": 97, "hash": "e4f0f60434dd224686c32877dcc87bee"}
{"id": "mcs500_programming_manual_3293", "text": "(page 153) command,\nin time-based move mode.", "source": "mcs500_programming_manual", "chunk_index": 3293, "length": 44, "hash": "f46226b671bef79be05f221200ce7eab"}
{"id": "mcs500_programming_manual_3294", "text": "\u2013 0 selects the velocity-based submode, meaning the commands SetJointVel\n(page 151), SetCartLinVel (page 144), and SetCartAngVel (page 143) affect all\nsubsequent position-mode movement commands.", "source": "mcs500_programming_manual", "chunk_index": 3294, "length": 194, "hash": "12641d035164ca828d06ed916dd86f91"}
{"id": "mcs500_programming_manual_3295", "text": "0 selects the velocity-based submode, meaning the commands", "source": "mcs500_programming_manual", "chunk_index": 3295, "length": 58, "hash": "1234dcd2e7f9e1baf9b7a08601ba3aac"}
{"id": "mcs500_programming_manual_3296", "text": "(page 143) affect all\nsubsequent position-mode movement commands.", "source": "mcs500_programming_manual", "chunk_index": 3296, "length": 65, "hash": "54ea1eea7878cab7ba89a3f31247a4e8"}
{"id": "mcs500_programming_manual_3297", "text": "\u2013 1 selects the time-based submode, meaning the command SetMoveDuration\n(page 153) affects all subsequent position-mode movement commands, except\nMoveJump (page 130).", "source": "mcs500_programming_manual", "chunk_index": 3297, "length": 166, "hash": "df386ac500ef9912a4120f0cbbf15c85"}
{"id": "mcs500_programming_manual_3298", "text": "1 selects the time-based submode, meaning the command", "source": "mcs500_programming_manual", "chunk_index": 3298, "length": 53, "hash": "05c7af0b080320c1116b5c46126bf33f"}
{"id": "mcs500_programming_manual_3299", "text": "(page 153) affects all subsequent position-mode movement commands, except", "source": "mcs500_programming_manual", "chunk_index": 3299, "length": 73, "hash": "4e95e9108ad0f5f51f9dd555e2197dbc"}
{"id": "mcs500_programming_manual_3300", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3300, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3301", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3301, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3302", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3302, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3303", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3303, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3304", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3304, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3305", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3305, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3306", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3306, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3307", "text": "In cyclic protocols,\nMotionCommandID 49. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3307, "length": 72, "hash": "f66bd970ae4aa014c82e1bea466f41d4"}
{"id": "mcs500_programming_manual_3308", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3308, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3309", "text": "49. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3309, "length": 35, "hash": "2e9a5929d8d53a07e5cb86d0789a766d"}
{"id": "mcs500_programming_manual_3310", "text": "the SetMoveMode (page 159) command is", "source": "mcs500_programming_manual", "chunk_index": 3310, "length": 37, "hash": "7e7c3eed8917262ea0f1996db376ab69"}
{"id": "mcs500_programming_manual_3311", "text": "(page 159) command is", "source": "mcs500_programming_manual", "chunk_index": 3311, "length": 21, "hash": "ab59423b71166fee68c4b92d694c7de7"}
{"id": "mcs500_programming_manual_3312", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3312, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3313", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3313, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3314", "text": "This command sets the robot\u2019s payload mass and the center of mass relative to the robot\u2019s\nFRF.", "source": "mcs500_programming_manual", "chunk_index": 3314, "length": 94, "hash": "2f8aa29829f1fddcff7723cf3f632b79"}
{"id": "mcs500_programming_manual_3315", "text": "This command sets the robot\u2019s payload mass and the center of mass relative to the robot\u2019s\nFRF.", "source": "mcs500_programming_manual", "chunk_index": 3315, "length": 94, "hash": "2f8aa29829f1fddcff7723cf3f632b79"}
{"id": "mcs500_programming_manual_3316", "text": "It is inserted in the motion queue with other motion commands, allowing it to be executed,\nfor example, after actions such as opening or closing the gripper.", "source": "mcs500_programming_manual", "chunk_index": 3316, "length": 157, "hash": "4263447ea79e8f55c24b5d26334d0671"}
{"id": "mcs500_programming_manual_3317", "text": "It is inserted in the motion queue with other motion commands, allowing it to be executed,\nfor example, after actions such as opening or closing the gripper.", "source": "mcs500_programming_manual", "chunk_index": 3317, "length": 157, "hash": "4263447ea79e8f55c24b5d26334d0671"}
{"id": "mcs500_programming_manual_3318", "text": "SetPayload(m,cx,cy,cz)", "source": "mcs500_programming_manual", "chunk_index": 3318, "length": 22, "hash": "e776e052d99b08f0612cfc2e5db6d0d0"}
{"id": "mcs500_programming_manual_3319", "text": "\u2022 m: the payload mass, in kilograms.", "source": "mcs500_programming_manual", "chunk_index": 3319, "length": 36, "hash": "b4b2463145b93b15875ecf5242cb4a05"}
{"id": "mcs500_programming_manual_3320", "text": "\u2022 m: the payload mass, in kilograms.", "source": "mcs500_programming_manual", "chunk_index": 3320, "length": 36, "hash": "b4b2463145b93b15875ecf5242cb4a05"}
{"id": "mcs500_programming_manual_3321", "text": "\u2022 cx,cy,cz: the coordinates of the payload center of mass, relative to the robot\u2019s FRF, in", "source": "mcs500_programming_manual", "chunk_index": 3321, "length": 90, "hash": "25072f23024de266672f9617f537182a"}
{"id": "mcs500_programming_manual_3322", "text": ": the coordinates of the payload center of mass, relative to the robot\u2019s FRF, in", "source": "mcs500_programming_manual", "chunk_index": 3322, "length": 80, "hash": "e806d1d91c99f3090527e479384905a2"}
{"id": "mcs500_programming_manual_3323", "text": "By default, the payload mass is 0 kg.", "source": "mcs500_programming_manual", "chunk_index": 3323, "length": 37, "hash": "173ddccd03ba68392f03f622fb8f0d8d"}
{"id": "mcs500_programming_manual_3324", "text": "By default, the payload mass is 0 kg.", "source": "mcs500_programming_manual", "chunk_index": 3324, "length": 37, "hash": "173ddccd03ba68392f03f622fb8f0d8d"}
{"id": "mcs500_programming_manual_3325", "text": "The provided payload mass should include the weight of any components attached to the\nrobot\u2019s flange, such as the end-effector and any workpieve being carried.", "source": "mcs500_programming_manual", "chunk_index": 3325, "length": 159, "hash": "96136086556bb4ccd4e4a7ac954f0223"}
{"id": "mcs500_programming_manual_3326", "text": "The provided payload mass should include the weight of any components attached to the\nrobot\u2019s flange, such as the end-effector and any workpieve being carried.", "source": "mcs500_programming_manual", "chunk_index": 3326, "length": 159, "hash": "96136086556bb4ccd4e4a7ac954f0223"}
{"id": "mcs500_programming_manual_3327", "text": "Although it is not mandatory to use this command, providing the payload data enables the\nrobot to better estimate the required motor torques. This leads to several potential benefits,\nsuch as:", "source": "mcs500_programming_manual", "chunk_index": 3327, "length": 192, "hash": "28defa5a86186350def7ffd32c12d509"}
{"id": "mcs500_programming_manual_3328", "text": "Although it is not mandatory to use this command, providing the payload data enables the\nrobot to better estimate the required motor torques. This leads to several potential benefits,\nsuch as:", "source": "mcs500_programming_manual", "chunk_index": 3328, "length": 192, "hash": "28defa5a86186350def7ffd32c12d509"}
{"id": "mcs500_programming_manual_3329", "text": "\u2022 Improved path tracking: The robot can move with greater accuracy and compensate for", "source": "mcs500_programming_manual", "chunk_index": 3329, "length": 85, "hash": "c9d2a7c80f1ed88d487355f83bf0ab77"}
{"id": "mcs500_programming_manual_3330", "text": "\u2022 Improved path tracking: The robot can move with greater accuracy and compensate for", "source": "mcs500_programming_manual", "chunk_index": 3330, "length": 85, "hash": "c9d2a7c80f1ed88d487355f83bf0ab77"}
{"id": "mcs500_programming_manual_3331", "text": "the additional load;", "source": "mcs500_programming_manual", "chunk_index": 3331, "length": 20, "hash": "6bc9db1e46d68287600488d387aa8ad7"}
{"id": "mcs500_programming_manual_3332", "text": "the additional load;", "source": "mcs500_programming_manual", "chunk_index": 3332, "length": 20, "hash": "6bc9db1e46d68287600488d387aa8ad7"}
{"id": "mcs500_programming_manual_3333", "text": "\u2022 Better torque limit management: Enhanced precision for the robot\u2019s torque limits option", "source": "mcs500_programming_manual", "chunk_index": 3333, "length": 89, "hash": "918e364cfcdc4c8cf064aa1e8b38240f"}
{"id": "mcs500_programming_manual_3334", "text": "\u2022 Better torque limit management: Enhanced precision for the robot\u2019s torque limits option", "source": "mcs500_programming_manual", "chunk_index": 3334, "length": 89, "hash": "918e364cfcdc4c8cf064aa1e8b38240f"}
{"id": "mcs500_programming_manual_3335", "text": "(see SetTorqueLimitsCfg (page 164)).", "source": "mcs500_programming_manual", "chunk_index": 3335, "length": 36, "hash": "f30d1ee0b93aa62c02eda20b021e1b09"}
{"id": "mcs500_programming_manual_3336", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3336, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3337", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3337, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3338", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3338, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3339", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3339, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3340", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3340, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3341", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3341, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3342", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3342, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3343", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3343, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3344", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3344, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3345", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3345, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3346", "text": "In cyclic protocols, the SetPayload (page 160) command is represented by MotionCommandID\n60. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3346, "length": 124, "hash": "06385a9b531f3940f12fbd9a7a05ae9b"}
{"id": "mcs500_programming_manual_3347", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3347, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3348", "text": "(page 160) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3348, "length": 36, "hash": "8f688789ae81d5bca9eef66dbad139a8"}
{"id": "mcs500_programming_manual_3349", "text": "60. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3349, "length": 35, "hash": "9194cabb55c07916895b13f9f5b47c8e"}
{"id": "mcs500_programming_manual_3350", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3350, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3351", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3351, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3352", "text": "This command sets thresholds for the torques applied to each motor, as percentages of the\nmaximum allowable torques that can be applied at each motor. These thresholds can be\ninterpreted in two different ways:", "source": "mcs500_programming_manual", "chunk_index": 3352, "length": 209, "hash": "e92a3a7fc32f91baa97d9d0464d0cab7"}
{"id": "mcs500_programming_manual_3353", "text": "This command sets thresholds for the torques applied to each motor, as percentages of the\nmaximum allowable torques that can be applied at each motor. These thresholds can be\ninterpreted in two different ways:", "source": "mcs500_programming_manual", "chunk_index": 3353, "length": 209, "hash": "e92a3a7fc32f91baa97d9d0464d0cab7"}
{"id": "mcs500_programming_manual_3354", "text": "\u2022 When the second argument of SetTorqueLimitsCfg (page 164) is 0 or 1, the absolute\nvalues of the actual motor torques (GetRtJointTorq (page 264)), also reported as\npercentages of the maximum allowable torques, are compared to the respective\nthresholds.", "source": "mcs500_programming_manual", "chunk_index": 3354, "length": 253, "hash": "add1dd428e416d28f17c5233b45cb120"}
{"id": "mcs500_programming_manual_3355", "text": "\u2022 When the second argument of", "source": "mcs500_programming_manual", "chunk_index": 3355, "length": 29, "hash": "12629b10a742ce767910452275c4e5ef"}
{"id": "mcs500_programming_manual_3356", "text": "(page 164) is 0 or 1, the absolute\nvalues of the actual motor torques (", "source": "mcs500_programming_manual", "chunk_index": 3356, "length": 71, "hash": "f2994327c476c4f2722605f37b48f422"}
{"id": "mcs500_programming_manual_3357", "text": "(page 264)), also reported as\npercentages of the maximum allowable torques, are compared to the respective\nthresholds.", "source": "mcs500_programming_manual", "chunk_index": 3357, "length": 118, "hash": "b1440a1d3d85f516e989b9f9762725f7"}
{"id": "mcs500_programming_manual_3358", "text": "\u2022 When the second argument of SetTorqueLimitsCfg (page 164) is 2, which is the\ndefault setting as of firmware 11.1, the absolute value of the difference between the\nactual (GetRtJointTorq (page 264)) and calculated motor torque (GetRtTargetJointTorq\n(page 271)) of each joint is compared with the respective threshold. Thus, in this case,\nthe arguments of SetTorqueLimits (page 162) should be rather small, for example, about\n10 (percent).", "source": "mcs500_programming_manual", "chunk_index": 3358, "length": 439, "hash": "e91e6686ab7779cd4bd626bd594c7c23"}
{"id": "mcs500_programming_manual_3359", "text": "\u2022 When the second argument of", "source": "mcs500_programming_manual", "chunk_index": 3359, "length": 29, "hash": "12629b10a742ce767910452275c4e5ef"}
{"id": "mcs500_programming_manual_3360", "text": "(page 164) is 2, which is the\ndefault setting as of firmware 11.1, the absolute value of the difference between the\nactual (", "source": "mcs500_programming_manual", "chunk_index": 3360, "length": 124, "hash": "255bbf95dca5a05d560532242b3ae6a2"}
{"id": "mcs500_programming_manual_3361", "text": "(page 264)) and calculated motor torque (", "source": "mcs500_programming_manual", "chunk_index": 3361, "length": 41, "hash": "0342b22661444deee636f6f1d822a2ad"}
{"id": "mcs500_programming_manual_3362", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 3362, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_3363", "text": "(page 271)) of each joint is compared with the respective threshold. Thus, in this case,\nthe arguments of", "source": "mcs500_programming_manual", "chunk_index": 3363, "length": 105, "hash": "1aa01c1e4f14e172f5058e4b070c86a5"}
{"id": "mcs500_programming_manual_3364", "text": "(page 162) should be rather small, for example, about", "source": "mcs500_programming_manual", "chunk_index": 3364, "length": 53, "hash": "d191eadc4aef57ade834585168d42b56"}
{"id": "mcs500_programming_manual_3365", "text": "When a torque thresholds is exceeded, a customizable event is created. The event behavior\ncan be set by the first argument of SetTorqueLimitsCfg (page 164).", "source": "mcs500_programming_manual", "chunk_index": 3365, "length": 156, "hash": "862a905a454b8850f8fd59200646aca6"}
{"id": "mcs500_programming_manual_3366", "text": "When a torque thresholds is exceeded, a customizable event is created. The event behavior\ncan be set by the first argument of", "source": "mcs500_programming_manual", "chunk_index": 3366, "length": 125, "hash": "792bf97fa370b9190ebec618e49e9ec7"}
{"id": "mcs500_programming_manual_3367", "text": "This command is intended only to improve the chances of protecting your robot, its end-\neffector, and the surrounding equipment in the event of a collision. The actual torque in each\nmotor (GetRtJointTorq (page 264)) is estimated by measuring the current in the corresponding\ndrive. The calculated torque (GetRtTargetJointTorq (page 271)) is obtained from the dynamic\nmodel of the robot.", "source": "mcs500_programming_manual", "chunk_index": 3367, "length": 387, "hash": "a3c7f39098236209432175d76fb56efd"}
{"id": "mcs500_programming_manual_3368", "text": "This command is intended only to improve the chances of protecting your robot, its end-\neffector, and the surrounding equipment in the event of a collision. The actual torque in each\nmotor (", "source": "mcs500_programming_manual", "chunk_index": 3368, "length": 190, "hash": "9d5c9a4b66002ac6dfeb8048525bd789"}
{"id": "mcs500_programming_manual_3369", "text": "(page 264)) is estimated by measuring the current in the corresponding\ndrive. The calculated torque (", "source": "mcs500_programming_manual", "chunk_index": 3369, "length": 101, "hash": "64d853c4422144f3682b7effd20b121d"}
{"id": "mcs500_programming_manual_3370", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 3370, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_3371", "text": "(page 271)) is obtained from the dynamic\nmodel of the robot.", "source": "mcs500_programming_manual", "chunk_index": 3371, "length": 60, "hash": "8f3c6a9ec42c64bcc98c9a133780953b"}
{"id": "mcs500_programming_manual_3372", "text": "SetTorqueLimits(\u03c41,\u03c42,\u03c43,\u03c44)", "source": "mcs500_programming_manual", "chunk_index": 3372, "length": 28, "hash": "c7882f05bdb78055bdefab56da08a8b2"}
{"id": "mcs500_programming_manual_3373", "text": "\u2022 \u03c4i: torque threshold represented by a percentage of the maximum allowable torque that", "source": "mcs500_programming_manual", "chunk_index": 3373, "length": 87, "hash": "99e529315c686827e82eaaef79133e86"}
{"id": "mcs500_programming_manual_3374", "text": ": torque threshold represented by a percentage of the maximum allowable torque that", "source": "mcs500_programming_manual", "chunk_index": 3374, "length": 83, "hash": "4aca68f26ef347af2173bde1266a7ffc"}
{"id": "mcs500_programming_manual_3375", "text": "can be applied at motor i, where i = 1, 2, \u2026, 4 ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3375, "length": 74, "hash": "c4001de979519f739c25147209d01b37"}
{"id": "mcs500_programming_manual_3376", "text": "can be applied at motor i, where i = 1, 2, \u2026, 4 ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 3376, "length": 74, "hash": "c4001de979519f739c25147209d01b37"}
{"id": "mcs500_programming_manual_3377", "text": "By default, all torque thresholds are set to 100%.", "source": "mcs500_programming_manual", "chunk_index": 3377, "length": 50, "hash": "c31e57d2296ceffd7580da9f6425b57f"}
{"id": "mcs500_programming_manual_3378", "text": "By default, all torque thresholds are set to 100%.", "source": "mcs500_programming_manual", "chunk_index": 3378, "length": 50, "hash": "c31e57d2296ceffd7580da9f6425b57f"}
{"id": "mcs500_programming_manual_3379", "text": "Unlike the SetJointLimits (page 190) commands, the SetTorqueLimits (page 162) command\ncan only be applied after the robot has been activated. Note that high accelerations or large\nmovements may also produce high torque peaks. Therefore, you should rely on this command\nonly in the vicinity of obstacles, for example, while applying an adhesive. Remember that\nSetTorqueLimits (page 162) is a motion command and will therefore be inserted in the motion\nqueue and not necessarily executed immediately.", "source": "mcs500_programming_manual", "chunk_index": 3379, "length": 498, "hash": "101837553c877b8e7f60bf71793de306"}
{"id": "mcs500_programming_manual_3380", "text": "(page 190) commands, the", "source": "mcs500_programming_manual", "chunk_index": 3380, "length": 24, "hash": "1a26f1e41c595bd953115f33b1d5a4a3"}
{"id": "mcs500_programming_manual_3381", "text": "(page 162) command\ncan only be applied after the robot has been activated. Note that high accelerations or large", "source": "mcs500_programming_manual", "chunk_index": 3381, "length": 112, "hash": "b727d380836b53208ced440018944d56"}
{"id": "mcs500_programming_manual_3382", "text": "movements may also produce high torque peaks. Therefore, you should rely on this command\nonly in the vicinity of obstacles, for example, while applying an adhesive. Remember that", "source": "mcs500_programming_manual", "chunk_index": 3382, "length": 178, "hash": "107a3e2760e6f1f3e421bd0c8ee14d51"}
{"id": "mcs500_programming_manual_3383", "text": "(page 162) is a motion command and will therefore be inserted in the motion\nqueue and not necessarily executed immediately.", "source": "mcs500_programming_manual", "chunk_index": 3383, "length": 123, "hash": "91f560efd6e9efda1a44fabdc2022190"}
{"id": "mcs500_programming_manual_3384", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3384, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3385", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3385, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3386", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3386, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3387", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3387, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3388", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3388, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3389", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3389, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3390", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3390, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3391", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3391, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3392", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3392, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3393", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3393, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3394", "text": "In cyclic protocols,\nMotionCommandID 27. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3394, "length": 72, "hash": "4459a649c19aaf00970cbb924db6f056"}
{"id": "mcs500_programming_manual_3395", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3395, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3396", "text": "27. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3396, "length": 35, "hash": "412c3128ed19287dd6c35576084e5175"}
{"id": "mcs500_programming_manual_3397", "text": "the SetTorqueLimits (page 162) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3397, "length": 56, "hash": "d1d742bc9a117515e848b1b17a7a0975"}
{"id": "mcs500_programming_manual_3398", "text": "(page 162) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3398, "length": 36, "hash": "f2a27abbcc8c06688d9822e20b874b61"}
{"id": "mcs500_programming_manual_3399", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3399, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3400", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3400, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3401", "text": "This command sets the robot behavior when a joint torque exceeds the threshold set by the\nSetTorqueLimits (page 162) command. It also sends a torque limit status when the status\nchanges (exceeded or not) for events severity greater than 0. For severity 4, a torque limit\nerror is sent when torque exceeds the limit.", "source": "mcs500_programming_manual", "chunk_index": 3401, "length": 315, "hash": "e9a985cff74bac2e49a8b26fefc7161b"}
{"id": "mcs500_programming_manual_3402", "text": "This command sets the robot behavior when a joint torque exceeds the threshold set by the", "source": "mcs500_programming_manual", "chunk_index": 3402, "length": 89, "hash": "0a892e8d0d43b88b93c097377a9d838c"}
{"id": "mcs500_programming_manual_3403", "text": "(page 162) command. It also sends a torque limit status when the status\nchanges (exceeded or not) for events severity greater than 0. For severity 4, a torque limit\nerror is sent when torque exceeds the limit.", "source": "mcs500_programming_manual", "chunk_index": 3403, "length": 209, "hash": "301ad3c9da5c953d7b7a56bee05cf97a"}
{"id": "mcs500_programming_manual_3404", "text": "SetTorqueLimitsCfg(s,m)", "source": "mcs500_programming_manual", "chunk_index": 3404, "length": 23, "hash": "b48c7c238538a40271e5dbb6d901c746"}
{"id": "mcs500_programming_manual_3405", "text": "SetTorqueLimitsCfg(s,m)", "source": "mcs500_programming_manual", "chunk_index": 3405, "length": 23, "hash": "b48c7c238538a40271e5dbb6d901c746"}
{"id": "mcs500_programming_manual_3406", "text": "\u2022 l: integer for the torque limit event severity", "source": "mcs500_programming_manual", "chunk_index": 3406, "length": 48, "hash": "dd0cb804cab174df145866fa56060b1e"}
{"id": "mcs500_programming_manual_3407", "text": "\u2022 l: integer for the torque limit event severity", "source": "mcs500_programming_manual", "chunk_index": 3407, "length": 48, "hash": "dd0cb804cab174df145866fa56060b1e"}
{"id": "mcs500_programming_manual_3408", "text": "\u2013 1, torque status event (message [3028]);", "source": "mcs500_programming_manual", "chunk_index": 3408, "length": 42, "hash": "efddb17ef62fb977e734a59f4deb115a"}
{"id": "mcs500_programming_manual_3409", "text": "1, torque status event (message [3028]);", "source": "mcs500_programming_manual", "chunk_index": 3409, "length": 40, "hash": "14a2959aa4ccc20999b83b5de86eb202"}
{"id": "mcs500_programming_manual_3410", "text": "\u2013 2, pause motion and torque status event (message [3028]);", "source": "mcs500_programming_manual", "chunk_index": 3410, "length": 59, "hash": "501975537fa2c609229858eb4ed39a4b"}
{"id": "mcs500_programming_manual_3411", "text": "2, pause motion and torque status event (message [3028]);", "source": "mcs500_programming_manual", "chunk_index": 3411, "length": 57, "hash": "4e68a81d4459cbd4ae6a9b2c8bc4b580"}
{"id": "mcs500_programming_manual_3412", "text": "\u2013 4, torque status event (message [3028]) and torque limit error (message [3029]).", "source": "mcs500_programming_manual", "chunk_index": 3412, "length": 82, "hash": "cbdaed4c5ea5d02dd6e9697ea9dd6ece"}
{"id": "mcs500_programming_manual_3413", "text": "4, torque status event (message [3028]) and torque limit error (message [3029]).", "source": "mcs500_programming_manual", "chunk_index": 3413, "length": 80, "hash": "937dc263a48f33ea5942b6281881168a"}
{"id": "mcs500_programming_manual_3414", "text": "\u2022 m: integer defining the detection mode", "source": "mcs500_programming_manual", "chunk_index": 3414, "length": 40, "hash": "1ec21564c3a7ed473eb6d77f5bf8b8f5"}
{"id": "mcs500_programming_manual_3415", "text": "\u2022 m: integer defining the detection mode", "source": "mcs500_programming_manual", "chunk_index": 3415, "length": 40, "hash": "1ec21564c3a7ed473eb6d77f5bf8b8f5"}
{"id": "mcs500_programming_manual_3416", "text": "\u2013 0 triggers a torque limit if the absolute value of any actual motor torque exceeds the", "source": "mcs500_programming_manual", "chunk_index": 3416, "length": 88, "hash": "087fc53b65e26022d288bdf08e6d0ee1"}
{"id": "mcs500_programming_manual_3417", "text": "0 triggers a torque limit if the absolute value of any actual motor torque exceeds the", "source": "mcs500_programming_manual", "chunk_index": 3417, "length": 86, "hash": "e8fba96495ab48bb9490dd76667884b2"}
{"id": "mcs500_programming_manual_3418", "text": "respective torque limit set with SetTorqueLimits (page 162),", "source": "mcs500_programming_manual", "chunk_index": 3418, "length": 60, "hash": "d476596632baa6a69dc981077887b56f"}
{"id": "mcs500_programming_manual_3419", "text": "respective torque limit set with", "source": "mcs500_programming_manual", "chunk_index": 3419, "length": 32, "hash": "ff6dd12cde9955131a844ca332b4f738"}
{"id": "mcs500_programming_manual_3420", "text": "\u2013 1 is same as 0, but ignores joint acceleration/deceleration periods,", "source": "mcs500_programming_manual", "chunk_index": 3420, "length": 70, "hash": "60b4778b933ab3627f5757bd9fc0f922"}
{"id": "mcs500_programming_manual_3421", "text": "1 is same as 0, but ignores joint acceleration/deceleration periods,", "source": "mcs500_programming_manual", "chunk_index": 3421, "length": 68, "hash": "afc7d83a61a3dc31410e443159ee9eb4"}
{"id": "mcs500_programming_manual_3422", "text": "\u2013 2 triggers if any actual motor torque deviates from the corresponding calculated\ntorque by more than the respective torque limit set with SetTorqueLimits (page 162).", "source": "mcs500_programming_manual", "chunk_index": 3422, "length": 167, "hash": "6d63daf5c0c155dfee172563baf70438"}
{"id": "mcs500_programming_manual_3423", "text": "2 triggers if any actual motor torque deviates from the corresponding calculated\ntorque by more than the respective torque limit set with", "source": "mcs500_programming_manual", "chunk_index": 3423, "length": 137, "hash": "157110cef837e460ee943be15820e2f6"}
{"id": "mcs500_programming_manual_3424", "text": "With the option m = 0, you must use either very low accelerations (SetJointAcc (page 150))\nor very high torque limits (SetTorqueLimits (page 162)).", "source": "mcs500_programming_manual", "chunk_index": 3424, "length": 147, "hash": "dc1caa0ea47641f3776cdf3db42a2467"}
{"id": "mcs500_programming_manual_3425", "text": "With the option m = 0, you must use either very low accelerations (", "source": "mcs500_programming_manual", "chunk_index": 3425, "length": 67, "hash": "76494fcd5db454d2e7986ec6e5738523"}
{"id": "mcs500_programming_manual_3426", "text": "(page 150))\nor very high torque limits (", "source": "mcs500_programming_manual", "chunk_index": 3426, "length": 40, "hash": "d5098d7c99485168cdd832340818168a"}
{"id": "mcs500_programming_manual_3427", "text": "The option m = 1 is mainly useful for joint-space movements, as revolute joints in Cartesian-\nspace movements are generally always accelerating or decelerating.", "source": "mcs500_programming_manual", "chunk_index": 3427, "length": 160, "hash": "cc82d7d4d143bbefe395406d67ef06e4"}
{"id": "mcs500_programming_manual_3428", "text": "The option m = 1 is mainly useful for joint-space movements, as revolute joints in Cartesian-\nspace movements are generally always accelerating or decelerating.", "source": "mcs500_programming_manual", "chunk_index": 3428, "length": 160, "hash": "cc82d7d4d143bbefe395406d67ef06e4"}
{"id": "mcs500_programming_manual_3429", "text": "Finally, with the option m = 2, the torque limits set by SetTorqueLimits (page 162) are\ninterpreted as maximum deviations rather than absolute limits. This option allows for much\nfiner control over torque limits and enables much quicker detection of collisions between\nthe robot and its environment. To improve torque estimation accuracy, consider using the\nSetPayload (page 160) command.", "source": "mcs500_programming_manual", "chunk_index": 3429, "length": 388, "hash": "ea33735ed21d84a033c3ae86fee24a55"}
{"id": "mcs500_programming_manual_3430", "text": "Finally, with the option m = 2, the torque limits set by", "source": "mcs500_programming_manual", "chunk_index": 3430, "length": 56, "hash": "52622c85a543eb9969357c87a94d5879"}
{"id": "mcs500_programming_manual_3431", "text": "interpreted as maximum deviations rather than absolute limits", "source": "mcs500_programming_manual", "chunk_index": 3431, "length": 61, "hash": "02ff565125f231befb431285c9d0fd8d"}
{"id": "mcs500_programming_manual_3432", "text": ". This option allows for much\nfiner control over torque limits and enables much quicker detection of collisions between\nthe robot and its environment. To improve torque estimation accuracy, consider using the", "source": "mcs500_programming_manual", "chunk_index": 3432, "length": 208, "hash": "b4adc24dae1cb40f8d4dccf96308d84c"}
{"id": "mcs500_programming_manual_3433", "text": "By default, the event severity is set to 0, and the detection mode to 2.", "source": "mcs500_programming_manual", "chunk_index": 3433, "length": 72, "hash": "1ffd2793140b570443129a9588b7ece5"}
{"id": "mcs500_programming_manual_3434", "text": "By default, the event severity is set to 0, and the detection mode to 2.", "source": "mcs500_programming_manual", "chunk_index": 3434, "length": 72, "hash": "1ffd2793140b570443129a9588b7ece5"}
{"id": "mcs500_programming_manual_3435", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3435, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3436", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3436, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3437", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3437, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3438", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3438, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3439", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3439, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3440", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3440, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3441", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3441, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3442", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3442, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3443", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3443, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3444", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3444, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3445", "text": "In cyclic protocols,\nMotionCommandID 28. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3445, "length": 72, "hash": "20778e7c6a20cf92061eefee1fb470da"}
{"id": "mcs500_programming_manual_3446", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3446, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3447", "text": "28. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3447, "length": 35, "hash": "db6b1e9310fb43fac603ab769969987d"}
{"id": "mcs500_programming_manual_3448", "text": "the SetTorqueLimitsCfg (page 164) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3448, "length": 59, "hash": "f6a51665ff582ca118414cebf6723c2e"}
{"id": "mcs500_programming_manual_3449", "text": "(page 164) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3449, "length": 36, "hash": "c606d8c61b1afa400e9fb9ff84c23d69"}
{"id": "mcs500_programming_manual_3450", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3450, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3451", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3451, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3452", "text": "This command defines the pose of the TRF with respect to the FRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3452, "length": 158, "hash": "2dead4d5a6b8c9bc92572e6174bff4ce"}
{"id": "mcs500_programming_manual_3453", "text": "This command defines the pose of the TRF with respect to the FRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3453, "length": 158, "hash": "2dead4d5a6b8c9bc92572e6174bff4ce"}
{"id": "mcs500_programming_manual_3454", "text": "\u2022 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 3454, "length": 83, "hash": "a2aef124da142fbfbc739cfd3d7a3d6a"}
{"id": "mcs500_programming_manual_3455", "text": "\u2022 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 3455, "length": 83, "hash": "a2aef124da142fbfbc739cfd3d7a3d6a"}
{"id": "mcs500_programming_manual_3456", "text": "\u2022 \u03b3: the orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 3456, "length": 48, "hash": "04eefa8005e251762594d26d7402725d"}
{"id": "mcs500_programming_manual_3457", "text": "\u2022 \u03b3: the orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 3457, "length": 48, "hash": "04eefa8005e251762594d26d7402725d"}
{"id": "mcs500_programming_manual_3458", "text": "relative to the FRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 3458, "length": 32, "hash": "3b8d38697e297cbff3a0f529c018fb20"}
{"id": "mcs500_programming_manual_3459", "text": "relative to the FRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 3459, "length": 32, "hash": "3b8d38697e297cbff3a0f529c018fb20"}
{"id": "mcs500_programming_manual_3460", "text": "By default, the TRF coincides with the FRF.", "source": "mcs500_programming_manual", "chunk_index": 3460, "length": 43, "hash": "220179142910bd6555eb7d5dfdfd0ac7"}
{"id": "mcs500_programming_manual_3461", "text": "By default, the TRF coincides with the FRF.", "source": "mcs500_programming_manual", "chunk_index": 3461, "length": 43, "hash": "220179142910bd6555eb7d5dfdfd0ac7"}
{"id": "mcs500_programming_manual_3462", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3462, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3463", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3463, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3464", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3464, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3465", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3465, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3466", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3466, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3467", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3467, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3468", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3468, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3469", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3469, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3470", "text": "In cyclic protocols, the SetTrf (page 166) command is represented by MotionCommandID 13.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3470, "length": 120, "hash": "85817f27879bb4ed4ee66b9c075c54da"}
{"id": "mcs500_programming_manual_3471", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3471, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3472", "text": "(page 166) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3472, "length": 36, "hash": "9e1fd5916f1ab69332471349202ccdff"}
{"id": "mcs500_programming_manual_3473", "text": "13.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3473, "length": 35, "hash": "36ae66ae27efd29b8cd63ed99e293315"}
{"id": "mcs500_programming_manual_3474", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3474, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3475", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3475, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3476", "text": "This command defines the timeout period following a velocity-mode motion command\n(MoveJointsVel (page 129), MoveLinVelTrf (page 136), or MoveLinVelWrf (page 137)). If no\nsubsequent velocity-mode motion command is received within this period, all joint speeds\nwill automatically be set to zero. The SetVelTimeout (page 167) command serves as a safety\nprecaution and should be used accordingly. Note that the velocity-mode timeout is influenced\nby the SetTimeScaling (page 202) command.", "source": "mcs500_programming_manual", "chunk_index": 3476, "length": 484, "hash": "7e414f4a3f0ddebea99a24ac96dd4e95"}
{"id": "mcs500_programming_manual_3477", "text": "This command defines the timeout period following a velocity-mode motion command\n(", "source": "mcs500_programming_manual", "chunk_index": 3477, "length": 82, "hash": "a169b443869a4ac7573eed39db70cef8"}
{"id": "mcs500_programming_manual_3478", "text": "(page 137)). If no\nsubsequent velocity-mode motion command is received within this period, all joint speeds\nwill automatically be set to zero. The", "source": "mcs500_programming_manual", "chunk_index": 3478, "length": 146, "hash": "c9dafbee0ec6b8cfaed64ceb6d3d5090"}
{"id": "mcs500_programming_manual_3479", "text": "(page 167) command serves as a safety\nprecaution and should be used accordingly. Note that the velocity-mode timeout is influenced\nby the", "source": "mcs500_programming_manual", "chunk_index": 3479, "length": 137, "hash": "d703099d4ae119925800c4577b5fed60"}
{"id": "mcs500_programming_manual_3480", "text": "t: desired timeout period, in seconds, ranging from 0.001 to 1.", "source": "mcs500_programming_manual", "chunk_index": 3480, "length": 63, "hash": "db2101e6f8fc9f36dfcb179fcb1e3668"}
{"id": "mcs500_programming_manual_3481", "text": "t: desired timeout period, in seconds, ranging from 0.001 to 1.", "source": "mcs500_programming_manual", "chunk_index": 3481, "length": 63, "hash": "db2101e6f8fc9f36dfcb179fcb1e3668"}
{"id": "mcs500_programming_manual_3482", "text": "By default, the velocity-mode timeout is 0.050 s.", "source": "mcs500_programming_manual", "chunk_index": 3482, "length": 49, "hash": "b19ec2c8ecf85a2ad55b7ce5f7c8ff67"}
{"id": "mcs500_programming_manual_3483", "text": "By default, the velocity-mode timeout is 0.050 s.", "source": "mcs500_programming_manual", "chunk_index": 3483, "length": 49, "hash": "b19ec2c8ecf85a2ad55b7ce5f7c8ff67"}
{"id": "mcs500_programming_manual_3484", "text": "The deceleration period begins after the velocity timeout. The deceleration time will depend\non the current acceleration configured with SetJointAcc (page 150) or SetCartAcc (page 142)\ncommands.", "source": "mcs500_programming_manual", "chunk_index": 3484, "length": 194, "hash": "fb5bacd7db971e48f3f37c04837e1528"}
{"id": "mcs500_programming_manual_3485", "text": "The deceleration period begins after the velocity timeout. The deceleration time will depend\non the current acceleration configured with", "source": "mcs500_programming_manual", "chunk_index": 3485, "length": 136, "hash": "0449dd5a89c12ce16c22bb4217872d9c"}
{"id": "mcs500_programming_manual_3486", "text": "(page 142)\ncommands.", "source": "mcs500_programming_manual", "chunk_index": 3486, "length": 20, "hash": "1a3b0896a1fa35d9fa6ff04170039131"}
{"id": "mcs500_programming_manual_3487", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3487, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3488", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3488, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3489", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3489, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3490", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3490, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3491", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3491, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3492", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3492, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3493", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3493, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3494", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3494, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3495", "text": "In cyclic protocols,\nMotionCommandID 24. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3495, "length": 72, "hash": "83027faa552b24d38253a5ede97607de"}
{"id": "mcs500_programming_manual_3496", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3496, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3497", "text": "24. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3497, "length": 35, "hash": "8ff4d517c3541fd78feaf7aca996784f"}
{"id": "mcs500_programming_manual_3498", "text": "(page 167) command is", "source": "mcs500_programming_manual", "chunk_index": 3498, "length": 21, "hash": "481ddd9e62265ef41486bde9ff12970a"}
{"id": "mcs500_programming_manual_3499", "text": "(page 167) command is", "source": "mcs500_programming_manual", "chunk_index": 3499, "length": 21, "hash": "481ddd9e62265ef41486bde9ff12970a"}
{"id": "mcs500_programming_manual_3500", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3500, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3501", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3501, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3502", "text": "This command defines the pose of the WRF with respect to the BRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3502, "length": 158, "hash": "c1e99cfee50237fb809a267043b7b0fa"}
{"id": "mcs500_programming_manual_3503", "text": "This command defines the pose of the WRF with respect to the BRF. Note that this command\nmakes the robot come to a complete stop, even if blending is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3503, "length": 158, "hash": "c1e99cfee50237fb809a267043b7b0fa"}
{"id": "mcs500_programming_manual_3504", "text": "\u2022 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 3504, "length": 83, "hash": "27817196a174e10f88f42049ccf80156"}
{"id": "mcs500_programming_manual_3505", "text": "\u2022 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 3505, "length": 83, "hash": "27817196a174e10f88f42049ccf80156"}
{"id": "mcs500_programming_manual_3506", "text": "\u2022 \u03b3: the orientation of the WRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 3506, "length": 48, "hash": "234ef9f65238c92171bd32a182de80e5"}
{"id": "mcs500_programming_manual_3507", "text": "\u2022 \u03b3: the orientation of the WRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 3507, "length": 48, "hash": "234ef9f65238c92171bd32a182de80e5"}
{"id": "mcs500_programming_manual_3508", "text": "relative to the BRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 3508, "length": 32, "hash": "f042fc731698cba41bc3b0fac42d2158"}
{"id": "mcs500_programming_manual_3509", "text": "relative to the BRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 3509, "length": 32, "hash": "f042fc731698cba41bc3b0fac42d2158"}
{"id": "mcs500_programming_manual_3510", "text": "By default, the WRF coincides with the BRF.", "source": "mcs500_programming_manual", "chunk_index": 3510, "length": 43, "hash": "4e3fb17ff2a7fe318ccd59a38e8859b3"}
{"id": "mcs500_programming_manual_3511", "text": "By default, the WRF coincides with the BRF.", "source": "mcs500_programming_manual", "chunk_index": 3511, "length": 43, "hash": "4e3fb17ff2a7fe318ccd59a38e8859b3"}
{"id": "mcs500_programming_manual_3512", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3512, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_3513", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3513, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_3514", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3514, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_3515", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3515, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_3516", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3516, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3517", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3517, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3518", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3518, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3519", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 3519, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_3520", "text": "In cyclic protocols, the SetWrf (page 168) command is represented by MotionCommandID 14.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3520, "length": 120, "hash": "1ccf3e0e19e553976521313c33eed4bc"}
{"id": "mcs500_programming_manual_3521", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3521, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3522", "text": "(page 168) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3522, "length": 36, "hash": "a46b62cac07e82ed59742dee5287faf9"}
{"id": "mcs500_programming_manual_3523", "text": "14.\nSee Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3523, "length": 35, "hash": "03cce841f973e3e90989e66e7cf90797"}
{"id": "mcs500_programming_manual_3524", "text": "Robot control commands", "source": "mcs500_programming_manual", "chunk_index": 3524, "length": 22, "hash": "3344da5e701553d4223e49aa62b1299a"}
{"id": "mcs500_programming_manual_3525", "text": "Robot control commands", "source": "mcs500_programming_manual", "chunk_index": 3525, "length": 22, "hash": "3344da5e701553d4223e49aa62b1299a"}
{"id": "mcs500_programming_manual_3526", "text": "Contrary to motion commands, robot control commands are executed immediately, i.e., are\ninstantaneous. The commands described in this section are used to control the status of the\nrobot (e.g., activate the robot) and to configure the robot. These commands return a unique\nresponse, the generic response \u201c[2085][Command successful: \u2018\u2026\u2019.]\u201d or some error message.\nFor brevity, only the unique responses will be listed for each robot control command.", "source": "mcs500_programming_manual", "chunk_index": 3526, "length": 446, "hash": "9b71916cca26605f8f4efe63bf643154"}
{"id": "mcs500_programming_manual_3527", "text": "Contrary to motion commands,", "source": "mcs500_programming_manual", "chunk_index": 3527, "length": 28, "hash": "e3e9613fea50dfcf0c0d70e95e106765"}
{"id": "mcs500_programming_manual_3528", "text": "robot control commands are executed immediately", "source": "mcs500_programming_manual", "chunk_index": 3528, "length": 47, "hash": "d82fe7144d35daebab3cb187228305be"}
{"id": "mcs500_programming_manual_3529", "text": ", i.e., are\ninstantaneous. The commands described in this section are used to control the status of the\nrobot (e.g., activate the robot) and to configure the robot. These commands return a unique\nresponse, the generic response \u201c[2085][Command successful: \u2018\u2026\u2019.]\u201d or some error message.\nFor brevity, only the unique responses will be listed for each robot control command.", "source": "mcs500_programming_manual", "chunk_index": 3529, "length": 370, "hash": "d8fd8298b049703bd4aba9b4131a743b"}
{"id": "mcs500_programming_manual_3530", "text": "The robot control commands are listed below in several groups.", "source": "mcs500_programming_manual", "chunk_index": 3530, "length": 62, "hash": "260c4f21fc4bce9423a05afe09d92686"}
{"id": "mcs500_programming_manual_3531", "text": "The robot control commands are listed below in several groups.", "source": "mcs500_programming_manual", "chunk_index": 3531, "length": 62, "hash": "260c4f21fc4bce9423a05afe09d92686"}
{"id": "mcs500_programming_manual_3532", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 3532, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_3533", "text": "Motion-related commands", "source": "mcs500_programming_manual", "chunk_index": 3533, "length": 23, "hash": "b1e2faac889cc3720ef3d397ddc6c8ff"}
{"id": "mcs500_programming_manual_3534", "text": "\u2022 ClearMotion (page 173)", "source": "mcs500_programming_manual", "chunk_index": 3534, "length": 24, "hash": "9d18d3070aa3ccb0789dd76fc598732f"}
{"id": "mcs500_programming_manual_3535", "text": "\u2022 PauseMotion (page 182)", "source": "mcs500_programming_manual", "chunk_index": 3535, "length": 24, "hash": "004527f93a13bff3ac15f40f0e317ad7"}
{"id": "mcs500_programming_manual_3536", "text": "\u2022 ResumeMotion (page 185)", "source": "mcs500_programming_manual", "chunk_index": 3536, "length": 25, "hash": "a8b7624c94253ece1cf00178b7e4565a"}
{"id": "mcs500_programming_manual_3537", "text": "\u2022 ResetError (page 184)", "source": "mcs500_programming_manual", "chunk_index": 3537, "length": 23, "hash": "bc6792fe734615a345a7df14423cf5ae"}
{"id": "mcs500_programming_manual_3538", "text": "\u2022 SetCalibrationCfg (page 186)", "source": "mcs500_programming_manual", "chunk_index": 3538, "length": 30, "hash": "d80a4cc92de24c5cbaf9a5b44a840cbc"}
{"id": "mcs500_programming_manual_3539", "text": "\u2022 SetPStop2Cfg (page 195)", "source": "mcs500_programming_manual", "chunk_index": 3539, "length": 25, "hash": "c391485871f3bdc2a2ed7553249dbb3a"}
{"id": "mcs500_programming_manual_3540", "text": "\u2022 SetTimeScaling (page 202)", "source": "mcs500_programming_manual", "chunk_index": 3540, "length": 27, "hash": "077fa00312e0ec9d56781993e29e9fb4"}
{"id": "mcs500_programming_manual_3541", "text": "Robot status related commands", "source": "mcs500_programming_manual", "chunk_index": 3541, "length": 29, "hash": "4e520179f081d9a6fdca102208c0e083"}
{"id": "mcs500_programming_manual_3542", "text": "Robot status related commands", "source": "mcs500_programming_manual", "chunk_index": 3542, "length": 29, "hash": "4e520179f081d9a6fdca102208c0e083"}
{"id": "mcs500_programming_manual_3543", "text": "\u2022 ActivateRobot (page 171)", "source": "mcs500_programming_manual", "chunk_index": 3543, "length": 26, "hash": "fc12c959bf4eeed37070a60cd84633eb"}
{"id": "mcs500_programming_manual_3544", "text": "\u2022 DeactivateRobot (page 175)", "source": "mcs500_programming_manual", "chunk_index": 3544, "length": 28, "hash": "5665aec4b51a9c17f4dc02c9178fc00a"}
{"id": "mcs500_programming_manual_3545", "text": "\u2022 RebootRobot (page 183)", "source": "mcs500_programming_manual", "chunk_index": 3545, "length": 24, "hash": "482aaddea324fb13815cd58c629a4d07"}
{"id": "mcs500_programming_manual_3546", "text": "\u2022 SetRecoveryMode (page 198)", "source": "mcs500_programming_manual", "chunk_index": 3546, "length": 28, "hash": "d8c3f736dbdf16d86774c3190f0a3faf"}
{"id": "mcs500_programming_manual_3547", "text": "\u2022 ActivateSim (page 172)", "source": "mcs500_programming_manual", "chunk_index": 3547, "length": 24, "hash": "19953b756a374ec34771d47623970af7"}
{"id": "mcs500_programming_manual_3548", "text": "\u2022 DeactivateSim (page 176)", "source": "mcs500_programming_manual", "chunk_index": 3548, "length": 26, "hash": "7724212043ccd97961b21ac2cbb751c7"}
{"id": "mcs500_programming_manual_3549", "text": "\u2022 SetRealTimeMonitoring (page 196)", "source": "mcs500_programming_manual", "chunk_index": 3549, "length": 34, "hash": "878df26322d933cb646d6a06b7b13aed"}
{"id": "mcs500_programming_manual_3550", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3550, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_3551", "text": "\u2022 SetRobotName (page 199)", "source": "mcs500_programming_manual", "chunk_index": 3551, "length": 25, "hash": "fefd7153cd07797dc0795cabf8752fe7"}
{"id": "mcs500_programming_manual_3552", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3552, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3553", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3553, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3554", "text": "\u2022 SetMonitoringInterval (page 192)", "source": "mcs500_programming_manual", "chunk_index": 3554, "length": 34, "hash": "44bde706b6fd4194b81eb6f375f78bc4"}
{"id": "mcs500_programming_manual_3555", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 3555, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_3556", "text": "\u2022 SyncCmdQueue (page 208)", "source": "mcs500_programming_manual", "chunk_index": 3556, "length": 25, "hash": "5adb575fedc42a768ece5cfdd2ba97c1"}
{"id": "mcs500_programming_manual_3557", "text": "\u2022 LogTrace (page 180)", "source": "mcs500_programming_manual", "chunk_index": 3557, "length": 21, "hash": "54eb93719b4632a09a9847a0014100ce"}
{"id": "mcs500_programming_manual_3558", "text": "\u2022 LogUserCommands (page 181)", "source": "mcs500_programming_manual", "chunk_index": 3558, "length": 28, "hash": "28e67af178c496c1633c8ea3d5f756ec"}
{"id": "mcs500_programming_manual_3559", "text": "\u2022 TcpDump (page 209)", "source": "mcs500_programming_manual", "chunk_index": 3559, "length": 20, "hash": "15369cd8ceabecb19235ac3d73d3e6a2"}
{"id": "mcs500_programming_manual_3560", "text": "\u2022 TcpDumpStop (page 210)", "source": "mcs500_programming_manual", "chunk_index": 3560, "length": 24, "hash": "6e23860da3388e48f0dd12dd74cc52e5"}
{"id": "mcs500_programming_manual_3561", "text": "Program execution commands", "source": "mcs500_programming_manual", "chunk_index": 3561, "length": 26, "hash": "ce9d1fc6c008c4da5142683f6f80103f"}
{"id": "mcs500_programming_manual_3562", "text": "Program execution commands", "source": "mcs500_programming_manual", "chunk_index": 3562, "length": 26, "hash": "ce9d1fc6c008c4da5142683f6f80103f"}
{"id": "mcs500_programming_manual_3563", "text": "\u2022 StartProgram (page 203)", "source": "mcs500_programming_manual", "chunk_index": 3563, "length": 25, "hash": "608de47bd134d18b5c0fd5665ba0ab09"}
{"id": "mcs500_programming_manual_3564", "text": "\u2022 StartSaving (page 204)", "source": "mcs500_programming_manual", "chunk_index": 3564, "length": 24, "hash": "d109bae4ef2b7253a04826379d8bd8f0"}
{"id": "mcs500_programming_manual_3565", "text": "\u2022 StopSaving (page 206)", "source": "mcs500_programming_manual", "chunk_index": 3565, "length": 23, "hash": "4013ca4f10b20d8d417b7817e6810360"}
{"id": "mcs500_programming_manual_3566", "text": "\u2022 SetOfflineProgramLoop (page 194)", "source": "mcs500_programming_manual", "chunk_index": 3566, "length": 34, "hash": "82ee446731f88c8c8b5076032eca6a87"}
{"id": "mcs500_programming_manual_3567", "text": "SetOfflineProgramLoop", "source": "mcs500_programming_manual", "chunk_index": 3567, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "mcs500_programming_manual_3568", "text": "\u2022 ConnectionWatchdog (page 174)", "source": "mcs500_programming_manual", "chunk_index": 3568, "length": 31, "hash": "1823bdea7cf8209ab8e408e124f723f0"}
{"id": "mcs500_programming_manual_3569", "text": "\u2022 EnableEtherNetIp (page 177)", "source": "mcs500_programming_manual", "chunk_index": 3569, "length": 29, "hash": "2f50c4a925def7c8a7259457fa8b88db"}
{"id": "mcs500_programming_manual_3570", "text": "\u2022 EnableProfinet (page 178)", "source": "mcs500_programming_manual", "chunk_index": 3570, "length": 27, "hash": "64d44ce15368df2c5c65d3f64c4e5867"}
{"id": "mcs500_programming_manual_3571", "text": "\u2022 SwitchToEtherCat (page 207)", "source": "mcs500_programming_manual", "chunk_index": 3571, "length": 29, "hash": "bc20780f196d61d97e13fb5f2f22fafc"}
{"id": "mcs500_programming_manual_3572", "text": "\u2022 SetNetworkOptions (page 193)", "source": "mcs500_programming_manual", "chunk_index": 3572, "length": 30, "hash": "3309f8edeea50f8f8050092566ca1463"}
{"id": "mcs500_programming_manual_3573", "text": "\u2022 SetCtrlPortMonitoring (page 187)", "source": "mcs500_programming_manual", "chunk_index": 3573, "length": 34, "hash": "57c83212ce425c9b2fc38ef7b5bdb1da"}
{"id": "mcs500_programming_manual_3574", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3574, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_3575", "text": "Joint limits commands", "source": "mcs500_programming_manual", "chunk_index": 3575, "length": 21, "hash": "59bfa63bd59ea11d9db8bd359a6e3924"}
{"id": "mcs500_programming_manual_3576", "text": "Joint limits commands", "source": "mcs500_programming_manual", "chunk_index": 3576, "length": 21, "hash": "59bfa63bd59ea11d9db8bd359a6e3924"}
{"id": "mcs500_programming_manual_3577", "text": "\u2022 SetJointLimits (page 190)", "source": "mcs500_programming_manual", "chunk_index": 3577, "length": 27, "hash": "70a2ab75be46c9dd21e60ba73c508f5f"}
{"id": "mcs500_programming_manual_3578", "text": "\u2022 SetJointLimitsCfg (page 191)", "source": "mcs500_programming_manual", "chunk_index": 3578, "length": 30, "hash": "3436dd234928df893ecc51f9327cf0f6"}
{"id": "mcs500_programming_manual_3579", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3579, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3580", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3580, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3581", "text": "This command activates all motors and disables the brakes of the joints.", "source": "mcs500_programming_manual", "chunk_index": 3581, "length": 72, "hash": "545ffdf05d8c3947a5c0fa1299a76eed"}
{"id": "mcs500_programming_manual_3582", "text": "This command activates all motors and disables the brakes of the joints.", "source": "mcs500_programming_manual", "chunk_index": 3582, "length": 72, "hash": "545ffdf05d8c3947a5c0fa1299a76eed"}
{"id": "mcs500_programming_manual_3583", "text": "\u2022 e: the argument is optional; if the argument is used and is 1, the command forces a", "source": "mcs500_programming_manual", "chunk_index": 3583, "length": 85, "hash": "9fff8a137ca762598c1c7db20f72456b"}
{"id": "mcs500_programming_manual_3584", "text": "\u2022 e: the argument is optional; if the argument is used and is 1, the command forces a", "source": "mcs500_programming_manual", "chunk_index": 3584, "length": 85, "hash": "9fff8a137ca762598c1c7db20f72456b"}
{"id": "mcs500_programming_manual_3585", "text": "re-initialization of the drives.", "source": "mcs500_programming_manual", "chunk_index": 3585, "length": 32, "hash": "c5629b7866a55d9b2e1493967a0cdfe3"}
{"id": "mcs500_programming_manual_3586", "text": "re-initialization of the drives.", "source": "mcs500_programming_manual", "chunk_index": 3586, "length": 32, "hash": "c5629b7866a55d9b2e1493967a0cdfe3"}
{"id": "mcs500_programming_manual_3587", "text": "\u2022 [2000][Motors activated.]", "source": "mcs500_programming_manual", "chunk_index": 3587, "length": 27, "hash": "eac285c3ec0d9d92d3a2564d1093e172"}
{"id": "mcs500_programming_manual_3588", "text": "\u2022 [2000][Motors activated.]", "source": "mcs500_programming_manual", "chunk_index": 3588, "length": 27, "hash": "eac285c3ec0d9d92d3a2564d1093e172"}
{"id": "mcs500_programming_manual_3589", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3589, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3590", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3590, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3591", "text": "If the robot is already activated, the response is returned and the robot does nothing.", "source": "mcs500_programming_manual", "chunk_index": 3591, "length": 87, "hash": "60270e835b9cbd7b116a1550ee11deae"}
{"id": "mcs500_programming_manual_3592", "text": "If the robot is already activated, the response is returned and the robot does nothing.", "source": "mcs500_programming_manual", "chunk_index": 3592, "length": 87, "hash": "60270e835b9cbd7b116a1550ee11deae"}
{"id": "mcs500_programming_manual_3593", "text": "In cyclic protocols, the ActivateRobot (page 171) command is mapped to the ActivateRobot\nbit in the RobotControl data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3593, "length": 148, "hash": "c1df0dd1a9d7b11ca6e9f72e7a09ed6f"}
{"id": "mcs500_programming_manual_3594", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3594, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3595", "text": "(page 171) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3595, "length": 35, "hash": "02c64ea23d30a7dbe13153f3bb5ed2ef"}
{"id": "mcs500_programming_manual_3596", "text": "data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3596, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "mcs500_programming_manual_3597", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3597, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3598", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3598, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3599", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. This mode allows you to test programs with the robot\u2019s\nhardware (i.e., hardware-in-the-loop simulation), without the risk of damaging the robot or\nits surroundings. Simulation mode can be activated and deactivated with the ActivateSim\n(page 172) and DeactivateSim (page 176) commands.", "source": "mcs500_programming_manual", "chunk_index": 3599, "length": 410, "hash": "71671f3ddd8d057eafc988e752992fec"}
{"id": "mcs500_programming_manual_3600", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. This mode allows you to test programs with the robot\u2019s\nhardware (i.e., hardware-in-the-loop simulation), without the risk of damaging the robot or\nits surroundings. Simulation mode can be activated and deactivated with the", "source": "mcs500_programming_manual", "chunk_index": 3600, "length": 348, "hash": "2d038437ef135b6429a325145a9872a9"}
{"id": "mcs500_programming_manual_3601", "text": "(page 176) commands.", "source": "mcs500_programming_manual", "chunk_index": 3601, "length": 20, "hash": "b4f37a837516e92e47f965d76564b510"}
{"id": "mcs500_programming_manual_3602", "text": "As of firmware 11.1, a new fast simulation mode is available, enabling commands to execute\nas quickly as possible. This significantly speeds up the testing of commands and programs.", "source": "mcs500_programming_manual", "chunk_index": 3602, "length": 181, "hash": "f4691ff8e918f5064f15ac8926bb7251"}
{"id": "mcs500_programming_manual_3603", "text": "As of firmware 11.1, a new fast simulation mode is available, enabling commands to execute\nas quickly as possible. This significantly speeds up the testing of commands and programs.", "source": "mcs500_programming_manual", "chunk_index": 3603, "length": 181, "hash": "f4691ff8e918f5064f15ac8926bb7251"}
{"id": "mcs500_programming_manual_3604", "text": "\u2022 none: enable using the default simulation mode type (see SetSimModeCfg (page 201));", "source": "mcs500_programming_manual", "chunk_index": 3604, "length": 85, "hash": "b1ad7d0ac368f1d6ae7edfac96f4d997"}
{"id": "mcs500_programming_manual_3605", "text": "\u2022 none: enable using the default simulation mode type (see", "source": "mcs500_programming_manual", "chunk_index": 3605, "length": 58, "hash": "3341f21656306637d186343c422f4ea4"}
{"id": "mcs500_programming_manual_3606", "text": "\u2022 m: integer specifying the simulation mode type as", "source": "mcs500_programming_manual", "chunk_index": 3606, "length": 51, "hash": "eac0f8d06e09fcbdb10b5382209f770b"}
{"id": "mcs500_programming_manual_3607", "text": "\u2022 m: integer specifying the simulation mode type as", "source": "mcs500_programming_manual", "chunk_index": 3607, "length": 51, "hash": "eac0f8d06e09fcbdb10b5382209f770b"}
{"id": "mcs500_programming_manual_3608", "text": "\u2013 0, disabled (equivalent to using the command DeactivateSim (page 176)),", "source": "mcs500_programming_manual", "chunk_index": 3608, "length": 73, "hash": "e62ab015cbfe7395ddc0e5c4210190cd"}
{"id": "mcs500_programming_manual_3609", "text": "0, disabled (equivalent to using the command", "source": "mcs500_programming_manual", "chunk_index": 3609, "length": 44, "hash": "d8c13e018c17473df5d2ba2f86514c51"}
{"id": "mcs500_programming_manual_3610", "text": "\u2013 1, normal (real-time) simulation mode,", "source": "mcs500_programming_manual", "chunk_index": 3610, "length": 40, "hash": "e1d3a894fc0ba495e31c36b341edad56"}
{"id": "mcs500_programming_manual_3611", "text": "1, normal (real-time) simulation mode,", "source": "mcs500_programming_manual", "chunk_index": 3611, "length": 38, "hash": "14490b35ce897202e7300d274a426c35"}
{"id": "mcs500_programming_manual_3612", "text": "\u2013 2, fast simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 3612, "length": 26, "hash": "c2427837f3b62dad74bdca08d61e8bb1"}
{"id": "mcs500_programming_manual_3613", "text": "2, fast simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 3613, "length": 24, "hash": "fa018b3d200392d59be78cd3a186865a"}
{"id": "mcs500_programming_manual_3614", "text": "\u2022 [2045][The simulation mode is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3614, "length": 41, "hash": "09235615fa0edc1ec33dc3cc6dbae911"}
{"id": "mcs500_programming_manual_3615", "text": "\u2022 [2045][The simulation mode is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3615, "length": 41, "hash": "09235615fa0edc1ec33dc3cc6dbae911"}
{"id": "mcs500_programming_manual_3616", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3616, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "mcs500_programming_manual_3617", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3617, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "mcs500_programming_manual_3618", "text": "\u2022 [1027][Simulation mode can only be enabled/disabled while the robot is deactivated.]", "source": "mcs500_programming_manual", "chunk_index": 3618, "length": 86, "hash": "04ba091381d15b158da686b4cfdc484f"}
{"id": "mcs500_programming_manual_3619", "text": "\u2022 [1027][Simulation mode can only be enabled/disabled while the robot is deactivated.]", "source": "mcs500_programming_manual", "chunk_index": 3619, "length": 86, "hash": "04ba091381d15b158da686b4cfdc484f"}
{"id": "mcs500_programming_manual_3620", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3620, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3621", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3621, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3622", "text": "In cyclic protocols,\nActivateSim bit in the RobotControl data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3622, "length": 92, "hash": "e4ef0eb8acf12ab16a476614de9f83b0"}
{"id": "mcs500_programming_manual_3623", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3623, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3624", "text": "data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3624, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "mcs500_programming_manual_3625", "text": "the ActivateSim (page 172) command performed by setting the", "source": "mcs500_programming_manual", "chunk_index": 3625, "length": 59, "hash": "ced874460907be2e2941a49601725f83"}
{"id": "mcs500_programming_manual_3626", "text": "(page 172) command performed by setting the", "source": "mcs500_programming_manual", "chunk_index": 3626, "length": 43, "hash": "d3524e8721a8fbece088295b654f9380"}
{"id": "mcs500_programming_manual_3627", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3627, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3628", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3628, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3629", "text": "This command stops the robot movement in the same fashion as the PauseMotion (page 182)\ncommand (i.e., by decelerating). The rest of the trajectory is deleted. The command\nResumeMotion (page 185) must be sent to make the robot ready to execute new motion\ncommands.", "source": "mcs500_programming_manual", "chunk_index": 3629, "length": 264, "hash": "5c9bcdac6fd8e67b9890d3b17f7e4587"}
{"id": "mcs500_programming_manual_3630", "text": "This command stops the robot movement in the same fashion as the", "source": "mcs500_programming_manual", "chunk_index": 3630, "length": 64, "hash": "1e9bd6502a827b795b43442e690564fb"}
{"id": "mcs500_programming_manual_3631", "text": "(page 182)\ncommand (i.e., by decelerating). The rest of the trajectory is deleted. The command", "source": "mcs500_programming_manual", "chunk_index": 3631, "length": 94, "hash": "03a1e53aecd4d08cdb9be0f1f3b72d3f"}
{"id": "mcs500_programming_manual_3632", "text": "(page 185) must be sent to make the robot ready to execute new motion\ncommands.", "source": "mcs500_programming_manual", "chunk_index": 3632, "length": 79, "hash": "17c1df2dbf9b46119ed875d482ada3bc"}
{"id": "mcs500_programming_manual_3633", "text": "\u2022 [2044][The motion was cleared.]", "source": "mcs500_programming_manual", "chunk_index": 3633, "length": 33, "hash": "966db7dde3d129d06947940ca9b15515"}
{"id": "mcs500_programming_manual_3634", "text": "\u2022 [2044][The motion was cleared.]", "source": "mcs500_programming_manual", "chunk_index": 3634, "length": 33, "hash": "966db7dde3d129d06947940ca9b15515"}
{"id": "mcs500_programming_manual_3635", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3635, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_3636", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3636, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_3637", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3637, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_3638", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3638, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_3639", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3639, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3640", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3640, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3641", "text": "In cyclic protocols, the ClearMotion (page 173) command is mapped to the ClearMotion bit\nin the MotionControl data. See Table 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3641, "length": 145, "hash": "5fb8620a2f78a39fea251035737b9209"}
{"id": "mcs500_programming_manual_3642", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3642, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3643", "text": "(page 173) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3643, "length": 35, "hash": "b58c3d344e2c4320e820461d6e182e89"}
{"id": "mcs500_programming_manual_3644", "text": "data. See Table 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3644, "length": 35, "hash": "e01f39e69182f0ed5721e9d485bc476b"}
{"id": "mcs500_programming_manual_3645", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3645, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3646", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3646, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3647", "text": "For safety reasons, your application may start a communication watchdog with a timeout.\nThe application must send another ConnectionWatchdog (page 174) command before the\ndefined timeout otherwise the robot will automatically stop moving and report a safety stop\nwith the message [3086][1]. The goal is to make sure that the robot quickly stops moving\nif communication with the TCP application is interrupted for any reason (including network\nfailure or bug/freeze/dead-lock of the controlling application).", "source": "mcs500_programming_manual", "chunk_index": 3647, "length": 507, "hash": "13c68f0cc816dc7458df4e69d5c3b4bf"}
{"id": "mcs500_programming_manual_3648", "text": "For safety reasons, your application may start a communication watchdog with a timeout.\nThe application must send another", "source": "mcs500_programming_manual", "chunk_index": 3648, "length": 121, "hash": "acef15c50b813413b670f2d8b26aeb89"}
{"id": "mcs500_programming_manual_3649", "text": "(page 174) command before the\ndefined timeout otherwise the robot will automatically stop moving and report a safety stop\nwith the message [3086][1]. The goal is to make sure that the robot quickly stops moving\nif communication with the TCP application is interrupted for any reason (including network\nfailure or bug/freeze/dead-lock of the controlling application).", "source": "mcs500_programming_manual", "chunk_index": 3649, "length": 366, "hash": "5c942668bc87904442debd1346e66a11"}
{"id": "mcs500_programming_manual_3650", "text": "ConnectionWatchdog(t)", "source": "mcs500_programming_manual", "chunk_index": 3650, "length": 21, "hash": "bb85e080ad6612ec43ae6eac32a636d3"}
{"id": "mcs500_programming_manual_3651", "text": "ConnectionWatchdog(t)", "source": "mcs500_programming_manual", "chunk_index": 3651, "length": 21, "hash": "bb85e080ad6612ec43ae6eac32a636d3"}
{"id": "mcs500_programming_manual_3652", "text": "\u2022 t: desired timeout period, in seconds, ranging from 0.001 to (2\u00b3\u00b2 \u2212 2)/1000.", "source": "mcs500_programming_manual", "chunk_index": 3652, "length": 78, "hash": "3f6b7115e991a100cf0c17da5f2b49a6"}
{"id": "mcs500_programming_manual_3653", "text": "\u2022 t: desired timeout period, in seconds, ranging from 0.001 to (2\u00b3\u00b2 \u2212 2)/1000.", "source": "mcs500_programming_manual", "chunk_index": 3653, "length": 78, "hash": "3f6b7115e991a100cf0c17da5f2b49a6"}
{"id": "mcs500_programming_manual_3654", "text": "argument is zero, the connection watchdog is canceled.", "source": "mcs500_programming_manual", "chunk_index": 3654, "length": 54, "hash": "84af33383813b089b58d4a50c6c61672"}
{"id": "mcs500_programming_manual_3655", "text": "argument is zero, the connection watchdog is canceled.", "source": "mcs500_programming_manual", "chunk_index": 3655, "length": 54, "hash": "84af33383813b089b58d4a50c6c61672"}
{"id": "mcs500_programming_manual_3656", "text": "By default, the robot will supervise the TCP connection but only when the robot is moving, and\nas soon as it detects a connection loss, it will stop moving and return the message [3086][1].\nHowever, the delay between the connection loss and the detection may vary from a few\nmilliseconds to several seconds, depending on your network activity.", "source": "mcs500_programming_manual", "chunk_index": 3656, "length": 343, "hash": "7da449eeb03b59f2c7f284db2baa2aa7"}
{"id": "mcs500_programming_manual_3657", "text": "By default, the robot will supervise the TCP connection but only when the robot is moving, and\nas soon as it detects a connection loss, it will stop moving and return the message [3086][1].\nHowever, the delay between the connection loss and the detection may vary from a few\nmilliseconds to several seconds, depending on your network activity.", "source": "mcs500_programming_manual", "chunk_index": 3657, "length": 343, "hash": "7da449eeb03b59f2c7f284db2baa2aa7"}
{"id": "mcs500_programming_manual_3658", "text": "The first response is sent when the connection watchdog is activated for the first\ntime. The second response is sent when the connection watchdog is deactivated with\nConnectionWatchdog(0) (page 174).", "source": "mcs500_programming_manual", "chunk_index": 3658, "length": 199, "hash": "dcf95154fdd1eefd557cc31427e171c4"}
{"id": "mcs500_programming_manual_3659", "text": "The first response is sent when the connection watchdog is activated for the first\ntime. The second response is sent when the connection watchdog is deactivated with", "source": "mcs500_programming_manual", "chunk_index": 3659, "length": 165, "hash": "5af4a87cb62f707c1dd68d3f50898ddb"}
{"id": "mcs500_programming_manual_3660", "text": "ConnectionWatchdog(0)", "source": "mcs500_programming_manual", "chunk_index": 3660, "length": 21, "hash": "40d33e896fe627640be4348b57e3d6a4"}
{"id": "mcs500_programming_manual_3661", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3661, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3662", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3662, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3663", "text": "This command is not available in cyclic protocols. However, each of these protocols has its\nown mechanism for managing communication timeouts. For example, in EtherCAT, the master\ncan detect a communication issue if a slave fails to respond within the expected cycle time,\ntriggering a watchdog timeout or setting an error status in the process image.", "source": "mcs500_programming_manual", "chunk_index": 3663, "length": 351, "hash": "c173ca47453fdea36b9ad9d033e05e66"}
{"id": "mcs500_programming_manual_3664", "text": "This command is not available in cyclic protocols. However, each of these protocols has its\nown mechanism for managing communication timeouts. For example, in EtherCAT, the master", "source": "mcs500_programming_manual", "chunk_index": 3664, "length": 179, "hash": "4d3c5030e69d468fe38db615a08ab2a3"}
{"id": "mcs500_programming_manual_3665", "text": "can detect a communication issue if a slave fails to respond within the expected cycle time,\ntriggering a watchdog timeout or setting an error status in the process image.", "source": "mcs500_programming_manual", "chunk_index": 3665, "length": 171, "hash": "9545ff20bd2fd2c75c60409d5c6bc5a9"}
{"id": "mcs500_programming_manual_3666", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3666, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3667", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3667, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3668", "text": "This command disables all motors and engages the brakes on the robot joints. You must\ndeactivate the robot in order to use certain commands (e.g., SetJointLimits (page 190),\nSetNetworkOptions (page 193)).", "source": "mcs500_programming_manual", "chunk_index": 3668, "length": 204, "hash": "84490aa50b3aa2e96007e7adad721fab"}
{"id": "mcs500_programming_manual_3669", "text": "This command disables all motors and engages the brakes on the robot joints. You must\ndeactivate the robot in order to use certain commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 3669, "length": 146, "hash": "7630dd6fcd79c63d3ab6d3a8fb0f8bf0"}
{"id": "mcs500_programming_manual_3670", "text": "\u2022 [2004][Motors deactivated.]", "source": "mcs500_programming_manual", "chunk_index": 3670, "length": 29, "hash": "038e4f0e34ecb9d6cd1c4b1c2d943b8a"}
{"id": "mcs500_programming_manual_3671", "text": "\u2022 [2004][Motors deactivated.]", "source": "mcs500_programming_manual", "chunk_index": 3671, "length": 29, "hash": "038e4f0e34ecb9d6cd1c4b1c2d943b8a"}
{"id": "mcs500_programming_manual_3672", "text": "Your robot does not need homing and even if it is deactivated, the optional vacuum and I/O\nmodule can still function with the appropriate *_Immediate command.", "source": "mcs500_programming_manual", "chunk_index": 3672, "length": 158, "hash": "b2110b139268e763af9dc3ea1d5ca7a8"}
{"id": "mcs500_programming_manual_3673", "text": "Your robot does not need homing and even if it is deactivated, the optional vacuum and I/O\nmodule can still function with the appropriate *_Immediate command.", "source": "mcs500_programming_manual", "chunk_index": 3673, "length": 158, "hash": "b2110b139268e763af9dc3ea1d5ca7a8"}
{"id": "mcs500_programming_manual_3674", "text": "By deactivating the robot, you will lose all settings (parameters) that are not persistent,\nsuch as the definitions of the TRF and the WRF, the desired turn of the last joint, etc.", "source": "mcs500_programming_manual", "chunk_index": 3674, "length": 180, "hash": "6cad469c138f29798381b168eb56974c"}
{"id": "mcs500_programming_manual_3675", "text": "By deactivating the robot, you will lose all settings (parameters) that are not persistent,\nsuch as the definitions of the TRF and the WRF, the desired turn of the last joint, etc.", "source": "mcs500_programming_manual", "chunk_index": 3675, "length": 180, "hash": "6cad469c138f29798381b168eb56974c"}
{"id": "mcs500_programming_manual_3676", "text": "This command can only be executed when the robot is activated.", "source": "mcs500_programming_manual", "chunk_index": 3676, "length": 62, "hash": "cef67654cb1a3a39afdfa44e678f81f3"}
{"id": "mcs500_programming_manual_3677", "text": "This command can only be executed when the robot is activated.", "source": "mcs500_programming_manual", "chunk_index": 3677, "length": 62, "hash": "cef67654cb1a3a39afdfa44e678f81f3"}
{"id": "mcs500_programming_manual_3678", "text": "In cyclic protocols,\nDeactivateRobot bit in the RobotControl data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3678, "length": 96, "hash": "4decece50e1ca42b863373f57f6dcbd4"}
{"id": "mcs500_programming_manual_3679", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3679, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3680", "text": "data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3680, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "mcs500_programming_manual_3681", "text": "(page 175) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3681, "length": 35, "hash": "4c0982a40dbab5c58e287ff69040dee6"}
{"id": "mcs500_programming_manual_3682", "text": "(page 175) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3682, "length": 35, "hash": "4c0982a40dbab5c58e287ff69040dee6"}
{"id": "mcs500_programming_manual_3683", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3683, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3684", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3684, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3685", "text": "This command deactivates simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 3685, "length": 41, "hash": "08ecd8d02c495979fbfc9de62744e9ae"}
{"id": "mcs500_programming_manual_3686", "text": "This command deactivates simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 3686, "length": 41, "hash": "08ecd8d02c495979fbfc9de62744e9ae"}
{"id": "mcs500_programming_manual_3687", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3687, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "mcs500_programming_manual_3688", "text": "\u2022 [2046][The simulation mode is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3688, "length": 42, "hash": "5c6d9daed82c46b49027cf7ff7859f60"}
{"id": "mcs500_programming_manual_3689", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3689, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3690", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3690, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3691", "text": "In cyclic protocols, the DeactivateSim (page 176) command is performed by clearing the\nActivateSim bit in the RobotControl data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3691, "length": 158, "hash": "aa4f9bbd250f8484890a790ad5fdfd6f"}
{"id": "mcs500_programming_manual_3692", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3692, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3693", "text": "(page 176) command is performed by clearing the", "source": "mcs500_programming_manual", "chunk_index": 3693, "length": 47, "hash": "327ae22fbf322341267c39c111709fee"}
{"id": "mcs500_programming_manual_3694", "text": "data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3694, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "mcs500_programming_manual_3695", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3695, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3696", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3696, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3697", "text": "This command enables or disables EtherNet/IP slave stack, allowing the robot to be controlled\nor monitored by a EtherNetIP controller.", "source": "mcs500_programming_manual", "chunk_index": 3697, "length": 134, "hash": "9482ff850a5c4062e99e7167aefabb71"}
{"id": "mcs500_programming_manual_3698", "text": "This command enables or disables EtherNet/IP slave stack, allowing the robot to be controlled\nor monitored by a EtherNetIP controller.", "source": "mcs500_programming_manual", "chunk_index": 3698, "length": 134, "hash": "9482ff850a5c4062e99e7167aefabb71"}
{"id": "mcs500_programming_manual_3699", "text": "\u2022 e: EtherNet/IP mode setting. The possible values are:", "source": "mcs500_programming_manual", "chunk_index": 3699, "length": 55, "hash": "c65030a488364a0158b7d984b8fea6cc"}
{"id": "mcs500_programming_manual_3700", "text": "\u2022 e: EtherNet/IP mode setting. The possible values are:", "source": "mcs500_programming_manual", "chunk_index": 3700, "length": 55, "hash": "c65030a488364a0158b7d984b8fea6cc"}
{"id": "mcs500_programming_manual_3701", "text": "\u2013 0: Disable EtherNet/IP;", "source": "mcs500_programming_manual", "chunk_index": 3701, "length": 25, "hash": "2a4aae91cef57cd02749152e914d24dd"}
{"id": "mcs500_programming_manual_3702", "text": "0: Disable EtherNet/IP;", "source": "mcs500_programming_manual", "chunk_index": 3702, "length": 23, "hash": "75cd0517c2cf0c7c8de70baf644025eb"}
{"id": "mcs500_programming_manual_3703", "text": "\u2013 1: Enable EtherNet/IP;", "source": "mcs500_programming_manual", "chunk_index": 3703, "length": 24, "hash": "33ff06dbea86afd647fa3277ed8e5629"}
{"id": "mcs500_programming_manual_3704", "text": "1: Enable EtherNet/IP;", "source": "mcs500_programming_manual", "chunk_index": 3704, "length": 22, "hash": "944aa61b71c2e3e721e851642b834a5c"}
{"id": "mcs500_programming_manual_3705", "text": "\u2013 2: Enable EtherNet/IP in monitoring mode only.", "source": "mcs500_programming_manual", "chunk_index": 3705, "length": 48, "hash": "27f359b57c46bd7c9439b3c165650986"}
{"id": "mcs500_programming_manual_3706", "text": "2: Enable EtherNet/IP in monitoring mode only.", "source": "mcs500_programming_manual", "chunk_index": 3706, "length": 46, "hash": "7cd79ab4836e1d14c58990dff8d349d4"}
{"id": "mcs500_programming_manual_3707", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 0 (EtherNet/IP is disabled).", "source": "mcs500_programming_manual", "chunk_index": 3707, "length": 136, "hash": "9d89ab5aa786e6a78de1badaf0a1cfc7"}
{"id": "mcs500_programming_manual_3708", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 3708, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_3709", "text": "The factory\ndefault is 0 (EtherNet/IP is disabled).", "source": "mcs500_programming_manual", "chunk_index": 3709, "length": 51, "hash": "9a10b08df0ca14f3e637152c05b5b83a"}
{"id": "mcs500_programming_manual_3710", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3710, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3711", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3711, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3712", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3712, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3713", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3713, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3714", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3714, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3715", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3715, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3716", "text": "This command enables or disables the PROFINET slave stack, allowing the robot to be\ncontrolled or monitored by a PROFINET controller. When enabled, it also forwards LLDP\npackets between the robot\u2019s two Ethernet ports.", "source": "mcs500_programming_manual", "chunk_index": 3716, "length": 217, "hash": "65886d6821a68c4d197b6fab8058af77"}
{"id": "mcs500_programming_manual_3717", "text": "This command enables or disables the PROFINET slave stack, allowing the robot to be\ncontrolled or monitored by a PROFINET controller. When enabled, it also forwards LLDP\npackets between the robot\u2019s two Ethernet ports.", "source": "mcs500_programming_manual", "chunk_index": 3717, "length": 217, "hash": "65886d6821a68c4d197b6fab8058af77"}
{"id": "mcs500_programming_manual_3718", "text": "\u2022 e: PROFINET mode setting. The possible values are:", "source": "mcs500_programming_manual", "chunk_index": 3718, "length": 52, "hash": "4708014b401c28542cf0385ab50077d3"}
{"id": "mcs500_programming_manual_3719", "text": "\u2022 e: PROFINET mode setting. The possible values are:", "source": "mcs500_programming_manual", "chunk_index": 3719, "length": 52, "hash": "4708014b401c28542cf0385ab50077d3"}
{"id": "mcs500_programming_manual_3720", "text": "\u2013 0: Disable PROFINET;", "source": "mcs500_programming_manual", "chunk_index": 3720, "length": 22, "hash": "627f745fef08a3bcee3bd54e59a34edc"}
{"id": "mcs500_programming_manual_3721", "text": "0: Disable PROFINET;", "source": "mcs500_programming_manual", "chunk_index": 3721, "length": 20, "hash": "5cbe655b6564a35c4ddda3a7ceabbe43"}
{"id": "mcs500_programming_manual_3722", "text": "\u2013 1: Enable PROFINET;", "source": "mcs500_programming_manual", "chunk_index": 3722, "length": 21, "hash": "56517d502d00b44c53c4eed0106aade2"}
{"id": "mcs500_programming_manual_3723", "text": "\u2013 2: Enable PROFINET in monitoring mode only.", "source": "mcs500_programming_manual", "chunk_index": 3723, "length": 45, "hash": "838a3656c3d775a77fd9d5d796e37e96"}
{"id": "mcs500_programming_manual_3724", "text": "2: Enable PROFINET in monitoring mode only.", "source": "mcs500_programming_manual", "chunk_index": 3724, "length": 43, "hash": "39a08be37f05cd16aa3e97773091b33a"}
{"id": "mcs500_programming_manual_3725", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 0 (PROFINET is disabled).", "source": "mcs500_programming_manual", "chunk_index": 3725, "length": 133, "hash": "194b45daaf5e16a83732bb1ec6a8922f"}
{"id": "mcs500_programming_manual_3726", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 3726, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_3727", "text": "The factory\ndefault is 0 (PROFINET is disabled).", "source": "mcs500_programming_manual", "chunk_index": 3727, "length": 48, "hash": "3353aee37415e8595719fe89d68f219d"}
{"id": "mcs500_programming_manual_3728", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3728, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3729", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3729, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3730", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3730, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3731", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3731, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3732", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3732, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3733", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3733, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3734", "text": "This command has effect only on our Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 3734, "length": 50, "hash": "1532dead0f50b1874959fc36c4365ec0"}
{"id": "mcs500_programming_manual_3735", "text": "This command has effect only on our Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 3735, "length": 50, "hash": "1532dead0f50b1874959fc36c4365ec0"}
{"id": "mcs500_programming_manual_3736", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3736, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3737", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3737, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3738", "text": "This command inserts a comment into the user and robot logs (see Section 9). It is useful for\ndebugging, allowing you to show our support team where exactly a certain event occurs.", "source": "mcs500_programming_manual", "chunk_index": 3738, "length": 180, "hash": "b512e5a99071d2cf0362ec0345c6282b"}
{"id": "mcs500_programming_manual_3739", "text": "This command inserts a comment into the user and robot logs (see Section 9). It is useful for\ndebugging, allowing you to show our support team where exactly a certain event occurs.", "source": "mcs500_programming_manual", "chunk_index": 3739, "length": 180, "hash": "b512e5a99071d2cf0362ec0345c6282b"}
{"id": "mcs500_programming_manual_3740", "text": "\u2022 s: a text string (the comment).", "source": "mcs500_programming_manual", "chunk_index": 3740, "length": 33, "hash": "a47eeda1df041ac1d152cded3189f5e4"}
{"id": "mcs500_programming_manual_3741", "text": "\u2022 s: a text string (the comment).", "source": "mcs500_programming_manual", "chunk_index": 3741, "length": 33, "hash": "a47eeda1df041ac1d152cded3189f5e4"}
{"id": "mcs500_programming_manual_3742", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3742, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3743", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3743, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3744", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3744, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3745", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3745, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3746", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3746, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3747", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3747, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3748", "text": "This command enables/disables the logging of commands received by the robot and the\nresponses sent by the robot, as well as the logging of the beginning of execution of motion\ncommands. This command has effect only on the user and robot logs (see Section 9).", "source": "mcs500_programming_manual", "chunk_index": 3748, "length": 258, "hash": "d7ffd23c700a517c67cfab1f3f80ff6b"}
{"id": "mcs500_programming_manual_3749", "text": "This command enables/disables the logging of commands received by the robot and the\nresponses sent by the robot, as well as the logging of the beginning of execution of motion\ncommands. This command has effect only on the user and robot logs (see Section 9).", "source": "mcs500_programming_manual", "chunk_index": 3749, "length": 258, "hash": "d7ffd23c700a517c67cfab1f3f80ff6b"}
{"id": "mcs500_programming_manual_3750", "text": "LogUserCommands(e1,e2)", "source": "mcs500_programming_manual", "chunk_index": 3750, "length": 22, "hash": "91505e1669fb7867392c76ae177a5646"}
{"id": "mcs500_programming_manual_3751", "text": "\u2022 e1: enable (1) or disable (0) logging of received commands and sent responses;", "source": "mcs500_programming_manual", "chunk_index": 3751, "length": 80, "hash": "50b77eb3c643f4b57954224a22bcaac4"}
{"id": "mcs500_programming_manual_3752", "text": ": enable (1) or disable (0) logging of received commands and sent responses;", "source": "mcs500_programming_manual", "chunk_index": 3752, "length": 76, "hash": "2033d3bd99fdde5c0f36d72be7fb0c0a"}
{"id": "mcs500_programming_manual_3753", "text": "\u2022 e1: enable (1) or disable (0) logging of beginning of execution of motion commands.", "source": "mcs500_programming_manual", "chunk_index": 3753, "length": 85, "hash": "7e48b2560303a579f7f4622fa2ab7e62"}
{"id": "mcs500_programming_manual_3754", "text": ": enable (1) or disable (0) logging of beginning of execution of motion commands.", "source": "mcs500_programming_manual", "chunk_index": 3754, "length": 81, "hash": "6c540447db9df0e7c5cfd981541d7add"}
{"id": "mcs500_programming_manual_3755", "text": "Both logging states are disabled by default.", "source": "mcs500_programming_manual", "chunk_index": 3755, "length": 44, "hash": "7004ea5bd257246c3d88a7429a328562"}
{"id": "mcs500_programming_manual_3756", "text": "Both logging states are disabled by default.", "source": "mcs500_programming_manual", "chunk_index": 3756, "length": 44, "hash": "7004ea5bd257246c3d88a7429a328562"}
{"id": "mcs500_programming_manual_3757", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3757, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3758", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3758, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3759", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3759, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3760", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3760, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3761", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3761, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3762", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3762, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3763", "text": "This command stops the robot\u2019s movement. It is executed immediately upon receipt (within\n5 ms of being sent, depending on your network configuration). The robot decelerates to a\nstop rather than engaging the brakes. For instance, if a MoveLin (page 132) command is\nin progress when the PauseMotion (page 182) command is received, the robot\u2019s TCP will\nstop somewhere along the linear path. To determine the exact stop position, you can use the\nGetRtCartPos (page 259) or GetRtJointPos (page 263) commands.", "source": "mcs500_programming_manual", "chunk_index": 3763, "length": 504, "hash": "36564d628107fb7b8fa495b0a5e558b7"}
{"id": "mcs500_programming_manual_3764", "text": "This command stops the robot\u2019s movement. It is executed immediately upon receipt (within\n5 ms of being sent, depending on your network configuration). The robot decelerates to a\nstop rather than engaging the brakes. For instance, if a", "source": "mcs500_programming_manual", "chunk_index": 3764, "length": 234, "hash": "851a2ad93c7ab9bfa668f298612ea780"}
{"id": "mcs500_programming_manual_3765", "text": "(page 132) command is\nin progress when the", "source": "mcs500_programming_manual", "chunk_index": 3765, "length": 42, "hash": "c9cf430796e6affda4bc79de8ab55e16"}
{"id": "mcs500_programming_manual_3766", "text": "(page 182) command is received, the robot\u2019s TCP will\nstop somewhere along the linear path. To determine the exact stop position, you can use the", "source": "mcs500_programming_manual", "chunk_index": 3766, "length": 144, "hash": "3f5570edb3ecb7e4fa8830d7e8f0c77c"}
{"id": "mcs500_programming_manual_3767", "text": "(page 263) commands.", "source": "mcs500_programming_manual", "chunk_index": 3767, "length": 20, "hash": "06d5fcf3660662d63d286ac4df99ace9"}
{"id": "mcs500_programming_manual_3768", "text": "The PauseMotion (page 182) command pauses the robot\u2019s motion without deleting the\nremaining trajectory, allowing it to be resumed with the ResumeMotion (page 185) command.\nThis feature is particularly useful for custom HMIs that require a pause button or for situations\nwhere an unexpected issue arises (e.g., if the robot is applying adhesive and the reservoir runs\nempty).", "source": "mcs500_programming_manual", "chunk_index": 3768, "length": 374, "hash": "53b5138826598cc3c0b6d104012985fa"}
{"id": "mcs500_programming_manual_3769", "text": "(page 182) command pauses the robot\u2019s motion without deleting the\nremaining trajectory, allowing it to be resumed with the", "source": "mcs500_programming_manual", "chunk_index": 3769, "length": 122, "hash": "e0d32e782500c165a5fd7846bef8243c"}
{"id": "mcs500_programming_manual_3770", "text": "(page 185) command.\nThis feature is particularly useful for custom HMIs that require a pause button or for situations\nwhere an unexpected issue arises (e.g., if the robot is applying adhesive and the reservoir runs\nempty).", "source": "mcs500_programming_manual", "chunk_index": 3770, "length": 222, "hash": "0841c5562fead6cc1a0e0b8d604f87e0"}
{"id": "mcs500_programming_manual_3771", "text": "\u2022 [2042][Motion paused.]", "source": "mcs500_programming_manual", "chunk_index": 3771, "length": 24, "hash": "d1a2cabfd5c5e15a1933253ffd26b6ff"}
{"id": "mcs500_programming_manual_3772", "text": "\u2022 [2042][Motion paused.]", "source": "mcs500_programming_manual", "chunk_index": 3772, "length": 24, "hash": "d1a2cabfd5c5e15a1933253ffd26b6ff"}
{"id": "mcs500_programming_manual_3773", "text": "\u2022 [3004][End of movement.]", "source": "mcs500_programming_manual", "chunk_index": 3773, "length": 26, "hash": "0043d5b6b23d264704d89095a816351d"}
{"id": "mcs500_programming_manual_3774", "text": "\u2022 [3004][End of movement.]", "source": "mcs500_programming_manual", "chunk_index": 3774, "length": 26, "hash": "0043d5b6b23d264704d89095a816351d"}
{"id": "mcs500_programming_manual_3775", "text": "The first response (2042) is always sent, whereas the second (3004) is sent only if the robot\nwas moving when the command was received.", "source": "mcs500_programming_manual", "chunk_index": 3775, "length": 135, "hash": "abc4107e9682b57b8405e5f3b10dcb9c"}
{"id": "mcs500_programming_manual_3776", "text": "The first response (2042) is always sent, whereas the second (3004) is sent only if the robot\nwas moving when the command was received.", "source": "mcs500_programming_manual", "chunk_index": 3776, "length": 135, "hash": "abc4107e9682b57b8405e5f3b10dcb9c"}
{"id": "mcs500_programming_manual_3777", "text": "If a motion error occurs while the robot is paused (e.g., if another moving object collides with\nthe robot), the motion is cleared, and the trajectory can no longer be resumed.", "source": "mcs500_programming_manual", "chunk_index": 3777, "length": 176, "hash": "f04d3170cd96dca627518f9568684a0d"}
{"id": "mcs500_programming_manual_3778", "text": "If a motion error occurs while the robot is paused (e.g., if another moving object collides with\nthe robot), the motion is cleared, and the trajectory can no longer be resumed.", "source": "mcs500_programming_manual", "chunk_index": 3778, "length": 176, "hash": "f04d3170cd96dca627518f9568684a0d"}
{"id": "mcs500_programming_manual_3779", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3779, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_3780", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3780, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_3781", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3781, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_3782", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3782, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_3783", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3783, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3784", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3784, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3785", "text": "In cyclic protocols, the PauseMotion (page 182) command is mapped to the PauseMotion bit\nin the MotionControl data. See Table 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3785, "length": 145, "hash": "e8a6cd67bf961b3e9018597762d0844a"}
{"id": "mcs500_programming_manual_3786", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3786, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3787", "text": "(page 182) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3787, "length": 35, "hash": "462357d6dddd4b32028c0481ddf0a6e6"}
{"id": "mcs500_programming_manual_3788", "text": "data. See Table 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3788, "length": 35, "hash": "e01f39e69182f0ed5721e9d485bc476b"}
{"id": "mcs500_programming_manual_3789", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3789, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3790", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3790, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3791", "text": "This command reboots the robot. While similar, rebooting differs from power cycling.", "source": "mcs500_programming_manual", "chunk_index": 3791, "length": 84, "hash": "d4ad2dd0602b6aa5116f8fec66c597e5"}
{"id": "mcs500_programming_manual_3792", "text": "This command reboots the robot. While similar, rebooting differs from power cycling.", "source": "mcs500_programming_manual", "chunk_index": 3792, "length": 84, "hash": "d4ad2dd0602b6aa5116f8fec66c597e5"}
{"id": "mcs500_programming_manual_3793", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3793, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3794", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3794, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3795", "text": "In cyclic protocols, the RebootRobot (page 183) command is represented by MotionCommandID\n200. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3795, "length": 126, "hash": "8472820fbd79d83a922b173a8ea46e5a"}
{"id": "mcs500_programming_manual_3796", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3796, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3797", "text": "(page 183) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3797, "length": 36, "hash": "ddafddf7a7bf6d1b40b4d9694ba50396"}
{"id": "mcs500_programming_manual_3798", "text": "200. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3798, "length": 36, "hash": "3bc3d77d37cbe601289a0c60a4de9dfa"}
{"id": "mcs500_programming_manual_3799", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3799, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3800", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3800, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3801", "text": "This command resets the robot error status.", "source": "mcs500_programming_manual", "chunk_index": 3801, "length": 43, "hash": "a66e365101cf991b8245bee4e8b1deeb"}
{"id": "mcs500_programming_manual_3802", "text": "This command resets the robot error status.", "source": "mcs500_programming_manual", "chunk_index": 3802, "length": 43, "hash": "a66e365101cf991b8245bee4e8b1deeb"}
{"id": "mcs500_programming_manual_3803", "text": "\u2022 [2005][The error was reset.]", "source": "mcs500_programming_manual", "chunk_index": 3803, "length": 30, "hash": "34c62df49c1e480f7e4622d054d72a8d"}
{"id": "mcs500_programming_manual_3804", "text": "\u2022 [2005][The error was reset.]", "source": "mcs500_programming_manual", "chunk_index": 3804, "length": 30, "hash": "34c62df49c1e480f7e4622d054d72a8d"}
{"id": "mcs500_programming_manual_3805", "text": "\u2022 [2006][There was no error to reset.]", "source": "mcs500_programming_manual", "chunk_index": 3805, "length": 38, "hash": "d5c61823b535a6534b20f1a675366cc3"}
{"id": "mcs500_programming_manual_3806", "text": "\u2022 [2006][There was no error to reset.]", "source": "mcs500_programming_manual", "chunk_index": 3806, "length": 38, "hash": "d5c61823b535a6534b20f1a675366cc3"}
{"id": "mcs500_programming_manual_3807", "text": "The first response (2005) is generated if the robot was in error mode, whereas the second\nresponse (2006) is sent if the robot was not in error mode.", "source": "mcs500_programming_manual", "chunk_index": 3807, "length": 149, "hash": "2f72839c0d0d4231cf5eaad74029cfdb"}
{"id": "mcs500_programming_manual_3808", "text": "The first response (2005) is generated if the robot was in error mode, whereas the second\nresponse (2006) is sent if the robot was not in error mode.", "source": "mcs500_programming_manual", "chunk_index": 3808, "length": 149, "hash": "2f72839c0d0d4231cf5eaad74029cfdb"}
{"id": "mcs500_programming_manual_3809", "text": "This command can only be executed when the robot is ready for motion (page 341).", "source": "mcs500_programming_manual", "chunk_index": 3809, "length": 80, "hash": "a6723edfc90ad00d22f3a85eff07a985"}
{"id": "mcs500_programming_manual_3810", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3810, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_3811", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3811, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_3812", "text": "Note that when an error occurs while the robot is deactivated, it is reported using the\nappropriate status message, but the robot does not enter an error state and does not require\nto ResetError (page 184).", "source": "mcs500_programming_manual", "chunk_index": 3812, "length": 206, "hash": "b6c6c763273ca20633b8af64412d7810"}
{"id": "mcs500_programming_manual_3813", "text": "Note that when an error occurs while the robot is deactivated, it is reported using the\nappropriate status message, but the robot does not enter an error state and does not require\nto", "source": "mcs500_programming_manual", "chunk_index": 3813, "length": 183, "hash": "786e701235cb2a8057cdb31f994f6bc5"}
{"id": "mcs500_programming_manual_3814", "text": "In cyclic protocols, the ResetError (page 184) command is mapped to the ResetError bit in\nthe RobotControl data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3814, "length": 142, "hash": "884e3e143926d2166ee725029a3568fe"}
{"id": "mcs500_programming_manual_3815", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3815, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3816", "text": "(page 184) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3816, "length": 35, "hash": "07546f6ea1956551ad1241c0b532b25b"}
{"id": "mcs500_programming_manual_3817", "text": "data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3817, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "mcs500_programming_manual_3818", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3818, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3819", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3819, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3820", "text": "This command resumes the robot\u2019s movement if it was previously paused under one of the\nfollowing conditions:", "source": "mcs500_programming_manual", "chunk_index": 3820, "length": 108, "hash": "bb8e0bec99cbd7c2dedf52bfd142c2ff"}
{"id": "mcs500_programming_manual_3821", "text": "This command resumes the robot\u2019s movement if it was previously paused under one of the\nfollowing conditions:", "source": "mcs500_programming_manual", "chunk_index": 3821, "length": 108, "hash": "bb8e0bec99cbd7c2dedf52bfd142c2ff"}
{"id": "mcs500_programming_manual_3822", "text": "\u2022 By the PauseMotion (page 182) command.", "source": "mcs500_programming_manual", "chunk_index": 3822, "length": 40, "hash": "32706b05c7e18f7d0da8561882d2099c"}
{"id": "mcs500_programming_manual_3823", "text": "\u2022 Due to a torque overload configured in pause motion mode (see SetTorqueLimitsCfg", "source": "mcs500_programming_manual", "chunk_index": 3823, "length": 82, "hash": "da2d3c8448dc1cd12f86e460cbe006c4"}
{"id": "mcs500_programming_manual_3824", "text": "\u2022 Due to a torque overload configured in pause motion mode (see", "source": "mcs500_programming_manual", "chunk_index": 3824, "length": 63, "hash": "520b46435695fe263aeb3605c14fff95"}
{"id": "mcs500_programming_manual_3825", "text": "\u2022 By the external signal P-Stop 2 , which is no longer present.", "source": "mcs500_programming_manual", "chunk_index": 3825, "length": 63, "hash": "c1bf7c966323286297904ec9b7642c83"}
{"id": "mcs500_programming_manual_3826", "text": "\u2022 By the external signal P-Stop 2 , which is no longer present.", "source": "mcs500_programming_manual", "chunk_index": 3826, "length": 63, "hash": "c1bf7c966323286297904ec9b7642c83"}
{"id": "mcs500_programming_manual_3827", "text": "The robot resumes the remaining trajectory from the position where it came to a stop (after\ndeceleration), unless an error occurred after the PauseMotion (page 182) or the robot was\ndeactivated and then reactivated.", "source": "mcs500_programming_manual", "chunk_index": 3827, "length": 215, "hash": "e1d85914e8c13d8815b78195477e6675"}
{"id": "mcs500_programming_manual_3828", "text": "The robot resumes the remaining trajectory from the position where it came to a stop (after\ndeceleration), unless an error occurred after the", "source": "mcs500_programming_manual", "chunk_index": 3828, "length": 141, "hash": "008ce48cefb901d49f777e194f250f6c"}
{"id": "mcs500_programming_manual_3829", "text": "(page 182) or the robot was\ndeactivated and then reactivated.", "source": "mcs500_programming_manual", "chunk_index": 3829, "length": 61, "hash": "3211b33bed0194fc35f2e7a4a9d32a69"}
{"id": "mcs500_programming_manual_3830", "text": "The ResumeMotion (page 185) command must also be sent after the ClearMotion (page 173)\ncommand. However, the robot will remain stationary until another motion command is\nreceived or retrieved from the motion queue. Additionally, the ResumeMotion (page 185)\ncommand must be sent after the ResetError (page 184) command.", "source": "mcs500_programming_manual", "chunk_index": 3830, "length": 318, "hash": "3da3cda1703b616d29be62f64f36b069"}
{"id": "mcs500_programming_manual_3831", "text": "(page 185) command must also be sent after the", "source": "mcs500_programming_manual", "chunk_index": 3831, "length": 46, "hash": "69a434c9bc0c29c63caa2b4f5fd8611b"}
{"id": "mcs500_programming_manual_3832", "text": "(page 173)\ncommand. However, the robot will remain stationary until another motion command is", "source": "mcs500_programming_manual", "chunk_index": 3832, "length": 93, "hash": "4406d8285caebdb52294abefd6cda40c"}
{"id": "mcs500_programming_manual_3833", "text": "received or retrieved from the motion queue. Additionally, the", "source": "mcs500_programming_manual", "chunk_index": 3833, "length": 62, "hash": "444753418f3874e2cbca43a43b8a8b14"}
{"id": "mcs500_programming_manual_3834", "text": "(page 185)\ncommand must be sent after the", "source": "mcs500_programming_manual", "chunk_index": 3834, "length": 41, "hash": "d3ca2e2addb4f005f36ee3cf8e9b4eba"}
{"id": "mcs500_programming_manual_3835", "text": "\u2022 [2043][Motion resumed.]", "source": "mcs500_programming_manual", "chunk_index": 3835, "length": 25, "hash": "0c1ab3e451a8bf6cd82eeb6754b8eb66"}
{"id": "mcs500_programming_manual_3836", "text": "\u2022 [2043][Motion resumed.]", "source": "mcs500_programming_manual", "chunk_index": 3836, "length": 25, "hash": "0c1ab3e451a8bf6cd82eeb6754b8eb66"}
{"id": "mcs500_programming_manual_3837", "text": "It is not possible to pause the motion along a trajectory, move the end-effector away, and then\nresume the trajectory from where it left off. Any motion commands sent while the robot is\npaused will be added to the end of the motion queue.", "source": "mcs500_programming_manual", "chunk_index": 3837, "length": 238, "hash": "9dbb6dde74d91282340cfec2e79d816a"}
{"id": "mcs500_programming_manual_3838", "text": "It is not possible to pause the motion along a trajectory, move the end-effector away, and then\nresume the trajectory from where it left off. Any motion commands sent while the robot is\npaused will be added to the end of the motion queue.", "source": "mcs500_programming_manual", "chunk_index": 3838, "length": 238, "hash": "9dbb6dde74d91282340cfec2e79d816a"}
{"id": "mcs500_programming_manual_3839", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3839, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_3840", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 3840, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_3841", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 3841, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_3842", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 3842, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_3843", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3843, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3844", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 3844, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_3845", "text": "In cyclic protocols, the ResumeMotion (page 185) command is mapped to the ResumeMotion\nbit in the MotionControl data. See Table 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3845, "length": 147, "hash": "ebf1c372d4c9ca593d0c219189c3571c"}
{"id": "mcs500_programming_manual_3846", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3846, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3847", "text": "(page 185) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 3847, "length": 35, "hash": "2346187be23b1efca0962a84dc6fb338"}
{"id": "mcs500_programming_manual_3848", "text": "data. See Table 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3848, "length": 35, "hash": "e01f39e69182f0ed5721e9d485bc476b"}
{"id": "mcs500_programming_manual_3849", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3849, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3850", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3850, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3851", "text": "If your robot has undergone our optional calibration service, you can use this command to\ndisable the calibration and revert to the robot\u2019s nominal parameters (such as link lengths and\njoint offsets). Calibration can be re-enabled at any time.", "source": "mcs500_programming_manual", "chunk_index": 3851, "length": 243, "hash": "0997144af6d7f4a5731ee0e42e5e8d58"}
{"id": "mcs500_programming_manual_3852", "text": "If your robot has undergone our optional calibration service, you can use this command to\ndisable the calibration and revert to the robot\u2019s nominal parameters (such as link lengths and\njoint offsets). Calibration can be re-enabled at any time.", "source": "mcs500_programming_manual", "chunk_index": 3852, "length": 243, "hash": "0997144af6d7f4a5731ee0e42e5e8d58"}
{"id": "mcs500_programming_manual_3853", "text": "Use the GetRobotCalibrated (page 244) command to check whether your robot has been\ncalibrated.", "source": "mcs500_programming_manual", "chunk_index": 3853, "length": 94, "hash": "c3e8a5cd65d88affaf091cfbe6d5d086"}
{"id": "mcs500_programming_manual_3854", "text": "(page 244) command to check whether your robot has been\ncalibrated.", "source": "mcs500_programming_manual", "chunk_index": 3854, "length": 67, "hash": "f5d9d6c5d8ad36896f22de77150504a8"}
{"id": "mcs500_programming_manual_3855", "text": "SetCalibrationCfg(e)", "source": "mcs500_programming_manual", "chunk_index": 3855, "length": 20, "hash": "2f0572329c8534a8d74e1b8f2e897647"}
{"id": "mcs500_programming_manual_3856", "text": "SetCalibrationCfg(e)", "source": "mcs500_programming_manual", "chunk_index": 3856, "length": 20, "hash": "2f0572329c8534a8d74e1b8f2e897647"}
{"id": "mcs500_programming_manual_3857", "text": "\u2022 e: enable (1) or disable (0) the calibration.", "source": "mcs500_programming_manual", "chunk_index": 3857, "length": 47, "hash": "0a4af2b15f1cba79f1721c4aab9ded15"}
{"id": "mcs500_programming_manual_3858", "text": "\u2022 e: enable (1) or disable (0) the calibration.", "source": "mcs500_programming_manual", "chunk_index": 3858, "length": 47, "hash": "0a4af2b15f1cba79f1721c4aab9ded15"}
{"id": "mcs500_programming_manual_3859", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1 (calibration is enabled), even if the robot has not been calibrated.", "source": "mcs500_programming_manual", "chunk_index": 3859, "length": 178, "hash": "4522f46ca047fe3f832385afd84fb038"}
{"id": "mcs500_programming_manual_3860", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1 (calibration is enabled), even if the robot has not been calibrated.", "source": "mcs500_programming_manual", "chunk_index": 3860, "length": 178, "hash": "4522f46ca047fe3f832385afd84fb038"}
{"id": "mcs500_programming_manual_3861", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3861, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3862", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3862, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3863", "text": "In cyclic protocols,\nMotionCommandID 156. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3863, "length": 73, "hash": "3c841f5df40653488636e61c5de53e29"}
{"id": "mcs500_programming_manual_3864", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3864, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3865", "text": "156. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3865, "length": 36, "hash": "925648195425b5efa902037fda48f6dc"}
{"id": "mcs500_programming_manual_3866", "text": "the SetCalibrationCfg (page 186) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3866, "length": 58, "hash": "0636f396af2a95e168416553beab748f"}
{"id": "mcs500_programming_manual_3867", "text": "(page 186) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3867, "length": 36, "hash": "684347a3638514047f6e50b5b83f01aa"}
{"id": "mcs500_programming_manual_3868", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3868, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3869", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3869, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3870", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3870, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_3871", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3871, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_3872", "text": "Although data is sent synchronously over the control and monitoring ports, socket delays\ncan cause desynchronization at the reception. If perfect synchronization is necessary, you\nmust request a copy of the monitoring port data send to the control port by using the\nSetCtrlPortMonitoring (page 187) command.", "source": "mcs500_programming_manual", "chunk_index": 3872, "length": 307, "hash": "d554c7e512813f3380a833d5cc009d39"}
{"id": "mcs500_programming_manual_3873", "text": "Although data is sent synchronously over the control and monitoring ports, socket delays\ncan cause desynchronization at the reception. If perfect synchronization is necessary, you\nmust request a copy of the monitoring port data send to the control port by using the", "source": "mcs500_programming_manual", "chunk_index": 3873, "length": 265, "hash": "e0a5922ebcc53c8f2ad1d79d89602fe1"}
{"id": "mcs500_programming_manual_3874", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3874, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_3875", "text": "SetCtrlPortMonitoring(e)", "source": "mcs500_programming_manual", "chunk_index": 3875, "length": 24, "hash": "4b73498b17fab6f895035d4024f84ea1"}
{"id": "mcs500_programming_manual_3876", "text": "SetCtrlPortMonitoring(e)", "source": "mcs500_programming_manual", "chunk_index": 3876, "length": 24, "hash": "4b73498b17fab6f895035d4024f84ea1"}
{"id": "mcs500_programming_manual_3877", "text": "\u2022 e: enable (1) or disable (0) monitoring data over the control port.", "source": "mcs500_programming_manual", "chunk_index": 3877, "length": 69, "hash": "4f293af7464b8fce358ec2acba2a5797"}
{"id": "mcs500_programming_manual_3878", "text": "\u2022 e: enable (1) or disable (0) monitoring data over the control port.", "source": "mcs500_programming_manual", "chunk_index": 3878, "length": 69, "hash": "4f293af7464b8fce358ec2acba2a5797"}
{"id": "mcs500_programming_manual_3879", "text": "By default, the monitoring on the control port is disabled.", "source": "mcs500_programming_manual", "chunk_index": 3879, "length": 59, "hash": "7129447b0f08fbebb800e98101c1043b"}
{"id": "mcs500_programming_manual_3880", "text": "By default, the monitoring on the control port is disabled.", "source": "mcs500_programming_manual", "chunk_index": 3880, "length": 59, "hash": "7129447b0f08fbebb800e98101c1043b"}
{"id": "mcs500_programming_manual_3881", "text": "\u2022 [2096][Monitoring on control port enabled]", "source": "mcs500_programming_manual", "chunk_index": 3881, "length": 44, "hash": "1ff54576bd7e9f780c806a632104a5f0"}
{"id": "mcs500_programming_manual_3882", "text": "\u2022 [2096][Monitoring on control port enabled]", "source": "mcs500_programming_manual", "chunk_index": 3882, "length": 44, "hash": "1ff54576bd7e9f780c806a632104a5f0"}
{"id": "mcs500_programming_manual_3883", "text": "\u2022 [2096][Monitoring on control port disabled]", "source": "mcs500_programming_manual", "chunk_index": 3883, "length": 45, "hash": "86137149509a9fa140a8eac55ee0d058"}
{"id": "mcs500_programming_manual_3884", "text": "\u2022 [2096][Monitoring on control port disabled]", "source": "mcs500_programming_manual", "chunk_index": 3884, "length": 45, "hash": "86137149509a9fa140a8eac55ee0d058"}
{"id": "mcs500_programming_manual_3885", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3885, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3886", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3886, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3887", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3887, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3888", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3888, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3889", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3889, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_3890", "text": "SetCtrlPortMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3890, "length": 21, "hash": "b7223b07b1eb42ae20027684b2613e3e"}
{"id": "mcs500_programming_manual_3891", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3891, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3892", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3892, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3893", "text": "When the robot completes a motion command or a block of motion commands, it can send\nthe \u201c[3012] [End of block.]\u201d message. This means that there are no more motion commands\nin the queue and the robot velocity is zero. This message can be enabled/disabled using the\nSetEob (page 188) command.", "source": "mcs500_programming_manual", "chunk_index": 3893, "length": 291, "hash": "f16d9569b9796c3d616aca26fb78e157"}
{"id": "mcs500_programming_manual_3894", "text": "When the robot completes a motion command or a block of motion commands, it can send\nthe \u201c[3012] [End of block.]\u201d message. This means that there are no more motion commands\nin the queue and the robot velocity is zero. This message can be enabled/disabled using the", "source": "mcs500_programming_manual", "chunk_index": 3894, "length": 264, "hash": "2747bdadeee59828fea6233a621513bd"}
{"id": "mcs500_programming_manual_3895", "text": "\u2022 e: enable (1) or disable (0) the end-of-block message.", "source": "mcs500_programming_manual", "chunk_index": 3895, "length": 56, "hash": "ba28dd7015f72bfb29ab4de731952564"}
{"id": "mcs500_programming_manual_3896", "text": "\u2022 e: enable (1) or disable (0) the end-of-block message.", "source": "mcs500_programming_manual", "chunk_index": 3896, "length": 56, "hash": "ba28dd7015f72bfb29ab4de731952564"}
{"id": "mcs500_programming_manual_3897", "text": "By default, the end-of-block message is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3897, "length": 48, "hash": "208050717e9f7a7249bab4e53bab80b8"}
{"id": "mcs500_programming_manual_3898", "text": "By default, the end-of-block message is enabled.", "source": "mcs500_programming_manual", "chunk_index": 3898, "length": 48, "hash": "208050717e9f7a7249bab4e53bab80b8"}
{"id": "mcs500_programming_manual_3899", "text": "\u2022 [2054][End of block is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3899, "length": 34, "hash": "6b5e7ccb4727a117f6ca657847516b67"}
{"id": "mcs500_programming_manual_3900", "text": "\u2022 [2054][End of block is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3900, "length": 34, "hash": "6b5e7ccb4727a117f6ca657847516b67"}
{"id": "mcs500_programming_manual_3901", "text": "\u2022 [2055][End of block is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3901, "length": 35, "hash": "56e73f8cec06a9ebef713033aceba019"}
{"id": "mcs500_programming_manual_3902", "text": "\u2022 [2055][End of block is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3902, "length": 35, "hash": "56e73f8cec06a9ebef713033aceba019"}
{"id": "mcs500_programming_manual_3903", "text": "We do not recommend using the \u201cEnd of block\u201d message to detect the completion of a\nprogram\u2019s execution. Instead, use the SetCheckpoint (page 145) command.", "source": "mcs500_programming_manual", "chunk_index": 3903, "length": 154, "hash": "c384a2c59745462e833e6bbb93b76931"}
{"id": "mcs500_programming_manual_3904", "text": "We do not recommend using the \u201cEnd of block\u201d message to detect the completion of a\nprogram\u2019s execution. Instead, use the", "source": "mcs500_programming_manual", "chunk_index": 3904, "length": 120, "hash": "f11f3932ff764b61f8fe56ea87bcb2fa"}
{"id": "mcs500_programming_manual_3905", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3905, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3906", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3906, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3907", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3907, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3908", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3908, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3909", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3909, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3910", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3910, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3911", "text": "The robot can also send the \u201c[3004][End of movement.]\u201d message as soon as the robot\nstops moving. This can happen after the commands MoveJoints (page 126), MoveJointsRel\n(page 128), MovePose (page 138), MoveJump (page 130), MoveLin (page 132), MoveLinRelTrf\n(page 134), MoveLinRelWrf (page 135), PauseMotion (page 182) and ClearMotion (page 173)\ncommands, as well as after the SetCartAcc (page 142) and SetJointAcc (page 150)\nIf blending is enabled (even only partially), then there would be no end-\ncommands.\nof-movement message between two consecutive Cartesian-space commands (MoveLin\n(page 132), MoveLinRelTrf (page 134), MoveLinRelWrf (page 135)) or two consecutive joint-\nspace commands (MoveJoints (page 126), MovePose (page 138), MoveJump (page 130)).", "source": "mcs500_programming_manual", "chunk_index": 3911, "length": 759, "hash": "a5dad6bf5b6de9cd40cfc9d3b9c7cea7"}
{"id": "mcs500_programming_manual_3912", "text": "The robot can also send the \u201c[3004][End of movement.]\u201d message as soon as the robot\nstops moving. This can happen after the commands", "source": "mcs500_programming_manual", "chunk_index": 3912, "length": 132, "hash": "aaf99815b6bf427bbfceaf9070f24089"}
{"id": "mcs500_programming_manual_3913", "text": "(page 173)\ncommands, as well as after the", "source": "mcs500_programming_manual", "chunk_index": 3913, "length": 41, "hash": "fbe5ab9537e33124d55df3641681531b"}
{"id": "mcs500_programming_manual_3914", "text": "(page 150)\nIf blending is enabled (even only partially), then there would be no end-\ncommands.\nof-movement message between two consecutive Cartesian-space commands (", "source": "mcs500_programming_manual", "chunk_index": 3914, "length": 165, "hash": "a708a877fba055a868a23159c0d30d65"}
{"id": "mcs500_programming_manual_3915", "text": "(page 135)) or two consecutive joint-\nspace commands (", "source": "mcs500_programming_manual", "chunk_index": 3915, "length": 54, "hash": "c6fd3ad2ee239a7e43cf50453c1e66b3"}
{"id": "mcs500_programming_manual_3916", "text": "\u2022 e: enable (1) or disable (0) the end-of-movement message.", "source": "mcs500_programming_manual", "chunk_index": 3916, "length": 59, "hash": "11056c52462aa615966eba34d0224bb5"}
{"id": "mcs500_programming_manual_3917", "text": "\u2022 e: enable (1) or disable (0) the end-of-movement message.", "source": "mcs500_programming_manual", "chunk_index": 3917, "length": 59, "hash": "11056c52462aa615966eba34d0224bb5"}
{"id": "mcs500_programming_manual_3918", "text": "By default, the end-of-movement message is disabled.", "source": "mcs500_programming_manual", "chunk_index": 3918, "length": 52, "hash": "d13b930c175eaa06e581a957a5209629"}
{"id": "mcs500_programming_manual_3919", "text": "By default, the end-of-movement message is disabled.", "source": "mcs500_programming_manual", "chunk_index": 3919, "length": 52, "hash": "d13b930c175eaa06e581a957a5209629"}
{"id": "mcs500_programming_manual_3920", "text": "\u2022 [2052][End of movement is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3920, "length": 37, "hash": "fc09f0334efb89228d3fabd784dd878e"}
{"id": "mcs500_programming_manual_3921", "text": "\u2022 [2052][End of movement is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3921, "length": 37, "hash": "fc09f0334efb89228d3fabd784dd878e"}
{"id": "mcs500_programming_manual_3922", "text": "\u2022 [2053][End of movement is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3922, "length": 38, "hash": "4ae16906e3794b08eeeec6df6f9f89f8"}
{"id": "mcs500_programming_manual_3923", "text": "\u2022 [2053][End of movement is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3923, "length": 38, "hash": "4ae16906e3794b08eeeec6df6f9f89f8"}
{"id": "mcs500_programming_manual_3924", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3924, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3925", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3925, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3926", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3926, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3927", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 3927, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_3928", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3928, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3929", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3929, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3930", "text": "This command redefines the lower and upper limits of a robot joint. To apply these user-\ndefined joint limits, execute the command SetJointLimitsCfg(1) (page 191). The new joint\nlimits must remain within the default limits.", "source": "mcs500_programming_manual", "chunk_index": 3930, "length": 223, "hash": "bd90e9af1ec858bba9c50383a9b3902c"}
{"id": "mcs500_programming_manual_3931", "text": "This command redefines the lower and upper limits of a robot joint. To apply these user-\ndefined joint limits, execute the command", "source": "mcs500_programming_manual", "chunk_index": 3931, "length": 130, "hash": "2b0603c84e2646dde925bfd97e2da6ce"}
{"id": "mcs500_programming_manual_3932", "text": "SetJointLimitsCfg(1)", "source": "mcs500_programming_manual", "chunk_index": 3932, "length": 20, "hash": "bfcc5633befd2f0954641f1e4408517a"}
{"id": "mcs500_programming_manual_3933", "text": "(page 191). The new joint\nlimits must remain within the default limits.", "source": "mcs500_programming_manual", "chunk_index": 3933, "length": 71, "hash": "9a4c7a3f9b2e9df333d4caa1383cef29"}
{"id": "mcs500_programming_manual_3934", "text": "SetJointLimits(n,qn,min,qn,max)", "source": "mcs500_programming_manual", "chunk_index": 3934, "length": 31, "hash": "4579314008b8765e9c86eabaee24bb56"}
{"id": "mcs500_programming_manual_3935", "text": "\u2022 n: joint number, an integer;", "source": "mcs500_programming_manual", "chunk_index": 3935, "length": 30, "hash": "fa9eb36597ff664945c1db0fa5aec375"}
{"id": "mcs500_programming_manual_3936", "text": "\u2022 n: joint number, an integer;", "source": "mcs500_programming_manual", "chunk_index": 3936, "length": 30, "hash": "fa9eb36597ff664945c1db0fa5aec375"}
{"id": "mcs500_programming_manual_3937", "text": "\u2022 qn,min: lower joint limit, in degrees (for joints 1, 2, and 4) or in mm (for joint 3);", "source": "mcs500_programming_manual", "chunk_index": 3937, "length": 88, "hash": "393833a55520ee512cd0914b48c7c71b"}
{"id": "mcs500_programming_manual_3938", "text": ": lower joint limit, in degrees (for joints 1, 2, and 4) or in mm (for joint 3);", "source": "mcs500_programming_manual", "chunk_index": 3938, "length": 80, "hash": "a5438c75ee4cb57f12df8ba8458a5077"}
{"id": "mcs500_programming_manual_3939", "text": "\u2022 qn,max: upper joint limit, in degrees (for joints 1, 2, and 4) or in mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 3939, "length": 88, "hash": "9bce78355746dd533ff6758472868f10"}
{"id": "mcs500_programming_manual_3940", "text": ": upper joint limit, in degrees (for joints 1, 2, and 4) or in mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 3940, "length": 80, "hash": "f4df0ab38b7cc5f6cda97cc1ff1eadee"}
{"id": "mcs500_programming_manual_3941", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault joint limits are specified in the technical specifications of the robot\u2019s user manual.\nUse SetJointLimits(n,0,0) (page 190) to reset the joint limits of joint n to its factory default\nvalues or simply disable the user-defined joint limits with the command SetJointLimitsCfg(0)\n(page 191).", "source": "mcs500_programming_manual", "chunk_index": 3941, "length": 393, "hash": "3d9868bcaf2aa7c3a345cbda9001de28"}
{"id": "mcs500_programming_manual_3942", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 3942, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_3943", "text": "The factory\ndefault joint limits are specified in the technical specifications of the robot\u2019s user manual.\nUse", "source": "mcs500_programming_manual", "chunk_index": 3943, "length": 110, "hash": "21e0714d2ea08bc80e3a26a6b94bdd28"}
{"id": "mcs500_programming_manual_3944", "text": "SetJointLimits(n,0,0)", "source": "mcs500_programming_manual", "chunk_index": 3944, "length": 21, "hash": "3bf85d0149c7605d6bfd7e84bde3029b"}
{"id": "mcs500_programming_manual_3945", "text": "(page 190) to reset the joint limits of joint n to its factory default\nvalues or simply disable the user-defined joint limits with the command", "source": "mcs500_programming_manual", "chunk_index": 3945, "length": 142, "hash": "ec445aece2985a11e8367e74ec7ee267"}
{"id": "mcs500_programming_manual_3946", "text": "SetJointLimitsCfg(0)", "source": "mcs500_programming_manual", "chunk_index": 3946, "length": 20, "hash": "f35e24f87afb74dbe7d651e4c5e6fa6d"}
{"id": "mcs500_programming_manual_3947", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3947, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3948", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3948, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3949", "text": "In cyclic protocols,\nMotionCommandID 150. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3949, "length": 73, "hash": "81e63e302588033967d8c789136a5280"}
{"id": "mcs500_programming_manual_3950", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3950, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3951", "text": "150. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3951, "length": 36, "hash": "60cfa3545036c8a7177a51337b5ac098"}
{"id": "mcs500_programming_manual_3952", "text": "(page 190) command is", "source": "mcs500_programming_manual", "chunk_index": 3952, "length": 21, "hash": "94bc8b02f9afcf388d65a251e1c6412c"}
{"id": "mcs500_programming_manual_3953", "text": "(page 190) command is", "source": "mcs500_programming_manual", "chunk_index": 3953, "length": 21, "hash": "94bc8b02f9afcf388d65a251e1c6412c"}
{"id": "mcs500_programming_manual_3954", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3954, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3955", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3955, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3956", "text": "This command enables or disables the user-defined limits set by the SetJointLimits (page 190)\nIf the user-defined limits are disabled, the default joint limits become active.\ncommand.\nHowever, user-defined limits remain in memory, and can be re-enabled, even after a power\ndown.", "source": "mcs500_programming_manual", "chunk_index": 3956, "length": 278, "hash": "d7ea7cc4aada286199e1849d885bc6f1"}
{"id": "mcs500_programming_manual_3957", "text": "This command enables or disables the user-defined limits set by the", "source": "mcs500_programming_manual", "chunk_index": 3957, "length": 67, "hash": "81f0afdfa0003e5b1fe83777d3da3882"}
{"id": "mcs500_programming_manual_3958", "text": "(page 190)\nIf the user-defined limits are disabled, the default joint limits become active.\ncommand.\nHowever, user-defined limits remain in memory, and can be re-enabled, even after a power\ndown.", "source": "mcs500_programming_manual", "chunk_index": 3958, "length": 195, "hash": "31633314317d1b93038fb8a296246993"}
{"id": "mcs500_programming_manual_3959", "text": "SetJointLimitsCfg(e)", "source": "mcs500_programming_manual", "chunk_index": 3959, "length": 20, "hash": "b8ff855b6fc3df8cd3da1386e4400fdd"}
{"id": "mcs500_programming_manual_3960", "text": "SetJointLimitsCfg(e)", "source": "mcs500_programming_manual", "chunk_index": 3960, "length": 20, "hash": "b8ff855b6fc3df8cd3da1386e4400fdd"}
{"id": "mcs500_programming_manual_3961", "text": "\u2022 e: enable (1) or disable (0) the user-defined joint limits.", "source": "mcs500_programming_manual", "chunk_index": 3961, "length": 61, "hash": "c2de052a8d8c267a8ece9bf79555535f"}
{"id": "mcs500_programming_manual_3962", "text": "\u2022 e: enable (1) or disable (0) the user-defined joint limits.", "source": "mcs500_programming_manual", "chunk_index": 3962, "length": 61, "hash": "c2de052a8d8c267a8ece9bf79555535f"}
{"id": "mcs500_programming_manual_3963", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 0.", "source": "mcs500_programming_manual", "chunk_index": 3963, "length": 110, "hash": "1ee63220077374e81a4f2751af500cb2"}
{"id": "mcs500_programming_manual_3964", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 3964, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_3965", "text": "The factory\ndefault is 0.", "source": "mcs500_programming_manual", "chunk_index": 3965, "length": 25, "hash": "d7059f3c88236de27e8f2e31e187e2da"}
{"id": "mcs500_programming_manual_3966", "text": "\u2022 [2093][User-defined joint limits enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3966, "length": 44, "hash": "7fa15b6a1c51a87da0c8b767e4932e0b"}
{"id": "mcs500_programming_manual_3967", "text": "\u2022 [2093][User-defined joint limits enabled.]", "source": "mcs500_programming_manual", "chunk_index": 3967, "length": 44, "hash": "7fa15b6a1c51a87da0c8b767e4932e0b"}
{"id": "mcs500_programming_manual_3968", "text": "\u2022 [2093][User-defined joint limits disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3968, "length": 45, "hash": "b38f36726da4cad4af7e7546f2c4fd17"}
{"id": "mcs500_programming_manual_3969", "text": "\u2022 [2093][User-defined joint limits disabled.]", "source": "mcs500_programming_manual", "chunk_index": 3969, "length": 45, "hash": "b38f36726da4cad4af7e7546f2c4fd17"}
{"id": "mcs500_programming_manual_3970", "text": "If any robot joints are inadvertently moved outside the defined limits, the robot will not\nactivate. To resolve this, enable recovery mode (see Section 3), which allows movement\nof the joints even when they are outside the configured limits.", "source": "mcs500_programming_manual", "chunk_index": 3970, "length": 241, "hash": "91f387dbf64759b0f1332f29055dabe4"}
{"id": "mcs500_programming_manual_3971", "text": "If any robot joints are inadvertently moved outside the defined limits, the robot will not\nactivate. To resolve this, enable recovery mode (see Section 3), which allows movement\nof the joints even when they are outside the configured limits.", "source": "mcs500_programming_manual", "chunk_index": 3971, "length": 241, "hash": "91f387dbf64759b0f1332f29055dabe4"}
{"id": "mcs500_programming_manual_3972", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3972, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3973", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 3973, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_3974", "text": "In cyclic protocols,\nMotionCommandID 151. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3974, "length": 73, "hash": "b15d7c934cf9952537b47673941ebc89"}
{"id": "mcs500_programming_manual_3975", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 3975, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_3976", "text": "151. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 3976, "length": 36, "hash": "fb62b22702f6eaa4f9830d4085697375"}
{"id": "mcs500_programming_manual_3977", "text": "the SetJointLimitsCfg (page 191) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3977, "length": 58, "hash": "2bfb856fb5f93b00d163f68e9fd57f55"}
{"id": "mcs500_programming_manual_3978", "text": "(page 191) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 3978, "length": 36, "hash": "4b24684f35f2bee8dce5f118924350f1"}
{"id": "mcs500_programming_manual_3979", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3979, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3980", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 3980, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_3981", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 3981, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_3982", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 3982, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_3983", "text": "This command is used to set the time interval at which real-time feedback from the robot\nis sent from the robot over TCP port 10001 (see the description for SetRealTimeMonitoring\n(page 196) and Table 3 for more details).", "source": "mcs500_programming_manual", "chunk_index": 3983, "length": 220, "hash": "6bc037ba6c391261285448af75bdce52"}
{"id": "mcs500_programming_manual_3984", "text": "This command is used to set the time interval at which real-time feedback from the robot\nis sent from the robot over TCP port 10001 (see the description for", "source": "mcs500_programming_manual", "chunk_index": 3984, "length": 156, "hash": "0e3667cab0a31f541972d5466a4207a6"}
{"id": "mcs500_programming_manual_3985", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 3985, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_3986", "text": "(page 196) and Table 3 for more details).", "source": "mcs500_programming_manual", "chunk_index": 3986, "length": 41, "hash": "4a754eabf7ba3260a156ab780333d4db"}
{"id": "mcs500_programming_manual_3987", "text": "SetMonitoringInterval(t)", "source": "mcs500_programming_manual", "chunk_index": 3987, "length": 24, "hash": "e55389ed3e6ed0005754a2ae8a7afdae"}
{"id": "mcs500_programming_manual_3988", "text": "SetMonitoringInterval(t)", "source": "mcs500_programming_manual", "chunk_index": 3988, "length": 24, "hash": "e55389ed3e6ed0005754a2ae8a7afdae"}
{"id": "mcs500_programming_manual_3989", "text": "\u2022 t: desired time interval, in seconds, ranging from 0.001 to 1.", "source": "mcs500_programming_manual", "chunk_index": 3989, "length": 64, "hash": "f94fb28623c806357bcbd89fce7c5b12"}
{"id": "mcs500_programming_manual_3990", "text": "\u2022 t: desired time interval, in seconds, ranging from 0.001 to 1.", "source": "mcs500_programming_manual", "chunk_index": 3990, "length": 64, "hash": "f94fb28623c806357bcbd89fce7c5b12"}
{"id": "mcs500_programming_manual_3991", "text": "By default, the monitoring time interval is 0.015 s.", "source": "mcs500_programming_manual", "chunk_index": 3991, "length": 52, "hash": "b8cf0d6020b244f25d4e478917e2ef22"}
{"id": "mcs500_programming_manual_3992", "text": "By default, the monitoring time interval is 0.015 s.", "source": "mcs500_programming_manual", "chunk_index": 3992, "length": 52, "hash": "b8cf0d6020b244f25d4e478917e2ef22"}
{"id": "mcs500_programming_manual_3993", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3993, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3994", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 3994, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_3995", "text": "This command is not available in cyclic protocols.\nconfigured on the PLC (i.e., on the master).", "source": "mcs500_programming_manual", "chunk_index": 3995, "length": 95, "hash": "6d32626c9938db908a8f73efdf9f4377"}
{"id": "mcs500_programming_manual_3996", "text": "This command is not available in cyclic protocols.\nconfigured on the PLC (i.e., on the master).", "source": "mcs500_programming_manual", "chunk_index": 3996, "length": 95, "hash": "6d32626c9938db908a8f73efdf9f4377"}
{"id": "mcs500_programming_manual_3997", "text": "In cyclic protocols, the cycle time is", "source": "mcs500_programming_manual", "chunk_index": 3997, "length": 38, "hash": "83f36ce5abbd7b38658ee8ea0cc8282f"}
{"id": "mcs500_programming_manual_3998", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 3998, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_3999", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 3999, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_4000", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4000, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_4001", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4001, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4002", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4002, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4003", "text": "This command is used to set persistent parameters affecting the network connection. The\nnew parameter values will take effect only after a robot reboot.", "source": "mcs500_programming_manual", "chunk_index": 4003, "length": 152, "hash": "8999c7f04523d5e923714bcdc31bb670"}
{"id": "mcs500_programming_manual_4004", "text": "This command is used to set persistent parameters affecting the network connection.", "source": "mcs500_programming_manual", "chunk_index": 4004, "length": 83, "hash": "1c17893988e71d4e92a336dda619a7c1"}
{"id": "mcs500_programming_manual_4005", "text": "The\nnew parameter values will take effect only after a robot reboot.", "source": "mcs500_programming_manual", "chunk_index": 4005, "length": 68, "hash": "0a1654972e3c91fb6ebc0dc5c08ad9bc"}
{"id": "mcs500_programming_manual_4006", "text": "SetNetworkOptions(n)", "source": "mcs500_programming_manual", "chunk_index": 4006, "length": 20, "hash": "6835e8f3494371aa763a7113e4c41c94"}
{"id": "mcs500_programming_manual_4007", "text": "SetNetworkOptions(n)", "source": "mcs500_programming_manual", "chunk_index": 4007, "length": 20, "hash": "6835e8f3494371aa763a7113e4c41c94"}
{"id": "mcs500_programming_manual_4008", "text": "\u2022 n: number of successive keep-alive TCP packets that can be lost before the TCP", "source": "mcs500_programming_manual", "chunk_index": 4008, "length": 80, "hash": "e7fc0c88e346e1f140007407eaa0ffb3"}
{"id": "mcs500_programming_manual_4009", "text": "\u2022 n: number of successive keep-alive TCP packets that can be lost before the TCP", "source": "mcs500_programming_manual", "chunk_index": 4009, "length": 80, "hash": "e7fc0c88e346e1f140007407eaa0ffb3"}
{"id": "mcs500_programming_manual_4010", "text": "connection is closed, where n is an integer number ranging from 0 to 60.", "source": "mcs500_programming_manual", "chunk_index": 4010, "length": 72, "hash": "109e73361b5e3f5fa9a93adeb12ecf8e"}
{"id": "mcs500_programming_manual_4011", "text": "connection is closed, where n is an integer number ranging from 0 to 60.", "source": "mcs500_programming_manual", "chunk_index": 4011, "length": 72, "hash": "109e73361b5e3f5fa9a93adeb12ecf8e"}
{"id": "mcs500_programming_manual_4012", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 3.", "source": "mcs500_programming_manual", "chunk_index": 4012, "length": 110, "hash": "bee8f2f97c4552fde7f5e719b3095b70"}
{"id": "mcs500_programming_manual_4013", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 4013, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_4014", "text": "The factory\ndefault is 3.", "source": "mcs500_programming_manual", "chunk_index": 4014, "length": 25, "hash": "1871c3997facbdb44480bb67d5cd6d74"}
{"id": "mcs500_programming_manual_4015", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4015, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4016", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4016, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4017", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4017, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4018", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4018, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4019", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4019, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4020", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4020, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4021", "text": "SetOfflineProgramLoop", "source": "mcs500_programming_manual", "chunk_index": 4021, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "mcs500_programming_manual_4022", "text": "SetOfflineProgramLoop", "source": "mcs500_programming_manual", "chunk_index": 4022, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "mcs500_programming_manual_4023", "text": "This command is used only for the Meca500.", "source": "mcs500_programming_manual", "chunk_index": 4023, "length": 42, "hash": "85452bb3ef044d6c737fb7ad1d8980e5"}
{"id": "mcs500_programming_manual_4024", "text": "This command is used only for the Meca500.", "source": "mcs500_programming_manual", "chunk_index": 4024, "length": 42, "hash": "85452bb3ef044d6c737fb7ad1d8980e5"}
{"id": "mcs500_programming_manual_4025", "text": "SetOfflineProgramLoop", "source": "mcs500_programming_manual", "chunk_index": 4025, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "mcs500_programming_manual_4026", "text": "SetOfflineProgramLoop", "source": "mcs500_programming_manual", "chunk_index": 4026, "length": 21, "hash": "573f43bd235dd1aa5b28d16ec07980bd"}
{"id": "mcs500_programming_manual_4027", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4027, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4028", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4028, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4029", "text": "This command is used to set the behavior of the robot when the P-Stop 2 signal is activated\nduring automatic mode.", "source": "mcs500_programming_manual", "chunk_index": 4029, "length": 114, "hash": "a24d70f293ee7a9cf4aa6f91bd2a68cd"}
{"id": "mcs500_programming_manual_4030", "text": "This command is used to set the behavior of the robot when the P-Stop 2 signal is activated\nduring automatic mode.", "source": "mcs500_programming_manual", "chunk_index": 4030, "length": 114, "hash": "a24d70f293ee7a9cf4aa6f91bd2a68cd"}
{"id": "mcs500_programming_manual_4031", "text": "\u2013 2, for PauseMotion. Robot motion is paused but commands in the motion queue", "source": "mcs500_programming_manual", "chunk_index": 4031, "length": 77, "hash": "63e884de0c192842fad056a5c1146bd7"}
{"id": "mcs500_programming_manual_4032", "text": "2, for PauseMotion. Robot motion is paused but commands in the motion queue", "source": "mcs500_programming_manual", "chunk_index": 4032, "length": 75, "hash": "0bc2a73ab027bf1945d3524c4df8194a"}
{"id": "mcs500_programming_manual_4033", "text": "remain queued. New commands can be queued.", "source": "mcs500_programming_manual", "chunk_index": 4033, "length": 42, "hash": "cfa31b25fb02c53c483cb8ac97e7c413"}
{"id": "mcs500_programming_manual_4034", "text": "remain queued. New commands can be queued.", "source": "mcs500_programming_manual", "chunk_index": 4034, "length": 42, "hash": "cfa31b25fb02c53c483cb8ac97e7c413"}
{"id": "mcs500_programming_manual_4035", "text": "\u2013 3, for ClearMotion. Robot motion is paused and all commands in the motion queue\nare cleared. The robot will refuse to add any new commands in the motion queue\nuntil the P-Stop 2 condition is reset using ResumeMotion (page 185).", "source": "mcs500_programming_manual", "chunk_index": 4035, "length": 229, "hash": "a6d06f5a470b3142f7311e562b32c683"}
{"id": "mcs500_programming_manual_4036", "text": "3, for ClearMotion. Robot motion is paused and all commands in the motion queue\nare cleared. The robot will refuse to add any new commands in the motion queue\nuntil the P-Stop 2 condition is reset using", "source": "mcs500_programming_manual", "chunk_index": 4036, "length": 202, "hash": "f553a51a75875aa9981ea7087f1bcaa8"}
{"id": "mcs500_programming_manual_4037", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 3.", "source": "mcs500_programming_manual", "chunk_index": 4037, "length": 110, "hash": "bee8f2f97c4552fde7f5e719b3095b70"}
{"id": "mcs500_programming_manual_4038", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 4038, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_4039", "text": "The factory\ndefault is 3.", "source": "mcs500_programming_manual", "chunk_index": 4039, "length": 25, "hash": "1871c3997facbdb44480bb67d5cd6d74"}
{"id": "mcs500_programming_manual_4040", "text": "\u2022 [2178][PStop2 configuration set successfully]", "source": "mcs500_programming_manual", "chunk_index": 4040, "length": 47, "hash": "c85b660fd6274248b30ca61e06d463db"}
{"id": "mcs500_programming_manual_4041", "text": "\u2022 [2178][PStop2 configuration set successfully]", "source": "mcs500_programming_manual", "chunk_index": 4041, "length": 47, "hash": "c85b660fd6274248b30ca61e06d463db"}
{"id": "mcs500_programming_manual_4042", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4042, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4043", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4043, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4044", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4044, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4045", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4045, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4046", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4046, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4047", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4047, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4048", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4048, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4049", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4049, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4050", "text": "TCP port 10001 (i.e., the monitoring port) transmits the robot\u2019s joint set and TRF pose, as\nwell as some other data (see Section 4), at the rate specified by the SetMonitoringInterval\n(page 192) command.\nThe SetRealTimeMonitoring (page 196) command enables the\ntransmission of various additional real-time data over the monitoring port. Each set of data\nis preceded by a monotonic timestamp in microseconds, with respect to an internal clock.\nEssentially, you get the same responses as with the GetRt* and GetRtTarget* commands, but\non the monitoring port, instead of on the control port, and at every monitoring interval, rather\nthan only when requested.", "source": "mcs500_programming_manual", "chunk_index": 4050, "length": 655, "hash": "7d54c6e18510bdfa75416446fed8b8a7"}
{"id": "mcs500_programming_manual_4051", "text": "TCP port 10001 (i.e., the monitoring port) transmits the robot\u2019s joint set and TRF pose, as\nwell as some other data (see Section 4), at the rate specified by the", "source": "mcs500_programming_manual", "chunk_index": 4051, "length": 161, "hash": "02a536c493f4b30aab98de60dc49e0a3"}
{"id": "mcs500_programming_manual_4052", "text": "SetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4052, "length": 21, "hash": "c12460852b1e60ba01d00a2574009447"}
{"id": "mcs500_programming_manual_4053", "text": "(page 192) command.\nThe", "source": "mcs500_programming_manual", "chunk_index": 4053, "length": 23, "hash": "f5dec3aa23882034ddea1058483895dc"}
{"id": "mcs500_programming_manual_4054", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4054, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4055", "text": "(page 196) command enables the\ntransmission of various additional real-time data over the monitoring port. Each set of data\nis preceded by a monotonic timestamp in microseconds, with respect to an internal clock.\nEssentially, you get the same responses as with the GetRt* and GetRtTarget* commands, but\non the monitoring port, instead of on the control port, and at every monitoring interval, rather\nthan only when requested.", "source": "mcs500_programming_manual", "chunk_index": 4055, "length": 425, "hash": "954f3f0a1e52a2c13adf08ce0053f226"}
{"id": "mcs500_programming_manual_4056", "text": "You can send the SetRealTimeMonitoring (page 196) command even if the robot is not\nactivated.", "source": "mcs500_programming_manual", "chunk_index": 4056, "length": 93, "hash": "c7258cdbed39e3bf03fcba21dd3a3be9"}
{"id": "mcs500_programming_manual_4057", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4057, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4058", "text": "(page 196) command even if the robot is not\nactivated.", "source": "mcs500_programming_manual", "chunk_index": 4058, "length": 54, "hash": "83483be034fe53baa1de99f9cc756116"}
{"id": "mcs500_programming_manual_4059", "text": "SetRealTimeMonitoring(n1,n2,...)", "source": "mcs500_programming_manual", "chunk_index": 4059, "length": 32, "hash": "778bbe540291f89a940faf6c0f17f5da"}
{"id": "mcs500_programming_manual_4060", "text": "SetRealTimeMonitoring(n", "source": "mcs500_programming_manual", "chunk_index": 4060, "length": 23, "hash": "67da15f7d558bee9545640684fcd6d83"}
{"id": "mcs500_programming_manual_4061", "text": "\u2022 n1,n2: a list of number codes or names, as follows", "source": "mcs500_programming_manual", "chunk_index": 4061, "length": 52, "hash": "f3b00481934ec86fb0d247937c993491"}
{"id": "mcs500_programming_manual_4062", "text": ": a list of number codes or names, as follows", "source": "mcs500_programming_manual", "chunk_index": 4062, "length": 45, "hash": "3090058025f0ba31003d026068c09571"}
{"id": "mcs500_programming_manual_4063", "text": "\u2013 2200 or TargetJointPos, for the response of the GetRtTargetJointPos (page 270)", "source": "mcs500_programming_manual", "chunk_index": 4063, "length": 80, "hash": "5b0565f527a3da0ad6acb65ce59c7a4e"}
{"id": "mcs500_programming_manual_4064", "text": "2200 or TargetJointPos, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4064, "length": 47, "hash": "5f74a52f65220323f1855af6a4d4d360"}
{"id": "mcs500_programming_manual_4065", "text": "\u2013 2201 or TargetCartPos, for the response of the GetRtTargetCartPos (page 266)", "source": "mcs500_programming_manual", "chunk_index": 4065, "length": 78, "hash": "16aafbd22cea3b5f57e44846bfef8210"}
{"id": "mcs500_programming_manual_4066", "text": "2201 or TargetCartPos, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4066, "length": 46, "hash": "71a219a7048c407e7138ff21f987b9d7"}
{"id": "mcs500_programming_manual_4067", "text": "\u2013 2202 or TargetJointVel, for the response of the GetRtTargetJointVel (page 272)", "source": "mcs500_programming_manual", "chunk_index": 4067, "length": 80, "hash": "93e98aa2519b127a778fc90769b93209"}
{"id": "mcs500_programming_manual_4068", "text": "2202 or TargetJointVel, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4068, "length": 47, "hash": "3d6f1c1696e77dd0c9731cfdb7102418"}
{"id": "mcs500_programming_manual_4069", "text": "\u2013 2203 or TargetJointTorq, for the response of the GetRtTargetJointTorq (page 271)", "source": "mcs500_programming_manual", "chunk_index": 4069, "length": 82, "hash": "0ec3c937a683797c8dbe1be7791380f0"}
{"id": "mcs500_programming_manual_4070", "text": "2203 or TargetJointTorq, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4070, "length": 48, "hash": "f119a07ded639f558b13365b1a34b878"}
{"id": "mcs500_programming_manual_4071", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 4071, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_4072", "text": "\u2013 2204 or TargetCartVel, for the response of the GetRtTargetCartVel (page 267)", "source": "mcs500_programming_manual", "chunk_index": 4072, "length": 78, "hash": "33dd552df703c935c415f7d0fe8c1988"}
{"id": "mcs500_programming_manual_4073", "text": "2204 or TargetCartVel, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4073, "length": 46, "hash": "370bbeb92d631342334d1746465f8d90"}
{"id": "mcs500_programming_manual_4074", "text": "\u2013 2210 or JointPos, for the response of the GetRtJointPos (page 263) command;", "source": "mcs500_programming_manual", "chunk_index": 4074, "length": 77, "hash": "233b9981425decc87e84b6df30f51041"}
{"id": "mcs500_programming_manual_4075", "text": "2210 or JointPos, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4075, "length": 41, "hash": "d417b2c66afbabb69e139f0e34befad5"}
{"id": "mcs500_programming_manual_4076", "text": "\u2013 2211 or CartPos, for the response of the GetRtCartPos (page 259) command;", "source": "mcs500_programming_manual", "chunk_index": 4076, "length": 75, "hash": "ee9386bf56fbfd79c06fa5513aca63ae"}
{"id": "mcs500_programming_manual_4077", "text": "2211 or CartPos, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4077, "length": 40, "hash": "9ab64cadfb4fef4c4184e4754ff98794"}
{"id": "mcs500_programming_manual_4078", "text": "\u2013 2212 or JointVel, for the response of the GetRtJointVel (page 265) command;", "source": "mcs500_programming_manual", "chunk_index": 4078, "length": 77, "hash": "5072dbbae323a9dfe07f2ad459782004"}
{"id": "mcs500_programming_manual_4079", "text": "2212 or JointVel, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4079, "length": 41, "hash": "c4eafac41e8435db79ae0b1db96ed090"}
{"id": "mcs500_programming_manual_4080", "text": "\u2013 2213 or JointTorq, for the response of the GetRtJointTorq (page 264) command;", "source": "mcs500_programming_manual", "chunk_index": 4080, "length": 79, "hash": "e3aa51255ae392122de99f8f17677832"}
{"id": "mcs500_programming_manual_4081", "text": "2213 or JointTorq, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4081, "length": 42, "hash": "4433d1a728c5f2cce0e494a240d103bb"}
{"id": "mcs500_programming_manual_4082", "text": "\u2013 2214 or CartVel, for the response of the GetRtCartVel (page 260) command;", "source": "mcs500_programming_manual", "chunk_index": 4082, "length": 75, "hash": "1c98a3e492580d3572759d18b22400d7"}
{"id": "mcs500_programming_manual_4083", "text": "2214 or CartVel, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4083, "length": 40, "hash": "b5332848d4ddb04ba74cf721781bbbd3"}
{"id": "mcs500_programming_manual_4084", "text": "\u2013 2218 or Conf, for the response of the GetRtConf (page 261) command (sent only", "source": "mcs500_programming_manual", "chunk_index": 4084, "length": 79, "hash": "3b61273525bbb3411332fcccff2db92d"}
{"id": "mcs500_programming_manual_4085", "text": "2218 or Conf, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4085, "length": 37, "hash": "c6afd00913f3c0c57e254fd31a41b4fd"}
{"id": "mcs500_programming_manual_4086", "text": "(page 261) command (sent only", "source": "mcs500_programming_manual", "chunk_index": 4086, "length": 29, "hash": "6aa18eba5db279ee2550e20c012561a9"}
{"id": "mcs500_programming_manual_4087", "text": "\u2013 2219 or ConfTurn, for the response of the GetRtConfTurn (page 262) command (sent", "source": "mcs500_programming_manual", "chunk_index": 4087, "length": 82, "hash": "7380a43f1b71e1e78f77cced4c22ab44"}
{"id": "mcs500_programming_manual_4088", "text": "2219 or ConfTurn, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4088, "length": 41, "hash": "d965ac5a6d445485bcbf5500dd528139"}
{"id": "mcs500_programming_manual_4089", "text": "(page 262) command (sent", "source": "mcs500_programming_manual", "chunk_index": 4089, "length": 24, "hash": "ba9d93e174d8bd6ebc3dae5d47e8c216"}
{"id": "mcs500_programming_manual_4090", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4090, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4091", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4091, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4092", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4092, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4093", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4093, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4094", "text": "\u2013 2220 or Accel, for the response of the GetRtAccelerometer (page 258) command;", "source": "mcs500_programming_manual", "chunk_index": 4094, "length": 79, "hash": "6f34b066b753398be538be8ae8a1409a"}
{"id": "mcs500_programming_manual_4095", "text": "2220 or Accel, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4095, "length": 38, "hash": "0252586fbfc9893138760a4e959de431"}
{"id": "mcs500_programming_manual_4096", "text": "\u2013 2321 or GripperForce, for the response of the GetRtGripperForce (page 298)", "source": "mcs500_programming_manual", "chunk_index": 4096, "length": 76, "hash": "967093fc4e7f9b44f1e2292b78b97078"}
{"id": "mcs500_programming_manual_4097", "text": "2321 or GripperForce, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4097, "length": 45, "hash": "054a8a766a227b01ad1673524c7580c6"}
{"id": "mcs500_programming_manual_4098", "text": "\u2013 2322 or GripperPos, for the response of the GetRtGripperPos (page 299) command;", "source": "mcs500_programming_manual", "chunk_index": 4098, "length": 81, "hash": "10a5ea417812da217ba3d014a3fb575d"}
{"id": "mcs500_programming_manual_4099", "text": "2322 or GripperPos, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4099, "length": 43, "hash": "a40d0ab4e788c7f924c9f24b2e8b83a5"}
{"id": "mcs500_programming_manual_4100", "text": "\u2013 2343 or VacuumPressure, for the response of the GetRtVacuumPressure (page 304)", "source": "mcs500_programming_manual", "chunk_index": 4100, "length": 80, "hash": "5540debb9ee9bab4297f07fc1e9772fc"}
{"id": "mcs500_programming_manual_4101", "text": "2343 or VacuumPressure, for the response of the", "source": "mcs500_programming_manual", "chunk_index": 4101, "length": 47, "hash": "9da6d620ed2e8437264bf69de022be2f"}
{"id": "mcs500_programming_manual_4102", "text": "\u2013 All, to enable all of the above responses.", "source": "mcs500_programming_manual", "chunk_index": 4102, "length": 44, "hash": "d2087919b5ecdc31816f9473b9d86cc4"}
{"id": "mcs500_programming_manual_4103", "text": "All, to enable all of the above responses.", "source": "mcs500_programming_manual", "chunk_index": 4103, "length": 42, "hash": "34fe1d604ce34cdaffc5190355ecfb9b"}
{"id": "mcs500_programming_manual_4104", "text": "After a power up, none of the above messages are enabled.", "source": "mcs500_programming_manual", "chunk_index": 4104, "length": 57, "hash": "78ed80b1adb1b00f692c87e09fa48f11"}
{"id": "mcs500_programming_manual_4105", "text": "After a power up, none of the above messages are enabled.", "source": "mcs500_programming_manual", "chunk_index": 4105, "length": 57, "hash": "78ed80b1adb1b00f692c87e09fa48f11"}
{"id": "mcs500_programming_manual_4106", "text": "\u2013 n1, n2 \u2026: a list of response codes.", "source": "mcs500_programming_manual", "chunk_index": 4106, "length": 37, "hash": "f712782328d32572f4161dd1a553a9ef"}
{"id": "mcs500_programming_manual_4107", "text": "\u2026: a list of response codes.", "source": "mcs500_programming_manual", "chunk_index": 4107, "length": 28, "hash": "ccfb7bcee1cc6a24e5746816b15e83f5"}
{"id": "mcs500_programming_manual_4108", "text": "command does not have a cumulative\nThe SetRealTimeMonitoring (page 196)\nif you execute the command SetRealTimeMonitoring(All) (page 196) and then\neffect;\nthe command SetRealTimeMonitoring(TargetCartPos)\nthe command\nSetRealTimeMonitoring(2201) (page 196), you will only enable message 2201. Further\ndetails about the monitoring port are presented in Section 4.", "source": "mcs500_programming_manual", "chunk_index": 4108, "length": 359, "hash": "73cfec15f97cc66e9e96d95fdf303885"}
{"id": "mcs500_programming_manual_4109", "text": "command does not have a cumulative\nThe", "source": "mcs500_programming_manual", "chunk_index": 4109, "length": 38, "hash": "e7a42dfe61046a16f845474f532a3cd7"}
{"id": "mcs500_programming_manual_4110", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4110, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4111", "text": "(page 196)\nif you execute the command", "source": "mcs500_programming_manual", "chunk_index": 4111, "length": 37, "hash": "7a17ba9cc4182e34121d3a4140829f27"}
{"id": "mcs500_programming_manual_4112", "text": "SetRealTimeMonitoring(All)", "source": "mcs500_programming_manual", "chunk_index": 4112, "length": 26, "hash": "111a4aa81aa8233045ad666002665a2b"}
{"id": "mcs500_programming_manual_4113", "text": "(page 196) and then\neffect;\nthe command", "source": "mcs500_programming_manual", "chunk_index": 4113, "length": 39, "hash": "e841ba7a7191c97481df8bd2d6996fc7"}
{"id": "mcs500_programming_manual_4114", "text": "SetRealTimeMonitoring(TargetCartPos)", "source": "mcs500_programming_manual", "chunk_index": 4114, "length": 36, "hash": "b7486132b2ba6ffeb2d483b6c9b17e20"}
{"id": "mcs500_programming_manual_4115", "text": "SetRealTimeMonitoring(2201)", "source": "mcs500_programming_manual", "chunk_index": 4115, "length": 27, "hash": "f9b0800e18551dd785a41002e448b4d1"}
{"id": "mcs500_programming_manual_4116", "text": "(page 196), you will only enable message 2201. Further\ndetails about the monitoring port are presented in Section 4.", "source": "mcs500_programming_manual", "chunk_index": 4116, "length": 116, "hash": "00f1881d3b75e1e87a8c9f3e6f224cd9"}
{"id": "mcs500_programming_manual_4117", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4117, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4118", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4118, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4119", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4119, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4120", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4120, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4121", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4121, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4122", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4122, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4123", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4123, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4124", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4124, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4125", "text": "Moving the robot when its joints are outside the user-defined limits, or when there is a torque\noverload, a self-collision, or a work-zone limit, is impossible. For these situations, it is useful\nto enable the recovery mode (Section 3) with the SetRecoveryMode (page 198) command.", "source": "mcs500_programming_manual", "chunk_index": 4125, "length": 280, "hash": "159399185a0639921880c164c75f40bf"}
{"id": "mcs500_programming_manual_4126", "text": "Moving the robot when its joints are outside the user-defined limits, or when there is a torque\noverload, a self-collision, or a work-zone limit, is impossible. For these situations, it is useful\nto enable the recovery mode (Section 3) with the", "source": "mcs500_programming_manual", "chunk_index": 4126, "length": 244, "hash": "59e259c8a73b798de78e5dd13c2f2d36"}
{"id": "mcs500_programming_manual_4127", "text": "When the recovery mode is enabled, and the robot is activated, virtually all motion commands\nare accepted, but joint and Cartesian velocities and accelerations are significantly limited, for\nsafety reasons.", "source": "mcs500_programming_manual", "chunk_index": 4127, "length": 206, "hash": "4d54c51c0e1b5176912dddb2965c7209"}
{"id": "mcs500_programming_manual_4128", "text": "When the recovery mode is enabled, and the robot is activated, virtually all motion commands\nare accepted, but joint and Cartesian velocities and accelerations are significantly limited, for\nsafety reasons.", "source": "mcs500_programming_manual", "chunk_index": 4128, "length": 206, "hash": "4d54c51c0e1b5176912dddb2965c7209"}
{"id": "mcs500_programming_manual_4129", "text": "\u2022 e: enable (1) or disable (0) the recovery mode.", "source": "mcs500_programming_manual", "chunk_index": 4129, "length": 49, "hash": "c40d279ac9ba3c4e3e55deba6db07f3a"}
{"id": "mcs500_programming_manual_4130", "text": "\u2022 e: enable (1) or disable (0) the recovery mode.", "source": "mcs500_programming_manual", "chunk_index": 4130, "length": 49, "hash": "c40d279ac9ba3c4e3e55deba6db07f3a"}
{"id": "mcs500_programming_manual_4131", "text": "By default the recovery mode is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4131, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "mcs500_programming_manual_4132", "text": "By default the recovery mode is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4132, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "mcs500_programming_manual_4133", "text": "\u2022 [2049][Recovery mode enabled]", "source": "mcs500_programming_manual", "chunk_index": 4133, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "mcs500_programming_manual_4134", "text": "\u2022 [2049][Recovery mode enabled]", "source": "mcs500_programming_manual", "chunk_index": 4134, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "mcs500_programming_manual_4135", "text": "\u2022 [2050][Recovery mode disabled]", "source": "mcs500_programming_manual", "chunk_index": 4135, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "mcs500_programming_manual_4136", "text": "\u2022 [2050][Recovery mode disabled]", "source": "mcs500_programming_manual", "chunk_index": 4136, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "mcs500_programming_manual_4137", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4137, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4138", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4138, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4139", "text": "In cyclic protocols,\nEnableRecoveryMode bit in the RobotControl data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4139, "length": 99, "hash": "a65e6e9bbd8e3cf305fe5fdc508a3ec8"}
{"id": "mcs500_programming_manual_4140", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4140, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4141", "text": "data. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4141, "length": 35, "hash": "be6976b491fd302bfc229a727380cc68"}
{"id": "mcs500_programming_manual_4142", "text": "the SetRecoveryMode (page 198) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 4142, "length": 55, "hash": "1f51098b6ae2595df8c8d147243612a3"}
{"id": "mcs500_programming_manual_4143", "text": "(page 198) command is mapped to the", "source": "mcs500_programming_manual", "chunk_index": 4143, "length": 35, "hash": "ac8e62ceabc0332ec7134b43abf4a50f"}
{"id": "mcs500_programming_manual_4144", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4144, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4145", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4145, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4146", "text": "This command allows you to change the robot\u2019s name. The command is useful when multiple\nrobots are connected on the same network. The SetRobotName (page 199) command also\nchanges the hostname of the robot in the case of a DHCP connection. The robot\u2019s name is\ndisplayed in the upper right corner of the MecaPortal, as well as in the browser tab hosting\nthe web interface. You can also retrieve the robot\u2019s name with the command GetRobotName\n(page 245).", "source": "mcs500_programming_manual", "chunk_index": 4146, "length": 451, "hash": "84c9d82984c658ec422d300c0c61c67c"}
{"id": "mcs500_programming_manual_4147", "text": "This command allows you to change the robot\u2019s name. The command is useful when multiple\nrobots are connected on the same network. The", "source": "mcs500_programming_manual", "chunk_index": 4147, "length": 133, "hash": "864a150e3002d0e2b40cbb4c72250acc"}
{"id": "mcs500_programming_manual_4148", "text": "(page 199) command also\nchanges the hostname of the robot in the case of a DHCP connection. The robot\u2019s name is\ndisplayed in the upper right corner of the MecaPortal, as well as in the browser tab hosting\nthe web interface. You can also retrieve the robot\u2019s name with the command", "source": "mcs500_programming_manual", "chunk_index": 4148, "length": 279, "hash": "59301a444637e9887686068a4b7b8411"}
{"id": "mcs500_programming_manual_4149", "text": "\u2022 s: string containing the robot\u2019s name. It should contain a maximum of 63 characters,", "source": "mcs500_programming_manual", "chunk_index": 4149, "length": 86, "hash": "32ddd5890c04d0863ed709715df21b8e"}
{"id": "mcs500_programming_manual_4150", "text": "\u2022 s: string containing the robot\u2019s name. It should contain a maximum of 63 characters,", "source": "mcs500_programming_manual", "chunk_index": 4150, "length": 86, "hash": "32ddd5890c04d0863ed709715df21b8e"}
{"id": "mcs500_programming_manual_4151", "text": "alphanumeric or hyphens, but should not start with a hyphen.", "source": "mcs500_programming_manual", "chunk_index": 4151, "length": 60, "hash": "dc757c9c2c9a0a1ee93f73912f0ea76f"}
{"id": "mcs500_programming_manual_4152", "text": "alphanumeric or hyphens, but should not start with a hyphen.", "source": "mcs500_programming_manual", "chunk_index": 4152, "length": 60, "hash": "dc757c9c2c9a0a1ee93f73912f0ea76f"}
{"id": "mcs500_programming_manual_4153", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is mcs500.", "source": "mcs500_programming_manual", "chunk_index": 4153, "length": 115, "hash": "47c4ce1cf8f370442dace73fee7e0b22"}
{"id": "mcs500_programming_manual_4154", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 4154, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_4155", "text": "The factory\ndefault is mcs500.", "source": "mcs500_programming_manual", "chunk_index": 4155, "length": 30, "hash": "92e0672352786f9aeafc940eb1226e2a"}
{"id": "mcs500_programming_manual_4156", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4156, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4157", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4157, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4158", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4158, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4159", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4159, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4160", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4160, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4161", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4161, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4162", "text": "When the robot is powered on, its internal clock starts at the date at which the robot image\nwas built. Each time you connect to the robot via the MecaPortal, the internal clock of\nthe robot is automatically adjusted to UTC. Other than connecting to the robot using the\nMecaPortal, another solution is to send the SetRtc (page 200) command to the robot (from\nthe PLC or any application controlling the robot), if you want all timestamps in the robot\u2019s\nlog files to be with respect to UTC. Note, however, that this command does not affect the\ntimestamps of the data sent over the monitoring and control ports, which are with respect to\nan internal monotonic microseconds timer that cannot be reset.", "source": "mcs500_programming_manual", "chunk_index": 4162, "length": 697, "hash": "816c29a72f4fedb874426cb33f4222ae"}
{"id": "mcs500_programming_manual_4163", "text": "When the robot is powered on, its internal clock starts at the date at which the robot image\nwas built. Each time you connect to the robot via the MecaPortal, the internal clock of\nthe robot is automatically adjusted to UTC. Other than connecting to the robot using the\nMecaPortal, another solution is to send the", "source": "mcs500_programming_manual", "chunk_index": 4163, "length": 313, "hash": "b5a8f81400bb623214786e78a8b8dbc9"}
{"id": "mcs500_programming_manual_4164", "text": "(page 200) command to the robot (from\nthe PLC or any application controlling the robot), if you want all timestamps in the robot\u2019s\nlog files to be with respect to UTC. Note, however, that this command does not affect the\ntimestamps of the data sent over the monitoring and control ports, which are with respect to\nan internal monotonic microseconds timer that cannot be reset.", "source": "mcs500_programming_manual", "chunk_index": 4164, "length": 376, "hash": "c5bd7ec0cac2779ea8830e371e3213e9"}
{"id": "mcs500_programming_manual_4165", "text": "\u2022 t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00 UTC January 1,", "source": "mcs500_programming_manual", "chunk_index": 4165, "length": 89, "hash": "a04e924335cc7e55e589976f49e60419"}
{"id": "mcs500_programming_manual_4166", "text": "\u2022 t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00 UTC January 1,", "source": "mcs500_programming_manual", "chunk_index": 4166, "length": 89, "hash": "a04e924335cc7e55e589976f49e60419"}
{"id": "mcs500_programming_manual_4167", "text": "By default the recovery mode is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4167, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "mcs500_programming_manual_4168", "text": "By default the recovery mode is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4168, "length": 44, "hash": "49a6122793d1735d06b54fa0e3888c80"}
{"id": "mcs500_programming_manual_4169", "text": "\u2022 [2049][Recovery mode enabled]", "source": "mcs500_programming_manual", "chunk_index": 4169, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "mcs500_programming_manual_4170", "text": "\u2022 [2049][Recovery mode enabled]", "source": "mcs500_programming_manual", "chunk_index": 4170, "length": 31, "hash": "9ec386cf72f304605e39accb11e744b6"}
{"id": "mcs500_programming_manual_4171", "text": "\u2022 [2050][Recovery mode disabled]", "source": "mcs500_programming_manual", "chunk_index": 4171, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "mcs500_programming_manual_4172", "text": "\u2022 [2050][Recovery mode disabled]", "source": "mcs500_programming_manual", "chunk_index": 4172, "length": 32, "hash": "d59cccf315656dd4459df84d3ee0a825"}
{"id": "mcs500_programming_manual_4173", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4173, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4174", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4174, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4175", "text": "In cyclic protocols, the SetRtc (page 200) command is represented by the HostTime data. See\nSection 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4175, "length": 119, "hash": "aaa2ff9807bb6106674f5af695d229a9"}
{"id": "mcs500_programming_manual_4176", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 4176, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_4177", "text": "(page 200) command is represented by the", "source": "mcs500_programming_manual", "chunk_index": 4177, "length": 40, "hash": "a2eebdcca57af6a558c553e38e89b4f5"}
{"id": "mcs500_programming_manual_4178", "text": "data. See\nSection 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4178, "length": 37, "hash": "956c44402429e4faba6dd120f5e906c6"}
{"id": "mcs500_programming_manual_4179", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4179, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4180", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4180, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4181", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. Simulation mode can be activated and deactivated with the\nActivateSim (page 172) and DeactivateSim (page 176) commands (these commands can only\nbe executed when the robot is deactivated).", "source": "mcs500_programming_manual", "chunk_index": 4181, "length": 313, "hash": "1beab065705df8731918f7a26a3fe90e"}
{"id": "mcs500_programming_manual_4182", "text": "Our robots support a simulation mode in which all of the robot\u2019s hardware including our EOAT\nare simulated and nothing moves. Simulation mode can be activated and deactivated with the", "source": "mcs500_programming_manual", "chunk_index": 4182, "length": 183, "hash": "3253826a7dea60f8f09e2546c67990a3"}
{"id": "mcs500_programming_manual_4183", "text": "(page 176) commands (these commands can only\nbe executed when the robot is deactivated).", "source": "mcs500_programming_manual", "chunk_index": 4183, "length": 88, "hash": "50a034f6b2c11bedd62834f43df5cb89"}
{"id": "mcs500_programming_manual_4184", "text": "The SetSimModeCfg (page 201) command configures the default simulation mode type (fast\nor normal) enabled when ActivateSim (page 172) is executed without an argument, when the\nActivate Sim button in the MecaPortal is pressed, or when simulation mode is enabled using\na cyclic protocol.", "source": "mcs500_programming_manual", "chunk_index": 4184, "length": 285, "hash": "a2adfd1a6d52ac6c5816e41133346177"}
{"id": "mcs500_programming_manual_4185", "text": "(page 201) command configures the default simulation mode type (fast\nor normal) enabled when", "source": "mcs500_programming_manual", "chunk_index": 4185, "length": 92, "hash": "d37c49721033d840200a2b71018f1501"}
{"id": "mcs500_programming_manual_4186", "text": "(page 172) is executed without an argument, when the\nActivate Sim button in the MecaPortal is pressed, or when simulation mode is enabled using\na cyclic protocol.", "source": "mcs500_programming_manual", "chunk_index": 4186, "length": 162, "hash": "109b7d02c3652613810d52f63d25b6de"}
{"id": "mcs500_programming_manual_4187", "text": "\u2022 m: integer specifying the default simulation mode type", "source": "mcs500_programming_manual", "chunk_index": 4187, "length": 56, "hash": "e25873ee9c845e0d3c552124c68b384b"}
{"id": "mcs500_programming_manual_4188", "text": "\u2022 m: integer specifying the default simulation mode type", "source": "mcs500_programming_manual", "chunk_index": 4188, "length": 56, "hash": "e25873ee9c845e0d3c552124c68b384b"}
{"id": "mcs500_programming_manual_4189", "text": "\u2013 1, normal (real-time) simulation mode,", "source": "mcs500_programming_manual", "chunk_index": 4189, "length": 40, "hash": "e1d3a894fc0ba495e31c36b341edad56"}
{"id": "mcs500_programming_manual_4190", "text": "1, normal (real-time) simulation mode,", "source": "mcs500_programming_manual", "chunk_index": 4190, "length": 38, "hash": "14490b35ce897202e7300d274a426c35"}
{"id": "mcs500_programming_manual_4191", "text": "\u2013 2, fast simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 4191, "length": 26, "hash": "c2427837f3b62dad74bdca08d61e8bb1"}
{"id": "mcs500_programming_manual_4192", "text": "2, fast simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 4192, "length": 24, "hash": "fa018b3d200392d59be78cd3a186865a"}
{"id": "mcs500_programming_manual_4193", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1.", "source": "mcs500_programming_manual", "chunk_index": 4193, "length": 110, "hash": "05ecbdec911974cda6abbafb9663018a"}
{"id": "mcs500_programming_manual_4194", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 1.", "source": "mcs500_programming_manual", "chunk_index": 4194, "length": 110, "hash": "05ecbdec911974cda6abbafb9663018a"}
{"id": "mcs500_programming_manual_4195", "text": "\u2022 [2188][Simulation mode configuration set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 4195, "length": 57, "hash": "fe240e8ffb8ca5222e4aeb415b78c47d"}
{"id": "mcs500_programming_manual_4196", "text": "\u2022 [2188][Simulation mode configuration set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 4196, "length": 57, "hash": "fe240e8ffb8ca5222e4aeb415b78c47d"}
{"id": "mcs500_programming_manual_4197", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4197, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4198", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 4198, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_4199", "text": "While simulation can be activated in cyclic protocols, the default simulation mode type\n(i.e., fast or normal) cannot be selected in cyclic protocols. You must configure the default\nsimulation mode type using the TCP command SetSimModeCfg (page 201).", "source": "mcs500_programming_manual", "chunk_index": 4199, "length": 250, "hash": "2a3aa63a1a7cb82d22cd6cef09880ff9"}
{"id": "mcs500_programming_manual_4200", "text": "While simulation can be activated in cyclic protocols, the default simulation mode type\n(i.e., fast or normal) cannot be selected in cyclic protocols. You must configure the default\nsimulation mode type using the TCP command", "source": "mcs500_programming_manual", "chunk_index": 4200, "length": 224, "hash": "0e54b370d8bfca47ff033991a34cfdf9"}
{"id": "mcs500_programming_manual_4201", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4201, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4202", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4202, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4203", "text": "This command sets the time scaling of the trajectory generator. By calling this command\nwith an argument p of less than 100, all robot motions remain exactly the same (i.e., the path\nremains the same), but everything will be (100 \u2212 p) percent slower, including time delays\n(e.g., the pause set by the command Delay (page 125)). In other words, this command is\nmore than a simple velocity override.", "source": "mcs500_programming_manual", "chunk_index": 4203, "length": 397, "hash": "a4052894ae67c3548c6a4e5e1a0a4c90"}
{"id": "mcs500_programming_manual_4204", "text": "This command sets the time scaling of the trajectory generator. By calling this command\nwith an argument p of less than 100, all robot motions remain exactly the same (i.e., the path\nremains the same), but everything will be (100 \u2212 p) percent slower, including time delays\n(e.g., the pause set by the command", "source": "mcs500_programming_manual", "chunk_index": 4204, "length": 308, "hash": "2d0896cb695156950fc81fd6dc446726"}
{"id": "mcs500_programming_manual_4205", "text": "(page 125)). In other words, this command is\nmore than a simple velocity override.", "source": "mcs500_programming_manual", "chunk_index": 4205, "length": 82, "hash": "40ceb27aa80ddd828a888a4049c06d91"}
{"id": "mcs500_programming_manual_4206", "text": "When using the MecaPortal, you can change the time scaling in real time with the \u201cTime\nScaling\u201d slider at the bottom of the program panel.", "source": "mcs500_programming_manual", "chunk_index": 4206, "length": 138, "hash": "dc9d55ea5f154b8bf2bc32f4e4a930fe"}
{"id": "mcs500_programming_manual_4207", "text": "When using the MecaPortal, you can change the time scaling in real time with the \u201cTime\nScaling\u201d slider at the bottom of the program panel.", "source": "mcs500_programming_manual", "chunk_index": 4207, "length": 138, "hash": "dc9d55ea5f154b8bf2bc32f4e4a930fe"}
{"id": "mcs500_programming_manual_4208", "text": "\u2022 p: time scaling percentage, from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 4208, "length": 48, "hash": "6cefa34925216a3664c46a20a652a5c8"}
{"id": "mcs500_programming_manual_4209", "text": "\u2022 p: time scaling percentage, from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 4209, "length": 48, "hash": "6cefa34925216a3664c46a20a652a5c8"}
{"id": "mcs500_programming_manual_4210", "text": "By default, p = 100.", "source": "mcs500_programming_manual", "chunk_index": 4210, "length": 20, "hash": "ee6bf564bd57e97d5ca6343ffab283b3"}
{"id": "mcs500_programming_manual_4211", "text": "By default, p = 100.", "source": "mcs500_programming_manual", "chunk_index": 4211, "length": 20, "hash": "ee6bf564bd57e97d5ca6343ffab283b3"}
{"id": "mcs500_programming_manual_4212", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4212, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4213", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4213, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4214", "text": "In cyclic protocols,\nMotionCommandID 48. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4214, "length": 72, "hash": "82885281f8ca525f72f3bc4913e814aa"}
{"id": "mcs500_programming_manual_4215", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4215, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4216", "text": "48. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4216, "length": 35, "hash": "16def8f6c261151c58682952ddccfcab"}
{"id": "mcs500_programming_manual_4217", "text": "the SetTimeScaling (page 202) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 4217, "length": 55, "hash": "057c1911a68f58a19a998281d573f9ba"}
{"id": "mcs500_programming_manual_4218", "text": "(page 202) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 4218, "length": 36, "hash": "215fb0d8e042d53f2ba897173f8d5c7f"}
{"id": "mcs500_programming_manual_4219", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4219, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4220", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4220, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4221", "text": "This command starts a program that has been previously saved in the robot\u2019s memory.\nExecuting this command will launch the specified program only once.", "source": "mcs500_programming_manual", "chunk_index": 4221, "length": 151, "hash": "a3f5c74b5524aa16949a63f2fde7a07f"}
{"id": "mcs500_programming_manual_4222", "text": "This command starts a program that has been previously saved in the robot\u2019s memory.\nExecuting this command will launch the specified program only once.", "source": "mcs500_programming_manual", "chunk_index": 4222, "length": 151, "hash": "a3f5c74b5524aa16949a63f2fde7a07f"}
{"id": "mcs500_programming_manual_4223", "text": "\u2022 s: string containing the program name. It should contain a maximum of 63 characters", "source": "mcs500_programming_manual", "chunk_index": 4223, "length": 85, "hash": "cc5fc538e1bb29d68a9882c6d7f52cbd"}
{"id": "mcs500_programming_manual_4224", "text": "\u2022 s: string containing the program name. It should contain a maximum of 63 characters", "source": "mcs500_programming_manual", "chunk_index": 4224, "length": 85, "hash": "cc5fc538e1bb29d68a9882c6d7f52cbd"}
{"id": "mcs500_programming_manual_4225", "text": "among the 62 alphanumericals (A..Z, a..z, 0..9), the underscore and the hyphen.", "source": "mcs500_programming_manual", "chunk_index": 4225, "length": 79, "hash": "934cf5e6daf55456e522d02e3594e37f"}
{"id": "mcs500_programming_manual_4226", "text": "among the 62 alphanumericals (A..Z, a..z, 0..9), the underscore and the hyphen.", "source": "mcs500_programming_manual", "chunk_index": 4226, "length": 79, "hash": "934cf5e6daf55456e522d02e3594e37f"}
{"id": "mcs500_programming_manual_4227", "text": "\u2022 [2063][Offline program s started.]", "source": "mcs500_programming_manual", "chunk_index": 4227, "length": 36, "hash": "bf0021675c5135e4c098706a08e6f9c6"}
{"id": "mcs500_programming_manual_4228", "text": "\u2022 [2063][Offline program s started.]", "source": "mcs500_programming_manual", "chunk_index": 4228, "length": 36, "hash": "bf0021675c5135e4c098706a08e6f9c6"}
{"id": "mcs500_programming_manual_4229", "text": "\u2022 [3017][No offline program saved.]", "source": "mcs500_programming_manual", "chunk_index": 4229, "length": 35, "hash": "097012d18254ef08f84001ae1401b570"}
{"id": "mcs500_programming_manual_4230", "text": "\u2022 [3017][No offline program saved.]", "source": "mcs500_programming_manual", "chunk_index": 4230, "length": 35, "hash": "097012d18254ef08f84001ae1401b570"}
{"id": "mcs500_programming_manual_4231", "text": "The MecaPortal allows saving of programs using sting-based name rather than numbers,\nunlike the command StartSaving. However, if you wish to start these programs through a\ncyclic protocol, you should only use integer numbers as program names.", "source": "mcs500_programming_manual", "chunk_index": 4231, "length": 242, "hash": "83407c57bea54900bdc59e05b1239cb2"}
{"id": "mcs500_programming_manual_4232", "text": "The MecaPortal allows saving of programs using sting-based name rather than numbers,\nunlike the command StartSaving. However, if you wish to start these programs through a\ncyclic protocol, you should only use integer numbers as program names.", "source": "mcs500_programming_manual", "chunk_index": 4232, "length": 242, "hash": "83407c57bea54900bdc59e05b1239cb2"}
{"id": "mcs500_programming_manual_4233", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4233, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4234", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4234, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4235", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4235, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4236", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4236, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4237", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4237, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4238", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4238, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4239", "text": "In cyclic protocols,\nMotionCommandID 100. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4239, "length": 73, "hash": "6048c3a3a0f4564dcdc3cd8d3b42b808"}
{"id": "mcs500_programming_manual_4240", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4240, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4241", "text": "100. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4241, "length": 36, "hash": "d02ab6c7c20ba2aebc0ad7d373395993"}
{"id": "mcs500_programming_manual_4242", "text": "the StartProgram (page 203) command is", "source": "mcs500_programming_manual", "chunk_index": 4242, "length": 38, "hash": "63b32556ac4f3aa006e8ce7985ed7c84"}
{"id": "mcs500_programming_manual_4243", "text": "(page 203) command is", "source": "mcs500_programming_manual", "chunk_index": 4243, "length": 21, "hash": "0ab6d412ee2361e0875fb8700715fb06"}
{"id": "mcs500_programming_manual_4244", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4244, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4245", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4245, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4246", "text": "This command is used to save commands in the robot\u2019s internal memory. These are referred\nto as offline programs (page 340) that can later be played using the StartProgram (page 203)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 4246, "length": 190, "hash": "052bb08956548809b4d8511189e816b2"}
{"id": "mcs500_programming_manual_4247", "text": "This command is used to save commands in the robot\u2019s internal memory. These are referred\nto as", "source": "mcs500_programming_manual", "chunk_index": 4247, "length": 94, "hash": "417985dceb923b45d5f4863babe82d2b"}
{"id": "mcs500_programming_manual_4248", "text": "(page 340) that can later be played using the", "source": "mcs500_programming_manual", "chunk_index": 4248, "length": 45, "hash": "d8eec98923318d1f38c3a6c33036b4e5"}
{"id": "mcs500_programming_manual_4249", "text": "The saved program will remain in the robot internal memory even after disconnecting the\npower. Saving a new program with the same argument overwrites the existing program.", "source": "mcs500_programming_manual", "chunk_index": 4249, "length": 171, "hash": "d572ae91b699a28f8539419400ba9b15"}
{"id": "mcs500_programming_manual_4250", "text": "The saved program will remain in the robot internal memory even after disconnecting the\npower. Saving a new program with the same argument overwrites the existing program.", "source": "mcs500_programming_manual", "chunk_index": 4250, "length": 171, "hash": "d572ae91b699a28f8539419400ba9b15"}
{"id": "mcs500_programming_manual_4251", "text": "The robot records all commands sent between the StartSaving (page 204) and StopSaving\n(page 206) commands.", "source": "mcs500_programming_manual", "chunk_index": 4251, "length": 106, "hash": "bf05990ba285738ce22c54a922bf8b27"}
{"id": "mcs500_programming_manual_4252", "text": "The robot records all commands sent between the", "source": "mcs500_programming_manual", "chunk_index": 4252, "length": 47, "hash": "b794dbb52bc2ae557f4242d5c0259e4c"}
{"id": "mcs500_programming_manual_4253", "text": "(page 206) commands.", "source": "mcs500_programming_manual", "chunk_index": 4253, "length": 20, "hash": "8b162002ca293a08efde4f0c2166e6a6"}
{"id": "mcs500_programming_manual_4254", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,\nas it is easier and more flexible than using StartSaving (page 204) / StopSaving (page 206).", "source": "mcs500_programming_manual", "chunk_index": 4254, "length": 182, "hash": "8d9911fac0495108487263ee18c803b7"}
{"id": "mcs500_programming_manual_4255", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,", "source": "mcs500_programming_manual", "chunk_index": 4255, "length": 89, "hash": "7cc5346aa740e9711f7943bf1019ed3d"}
{"id": "mcs500_programming_manual_4256", "text": "as it is easier and more flexible than using", "source": "mcs500_programming_manual", "chunk_index": 4256, "length": 44, "hash": "fdfee45de86b5d88c7fefb86a525bf21"}
{"id": "mcs500_programming_manual_4257", "text": "The robot will execute but not record request commands (Get*). If the robot receives a\nchange of state command (Home (page 179), PauseMotion (page 182), SetEom (page 189),\netc.) while recording, it will abort saving the program.", "source": "mcs500_programming_manual", "chunk_index": 4257, "length": 228, "hash": "05d28a97f0caea56ee4e9e7c3553b96e"}
{"id": "mcs500_programming_manual_4258", "text": "The robot will execute but not record request commands (Get*). If the robot receives a\nchange of state command (", "source": "mcs500_programming_manual", "chunk_index": 4258, "length": 112, "hash": "ccb2801f3824358e942272734c9ff1ff"}
{"id": "mcs500_programming_manual_4259", "text": "(page 189),\netc.) while recording, it will abort saving the program.", "source": "mcs500_programming_manual", "chunk_index": 4259, "length": 68, "hash": "2dcf85304297fc6f2fd3f39a6b203ba7"}
{"id": "mcs500_programming_manual_4260", "text": "\u2022 n: program number, where n \u2264 500 (maximum number of programs that can be stored).", "source": "mcs500_programming_manual", "chunk_index": 4260, "length": 83, "hash": "d667516c6504aa701aed7a8436150ceb"}
{"id": "mcs500_programming_manual_4261", "text": "\u2022 n: program number, where n \u2264 500 (maximum number of programs that can be stored).", "source": "mcs500_programming_manual", "chunk_index": 4261, "length": 83, "hash": "d667516c6504aa701aed7a8436150ceb"}
{"id": "mcs500_programming_manual_4262", "text": "\u2022 [2060][Start saving program.]", "source": "mcs500_programming_manual", "chunk_index": 4262, "length": 31, "hash": "a8cccdb60b75493b7ab4d3536a9b2c75"}
{"id": "mcs500_programming_manual_4263", "text": "\u2022 [2060][Start saving program.]", "source": "mcs500_programming_manual", "chunk_index": 4263, "length": 31, "hash": "a8cccdb60b75493b7ab4d3536a9b2c75"}
{"id": "mcs500_programming_manual_4264", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4264, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4265", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4265, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4266", "text": "If the robot is deactivated, the program is saved without executing received commands.", "source": "mcs500_programming_manual", "chunk_index": 4266, "length": 86, "hash": "72c18f8fae6f04fd9e6086ff46cf6ff0"}
{"id": "mcs500_programming_manual_4267", "text": "If the robot is deactivated, the program is saved without executing received commands.", "source": "mcs500_programming_manual", "chunk_index": 4267, "length": 86, "hash": "72c18f8fae6f04fd9e6086ff46cf6ff0"}
{"id": "mcs500_programming_manual_4268", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4268, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4269", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4269, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4270", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4270, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4271", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4271, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4272", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4272, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4273", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4273, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4274", "text": "This command will make the controller save the program and stop saving.", "source": "mcs500_programming_manual", "chunk_index": 4274, "length": 71, "hash": "00318d28dded19cef6fb6de9ee36c400"}
{"id": "mcs500_programming_manual_4275", "text": "This command will make the controller save the program and stop saving.", "source": "mcs500_programming_manual", "chunk_index": 4275, "length": 71, "hash": "00318d28dded19cef6fb6de9ee36c400"}
{"id": "mcs500_programming_manual_4276", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,\nas it is easier and more flexible than using StartSaving (page 204) / StopSaving (page 206).", "source": "mcs500_programming_manual", "chunk_index": 4276, "length": 182, "hash": "8d9911fac0495108487263ee18c803b7"}
{"id": "mcs500_programming_manual_4277", "text": "We recommend using the MecaPortal code editor to edit, save, and delete offline programs,\nas it is easier and more flexible than using", "source": "mcs500_programming_manual", "chunk_index": 4277, "length": 134, "hash": "e14cce97c4dc39c1b05fe0a61adcab42"}
{"id": "mcs500_programming_manual_4278", "text": "\u2022 [2061][n commands saved.]", "source": "mcs500_programming_manual", "chunk_index": 4278, "length": 27, "hash": "2a2339ebd6435989d20cb527da6a54d9"}
{"id": "mcs500_programming_manual_4279", "text": "\u2022 [2061][n commands saved.]", "source": "mcs500_programming_manual", "chunk_index": 4279, "length": 27, "hash": "2a2339ebd6435989d20cb527da6a54d9"}
{"id": "mcs500_programming_manual_4280", "text": "\u2022 [2064][Offline program looping is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 4280, "length": 45, "hash": "4facde3a533e00bded5d46f8119826dd"}
{"id": "mcs500_programming_manual_4281", "text": "\u2022 [2064][Offline program looping is enabled.]", "source": "mcs500_programming_manual", "chunk_index": 4281, "length": 45, "hash": "4facde3a533e00bded5d46f8119826dd"}
{"id": "mcs500_programming_manual_4282", "text": "\u2022 [2065][Offline program looping is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 4282, "length": 46, "hash": "5668c492b06afd993064ba6e6573335c"}
{"id": "mcs500_programming_manual_4283", "text": "\u2022 [2065][Offline program looping is disabled.]", "source": "mcs500_programming_manual", "chunk_index": 4283, "length": 46, "hash": "5668c492b06afd993064ba6e6573335c"}
{"id": "mcs500_programming_manual_4284", "text": "\u2022 [1022][Robot was not saving the program.]", "source": "mcs500_programming_manual", "chunk_index": 4284, "length": 43, "hash": "e5fb5ec54ce1eb7996762e4290dac688"}
{"id": "mcs500_programming_manual_4285", "text": "\u2022 [1022][Robot was not saving the program.]", "source": "mcs500_programming_manual", "chunk_index": 4285, "length": 43, "hash": "e5fb5ec54ce1eb7996762e4290dac688"}
{"id": "mcs500_programming_manual_4286", "text": "Two responses will be generated: the first (2061) and the second (2064) or third (2065). If\nyou send this command while the robot is not saving a program, the fourth response (1022)\nwill be returned.", "source": "mcs500_programming_manual", "chunk_index": 4286, "length": 199, "hash": "e2b0cb94b9bf3a525dc59819efd1018e"}
{"id": "mcs500_programming_manual_4287", "text": "Two responses will be generated: the first (2061) and the second (2064) or third (2065). If\nyou send this command while the robot is not saving a program, the fourth response (1022)\nwill be returned.", "source": "mcs500_programming_manual", "chunk_index": 4287, "length": 199, "hash": "e2b0cb94b9bf3a525dc59819efd1018e"}
{"id": "mcs500_programming_manual_4288", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4288, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4289", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4289, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4290", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4290, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4291", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4291, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4292", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4292, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4293", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4293, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4294", "text": "This command will enable EtherCAT and disable the other three protocols (EtherCAT is an\nexclusive protocol that cannot be used at the same time as other Ethernet-based protocols).", "source": "mcs500_programming_manual", "chunk_index": 4294, "length": 179, "hash": "83ed5a2da534f931f2a6b0286c511d20"}
{"id": "mcs500_programming_manual_4295", "text": "This command will enable EtherCAT and disable the other three protocols (EtherCAT is an\nexclusive protocol that cannot be used at the same time as other Ethernet-based protocols).", "source": "mcs500_programming_manual", "chunk_index": 4295, "length": 179, "hash": "83ed5a2da534f931f2a6b0286c511d20"}
{"id": "mcs500_programming_manual_4296", "text": "Enabling EtherCAT will disable all other communication protocols (TCP/IP, EtherNet/IP,\nPROFINET). The MecaPortal is NOT accessible while in EtherCAT mode.", "source": "mcs500_programming_manual", "chunk_index": 4296, "length": 154, "hash": "e052f4725f8413f4e694ba4a118da150"}
{"id": "mcs500_programming_manual_4297", "text": "Enabling EtherCAT will disable all other communication protocols (TCP/IP, EtherNet/IP,\nPROFINET). The MecaPortal is NOT accessible while in EtherCAT mode.", "source": "mcs500_programming_manual", "chunk_index": 4297, "length": 154, "hash": "e052f4725f8413f4e694ba4a118da150"}
{"id": "mcs500_programming_manual_4298", "text": "There are two ways to disable EtherCAT (and thus re-enable another communication\nprotocols):", "source": "mcs500_programming_manual", "chunk_index": 4298, "length": 92, "hash": "d27bd8efd1d2586b6570a88d1e1990fe"}
{"id": "mcs500_programming_manual_4299", "text": "There are two ways to disable EtherCAT (and thus re-enable another communication\nprotocols):", "source": "mcs500_programming_manual", "chunk_index": 4299, "length": 92, "hash": "d27bd8efd1d2586b6570a88d1e1990fe"}
{"id": "mcs500_programming_manual_4300", "text": "1. Reset the DisableEtherCAT subindex of the Robot control (page 44) object.", "source": "mcs500_programming_manual", "chunk_index": 4300, "length": 76, "hash": "cdf5116157f96d8797df34f2350e63bb"}
{"id": "mcs500_programming_manual_4301", "text": "1. Reset the DisableEtherCAT subindex of the", "source": "mcs500_programming_manual", "chunk_index": 4301, "length": 44, "hash": "8ebfc2e4c3b9ee08e09df5b337acea1b"}
{"id": "mcs500_programming_manual_4302", "text": "2. Perform a network configuration reset (see the robot\u2019s user manual for the procedure).", "source": "mcs500_programming_manual", "chunk_index": 4302, "length": 89, "hash": "3b9438d37d677eb900179d1448f5a866"}
{"id": "mcs500_programming_manual_4303", "text": "2. Perform a network configuration reset (see the robot\u2019s user manual for the procedure).", "source": "mcs500_programming_manual", "chunk_index": 4303, "length": 89, "hash": "3b9438d37d677eb900179d1448f5a866"}
{"id": "mcs500_programming_manual_4304", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4304, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4305", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4305, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4306", "text": "In cyclic protocols, set the DisableEtherCAT bit in the Robot Control data to 1 to disable\nthe EtherCAT protocol and switch back to TCP/IP protocol. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4306, "length": 178, "hash": "77a881b47824eaa96012f1d3f348908f"}
{"id": "mcs500_programming_manual_4307", "text": "In cyclic protocols, set the", "source": "mcs500_programming_manual", "chunk_index": 4307, "length": 28, "hash": "c51e7492f6edd224957cc696526247af"}
{"id": "mcs500_programming_manual_4308", "text": "data to 1 to disable\nthe EtherCAT protocol and switch back to TCP/IP protocol. See Table 4 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4308, "length": 108, "hash": "e96d863b58d5a13c28bc5e4248fad923"}
{"id": "mcs500_programming_manual_4309", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4309, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4310", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4310, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4311", "text": "This command is used for associating an ID number with any non-motion command, thus\nIt it is executed\nproviding means to identify the command that sent a specific response.\nimmediately.", "source": "mcs500_programming_manual", "chunk_index": 4311, "length": 185, "hash": "c080c981aaaac45b15a8e476fd463bee"}
{"id": "mcs500_programming_manual_4312", "text": "This command is used for associating an ID number with any non-motion command, thus\nIt it is executed\nproviding means to identify the command that sent a specific response.\nimmediately.", "source": "mcs500_programming_manual", "chunk_index": 4312, "length": 185, "hash": "c080c981aaaac45b15a8e476fd463bee"}
{"id": "mcs500_programming_manual_4313", "text": "\u2022 n : a non-negative integer number, ranging from 0 to 2\u00b3\u00b2 \u2212 1.", "source": "mcs500_programming_manual", "chunk_index": 4313, "length": 63, "hash": "e1c34f06308f0e09578bebe71a12c512"}
{"id": "mcs500_programming_manual_4314", "text": "\u2022 n : a non-negative integer number, ranging from 0 to 2\u00b3\u00b2 \u2212 1.", "source": "mcs500_programming_manual", "chunk_index": 4314, "length": 63, "hash": "e1c34f06308f0e09578bebe71a12c512"}
{"id": "mcs500_programming_manual_4315", "text": "For example, sending SyncCmdQueue(123) just before the GetStatusRobot (page 277)\ncommand allows the application to know if a received robot status (code 2007) is the response\nof the GetStatusRobot (page 277) request (i.e., preceded by [2097][123]) or of an older status\nrequest.", "source": "mcs500_programming_manual", "chunk_index": 4315, "length": 278, "hash": "7614a682ff2587e780009f7ddf259c6a"}
{"id": "mcs500_programming_manual_4316", "text": "For example, sending SyncCmdQueue(123) just before the", "source": "mcs500_programming_manual", "chunk_index": 4316, "length": 54, "hash": "7e08fd68e16e2c6122686aee12b871a7"}
{"id": "mcs500_programming_manual_4317", "text": "(page 277)\ncommand allows the application to know if a received robot status (code 2007) is the response\nof the", "source": "mcs500_programming_manual", "chunk_index": 4317, "length": 111, "hash": "5599540b707827b4ef272e1a246787f2"}
{"id": "mcs500_programming_manual_4318", "text": "(page 277) request (i.e., preceded by [2097][123]) or of an older status\nrequest.", "source": "mcs500_programming_manual", "chunk_index": 4318, "length": 81, "hash": "258fa51a0efec1950e8cb369f9a71420"}
{"id": "mcs500_programming_manual_4319", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4319, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4320", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4320, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4321", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4321, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4322", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4322, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4323", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4323, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4324", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4324, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4325", "text": "This command starts an Ethernet capture (PCAP file format) on the robot, for the specified\nduration. The Ethernet capture will be part of the logs archive, which can be retrieved from\nthe MecaPortal.", "source": "mcs500_programming_manual", "chunk_index": 4325, "length": 199, "hash": "fcd19e72b75de441aa97f567d3003036"}
{"id": "mcs500_programming_manual_4326", "text": "This command starts an Ethernet capture (PCAP file format) on the robot, for the specified\nduration. The Ethernet capture will be part of the logs archive, which can be retrieved from\nthe MecaPortal.", "source": "mcs500_programming_manual", "chunk_index": 4326, "length": 199, "hash": "fcd19e72b75de441aa97f567d3003036"}
{"id": "mcs500_programming_manual_4327", "text": "\u2022 n: duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 4327, "length": 25, "hash": "cbb2b47b44dc4dfa9a20bc4a6d13c3f3"}
{"id": "mcs500_programming_manual_4328", "text": "\u2022 n: duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 4328, "length": 25, "hash": "cbb2b47b44dc4dfa9a20bc4a6d13c3f3"}
{"id": "mcs500_programming_manual_4329", "text": "\u2022 [3035][TCP dump capture started for n seconds.]", "source": "mcs500_programming_manual", "chunk_index": 4329, "length": 49, "hash": "bc45ffdeca4b748b4a9fbac066766e11"}
{"id": "mcs500_programming_manual_4330", "text": "\u2022 [3035][TCP dump capture started for n seconds.]", "source": "mcs500_programming_manual", "chunk_index": 4330, "length": 49, "hash": "bc45ffdeca4b748b4a9fbac066766e11"}
{"id": "mcs500_programming_manual_4331", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "mcs500_programming_manual", "chunk_index": 4331, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "mcs500_programming_manual_4332", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "mcs500_programming_manual", "chunk_index": 4332, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "mcs500_programming_manual_4333", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4333, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4334", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4334, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4335", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4335, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4336", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4336, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4337", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4337, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4338", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4338, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4339", "text": "This command is needed if you want to stop the TCP dump started with the TcpDump(n)\n(page 209) commands, before the timeout period of n seconds.", "source": "mcs500_programming_manual", "chunk_index": 4339, "length": 144, "hash": "0a5ae2e939fc8422df61b7a3451a90e1"}
{"id": "mcs500_programming_manual_4340", "text": "This command is needed if you want to stop the TCP dump started with the", "source": "mcs500_programming_manual", "chunk_index": 4340, "length": 72, "hash": "622f859dd3b95cc345f41d5fff71e501"}
{"id": "mcs500_programming_manual_4341", "text": "(page 209) commands, before the timeout period of n seconds.", "source": "mcs500_programming_manual", "chunk_index": 4341, "length": 60, "hash": "639b98d553b191c90a1b5b8ebd012b18"}
{"id": "mcs500_programming_manual_4342", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "mcs500_programming_manual", "chunk_index": 4342, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "mcs500_programming_manual_4343", "text": "\u2022 [3036][TCP dump capture stopped.]", "source": "mcs500_programming_manual", "chunk_index": 4343, "length": 35, "hash": "2bc3e59fce0caa54b6d6f283bc908fd8"}
{"id": "mcs500_programming_manual_4344", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4344, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4345", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4345, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4346", "text": "It does nothing if no TCP dump capture was started.", "source": "mcs500_programming_manual", "chunk_index": 4346, "length": 51, "hash": "03e0f5d0321a8345b43609aebc23ca99"}
{"id": "mcs500_programming_manual_4347", "text": "It does nothing if no TCP dump capture was started.", "source": "mcs500_programming_manual", "chunk_index": 4347, "length": 51, "hash": "03e0f5d0321a8345b43609aebc23ca99"}
{"id": "mcs500_programming_manual_4348", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4348, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4349", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4349, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4350", "text": "Data request commands", "source": "mcs500_programming_manual", "chunk_index": 4350, "length": 21, "hash": "740e0f3ebe98ec51eeb00f79c71a6b52"}
{"id": "mcs500_programming_manual_4351", "text": "Data request commands", "source": "mcs500_programming_manual", "chunk_index": 4351, "length": 21, "hash": "740e0f3ebe98ec51eeb00f79c71a6b52"}
{"id": "mcs500_programming_manual_4352", "text": "Most request commands return values for parameters that were either previously configured\nusing the corresponding Set* command (e.g.\nSetJointVel (page 151) and GetJointVel\n(page 229)) or are simply the default values of those parameters (e.g. 50 in the case of the\njoint velocity). A few of the request commands return values for parameters that have been\nautomatically assigned (e.g., at the factory as in the case of GetProductType (page 241), or\nafter a firmware upgrade, as in the case of GetFwVersion (page 225)).", "source": "mcs500_programming_manual", "chunk_index": 4352, "length": 518, "hash": "1e415f247675f2522157e50680be01fb"}
{"id": "mcs500_programming_manual_4353", "text": "Most request commands return values for parameters that were either previously configured\nusing the corresponding Set* command (e.g.", "source": "mcs500_programming_manual", "chunk_index": 4353, "length": 132, "hash": "d4b93cae3c4533d2c8b546d582c29989"}
{"id": "mcs500_programming_manual_4354", "text": "(page 229)) or are simply the default values of those parameters (e.g. 50 in the case of the\njoint velocity). A few of the request commands return values for parameters that have been\nautomatically assigned (e.g., at the factory as in the case of", "source": "mcs500_programming_manual", "chunk_index": 4354, "length": 246, "hash": "97a4c061e062c7dc1879fd215967bfec"}
{"id": "mcs500_programming_manual_4355", "text": "(page 241), or\nafter a firmware upgrade, as in the case of", "source": "mcs500_programming_manual", "chunk_index": 4355, "length": 58, "hash": "05bfe2b692395180591e8d6078765a5d"}
{"id": "mcs500_programming_manual_4356", "text": "Contrary to motion commands, robot control commands are executed immediately, i.e., are\ninstantaneous. Therefore, if you send a SetTrf (page 166) command, then a MovePose\n(page 138) command, then another SetTrf (page 166) command, and immediately after that\na GetTrf (page 251) command, you will get the arguments of the first SetTrf (page 166)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 4356, "length": 353, "hash": "852031db83541bc4714d5f5b4d47f4fd"}
{"id": "mcs500_programming_manual_4357", "text": "Contrary to motion commands,", "source": "mcs500_programming_manual", "chunk_index": 4357, "length": 28, "hash": "e3e9613fea50dfcf0c0d70e95e106765"}
{"id": "mcs500_programming_manual_4358", "text": "robot control commands are executed immediately", "source": "mcs500_programming_manual", "chunk_index": 4358, "length": 47, "hash": "d82fe7144d35daebab3cb187228305be"}
{"id": "mcs500_programming_manual_4359", "text": ", i.e., are\ninstantaneous. Therefore, if you send a", "source": "mcs500_programming_manual", "chunk_index": 4359, "length": 51, "hash": "a6ced4a7bc935935a6345c4dd59b0beb"}
{"id": "mcs500_programming_manual_4360", "text": "(page 166) command, then a", "source": "mcs500_programming_manual", "chunk_index": 4360, "length": 26, "hash": "aa842bd236cf6ddf27796334fe4fae6c"}
{"id": "mcs500_programming_manual_4361", "text": "(page 138) command, then another", "source": "mcs500_programming_manual", "chunk_index": 4361, "length": 32, "hash": "6a78914b8dae464ab5374175109078a3"}
{"id": "mcs500_programming_manual_4362", "text": "(page 166) command, and immediately after that\na", "source": "mcs500_programming_manual", "chunk_index": 4362, "length": 48, "hash": "576147bf3008e6a9828f77a7e0d4a668"}
{"id": "mcs500_programming_manual_4363", "text": "(page 251) command, you will get the arguments of the first", "source": "mcs500_programming_manual", "chunk_index": 4363, "length": 59, "hash": "a63106674e671c35f0bf994dbc2fb09e"}
{"id": "mcs500_programming_manual_4364", "text": "The following is the alphabetically ordered list of data request commands that have a\ncorresponding Set* command:", "source": "mcs500_programming_manual", "chunk_index": 4364, "length": 113, "hash": "979a9c874c24dccf3aa18d67d73b7aea"}
{"id": "mcs500_programming_manual_4365", "text": "The following is the alphabetically ordered list of data request commands that have a\ncorresponding Set* command:", "source": "mcs500_programming_manual", "chunk_index": 4365, "length": 113, "hash": "979a9c874c24dccf3aa18d67d73b7aea"}
{"id": "mcs500_programming_manual_4366", "text": "\u2022 GetAutoConf (page 213)", "source": "mcs500_programming_manual", "chunk_index": 4366, "length": 24, "hash": "870263f33b80613704e8dbaf2af71ccc"}
{"id": "mcs500_programming_manual_4367", "text": "\u2022 GetAutoConfTurn (page 214)", "source": "mcs500_programming_manual", "chunk_index": 4367, "length": 28, "hash": "afa7bba87ba57ee800390c254e07c1cc"}
{"id": "mcs500_programming_manual_4368", "text": "\u2022 GetBlending (page 215)", "source": "mcs500_programming_manual", "chunk_index": 4368, "length": 24, "hash": "8ebb06b0242d815f50fc17b9f5258f4f"}
{"id": "mcs500_programming_manual_4369", "text": "\u2022 GetCalibrationCfg (page 216)", "source": "mcs500_programming_manual", "chunk_index": 4369, "length": 30, "hash": "aa1d59e0ca84c44c830a03bdf7c0dcad"}
{"id": "mcs500_programming_manual_4370", "text": "\u2022 GetCartAcc (page 217)", "source": "mcs500_programming_manual", "chunk_index": 4370, "length": 23, "hash": "e1685f6df7dc3e81c1a995264e0e98d0"}
{"id": "mcs500_programming_manual_4371", "text": "\u2022 GetCartAngVel (page 218)", "source": "mcs500_programming_manual", "chunk_index": 4371, "length": 26, "hash": "d84fd0bd1896fcab5ce77646ad5b0656"}
{"id": "mcs500_programming_manual_4372", "text": "\u2022 GetCartLinVel (page 219)", "source": "mcs500_programming_manual", "chunk_index": 4372, "length": 26, "hash": "deaa0ca9cdd95862b852ca582526f5ca"}
{"id": "mcs500_programming_manual_4373", "text": "\u2022 GetCheckpoint (page 220)", "source": "mcs500_programming_manual", "chunk_index": 4373, "length": 26, "hash": "a7a8c6c80204bfb447d1386e9c06ce2b"}
{"id": "mcs500_programming_manual_4374", "text": "\u2022 GetCheckpointDiscarded (page 221)", "source": "mcs500_programming_manual", "chunk_index": 4374, "length": 35, "hash": "6bd4d8ed678901c8747860cfbb3a8119"}
{"id": "mcs500_programming_manual_4375", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 4375, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_4376", "text": "\u2022 GetConf (page 222)", "source": "mcs500_programming_manual", "chunk_index": 4376, "length": 20, "hash": "5c61c13f0ef5da586230e3ebc4812d6e"}
{"id": "mcs500_programming_manual_4377", "text": "\u2022 GetConfTurn (page 223)", "source": "mcs500_programming_manual", "chunk_index": 4377, "length": 24, "hash": "a006281085036cbea1fcf0a44835ce4f"}
{"id": "mcs500_programming_manual_4378", "text": "\u2022 GetEthernetIpEnabled (page 224)", "source": "mcs500_programming_manual", "chunk_index": 4378, "length": 33, "hash": "36971210594f24562b58597ffb3e87fc"}
{"id": "mcs500_programming_manual_4379", "text": "GetEthernetIpEnabled", "source": "mcs500_programming_manual", "chunk_index": 4379, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "mcs500_programming_manual_4380", "text": "\u2022 GetJointAcc (page 226)", "source": "mcs500_programming_manual", "chunk_index": 4380, "length": 24, "hash": "88b70b64ab3aaf3b2444f6cb277234b4"}
{"id": "mcs500_programming_manual_4381", "text": "\u2022 GetJointLimits (page 227)", "source": "mcs500_programming_manual", "chunk_index": 4381, "length": 27, "hash": "bbd8d6974433037ee507b6d4012e3291"}
{"id": "mcs500_programming_manual_4382", "text": "\u2022 GetJointLimitsCfg (page 228)", "source": "mcs500_programming_manual", "chunk_index": 4382, "length": 30, "hash": "c9611167b58387e60a94568971237914"}
{"id": "mcs500_programming_manual_4383", "text": "\u2022 GetJointVel (page 229)", "source": "mcs500_programming_manual", "chunk_index": 4383, "length": 24, "hash": "d5a677f10768aeea374a34ed87a4fb0b"}
{"id": "mcs500_programming_manual_4384", "text": "\u2022 GetJointVelLimit (page 230)", "source": "mcs500_programming_manual", "chunk_index": 4384, "length": 29, "hash": "83cb1608db481d2707d991375b597cb0"}
{"id": "mcs500_programming_manual_4385", "text": "\u2022 GetMonitoringInterval (page 232)", "source": "mcs500_programming_manual", "chunk_index": 4385, "length": 34, "hash": "2af4a9e9084d062e356b438d676f3fb1"}
{"id": "mcs500_programming_manual_4386", "text": "GetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4386, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "mcs500_programming_manual_4387", "text": "\u2022 GetMoveDuration (page 233)", "source": "mcs500_programming_manual", "chunk_index": 4387, "length": 28, "hash": "acbb6a6bd8e36ef2935ffb0f432aa365"}
{"id": "mcs500_programming_manual_4388", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4388, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4389", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4389, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4390", "text": "\u2022 GetMoveDurationCfg (page 234)", "source": "mcs500_programming_manual", "chunk_index": 4390, "length": 31, "hash": "6c63a834ea6c88212ca4aac12436bed3"}
{"id": "mcs500_programming_manual_4391", "text": "\u2022 GetMoveJumpApproachVel (page 235)", "source": "mcs500_programming_manual", "chunk_index": 4391, "length": 35, "hash": "bd62c777c864e014d73ea9914eac6d62"}
{"id": "mcs500_programming_manual_4392", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4392, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_4393", "text": "\u2022 GetMoveJumpHeight (page 236)", "source": "mcs500_programming_manual", "chunk_index": 4393, "length": 30, "hash": "15505e6c8bd06a5794f09c08d7b1426a"}
{"id": "mcs500_programming_manual_4394", "text": "\u2022 GetMoveMode (page 237)", "source": "mcs500_programming_manual", "chunk_index": 4394, "length": 24, "hash": "e28f6475a3769b8bef4eacefb8195e47"}
{"id": "mcs500_programming_manual_4395", "text": "\u2022 GetNetworkOptions (page 238)", "source": "mcs500_programming_manual", "chunk_index": 4395, "length": 30, "hash": "494920954f67a5c666edc36c611413a3"}
{"id": "mcs500_programming_manual_4396", "text": "\u2022 GetPayload (page 240)", "source": "mcs500_programming_manual", "chunk_index": 4396, "length": 23, "hash": "78bf868d5c9a1bcfeabd74c3134c6d99"}
{"id": "mcs500_programming_manual_4397", "text": "\u2022 GetProfinetEnabled (page 242)", "source": "mcs500_programming_manual", "chunk_index": 4397, "length": 31, "hash": "14f75852439de299fdc26d8aa5432f3f"}
{"id": "mcs500_programming_manual_4398", "text": "\u2022 GetPStop2Cfg (page 239)", "source": "mcs500_programming_manual", "chunk_index": 4398, "length": 25, "hash": "2b967cfad98a1af7ee8d67c3b85b6de7"}
{"id": "mcs500_programming_manual_4399", "text": "\u2022 GetRealTimeMonitoring (page 243)", "source": "mcs500_programming_manual", "chunk_index": 4399, "length": 34, "hash": "7437edf549397e44c37d5e889f61e7c3"}
{"id": "mcs500_programming_manual_4400", "text": "GetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4400, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "mcs500_programming_manual_4401", "text": "\u2022 GetRobotName (page 245)", "source": "mcs500_programming_manual", "chunk_index": 4401, "length": 25, "hash": "fd4e647ee4bd7ec9931628aad0eff029"}
{"id": "mcs500_programming_manual_4402", "text": "\u2022 GetSimModeCfg (page 247)", "source": "mcs500_programming_manual", "chunk_index": 4402, "length": 26, "hash": "b080db44424668be0df702fa2cd02c8c"}
{"id": "mcs500_programming_manual_4403", "text": "\u2022 GetTimeScaling (page 248)", "source": "mcs500_programming_manual", "chunk_index": 4403, "length": 27, "hash": "836a42643c144144e18a879872f10547"}
{"id": "mcs500_programming_manual_4404", "text": "\u2022 GetTorqueLimits (page 249)", "source": "mcs500_programming_manual", "chunk_index": 4404, "length": 28, "hash": "0e6238c231d4a2c171da3dca5feae14d"}
{"id": "mcs500_programming_manual_4405", "text": "\u2022 GetTorqueLimitsCfg (page 250)", "source": "mcs500_programming_manual", "chunk_index": 4405, "length": 31, "hash": "5ce48a1b1ae329ac7696ea29089e4c17"}
{"id": "mcs500_programming_manual_4406", "text": "\u2022 GetVelTimeout (page 252)", "source": "mcs500_programming_manual", "chunk_index": 4406, "length": 26, "hash": "3e67e1b5ce0ea5a9c22fb1422433577b"}
{"id": "mcs500_programming_manual_4407", "text": "The following is the list of data request commands that return read-only data, which cannot\nbe modified by the user:", "source": "mcs500_programming_manual", "chunk_index": 4407, "length": 116, "hash": "19edd00a78ac874bf2f8b8ba0fdf7745"}
{"id": "mcs500_programming_manual_4408", "text": "The following is the list of data request commands that return read-only data, which cannot\nbe modified by the user:", "source": "mcs500_programming_manual", "chunk_index": 4408, "length": 116, "hash": "19edd00a78ac874bf2f8b8ba0fdf7745"}
{"id": "mcs500_programming_manual_4409", "text": "\u2022 GetFwVersion (page 225)", "source": "mcs500_programming_manual", "chunk_index": 4409, "length": 25, "hash": "5265e425e946ed8e489fd9f8f2aa506d"}
{"id": "mcs500_programming_manual_4410", "text": "\u2022 GetModelJointLimits (page 231)", "source": "mcs500_programming_manual", "chunk_index": 4410, "length": 32, "hash": "0c5e8b6d8f4b1ba6eec55b004276ca4f"}
{"id": "mcs500_programming_manual_4411", "text": "\u2022 GetProductType (page 241)", "source": "mcs500_programming_manual", "chunk_index": 4411, "length": 27, "hash": "8303a169c0badd41da78bf14f927406a"}
{"id": "mcs500_programming_manual_4412", "text": "\u2022 GetRobotCalibrated (page 244)", "source": "mcs500_programming_manual", "chunk_index": 4412, "length": 31, "hash": "1de503f0a5d73a4ee1ef78dee67156a7"}
{"id": "mcs500_programming_manual_4413", "text": "\u2022 GetRobotSerial (page 246)", "source": "mcs500_programming_manual", "chunk_index": 4413, "length": 27, "hash": "bd6f8e6d00ceadc92a459feb9f672c7c"}
{"id": "mcs500_programming_manual_4414", "text": "A few other data request commands exist, but these are presented in the sections Work zone\nsupervision and collision prevention commands (page 279) (e.g., GetToolSphere (page 283)),\nCommands for optional accessories (page 291) and Commands for managing variables (beta)\n(page 328) (e.g., GetVariable (page 336)).", "source": "mcs500_programming_manual", "chunk_index": 4414, "length": 312, "hash": "736c7b6da37f69e623189729e20ff1c9"}
{"id": "mcs500_programming_manual_4415", "text": "A few other data request commands exist, but these are presented in the sections", "source": "mcs500_programming_manual", "chunk_index": 4415, "length": 80, "hash": "4632273ccf8c1f667187ec59bb60a0c6"}
{"id": "mcs500_programming_manual_4416", "text": "Work zone\nsupervision and collision prevention commands", "source": "mcs500_programming_manual", "chunk_index": 4416, "length": 55, "hash": "b3ba8bdb789b913b28832c19d8427960"}
{"id": "mcs500_programming_manual_4417", "text": "Commands for optional accessories", "source": "mcs500_programming_manual", "chunk_index": 4417, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "mcs500_programming_manual_4418", "text": "Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 4418, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "mcs500_programming_manual_4419", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4419, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4420", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4420, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4421", "text": "This command returns the state of the automatic posture configuration selection, which can\nbe influenced by the SetAutoConf (page 139) and SetConf (page 147) commands.", "source": "mcs500_programming_manual", "chunk_index": 4421, "length": 167, "hash": "28a2546ce2d9a8f19121305604d617cf"}
{"id": "mcs500_programming_manual_4422", "text": "This command returns the state of the automatic posture configuration selection, which can\nbe influenced by the", "source": "mcs500_programming_manual", "chunk_index": 4422, "length": 111, "hash": "d9501e37ec563119f51ddcf3a0b3d006"}
{"id": "mcs500_programming_manual_4423", "text": "(page 147) commands.", "source": "mcs500_programming_manual", "chunk_index": 4423, "length": 20, "hash": "f65955e38680f82939da07062d2f5639"}
{"id": "mcs500_programming_manual_4424", "text": "\u2013 e: enabled (1) or disabled (0).", "source": "mcs500_programming_manual", "chunk_index": 4424, "length": 33, "hash": "a3589c4843f251036d9b5eddc7cb7d3e"}
{"id": "mcs500_programming_manual_4425", "text": "e: enabled (1) or disabled (0).", "source": "mcs500_programming_manual", "chunk_index": 4425, "length": 31, "hash": "43ac149c8b7a4599bc8acd37b12507d9"}
{"id": "mcs500_programming_manual_4426", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4426, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4427", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4427, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4428", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4428, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4429", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4429, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4430", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4430, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4431", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4431, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4432", "text": "In cyclic protocols,\nthe command GetAutoConf\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4432, "length": 98, "hash": "0a01f9ef0ba22d1d99ad78cbce96facc"}
{"id": "mcs500_programming_manual_4433", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 4433, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_4434", "text": "20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4434, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "mcs500_programming_manual_4435", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4435, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4436", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4436, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4437", "text": "This command returns the state of the automatic turn configuration selection, which can be\ninfluenced by the SetAutoConfTurn (page 140) and SetConfTurn (page 148) commands.", "source": "mcs500_programming_manual", "chunk_index": 4437, "length": 172, "hash": "527b4d2965d3d65715f49727817c600b"}
{"id": "mcs500_programming_manual_4438", "text": "This command returns the state of the automatic turn configuration selection, which can be\ninfluenced by the", "source": "mcs500_programming_manual", "chunk_index": 4438, "length": 108, "hash": "61bd07701ad9c0303237be7f3b6cecb9"}
{"id": "mcs500_programming_manual_4439", "text": "(page 148) commands.", "source": "mcs500_programming_manual", "chunk_index": 4439, "length": 20, "hash": "2b7ad0a688ab3a81dd139a1c323ad638"}
{"id": "mcs500_programming_manual_4440", "text": "\u2013 e: enabled (1) or disabled (0).", "source": "mcs500_programming_manual", "chunk_index": 4440, "length": 33, "hash": "a3589c4843f251036d9b5eddc7cb7d3e"}
{"id": "mcs500_programming_manual_4441", "text": "e: enabled (1) or disabled (0).", "source": "mcs500_programming_manual", "chunk_index": 4441, "length": 31, "hash": "43ac149c8b7a4599bc8acd37b12507d9"}
{"id": "mcs500_programming_manual_4442", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4442, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4443", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4443, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4444", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4444, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4445", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4445, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4446", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4446, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4447", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4447, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4448", "text": "In cyclic protocols,\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4448, "length": 74, "hash": "8005dff934f9e599f124ac3ba9b27a77"}
{"id": "mcs500_programming_manual_4449", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4449, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4450", "text": "20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4450, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "mcs500_programming_manual_4451", "text": "the command GetAutoConfTurn (page 214)", "source": "mcs500_programming_manual", "chunk_index": 4451, "length": 38, "hash": "069be7d183e4546f52a6e59df11a3b3c"}
{"id": "mcs500_programming_manual_4452", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4452, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4453", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4453, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4454", "text": "This command returns the blending percentage, which is set using the SetBlending (page 141)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 4454, "length": 100, "hash": "9717a72231070d4e797c444991724412"}
{"id": "mcs500_programming_manual_4455", "text": "This command returns the blending percentage, which is set using the", "source": "mcs500_programming_manual", "chunk_index": 4455, "length": 68, "hash": "3770c4e52119421a548314b949063437"}
{"id": "mcs500_programming_manual_4456", "text": "\u2013 p: blending percentage, ranging from 0 (blending disabled) to 100.", "source": "mcs500_programming_manual", "chunk_index": 4456, "length": 68, "hash": "44b6cd0477a5dd6e88e0e65790482bd7"}
{"id": "mcs500_programming_manual_4457", "text": "p: blending percentage, ranging from 0 (blending disabled) to 100.", "source": "mcs500_programming_manual", "chunk_index": 4457, "length": 66, "hash": "e4a65f6ed4f89d0fd06e79efcf69c29c"}
{"id": "mcs500_programming_manual_4458", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4458, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4459", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4459, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4460", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4460, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4461", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4461, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4462", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4462, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4463", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4463, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4464", "text": "In cyclic protocols,\nDynamicDataTypeID 21. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4464, "length": 74, "hash": "cbd5234dd31fd04263e59a79c041df82"}
{"id": "mcs500_programming_manual_4465", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4465, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4466", "text": "21. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4466, "length": 35, "hash": "a6e248301b89dc2689c1fdbbbab9b1f5"}
{"id": "mcs500_programming_manual_4467", "text": "the command GetBlending (page 215)", "source": "mcs500_programming_manual", "chunk_index": 4467, "length": 34, "hash": "6ebad95dbc616055a7e1c3bb432db108"}
{"id": "mcs500_programming_manual_4468", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4468, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4469", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4469, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4470", "text": "This command returns the state of the optional robot calibration, configured using the\nSetCalibrationCfg (page 186) command.", "source": "mcs500_programming_manual", "chunk_index": 4470, "length": 124, "hash": "143f37b1f51197d826ac9f6b230678a4"}
{"id": "mcs500_programming_manual_4471", "text": "This command returns the state of the optional robot calibration, configured using the", "source": "mcs500_programming_manual", "chunk_index": 4471, "length": 86, "hash": "f0d8e487b4d9e79eb4c900f6c3180838"}
{"id": "mcs500_programming_manual_4472", "text": "\u2013 e: enabled (1) or disabled (0).", "source": "mcs500_programming_manual", "chunk_index": 4472, "length": 33, "hash": "a3589c4843f251036d9b5eddc7cb7d3e"}
{"id": "mcs500_programming_manual_4473", "text": "e: enabled (1) or disabled (0).", "source": "mcs500_programming_manual", "chunk_index": 4473, "length": 31, "hash": "43ac149c8b7a4599bc8acd37b12507d9"}
{"id": "mcs500_programming_manual_4474", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4474, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4475", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4475, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4476", "text": "In cyclic protocols,\nDynamicDataTypeID 30. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4476, "length": 74, "hash": "8ec271a9ec77999ad8c6d9b52efc27a6"}
{"id": "mcs500_programming_manual_4477", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4477, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4478", "text": "30. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4478, "length": 35, "hash": "bb51f1b1cf33b5dda6f3df30dd5db2cc"}
{"id": "mcs500_programming_manual_4479", "text": "the command GetCalibrationCfg (page 216)", "source": "mcs500_programming_manual", "chunk_index": 4479, "length": 40, "hash": "580102202c45c6e9674d1ede8ede404c"}
{"id": "mcs500_programming_manual_4480", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4480, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4481", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4481, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4482", "text": "This command returns the desired limit for the acceleration of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the SetCartAcc (page 142)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 4482, "length": 183, "hash": "5cddd9b3680f1d71ceb5a06298a0cc0e"}
{"id": "mcs500_programming_manual_4483", "text": "This command returns the desired limit for the acceleration of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the", "source": "mcs500_programming_manual", "chunk_index": 4483, "length": 152, "hash": "d48f869473fca5cbae91cb271c1db585"}
{"id": "mcs500_programming_manual_4484", "text": "\u2013 p: percentage of the maximum acceleration of the TRF.", "source": "mcs500_programming_manual", "chunk_index": 4484, "length": 55, "hash": "df43e92f064dd968da67ef4f9d029d88"}
{"id": "mcs500_programming_manual_4485", "text": "p: percentage of the maximum acceleration of the TRF.", "source": "mcs500_programming_manual", "chunk_index": 4485, "length": 53, "hash": "d059aab81c1b12ab67ba538e531d1a99"}
{"id": "mcs500_programming_manual_4486", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4486, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4487", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4487, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4488", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4488, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4489", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4489, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4490", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4490, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4491", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4491, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4492", "text": "In cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4492, "length": 74, "hash": "26cebf05b0bd99d00f56801caade62d6"}
{"id": "mcs500_programming_manual_4493", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4493, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4494", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4494, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_4495", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4495, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4496", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4496, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4497", "text": "This command returns the desired limit for the angular velocity of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the SetCartAngVel (page 143)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 4497, "length": 190, "hash": "3ff19d2fa9d5941c01efd972d2b3a4ce"}
{"id": "mcs500_programming_manual_4498", "text": "This command returns the desired limit for the angular velocity of the Tool Reference Frame\n(TRF) relative to the World Reference Frame (WRF), set using the", "source": "mcs500_programming_manual", "chunk_index": 4498, "length": 156, "hash": "d1bc817870fcfd4a1944f7515ec8c9d6"}
{"id": "mcs500_programming_manual_4499", "text": "\u2013 \u03c9: TRF angular velocity limit, in degrees per second (\u00b0/s).", "source": "mcs500_programming_manual", "chunk_index": 4499, "length": 61, "hash": "124ac9c234561f319d0b2db451a27a74"}
{"id": "mcs500_programming_manual_4500", "text": "\u03c9: TRF angular velocity limit, in degrees per second (\u00b0/s).", "source": "mcs500_programming_manual", "chunk_index": 4500, "length": 59, "hash": "61a15cd39f5fbf6e4df0f143a628bb83"}
{"id": "mcs500_programming_manual_4501", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4501, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4502", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4502, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4503", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4503, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4504", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4504, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4505", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4505, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4506", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4506, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4507", "text": "In cyclic protocols,\nthe command GetCartAngVel\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4507, "length": 100, "hash": "3aaac515a30db983b7a8ec2a7f0a6eba"}
{"id": "mcs500_programming_manual_4508", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 4508, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_4509", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4509, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_4510", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4510, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4511", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4511, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4512", "text": "This command returns the desired Tool Center Point (TCP) velocity limit, configured using\nthe SetCartLinVel (page 144) command.", "source": "mcs500_programming_manual", "chunk_index": 4512, "length": 127, "hash": "b19637a3a6badc53726ee7e17f72cd35"}
{"id": "mcs500_programming_manual_4513", "text": "This command returns the desired Tool Center Point (TCP) velocity limit, configured using\nthe", "source": "mcs500_programming_manual", "chunk_index": 4513, "length": 93, "hash": "9a13acc9a6ed36c00c8b9d143469fedb"}
{"id": "mcs500_programming_manual_4514", "text": "\u2013 v: TCP velocity limit, in millimeters per second (mm/s).", "source": "mcs500_programming_manual", "chunk_index": 4514, "length": 58, "hash": "7202e4153d49064fd4a35b59b0ac8c4f"}
{"id": "mcs500_programming_manual_4515", "text": "v: TCP velocity limit, in millimeters per second (mm/s).", "source": "mcs500_programming_manual", "chunk_index": 4515, "length": 56, "hash": "a87807222890a25cb41b103714688f83"}
{"id": "mcs500_programming_manual_4516", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4516, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4517", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4517, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4518", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4518, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4519", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4519, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4520", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4520, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4521", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4521, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4522", "text": "In cyclic protocols,\nthe command GetCartLinVel\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4522, "length": 100, "hash": "5d45cb14c04fb4840cd5e237880d10ac"}
{"id": "mcs500_programming_manual_4523", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 4523, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_4524", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4524, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_4525", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4525, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4526", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4526, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4527", "text": "This command returns the argument of the last executed SetCheckpoint (page 145).", "source": "mcs500_programming_manual", "chunk_index": 4527, "length": 80, "hash": "a558ff4b768f30ca7fc282303d4fb896"}
{"id": "mcs500_programming_manual_4528", "text": "This command returns the argument of the last executed", "source": "mcs500_programming_manual", "chunk_index": 4528, "length": 54, "hash": "4f974e7cad0b23e2b14612de875069ad"}
{"id": "mcs500_programming_manual_4529", "text": "\u2013 n: checkpoint number.", "source": "mcs500_programming_manual", "chunk_index": 4529, "length": 23, "hash": "e5714d2046c58fd7b2e8e89f31fec0da"}
{"id": "mcs500_programming_manual_4530", "text": "n: checkpoint number.", "source": "mcs500_programming_manual", "chunk_index": 4530, "length": 21, "hash": "15813822cc6f0507efd07e1d427328fd"}
{"id": "mcs500_programming_manual_4531", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4531, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4532", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4532, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4533", "text": "In cyclic protocols,\nCheckpointReached field of the MotionStatus section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 4533, "length": 89, "hash": "8e4ada89225ddd17caffff4dcabcc1dc"}
{"id": "mcs500_programming_manual_4534", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4534, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4535", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 4535, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_4536", "text": "the command GetCheckpoint (page 220)", "source": "mcs500_programming_manual", "chunk_index": 4536, "length": 36, "hash": "5b13668e5b28fbb95e10e398a14d356d"}
{"id": "mcs500_programming_manual_4537", "text": "is represented by the", "source": "mcs500_programming_manual", "chunk_index": 4537, "length": 21, "hash": "4d61eff82bb5a750bdda2fdbfb20aa2e"}
{"id": "mcs500_programming_manual_4538", "text": "is represented by the", "source": "mcs500_programming_manual", "chunk_index": 4538, "length": 21, "hash": "4d61eff82bb5a750bdda2fdbfb20aa2e"}
{"id": "mcs500_programming_manual_4539", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4539, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4540", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4540, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4541", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 4541, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_4542", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 4542, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_4543", "text": "Returns the id of the most recently discarded checkpoint (as posted with SetCheckpoint\n(page 145)).", "source": "mcs500_programming_manual", "chunk_index": 4543, "length": 99, "hash": "5d0382be409f5c723955a6cdb91346f9"}
{"id": "mcs500_programming_manual_4544", "text": "Returns the id of the most recently discarded checkpoint (as posted with", "source": "mcs500_programming_manual", "chunk_index": 4544, "length": 72, "hash": "e191c479b826aee80da270841c05624f"}
{"id": "mcs500_programming_manual_4545", "text": "Checkpoint can be discarded by ClearMotion (page 173), DeactivateRobot (page 175), by\nrobot entering error state or safety stop state.", "source": "mcs500_programming_manual", "chunk_index": 4545, "length": 134, "hash": "0c403d38acbedf23078b89cba0ae7777"}
{"id": "mcs500_programming_manual_4546", "text": "Checkpoint can be discarded by", "source": "mcs500_programming_manual", "chunk_index": 4546, "length": 30, "hash": "83758b7c94d0abc29524752eb1d5e58f"}
{"id": "mcs500_programming_manual_4547", "text": "(page 175), by\nrobot entering error state or safety stop state.", "source": "mcs500_programming_manual", "chunk_index": 4547, "length": 63, "hash": "0417ff757b4f48e61e42782d8274b074"}
{"id": "mcs500_programming_manual_4548", "text": "GetCheckpointDiscarded()", "source": "mcs500_programming_manual", "chunk_index": 4548, "length": 24, "hash": "9cf8667e98cca8e1ad1a48d131455bcb"}
{"id": "mcs500_programming_manual_4549", "text": "GetCheckpointDiscarded()", "source": "mcs500_programming_manual", "chunk_index": 4549, "length": 24, "hash": "9cf8667e98cca8e1ad1a48d131455bcb"}
{"id": "mcs500_programming_manual_4550", "text": "\u2013 n: most recently discarded checkpoint number.", "source": "mcs500_programming_manual", "chunk_index": 4550, "length": 47, "hash": "dde32cd712b71e4e1d297b0c2c843a47"}
{"id": "mcs500_programming_manual_4551", "text": "n: most recently discarded checkpoint number.", "source": "mcs500_programming_manual", "chunk_index": 4551, "length": 45, "hash": "966487fe52121bfbe826f5aa3ab5ca13"}
{"id": "mcs500_programming_manual_4552", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4552, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4553", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4553, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4554", "text": "In cyclic protocols, the command GetCheckpointDiscarded (page 221) is represented by the\nCheckpointDiscarded field of the MotionStatus section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 4554, "length": 159, "hash": "1e6c07cd90638859eae9ca1f90bcb1e7"}
{"id": "mcs500_programming_manual_4555", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 4555, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_4556", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 4556, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_4557", "text": "(page 221) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 4557, "length": 32, "hash": "77441cb04c014ae82d8d7601d898e5e6"}
{"id": "mcs500_programming_manual_4558", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 4558, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_4559", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 4559, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_4560", "text": "GetCheckpointDiscarded", "source": "mcs500_programming_manual", "chunk_index": 4560, "length": 22, "hash": "15f1ee7959413f1e37a67f92e990abde"}
{"id": "mcs500_programming_manual_4561", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4561, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4562", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4562, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4563", "text": "This command returns the desired posture configuration (see Section 3), or more precisely,\nthe posture configuration that will be applied to the next MovePose (page 138) or MoveLin*\ncommand in the motion queue. This configuration is either explicitly specified using the\nSetConf (page 147) command or automatically assigned when the SetAutoConf(0) (page 139)\ncommand is executed.", "source": "mcs500_programming_manual", "chunk_index": 4563, "length": 379, "hash": "a15090a0dff054b64b0315a0b872cb5f"}
{"id": "mcs500_programming_manual_4564", "text": "This command returns the desired posture configuration (see Section 3), or more precisely,\nthe posture configuration that will be applied to the next", "source": "mcs500_programming_manual", "chunk_index": 4564, "length": 149, "hash": "2e27754b58b56bf6346504988d830382"}
{"id": "mcs500_programming_manual_4565", "text": "(page 138) or MoveLin*\ncommand in the motion queue. This configuration is either explicitly specified using the", "source": "mcs500_programming_manual", "chunk_index": 4565, "length": 111, "hash": "672c94d3e5f8c7f90efff4a14bb797c2"}
{"id": "mcs500_programming_manual_4566", "text": "(page 147) command or automatically assigned when the", "source": "mcs500_programming_manual", "chunk_index": 4566, "length": 53, "hash": "4b19dcb269eb8c0dcdb18baa310544d5"}
{"id": "mcs500_programming_manual_4567", "text": "(page 139)\ncommand is executed.", "source": "mcs500_programming_manual", "chunk_index": 4567, "length": 31, "hash": "3acf41c13ed5cd85ff0e0c07b8d9a3a8"}
{"id": "mcs500_programming_manual_4568", "text": "\u2013 ce: elbow configuration parameter, either -1 or 1\u2020.", "source": "mcs500_programming_manual", "chunk_index": 4568, "length": 53, "hash": "60696e9e92b76f1447144d47ecf2fdfb"}
{"id": "mcs500_programming_manual_4569", "text": ": elbow configuration parameter, either -1 or 1", "source": "mcs500_programming_manual", "chunk_index": 4569, "length": 47, "hash": "58acf06ecc715e548e8df8ff9b5669a4"}
{"id": "mcs500_programming_manual_4570", "text": "\u2020 If automatic posture configuration selection is enabled, the value is an asterisk, i.e., the\nresponse is [2029][*].", "source": "mcs500_programming_manual", "chunk_index": 4570, "length": 117, "hash": "152bd13e17a046aef555e8b5be9b789c"}
{"id": "mcs500_programming_manual_4571", "text": "If automatic posture configuration selection is enabled, the value is an asterisk, i.e., the\nresponse is [2029][*].", "source": "mcs500_programming_manual", "chunk_index": 4571, "length": 115, "hash": "2a9bec21e977ebe9fc19d0224491de23"}
{"id": "mcs500_programming_manual_4572", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4572, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4573", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4573, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4574", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4574, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4575", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4575, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4576", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4576, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4577", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4577, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4578", "text": "the\nIn\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4578, "length": 60, "hash": "6595cd7d44857dfd6a0dc49acad814d4"}
{"id": "mcs500_programming_manual_4579", "text": "20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4579, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "mcs500_programming_manual_4580", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4580, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4581", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4581, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4582", "text": "This command returns the desired turn configuration for the last joint (see Section 3), i.e.,\nthe turn configuration that will be applied to the next MovePose (page 138) or MoveLin*\ncommand in the motion queue. This is either the turn configuration explicitly specified\nusing the SetConfTurn (page 148) command or the one automatically assigned when the\nSetAutoConfTurn(0) (page 140) command was executed.", "source": "mcs500_programming_manual", "chunk_index": 4582, "length": 405, "hash": "cf4ee7b8c35574b6b88f003beb2556e6"}
{"id": "mcs500_programming_manual_4583", "text": "This command returns the desired turn configuration for the last joint (see Section 3), i.e.,\nthe turn configuration that will be applied to the next", "source": "mcs500_programming_manual", "chunk_index": 4583, "length": 149, "hash": "b71461b77bd9e90d179ee021b2514a50"}
{"id": "mcs500_programming_manual_4584", "text": "(page 138) or MoveLin*\ncommand in the motion queue. This is either the turn configuration explicitly specified\nusing the", "source": "mcs500_programming_manual", "chunk_index": 4584, "length": 120, "hash": "ac6026044771e75cdb96b9e99ac53213"}
{"id": "mcs500_programming_manual_4585", "text": "(page 148) command or the one automatically assigned when the", "source": "mcs500_programming_manual", "chunk_index": 4585, "length": 61, "hash": "8694e7408621a0c18b003ec7260ebee9"}
{"id": "mcs500_programming_manual_4586", "text": "(page 140) command was executed.", "source": "mcs500_programming_manual", "chunk_index": 4586, "length": 32, "hash": "fbd16592a790f8f703ea26945d8c4ecd"}
{"id": "mcs500_programming_manual_4587", "text": "\u2013 ct: turn configuration parameter, an integer or an asterisk\u2020.", "source": "mcs500_programming_manual", "chunk_index": 4587, "length": 63, "hash": "2b1ee4cbcac38100cd919202f500ff85"}
{"id": "mcs500_programming_manual_4588", "text": ": turn configuration parameter, an integer or an asterisk", "source": "mcs500_programming_manual", "chunk_index": 4588, "length": 57, "hash": "7e9b75ade1f4f705bf71418cea38daf0"}
{"id": "mcs500_programming_manual_4589", "text": "\u2020 If automatic turn configuration selection is enabled, the response is [2036][*].", "source": "mcs500_programming_manual", "chunk_index": 4589, "length": 82, "hash": "bbe1152b00192e31695f593af8ffcad1"}
{"id": "mcs500_programming_manual_4590", "text": "If automatic turn configuration selection is enabled, the response is [2036][*].", "source": "mcs500_programming_manual", "chunk_index": 4590, "length": 80, "hash": "eb0b55e8bb44851b529f89529f3a433f"}
{"id": "mcs500_programming_manual_4591", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4591, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4592", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4592, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4593", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4593, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4594", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4594, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4595", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4595, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4596", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4596, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4597", "text": "In cyclic protocols,\nDynamicDataTypeID 20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4597, "length": 74, "hash": "8005dff934f9e599f124ac3ba9b27a77"}
{"id": "mcs500_programming_manual_4598", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4598, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4599", "text": "20. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4599, "length": 35, "hash": "68a1de8ad2a0d73b5ea895793f7a1f93"}
{"id": "mcs500_programming_manual_4600", "text": "the command GetConfTurn (page 223)", "source": "mcs500_programming_manual", "chunk_index": 4600, "length": 34, "hash": "794f6b105169cc2b52d47b91cdd65fb4"}
{"id": "mcs500_programming_manual_4601", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4601, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4602", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4602, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4603", "text": "GetEthernetIpEnabled", "source": "mcs500_programming_manual", "chunk_index": 4603, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "mcs500_programming_manual_4604", "text": "GetEthernetIpEnabled", "source": "mcs500_programming_manual", "chunk_index": 4604, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "mcs500_programming_manual_4605", "text": "This command returns the state of the Ethernet/IP protocol. See the description of the\nEnableEtherNetIp (page 177) command for more details.", "source": "mcs500_programming_manual", "chunk_index": 4605, "length": 140, "hash": "dbacdb650295d9bdb2464109097baa92"}
{"id": "mcs500_programming_manual_4606", "text": "This command returns the state of the Ethernet/IP protocol. See the description of the", "source": "mcs500_programming_manual", "chunk_index": 4606, "length": 86, "hash": "98b75d1d02c052fc3b7fb6f37c53bef0"}
{"id": "mcs500_programming_manual_4607", "text": "(page 177) command for more details.", "source": "mcs500_programming_manual", "chunk_index": 4607, "length": 36, "hash": "68a776145b4ee25140efa975cad979d5"}
{"id": "mcs500_programming_manual_4608", "text": "GetEthernetIpEnabled()", "source": "mcs500_programming_manual", "chunk_index": 4608, "length": 22, "hash": "ba4528c09afa43da9822a39293133cc6"}
{"id": "mcs500_programming_manual_4609", "text": "GetEthernetIpEnabled()", "source": "mcs500_programming_manual", "chunk_index": 4609, "length": 22, "hash": "ba4528c09afa43da9822a39293133cc6"}
{"id": "mcs500_programming_manual_4610", "text": "\u2013 e: 0, 1 or 2 as defined in the description of the EnableEtherNetIp (page 177)", "source": "mcs500_programming_manual", "chunk_index": 4610, "length": 79, "hash": "609e67cc7bedd9c677dcdb6c67670620"}
{"id": "mcs500_programming_manual_4611", "text": "e: 0, 1 or 2 as defined in the description of the", "source": "mcs500_programming_manual", "chunk_index": 4611, "length": 49, "hash": "3ca07492069a05bda4e9c27b63e9ce17"}
{"id": "mcs500_programming_manual_4612", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4612, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4613", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4613, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4614", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4614, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4615", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4615, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4616", "text": "GetEthernetIpEnabled", "source": "mcs500_programming_manual", "chunk_index": 4616, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "mcs500_programming_manual_4617", "text": "GetEthernetIpEnabled", "source": "mcs500_programming_manual", "chunk_index": 4617, "length": 20, "hash": "caf551a3d857410e3caba633bb8722d6"}
{"id": "mcs500_programming_manual_4618", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4618, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4619", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4619, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4620", "text": "This command returns the version of the firmware installed on the robot.", "source": "mcs500_programming_manual", "chunk_index": 4620, "length": 72, "hash": "d2743cb6288a27303b9b431652468771"}
{"id": "mcs500_programming_manual_4621", "text": "This command returns the version of the firmware installed on the robot.", "source": "mcs500_programming_manual", "chunk_index": 4621, "length": 72, "hash": "d2743cb6288a27303b9b431652468771"}
{"id": "mcs500_programming_manual_4622", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4622, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4623", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4623, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4624", "text": "In cyclic protocols,\nDynamicDataTypeID 1. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4624, "length": 73, "hash": "94d643fbd55718e28b6df7be610656c5"}
{"id": "mcs500_programming_manual_4625", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4625, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4626", "text": "1. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4626, "length": 34, "hash": "f3abb3fa23ae88a3ab4387e676480194"}
{"id": "mcs500_programming_manual_4627", "text": "the command GetFwVersion (page 225)", "source": "mcs500_programming_manual", "chunk_index": 4627, "length": 35, "hash": "8f23f811971de126bd1290d5f62e93d0"}
{"id": "mcs500_programming_manual_4628", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4628, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4629", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4629, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4630", "text": "This command returns the desired joint accelerations reduction factor, set using the\nSetJointAcc (page 150) command.", "source": "mcs500_programming_manual", "chunk_index": 4630, "length": 116, "hash": "b5230d7576deffdb1a20efbb880c42f8"}
{"id": "mcs500_programming_manual_4631", "text": "This command returns the desired joint accelerations reduction factor, set using the", "source": "mcs500_programming_manual", "chunk_index": 4631, "length": 84, "hash": "a250e5421981abb5f4605849b84abc6f"}
{"id": "mcs500_programming_manual_4632", "text": "\u2013 p: percentage of maximum joint accelerations.", "source": "mcs500_programming_manual", "chunk_index": 4632, "length": 47, "hash": "bd11c27efc7712f961cf4b5282b77f3d"}
{"id": "mcs500_programming_manual_4633", "text": "p: percentage of maximum joint accelerations.", "source": "mcs500_programming_manual", "chunk_index": 4633, "length": 45, "hash": "a1fd51078ec8e128e0cb7614f25df809"}
{"id": "mcs500_programming_manual_4634", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4634, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4635", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4635, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4636", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4636, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4637", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4637, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4638", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4638, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4639", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4639, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4640", "text": "In cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4640, "length": 74, "hash": "26cebf05b0bd99d00f56801caade62d6"}
{"id": "mcs500_programming_manual_4641", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4641, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4642", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4642, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_4643", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4643, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4644", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4644, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4645", "text": "This command returns the current effective joint limits, i.e., the default joint limits or the user-\ndefined limits if applied using the SetJointLimits (page 190) command and enabled using the\nSetJointLimitsCfg (page 191) command.", "source": "mcs500_programming_manual", "chunk_index": 4645, "length": 230, "hash": "f669329055761fadf8afbe318e6cb274"}
{"id": "mcs500_programming_manual_4646", "text": "This command returns the current effective joint limits, i.e., the default joint limits or the user-\ndefined limits if applied using the", "source": "mcs500_programming_manual", "chunk_index": 4646, "length": 136, "hash": "306855a1c63da37a185276c379855813"}
{"id": "mcs500_programming_manual_4647", "text": "(page 190) command and enabled using the", "source": "mcs500_programming_manual", "chunk_index": 4647, "length": 40, "hash": "f4d3e5903c2e0cbfb92ba17654d50395"}
{"id": "mcs500_programming_manual_4648", "text": "\u2022 n: joint number, an integer.", "source": "mcs500_programming_manual", "chunk_index": 4648, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "mcs500_programming_manual_4649", "text": "\u2022 n: joint number, an integer.", "source": "mcs500_programming_manual", "chunk_index": 4649, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "mcs500_programming_manual_4650", "text": "\u2022 [2090][n, qn,min, qn,max]", "source": "mcs500_programming_manual", "chunk_index": 4650, "length": 27, "hash": "70b3d256df0eb8ac90dff3609ae060a6"}
{"id": "mcs500_programming_manual_4651", "text": "\u2013 n: joint number, an integer;", "source": "mcs500_programming_manual", "chunk_index": 4651, "length": 30, "hash": "aade7efdc0d3344541b1e24102f3a68a"}
{"id": "mcs500_programming_manual_4652", "text": "n: joint number, an integer;", "source": "mcs500_programming_manual", "chunk_index": 4652, "length": 28, "hash": "8b231fe5e5c0ef299f3d3c0a31cfebe6"}
{"id": "mcs500_programming_manual_4653", "text": "\u2013 qn,min: lower joint limit, in degrees (for joints 1, 2, and 4) or in millimeters (for joint", "source": "mcs500_programming_manual", "chunk_index": 4653, "length": 93, "hash": "3ad9e916a0911e2f981bfaa386df5d19"}
{"id": "mcs500_programming_manual_4654", "text": ": lower joint limit, in degrees (for joints 1, 2, and 4) or in millimeters (for joint", "source": "mcs500_programming_manual", "chunk_index": 4654, "length": 85, "hash": "5bcb4e274a18f481043634868c596e94"}
{"id": "mcs500_programming_manual_4655", "text": "\u2013 qn,max: upper joint limit, in degrees (for joints 1, 2, and 4) or in millimeters (for joint", "source": "mcs500_programming_manual", "chunk_index": 4655, "length": 93, "hash": "f8752013a3336bdb26ca1a99d2e0e522"}
{"id": "mcs500_programming_manual_4656", "text": ": upper joint limit, in degrees (for joints 1, 2, and 4) or in millimeters (for joint", "source": "mcs500_programming_manual", "chunk_index": 4656, "length": 85, "hash": "48bef32627bbf04a168cfe1b924edfc0"}
{"id": "mcs500_programming_manual_4657", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4657, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4658", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4658, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4659", "text": "In cyclic protocols,\nDynamicDataTypeID 14 and 15. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4659, "length": 81, "hash": "0d8a57eeac188c174e8017129d46753a"}
{"id": "mcs500_programming_manual_4660", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4660, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4661", "text": "14 and 15. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4661, "length": 42, "hash": "8809bbd76b33ad5a2edea9bfbd19c074"}
{"id": "mcs500_programming_manual_4662", "text": "the command GetJointLimits", "source": "mcs500_programming_manual", "chunk_index": 4662, "length": 26, "hash": "505a9bdfefa9966ca843c4606596dfeb"}
{"id": "mcs500_programming_manual_4663", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4663, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4664", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4664, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4665", "text": "This command returns the status of\nSetJointLimitsCfg (page 191).", "source": "mcs500_programming_manual", "chunk_index": 4665, "length": 64, "hash": "2fe34f4b8893853e98bb1d2969dbb535"}
{"id": "mcs500_programming_manual_4666", "text": "This command returns the status of", "source": "mcs500_programming_manual", "chunk_index": 4666, "length": 34, "hash": "977df76d47d8676f621fdd15e63341f2"}
{"id": "mcs500_programming_manual_4667", "text": "the user-enabled joint", "source": "mcs500_programming_manual", "chunk_index": 4667, "length": 22, "hash": "0faad244dea5a4e1a8e9f5bd75d9e479"}
{"id": "mcs500_programming_manual_4668", "text": "the user-enabled joint", "source": "mcs500_programming_manual", "chunk_index": 4668, "length": 22, "hash": "0faad244dea5a4e1a8e9f5bd75d9e479"}
{"id": "mcs500_programming_manual_4669", "text": "limits, defined by the", "source": "mcs500_programming_manual", "chunk_index": 4669, "length": 22, "hash": "8b932f0bfe207a74171126cd21bb24ac"}
{"id": "mcs500_programming_manual_4670", "text": "limits, defined by the", "source": "mcs500_programming_manual", "chunk_index": 4670, "length": 22, "hash": "8b932f0bfe207a74171126cd21bb24ac"}
{"id": "mcs500_programming_manual_4671", "text": "\u2013 e: status, 1 for enabled, 0 for disabled.", "source": "mcs500_programming_manual", "chunk_index": 4671, "length": 43, "hash": "1a4013043ece02d59c958267ed063fd6"}
{"id": "mcs500_programming_manual_4672", "text": "e: status, 1 for enabled, 0 for disabled.", "source": "mcs500_programming_manual", "chunk_index": 4672, "length": 41, "hash": "0a052de270604a95b61b66c815537306"}
{"id": "mcs500_programming_manual_4673", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4673, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4674", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4674, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4675", "text": "In cyclic protocols,\nDynamicDataTypeID 11. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4675, "length": 74, "hash": "c098263104b8e6ed43f229b80e9e739d"}
{"id": "mcs500_programming_manual_4676", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4676, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4677", "text": "11. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4677, "length": 35, "hash": "40e9dadfdbbd6f4c3964f3252c4f8ab6"}
{"id": "mcs500_programming_manual_4678", "text": "the command GetJointLimitsCfg (page 228)", "source": "mcs500_programming_manual", "chunk_index": 4678, "length": 40, "hash": "ccfa5646641e7b2dac4e326aea265bf7"}
{"id": "mcs500_programming_manual_4679", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4679, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4680", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4680, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4681", "text": "This command returns the desired joint velocities reduction factor, set using the SetJointVel\n(page 151) command.", "source": "mcs500_programming_manual", "chunk_index": 4681, "length": 113, "hash": "d676daff73e151ef4ec90eb77d0ef987"}
{"id": "mcs500_programming_manual_4682", "text": "This command returns the desired joint velocities reduction factor, set using the", "source": "mcs500_programming_manual", "chunk_index": 4682, "length": 81, "hash": "ea9b8314122c6e23564f91fc61413d16"}
{"id": "mcs500_programming_manual_4683", "text": "\u2013 p: percentage of maximum joint velocities.", "source": "mcs500_programming_manual", "chunk_index": 4683, "length": 44, "hash": "f90079e53e13d6598a4069a274f4dc6b"}
{"id": "mcs500_programming_manual_4684", "text": "p: percentage of maximum joint velocities.", "source": "mcs500_programming_manual", "chunk_index": 4684, "length": 42, "hash": "008c33477293f2987bc5cd1979e1c1c1"}
{"id": "mcs500_programming_manual_4685", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4685, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4686", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4686, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4687", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4687, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4688", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4688, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4689", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4689, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4690", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4690, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4691", "text": "In cyclic protocols,\nthe\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4691, "length": 78, "hash": "e03696785f1fe2b2bc6084cede8deb1e"}
{"id": "mcs500_programming_manual_4692", "text": "In cyclic protocols,\nthe", "source": "mcs500_programming_manual", "chunk_index": 4692, "length": 24, "hash": "f13c492265d82819b373a8ef09f2a621"}
{"id": "mcs500_programming_manual_4693", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4693, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_4694", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4694, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4695", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4695, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4696", "text": "This command returns the desired joint velocities override, set using the SetJointVelLimit\n(page 152) command.", "source": "mcs500_programming_manual", "chunk_index": 4696, "length": 110, "hash": "683c6713b6dd60ea54c5d0da58b8ef94"}
{"id": "mcs500_programming_manual_4697", "text": "This command returns the desired joint velocities override, set using the", "source": "mcs500_programming_manual", "chunk_index": 4697, "length": 73, "hash": "bc3ffb7416dfa2e2ed550ddf23fc65df"}
{"id": "mcs500_programming_manual_4698", "text": "\u2013 p: percentage of maximum joint velocities override.", "source": "mcs500_programming_manual", "chunk_index": 4698, "length": 53, "hash": "bd80db2097087ecae7379d488a8b39ca"}
{"id": "mcs500_programming_manual_4699", "text": "p: percentage of maximum joint velocities override.", "source": "mcs500_programming_manual", "chunk_index": 4699, "length": 51, "hash": "10b0d01390b007d177ddc7a2ab56d4dc"}
{"id": "mcs500_programming_manual_4700", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4700, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4701", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4701, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4702", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4702, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4703", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4703, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4704", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4704, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4705", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4705, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4706", "text": "In cyclic protocols,\nDynamicDataTypeID 22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4706, "length": 74, "hash": "26cebf05b0bd99d00f56801caade62d6"}
{"id": "mcs500_programming_manual_4707", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4707, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4708", "text": "22. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4708, "length": 35, "hash": "c650701ebf18189935bd64659cae1d46"}
{"id": "mcs500_programming_manual_4709", "text": "the command GetJointVelLimit", "source": "mcs500_programming_manual", "chunk_index": 4709, "length": 28, "hash": "cba499318463efa2b0cb90d630e9fb47"}
{"id": "mcs500_programming_manual_4710", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4710, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4711", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4711, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4712", "text": "This command returns the factory default joint limits.", "source": "mcs500_programming_manual", "chunk_index": 4712, "length": 54, "hash": "9f2e4fe9c4ddb50362224570422c3638"}
{"id": "mcs500_programming_manual_4713", "text": "This command returns the factory default joint limits.", "source": "mcs500_programming_manual", "chunk_index": 4713, "length": 54, "hash": "9f2e4fe9c4ddb50362224570422c3638"}
{"id": "mcs500_programming_manual_4714", "text": "GetModelJointLimits(n)", "source": "mcs500_programming_manual", "chunk_index": 4714, "length": 22, "hash": "20fec34843e94796a9eef6e33b10ba8e"}
{"id": "mcs500_programming_manual_4715", "text": "GetModelJointLimits(n)", "source": "mcs500_programming_manual", "chunk_index": 4715, "length": 22, "hash": "20fec34843e94796a9eef6e33b10ba8e"}
{"id": "mcs500_programming_manual_4716", "text": "\u2022 n: joint number, an integer.", "source": "mcs500_programming_manual", "chunk_index": 4716, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "mcs500_programming_manual_4717", "text": "\u2022 n: joint number, an integer.", "source": "mcs500_programming_manual", "chunk_index": 4717, "length": 30, "hash": "8e25a0af833eb8a01e5ef64c0c7b147b"}
{"id": "mcs500_programming_manual_4718", "text": "\u2022 [2113][n, qn,min, qn,max]", "source": "mcs500_programming_manual", "chunk_index": 4718, "length": 27, "hash": "97c3a051c5b7e036d5d28ef7b69d7e7b"}
{"id": "mcs500_programming_manual_4719", "text": "\u2013 n: joint number, an integer number between 1 and 4;", "source": "mcs500_programming_manual", "chunk_index": 4719, "length": 53, "hash": "b90122e64f01a93273b61f4b35dd168c"}
{"id": "mcs500_programming_manual_4720", "text": "n: joint number, an integer number between 1 and 4;", "source": "mcs500_programming_manual", "chunk_index": 4720, "length": 51, "hash": "2b58368ec1a6db0ce316dcc1f9914444"}
{"id": "mcs500_programming_manual_4721", "text": "\u2013 qn,min: lower joint limit, in (for joints 1, 2, and 4) or in mm (for joint 3);", "source": "mcs500_programming_manual", "chunk_index": 4721, "length": 80, "hash": "500c39b1a3755d05ce6d407613bce070"}
{"id": "mcs500_programming_manual_4722", "text": ": lower joint limit, in (for joints 1, 2, and 4) or in mm (for joint 3);", "source": "mcs500_programming_manual", "chunk_index": 4722, "length": 72, "hash": "33a0a1f474a5916f90603cdd1c1edfae"}
{"id": "mcs500_programming_manual_4723", "text": "\u2013 qn,max: upper joint limit, in (for joints 1, 2, and 4) or in mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 4723, "length": 80, "hash": "8c9e0b4ba33cde7927e612456aefd09b"}
{"id": "mcs500_programming_manual_4724", "text": ": upper joint limit, in (for joints 1, 2, and 4) or in mm (for joint 3).", "source": "mcs500_programming_manual", "chunk_index": 4724, "length": 72, "hash": "344bda71a2fd3e0760fa64ac02b76630"}
{"id": "mcs500_programming_manual_4725", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4725, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4726", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4726, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4727", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4727, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4728", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4728, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4729", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4729, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4730", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4730, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4731", "text": "In cyclic protocols,\nDynamicDataTypeID 12 and 13. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4731, "length": 81, "hash": "7654f11e94afbaa6fb90ce9f8c915e21"}
{"id": "mcs500_programming_manual_4732", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4732, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4733", "text": "12 and 13. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4733, "length": 42, "hash": "671bfbf560c1b3d02b2869873716db62"}
{"id": "mcs500_programming_manual_4734", "text": "the command GetModelJointLimits (page 231) is represented by", "source": "mcs500_programming_manual", "chunk_index": 4734, "length": 60, "hash": "a9201894afad52277ed7031903903dbe"}
{"id": "mcs500_programming_manual_4735", "text": "(page 231) is represented by", "source": "mcs500_programming_manual", "chunk_index": 4735, "length": 28, "hash": "6fde0f6b60e16349d23889c01e3895f6"}
{"id": "mcs500_programming_manual_4736", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4736, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4737", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4737, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4738", "text": "GetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4738, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "mcs500_programming_manual_4739", "text": "GetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4739, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "mcs500_programming_manual_4740", "text": "This command returns the time interval at which real-time feedback from the robot is sent\nover TCP port 10001.", "source": "mcs500_programming_manual", "chunk_index": 4740, "length": 110, "hash": "f5072bda032ec32b401115a108e10128"}
{"id": "mcs500_programming_manual_4741", "text": "This command returns the time interval at which real-time feedback from the robot is sent\nover TCP port 10001.", "source": "mcs500_programming_manual", "chunk_index": 4741, "length": 110, "hash": "f5072bda032ec32b401115a108e10128"}
{"id": "mcs500_programming_manual_4742", "text": "GetMonitoringInterval()", "source": "mcs500_programming_manual", "chunk_index": 4742, "length": 23, "hash": "6fa5dd7a819cbd25385fd1e5115f6d75"}
{"id": "mcs500_programming_manual_4743", "text": "GetMonitoringInterval()", "source": "mcs500_programming_manual", "chunk_index": 4743, "length": 23, "hash": "6fa5dd7a819cbd25385fd1e5115f6d75"}
{"id": "mcs500_programming_manual_4744", "text": "\u2013 t: time interval, in seconds.", "source": "mcs500_programming_manual", "chunk_index": 4744, "length": 31, "hash": "e4b069951a4f20b4fd663421eaa6b60e"}
{"id": "mcs500_programming_manual_4745", "text": "t: time interval, in seconds.", "source": "mcs500_programming_manual", "chunk_index": 4745, "length": 29, "hash": "ee67a5f9fee1e2ffe97510c3fe002ec6"}
{"id": "mcs500_programming_manual_4746", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4746, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4747", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4747, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4748", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4748, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4749", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4749, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4750", "text": "GetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4750, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "mcs500_programming_manual_4751", "text": "GetMonitoringInterval", "source": "mcs500_programming_manual", "chunk_index": 4751, "length": 21, "hash": "92de2e1c2c9345d3c382663689cb3a1f"}
{"id": "mcs500_programming_manual_4752", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4752, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4753", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4753, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4754", "text": "This command returns the default duration set by the SetMoveDuration (page 153) command.", "source": "mcs500_programming_manual", "chunk_index": 4754, "length": 88, "hash": "66c9f57f6ee5505d6a1e7ce554609ca9"}
{"id": "mcs500_programming_manual_4755", "text": "This command returns the default duration set by the", "source": "mcs500_programming_manual", "chunk_index": 4755, "length": 52, "hash": "e0bb02309866b0cbb86665a0801b4015"}
{"id": "mcs500_programming_manual_4756", "text": "\u2013 t: duration for time-based moves.", "source": "mcs500_programming_manual", "chunk_index": 4756, "length": 35, "hash": "001aa2e18b5111cff1df98db3116cd3b"}
{"id": "mcs500_programming_manual_4757", "text": "t: duration for time-based moves.", "source": "mcs500_programming_manual", "chunk_index": 4757, "length": 33, "hash": "a98676bf0af599f30029bdce225576af"}
{"id": "mcs500_programming_manual_4758", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4758, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4759", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4759, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4760", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4760, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4761", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4761, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4762", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4762, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4763", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4763, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4764", "text": "In cyclic protocols,\nDynamicDataTypeID 29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4764, "length": 74, "hash": "f55f9912f68fbed29c4cd21bb36da8bc"}
{"id": "mcs500_programming_manual_4765", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4765, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4766", "text": "29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4766, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "mcs500_programming_manual_4767", "text": "the command GetMoveDuration (page 233)", "source": "mcs500_programming_manual", "chunk_index": 4767, "length": 38, "hash": "83a8b6767af6b230d06adb238f7cd15d"}
{"id": "mcs500_programming_manual_4768", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4768, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4769", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4769, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4770", "text": "This command returns the severity of the response when a move command cannot meet the\ndesired duration set by the SetMoveDuration (page 153) command, in time-based move mode.", "source": "mcs500_programming_manual", "chunk_index": 4770, "length": 174, "hash": "02145126298b8cb0a845aa49bed860f0"}
{"id": "mcs500_programming_manual_4771", "text": "This command returns the severity of the response when a move command cannot meet the\ndesired duration set by the", "source": "mcs500_programming_manual", "chunk_index": 4771, "length": 113, "hash": "127782aaa7aad355e48e7b2e7bd71431"}
{"id": "mcs500_programming_manual_4772", "text": "(page 153) command, in time-based move mode.", "source": "mcs500_programming_manual", "chunk_index": 4772, "length": 44, "hash": "a2cff5b5c95d0bf462212937c0fe5598"}
{"id": "mcs500_programming_manual_4773", "text": "GetMoveDurationCfg()", "source": "mcs500_programming_manual", "chunk_index": 4773, "length": 20, "hash": "45565ac8d726002f7349eb8769495a52"}
{"id": "mcs500_programming_manual_4774", "text": "GetMoveDurationCfg()", "source": "mcs500_programming_manual", "chunk_index": 4774, "length": 20, "hash": "45565ac8d726002f7349eb8769495a52"}
{"id": "mcs500_programming_manual_4775", "text": "\u2013 s: 0 for silent mode, 1 for generating a warning message, 4 for generating an error.", "source": "mcs500_programming_manual", "chunk_index": 4775, "length": 86, "hash": "a9da37528b7d35ba93f18119b510828b"}
{"id": "mcs500_programming_manual_4776", "text": "s: 0 for silent mode, 1 for generating a warning message, 4 for generating an error.", "source": "mcs500_programming_manual", "chunk_index": 4776, "length": 84, "hash": "4a507f973ee19cf92df91fc5719c7dd7"}
{"id": "mcs500_programming_manual_4777", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4777, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4778", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4778, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4779", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4779, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4780", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4780, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4781", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4781, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4782", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4782, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4783", "text": "In cyclic protocols,\nDynamicDataTypeID 29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4783, "length": 74, "hash": "f55f9912f68fbed29c4cd21bb36da8bc"}
{"id": "mcs500_programming_manual_4784", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4784, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4785", "text": "29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4785, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "mcs500_programming_manual_4786", "text": "the command GetMoveDurationCfg (page 234) is represented by", "source": "mcs500_programming_manual", "chunk_index": 4786, "length": 59, "hash": "7f70ad5771ca875768929df9b1ac5616"}
{"id": "mcs500_programming_manual_4787", "text": "(page 234) is represented by", "source": "mcs500_programming_manual", "chunk_index": 4787, "length": 28, "hash": "5758f0d7a5f7cb3739f6e5e8288d7b33"}
{"id": "mcs500_programming_manual_4788", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4788, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4789", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4789, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4790", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4790, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_4791", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4791, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_4792", "text": "This command returns the desired initial and final velocity parameters for the MoveJump\n(page 130) command, set using the SetMoveJumpApproachVel (page 156) command.", "source": "mcs500_programming_manual", "chunk_index": 4792, "length": 164, "hash": "78d44e376928911ef196c0f061e8da5b"}
{"id": "mcs500_programming_manual_4793", "text": "This command returns the desired initial and final velocity parameters for the", "source": "mcs500_programming_manual", "chunk_index": 4793, "length": 78, "hash": "980181f942bf9b273792d4e7443e244d"}
{"id": "mcs500_programming_manual_4794", "text": "(page 130) command, set using the", "source": "mcs500_programming_manual", "chunk_index": 4794, "length": 33, "hash": "6c58a2df5e96fae534042ffd245e9974"}
{"id": "mcs500_programming_manual_4795", "text": "SetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4795, "length": 22, "hash": "81a5104865bbcab1893ace3ea02981ba"}
{"id": "mcs500_programming_manual_4796", "text": "GetMoveJumpApproachVel()", "source": "mcs500_programming_manual", "chunk_index": 4796, "length": 24, "hash": "19b572109536a0424e82b21f8b22ff36"}
{"id": "mcs500_programming_manual_4797", "text": "GetMoveJumpApproachVel()", "source": "mcs500_programming_manual", "chunk_index": 4797, "length": 24, "hash": "19b572109536a0424e82b21f8b22ff36"}
{"id": "mcs500_programming_manual_4798", "text": "\u2022 [2175][vstart, pstart, vend, pend]", "source": "mcs500_programming_manual", "chunk_index": 4798, "length": 36, "hash": "fba8313ec54115d10b644a64e05b818a"}
{"id": "mcs500_programming_manual_4799", "text": "\u2013 vstart: maximum allowed vertical speed near the start pose, in mm/s, from 0.001 to", "source": "mcs500_programming_manual", "chunk_index": 4799, "length": 84, "hash": "3d5b9aa8f08079042f72a36879a6371c"}
{"id": "mcs500_programming_manual_4800", "text": ": maximum allowed vertical speed near the start pose, in mm/s, from 0.001 to", "source": "mcs500_programming_manual", "chunk_index": 4800, "length": 76, "hash": "4a5d48d75f5c6e31c30ef7dc57ce5a59"}
{"id": "mcs500_programming_manual_4801", "text": "\u2013 pstart: initial portion of the retreat motion during which vstart is applied, in mm, from", "source": "mcs500_programming_manual", "chunk_index": 4801, "length": 91, "hash": "2cea8522eced4db8de8f86517f1ebcf0"}
{"id": "mcs500_programming_manual_4802", "text": ": initial portion of the retreat motion during which v", "source": "mcs500_programming_manual", "chunk_index": 4802, "length": 54, "hash": "10eb08f06c002d9483d237b778c24579"}
{"id": "mcs500_programming_manual_4803", "text": "is applied, in mm, from", "source": "mcs500_programming_manual", "chunk_index": 4803, "length": 23, "hash": "ad17a4ec7241d2f6058ee520a94b2a6d"}
{"id": "mcs500_programming_manual_4804", "text": "\u2013 vend: maximum allowed vertical speed near the end pose, in mm/s, from 0.001 to", "source": "mcs500_programming_manual", "chunk_index": 4804, "length": 80, "hash": "0e63c1245a2dc380c128237f263651e5"}
{"id": "mcs500_programming_manual_4805", "text": ": maximum allowed vertical speed near the end pose, in mm/s, from 0.001 to", "source": "mcs500_programming_manual", "chunk_index": 4805, "length": 74, "hash": "847b8378b0c6b3d325535313df462632"}
{"id": "mcs500_programming_manual_4806", "text": "\u2013 pend: final portion of the approach motion during which vstart is applied, in mm, from", "source": "mcs500_programming_manual", "chunk_index": 4806, "length": 88, "hash": "306628f300cfa0b9cf27656004e03021"}
{"id": "mcs500_programming_manual_4807", "text": ": final portion of the approach motion during which v", "source": "mcs500_programming_manual", "chunk_index": 4807, "length": 53, "hash": "d1f38ab43f61a9b41c52f5b78d2a407d"}
{"id": "mcs500_programming_manual_4808", "text": "is applied, in mm, from", "source": "mcs500_programming_manual", "chunk_index": 4808, "length": 23, "hash": "ad17a4ec7241d2f6058ee520a94b2a6d"}
{"id": "mcs500_programming_manual_4809", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4809, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4810", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4810, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4811", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4811, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4812", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4812, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4813", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4813, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4814", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4814, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4815", "text": "In cyclic protocols, the commands GetMoveJumpApproachVel (page 235) is represented by\nDynamicDataTypeID 28. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4815, "length": 139, "hash": "3716cb9266331477906e1bff1e724b00"}
{"id": "mcs500_programming_manual_4816", "text": "In cyclic protocols, the commands", "source": "mcs500_programming_manual", "chunk_index": 4816, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "mcs500_programming_manual_4817", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4817, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_4818", "text": "(page 235) is represented by", "source": "mcs500_programming_manual", "chunk_index": 4818, "length": 28, "hash": "770526a81d05e3ed56b20606a1743f91"}
{"id": "mcs500_programming_manual_4819", "text": "28. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4819, "length": 35, "hash": "db6b1e9310fb43fac603ab769969987d"}
{"id": "mcs500_programming_manual_4820", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4820, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_4821", "text": "GetMoveJumpApproachVel", "source": "mcs500_programming_manual", "chunk_index": 4821, "length": 22, "hash": "c1548ab020b72cf3a658d59d18d70f3f"}
{"id": "mcs500_programming_manual_4822", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4822, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4823", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4823, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4824", "text": "This command returns the different height parameters for the MoveJump (page 130)\ncommand, set with the SetMoveJumpHeight (page 157) command.", "source": "mcs500_programming_manual", "chunk_index": 4824, "length": 140, "hash": "09611dbce2a90589411b58a08cf21c2c"}
{"id": "mcs500_programming_manual_4825", "text": "This command returns the different height parameters for the", "source": "mcs500_programming_manual", "chunk_index": 4825, "length": 60, "hash": "c300f8d3883187e2754510e20d36d01f"}
{"id": "mcs500_programming_manual_4826", "text": "(page 130)\ncommand, set with the", "source": "mcs500_programming_manual", "chunk_index": 4826, "length": 32, "hash": "638b7fd2222bc125b24ad3bb0b71c8fa"}
{"id": "mcs500_programming_manual_4827", "text": "\u2022 [2174][hstart, hend, hmin, hmax]", "source": "mcs500_programming_manual", "chunk_index": 4827, "length": 34, "hash": "74a32df133081e01d8b44096481d8f2f"}
{"id": "mcs500_programming_manual_4828", "text": "\u2013 hstart: height from start pose to reach using a pure vertical translation, before the", "source": "mcs500_programming_manual", "chunk_index": 4828, "length": 87, "hash": "2d0700ef82feab0257ddabc9473e7394"}
{"id": "mcs500_programming_manual_4829", "text": ": height from start pose to reach using a pure vertical translation, before the", "source": "mcs500_programming_manual", "chunk_index": 4829, "length": 79, "hash": "81be8040f1d2ebcedf0d986f6c039026"}
{"id": "mcs500_programming_manual_4830", "text": "lateral motion begins, in mm;", "source": "mcs500_programming_manual", "chunk_index": 4830, "length": 29, "hash": "f86538846506082ec971ca7efdf191c1"}
{"id": "mcs500_programming_manual_4831", "text": "lateral motion begins, in mm;", "source": "mcs500_programming_manual", "chunk_index": 4831, "length": 29, "hash": "f86538846506082ec971ca7efdf191c1"}
{"id": "mcs500_programming_manual_4832", "text": "\u2013 hend: height from end pose from where to begin the final pure vertical translation,", "source": "mcs500_programming_manual", "chunk_index": 4832, "length": 85, "hash": "6d3304c1e0c1a187f86d5326e4a869ca"}
{"id": "mcs500_programming_manual_4833", "text": ": height from end pose from where to begin the final pure vertical translation,", "source": "mcs500_programming_manual", "chunk_index": 4833, "length": 79, "hash": "60a0b8ee83d6419b956dc81ea8e36465"}
{"id": "mcs500_programming_manual_4834", "text": "\u2013 hmin: minimum height to reach while performing the lateral motion, with respect to\nthe highest (if hstart and hend are positive) or lowest (if hstart and hend are negative)\nbetween the start and end poses, in mm;", "source": "mcs500_programming_manual", "chunk_index": 4834, "length": 214, "hash": "4456662c727109b0fcfb3d320edb7556"}
{"id": "mcs500_programming_manual_4835", "text": ": minimum height to reach while performing the lateral motion, with respect to\nthe highest (if h", "source": "mcs500_programming_manual", "chunk_index": 4835, "length": 96, "hash": "94d5e3fd33984c910661ad264ed71d1d"}
{"id": "mcs500_programming_manual_4836", "text": "are positive) or lowest (if h", "source": "mcs500_programming_manual", "chunk_index": 4836, "length": 29, "hash": "d8db7fa83cb8cae7bbd4982f0c6e1da7"}
{"id": "mcs500_programming_manual_4837", "text": "are negative)\nbetween the start and end poses, in mm;", "source": "mcs500_programming_manual", "chunk_index": 4837, "length": 53, "hash": "53da963c56005e0aac9e8bdd6f866583"}
{"id": "mcs500_programming_manual_4838", "text": "\u2013 hmax: maximum height allowed to reach while performing the lateral motion, with\nrespect to the highest (if hstart and hend are positive) or lowest (if hstart and hend are\nnegative) between the start and end poses, in mm.", "source": "mcs500_programming_manual", "chunk_index": 4838, "length": 222, "hash": "6f030cbe92a50d6fce5915aa6e90666a"}
{"id": "mcs500_programming_manual_4839", "text": ": maximum height allowed to reach while performing the lateral motion, with\nrespect to the highest (if h", "source": "mcs500_programming_manual", "chunk_index": 4839, "length": 104, "hash": "d025bac341bf2a0e625f20d2fff06b45"}
{"id": "mcs500_programming_manual_4840", "text": "are positive) or lowest (if h", "source": "mcs500_programming_manual", "chunk_index": 4840, "length": 29, "hash": "d8db7fa83cb8cae7bbd4982f0c6e1da7"}
{"id": "mcs500_programming_manual_4841", "text": "are\nnegative) between the start and end poses, in mm.", "source": "mcs500_programming_manual", "chunk_index": 4841, "length": 53, "hash": "104c6db3523805284b9c05288b113f1f"}
{"id": "mcs500_programming_manual_4842", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4842, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4843", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4843, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4844", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4844, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4845", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4845, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4846", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4846, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4847", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4847, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4848", "text": "In cyclic protocols, the commands GetMoveJumpHeight (page 236) is represented by\nDynamicDataTypeID 27. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4848, "length": 134, "hash": "ef88dfed4ee3e87301502d80dd500e54"}
{"id": "mcs500_programming_manual_4849", "text": "In cyclic protocols, the commands", "source": "mcs500_programming_manual", "chunk_index": 4849, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "mcs500_programming_manual_4850", "text": "(page 236) is represented by", "source": "mcs500_programming_manual", "chunk_index": 4850, "length": 28, "hash": "6f49cdd53ed21db006ed11f48dd8086e"}
{"id": "mcs500_programming_manual_4851", "text": "27. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4851, "length": 35, "hash": "412c3128ed19287dd6c35576084e5175"}
{"id": "mcs500_programming_manual_4852", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4852, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4853", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4853, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4854", "text": "This command returns the default move mode set by the SetMoveMode (page 159) command.", "source": "mcs500_programming_manual", "chunk_index": 4854, "length": 85, "hash": "2b6669382fbb5994b9b8f46607a651e0"}
{"id": "mcs500_programming_manual_4855", "text": "This command returns the default move mode set by the", "source": "mcs500_programming_manual", "chunk_index": 4855, "length": 53, "hash": "c68feaa553f5f3f2a8d0e47791b92518"}
{"id": "mcs500_programming_manual_4856", "text": "\u2013 m: 0 for velocity-based and 1 for time-based move mode.", "source": "mcs500_programming_manual", "chunk_index": 4856, "length": 57, "hash": "186a676ae2e75662293dd1d6aecb3ffe"}
{"id": "mcs500_programming_manual_4857", "text": "m: 0 for velocity-based and 1 for time-based move mode.", "source": "mcs500_programming_manual", "chunk_index": 4857, "length": 55, "hash": "eb73bd90bfa8b0073b3724cf4134218d"}
{"id": "mcs500_programming_manual_4858", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4858, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4859", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4859, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4860", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4860, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4861", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4861, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4862", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4862, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4863", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4863, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4864", "text": "In cyclic protocols,\nDynamicDataTypeID 29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4864, "length": 74, "hash": "f55f9912f68fbed29c4cd21bb36da8bc"}
{"id": "mcs500_programming_manual_4865", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4865, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4866", "text": "29. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4866, "length": 35, "hash": "44069741ccf4fbe22ebdbe7fa9171144"}
{"id": "mcs500_programming_manual_4867", "text": "the command GetMoveMode (page 237)", "source": "mcs500_programming_manual", "chunk_index": 4867, "length": 34, "hash": "b23f07487d0ea81bf562aa97630012db"}
{"id": "mcs500_programming_manual_4868", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4868, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4869", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4869, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4870", "text": "This command returns the parameters affecting the network connection.", "source": "mcs500_programming_manual", "chunk_index": 4870, "length": 69, "hash": "00b6be390173f42b97a9dc8b4a91203b"}
{"id": "mcs500_programming_manual_4871", "text": "This command returns the parameters affecting the network connection.", "source": "mcs500_programming_manual", "chunk_index": 4871, "length": 69, "hash": "00b6be390173f42b97a9dc8b4a91203b"}
{"id": "mcs500_programming_manual_4872", "text": "\u2022 [2119][n1, n2, n3, n4, n5, n6]", "source": "mcs500_programming_manual", "chunk_index": 4872, "length": 32, "hash": "5235fa20024c5911dca12e9a1adf23a6"}
{"id": "mcs500_programming_manual_4873", "text": "\u2013 n1: number of successive keep-alive TCP packets that can be lost before the TCP", "source": "mcs500_programming_manual", "chunk_index": 4873, "length": 81, "hash": "fc8124726403db45cc9e18d8149d9e29"}
{"id": "mcs500_programming_manual_4874", "text": ": number of successive keep-alive TCP packets that can be lost before the TCP", "source": "mcs500_programming_manual", "chunk_index": 4874, "length": 77, "hash": "128ad9f4ef7a296cb678038890f9443b"}
{"id": "mcs500_programming_manual_4875", "text": "connection is closed, where n1 is an integer number ranging from 0 to 60;", "source": "mcs500_programming_manual", "chunk_index": 4875, "length": 73, "hash": "ef3f2adf268480c8c22024a12077952b"}
{"id": "mcs500_programming_manual_4876", "text": "connection is closed, where n", "source": "mcs500_programming_manual", "chunk_index": 4876, "length": 29, "hash": "305e641e708f46e27b21938b9f819dcd"}
{"id": "mcs500_programming_manual_4877", "text": "is an integer number ranging from 0 to 60;", "source": "mcs500_programming_manual", "chunk_index": 4877, "length": 42, "hash": "8fb71a32872e82955ac5ff0bc21d2b41"}
{"id": "mcs500_programming_manual_4878", "text": "\u2013 n2, n3, n4, n5, n6: currently not used.", "source": "mcs500_programming_manual", "chunk_index": 4878, "length": 41, "hash": "d8f8aba9af1a552bf204c0d64d34abe3"}
{"id": "mcs500_programming_manual_4879", "text": ": currently not used.", "source": "mcs500_programming_manual", "chunk_index": 4879, "length": 21, "hash": "37b11a10a979f55bffa028056fe071d7"}
{"id": "mcs500_programming_manual_4880", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4880, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4881", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4881, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4882", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4882, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4883", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4883, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4884", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4884, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4885", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4885, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4886", "text": "This command returns the severity level set with the SetPStop2Cfg (page 195) command.", "source": "mcs500_programming_manual", "chunk_index": 4886, "length": 85, "hash": "30bce5ec1fbdf0b85c618447367adf9f"}
{"id": "mcs500_programming_manual_4887", "text": "This command returns the severity level set with the", "source": "mcs500_programming_manual", "chunk_index": 4887, "length": 52, "hash": "63a86fe7a3c2339383de6822d321ecf0"}
{"id": "mcs500_programming_manual_4888", "text": "\u2013 2, for PauseMotion;", "source": "mcs500_programming_manual", "chunk_index": 4888, "length": 21, "hash": "d3830c84b5b68b2cb16b3bdbde0d0b26"}
{"id": "mcs500_programming_manual_4889", "text": "\u2013 3, for ClearMotion.", "source": "mcs500_programming_manual", "chunk_index": 4889, "length": 21, "hash": "de3cce7626586899e94e55a5e52e88fc"}
{"id": "mcs500_programming_manual_4890", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4890, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4891", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4891, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4892", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4892, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4893", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4893, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4894", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4894, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4895", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4895, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4896", "text": "This command returns the configured payload mass and center of mass, as set using the\nSetPayload (page 160) command.", "source": "mcs500_programming_manual", "chunk_index": 4896, "length": 116, "hash": "9bbb1921e1fb808a6a05817937014073"}
{"id": "mcs500_programming_manual_4897", "text": "This command returns the configured payload mass and center of mass, as set using the", "source": "mcs500_programming_manual", "chunk_index": 4897, "length": 85, "hash": "e4af5ebb9a14d71b25a73ef525c85e12"}
{"id": "mcs500_programming_manual_4898", "text": "\u2022 [2192][m, cx,cy,cz]", "source": "mcs500_programming_manual", "chunk_index": 4898, "length": 21, "hash": "1d43006e4700669aa365cbff5e335727"}
{"id": "mcs500_programming_manual_4899", "text": "\u2013 m: The payload mass (in kilograms).", "source": "mcs500_programming_manual", "chunk_index": 4899, "length": 37, "hash": "3b64d0bbb5f0f99aff897befe57464bb"}
{"id": "mcs500_programming_manual_4900", "text": "m: The payload mass (in kilograms).", "source": "mcs500_programming_manual", "chunk_index": 4900, "length": 35, "hash": "439cc50ce6c2d513fcf8a2e0baa5684a"}
{"id": "mcs500_programming_manual_4901", "text": "\u2013 cx,cy,cz: The coordinates of the payload center of mass, relative to the robot\u2019s FRF", "source": "mcs500_programming_manual", "chunk_index": 4901, "length": 86, "hash": "8f2ccffcc36a2bc262e0e38abb24770a"}
{"id": "mcs500_programming_manual_4902", "text": ": The coordinates of the payload center of mass, relative to the robot\u2019s", "source": "mcs500_programming_manual", "chunk_index": 4902, "length": 72, "hash": "212c5484584dae0476e4b54497e2988b"}
{"id": "mcs500_programming_manual_4903", "text": "(page 339), in millimeters.", "source": "mcs500_programming_manual", "chunk_index": 4903, "length": 27, "hash": "0f7dd396f9f1d74936f1aebd2848c5cd"}
{"id": "mcs500_programming_manual_4904", "text": "(page 339), in millimeters.", "source": "mcs500_programming_manual", "chunk_index": 4904, "length": 27, "hash": "0f7dd396f9f1d74936f1aebd2848c5cd"}
{"id": "mcs500_programming_manual_4905", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4905, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_4906", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 4906, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_4907", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 4907, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_4908", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 4908, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_4909", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4909, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4910", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 4910, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_4911", "text": "In cyclic protocols,\nDynamicDataTypeID 31. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4911, "length": 74, "hash": "522d17704fa5bc2e286eecffe363f51b"}
{"id": "mcs500_programming_manual_4912", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4912, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4913", "text": "31. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4913, "length": 35, "hash": "ee348d1bc9974c288bd5b55d044894e3"}
{"id": "mcs500_programming_manual_4914", "text": "the commands GetPayload (page 240)", "source": "mcs500_programming_manual", "chunk_index": 4914, "length": 34, "hash": "40d40686fbe9a5aa6c890730e022109a"}
{"id": "mcs500_programming_manual_4915", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4915, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4916", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4916, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4917", "text": "This command returns the type (model) of the product.", "source": "mcs500_programming_manual", "chunk_index": 4917, "length": 53, "hash": "cfb37c6b39e2348145b9468c039124c2"}
{"id": "mcs500_programming_manual_4918", "text": "This command returns the type (model) of the product.", "source": "mcs500_programming_manual", "chunk_index": 4918, "length": 53, "hash": "cfb37c6b39e2348145b9468c039124c2"}
{"id": "mcs500_programming_manual_4919", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4919, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4920", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4920, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4921", "text": "In cyclic protocols,\nDynamicDataTypeID 2. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4921, "length": 73, "hash": "8f60a4beb4e1ce9bf5a35deb5f805ef1"}
{"id": "mcs500_programming_manual_4922", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4922, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4923", "text": "2. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4923, "length": 34, "hash": "820ffeb2e2b5ca121ba4c2da658982cb"}
{"id": "mcs500_programming_manual_4924", "text": "the commands GetProductType (page 241)", "source": "mcs500_programming_manual", "chunk_index": 4924, "length": 38, "hash": "81a8249b2b20e20a47cbcfe3ceff2b32"}
{"id": "mcs500_programming_manual_4925", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4925, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4926", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4926, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4927", "text": "This command returns the state of the PROFINET protocol. See the description of the\nEnableProfinet (page 178) command for more details.", "source": "mcs500_programming_manual", "chunk_index": 4927, "length": 135, "hash": "d987cc809f9f2b349959861fc5b20443"}
{"id": "mcs500_programming_manual_4928", "text": "This command returns the state of the PROFINET protocol. See the description of the", "source": "mcs500_programming_manual", "chunk_index": 4928, "length": 83, "hash": "2bc0421f212b540f433a41b075524aa0"}
{"id": "mcs500_programming_manual_4929", "text": "(page 178) command for more details.", "source": "mcs500_programming_manual", "chunk_index": 4929, "length": 36, "hash": "c79c075806d5b0414a048afa2a0f37a9"}
{"id": "mcs500_programming_manual_4930", "text": "GetProfinetEnabled()", "source": "mcs500_programming_manual", "chunk_index": 4930, "length": 20, "hash": "f13f648389df08a518a1f6cd9424cea5"}
{"id": "mcs500_programming_manual_4931", "text": "GetProfinetEnabled()", "source": "mcs500_programming_manual", "chunk_index": 4931, "length": 20, "hash": "f13f648389df08a518a1f6cd9424cea5"}
{"id": "mcs500_programming_manual_4932", "text": "\u2013 e: 0, 1 or 2 as defined in the description of the EnableProfinet (page 178) command.", "source": "mcs500_programming_manual", "chunk_index": 4932, "length": 86, "hash": "b0aa3b145f27502206f61dbabc9f6e76"}
{"id": "mcs500_programming_manual_4933", "text": "e: 0, 1 or 2 as defined in the description of the", "source": "mcs500_programming_manual", "chunk_index": 4933, "length": 49, "hash": "3ca07492069a05bda4e9c27b63e9ce17"}
{"id": "mcs500_programming_manual_4934", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4934, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4935", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4935, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4936", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4936, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4937", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4937, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4938", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4938, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4939", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4939, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4940", "text": "GetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4940, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "mcs500_programming_manual_4941", "text": "GetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4941, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "mcs500_programming_manual_4942", "text": "This command returns the numerical codes of the responses that have been enabled using\nthe SetRealTimeMonitoring (page 196) command.", "source": "mcs500_programming_manual", "chunk_index": 4942, "length": 132, "hash": "a942e428fda8b78bf50a13d3c2431a83"}
{"id": "mcs500_programming_manual_4943", "text": "This command returns the numerical codes of the responses that have been enabled using\nthe", "source": "mcs500_programming_manual", "chunk_index": 4943, "length": 90, "hash": "d7cf61c672973a394ab80b73d5565dd8"}
{"id": "mcs500_programming_manual_4944", "text": "SetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4944, "length": 21, "hash": "cdc85f4d845ae263749d8023770e2258"}
{"id": "mcs500_programming_manual_4945", "text": "GetRealTimeMonitoring()", "source": "mcs500_programming_manual", "chunk_index": 4945, "length": 23, "hash": "7c979e1107a3175503aa36b78d1fabe2"}
{"id": "mcs500_programming_manual_4946", "text": "GetRealTimeMonitoring()", "source": "mcs500_programming_manual", "chunk_index": 4946, "length": 23, "hash": "7c979e1107a3175503aa36b78d1fabe2"}
{"id": "mcs500_programming_manual_4947", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4947, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4948", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4948, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4949", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4949, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4950", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4950, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4951", "text": "GetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4951, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "mcs500_programming_manual_4952", "text": "GetRealTimeMonitoring", "source": "mcs500_programming_manual", "chunk_index": 4952, "length": 21, "hash": "a114fb463d137ba8832b0d964b1c5d10"}
{"id": "mcs500_programming_manual_4953", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4953, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4954", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4954, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4955", "text": "This command returns a response of 1 if the robot has undergone our optional calibration\nservice, or 0 if it has not.", "source": "mcs500_programming_manual", "chunk_index": 4955, "length": 117, "hash": "4ef43265bb3b08f2d23b3d5cd6325961"}
{"id": "mcs500_programming_manual_4956", "text": "This command returns a response of 1 if the robot has undergone our optional calibration\nservice, or 0 if it has not.", "source": "mcs500_programming_manual", "chunk_index": 4956, "length": 117, "hash": "4ef43265bb3b08f2d23b3d5cd6325961"}
{"id": "mcs500_programming_manual_4957", "text": "GetRobotCalibrated()", "source": "mcs500_programming_manual", "chunk_index": 4957, "length": 20, "hash": "d01136f5683a8fac72baae8445b88843"}
{"id": "mcs500_programming_manual_4958", "text": "GetRobotCalibrated()", "source": "mcs500_programming_manual", "chunk_index": 4958, "length": 20, "hash": "d01136f5683a8fac72baae8445b88843"}
{"id": "mcs500_programming_manual_4959", "text": "\u2013 s: status (1 if the robot has been calibrated, 0 if it has not).", "source": "mcs500_programming_manual", "chunk_index": 4959, "length": 66, "hash": "a73bd2a0e6bbf2d4616df01842475cdb"}
{"id": "mcs500_programming_manual_4960", "text": "s: status (1 if the robot has been calibrated, 0 if it has not).", "source": "mcs500_programming_manual", "chunk_index": 4960, "length": 64, "hash": "d6475fced04b041d62d5283a58a5dbcf"}
{"id": "mcs500_programming_manual_4961", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4961, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4962", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4962, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4963", "text": "In cyclic protocols,\nDynamicDataTypeID 30. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4963, "length": 74, "hash": "8ec271a9ec77999ad8c6d9b52efc27a6"}
{"id": "mcs500_programming_manual_4964", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4964, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4965", "text": "30. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4965, "length": 35, "hash": "bb51f1b1cf33b5dda6f3df30dd5db2cc"}
{"id": "mcs500_programming_manual_4966", "text": "the command GetRobotCalibrated (page 244)", "source": "mcs500_programming_manual", "chunk_index": 4966, "length": 41, "hash": "68c7d8a36bcb83594c001497ac4d3f3f"}
{"id": "mcs500_programming_manual_4967", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4967, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4968", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4968, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4969", "text": "This command returns the robot\u2019s name, set with the command SetRobotName (page 199).\nNote that the robot name is used as a host name when the robot\u2019s network configuration uses\nDHCP.", "source": "mcs500_programming_manual", "chunk_index": 4969, "length": 182, "hash": "81fb787ff2477f505db7b8c147cf8fbe"}
{"id": "mcs500_programming_manual_4970", "text": "This command returns the robot\u2019s name, set with the command", "source": "mcs500_programming_manual", "chunk_index": 4970, "length": 59, "hash": "c32db76a4b4074bb1b7ad024be275e8c"}
{"id": "mcs500_programming_manual_4971", "text": "(page 199).\nNote that the robot name is used as a host name when the robot\u2019s network configuration uses\nDHCP.", "source": "mcs500_programming_manual", "chunk_index": 4971, "length": 109, "hash": "7aa3c4015a77101ffa159512604571d7"}
{"id": "mcs500_programming_manual_4972", "text": "\u2013 s: string containing the robot\u2019s name.", "source": "mcs500_programming_manual", "chunk_index": 4972, "length": 40, "hash": "d4ee8c530f6f964ea9fe90afa13e9c10"}
{"id": "mcs500_programming_manual_4973", "text": "s: string containing the robot\u2019s name.", "source": "mcs500_programming_manual", "chunk_index": 4973, "length": 38, "hash": "d1211b257ff05b82eea2130e2385b477"}
{"id": "mcs500_programming_manual_4974", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4974, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4975", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4975, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4976", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4976, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4977", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4977, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4978", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4978, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4979", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4979, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4980", "text": "This command returns the serial number of the robot, except for robots manufactured before\n2021. The serial number of all robots can also be found on the back of the robot\u2019s base.", "source": "mcs500_programming_manual", "chunk_index": 4980, "length": 179, "hash": "6f893b5238bfc4cc2cf8b47403f1d954"}
{"id": "mcs500_programming_manual_4981", "text": "This command returns the serial number of the robot, except for robots manufactured before\n2021. The serial number of all robots can also be found on the back of the robot\u2019s base.", "source": "mcs500_programming_manual", "chunk_index": 4981, "length": 179, "hash": "6f893b5238bfc4cc2cf8b47403f1d954"}
{"id": "mcs500_programming_manual_4982", "text": "\u2013 s: string containing the robot\u2019s serial number.", "source": "mcs500_programming_manual", "chunk_index": 4982, "length": 49, "hash": "aa96dea49265a8869bcf4f597783d06f"}
{"id": "mcs500_programming_manual_4983", "text": "s: string containing the robot\u2019s serial number.", "source": "mcs500_programming_manual", "chunk_index": 4983, "length": 47, "hash": "b64906c1bff65ad49e4e138843f00dcf"}
{"id": "mcs500_programming_manual_4984", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4984, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4985", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4985, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4986", "text": "In cyclic protocols,\nDynamicDataTypeID 3. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4986, "length": 73, "hash": "8a00161def9e3aea8c45d4625e6446ed"}
{"id": "mcs500_programming_manual_4987", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 4987, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_4988", "text": "3. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 4988, "length": 34, "hash": "10f70361631c760b8ba00ba1608f28e7"}
{"id": "mcs500_programming_manual_4989", "text": "the commands GetRobotSerial", "source": "mcs500_programming_manual", "chunk_index": 4989, "length": 27, "hash": "8a5bcbb7948088fc21568aec557f103d"}
{"id": "mcs500_programming_manual_4990", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4990, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4991", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 4991, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_4992", "text": "This command returns the default simulation mode set using the SetSimModeCfg (page 201)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 4992, "length": 96, "hash": "c35e0b6122f5bf5af6ace7aee6b17a46"}
{"id": "mcs500_programming_manual_4993", "text": "This command returns the default simulation mode set using the", "source": "mcs500_programming_manual", "chunk_index": 4993, "length": 62, "hash": "1223c74bffaefe272fe71b730f384770"}
{"id": "mcs500_programming_manual_4994", "text": "\u2013 m: 1 for normal (real-time) and 2 for fast simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 4994, "length": 61, "hash": "eebab4ffb228ffe4fcbee6e8282e7fb5"}
{"id": "mcs500_programming_manual_4995", "text": "m: 1 for normal (real-time) and 2 for fast simulation mode.", "source": "mcs500_programming_manual", "chunk_index": 4995, "length": 59, "hash": "a6f724a326a73351f17ad31e9efc7641"}
{"id": "mcs500_programming_manual_4996", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4996, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4997", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 4997, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_4998", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4998, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_4999", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 4999, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_5000", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5000, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5001", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5001, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5002", "text": "This command returns the time scaling percentage set using the SetTimeScaling (page 202)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 5002, "length": 97, "hash": "650db1f413a4aed707f1a6891fe11fad"}
{"id": "mcs500_programming_manual_5003", "text": "This command returns the time scaling percentage set using the", "source": "mcs500_programming_manual", "chunk_index": 5003, "length": 62, "hash": "5ee593c08a17c36df34d4253dcafd300"}
{"id": "mcs500_programming_manual_5004", "text": "\u2013 p: current time scaling percentage.", "source": "mcs500_programming_manual", "chunk_index": 5004, "length": 37, "hash": "44e1d6455425adde6771e11dff29285a"}
{"id": "mcs500_programming_manual_5005", "text": "p: current time scaling percentage.", "source": "mcs500_programming_manual", "chunk_index": 5005, "length": 35, "hash": "55fa6bf4b6bacb4be8423741b7022da5"}
{"id": "mcs500_programming_manual_5006", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5006, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5007", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5007, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5008", "text": "In cyclic protocols,\nDynamicDataTypeID 54. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5008, "length": 74, "hash": "27efaa30a31c6d6e5e844b29d2c79e6b"}
{"id": "mcs500_programming_manual_5009", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5009, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5010", "text": "54. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5010, "length": 35, "hash": "7616fdd239c42442f749345c2f037a10"}
{"id": "mcs500_programming_manual_5011", "text": "the commands GetTimeScaling (page 248)", "source": "mcs500_programming_manual", "chunk_index": 5011, "length": 38, "hash": "93dc0ad4955a924a3f7ad3364af5bfce"}
{"id": "mcs500_programming_manual_5012", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5012, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5013", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5013, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5014", "text": "Returns the current joint torque thresholds, as configured in the motion queue by the\ncommand SetTorqueLimits (page 162).", "source": "mcs500_programming_manual", "chunk_index": 5014, "length": 121, "hash": "c640205308d19711262239280912b520"}
{"id": "mcs500_programming_manual_5015", "text": "Returns the current joint torque thresholds, as configured in the motion queue by the\ncommand", "source": "mcs500_programming_manual", "chunk_index": 5015, "length": 93, "hash": "67bd1b6e175e93b6cb749aa1c0737c94"}
{"id": "mcs500_programming_manual_5016", "text": "\u2022 [2161][\u03c41, \u03c42, \u03c43, \u03c44 ]", "source": "mcs500_programming_manual", "chunk_index": 5016, "length": 25, "hash": "0ec620f45c8f9bbc00ac4d7fdcde52c2"}
{"id": "mcs500_programming_manual_5017", "text": "\u2013 \u03c4i: percentage of the maximum allowable torque that can be applied at motor i,", "source": "mcs500_programming_manual", "chunk_index": 5017, "length": 80, "hash": "d40f9d730607efac8a8c97cd26a30a39"}
{"id": "mcs500_programming_manual_5018", "text": ": percentage of the maximum allowable torque that can be applied at motor i,", "source": "mcs500_programming_manual", "chunk_index": 5018, "length": 76, "hash": "c473ebdb068c7e483b14828d140c1c2d"}
{"id": "mcs500_programming_manual_5019", "text": "where i = 1, 2, \u2026, 4 ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 5019, "length": 47, "hash": "5f5e87b318c1d7d0e47bb5cd18400781"}
{"id": "mcs500_programming_manual_5020", "text": "where i = 1, 2, \u2026, 4 ranging from 0.001 to 100.", "source": "mcs500_programming_manual", "chunk_index": 5020, "length": 47, "hash": "5f5e87b318c1d7d0e47bb5cd18400781"}
{"id": "mcs500_programming_manual_5021", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5021, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_5022", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 5022, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_5023", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 5023, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_5024", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5024, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_5025", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5025, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5026", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5026, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5027", "text": "In cyclic protocols,\nDynamicDataTypeID 25. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5027, "length": 74, "hash": "2602a88983d3f64a5a280e36ccc13b8c"}
{"id": "mcs500_programming_manual_5028", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5028, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5029", "text": "25. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5029, "length": 35, "hash": "33d3724857e5675d9f6491dc1afe0cf8"}
{"id": "mcs500_programming_manual_5030", "text": "the commands GetTorqueLimits (page 249)", "source": "mcs500_programming_manual", "chunk_index": 5030, "length": 39, "hash": "b802119b5921d8c8f3d0a3e70a0150c3"}
{"id": "mcs500_programming_manual_5031", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5031, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5032", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5032, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5033", "text": "This command returns the desired behavior of the robot when a joint torque exceeds the\nthresholds set by the SetTorqueLimits (page 162). This desired behavior is configured using\nthe SetTorqueLimitsCfg (page 164) command.", "source": "mcs500_programming_manual", "chunk_index": 5033, "length": 221, "hash": "d695bf6c5b2c887591c995db59bd013d"}
{"id": "mcs500_programming_manual_5034", "text": "This command returns the desired behavior of the robot when a joint torque exceeds the\nthresholds set by the", "source": "mcs500_programming_manual", "chunk_index": 5034, "length": 108, "hash": "cab1f08320a4cc5f4f2962ec151088fb"}
{"id": "mcs500_programming_manual_5035", "text": "(page 162). This desired behavior is configured using\nthe", "source": "mcs500_programming_manual", "chunk_index": 5035, "length": 57, "hash": "e8d96c5b1e12b7d9bb9640665fbcb8b5"}
{"id": "mcs500_programming_manual_5036", "text": "GetTorqueLimitsCfg()", "source": "mcs500_programming_manual", "chunk_index": 5036, "length": 20, "hash": "cd62ab20bfa9f3881877db8363b81194"}
{"id": "mcs500_programming_manual_5037", "text": "GetTorqueLimitsCfg()", "source": "mcs500_programming_manual", "chunk_index": 5037, "length": 20, "hash": "cd62ab20bfa9f3881877db8363b81194"}
{"id": "mcs500_programming_manual_5038", "text": "\u2013 l: an integer defining the torque limit event severity (see SetTorqueLimitsCfg", "source": "mcs500_programming_manual", "chunk_index": 5038, "length": 80, "hash": "790cfe87552e1afa3640f00b29c4bcee"}
{"id": "mcs500_programming_manual_5039", "text": "l: an integer defining the torque limit event severity (see", "source": "mcs500_programming_manual", "chunk_index": 5039, "length": 59, "hash": "55c17ecae2cf32d2047cc166a4e7dda5"}
{"id": "mcs500_programming_manual_5040", "text": "\u2013 m: an integer defining the detection mode (see SetTorqueLimitsCfg (page 164)).", "source": "mcs500_programming_manual", "chunk_index": 5040, "length": 80, "hash": "e153611f50440266b55a3b611e8f16f0"}
{"id": "mcs500_programming_manual_5041", "text": "m: an integer defining the detection mode (see", "source": "mcs500_programming_manual", "chunk_index": 5041, "length": 46, "hash": "f727b9619e6a13083480fbe02270596f"}
{"id": "mcs500_programming_manual_5042", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5042, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_5043", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 5043, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_5044", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 5044, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_5045", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5045, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_5046", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5046, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5047", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5047, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5048", "text": "In cyclic protocols,\nDynamicDataTypeID 24. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5048, "length": 74, "hash": "de6fb8ac0b98b7ebef6765bed112398b"}
{"id": "mcs500_programming_manual_5049", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5049, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5050", "text": "24. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5050, "length": 35, "hash": "8ff4d517c3541fd78feaf7aca996784f"}
{"id": "mcs500_programming_manual_5051", "text": "the commands GetTorqueLimitsCfg (page 250) is represented by", "source": "mcs500_programming_manual", "chunk_index": 5051, "length": 60, "hash": "63b1cb87fd049727c5120380e1ee64a0"}
{"id": "mcs500_programming_manual_5052", "text": "(page 250) is represented by", "source": "mcs500_programming_manual", "chunk_index": 5052, "length": 28, "hash": "0b4885f629933b1fd9bf9db5219e57c7"}
{"id": "mcs500_programming_manual_5053", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5053, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5054", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5054, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5055", "text": "This command returns the current definition of the TRF with respect to the FRF, set using the\nSetTrf (page 166) command.", "source": "mcs500_programming_manual", "chunk_index": 5055, "length": 120, "hash": "36763e8b2c14fa3e4bea278b4e84da65"}
{"id": "mcs500_programming_manual_5056", "text": "This command returns the current definition of the TRF with respect to the FRF, set using the", "source": "mcs500_programming_manual", "chunk_index": 5056, "length": 93, "hash": "5173b10935f551b0764c18d5aca72317"}
{"id": "mcs500_programming_manual_5057", "text": "\u2022 [2014][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5057, "length": 20, "hash": "9f844f364b5c6857445240889aad56c7"}
{"id": "mcs500_programming_manual_5058", "text": "\u2022 [2014][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5058, "length": 20, "hash": "9f844f364b5c6857445240889aad56c7"}
{"id": "mcs500_programming_manual_5059", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5059, "length": 83, "hash": "0951bb0eb6db98ec29d8fcede85ab5bc"}
{"id": "mcs500_programming_manual_5060", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5060, "length": 81, "hash": "ae0db040a111b95c7272f73864e193a9"}
{"id": "mcs500_programming_manual_5061", "text": "\u2013 \u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5061, "length": 44, "hash": "cef8a315de54745dec24f5745d3a1e1c"}
{"id": "mcs500_programming_manual_5062", "text": "\u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5062, "length": 42, "hash": "623f279344b28e714c24935579c4396f"}
{"id": "mcs500_programming_manual_5063", "text": "with respect to the FRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5063, "length": 36, "hash": "555a477008637770fa638289e1c8cf5d"}
{"id": "mcs500_programming_manual_5064", "text": "with respect to the FRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5064, "length": 36, "hash": "555a477008637770fa638289e1c8cf5d"}
{"id": "mcs500_programming_manual_5065", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5065, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_5066", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 5066, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_5067", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 5067, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_5068", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5068, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_5069", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5069, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5070", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5070, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5071", "text": "In cyclic protocols, the command GetTrf (page 251) is represented by the TargetTrf section\n(see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5071, "length": 107, "hash": "2892901fb790b4464452ba10652e38c1"}
{"id": "mcs500_programming_manual_5072", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5072, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5073", "text": "(page 251) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5073, "length": 32, "hash": "fb9d81a9c9af4cedf4a274332d7122b5"}
{"id": "mcs500_programming_manual_5074", "text": "section\n(see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5074, "length": 24, "hash": "8d278a56b0bfe56eec58f80c5ec6bfa6"}
{"id": "mcs500_programming_manual_5075", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5075, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5076", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5076, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5077", "text": "This command returns the timeout for velocity-mode motion commands, set using the\nSetVelTimeout (page 167) command.", "source": "mcs500_programming_manual", "chunk_index": 5077, "length": 115, "hash": "1a3a74e7529e837b2477050a59a97107"}
{"id": "mcs500_programming_manual_5078", "text": "This command returns the timeout for velocity-mode motion commands, set using the", "source": "mcs500_programming_manual", "chunk_index": 5078, "length": 81, "hash": "1f22d1bc163bd07ea333a34a3290d4a7"}
{"id": "mcs500_programming_manual_5079", "text": "\u2013 t: timeout, in seconds.", "source": "mcs500_programming_manual", "chunk_index": 5079, "length": 25, "hash": "7f2386bb2a2d5f58af365c592ec51a31"}
{"id": "mcs500_programming_manual_5080", "text": "t: timeout, in seconds.", "source": "mcs500_programming_manual", "chunk_index": 5080, "length": 23, "hash": "686d78fd6dc3c7671aae74420a98c4f7"}
{"id": "mcs500_programming_manual_5081", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5081, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_5082", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 5082, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_5083", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 5083, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_5084", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5084, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_5085", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5085, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5086", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5086, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5087", "text": "In cyclic protocols,\nthe command GetVelTimeout\nDynamicDataTypeID 21. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5087, "length": 100, "hash": "5d8407252f73cd8a2da96ef4457fa05d"}
{"id": "mcs500_programming_manual_5088", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 5088, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_5089", "text": "21. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5089, "length": 35, "hash": "a6e248301b89dc2689c1fdbbbab9b1f5"}
{"id": "mcs500_programming_manual_5090", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5090, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5091", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5091, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5092", "text": "This command returns the current definition of the WRF with respect to the BRF, set using\nthe SetWrf (page 168) command.", "source": "mcs500_programming_manual", "chunk_index": 5092, "length": 120, "hash": "a8a14a3a97b987933be5a4dd3c9222ab"}
{"id": "mcs500_programming_manual_5093", "text": "This command returns the current definition of the WRF with respect to the BRF, set using\nthe", "source": "mcs500_programming_manual", "chunk_index": 5093, "length": 93, "hash": "8c28f797a7418f4cf6ea55e06deb3f0e"}
{"id": "mcs500_programming_manual_5094", "text": "\u2022 [2014][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5094, "length": 20, "hash": "9f844f364b5c6857445240889aad56c7"}
{"id": "mcs500_programming_manual_5095", "text": "\u2022 [2014][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5095, "length": 20, "hash": "9f844f364b5c6857445240889aad56c7"}
{"id": "mcs500_programming_manual_5096", "text": "\u2013 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5096, "length": 83, "hash": "ca6c96842f50f5323f9bc866690ce512"}
{"id": "mcs500_programming_manual_5097", "text": "x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5097, "length": 81, "hash": "54a34c93965e04204ee415f1cab90e38"}
{"id": "mcs500_programming_manual_5098", "text": "\u2013 \u03b3: orientation of the WRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5098, "length": 44, "hash": "e84ddca00e4d9f80af441fac67d9c978"}
{"id": "mcs500_programming_manual_5099", "text": "\u03b3: orientation of the WRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5099, "length": 42, "hash": "c38281ceead4b252a2837fc5363c097b"}
{"id": "mcs500_programming_manual_5100", "text": "with respect to the BRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5100, "length": 36, "hash": "06b5fde5b83187371a7efac747d280e5"}
{"id": "mcs500_programming_manual_5101", "text": "with respect to the BRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5101, "length": 36, "hash": "06b5fde5b83187371a7efac747d280e5"}
{"id": "mcs500_programming_manual_5102", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5102, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_5103", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 5103, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_5104", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 5104, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_5105", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5105, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_5106", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5106, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5107", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5107, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5108", "text": "In cyclic protocols, the command GetWrf (page 253) is represented by the TargetWrf section\n(see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5108, "length": 107, "hash": "6af92fad97af965f8db05e11ce3094cd"}
{"id": "mcs500_programming_manual_5109", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5109, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5110", "text": "(page 253) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5110, "length": 32, "hash": "c595ba7a4ef9b767442abb815a452778"}
{"id": "mcs500_programming_manual_5111", "text": "section\n(see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5111, "length": 24, "hash": "8d278a56b0bfe56eec58f80c5ec6bfa6"}
{"id": "mcs500_programming_manual_5112", "text": "Real-time data request commands", "source": "mcs500_programming_manual", "chunk_index": 5112, "length": 31, "hash": "602ecc3799f7fdda6f05b1e2f729eed3"}
{"id": "mcs500_programming_manual_5113", "text": "Real-time data request commands", "source": "mcs500_programming_manual", "chunk_index": 5113, "length": 31, "hash": "602ecc3799f7fdda6f05b1e2f729eed3"}
{"id": "mcs500_programming_manual_5114", "text": "The commands in this section provide real-time data about the robot\u2019s current status, and are\ninstantaneous (i.e., executed immediately). Additionally, there are real-time data commands\nfor the robot\u2019s external tool accessories, which will be covered later.", "source": "mcs500_programming_manual", "chunk_index": 5114, "length": 257, "hash": "9e1a0b98ce8b4398a68b02d9f597ae4a"}
{"id": "mcs500_programming_manual_5115", "text": "The commands in this section provide real-time data about the robot\u2019s current status, and are\ninstantaneous (i.e., executed immediately). Additionally, there are real-time data commands\nfor the robot\u2019s external tool accessories, which will be covered later.", "source": "mcs500_programming_manual", "chunk_index": 5115, "length": 257, "hash": "9e1a0b98ce8b4398a68b02d9f597ae4a"}
{"id": "mcs500_programming_manual_5116", "text": "Examples of robot data include the current joint set, the length of the motion queue, and\nthe status of torque limits. There are two categories of real-time data commands for robot\npositioning:", "source": "mcs500_programming_manual", "chunk_index": 5116, "length": 193, "hash": "e06675af5984fe82983a952d8ad9b4c4"}
{"id": "mcs500_programming_manual_5117", "text": "Examples of robot data include the current joint set, the length of the motion queue, and\nthe status of torque limits. There are two categories of real-time data commands for robot\npositioning:", "source": "mcs500_programming_manual", "chunk_index": 5117, "length": 193, "hash": "e06675af5984fe82983a952d8ad9b4c4"}
{"id": "mcs500_programming_manual_5118", "text": "\u2022 Real-time sensor data These commands return data based on live measurements\nfrom the robot\u2019s sensors. Examples include GetRtJointTorq (page 264), GetRtJointPos\n(page 263), GetRtCartPos (page 259), etc.", "source": "mcs500_programming_manual", "chunk_index": 5118, "length": 203, "hash": "b305108102c63b99cd2e83da866faaef"}
{"id": "mcs500_programming_manual_5119", "text": "Real-time sensor data", "source": "mcs500_programming_manual", "chunk_index": 5119, "length": 21, "hash": "4cc2c3b40016b145c51cba0be4beafb3"}
{"id": "mcs500_programming_manual_5120", "text": "These commands return data based on live measurements\nfrom the robot\u2019s sensors. Examples include", "source": "mcs500_programming_manual", "chunk_index": 5120, "length": 96, "hash": "e1471a33249a3e637e1a0b90b564a869"}
{"id": "mcs500_programming_manual_5121", "text": "\u2022 Real-time target data These commands return data based on targets calculated\nExamples include GetRtTargetJointPos (page 270),", "source": "mcs500_programming_manual", "chunk_index": 5121, "length": 127, "hash": "a0e38bfc853393761a6370b15e3e4d23"}
{"id": "mcs500_programming_manual_5122", "text": "Real-time target data", "source": "mcs500_programming_manual", "chunk_index": 5122, "length": 21, "hash": "643163fe41216ff509dd8d26cca7f37e"}
{"id": "mcs500_programming_manual_5123", "text": "These commands return data based on targets calculated\nExamples include", "source": "mcs500_programming_manual", "chunk_index": 5123, "length": 71, "hash": "62c7684e473113ac50091e5c0920ad7b"}
{"id": "mcs500_programming_manual_5124", "text": "by the trajectory planner.\nGetRtTargetCartPos (page 266), etc.", "source": "mcs500_programming_manual", "chunk_index": 5124, "length": 62, "hash": "283b15102df0724b86e0bfc385d5d932"}
{"id": "mcs500_programming_manual_5125", "text": "by the trajectory planner.", "source": "mcs500_programming_manual", "chunk_index": 5125, "length": 26, "hash": "4a88703bb65b356bbf3ffa05b37377e5"}
{"id": "mcs500_programming_manual_5126", "text": "if the robot is active and stationary, the GetRtTargetJointPos (page 270)\nFor instance,\ncommand will consistently return the same joint set. However, the robot is never perfectly\nstill since the motors are continuously controlled by the drives. As a result, the revolute\njoints, for example, may oscillate by \u00b10.001\u00b0 around the desired angles. If you execute the\nGetRtJointPos (page 263) command twice in quick succession while the robot is stationary,\nyou may notice slight differences in the responses.", "source": "mcs500_programming_manual", "chunk_index": 5126, "length": 504, "hash": "01c859086bd529fa9c2964aae85084e0"}
{"id": "mcs500_programming_manual_5127", "text": "if the robot is active and stationary, the", "source": "mcs500_programming_manual", "chunk_index": 5127, "length": 42, "hash": "00222785548616a739223b1f3076dc01"}
{"id": "mcs500_programming_manual_5128", "text": "(page 270)\nFor instance,\ncommand will consistently return the same joint set. However, the robot is never perfectly\nstill since the motors are continuously controlled by the drives. As a result, the revolute\njoints, for example, may oscillate by \u00b10.001\u00b0 around the desired angles. If you execute the", "source": "mcs500_programming_manual", "chunk_index": 5128, "length": 299, "hash": "af2064fa3b57e950cf38f8775b76e06e"}
{"id": "mcs500_programming_manual_5129", "text": "(page 263) command twice in quick succession while the robot is stationary,\nyou may notice slight differences in the responses.", "source": "mcs500_programming_manual", "chunk_index": 5129, "length": 127, "hash": "80ef4603fbf2496c11381a383c2bab03"}
{"id": "mcs500_programming_manual_5130", "text": "In more dynamic situations, such as when a high force is applied or during rapid movements,\nthe differences between the actual joint positions (GetRtJointPos (page 263)) and the target\npositions (GetRtTargetJointPos (page 270)) can be more significant. These differences\nincrease further during rapid motions with high payloads or in the event of a collision.", "source": "mcs500_programming_manual", "chunk_index": 5130, "length": 359, "hash": "c836367428dad657c6a67d4b7f420216"}
{"id": "mcs500_programming_manual_5131", "text": "In more dynamic situations, such as when a high force is applied or during rapid movements,\nthe differences between the actual joint positions (", "source": "mcs500_programming_manual", "chunk_index": 5131, "length": 144, "hash": "a5d30ecaff98580491033d94d67a398e"}
{"id": "mcs500_programming_manual_5132", "text": "(page 263)) and the target\npositions (", "source": "mcs500_programming_manual", "chunk_index": 5132, "length": 38, "hash": "f6986b02ce934a76e87f2769e7f76a83"}
{"id": "mcs500_programming_manual_5133", "text": "(page 270)) can be more significant. These differences\nincrease further during rapid motions with high payloads or in the event of a collision.", "source": "mcs500_programming_manual", "chunk_index": 5133, "length": 143, "hash": "da84d75f801f198be507cf325f5cbb52"}
{"id": "mcs500_programming_manual_5134", "text": "Each GetRt* command response begins with a timestamp, measured in microseconds.", "source": "mcs500_programming_manual", "chunk_index": 5134, "length": 79, "hash": "44df015ab3a5b4a4e520c397c5b8abce"}
{"id": "mcs500_programming_manual_5135", "text": "Each GetRt* command response begins with a timestamp, measured in microseconds.", "source": "mcs500_programming_manual", "chunk_index": 5135, "length": 79, "hash": "44df015ab3a5b4a4e520c397c5b8abce"}
{"id": "mcs500_programming_manual_5136", "text": "The following is the list of real-time data request commands, in alphabetical order:", "source": "mcs500_programming_manual", "chunk_index": 5136, "length": 84, "hash": "c3e575d3adf7b3d7fad18ebc3ecc58b0"}
{"id": "mcs500_programming_manual_5137", "text": "The following is the list of real-time data request commands, in alphabetical order:", "source": "mcs500_programming_manual", "chunk_index": 5137, "length": 84, "hash": "c3e575d3adf7b3d7fad18ebc3ecc58b0"}
{"id": "mcs500_programming_manual_5138", "text": "\u2022 GetCmdPendingCount (page 256)", "source": "mcs500_programming_manual", "chunk_index": 5138, "length": 31, "hash": "7005330dfbc4c2f46cc304bfb737658d"}
{"id": "mcs500_programming_manual_5139", "text": "\u2022 GetOperationMode (page 257)", "source": "mcs500_programming_manual", "chunk_index": 5139, "length": 29, "hash": "9930d8573557dfbfe87badb4d6d255fb"}
{"id": "mcs500_programming_manual_5140", "text": "\u2022 GetRtAccelerometer (page 258)", "source": "mcs500_programming_manual", "chunk_index": 5140, "length": 31, "hash": "89eb07ddb4663489fad1b3c36ee99b63"}
{"id": "mcs500_programming_manual_5141", "text": "\u2022 GetRtCartPos (page 259)", "source": "mcs500_programming_manual", "chunk_index": 5141, "length": 25, "hash": "72d8c7eff70cdb9970ba8251d865abe0"}
{"id": "mcs500_programming_manual_5142", "text": "\u2022 GetRtCartVel (page 260)", "source": "mcs500_programming_manual", "chunk_index": 5142, "length": 25, "hash": "7f864b29b2f9587c47a8d0e6726ac69d"}
{"id": "mcs500_programming_manual_5143", "text": "\u2022 GetRtConf (page 261)", "source": "mcs500_programming_manual", "chunk_index": 5143, "length": 22, "hash": "c10b23a3a720fa27a7f4c1869316cea5"}
{"id": "mcs500_programming_manual_5144", "text": "\u2022 GetRtConfTurn (page 262)", "source": "mcs500_programming_manual", "chunk_index": 5144, "length": 26, "hash": "267ffcfedfd124905bd679b6cdb32873"}
{"id": "mcs500_programming_manual_5145", "text": "\u2022 GetRtJointPos (page 263)", "source": "mcs500_programming_manual", "chunk_index": 5145, "length": 26, "hash": "e9820de5f1570bface42db5d7b95be7c"}
{"id": "mcs500_programming_manual_5146", "text": "\u2022 GetRtJointTorq (page 264)", "source": "mcs500_programming_manual", "chunk_index": 5146, "length": 27, "hash": "3521d8ee82ab5cab7c88f22052090c15"}
{"id": "mcs500_programming_manual_5147", "text": "\u2022 GetRtJointVel (page 265)", "source": "mcs500_programming_manual", "chunk_index": 5147, "length": 26, "hash": "68f79dabaa88ed4fa5be1965310b05b5"}
{"id": "mcs500_programming_manual_5148", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5148, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5149", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5149, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5150", "text": "\u2022 GetRtTargetCartPos (page 266)", "source": "mcs500_programming_manual", "chunk_index": 5150, "length": 31, "hash": "d20faa8997e682abae8b1ca530891782"}
{"id": "mcs500_programming_manual_5151", "text": "\u2022 GetRtTargetCartVel (page 267)", "source": "mcs500_programming_manual", "chunk_index": 5151, "length": 31, "hash": "ffd07307c61e844856aba0cb3e6b0390"}
{"id": "mcs500_programming_manual_5152", "text": "\u2022 GetRtTargetConf (page 268)", "source": "mcs500_programming_manual", "chunk_index": 5152, "length": 28, "hash": "8fe4e9d0a2e95ebb188929382e04ad3b"}
{"id": "mcs500_programming_manual_5153", "text": "\u2022 GetRtTargetConfTurn (page 269)", "source": "mcs500_programming_manual", "chunk_index": 5153, "length": 32, "hash": "6027e85c4f2e44dc58e7defa12ea3abc"}
{"id": "mcs500_programming_manual_5154", "text": "\u2022 GetRtTargetJointPos (page 270)", "source": "mcs500_programming_manual", "chunk_index": 5154, "length": 32, "hash": "8cbb7ee0299a5d1359a936b98231170a"}
{"id": "mcs500_programming_manual_5155", "text": "\u2022 GetRtTargetJointTorq (page 271)", "source": "mcs500_programming_manual", "chunk_index": 5155, "length": 33, "hash": "993a9f93db2df93840429f178e84840c"}
{"id": "mcs500_programming_manual_5156", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 5156, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_5157", "text": "\u2022 GetRtTargetJointVel (page 272)", "source": "mcs500_programming_manual", "chunk_index": 5157, "length": 32, "hash": "851a8cb8ab071e8a27c8e18619533da1"}
{"id": "mcs500_programming_manual_5158", "text": "\u2022 GetRtTrf (page 273)", "source": "mcs500_programming_manual", "chunk_index": 5158, "length": 21, "hash": "4b5aac8169c338e3f7e7f32df2680a11"}
{"id": "mcs500_programming_manual_5159", "text": "\u2022 GetRtWrf (page 274)", "source": "mcs500_programming_manual", "chunk_index": 5159, "length": 21, "hash": "6e3cdbf2f15f6c8ab34a089e515eb45c"}
{"id": "mcs500_programming_manual_5160", "text": "\u2022 GetSafetyStopStatus (page 276)", "source": "mcs500_programming_manual", "chunk_index": 5160, "length": 32, "hash": "d1b31edc70f6f43636abaefcc46e76b2"}
{"id": "mcs500_programming_manual_5161", "text": "\u2022 GetStatusRobot (page 277)", "source": "mcs500_programming_manual", "chunk_index": 5161, "length": 27, "hash": "5c04fab3c3afeec8a8be18737c34899d"}
{"id": "mcs500_programming_manual_5162", "text": "\u2022 GetTorqueLimitsStatus (page 278)", "source": "mcs500_programming_manual", "chunk_index": 5162, "length": 34, "hash": "73b3a09267d081e6c11d8627d282e4b5"}
{"id": "mcs500_programming_manual_5163", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 5163, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_5164", "text": "A few other real-time data request commands exist, but these are presented in the sections\nWork zone supervision and collision prevention commands (page 279) (GetCollisionStatus\n(page 282), GetWorkZoneStatus (page 286)) and Commands for optional accessories\n(page 291).", "source": "mcs500_programming_manual", "chunk_index": 5164, "length": 269, "hash": "378297c3c9549d7987aa83bbae866d6e"}
{"id": "mcs500_programming_manual_5165", "text": "A few other real-time data request commands exist, but these are presented in the sections", "source": "mcs500_programming_manual", "chunk_index": 5165, "length": 90, "hash": "a7dfb3adbe8e485a41c3e4f284870b8b"}
{"id": "mcs500_programming_manual_5166", "text": "Work zone supervision and collision prevention commands", "source": "mcs500_programming_manual", "chunk_index": 5166, "length": 55, "hash": "6441277ce152d7279fd81df634ecfd04"}
{"id": "mcs500_programming_manual_5167", "text": "Commands for optional accessories", "source": "mcs500_programming_manual", "chunk_index": 5167, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "mcs500_programming_manual_5168", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5168, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5169", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5169, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5170", "text": "This command returns the number of motion commands that are currently in the motion\nqueue.", "source": "mcs500_programming_manual", "chunk_index": 5170, "length": 90, "hash": "62ace7b0493e5bb377a6739d9d975cfe"}
{"id": "mcs500_programming_manual_5171", "text": "This command returns the number of motion commands that are currently in the motion\nqueue.", "source": "mcs500_programming_manual", "chunk_index": 5171, "length": 90, "hash": "62ace7b0493e5bb377a6739d9d975cfe"}
{"id": "mcs500_programming_manual_5172", "text": "GetCmdPendingCount()", "source": "mcs500_programming_manual", "chunk_index": 5172, "length": 20, "hash": "30d23cd691effeeea07ac432af403956"}
{"id": "mcs500_programming_manual_5173", "text": "GetCmdPendingCount()", "source": "mcs500_programming_manual", "chunk_index": 5173, "length": 20, "hash": "30d23cd691effeeea07ac432af403956"}
{"id": "mcs500_programming_manual_5174", "text": "\u2013 n: number of motion commands in the queue.", "source": "mcs500_programming_manual", "chunk_index": 5174, "length": 44, "hash": "1a59850077c39cfdc3a76a5c24d8509c"}
{"id": "mcs500_programming_manual_5175", "text": "n: number of motion commands in the queue.", "source": "mcs500_programming_manual", "chunk_index": 5175, "length": 42, "hash": "dd3b9a5f7fbddc18e515f8de84f82c23"}
{"id": "mcs500_programming_manual_5176", "text": "Note that the robot will compile several (~25) commands in advance. These compiled\ncommands are not included in this count, though they may not yet have started executing.", "source": "mcs500_programming_manual", "chunk_index": 5176, "length": 171, "hash": "72b0a9d43d57f4b5a5c0ac5fd9a81697"}
{"id": "mcs500_programming_manual_5177", "text": "Note that the robot will compile several (~25) commands in advance. These compiled", "source": "mcs500_programming_manual", "chunk_index": 5177, "length": 82, "hash": "21ad958138e4b71ca5761307a5dce915"}
{"id": "mcs500_programming_manual_5178", "text": "commands are not included in this count, though they may not yet have started executing.", "source": "mcs500_programming_manual", "chunk_index": 5178, "length": 88, "hash": "ae29679a5f97095eaadc6828ae7f6e7d"}
{"id": "mcs500_programming_manual_5179", "text": "This command can only be executed when the robot is ready for motion (page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5179, "length": 135, "hash": "6f391c1214508f28240d6c16899eb4ea"}
{"id": "mcs500_programming_manual_5180", "text": "This command can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 5180, "length": 42, "hash": "13c9cf9ba7b9155a4e3e76053a5aa887"}
{"id": "mcs500_programming_manual_5181", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 5181, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_5182", "text": "(page 341). Otherwise,\nthe robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 5182, "length": 66, "hash": "d339d0b0123218f35d980bdfab2dadb8"}
{"id": "mcs500_programming_manual_5183", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5183, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5184", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 5184, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_5185", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 5185, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_5186", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 5186, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_5187", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5187, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5188", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5188, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5189", "text": "This command returns the operation mode selected by the key switch on the power suppl of\nthe robot.", "source": "mcs500_programming_manual", "chunk_index": 5189, "length": 99, "hash": "10f7510a32746fbd3d35b44c7a97d76f"}
{"id": "mcs500_programming_manual_5190", "text": "This command returns the operation mode selected by the key switch on the power suppl of\nthe robot.", "source": "mcs500_programming_manual", "chunk_index": 5190, "length": 99, "hash": "10f7510a32746fbd3d35b44c7a97d76f"}
{"id": "mcs500_programming_manual_5191", "text": "\u2013 m: 0 for locked mode, 1 for automatic mode, and 2 for manual mode.", "source": "mcs500_programming_manual", "chunk_index": 5191, "length": 68, "hash": "7103292d0a28b830729186f06e32204b"}
{"id": "mcs500_programming_manual_5192", "text": "m: 0 for locked mode, 1 for automatic mode, and 2 for manual mode.", "source": "mcs500_programming_manual", "chunk_index": 5192, "length": 66, "hash": "20ee43bf461c59e1d9c2e1f78a7b2264"}
{"id": "mcs500_programming_manual_5193", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5193, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5194", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5194, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5195", "text": "In cyclic protocols, the command GetOperationMode (page 257) is represented by the\nOperationMode field of the SafetyStatus section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5195, "length": 147, "hash": "6339b0d74e87e1c0c2877af6fe6217f3"}
{"id": "mcs500_programming_manual_5196", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5196, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5197", "text": "(page 257) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5197, "length": 32, "hash": "686d80552e577f2c60ee747d6d64a913"}
{"id": "mcs500_programming_manual_5198", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5198, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5199", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5199, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5200", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5200, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5201", "text": "This command is currently available only on the Meca500.", "source": "mcs500_programming_manual", "chunk_index": 5201, "length": 56, "hash": "67dc570544d02efbc35c11cb9529a440"}
{"id": "mcs500_programming_manual_5202", "text": "This command is currently available only on the Meca500.", "source": "mcs500_programming_manual", "chunk_index": 5202, "length": 56, "hash": "67dc570544d02efbc35c11cb9529a440"}
{"id": "mcs500_programming_manual_5203", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5203, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5204", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5204, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5205", "text": "This command returns the pose of the TRF with respect to the WRF, as calculated from the\ncurrent joint set read by the joint encoders. It also returns a timestamp.", "source": "mcs500_programming_manual", "chunk_index": 5205, "length": 163, "hash": "912eba151d5d7844ad1362178ed869e2"}
{"id": "mcs500_programming_manual_5206", "text": "This command returns the pose of the TRF with respect to the WRF, as calculated from the\ncurrent joint set read by the joint encoders. It also returns a timestamp.", "source": "mcs500_programming_manual", "chunk_index": 5206, "length": 163, "hash": "912eba151d5d7844ad1362178ed869e2"}
{"id": "mcs500_programming_manual_5207", "text": "\u2022 [2211][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5207, "length": 20, "hash": "1b4f8015df1e3f2067163ddc9e09927c"}
{"id": "mcs500_programming_manual_5208", "text": "\u2022 [2211][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5208, "length": 20, "hash": "1b4f8015df1e3f2067163ddc9e09927c"}
{"id": "mcs500_programming_manual_5209", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5209, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5210", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5210, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5211", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5211, "length": 83, "hash": "a4fd71d65bae4b95e66ae223f81993e4"}
{"id": "mcs500_programming_manual_5212", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5212, "length": 81, "hash": "578539d3696ba9a3724e16f88c7e8571"}
{"id": "mcs500_programming_manual_5213", "text": "\u2013 \u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5213, "length": 44, "hash": "cef8a315de54745dec24f5745d3a1e1c"}
{"id": "mcs500_programming_manual_5214", "text": "\u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5214, "length": 42, "hash": "623f279344b28e714c24935579c4396f"}
{"id": "mcs500_programming_manual_5215", "text": "with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5215, "length": 36, "hash": "c92a14db88d4d28b5bfec9bdfd9a750c"}
{"id": "mcs500_programming_manual_5216", "text": "with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5216, "length": 36, "hash": "c92a14db88d4d28b5bfec9bdfd9a750c"}
{"id": "mcs500_programming_manual_5217", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5217, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5218", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5218, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5219", "text": "the command GetRtCartPos\nIn cyclic protocols,\nDynamicDataTypeID 41. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5219, "length": 99, "hash": "dc552f9a17df2f4b1014a5890e5d8d2d"}
{"id": "mcs500_programming_manual_5220", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5220, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5221", "text": "41. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5221, "length": 35, "hash": "368416270559c6beedc40cedf86b8aa5"}
{"id": "mcs500_programming_manual_5222", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5222, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5223", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5223, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5224", "text": "This command returns the current Cartesian velocity vector of the TRF with respect to the\nWRF, as calculated from the real-time data coming from the joint encoders.", "source": "mcs500_programming_manual", "chunk_index": 5224, "length": 164, "hash": "622dc5a2b6cb7cdda9995b73f51019ce"}
{"id": "mcs500_programming_manual_5225", "text": "This command returns the current Cartesian velocity vector of the TRF with respect to the\nWRF, as calculated from the real-time data coming from the joint encoders.", "source": "mcs500_programming_manual", "chunk_index": 5225, "length": 164, "hash": "622dc5a2b6cb7cdda9995b73f51019ce"}
{"id": "mcs500_programming_manual_5226", "text": "\u2022 [2214][t, \u1e8b , \u1e8f , \u017c, \u03c9z]", "source": "mcs500_programming_manual", "chunk_index": 5226, "length": 26, "hash": "509ad6f824c8a704670e0a201f6e1192"}
{"id": "mcs500_programming_manual_5227", "text": "\u2022 [2214][t, \u1e8b , \u1e8f , \u017c, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 5227, "length": 24, "hash": "2acabff552ee925cbacae3a618505239"}
{"id": "mcs500_programming_manual_5228", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5228, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5229", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5229, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5230", "text": "\u2013 \u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "mcs500_programming_manual", "chunk_index": 5230, "length": 89, "hash": "144eba505f3df3b8d8bed13d3a475689"}
{"id": "mcs500_programming_manual_5231", "text": "\u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "mcs500_programming_manual", "chunk_index": 5231, "length": 87, "hash": "dd9970528c890ecc371bd1b3b6ed44b5"}
{"id": "mcs500_programming_manual_5232", "text": "\u2013 \u03c9z: angular velocity of the TRF with respect to the WRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 5232, "length": 66, "hash": "c9697826f95e7034375cacb26651371c"}
{"id": "mcs500_programming_manual_5233", "text": ": angular velocity of the TRF with respect to the WRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 5233, "length": 62, "hash": "49a15cc865a651d428721c7bc508f2e5"}
{"id": "mcs500_programming_manual_5234", "text": "The current TCP speed with respect to the WRF is therefore (\u1e8b2 + \u1e8f2 + \u017c2)1/2.", "source": "mcs500_programming_manual", "chunk_index": 5234, "length": 77, "hash": "091686244959dcea9f7c6de56b9df9fe"}
{"id": "mcs500_programming_manual_5235", "text": "The current TCP speed with respect to the WRF is therefore (\u1e8b", "source": "mcs500_programming_manual", "chunk_index": 5235, "length": 61, "hash": "e072b55346d621e7729cd807d5746077"}
{"id": "mcs500_programming_manual_5236", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5236, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5237", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5237, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5238", "text": "In cyclic protocols,\nthe command GetRtCartVel\nDynamicDataTypeID 44. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5238, "length": 99, "hash": "485e30ef300d4df22e099cba2de073d9"}
{"id": "mcs500_programming_manual_5239", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 5239, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_5240", "text": "44. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5240, "length": 35, "hash": "501028f39cacae12e4c32805bf42da8c"}
{"id": "mcs500_programming_manual_5241", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5241, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5242", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5242, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5243", "text": "Unlike the GetConf (page 222) command, which returns the desired posture configuration\nparameters, the GetRtConf (page 261) command returns the current posture configuration\nparameters, calculated from real-time data provided by the joint encoders. Additionally, the\nGetRtConf (page 261) command includes a timestamp in its response.", "source": "mcs500_programming_manual", "chunk_index": 5243, "length": 333, "hash": "bce68dd534843b3a7b1d7d4e239d2f6d"}
{"id": "mcs500_programming_manual_5244", "text": "(page 222) command, which returns the desired posture configuration\nparameters, the", "source": "mcs500_programming_manual", "chunk_index": 5244, "length": 83, "hash": "7d5161f38e11899b21a32efe2a28dab0"}
{"id": "mcs500_programming_manual_5245", "text": "(page 261) command returns the current posture configuration\nparameters, calculated from real-time data provided by the joint encoders. Additionally, the", "source": "mcs500_programming_manual", "chunk_index": 5245, "length": 153, "hash": "586c7ffb6722b7ff25248596a4731be9"}
{"id": "mcs500_programming_manual_5246", "text": "(page 261) command includes a timestamp in its response.", "source": "mcs500_programming_manual", "chunk_index": 5246, "length": 56, "hash": "a0fc9f9aa2eba9f2ded5420b6d75358b"}
{"id": "mcs500_programming_manual_5247", "text": "\u2013 ce: elbow configuration parameter, -1, 1, or 0\u2020.", "source": "mcs500_programming_manual", "chunk_index": 5247, "length": 50, "hash": "87a04f596233ca5cc095752ee007307b"}
{"id": "mcs500_programming_manual_5248", "text": ": elbow configuration parameter, -1, 1, or 0", "source": "mcs500_programming_manual", "chunk_index": 5248, "length": 44, "hash": "1482208d746162719fcc58f32fa9e2e2"}
{"id": "mcs500_programming_manual_5249", "text": "\u2020 At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "mcs500_programming_manual", "chunk_index": 5249, "length": 97, "hash": "8a65935c2dc5cb16de8faf10ef5566ad"}
{"id": "mcs500_programming_manual_5250", "text": "At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "mcs500_programming_manual", "chunk_index": 5250, "length": 95, "hash": "1faec2f3c7c1d9bb3f0c9a497f25d387"}
{"id": "mcs500_programming_manual_5251", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5251, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5252", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5252, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5253", "text": "In cyclic protocols,\nthe\nDynamicDataTypeID 45. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5253, "length": 78, "hash": "82e522724eca4a5d31e52af8d3b7c08f"}
{"id": "mcs500_programming_manual_5254", "text": "In cyclic protocols,\nthe", "source": "mcs500_programming_manual", "chunk_index": 5254, "length": 24, "hash": "f13c492265d82819b373a8ef09f2a621"}
{"id": "mcs500_programming_manual_5255", "text": "45. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5255, "length": 35, "hash": "66ead3de7ba83855e7a3352cd27ad882"}
{"id": "mcs500_programming_manual_5256", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5256, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5257", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5257, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5258", "text": "Contrary to GetConfTurn (page 223), which returns the desired turn configuration parameter,\nGetRtConfTurn (page 262) returns the current turn configuration parameter, as calculated\nfrom the real-time data coming from the encoder of the last joint.\nIn addition, the\nGetRtConfTurn (page 262) command returns a timestamp.", "source": "mcs500_programming_manual", "chunk_index": 5258, "length": 318, "hash": "5df8f90e61b46d4a7bcf7ba4d054b648"}
{"id": "mcs500_programming_manual_5259", "text": "(page 223), which returns the desired turn configuration parameter,", "source": "mcs500_programming_manual", "chunk_index": 5259, "length": 67, "hash": "f04a52e5892843faf2381adb8ff335c2"}
{"id": "mcs500_programming_manual_5260", "text": "(page 262) returns the current turn configuration parameter, as calculated\nfrom the real-time data coming from the encoder of the last joint.\nIn addition, the", "source": "mcs500_programming_manual", "chunk_index": 5260, "length": 158, "hash": "82567582ea049f6e28ca627d87062c3b"}
{"id": "mcs500_programming_manual_5261", "text": "(page 262) command returns a timestamp.", "source": "mcs500_programming_manual", "chunk_index": 5261, "length": 39, "hash": "09369a12e99f467ff8f0b84ddb2d74cd"}
{"id": "mcs500_programming_manual_5262", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5262, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5263", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5263, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5264", "text": "\u2013 ct: turn configuration parameter, an integer number.", "source": "mcs500_programming_manual", "chunk_index": 5264, "length": 54, "hash": "7aabb7f3d531d15887a13c2f94591872"}
{"id": "mcs500_programming_manual_5265", "text": ": turn configuration parameter, an integer number.", "source": "mcs500_programming_manual", "chunk_index": 5265, "length": 50, "hash": "3ac9c05b953e032e1b6a179fd4f5588f"}
{"id": "mcs500_programming_manual_5266", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5266, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5267", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5267, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5268", "text": "In cyclic protocols,\nDynamicDataTypeID 45. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5268, "length": 74, "hash": "1c7418527bcb716042e763b13dc52466"}
{"id": "mcs500_programming_manual_5269", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5269, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5270", "text": "45. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5270, "length": 35, "hash": "66ead3de7ba83855e7a3352cd27ad882"}
{"id": "mcs500_programming_manual_5271", "text": "the command GetRtConfTurn (page 262)", "source": "mcs500_programming_manual", "chunk_index": 5271, "length": 36, "hash": "1a88502929644d785c7fc5048fe1f054"}
{"id": "mcs500_programming_manual_5272", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5272, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5273", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5273, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5274", "text": "This command returns the current joint set read by the joint encoders.\ntimestamp.", "source": "mcs500_programming_manual", "chunk_index": 5274, "length": 81, "hash": "b912b66816c8c87b1852fd3863113a55"}
{"id": "mcs500_programming_manual_5275", "text": "This command returns the current joint set read by the joint encoders.\ntimestamp.", "source": "mcs500_programming_manual", "chunk_index": 5275, "length": 81, "hash": "b912b66816c8c87b1852fd3863113a55"}
{"id": "mcs500_programming_manual_5276", "text": "\u2022 [2210][t, \u03b81, \u03b82, d3, \u03b84]", "source": "mcs500_programming_manual", "chunk_index": 5276, "length": 27, "hash": "eb86e4579c546b2013713888a4248ecf"}
{"id": "mcs500_programming_manual_5277", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5277, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5278", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5278, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5279", "text": "\u2013 \u03b81, \u03b82, \u03b84: the angles of joint 1, 2, and 4, in degrees;", "source": "mcs500_programming_manual", "chunk_index": 5279, "length": 58, "hash": "dbbb6ca5d51fb6bf2dd62aecfe718425"}
{"id": "mcs500_programming_manual_5280", "text": ": the angles of joint 1, 2, and 4, in degrees;", "source": "mcs500_programming_manual", "chunk_index": 5280, "length": 46, "hash": "d874f6b7e5579309cfef07f8c3d0741f"}
{"id": "mcs500_programming_manual_5281", "text": "\u2013 d3: the position of joint 3, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5281, "length": 37, "hash": "654a7e00795494d0e7136cb49919beb7"}
{"id": "mcs500_programming_manual_5282", "text": ": the position of joint 3, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5282, "length": 33, "hash": "e75d1adb89bd84674578ab2d8744eeb4"}
{"id": "mcs500_programming_manual_5283", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5283, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5284", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5284, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5285", "text": "In cyclic protocols,\nthe command GetRtJointPos\nDynamicDataTypeID 40. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5285, "length": 100, "hash": "7337fc6334edaebe801e0f48a1f904a9"}
{"id": "mcs500_programming_manual_5286", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 5286, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_5287", "text": "40. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5287, "length": 35, "hash": "29133e5a366a7b54dfcb970ef5ebc46f"}
{"id": "mcs500_programming_manual_5288", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5288, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5289", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5289, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5290", "text": "This command returns the current joint torques, or more specifically, the current motor\ntorques.", "source": "mcs500_programming_manual", "chunk_index": 5290, "length": 96, "hash": "5ed41cfbf498ea4ec8d11d2739b9dc4c"}
{"id": "mcs500_programming_manual_5291", "text": "This command returns the current joint torques, or more specifically, the current motor\ntorques.", "source": "mcs500_programming_manual", "chunk_index": 5291, "length": 96, "hash": "5ed41cfbf498ea4ec8d11d2739b9dc4c"}
{"id": "mcs500_programming_manual_5292", "text": "\u2022 [2213][t, \u03c41, \u03c42, \u03c43, \u03c44]", "source": "mcs500_programming_manual", "chunk_index": 5292, "length": 27, "hash": "a63f1c3a076e58e8d2593d1fbf3b0c6b"}
{"id": "mcs500_programming_manual_5293", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5293, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5294", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5294, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5295", "text": "\u2013 \u03c4i: the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "mcs500_programming_manual", "chunk_index": 5295, "length": 85, "hash": "02b09d3b0461f9e05603410f2b8d23b7"}
{"id": "mcs500_programming_manual_5296", "text": ": the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "mcs500_programming_manual", "chunk_index": 5296, "length": 81, "hash": "5044aafb665d3dbf00f18a5b5b4c8a1d"}
{"id": "mcs500_programming_manual_5297", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5297, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5298", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5298, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5299", "text": "In cyclic protocols,\nDynamicDataTypeID 43. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5299, "length": 74, "hash": "bd5bab27a718485f77fd18013852a87f"}
{"id": "mcs500_programming_manual_5300", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5300, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5301", "text": "43. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5301, "length": 35, "hash": "ef3e4da1a44807fe3cd7f3c898639dde"}
{"id": "mcs500_programming_manual_5302", "text": "the command GetRtJointTorq (page 264)", "source": "mcs500_programming_manual", "chunk_index": 5302, "length": 37, "hash": "a8a6c33f71a8386f79455658ca0a00c2"}
{"id": "mcs500_programming_manual_5303", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5303, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5304", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5304, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5305", "text": "This command returns the current joint velocities, calculated by differentiating the joint\nencoders data.", "source": "mcs500_programming_manual", "chunk_index": 5305, "length": 105, "hash": "a3f5d3739ba50f5e9fa4c364e61f06eb"}
{"id": "mcs500_programming_manual_5306", "text": "This command returns the current joint velocities, calculated by differentiating the joint\nencoders data.", "source": "mcs500_programming_manual", "chunk_index": 5306, "length": 105, "hash": "a3f5d3739ba50f5e9fa4c364e61f06eb"}
{"id": "mcs500_programming_manual_5307", "text": "\u2022 [2212][t, \u03c91, \u03c92, v3, \u03c94]", "source": "mcs500_programming_manual", "chunk_index": 5307, "length": 27, "hash": "63f45a146fa62ab15372db9c3990eac2"}
{"id": "mcs500_programming_manual_5308", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5308, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5309", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5309, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5310", "text": "\u2013 \u03c91, \u03c92, \u03c94: the rates of change of joints 1, 2, and 4;", "source": "mcs500_programming_manual", "chunk_index": 5310, "length": 56, "hash": "b327ca6326b20e38e45a00c52fc95c86"}
{"id": "mcs500_programming_manual_5311", "text": ": the rates of change of joints 1, 2, and 4;", "source": "mcs500_programming_manual", "chunk_index": 5311, "length": 44, "hash": "cc7349767e68e2215e275cbe9131a761"}
{"id": "mcs500_programming_manual_5312", "text": "\u2013 v3: the rate of change of joint 3, in mm/s.", "source": "mcs500_programming_manual", "chunk_index": 5312, "length": 45, "hash": "603a46121f6bea0339fe6bec81bb87be"}
{"id": "mcs500_programming_manual_5313", "text": ": the rate of change of joint 3, in mm/s.", "source": "mcs500_programming_manual", "chunk_index": 5313, "length": 41, "hash": "ca693a1f7c9dc67e0d5f427efe64a68a"}
{"id": "mcs500_programming_manual_5314", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5314, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5315", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5315, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5316", "text": "In cyclic protocols,\nthe command GetRtJointVel\nDynamicDataTypeID 42. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5316, "length": 100, "hash": "c782ebf9c068bde5ccf0e83e20732392"}
{"id": "mcs500_programming_manual_5317", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 5317, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_5318", "text": "42. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5318, "length": 35, "hash": "367e00537c2c105f39a2dbd8405e5043"}
{"id": "mcs500_programming_manual_5319", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5319, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5320", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5320, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5321", "text": "This command returns the current target pose of the TRF relative to the WRF, rather than the\npose derived from real-time data provided by the joint encoders.", "source": "mcs500_programming_manual", "chunk_index": 5321, "length": 157, "hash": "42d6035bc75af6a8cdb012fbd7664119"}
{"id": "mcs500_programming_manual_5322", "text": "This command returns the current target pose of the TRF relative to the WRF, rather than the\npose derived from real-time data provided by the joint encoders.", "source": "mcs500_programming_manual", "chunk_index": 5322, "length": 157, "hash": "42d6035bc75af6a8cdb012fbd7664119"}
{"id": "mcs500_programming_manual_5323", "text": "GetRtTargetCartPos()", "source": "mcs500_programming_manual", "chunk_index": 5323, "length": 20, "hash": "0942a11370f90e79b8caa6a22bf5ff16"}
{"id": "mcs500_programming_manual_5324", "text": "GetRtTargetCartPos()", "source": "mcs500_programming_manual", "chunk_index": 5324, "length": 20, "hash": "0942a11370f90e79b8caa6a22bf5ff16"}
{"id": "mcs500_programming_manual_5325", "text": "\u2022 [2201][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5325, "length": 20, "hash": "4609d72d6ba981b28c00ff9dc7af6a16"}
{"id": "mcs500_programming_manual_5326", "text": "\u2022 [2201][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5326, "length": 20, "hash": "4609d72d6ba981b28c00ff9dc7af6a16"}
{"id": "mcs500_programming_manual_5327", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5327, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5328", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5328, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5329", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5329, "length": 83, "hash": "a4fd71d65bae4b95e66ae223f81993e4"}
{"id": "mcs500_programming_manual_5330", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the WRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5330, "length": 81, "hash": "578539d3696ba9a3724e16f88c7e8571"}
{"id": "mcs500_programming_manual_5331", "text": "\u2013 \u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5331, "length": 44, "hash": "cef8a315de54745dec24f5745d3a1e1c"}
{"id": "mcs500_programming_manual_5332", "text": "\u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5332, "length": 42, "hash": "623f279344b28e714c24935579c4396f"}
{"id": "mcs500_programming_manual_5333", "text": "with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5333, "length": 36, "hash": "c92a14db88d4d28b5bfec9bdfd9a750c"}
{"id": "mcs500_programming_manual_5334", "text": "with respect to the WRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5334, "length": 36, "hash": "c92a14db88d4d28b5bfec9bdfd9a750c"}
{"id": "mcs500_programming_manual_5335", "text": "The deprecated GetPose command, which is still supported, returns the same data, except\nfor the timestamp. Additionally, the message ID differs and is 2027.", "source": "mcs500_programming_manual", "chunk_index": 5335, "length": 156, "hash": "1859296ad9f5914317a8ca95c4a59a13"}
{"id": "mcs500_programming_manual_5336", "text": "The deprecated GetPose command, which is still supported, returns the same data, except\nfor the timestamp. Additionally, the message ID differs and is 2027.", "source": "mcs500_programming_manual", "chunk_index": 5336, "length": 156, "hash": "1859296ad9f5914317a8ca95c4a59a13"}
{"id": "mcs500_programming_manual_5337", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5337, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5338", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5338, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5339", "text": "In cyclic protocols, the command GetRtTargetCartPos (page 266) is represented by the\nTargetEndEffectorPose section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5339, "length": 131, "hash": "db4263a452ed74dab5f85198fa714a2f"}
{"id": "mcs500_programming_manual_5340", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5340, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5341", "text": "(page 266) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5341, "length": 32, "hash": "76dfdf21aea60225a78e2215e97d7b6a"}
{"id": "mcs500_programming_manual_5342", "text": "TargetEndEffectorPose", "source": "mcs500_programming_manual", "chunk_index": 5342, "length": 21, "hash": "196d3a576601ac16b2753c86a3b70da3"}
{"id": "mcs500_programming_manual_5343", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5343, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5344", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5344, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5345", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5345, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5346", "text": "This command returns the current target Cartesian velocity vector of the TRF with respect\nto the WRF.", "source": "mcs500_programming_manual", "chunk_index": 5346, "length": 101, "hash": "b44eb8120edc3df92073a548cc70f4cc"}
{"id": "mcs500_programming_manual_5347", "text": "This command returns the current target Cartesian velocity vector of the TRF with respect\nto the WRF.", "source": "mcs500_programming_manual", "chunk_index": 5347, "length": 101, "hash": "b44eb8120edc3df92073a548cc70f4cc"}
{"id": "mcs500_programming_manual_5348", "text": "GetRtTargetCartVel()", "source": "mcs500_programming_manual", "chunk_index": 5348, "length": 20, "hash": "ea6085bd167db73c28d6443dd977627d"}
{"id": "mcs500_programming_manual_5349", "text": "GetRtTargetCartVel()", "source": "mcs500_programming_manual", "chunk_index": 5349, "length": 20, "hash": "ea6085bd167db73c28d6443dd977627d"}
{"id": "mcs500_programming_manual_5350", "text": "\u2022 [2204][t, \u1e8b , \u1e8f , \u017c, \u03c9z]", "source": "mcs500_programming_manual", "chunk_index": 5350, "length": 26, "hash": "0bd6457dc6a6dd3e9d33bd2d22b53df6"}
{"id": "mcs500_programming_manual_5351", "text": "\u2022 [2204][t, \u1e8b , \u1e8f , \u017c, \u03c9", "source": "mcs500_programming_manual", "chunk_index": 5351, "length": 24, "hash": "ba98da2148fc43155f701d790446abc8"}
{"id": "mcs500_programming_manual_5352", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5352, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5353", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5353, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5354", "text": "\u2013 \u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "mcs500_programming_manual", "chunk_index": 5354, "length": 89, "hash": "144eba505f3df3b8d8bed13d3a475689"}
{"id": "mcs500_programming_manual_5355", "text": "\u1e8b , \u1e8f , \u017c: components of the linear velocity vector of the TCP with respect to the WRF,", "source": "mcs500_programming_manual", "chunk_index": 5355, "length": 87, "hash": "dd9970528c890ecc371bd1b3b6ed44b5"}
{"id": "mcs500_programming_manual_5356", "text": "\u2013 \u03c9z: angular velocity of the TRF with respect to the WRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 5356, "length": 66, "hash": "c9697826f95e7034375cacb26651371c"}
{"id": "mcs500_programming_manual_5357", "text": ": angular velocity of the TRF with respect to the WRF, in \u00b0/s.", "source": "mcs500_programming_manual", "chunk_index": 5357, "length": 62, "hash": "49a15cc865a651d428721c7bc508f2e5"}
{"id": "mcs500_programming_manual_5358", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5358, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5359", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5359, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5360", "text": "In cyclic protocols,\nDynamicDataTypeID 34. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5360, "length": 74, "hash": "edb8f43f73cb4fd9ba801c90378aaecd"}
{"id": "mcs500_programming_manual_5361", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5361, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5362", "text": "34. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5362, "length": 35, "hash": "1379ff5c2176ad204e84ea41db99fa76"}
{"id": "mcs500_programming_manual_5363", "text": "the command GetRtTargetCartVel", "source": "mcs500_programming_manual", "chunk_index": 5363, "length": 30, "hash": "1f05f4727def9767bedc9466e0428ba4"}
{"id": "mcs500_programming_manual_5364", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5364, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5365", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5365, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5366", "text": "This command returns the posture configuration parameters calculated from the current\ntarget joint set.", "source": "mcs500_programming_manual", "chunk_index": 5366, "length": 103, "hash": "aa689b062cd39aa52418416c6495950d"}
{"id": "mcs500_programming_manual_5367", "text": "This command returns the posture configuration parameters calculated from the current\ntarget joint set.", "source": "mcs500_programming_manual", "chunk_index": 5367, "length": 103, "hash": "aa689b062cd39aa52418416c6495950d"}
{"id": "mcs500_programming_manual_5368", "text": "\u2022 [2208][cs, ce, cw]", "source": "mcs500_programming_manual", "chunk_index": 5368, "length": 20, "hash": "71f767dff94579135ed7a5ea4e439a0c"}
{"id": "mcs500_programming_manual_5369", "text": "\u2013 cs: shoulder configuration parameter, -1, 1, or 0\u2020;", "source": "mcs500_programming_manual", "chunk_index": 5369, "length": 53, "hash": "7e887b7977522802b6d492de0a20b852"}
{"id": "mcs500_programming_manual_5370", "text": ": shoulder configuration parameter, -1, 1, or 0", "source": "mcs500_programming_manual", "chunk_index": 5370, "length": 47, "hash": "e2ab7aa693eb6e48ebe9a53537f82598"}
{"id": "mcs500_programming_manual_5371", "text": "\u2013 ce: elbow configuration parameter, -1, 1, or 0\u2020;", "source": "mcs500_programming_manual", "chunk_index": 5371, "length": 50, "hash": "bf6699dbd0d7b321e8bb8f081b734504"}
{"id": "mcs500_programming_manual_5372", "text": ": elbow configuration parameter, -1, 1, or 0", "source": "mcs500_programming_manual", "chunk_index": 5372, "length": 44, "hash": "1482208d746162719fcc58f32fa9e2e2"}
{"id": "mcs500_programming_manual_5373", "text": "\u2013 cw: wrist configuration parameter, -1, 1, or 0\u2020.", "source": "mcs500_programming_manual", "chunk_index": 5373, "length": 50, "hash": "b04bc1dba374ab0fed1fff8ca2deb13e"}
{"id": "mcs500_programming_manual_5374", "text": ": wrist configuration parameter, -1, 1, or 0", "source": "mcs500_programming_manual", "chunk_index": 5374, "length": 44, "hash": "c26f84612dcb28443fd21640dd74035e"}
{"id": "mcs500_programming_manual_5375", "text": "\u2020 At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "mcs500_programming_manual", "chunk_index": 5375, "length": 97, "hash": "8a65935c2dc5cb16de8faf10ef5566ad"}
{"id": "mcs500_programming_manual_5376", "text": "At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "mcs500_programming_manual", "chunk_index": 5376, "length": 95, "hash": "1faec2f3c7c1d9bb3f0c9a497f25d387"}
{"id": "mcs500_programming_manual_5377", "text": "\u2013 ce: elbow configuration parameter, -1, 1, or 0\u2020.", "source": "mcs500_programming_manual", "chunk_index": 5377, "length": 50, "hash": "87a04f596233ca5cc095752ee007307b"}
{"id": "mcs500_programming_manual_5378", "text": ": elbow configuration parameter, -1, 1, or 0", "source": "mcs500_programming_manual", "chunk_index": 5378, "length": 44, "hash": "1482208d746162719fcc58f32fa9e2e2"}
{"id": "mcs500_programming_manual_5379", "text": "\u2020 At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "mcs500_programming_manual", "chunk_index": 5379, "length": 97, "hash": "8a65935c2dc5cb16de8faf10ef5566ad"}
{"id": "mcs500_programming_manual_5380", "text": "At the corresponding singularity, we return 0, but display the text \u201cn/a\u201d in the web interface.", "source": "mcs500_programming_manual", "chunk_index": 5380, "length": 95, "hash": "1faec2f3c7c1d9bb3f0c9a497f25d387"}
{"id": "mcs500_programming_manual_5381", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5381, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5382", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5382, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5383", "text": "In cyclic protocols, the command GetRtTargetConf (page 268) is represented by the\nTargetConfiguration section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5383, "length": 126, "hash": "7714711bbab56d626c1bbf67ad3a3bde"}
{"id": "mcs500_programming_manual_5384", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5384, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5385", "text": "(page 268) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5385, "length": 32, "hash": "12ca11a4190f89580389d301ef029a96"}
{"id": "mcs500_programming_manual_5386", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5386, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5387", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5387, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5388", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5388, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5389", "text": "This command returns the turn configuration parameters calculated from the current target\njoint value for the last joint.", "source": "mcs500_programming_manual", "chunk_index": 5389, "length": 121, "hash": "8c0a4570a2a4842e6c73b0540d75dad6"}
{"id": "mcs500_programming_manual_5390", "text": "This command returns the turn configuration parameters calculated from the current target\njoint value for the last joint.", "source": "mcs500_programming_manual", "chunk_index": 5390, "length": 121, "hash": "8c0a4570a2a4842e6c73b0540d75dad6"}
{"id": "mcs500_programming_manual_5391", "text": "GetRtTargetConfTurn()", "source": "mcs500_programming_manual", "chunk_index": 5391, "length": 21, "hash": "3512faa2cc07f49b84fb98e478e2c3b5"}
{"id": "mcs500_programming_manual_5392", "text": "GetRtTargetConfTurn()", "source": "mcs500_programming_manual", "chunk_index": 5392, "length": 21, "hash": "3512faa2cc07f49b84fb98e478e2c3b5"}
{"id": "mcs500_programming_manual_5393", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5393, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5394", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5394, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5395", "text": "\u2013 ct: turn configuration parameter, an integer number.", "source": "mcs500_programming_manual", "chunk_index": 5395, "length": 54, "hash": "7aabb7f3d531d15887a13c2f94591872"}
{"id": "mcs500_programming_manual_5396", "text": ": turn configuration parameter, an integer number.", "source": "mcs500_programming_manual", "chunk_index": 5396, "length": 50, "hash": "3ac9c05b953e032e1b6a179fd4f5588f"}
{"id": "mcs500_programming_manual_5397", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5397, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5398", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5398, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5399", "text": "In cyclic protocols, the command GetRtTargetConfTurn (page 269) is represented by the\nTargetConfiguration section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5399, "length": 130, "hash": "c6343e72212b7f58c13058c317dc0a22"}
{"id": "mcs500_programming_manual_5400", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5400, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5401", "text": "(page 269) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5401, "length": 32, "hash": "d3a56a250e144d424339913a17308792"}
{"id": "mcs500_programming_manual_5402", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5402, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5403", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5403, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5404", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5404, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5405", "text": "This command returns the current target joint set.", "source": "mcs500_programming_manual", "chunk_index": 5405, "length": 50, "hash": "c38948308940608dff2bf990f6f4e8d3"}
{"id": "mcs500_programming_manual_5406", "text": "This command returns the current target joint set.", "source": "mcs500_programming_manual", "chunk_index": 5406, "length": 50, "hash": "c38948308940608dff2bf990f6f4e8d3"}
{"id": "mcs500_programming_manual_5407", "text": "GetRtTargetJointPos()", "source": "mcs500_programming_manual", "chunk_index": 5407, "length": 21, "hash": "5a45677d08b0ac2e7540f60505d03a63"}
{"id": "mcs500_programming_manual_5408", "text": "GetRtTargetJointPos()", "source": "mcs500_programming_manual", "chunk_index": 5408, "length": 21, "hash": "5a45677d08b0ac2e7540f60505d03a63"}
{"id": "mcs500_programming_manual_5409", "text": "\u2022 [2200][t, \u03b81, \u03b82, d3, \u03b84]", "source": "mcs500_programming_manual", "chunk_index": 5409, "length": 27, "hash": "28c1154f1d0f5e569bee4b5eb3eafef5"}
{"id": "mcs500_programming_manual_5410", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5410, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5411", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5411, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5412", "text": "\u2013 \u03b81, \u03b82, \u03b84: the angles of joint 1, 2, and 4, in degrees;", "source": "mcs500_programming_manual", "chunk_index": 5412, "length": 58, "hash": "dbbb6ca5d51fb6bf2dd62aecfe718425"}
{"id": "mcs500_programming_manual_5413", "text": ": the angles of joint 1, 2, and 4, in degrees;", "source": "mcs500_programming_manual", "chunk_index": 5413, "length": 46, "hash": "d874f6b7e5579309cfef07f8c3d0741f"}
{"id": "mcs500_programming_manual_5414", "text": "\u2013 d3: the position of joint 3, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5414, "length": 37, "hash": "654a7e00795494d0e7136cb49919beb7"}
{"id": "mcs500_programming_manual_5415", "text": ": the position of joint 3, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5415, "length": 33, "hash": "e75d1adb89bd84674578ab2d8744eeb4"}
{"id": "mcs500_programming_manual_5416", "text": "The deprecated GetJoints command, which remains supported, returns the same data,\nexcept for the timestamp. The message ID is also different, being 2026.", "source": "mcs500_programming_manual", "chunk_index": 5416, "length": 153, "hash": "bd001a5906d20d128dc52681a9ed45e2"}
{"id": "mcs500_programming_manual_5417", "text": "The deprecated GetJoints command, which remains supported, returns the same data,\nexcept for the timestamp. The message ID is also different, being 2026.", "source": "mcs500_programming_manual", "chunk_index": 5417, "length": 153, "hash": "bd001a5906d20d128dc52681a9ed45e2"}
{"id": "mcs500_programming_manual_5418", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5418, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5419", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5419, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5420", "text": "In cyclic protocols, the command GetRtTargetJointPos (page 270) is represented by the\nTargetJointSet section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5420, "length": 125, "hash": "fed81c2079f99f87eff2df459ae6c46d"}
{"id": "mcs500_programming_manual_5421", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5421, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5422", "text": "(page 270) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5422, "length": 32, "hash": "a094d909693bc00652774f94f65d65f6"}
{"id": "mcs500_programming_manual_5423", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5423, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5424", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5424, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5425", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5425, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5426", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 5426, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_5427", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 5427, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_5428", "text": "This command returns the current target (calculated) motor torques.", "source": "mcs500_programming_manual", "chunk_index": 5428, "length": 67, "hash": "7ca80d6a85ea2358b55096bc0917f4b1"}
{"id": "mcs500_programming_manual_5429", "text": "This command returns the current target (calculated) motor torques.", "source": "mcs500_programming_manual", "chunk_index": 5429, "length": 67, "hash": "7ca80d6a85ea2358b55096bc0917f4b1"}
{"id": "mcs500_programming_manual_5430", "text": "GetRtTargetJointTorq()", "source": "mcs500_programming_manual", "chunk_index": 5430, "length": 22, "hash": "06d0a1785aa29332869aefa59dae942c"}
{"id": "mcs500_programming_manual_5431", "text": "GetRtTargetJointTorq()", "source": "mcs500_programming_manual", "chunk_index": 5431, "length": 22, "hash": "06d0a1785aa29332869aefa59dae942c"}
{"id": "mcs500_programming_manual_5432", "text": "\u2022 [2203][t, \u03c41, \u03c42, \u03c43, \u03c44]", "source": "mcs500_programming_manual", "chunk_index": 5432, "length": 27, "hash": "f778e6b5fae00cbba26f64e9c7884f3a"}
{"id": "mcs500_programming_manual_5433", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5433, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5434", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5434, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5435", "text": "\u2013 \u03c4i: the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "mcs500_programming_manual", "chunk_index": 5435, "length": 85, "hash": "02b09d3b0461f9e05603410f2b8d23b7"}
{"id": "mcs500_programming_manual_5436", "text": ": the torque of motor i as a signed percentage of the maximum allowable torque (i", "source": "mcs500_programming_manual", "chunk_index": 5436, "length": 81, "hash": "5044aafb665d3dbf00f18a5b5b4c8a1d"}
{"id": "mcs500_programming_manual_5437", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5437, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5438", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5438, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5439", "text": "In cyclic protocols, the command GetRtTargetJointTorq (page 271) is represented by\nDynamicDataTypeID 33. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5439, "length": 136, "hash": "eb90f2ed8165ba007bc8210726efa2a0"}
{"id": "mcs500_programming_manual_5440", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5440, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5441", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 5441, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_5442", "text": "(page 271) is represented by", "source": "mcs500_programming_manual", "chunk_index": 5442, "length": 28, "hash": "c4096a97766d420f485c921020f5e9f5"}
{"id": "mcs500_programming_manual_5443", "text": "33. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5443, "length": 35, "hash": "737a2e666d6fcabfa49a14a243ee18ce"}
{"id": "mcs500_programming_manual_5444", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 5444, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_5445", "text": "GetRtTargetJointTorq", "source": "mcs500_programming_manual", "chunk_index": 5445, "length": 20, "hash": "04714cd603a2c483a685074c2fe3d8a0"}
{"id": "mcs500_programming_manual_5446", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5446, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5447", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5447, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5448", "text": "This command returns the current target joint velocities.", "source": "mcs500_programming_manual", "chunk_index": 5448, "length": 57, "hash": "d6194383ec313983fa90a2a28ed7f4e3"}
{"id": "mcs500_programming_manual_5449", "text": "This command returns the current target joint velocities.", "source": "mcs500_programming_manual", "chunk_index": 5449, "length": 57, "hash": "d6194383ec313983fa90a2a28ed7f4e3"}
{"id": "mcs500_programming_manual_5450", "text": "GetRtTargetJointVel()", "source": "mcs500_programming_manual", "chunk_index": 5450, "length": 21, "hash": "5d3170a985a7fbaad9b1183d4d21a44a"}
{"id": "mcs500_programming_manual_5451", "text": "GetRtTargetJointVel()", "source": "mcs500_programming_manual", "chunk_index": 5451, "length": 21, "hash": "5d3170a985a7fbaad9b1183d4d21a44a"}
{"id": "mcs500_programming_manual_5452", "text": "\u2022 [2202][t, \u03c91, \u03c92, v3, \u03c94]", "source": "mcs500_programming_manual", "chunk_index": 5452, "length": 27, "hash": "166ee7266baa76aab35124b6b52db48f"}
{"id": "mcs500_programming_manual_5453", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5453, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5454", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5454, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5455", "text": "\u2013 \u03c91, \u03c92, \u03c94: the rates of change of joints 1, 2, and 4;", "source": "mcs500_programming_manual", "chunk_index": 5455, "length": 56, "hash": "b327ca6326b20e38e45a00c52fc95c86"}
{"id": "mcs500_programming_manual_5456", "text": ": the rates of change of joints 1, 2, and 4;", "source": "mcs500_programming_manual", "chunk_index": 5456, "length": 44, "hash": "cc7349767e68e2215e275cbe9131a761"}
{"id": "mcs500_programming_manual_5457", "text": "\u2013 v3: the rate of change of joint 3, in mm/s.", "source": "mcs500_programming_manual", "chunk_index": 5457, "length": 45, "hash": "603a46121f6bea0339fe6bec81bb87be"}
{"id": "mcs500_programming_manual_5458", "text": ": the rate of change of joint 3, in mm/s.", "source": "mcs500_programming_manual", "chunk_index": 5458, "length": 41, "hash": "ca693a1f7c9dc67e0d5f427efe64a68a"}
{"id": "mcs500_programming_manual_5459", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5459, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5460", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5460, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5461", "text": "In cyclic protocols,\nDynamicDataTypeID 32. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5461, "length": 74, "hash": "067d87f7d4bb9e60f7e50e3b76249b35"}
{"id": "mcs500_programming_manual_5462", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5462, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5463", "text": "32. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5463, "length": 35, "hash": "790de9f5ea22e9b7c8fe07e89b46b8b2"}
{"id": "mcs500_programming_manual_5464", "text": "the command GetRtTargetJointVel (page 272)", "source": "mcs500_programming_manual", "chunk_index": 5464, "length": 42, "hash": "092371cbceabc09bb2347fe3250cbc40"}
{"id": "mcs500_programming_manual_5465", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5465, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5466", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5466, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5467", "text": "This command returns the current definition of the TRF with respect to the FRF, set by\nthe SetTrf (page 166) command. It returns exactly the same pose as the GetTrf (page 251)\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "mcs500_programming_manual", "chunk_index": 5467, "length": 260, "hash": "4f9cc47b9a15ebca37956856a3696301"}
{"id": "mcs500_programming_manual_5468", "text": "This command returns the current definition of the TRF with respect to the FRF, set by\nthe", "source": "mcs500_programming_manual", "chunk_index": 5468, "length": 90, "hash": "4c8c65331bb53be1861ec92e3e70b0db"}
{"id": "mcs500_programming_manual_5469", "text": "(page 166) command. It returns exactly the same pose as the", "source": "mcs500_programming_manual", "chunk_index": 5469, "length": 59, "hash": "c3dbdb76936dddc12b4f9b63ecafebcb"}
{"id": "mcs500_programming_manual_5470", "text": "(page 251)\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "mcs500_programming_manual", "chunk_index": 5470, "length": 95, "hash": "a21b089f155b56d155cf5d151c6b9271"}
{"id": "mcs500_programming_manual_5471", "text": "\u2022 [2229][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5471, "length": 20, "hash": "1911ee19a3ac16559992ab74f545d86f"}
{"id": "mcs500_programming_manual_5472", "text": "\u2022 [2229][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5472, "length": 20, "hash": "1911ee19a3ac16559992ab74f545d86f"}
{"id": "mcs500_programming_manual_5473", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5473, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5474", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5474, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5475", "text": "\u2013 x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5475, "length": 83, "hash": "0951bb0eb6db98ec29d8fcede85ab5bc"}
{"id": "mcs500_programming_manual_5476", "text": "x, y, z: the coordinates of the origin of the TRF with respect to the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5476, "length": 81, "hash": "ae0db040a111b95c7272f73864e193a9"}
{"id": "mcs500_programming_manual_5477", "text": "\u2013 \u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5477, "length": 44, "hash": "cef8a315de54745dec24f5745d3a1e1c"}
{"id": "mcs500_programming_manual_5478", "text": "\u03b3: orientation of the TRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5478, "length": 42, "hash": "623f279344b28e714c24935579c4396f"}
{"id": "mcs500_programming_manual_5479", "text": "with respect to the FRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5479, "length": 36, "hash": "555a477008637770fa638289e1c8cf5d"}
{"id": "mcs500_programming_manual_5480", "text": "with respect to the FRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5480, "length": 36, "hash": "555a477008637770fa638289e1c8cf5d"}
{"id": "mcs500_programming_manual_5481", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5481, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5482", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5482, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5483", "text": "In cyclic protocols, the command GetRtTrf (page 273) is represented by the TargetTrf section\n(see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5483, "length": 109, "hash": "1fba592640148710a055d7bd8a8a4749"}
{"id": "mcs500_programming_manual_5484", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5484, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5485", "text": "(page 273) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5485, "length": 32, "hash": "6321f2c6daa515311d909d603e922246"}
{"id": "mcs500_programming_manual_5486", "text": "section\n(see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5486, "length": 24, "hash": "8d278a56b0bfe56eec58f80c5ec6bfa6"}
{"id": "mcs500_programming_manual_5487", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5487, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5488", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5488, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5489", "text": "This command returns the current definition of the WRF with respect to the BRF, set by the\nIt returns exactly the same pose as the GetWrf (page 253)\nSetWrf (page 168) command.\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "mcs500_programming_manual", "chunk_index": 5489, "length": 260, "hash": "da2264b3b89f20af58f3a9bea69c6b69"}
{"id": "mcs500_programming_manual_5490", "text": "This command returns the current definition of the WRF with respect to the BRF, set by the\nIt returns exactly the same pose as the", "source": "mcs500_programming_manual", "chunk_index": 5490, "length": 130, "hash": "ce8d44e5925545c9ae6fdd5762069a4e"}
{"id": "mcs500_programming_manual_5491", "text": "(page 168) command.\ncommand, but the response code is different, and a timestamp precedes the pose data.", "source": "mcs500_programming_manual", "chunk_index": 5491, "length": 104, "hash": "2c3e51c753fd45e3845c451e80c2069c"}
{"id": "mcs500_programming_manual_5492", "text": "\u2022 [2228][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5492, "length": 20, "hash": "f5b469da0ed574b9e7188d858bfee0c1"}
{"id": "mcs500_programming_manual_5493", "text": "\u2022 [2228][x, y, z, \u03b3]", "source": "mcs500_programming_manual", "chunk_index": 5493, "length": 20, "hash": "f5b469da0ed574b9e7188d858bfee0c1"}
{"id": "mcs500_programming_manual_5494", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5494, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5495", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5495, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5496", "text": "\u2013 x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5496, "length": 83, "hash": "ca6c96842f50f5323f9bc866690ce512"}
{"id": "mcs500_programming_manual_5497", "text": "x, y, z: the coordinates of the origin of the WRF with respect to the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5497, "length": 81, "hash": "54a34c93965e04204ee415f1cab90e38"}
{"id": "mcs500_programming_manual_5498", "text": "\u2013 \u03b3: orientation of the WRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5498, "length": 44, "hash": "e84ddca00e4d9f80af441fac67d9c978"}
{"id": "mcs500_programming_manual_5499", "text": "\u03b3: orientation of the WRF about its z-axis", "source": "mcs500_programming_manual", "chunk_index": 5499, "length": 42, "hash": "c38281ceead4b252a2837fc5363c097b"}
{"id": "mcs500_programming_manual_5500", "text": "with respect to the BRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5500, "length": 36, "hash": "06b5fde5b83187371a7efac747d280e5"}
{"id": "mcs500_programming_manual_5501", "text": "with respect to the BRF, in degrees.", "source": "mcs500_programming_manual", "chunk_index": 5501, "length": 36, "hash": "06b5fde5b83187371a7efac747d280e5"}
{"id": "mcs500_programming_manual_5502", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5502, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5503", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5503, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5504", "text": "In cyclic protocols, the command GetRtWrf (page 274) is represented by the TargetWrf\nsection (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5504, "length": 109, "hash": "7e202bdd6b1aa72e3f5dc83b01ed5d88"}
{"id": "mcs500_programming_manual_5505", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5505, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5506", "text": "(page 274) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5506, "length": 32, "hash": "01fbb029a1a347783a822f52bce36785"}
{"id": "mcs500_programming_manual_5507", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5507, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5508", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5508, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5509", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5509, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5510", "text": "This command returns the current Epoch Time in seconds, set using the SetRtc (page 200),\nafter every reboot of the robot. Note that this is different from the timestamp returned by\nall GetRt* commands, which is in microseconds. Furthermore, these two time measurements\nhave different zero references.", "source": "mcs500_programming_manual", "chunk_index": 5510, "length": 300, "hash": "0ddcd51d3d069112d57b8d5cb4cc9ed0"}
{"id": "mcs500_programming_manual_5511", "text": "This command returns the current Epoch Time in seconds, set using the", "source": "mcs500_programming_manual", "chunk_index": 5511, "length": 69, "hash": "72a870d73498e9158032c41f8ec1c89b"}
{"id": "mcs500_programming_manual_5512", "text": "(page 200),\nafter every reboot of the robot. Note that this is different from the timestamp returned by\nall GetRt* commands, which is in microseconds. Furthermore, these two time measurements\nhave different zero references.", "source": "mcs500_programming_manual", "chunk_index": 5512, "length": 223, "hash": "741fcbc155d8a995d1c04668a8e9fb9c"}
{"id": "mcs500_programming_manual_5513", "text": "\u2013 t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00~UTC", "source": "mcs500_programming_manual", "chunk_index": 5513, "length": 78, "hash": "a8b424fb449cfe14f719860dabc088ea"}
{"id": "mcs500_programming_manual_5514", "text": "t: Epoch time as defined in Unix (i.e., number of seconds since 00:00:00~UTC", "source": "mcs500_programming_manual", "chunk_index": 5514, "length": 76, "hash": "7baf12a57ef610b36b4c6e20458ea355"}
{"id": "mcs500_programming_manual_5515", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5515, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5516", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5516, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5517", "text": "In cyclic protocols, the command GetRtc (page 275) is represented by the RobotTimestamp\nsection (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5517, "length": 112, "hash": "7e27b41ccde58b3e63acabf7567f692f"}
{"id": "mcs500_programming_manual_5518", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5518, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5519", "text": "(page 275) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5519, "length": 32, "hash": "1f2f9b02c709a09e378f5771c2e67ab9"}
{"id": "mcs500_programming_manual_5520", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5520, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5521", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5521, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5522", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5522, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5523", "text": "This command returns the status of specific safety stop signals.", "source": "mcs500_programming_manual", "chunk_index": 5523, "length": 64, "hash": "a693c54bd777a71a9387ca52c13cb501"}
{"id": "mcs500_programming_manual_5524", "text": "This command returns the status of specific safety stop signals.", "source": "mcs500_programming_manual", "chunk_index": 5524, "length": 64, "hash": "a693c54bd777a71a9387ca52c13cb501"}
{"id": "mcs500_programming_manual_5525", "text": "GetSafetyStopStatus(n)", "source": "mcs500_programming_manual", "chunk_index": 5525, "length": 22, "hash": "06904b4335cfa36d8b8496f0b1e94dc3"}
{"id": "mcs500_programming_manual_5526", "text": "GetSafetyStopStatus(n)", "source": "mcs500_programming_manual", "chunk_index": 5526, "length": 22, "hash": "06904b4335cfa36d8b8496f0b1e94dc3"}
{"id": "mcs500_programming_manual_5527", "text": "\u2022 n: any of the following four-digit codes:", "source": "mcs500_programming_manual", "chunk_index": 5527, "length": 43, "hash": "b27de553cd5ac83e71cd356513da7c1b"}
{"id": "mcs500_programming_manual_5528", "text": "\u2022 n: any of the following four-digit codes:", "source": "mcs500_programming_manual", "chunk_index": 5528, "length": 43, "hash": "b27de553cd5ac83e71cd356513da7c1b"}
{"id": "mcs500_programming_manual_5529", "text": "\u2013 3032, for the state of the P-Stop 2 safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5529, "length": 57, "hash": "acbad64af7e223a5de7de6b46f2c9e36"}
{"id": "mcs500_programming_manual_5530", "text": "3032, for the state of the P-Stop 2 safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5530, "length": 55, "hash": "1bc24df4d8e52a92556acfdf14fffeac"}
{"id": "mcs500_programming_manual_5531", "text": "\u2013 3069, for the state of the P-Stop 1 safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5531, "length": 57, "hash": "f684c204f069816ea4041fe5752c54cc"}
{"id": "mcs500_programming_manual_5532", "text": "3069, for the state of the P-Stop 1 safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5532, "length": 55, "hash": "cbd2f1c943db371b2c121617e8447e66"}
{"id": "mcs500_programming_manual_5533", "text": "\u2013 3070, for the state of the E-Stop safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5533, "length": 55, "hash": "4e4953a7896c9cd3144a5fe53d2f176c"}
{"id": "mcs500_programming_manual_5534", "text": "3070, for the state of the E-Stop safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5534, "length": 53, "hash": "ad86006121cbbd92b7f86faf94f9d9ba"}
{"id": "mcs500_programming_manual_5535", "text": "\u2013 3080, for the state of the operation mode safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5535, "length": 63, "hash": "09660300e5df9848b8715aec5cac747b"}
{"id": "mcs500_programming_manual_5536", "text": "3080, for the state of the operation mode safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5536, "length": 61, "hash": "658ce622e8c9484a23a4e95f1c51dcb5"}
{"id": "mcs500_programming_manual_5537", "text": "\u2013 3081, for the state of the enabling device released safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5537, "length": 73, "hash": "2d481c13eabc9a3e5851877a90051c3c"}
{"id": "mcs500_programming_manual_5538", "text": "3081, for the state of the enabling device released safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5538, "length": 71, "hash": "a3dd499f5cd100facb036f09a6ed706c"}
{"id": "mcs500_programming_manual_5539", "text": "\u2013 3082, for the state of the voltage fluctuation safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5539, "length": 68, "hash": "f079d7d875f6b021f5997e981c68c285"}
{"id": "mcs500_programming_manual_5540", "text": "3082, for the state of the voltage fluctuation safety stop signal;", "source": "mcs500_programming_manual", "chunk_index": 5540, "length": 66, "hash": "d2d7b06c0f82e8e3a16bd3ef1547e259"}
{"id": "mcs500_programming_manual_5541", "text": "\u2013 3083, for the state of the safety stop signal associated with robot reboot or reset", "source": "mcs500_programming_manual", "chunk_index": 5541, "length": 85, "hash": "81dadcdf9086b57b4b2c8a82162a072e"}
{"id": "mcs500_programming_manual_5542", "text": "3083, for the state of the safety stop signal associated with robot reboot or reset", "source": "mcs500_programming_manual", "chunk_index": 5542, "length": 83, "hash": "b65a53c3b1363a3c513706c18f0d7c33"}
{"id": "mcs500_programming_manual_5543", "text": "\u2013 3084, for the state of the safety stop signal associated with a safety signal mismatch;", "source": "mcs500_programming_manual", "chunk_index": 5543, "length": 89, "hash": "319cd9215bf17630efc1fa6b007fa9c5"}
{"id": "mcs500_programming_manual_5544", "text": "3084, for the state of the safety stop signal associated with a safety signal mismatch;", "source": "mcs500_programming_manual", "chunk_index": 5544, "length": 87, "hash": "0fc371a7ad1281a3e6aa723f83e188c1"}
{"id": "mcs500_programming_manual_5545", "text": "\u2013 3085, for the state of the safety stop signal associated with a standstill fault;", "source": "mcs500_programming_manual", "chunk_index": 5545, "length": 83, "hash": "8e08e970e7c7121cb9eac5f040ddc060"}
{"id": "mcs500_programming_manual_5546", "text": "3085, for the state of the safety stop signal associated with a standstill fault;", "source": "mcs500_programming_manual", "chunk_index": 5546, "length": 81, "hash": "08cf954ccb0522cb104495e1687efe3d"}
{"id": "mcs500_programming_manual_5547", "text": "\u2013 3086, for the state of the safety stop signal associated with a connection drop;", "source": "mcs500_programming_manual", "chunk_index": 5547, "length": 82, "hash": "cb8c0e2ea683f0893cd364037f63065f"}
{"id": "mcs500_programming_manual_5548", "text": "3086, for the state of the safety stop signal associated with a connection drop;", "source": "mcs500_programming_manual", "chunk_index": 5548, "length": 80, "hash": "8c0a4508923ada6875966ebf5c9bb5f4"}
{"id": "mcs500_programming_manual_5549", "text": "\u2013 3087, for the state of the safety stop signal associated with a minor error.", "source": "mcs500_programming_manual", "chunk_index": 5549, "length": 78, "hash": "74ff50bbc4c644537d6fe8310a89f670"}
{"id": "mcs500_programming_manual_5550", "text": "3087, for the state of the safety stop signal associated with a minor error.", "source": "mcs500_programming_manual", "chunk_index": 5550, "length": 76, "hash": "23a4026e2d54cd2ff75a99f95343d2f8"}
{"id": "mcs500_programming_manual_5551", "text": "\u2013 n: 0, 1 or 2, as described in Section 4.", "source": "mcs500_programming_manual", "chunk_index": 5551, "length": 42, "hash": "27cd0ecd8362f1a112c28befcf457dde"}
{"id": "mcs500_programming_manual_5552", "text": "n: 0, 1 or 2, as described in Section 4.", "source": "mcs500_programming_manual", "chunk_index": 5552, "length": 40, "hash": "727d01efd38c769575576992b18b1dfd"}
{"id": "mcs500_programming_manual_5553", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5553, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5554", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5554, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5555", "text": "In cyclic protocols, a broad spectrum of safety-related information is reported in the\nSafetyStatus section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5555, "length": 124, "hash": "c76697c2c965ee18f7a9c6152b509d24"}
{"id": "mcs500_programming_manual_5556", "text": "In cyclic protocols, a broad spectrum of safety-related information is reported in the", "source": "mcs500_programming_manual", "chunk_index": 5556, "length": 86, "hash": "38365e65038286ea7bb6ce732ac7cd50"}
{"id": "mcs500_programming_manual_5557", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5557, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5558", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5558, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5559", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5559, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5560", "text": "This command returns the status of the robot.", "source": "mcs500_programming_manual", "chunk_index": 5560, "length": 45, "hash": "abe631dd601dfb6571b37b1f10833ee1"}
{"id": "mcs500_programming_manual_5561", "text": "This command returns the status of the robot.", "source": "mcs500_programming_manual", "chunk_index": 5561, "length": 45, "hash": "abe631dd601dfb6571b37b1f10833ee1"}
{"id": "mcs500_programming_manual_5562", "text": "\u2022 [2007][as, hs, sm, es, pm, eob, eom]", "source": "mcs500_programming_manual", "chunk_index": 5562, "length": 38, "hash": "bd78941d3527ea18b9b07926ac0189d0"}
{"id": "mcs500_programming_manual_5563", "text": "\u2022 [2007][as, hs, sm, es, pm, eob, eom]", "source": "mcs500_programming_manual", "chunk_index": 5563, "length": 38, "hash": "bd78941d3527ea18b9b07926ac0189d0"}
{"id": "mcs500_programming_manual_5564", "text": "\u2013 as: activation state (1 if robot is activated, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5564, "length": 62, "hash": "14057834f0e208ae5c6babe80f5d0d84"}
{"id": "mcs500_programming_manual_5565", "text": "as: activation state (1 if robot is activated, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5565, "length": 60, "hash": "958065b3c284bb60a4bd6f6852d331ae"}
{"id": "mcs500_programming_manual_5566", "text": "\u2013 hs: homing state (1 if homing already performed, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5566, "length": 64, "hash": "a405806da10db129998fccda66092c44"}
{"id": "mcs500_programming_manual_5567", "text": "hs: homing state (1 if homing already performed, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5567, "length": 62, "hash": "ef29cf965a02991039c8cfff8f1fa688"}
{"id": "mcs500_programming_manual_5568", "text": "\u2013 sm: simulation mode (0 if simulation is disabled, 1 if real-time simulation is enabled,", "source": "mcs500_programming_manual", "chunk_index": 5568, "length": 89, "hash": "515eeefb568e5b9f940d33a3820e7231"}
{"id": "mcs500_programming_manual_5569", "text": "sm: simulation mode (0 if simulation is disabled, 1 if real-time simulation is enabled,", "source": "mcs500_programming_manual", "chunk_index": 5569, "length": 87, "hash": "25bfb9e2733fa492e92db48c4132e4f0"}
{"id": "mcs500_programming_manual_5570", "text": "2 if fast simulation is enabled);", "source": "mcs500_programming_manual", "chunk_index": 5570, "length": 33, "hash": "9be6f3b32c8dddf94cac16104336d17f"}
{"id": "mcs500_programming_manual_5571", "text": "2 if fast simulation is enabled);", "source": "mcs500_programming_manual", "chunk_index": 5571, "length": 33, "hash": "9be6f3b32c8dddf94cac16104336d17f"}
{"id": "mcs500_programming_manual_5572", "text": "\u2013 es: error status (1 for robot in error mode, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5572, "length": 60, "hash": "e2107bae90047a0c70c6d7eb888b37ec"}
{"id": "mcs500_programming_manual_5573", "text": "es: error status (1 for robot in error mode, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5573, "length": 58, "hash": "67319c071819e607250020503e20d90f"}
{"id": "mcs500_programming_manual_5574", "text": "\u2013 pm: pause motion status (1 if robot is in pause motion, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5574, "length": 71, "hash": "bd82bcf52cc733a01415842926888228"}
{"id": "mcs500_programming_manual_5575", "text": "pm: pause motion status (1 if robot is in pause motion, 0 otherwise);", "source": "mcs500_programming_manual", "chunk_index": 5575, "length": 69, "hash": "54d1aa0b31345d9e12e0fe7afec3906b"}
{"id": "mcs500_programming_manual_5576", "text": "\u2013 eob: end of block status (1 if robot is not moving and motion queue is empty, 0", "source": "mcs500_programming_manual", "chunk_index": 5576, "length": 81, "hash": "451a7be9c5335f0a39d92e7a879320f6"}
{"id": "mcs500_programming_manual_5577", "text": "eob: end of block status (1 if robot is not moving and motion queue is empty, 0", "source": "mcs500_programming_manual", "chunk_index": 5577, "length": 79, "hash": "eec3e6912ceaef26879682728cc7c209"}
{"id": "mcs500_programming_manual_5578", "text": "\u2013 eom: end of movement status (1 if robot is not moving, 0 if robot is moving).", "source": "mcs500_programming_manual", "chunk_index": 5578, "length": 79, "hash": "c9af5cae8f5a2ca91487dd11cf7151da"}
{"id": "mcs500_programming_manual_5579", "text": "eom: end of movement status (1 if robot is not moving, 0 if robot is moving).", "source": "mcs500_programming_manual", "chunk_index": 5579, "length": 77, "hash": "3682073d4fffb0c3c9ba20cce10521c7"}
{"id": "mcs500_programming_manual_5580", "text": "Note that pm = 1 if a PauseMotion (page 182) or a ClearMotion (page 173) was sent, or if the\nrobot is in error mode.", "source": "mcs500_programming_manual", "chunk_index": 5580, "length": 116, "hash": "ff90c485fdebca7e7827bab201cf39e8"}
{"id": "mcs500_programming_manual_5581", "text": "Note that pm = 1 if a", "source": "mcs500_programming_manual", "chunk_index": 5581, "length": 21, "hash": "9e0e213c7ff2b091f3c85deedd33e561"}
{"id": "mcs500_programming_manual_5582", "text": "(page 173) was sent, or if the\nrobot is in error mode.", "source": "mcs500_programming_manual", "chunk_index": 5582, "length": 54, "hash": "d7158007a44024a7350839eb73a04ace"}
{"id": "mcs500_programming_manual_5583", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5583, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5584", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5584, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5585", "text": "In cyclic protocols,\nRobotStatus section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5585, "length": 57, "hash": "b7004a0a3c9a97f61f026ed7d437eb47"}
{"id": "mcs500_programming_manual_5586", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5586, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5587", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5587, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5588", "text": "the command GetStatusRobot (page 277) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5588, "length": 59, "hash": "bb32af86bf9c79be04a03b5f99780035"}
{"id": "mcs500_programming_manual_5589", "text": "(page 277) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5589, "length": 32, "hash": "988ececd1b4c00cbc67d37854185ed52"}
{"id": "mcs500_programming_manual_5590", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5590, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5591", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5591, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5592", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 5592, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_5593", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 5593, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_5594", "text": "This command returns the status of the torque limits (whether a torque limit is currently\nexceeded).", "source": "mcs500_programming_manual", "chunk_index": 5594, "length": 100, "hash": "d539269cac1727e7795e3b6e6a6b0730"}
{"id": "mcs500_programming_manual_5595", "text": "This command returns the status of the torque limits (whether a torque limit is currently\nexceeded).", "source": "mcs500_programming_manual", "chunk_index": 5595, "length": 100, "hash": "d539269cac1727e7795e3b6e6a6b0730"}
{"id": "mcs500_programming_manual_5596", "text": "GetTorqueLimitsStatus()", "source": "mcs500_programming_manual", "chunk_index": 5596, "length": 23, "hash": "1da257b480c6a29a155c9cc196bbd998"}
{"id": "mcs500_programming_manual_5597", "text": "GetTorqueLimitsStatus()", "source": "mcs500_programming_manual", "chunk_index": 5597, "length": 23, "hash": "1da257b480c6a29a155c9cc196bbd998"}
{"id": "mcs500_programming_manual_5598", "text": "\u2013 s: status (0 if no detection, 1 if a torque limit was exceeded).", "source": "mcs500_programming_manual", "chunk_index": 5598, "length": 66, "hash": "b7413118e3f75985d09754a1e8c630f6"}
{"id": "mcs500_programming_manual_5599", "text": "s: status (0 if no detection, 1 if a torque limit was exceeded).", "source": "mcs500_programming_manual", "chunk_index": 5599, "length": 64, "hash": "ffd1c533e1975cd3a8786a63dae8badc"}
{"id": "mcs500_programming_manual_5600", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5600, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5601", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5601, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5602", "text": "In cyclic protocols, the command GetTorqueLimitsStatus (page 278) is represented by the\nExcessiveTorque section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5602, "length": 128, "hash": "8abe259d1ab53044c0b25951c59cf39d"}
{"id": "mcs500_programming_manual_5603", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 5603, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_5604", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 5604, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_5605", "text": "(page 278) is represented by the", "source": "mcs500_programming_manual", "chunk_index": 5605, "length": 32, "hash": "05085424b2572275b2a9e382e4593cf6"}
{"id": "mcs500_programming_manual_5606", "text": "section (see Section 5).", "source": "mcs500_programming_manual", "chunk_index": 5606, "length": 24, "hash": "03b56a61c927f58a431624049054f5cb"}
{"id": "mcs500_programming_manual_5607", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 5607, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_5608", "text": "GetTorqueLimitsStatus", "source": "mcs500_programming_manual", "chunk_index": 5608, "length": 21, "hash": "e06150c6b45dcb6dbfceda3e37bab08f"}
{"id": "mcs500_programming_manual_5609", "text": "Work zone supervision and collision\nprevention commands", "source": "mcs500_programming_manual", "chunk_index": 5609, "length": 55, "hash": "0312324781a6e2c8d9f2ba250073c127"}
{"id": "mcs500_programming_manual_5610", "text": "Work zone supervision and collision\nprevention commands", "source": "mcs500_programming_manual", "chunk_index": 5610, "length": 55, "hash": "0312324781a6e2c8d9f2ba250073c127"}
{"id": "mcs500_programming_manual_5611", "text": "In addition to using the SetJointLimits (page 190) and SetJointLimitsCfg (page 191)\ncommands to further constrain the robot\u2019s joint limits, you can also define a work zone with\nthe SetWorkZoneLimits (page 290) command (see Figure 11). This command sets a bounding\nbox in the base reference frame (BRF). Similarly, you can define a \u201ctool sphere\u201d in the flange\nreference frame (FRF) using the SetToolSphere (page 288) command.", "source": "mcs500_programming_manual", "chunk_index": 5611, "length": 424, "hash": "644ceeecfda9022fb3861d2bc4d983f0"}
{"id": "mcs500_programming_manual_5612", "text": "In addition to using the", "source": "mcs500_programming_manual", "chunk_index": 5612, "length": 24, "hash": "81715336e236aa0c7175840fa198b733"}
{"id": "mcs500_programming_manual_5613", "text": "(page 191)\ncommands to further constrain the robot\u2019s joint limits, you can also define a work zone with\nthe", "source": "mcs500_programming_manual", "chunk_index": 5613, "length": 107, "hash": "0550ba3a5b636cfdc18aee13a64c99cb"}
{"id": "mcs500_programming_manual_5614", "text": "(page 290) command (see Figure 11). This command sets a bounding\nbox in the base reference frame (BRF). Similarly, you can define a \u201ctool sphere\u201d in the flange\nreference frame (FRF) using the", "source": "mcs500_programming_manual", "chunk_index": 5614, "length": 191, "hash": "0d13822ff941410ee4acc1081c942653"}
{"id": "mcs500_programming_manual_5615", "text": "You can then use the SetWorkZoneCfg (page 289) command to configure the robot to monitor\nwhether its links, tool sphere (including optional tooling), or flange center point (FCP) remain\nwithin the work zone. Additionally, the SetCollisionCfg (page 287) command enables the robot\nto prevent collisions between its links, tool sphere, and optional tooling.", "source": "mcs500_programming_manual", "chunk_index": 5615, "length": 354, "hash": "73bcd86df66df3582a150c0c0c999346"}
{"id": "mcs500_programming_manual_5616", "text": "You can then use the", "source": "mcs500_programming_manual", "chunk_index": 5616, "length": 20, "hash": "ab69119bb708a8aca52a0bfda68e9904"}
{"id": "mcs500_programming_manual_5617", "text": "(page 289) command to configure the robot to monitor\nwhether its links, tool sphere (including optional tooling), or flange center point (FCP) remain\nwithin the work zone. Additionally, the", "source": "mcs500_programming_manual", "chunk_index": 5617, "length": 189, "hash": "0ceeb694f616c21d3d26407b2671660f"}
{"id": "mcs500_programming_manual_5618", "text": "(page 287) command enables the robot", "source": "mcs500_programming_manual", "chunk_index": 5618, "length": 36, "hash": "7041706b81b3a583c3b431c54788a90c"}
{"id": "mcs500_programming_manual_5619", "text": "to prevent collisions between its links, tool sphere, and optional tooling.", "source": "mcs500_programming_manual", "chunk_index": 5619, "length": 75, "hash": "36c928b8fadfded81b0d9c7667dd4b48"}
{"id": "mcs500_programming_manual_5620", "text": "For both configurations, you can choose to have the robot either generate a warning\n(supervision only) or create a motion error (preventing a work zone breach or collision).\nTypically, you will want to prevent collisions, which is why the term \u201ccollision prevention\u201d\nis used. Conversely, you may only wish to detect work zone breaches without preventing\nthem, hence the term \u201cwork zone supervision.\u201d", "source": "mcs500_programming_manual", "chunk_index": 5620, "length": 399, "hash": "a59d517075b6d641fee43e3bff187550"}
{"id": "mcs500_programming_manual_5621", "text": "For both configurations, you can choose to have the robot either generate a warning\n(supervision only) or create a motion error (preventing a work zone breach or collision).\nTypically, you will want to prevent collisions, which is why the term \u201ccollision prevention\u201d\nis used. Conversely, you may only wish to detect work zone breaches without preventing\nthem, hence the term \u201cwork zone supervision.\u201d", "source": "mcs500_programming_manual", "chunk_index": 5621, "length": 399, "hash": "a59d517075b6d641fee43e3bff187550"}
{"id": "mcs500_programming_manual_5622", "text": "Note that you can use the MecaPortal to define these settings. For example, you can enable\nthe display of the work zone and tool sphere through the settings menu in the 3D view panel\nof the MecaPortal. When collisions occur, the colors of the colliding bodies will change to red.", "source": "mcs500_programming_manual", "chunk_index": 5622, "length": 279, "hash": "cf2a77b6c5ed51b781b714444fc75841"}
{"id": "mcs500_programming_manual_5623", "text": "Note that you can use the MecaPortal to define these settings. For example, you can enable\nthe display of the work zone and tool sphere through the settings menu in the 3D view panel\nof the MecaPortal. When collisions occur, the colors of the colliding bodies will change to red.", "source": "mcs500_programming_manual", "chunk_index": 5623, "length": 279, "hash": "cf2a77b6c5ed51b781b714444fc75841"}
{"id": "mcs500_programming_manual_5624", "text": "Figure 11 illustrates the objects currently supervised. The base STL model also includes part\nof the cables coming from the base (not shown).", "source": "mcs500_programming_manual", "chunk_index": 5624, "length": 141, "hash": "a0001b3aa21ba272abdee431538eb91b"}
{"id": "mcs500_programming_manual_5625", "text": "Figure 11 illustrates the objects currently supervised. The base STL model also includes part\nof the cables coming from the base (not shown).", "source": "mcs500_programming_manual", "chunk_index": 5625, "length": 141, "hash": "a0001b3aa21ba272abdee431538eb91b"}
{"id": "mcs500_programming_manual_5626", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5626, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5627", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5627, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5628", "text": "Figure 11: Objects tested in the work zone supervision and collision prevention feature", "source": "mcs500_programming_manual", "chunk_index": 5628, "length": 87, "hash": "b8fae16b040ae6a7bd70f86a45e8e0e2"}
{"id": "mcs500_programming_manual_5629", "text": "Figure 11: Objects tested in the work zone supervision and collision prevention feature", "source": "mcs500_programming_manual", "chunk_index": 5629, "length": 87, "hash": "b8fae16b040ae6a7bd70f86a45e8e0e2"}
{"id": "mcs500_programming_manual_5630", "text": "The work zone supervision and collision prevention feature is not safety rated.\nAdditionally, when the robot handles heavy or large objects at high speeds and with\nsignificant blending, there is a possibility that work zone breaches or collisions may be\ndetected a few milliseconds too late.", "source": "mcs500_programming_manual", "chunk_index": 5630, "length": 291, "hash": "d55cb623b9fe0a57eba4eaa03cbecb54"}
{"id": "mcs500_programming_manual_5631", "text": "The work zone supervision and collision prevention feature is not safety rated.\nAdditionally, when the robot handles heavy or large objects at high speeds and with\nsignificant blending, there is a possibility that work zone breaches or collisions may be", "source": "mcs500_programming_manual", "chunk_index": 5631, "length": 253, "hash": "7e9723a63020de7f847c1aceb61d42aa"}
{"id": "mcs500_programming_manual_5632", "text": "detected a few milliseconds too late.", "source": "mcs500_programming_manual", "chunk_index": 5632, "length": 37, "hash": "40f04f149fd14b5a49f77a59988025c2"}
{"id": "mcs500_programming_manual_5633", "text": "The following is the complete list of work zone supervision and collision prevention\ncommands, in alphabetical order:", "source": "mcs500_programming_manual", "chunk_index": 5633, "length": 117, "hash": "0d725449497255f18fd6c9375982a917"}
{"id": "mcs500_programming_manual_5634", "text": "The following is the complete list of work zone supervision and collision prevention\ncommands, in alphabetical order:", "source": "mcs500_programming_manual", "chunk_index": 5634, "length": 117, "hash": "0d725449497255f18fd6c9375982a917"}
{"id": "mcs500_programming_manual_5635", "text": "\u2022 GetCollisionStatus (page 282)", "source": "mcs500_programming_manual", "chunk_index": 5635, "length": 31, "hash": "aaa4c084819ce91effa81b61c048de0e"}
{"id": "mcs500_programming_manual_5636", "text": "\u2022 GetWorkZoneStatus (page 286)", "source": "mcs500_programming_manual", "chunk_index": 5636, "length": 30, "hash": "3255d85b057a3dae22d1977c191c9d92"}
{"id": "mcs500_programming_manual_5637", "text": "\u2022 SetCollisionCfg (page 287) / GetCollisionCfg (page 281)", "source": "mcs500_programming_manual", "chunk_index": 5637, "length": 57, "hash": "2e28960aa2d64c07af415916d1ac2db9"}
{"id": "mcs500_programming_manual_5638", "text": "\u2022 SetToolSphere (page 288) / GetToolSphere (page 283)", "source": "mcs500_programming_manual", "chunk_index": 5638, "length": 53, "hash": "44535ae81ae50c535423d2b9f24ba8fb"}
{"id": "mcs500_programming_manual_5639", "text": "\u2022 SetWorkZoneCfg (page 289) / GetWorkZoneCfg (page 284)", "source": "mcs500_programming_manual", "chunk_index": 5639, "length": 55, "hash": "5aa248d019783024ca7c8c8c9d07bb17"}
{"id": "mcs500_programming_manual_5640", "text": "\u2022 SetWorkZoneLimits (page 290) / GetWorkZoneLimits (page 285)", "source": "mcs500_programming_manual", "chunk_index": 5640, "length": 61, "hash": "73a1d1cf554980b2c55d99e9875295d7"}
{"id": "mcs500_programming_manual_5641", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5641, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5642", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5642, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5643", "text": "This command returns the severity level set with the SetCollisionCfg (page 287) command.", "source": "mcs500_programming_manual", "chunk_index": 5643, "length": 88, "hash": "ee9895443e5d29d5fc8b0c4c296dfb8c"}
{"id": "mcs500_programming_manual_5644", "text": "This command returns the severity level set with the", "source": "mcs500_programming_manual", "chunk_index": 5644, "length": 52, "hash": "63a86fe7a3c2339383de6822d321ecf0"}
{"id": "mcs500_programming_manual_5645", "text": "\u2013 l: severity level.", "source": "mcs500_programming_manual", "chunk_index": 5645, "length": 20, "hash": "719215870fcccfd2b0c56c2eb54c954f"}
{"id": "mcs500_programming_manual_5646", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5646, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5647", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5647, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5648", "text": "In cyclic protocols,\nDynamicDataTypeID 36. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5648, "length": 74, "hash": "8daf62f01bfb7ac61b8eec84fcd9dcaa"}
{"id": "mcs500_programming_manual_5649", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5649, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5650", "text": "36. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5650, "length": 35, "hash": "fd8d27c43b8772e0e1618381017c9200"}
{"id": "mcs500_programming_manual_5651", "text": "the GetCollisionCfg (page 281) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5651, "length": 56, "hash": "8c20fdc6bbc59c3155583ce29505c841"}
{"id": "mcs500_programming_manual_5652", "text": "(page 281) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5652, "length": 36, "hash": "a3a9c22703b732d2ff5ff20d47cd1bc3"}
{"id": "mcs500_programming_manual_5653", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5653, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5654", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5654, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5655", "text": "This command returns the current collision status (refer to Figure 11).", "source": "mcs500_programming_manual", "chunk_index": 5655, "length": 71, "hash": "b0cdb98f019fd390244180cfd0063fe2"}
{"id": "mcs500_programming_manual_5656", "text": "This command returns the current collision status (refer to Figure 11).", "source": "mcs500_programming_manual", "chunk_index": 5656, "length": 71, "hash": "b0cdb98f019fd390244180cfd0063fe2"}
{"id": "mcs500_programming_manual_5657", "text": "\u2022 [2182][v, g1, oid,1, g2, oid,2]", "source": "mcs500_programming_manual", "chunk_index": 5657, "length": 33, "hash": "106924612fb8fac167d443c668329d24"}
{"id": "mcs500_programming_manual_5658", "text": "\u2013 v: collision state (1 or 0\u2020),", "source": "mcs500_programming_manual", "chunk_index": 5658, "length": 31, "hash": "17dd05b44958a16a5d44eee601398f18"}
{"id": "mcs500_programming_manual_5659", "text": "v: collision state (1 or 0", "source": "mcs500_programming_manual", "chunk_index": 5659, "length": 26, "hash": "97244efdecd6b3c2d26d843116400018"}
{"id": "mcs500_programming_manual_5660", "text": "\u2013 g1, g2: group identifier of first and second colliding objects:", "source": "mcs500_programming_manual", "chunk_index": 5660, "length": 65, "hash": "f6bf6dc25c7d6cf8bbb96ec67b4cce03"}
{"id": "mcs500_programming_manual_5661", "text": ": group identifier of first and second colliding objects:", "source": "mcs500_programming_manual", "chunk_index": 5661, "length": 57, "hash": "1c3ad7aee4fcfb2b3ba9b0a7e67d787f"}
{"id": "mcs500_programming_manual_5662", "text": "\u2013 oid,1, oid,2: object ID of first and second in collision, depending on group identifier,", "source": "mcs500_programming_manual", "chunk_index": 5662, "length": 90, "hash": "c93376286ffe96aee661b15373cb436f"}
{"id": "mcs500_programming_manual_5663", "text": ": object ID of first and second in collision, depending on group identifier,", "source": "mcs500_programming_manual", "chunk_index": 5663, "length": 76, "hash": "13c92bd55860ac9b59b6c76e83870adc"}
{"id": "mcs500_programming_manual_5664", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "mcs500_programming_manual", "chunk_index": 5664, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "mcs500_programming_manual_5665", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "mcs500_programming_manual", "chunk_index": 5665, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "mcs500_programming_manual_5666", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "mcs500_programming_manual", "chunk_index": 5666, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "mcs500_programming_manual_5667", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "mcs500_programming_manual", "chunk_index": 5667, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "mcs500_programming_manual_5668", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 20,000 for MVK01,.", "source": "mcs500_programming_manual", "chunk_index": 5668, "length": 56, "hash": "f02fab6fc7c58349418a4e9385796875"}
{"id": "mcs500_programming_manual_5669", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 20,000 for MVK01,.", "source": "mcs500_programming_manual", "chunk_index": 5669, "length": 56, "hash": "f02fab6fc7c58349418a4e9385796875"}
{"id": "mcs500_programming_manual_5670", "text": "\u2020 If v = 0, g1 = g2 = oid,1 = oid,2 = 0.", "source": "mcs500_programming_manual", "chunk_index": 5670, "length": 40, "hash": "cf0569e5e52f8f806248ca29c0de90df"}
{"id": "mcs500_programming_manual_5671", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5671, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5672", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5672, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5673", "text": "In cyclic protocols,\nDynamicDataTypeID 37. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5673, "length": 74, "hash": "d2e6b699b186e8ebfbebba14aa3190c6"}
{"id": "mcs500_programming_manual_5674", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5674, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5675", "text": "37. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5675, "length": 35, "hash": "fdbcb706e0ac08bbf287b9fc0ef2bcd2"}
{"id": "mcs500_programming_manual_5676", "text": "the GetCollisionStatus (page 282) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5676, "length": 59, "hash": "30dd3934e0b32a4f4be6619e0c373ab6"}
{"id": "mcs500_programming_manual_5677", "text": "(page 282) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5677, "length": 36, "hash": "6a89a5e18a561e27477b9272c90718c5"}
{"id": "mcs500_programming_manual_5678", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5678, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5679", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5679, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5680", "text": "This command returns the current definition of the tool sphere, set with the SetToolSphere\n(page 288) command.", "source": "mcs500_programming_manual", "chunk_index": 5680, "length": 110, "hash": "9ba410633edcb94526804f21c341c037"}
{"id": "mcs500_programming_manual_5681", "text": "This command returns the current definition of the tool sphere, set with the", "source": "mcs500_programming_manual", "chunk_index": 5681, "length": 76, "hash": "2340bb5bd82e94e88b0bc7590f64d127"}
{"id": "mcs500_programming_manual_5682", "text": "\u2022 [2167][x, y, z, r]", "source": "mcs500_programming_manual", "chunk_index": 5682, "length": 20, "hash": "f5db7da9cfbd5c91fb213db98322a6e0"}
{"id": "mcs500_programming_manual_5683", "text": "\u2022 [2167][x, y, z, r]", "source": "mcs500_programming_manual", "chunk_index": 5683, "length": 20, "hash": "f5db7da9cfbd5c91fb213db98322a6e0"}
{"id": "mcs500_programming_manual_5684", "text": "\u2013 x, y, z: the coordinates of the center of the tool sphere with respect to the FRF, in", "source": "mcs500_programming_manual", "chunk_index": 5684, "length": 87, "hash": "eea3ef8183a887f74373845208059a7d"}
{"id": "mcs500_programming_manual_5685", "text": "x, y, z: the coordinates of the center of the tool sphere with respect to the FRF, in", "source": "mcs500_programming_manual", "chunk_index": 5685, "length": 85, "hash": "20f40a2a9d4352609810d8f512981154"}
{"id": "mcs500_programming_manual_5686", "text": "\u2013 r: the radius of the tool sphere, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5686, "length": 42, "hash": "6c67830eca4edabb08947fa6562e0988"}
{"id": "mcs500_programming_manual_5687", "text": "r: the radius of the tool sphere, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5687, "length": 40, "hash": "34d043a75fdcfd6d02919675901921b7"}
{"id": "mcs500_programming_manual_5688", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5688, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5689", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5689, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5690", "text": "In cyclic protocols,\nDynamicDataTypeID 19. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5690, "length": 74, "hash": "bd725a292ad81f1b96679756b2a226eb"}
{"id": "mcs500_programming_manual_5691", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5691, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5692", "text": "19. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5692, "length": 35, "hash": "a6a9318481953a6f5537b0be8a84b9cd"}
{"id": "mcs500_programming_manual_5693", "text": "the GetToolSphere (page 283) command is", "source": "mcs500_programming_manual", "chunk_index": 5693, "length": 39, "hash": "aaa873f1225fb34d29946a06704a8929"}
{"id": "mcs500_programming_manual_5694", "text": "(page 283) command is", "source": "mcs500_programming_manual", "chunk_index": 5694, "length": 21, "hash": "f2826c828eee8af5f88033dc964d2747"}
{"id": "mcs500_programming_manual_5695", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5695, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5696", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5696, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5697", "text": "This command returns the current work zone configuration, set with the SetWorkZoneCfg\n(page 289) command.", "source": "mcs500_programming_manual", "chunk_index": 5697, "length": 105, "hash": "505e835a73c1117bf8cc406272221228"}
{"id": "mcs500_programming_manual_5698", "text": "This command returns the current work zone configuration, set with the", "source": "mcs500_programming_manual", "chunk_index": 5698, "length": 70, "hash": "31cf0b5e3b5f7b53c9d52f73c0747088"}
{"id": "mcs500_programming_manual_5699", "text": "\u2013 l: event severity;", "source": "mcs500_programming_manual", "chunk_index": 5699, "length": 20, "hash": "7b56f9cbd50b4d3219e951cab4c9ab25"}
{"id": "mcs500_programming_manual_5700", "text": "\u2013 m: supervision mode.", "source": "mcs500_programming_manual", "chunk_index": 5700, "length": 22, "hash": "9849931da139b98cae7e55ce99012d7a"}
{"id": "mcs500_programming_manual_5701", "text": "m: supervision mode.", "source": "mcs500_programming_manual", "chunk_index": 5701, "length": 20, "hash": "2c6d1eebe2564b434227024658dca1fc"}
{"id": "mcs500_programming_manual_5702", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5702, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5703", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5703, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5704", "text": "In cyclic protocols,\nDynamicDataTypeID 17. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5704, "length": 74, "hash": "b647e2c0457e34c087e0e93964df1a5c"}
{"id": "mcs500_programming_manual_5705", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5705, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5706", "text": "17. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5706, "length": 35, "hash": "75b8e07ed3415901ce52f98371b7d154"}
{"id": "mcs500_programming_manual_5707", "text": "the GetWorkZoneCfg (page 284) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5707, "length": 55, "hash": "8a6dbeb72df14e901ba606d3667c5416"}
{"id": "mcs500_programming_manual_5708", "text": "(page 284) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5708, "length": 36, "hash": "dac17b281988482f08ddc1d4b35f4c93"}
{"id": "mcs500_programming_manual_5709", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5709, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5710", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5710, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5711", "text": "This command returns the current definition of the bounding box with respect to the BRF, set\nwith the SetWorkZoneLimits (page 290) command.", "source": "mcs500_programming_manual", "chunk_index": 5711, "length": 139, "hash": "c05f8d06bce5ce4743658a6edd266393"}
{"id": "mcs500_programming_manual_5712", "text": "This command returns the current definition of the bounding box with respect to the BRF, set\nwith the", "source": "mcs500_programming_manual", "chunk_index": 5712, "length": 101, "hash": "d21365f4f9820ef64af9bed9841c2653"}
{"id": "mcs500_programming_manual_5713", "text": "\u2022 [2165][xmin, ymin, zmin, xmax, ymax, zmax]", "source": "mcs500_programming_manual", "chunk_index": 5713, "length": 44, "hash": "180df2ab250b080d0b9d0af64e7d3d4a"}
{"id": "mcs500_programming_manual_5714", "text": "\u2013 xmin, ymin, zmin: the coordinates of the minimum corner of the cuboid in the BRF, in", "source": "mcs500_programming_manual", "chunk_index": 5714, "length": 86, "hash": "8e94c6821601e12febf59590c41cc063"}
{"id": "mcs500_programming_manual_5715", "text": ": the coordinates of the minimum corner of the cuboid in the BRF, in", "source": "mcs500_programming_manual", "chunk_index": 5715, "length": 68, "hash": "1b85103bf20f6d39672ce71f7a1407a3"}
{"id": "mcs500_programming_manual_5716", "text": "\u2013 xmax, ymax, zmax: the coordinates of the maximum corner of the cuboid in the BRF, in", "source": "mcs500_programming_manual", "chunk_index": 5716, "length": 86, "hash": "7dccc68a990546feb71988703e85bc7a"}
{"id": "mcs500_programming_manual_5717", "text": ": the coordinates of the maximum corner of the cuboid in the BRF, in", "source": "mcs500_programming_manual", "chunk_index": 5717, "length": 68, "hash": "7b33b7cbad15548e3c0e54f1cbf4c3f0"}
{"id": "mcs500_programming_manual_5718", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5718, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5719", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5719, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5720", "text": "In cyclic protocols,\nDynamicDataTypeID 18. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5720, "length": 74, "hash": "4e7f99b1a26f4a27004a14be08243435"}
{"id": "mcs500_programming_manual_5721", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5721, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5722", "text": "18. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5722, "length": 35, "hash": "610a1054e2a5621209792edb6131409f"}
{"id": "mcs500_programming_manual_5723", "text": "the GetWorkZoneLimits (page 285) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5723, "length": 58, "hash": "0daf80097fe2a0913f94b5cef2ea0abf"}
{"id": "mcs500_programming_manual_5724", "text": "(page 285) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5724, "length": 36, "hash": "7f1ac8f159a58eaf4713da05290530db"}
{"id": "mcs500_programming_manual_5725", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5725, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5726", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5726, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5727", "text": "This command returns the current work zone violation status (refer to Figure 11).", "source": "mcs500_programming_manual", "chunk_index": 5727, "length": 81, "hash": "3c0fa7f0192f8e6d6b2e9ab19de18800"}
{"id": "mcs500_programming_manual_5728", "text": "This command returns the current work zone violation status (refer to Figure 11).", "source": "mcs500_programming_manual", "chunk_index": 5728, "length": 81, "hash": "3c0fa7f0192f8e6d6b2e9ab19de18800"}
{"id": "mcs500_programming_manual_5729", "text": "\u2013 v: work zone violation state (1 or 0\u2020),", "source": "mcs500_programming_manual", "chunk_index": 5729, "length": 41, "hash": "477231a717d501f20138669c01c4ceb0"}
{"id": "mcs500_programming_manual_5730", "text": "v: work zone violation state (1 or 0", "source": "mcs500_programming_manual", "chunk_index": 5730, "length": 36, "hash": "1dfa3f8089c1983cc380efb28344e7fe"}
{"id": "mcs500_programming_manual_5731", "text": "\u2013 g: group identifier of object in breach: - 0 for links - 1 for FCP - and 2 for tool", "source": "mcs500_programming_manual", "chunk_index": 5731, "length": 85, "hash": "052f2dc61032707702ff57a38f4da879"}
{"id": "mcs500_programming_manual_5732", "text": "g: group identifier of object in breach: - 0 for links - 1 for FCP - and 2 for tool", "source": "mcs500_programming_manual", "chunk_index": 5732, "length": 83, "hash": "c57c99b1dfda6347b8f9a160fb71198a"}
{"id": "mcs500_programming_manual_5733", "text": "\u2013 oid: object ID, depending on group identifier number, as follows:", "source": "mcs500_programming_manual", "chunk_index": 5733, "length": 67, "hash": "9a6048fbfa81fb3d587092981d17d489"}
{"id": "mcs500_programming_manual_5734", "text": ": object ID, depending on group identifier number, as follows:", "source": "mcs500_programming_manual", "chunk_index": 5734, "length": 62, "hash": "4c2925ee89c643aa631af0587ef9eaeb"}
{"id": "mcs500_programming_manual_5735", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "mcs500_programming_manual", "chunk_index": 5735, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "mcs500_programming_manual_5736", "text": "\u2217 If g = 0 (links): 0 for robot base, 1 for link 1, 2 for link 2, etc.", "source": "mcs500_programming_manual", "chunk_index": 5736, "length": 70, "hash": "ee32482b4760d358aad846365f60595c"}
{"id": "mcs500_programming_manual_5737", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "mcs500_programming_manual", "chunk_index": 5737, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "mcs500_programming_manual_5738", "text": "\u2217 If g = 1 (FCP): 0 for FCP (flange center point).", "source": "mcs500_programming_manual", "chunk_index": 5738, "length": 50, "hash": "0375a249a7bbd59d691ce037a46c8287"}
{"id": "mcs500_programming_manual_5739", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 20,000 for MVK01,.", "source": "mcs500_programming_manual", "chunk_index": 5739, "length": 56, "hash": "f02fab6fc7c58349418a4e9385796875"}
{"id": "mcs500_programming_manual_5740", "text": "\u2217 If g = 2 (tool): 0 for tool sphere, 20,000 for MVK01,.", "source": "mcs500_programming_manual", "chunk_index": 5740, "length": 56, "hash": "f02fab6fc7c58349418a4e9385796875"}
{"id": "mcs500_programming_manual_5741", "text": "\u2020 If v = 0, g = oid = 0.", "source": "mcs500_programming_manual", "chunk_index": 5741, "length": 24, "hash": "d09d07bc821150cc270544d0174610ec"}
{"id": "mcs500_programming_manual_5742", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5742, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5743", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5743, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5744", "text": "In cyclic protocols,\nDynamicDataTypeID 38. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5744, "length": 74, "hash": "214f37c6d6e184ce2277b57145d42e25"}
{"id": "mcs500_programming_manual_5745", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5745, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5746", "text": "38. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5746, "length": 35, "hash": "174de2991caf1ce971edbcb60daccd50"}
{"id": "mcs500_programming_manual_5747", "text": "the GetWorkZoneStatus (page 286) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5747, "length": 58, "hash": "9b2303f7794ae1f591ba5de93a17f871"}
{"id": "mcs500_programming_manual_5748", "text": "(page 286) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5748, "length": 36, "hash": "3b0a562c56e9761338e03ceec8fb994a"}
{"id": "mcs500_programming_manual_5749", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5749, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5750", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5750, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5751", "text": "This command specifies the event severity for the collision supervision (robot links, tool\nsphere, andMPM500 module).", "source": "mcs500_programming_manual", "chunk_index": 5751, "length": 117, "hash": "2e26a13b078ca0aa0aef5f25a06be641"}
{"id": "mcs500_programming_manual_5752", "text": "This command specifies the event severity for the collision supervision (robot links, tool\nsphere, andMPM500 module).", "source": "mcs500_programming_manual", "chunk_index": 5752, "length": 117, "hash": "2e26a13b078ca0aa0aef5f25a06be641"}
{"id": "mcs500_programming_manual_5753", "text": "\u2022 l: integer defining the collision detection event severity as", "source": "mcs500_programming_manual", "chunk_index": 5753, "length": 63, "hash": "72fe62ba30ad5d301c83dbbb4e523033"}
{"id": "mcs500_programming_manual_5754", "text": "\u2022 l: integer defining the collision detection event severity as", "source": "mcs500_programming_manual", "chunk_index": 5754, "length": 63, "hash": "72fe62ba30ad5d301c83dbbb4e523033"}
{"id": "mcs500_programming_manual_5755", "text": "\u2013 0, silent (i.e., collisions are verified but no action is taken, other than to log them", "source": "mcs500_programming_manual", "chunk_index": 5755, "length": 89, "hash": "1f5deb79aa9aae0ea4f31db3acb863aa"}
{"id": "mcs500_programming_manual_5756", "text": "0, silent (i.e., collisions are verified but no action is taken, other than to log them", "source": "mcs500_programming_manual", "chunk_index": 5756, "length": 87, "hash": "7dc6b73cf29f31814e17a5cef7c73a79"}
{"id": "mcs500_programming_manual_5757", "text": "\u2013 1, generate a warning (message [2182]) every time a new imminent collision is", "source": "mcs500_programming_manual", "chunk_index": 5757, "length": 79, "hash": "2f5da25fd733508899ce484597ce15b2"}
{"id": "mcs500_programming_manual_5758", "text": "1, generate a warning (message [2182]) every time a new imminent collision is", "source": "mcs500_programming_manual", "chunk_index": 5758, "length": 77, "hash": "192db6644ac0f293cd7dcd6eb2c97357"}
{"id": "mcs500_programming_manual_5759", "text": "\u2013 4, generate a warning (message [2182]) and a motion error (message [3041]) every", "source": "mcs500_programming_manual", "chunk_index": 5759, "length": 82, "hash": "886ad5ce9ca9b1abedbf5add3ce5ab71"}
{"id": "mcs500_programming_manual_5760", "text": "4, generate a warning (message [2182]) and a motion error (message [3041]) every", "source": "mcs500_programming_manual", "chunk_index": 5760, "length": 80, "hash": "ff7749c0e4d956c1e61b09ad3649be96"}
{"id": "mcs500_programming_manual_5761", "text": "time a new imminent collision is detected.", "source": "mcs500_programming_manual", "chunk_index": 5761, "length": 42, "hash": "16fb54893fd6de047b79c4ca2b45424e"}
{"id": "mcs500_programming_manual_5762", "text": "time a new imminent collision is detected.", "source": "mcs500_programming_manual", "chunk_index": 5762, "length": 42, "hash": "16fb54893fd6de047b79c4ca2b45424e"}
{"id": "mcs500_programming_manual_5763", "text": "This setting is persistent and retains its value even after power cycling the robot. The factory\ndefault is 4.", "source": "mcs500_programming_manual", "chunk_index": 5763, "length": 110, "hash": "56de45cbefcf58f7adc65fca0b6687ab"}
{"id": "mcs500_programming_manual_5764", "text": "This setting is persistent and retains its value even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 5764, "length": 84, "hash": "096c80117af82efa878464c65998bd78"}
{"id": "mcs500_programming_manual_5765", "text": "The factory\ndefault is 4.", "source": "mcs500_programming_manual", "chunk_index": 5765, "length": 25, "hash": "1bad42a3b050d532943f1ce13f1c6afd"}
{"id": "mcs500_programming_manual_5766", "text": "\u2022 [2180] [Collision configuration set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5766, "length": 52, "hash": "97ae23695a11a3e79b644e4f6648feb3"}
{"id": "mcs500_programming_manual_5767", "text": "\u2022 [2180] [Collision configuration set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5767, "length": 52, "hash": "97ae23695a11a3e79b644e4f6648feb3"}
{"id": "mcs500_programming_manual_5768", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5768, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5769", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5769, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5770", "text": "In cyclic protocols,\nMotionCommandID 154. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5770, "length": 73, "hash": "e03545a6a764b040cb7ff8140139ba03"}
{"id": "mcs500_programming_manual_5771", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5771, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5772", "text": "154. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5772, "length": 36, "hash": "272d31da68f260ea9509763e6845fcb9"}
{"id": "mcs500_programming_manual_5773", "text": "the SetCollisionCfg (page 287) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5773, "length": 56, "hash": "f813c3ef3b47b0fabe798f35bed89ad0"}
{"id": "mcs500_programming_manual_5774", "text": "(page 287) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5774, "length": 36, "hash": "4e875f58cb3ecf2471b1a86b11de2791"}
{"id": "mcs500_programming_manual_5775", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5775, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5776", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5776, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5777", "text": "This command defines a sphere fixed in the flange reference frame (FRF). Interferences\nbetween that sphere and the robot links as well as the outside of a bounding box set with\nthe SetWorkZoneLimits (page 290) command can then be supervised, as defined by the\nSetWorkZoneCfg (page 289) and SetCollisionCfg (page 287) commands.", "source": "mcs500_programming_manual", "chunk_index": 5777, "length": 326, "hash": "c5cb1eb415dc2d92118db5bacdc6843e"}
{"id": "mcs500_programming_manual_5778", "text": "This command defines a sphere fixed in the flange reference frame (FRF). Interferences\nbetween that sphere and the robot links as well as the outside of a bounding box set with\nthe", "source": "mcs500_programming_manual", "chunk_index": 5778, "length": 180, "hash": "d59f22c75ae7be2f7cbe7ae3611d0bd3"}
{"id": "mcs500_programming_manual_5779", "text": "(page 290) command can then be supervised, as defined by the", "source": "mcs500_programming_manual", "chunk_index": 5779, "length": 60, "hash": "12765310384646d7f1b8fe1a002f00ea"}
{"id": "mcs500_programming_manual_5780", "text": "(page 287) commands.", "source": "mcs500_programming_manual", "chunk_index": 5780, "length": 20, "hash": "6e5abb8811830ed75d73a5ecfc6b7f4e"}
{"id": "mcs500_programming_manual_5781", "text": "SetToolSphere(x,y,z,r)", "source": "mcs500_programming_manual", "chunk_index": 5781, "length": 22, "hash": "70eb6ba6afec1bf09e5037fa52dd49fe"}
{"id": "mcs500_programming_manual_5782", "text": "SetToolSphere(x,y,z,r)", "source": "mcs500_programming_manual", "chunk_index": 5782, "length": 22, "hash": "70eb6ba6afec1bf09e5037fa52dd49fe"}
{"id": "mcs500_programming_manual_5783", "text": "\u2022 x, y, z: the coordinates of the center of the tool sphere in the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5783, "length": 78, "hash": "fa126ee195d792c7f71c69dddeec8211"}
{"id": "mcs500_programming_manual_5784", "text": "\u2022 x, y, z: the coordinates of the center of the tool sphere in the FRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5784, "length": 78, "hash": "fa126ee195d792c7f71c69dddeec8211"}
{"id": "mcs500_programming_manual_5785", "text": "\u2022 r: the radius of the tool sphere, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5785, "length": 42, "hash": "4224063126d5a90524fa1fd11d9da33f"}
{"id": "mcs500_programming_manual_5786", "text": "\u2022 r: the radius of the tool sphere, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5786, "length": 42, "hash": "4224063126d5a90524fa1fd11d9da33f"}
{"id": "mcs500_programming_manual_5787", "text": "This setting is persistent and retains its values even after power cycling the robot. The factory\ndefault is x = y = z = 0 and r = 0. Note that setting all four arguments to zero is equivalent\nto disabling the tool sphere. However, if r = 0, but one of the coordinates is not zero, the tool\nsphere will be a point.", "source": "mcs500_programming_manual", "chunk_index": 5787, "length": 314, "hash": "43d459ca8f4dac855f42c32482ac2529"}
{"id": "mcs500_programming_manual_5788", "text": "This setting is persistent and retains its values even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 5788, "length": 85, "hash": "6f03cf33740f56264ec51eace1f757dc"}
{"id": "mcs500_programming_manual_5789", "text": "The factory\ndefault is x = y = z = 0 and r = 0. Note that setting all four arguments to zero is equivalent\nto disabling the tool sphere. However, if r = 0, but one of the coordinates is not zero, the tool\nsphere will be a point.", "source": "mcs500_programming_manual", "chunk_index": 5789, "length": 228, "hash": "0ae2c86281df22872b023da9f4f79862"}
{"id": "mcs500_programming_manual_5790", "text": "\u2022 [2168] [Tool sphere set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5790, "length": 40, "hash": "e5b66019325902679ff11301df11b80d"}
{"id": "mcs500_programming_manual_5791", "text": "\u2022 [2168] [Tool sphere set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5791, "length": 40, "hash": "e5b66019325902679ff11301df11b80d"}
{"id": "mcs500_programming_manual_5792", "text": "The MCS500 does not verify interferences between the tool sphere and the spline shaft.", "source": "mcs500_programming_manual", "chunk_index": 5792, "length": 86, "hash": "b65574abc4d7d98e75af505d2f72f368"}
{"id": "mcs500_programming_manual_5793", "text": "The MCS500 does not verify interferences between the tool sphere and the spline shaft.", "source": "mcs500_programming_manual", "chunk_index": 5793, "length": 86, "hash": "b65574abc4d7d98e75af505d2f72f368"}
{"id": "mcs500_programming_manual_5794", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5794, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5795", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5795, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5796", "text": "In cyclic protocols,\nMotionCommandID 155. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5796, "length": 73, "hash": "41fae0964b3b93f6bf6e75d75aee54ec"}
{"id": "mcs500_programming_manual_5797", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5797, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5798", "text": "155. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5798, "length": 36, "hash": "ad8a649638f5b9c7b015d3ed69905307"}
{"id": "mcs500_programming_manual_5799", "text": "the SetToolSphere (page 288) command is", "source": "mcs500_programming_manual", "chunk_index": 5799, "length": 39, "hash": "39521de40ce7339a37f6221823c30c53"}
{"id": "mcs500_programming_manual_5800", "text": "(page 288) command is", "source": "mcs500_programming_manual", "chunk_index": 5800, "length": 21, "hash": "b4e6e97cc8d5194254c387819a032b14"}
{"id": "mcs500_programming_manual_5801", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5801, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5802", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5802, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5803", "text": "This command specifies the \u201cevent severity\u201d for the work zone limits supervision and the\nrobot parts that need to be verified.", "source": "mcs500_programming_manual", "chunk_index": 5803, "length": 126, "hash": "68aaf947621cb4d06786f65569ea62d7"}
{"id": "mcs500_programming_manual_5804", "text": "This command specifies the \u201cevent severity\u201d for the work zone limits supervision and the\nrobot parts that need to be verified.", "source": "mcs500_programming_manual", "chunk_index": 5804, "length": 126, "hash": "68aaf947621cb4d06786f65569ea62d7"}
{"id": "mcs500_programming_manual_5805", "text": "\u2022 l: integer defining the work zone breach detection event severity as", "source": "mcs500_programming_manual", "chunk_index": 5805, "length": 70, "hash": "dacebba83fd166cd11cff636cc910f44"}
{"id": "mcs500_programming_manual_5806", "text": "\u2022 l: integer defining the work zone breach detection event severity as", "source": "mcs500_programming_manual", "chunk_index": 5806, "length": 70, "hash": "dacebba83fd166cd11cff636cc910f44"}
{"id": "mcs500_programming_manual_5807", "text": "\u2013 0: silent (i.e., work zone breach is verified but no action is taken, other than to log", "source": "mcs500_programming_manual", "chunk_index": 5807, "length": 89, "hash": "4eafbd4a3401817deb0e8c64e4adc3fd"}
{"id": "mcs500_programming_manual_5808", "text": "0: silent (i.e., work zone breach is verified but no action is taken, other than to log", "source": "mcs500_programming_manual", "chunk_index": 5808, "length": 87, "hash": "2900324aafcc3fb1e1e5070fe257e1bc"}
{"id": "mcs500_programming_manual_5809", "text": "\u2013 1: generate a warning (message [2183]) every time a new imminent work zone", "source": "mcs500_programming_manual", "chunk_index": 5809, "length": 76, "hash": "85a1f4140f5b12a3818125f53b7355e7"}
{"id": "mcs500_programming_manual_5810", "text": "1: generate a warning (message [2183]) every time a new imminent work zone", "source": "mcs500_programming_manual", "chunk_index": 5810, "length": 74, "hash": "35905ac1a39410206ca326e7c518dfb1"}
{"id": "mcs500_programming_manual_5811", "text": "\u2013 4: generate a warning (message [2183]) and a motion error (message [3049]) every", "source": "mcs500_programming_manual", "chunk_index": 5811, "length": 82, "hash": "63e6bbe03c0950bbe06f5565a9c4232a"}
{"id": "mcs500_programming_manual_5812", "text": "4: generate a warning (message [2183]) and a motion error (message [3049]) every", "source": "mcs500_programming_manual", "chunk_index": 5812, "length": 80, "hash": "cf28b43e04146af9820c58861cafe993"}
{"id": "mcs500_programming_manual_5813", "text": "time a new imminent work zone breach is detected.", "source": "mcs500_programming_manual", "chunk_index": 5813, "length": 49, "hash": "eadcd1ac9e03c2526e7d85d8e756391e"}
{"id": "mcs500_programming_manual_5814", "text": "time a new imminent work zone breach is detected.", "source": "mcs500_programming_manual", "chunk_index": 5814, "length": 49, "hash": "eadcd1ac9e03c2526e7d85d8e756391e"}
{"id": "mcs500_programming_manual_5815", "text": "\u2022 m: integer defining the work zone breach verification mode as", "source": "mcs500_programming_manual", "chunk_index": 5815, "length": 63, "hash": "4a9ae41a4bd397e51a3e9a296699484a"}
{"id": "mcs500_programming_manual_5816", "text": "\u2022 m: integer defining the work zone breach verification mode as", "source": "mcs500_programming_manual", "chunk_index": 5816, "length": 63, "hash": "4a9ae41a4bd397e51a3e9a296699484a"}
{"id": "mcs500_programming_manual_5817", "text": "\u2013 1: verify whether the FCP (flange center point) is inside the work zone;", "source": "mcs500_programming_manual", "chunk_index": 5817, "length": 74, "hash": "fc669b1a6940428228421914607cf784"}
{"id": "mcs500_programming_manual_5818", "text": "1: verify whether the FCP (flange center point) is inside the work zone;", "source": "mcs500_programming_manual", "chunk_index": 5818, "length": 72, "hash": "30dcd05e18dbfc548161967a3e55db6e"}
{"id": "mcs500_programming_manual_5819", "text": "\u2013 2: verify whether the tool is completely inside the work zone (tool is the tool sphere", "source": "mcs500_programming_manual", "chunk_index": 5819, "length": 88, "hash": "31e3abdabd7148e29364049de89db1aa"}
{"id": "mcs500_programming_manual_5820", "text": "2: verify whether the tool is completely inside the work zone (tool is the tool sphere", "source": "mcs500_programming_manual", "chunk_index": 5820, "length": 86, "hash": "030de1e8268a0731785a9fc4f422a4f0"}
{"id": "mcs500_programming_manual_5821", "text": "defined with the SetToolSphere (page 288) command);", "source": "mcs500_programming_manual", "chunk_index": 5821, "length": 51, "hash": "2ee93be220876306f76e1bd2be1ee437"}
{"id": "mcs500_programming_manual_5822", "text": "(page 288) command);", "source": "mcs500_programming_manual", "chunk_index": 5822, "length": 20, "hash": "4d340d04ef38ec8c24c167830bfa8d7a"}
{"id": "mcs500_programming_manual_5823", "text": "\u2013 3: verify whether the tool AND all robot links are completely inside the work zone.", "source": "mcs500_programming_manual", "chunk_index": 5823, "length": 85, "hash": "bc3278beb4fc59951d877bb050d0a215"}
{"id": "mcs500_programming_manual_5824", "text": "3: verify whether the tool AND all robot links are completely inside the work zone.", "source": "mcs500_programming_manual", "chunk_index": 5824, "length": 83, "hash": "086d006cc3e5a3bd051f1f677fa7cf05"}
{"id": "mcs500_programming_manual_5825", "text": "This setting is persistent and retains its values even after power cycling the robot. The factory\ndefault is l = 4 and m = 1.", "source": "mcs500_programming_manual", "chunk_index": 5825, "length": 125, "hash": "16276974cc6a1a6d795d272dc71848cc"}
{"id": "mcs500_programming_manual_5826", "text": "This setting is persistent and retains its values even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 5826, "length": 85, "hash": "6f03cf33740f56264ec51eace1f757dc"}
{"id": "mcs500_programming_manual_5827", "text": "The factory\ndefault is l = 4 and m = 1.", "source": "mcs500_programming_manual", "chunk_index": 5827, "length": 39, "hash": "d9313861f16afa304901ae02d5400702"}
{"id": "mcs500_programming_manual_5828", "text": "\u2022 [2164] [Work zone configuration set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5828, "length": 52, "hash": "17573efae1140bf5be68e0b7aa42b975"}
{"id": "mcs500_programming_manual_5829", "text": "\u2022 [2164] [Work zone configuration set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5829, "length": 52, "hash": "17573efae1140bf5be68e0b7aa42b975"}
{"id": "mcs500_programming_manual_5830", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5830, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5831", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5831, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5832", "text": "In cyclic protocols,\nMotionCommandID 152. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5832, "length": 73, "hash": "f06fe2491ddf17b67fb51d3993d064bb"}
{"id": "mcs500_programming_manual_5833", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5833, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5834", "text": "152. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5834, "length": 36, "hash": "ba9ee60e94bbec09b6735b65fe5e7cfd"}
{"id": "mcs500_programming_manual_5835", "text": "the SetWorkZoneCfg (page 289) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5835, "length": 55, "hash": "037ee69a1df6ffbc6c42644bcca8b451"}
{"id": "mcs500_programming_manual_5836", "text": "(page 289) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5836, "length": 36, "hash": "dac7af1ac157534c0ab632e12ec79f4f"}
{"id": "mcs500_programming_manual_5837", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5837, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5838", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5838, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5839", "text": "This MotionCommandID defines a bounding box (a cuboid), the sides of which are parallel\nto the axes of the base reference frame (BRF). The arguments of the command are the\ncoordinates of two diagonally opposite corners, referred to as \u201cminimum\u201d and \u201cmaximum\u201d\ncorners, such that each coordinate of the minimum corner is smaller that the corresponding\ncoordinate of the maximum corner.", "source": "mcs500_programming_manual", "chunk_index": 5839, "length": 383, "hash": "5969d5d3ae361e14cf9e43845b1b6399"}
{"id": "mcs500_programming_manual_5840", "text": "This MotionCommandID defines a bounding box (a cuboid), the sides of which are parallel\nto the axes of the base reference frame (BRF). The arguments of the command are the\ncoordinates of two diagonally opposite corners, referred to as \u201cminimum\u201d and \u201cmaximum\u201d\ncorners, such that each coordinate of the minimum corner is smaller that the corresponding\ncoordinate of the maximum corner.", "source": "mcs500_programming_manual", "chunk_index": 5840, "length": 383, "hash": "5969d5d3ae361e14cf9e43845b1b6399"}
{"id": "mcs500_programming_manual_5841", "text": "SetWorkZoneLimits(xmin,ymin,zmin,xmax,ymax,zmax)", "source": "mcs500_programming_manual", "chunk_index": 5841, "length": 48, "hash": "c289f9d637aeb73d910fa05250e8d1cd"}
{"id": "mcs500_programming_manual_5842", "text": "\u2022 xmin, ymin, zmin: the coordinates of the minimum corner of the cuboid in the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5842, "length": 90, "hash": "f28bcb727889bdb1f9b4aa9ff0d28561"}
{"id": "mcs500_programming_manual_5843", "text": ": the coordinates of the minimum corner of the cuboid in the BRF, in mm;", "source": "mcs500_programming_manual", "chunk_index": 5843, "length": 72, "hash": "f17ada523bc5b4ac947ae108211c18a7"}
{"id": "mcs500_programming_manual_5844", "text": "\u2022 xmax, ymax, zmax: the coordinates of the maximum corner of the cuboid in the BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5844, "length": 90, "hash": "39c048fcf4da6383f3656f1017a85a2d"}
{"id": "mcs500_programming_manual_5845", "text": ": the coordinates of the maximum corner of the cuboid in the BRF, in mm.", "source": "mcs500_programming_manual", "chunk_index": 5845, "length": 72, "hash": "55f3b425857b69f2aed9accd2d8c90b4"}
{"id": "mcs500_programming_manual_5846", "text": "This setting is persistent and retains its values even after power cycling the robot. The\nfactory default is xmin = ymin = zmin = \u201310,000 and xmax = ymax = zmax = 10,000. To reset\nthe arguments to their factory default values, deactivate the robot and send the command\nSetWorkZoneLimits(0,0,0,0,0,0) (page 290).", "source": "mcs500_programming_manual", "chunk_index": 5846, "length": 311, "hash": "257960f903d83adfeedbb2193dcd72e2"}
{"id": "mcs500_programming_manual_5847", "text": "This setting is persistent and retains its values even after power cycling the robot.", "source": "mcs500_programming_manual", "chunk_index": 5847, "length": 85, "hash": "6f03cf33740f56264ec51eace1f757dc"}
{"id": "mcs500_programming_manual_5848", "text": "The\nfactory default is x", "source": "mcs500_programming_manual", "chunk_index": 5848, "length": 24, "hash": "e3010a35e2aa7347d59dc45bbc55bcc3"}
{"id": "mcs500_programming_manual_5849", "text": "= 10,000. To reset\nthe arguments to their factory default values, deactivate the robot and send the command", "source": "mcs500_programming_manual", "chunk_index": 5849, "length": 107, "hash": "16bbd9a9f7aec7813f12ea1d3d0e51f5"}
{"id": "mcs500_programming_manual_5850", "text": "SetWorkZoneLimits(0,0,0,0,0,0)", "source": "mcs500_programming_manual", "chunk_index": 5850, "length": 30, "hash": "415029851cd5e641aae88a92976ec3c8"}
{"id": "mcs500_programming_manual_5851", "text": "\u2022 [2166] [Workspace limits set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5851, "length": 45, "hash": "104ed2f054e5875ff1f56c401d93d400"}
{"id": "mcs500_programming_manual_5852", "text": "\u2022 [2166] [Workspace limits set successfully.]", "source": "mcs500_programming_manual", "chunk_index": 5852, "length": 45, "hash": "104ed2f054e5875ff1f56c401d93d400"}
{"id": "mcs500_programming_manual_5853", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5853, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5854", "text": "This command can only be executed when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 5854, "length": 64, "hash": "9fdaf90464880ab60120c7e5461a7d79"}
{"id": "mcs500_programming_manual_5855", "text": "In cyclic protocols,\nMotionCommandID 153. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5855, "length": 73, "hash": "9e7af1fd5c19d233b7c7f4505872a158"}
{"id": "mcs500_programming_manual_5856", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5856, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5857", "text": "153. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5857, "length": 36, "hash": "10e2ba23b5b11b5e7940a6f7a413dc82"}
{"id": "mcs500_programming_manual_5858", "text": "the SetWorkZoneLimits (page 290) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5858, "length": 58, "hash": "804fa4da1ea333d45c5bbbb917ebeb2d"}
{"id": "mcs500_programming_manual_5859", "text": "(page 290) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 5859, "length": 36, "hash": "dda83d3b2a079cf5b5916aedb409e2c9"}
{"id": "mcs500_programming_manual_5860", "text": "Commands for optional accessories", "source": "mcs500_programming_manual", "chunk_index": 5860, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "mcs500_programming_manual_5861", "text": "Commands for optional accessories", "source": "mcs500_programming_manual", "chunk_index": 5861, "length": 33, "hash": "30693131aa18f701e2daca35d18f5334"}
{"id": "mcs500_programming_manual_5862", "text": "This section regroups all commands that are used to control or request data from the", "source": "mcs500_programming_manual", "chunk_index": 5862, "length": 84, "hash": "1a9104bda51e07732ade6f7d44ab880b"}
{"id": "mcs500_programming_manual_5863", "text": "This section regroups all commands that are used to control or request data from the", "source": "mcs500_programming_manual", "chunk_index": 5863, "length": 84, "hash": "1a9104bda51e07732ade6f7d44ab880b"}
{"id": "mcs500_programming_manual_5864", "text": "optional accessory for your robot: vacuum and I/O module (MVK01). Some of the commands\nin this section are queued, others are instantaneous (Get*, SetExtToolSim (page 312), and\n*_Immediate).", "source": "mcs500_programming_manual", "chunk_index": 5864, "length": 190, "hash": "17718693891f98d9ed7fcd4417db3453"}
{"id": "mcs500_programming_manual_5865", "text": "optional accessory for your robot: vacuum and I/O module (MVK01). Some of the commands\nin this section are queued, others are instantaneous (Get*,", "source": "mcs500_programming_manual", "chunk_index": 5865, "length": 146, "hash": "cbfd31c391ce39888ea87f551ea470e5"}
{"id": "mcs500_programming_manual_5866", "text": "(page 312), and\n*_Immediate).", "source": "mcs500_programming_manual", "chunk_index": 5866, "length": 29, "hash": "f331087c59626dce75353d30211d01ac"}
{"id": "mcs500_programming_manual_5867", "text": "The following is the complete list of commands used for the vacuum and I/O module:", "source": "mcs500_programming_manual", "chunk_index": 5867, "length": 82, "hash": "2700b75cfcce6facbebe400aa505efc3"}
{"id": "mcs500_programming_manual_5868", "text": "The following is the complete list of commands used for the vacuum and I/O module:", "source": "mcs500_programming_manual", "chunk_index": 5868, "length": 82, "hash": "2700b75cfcce6facbebe400aa505efc3"}
{"id": "mcs500_programming_manual_5869", "text": "\u2022 GetIoSim (page 296)", "source": "mcs500_programming_manual", "chunk_index": 5869, "length": 21, "hash": "bfed3275495fd493daa187f1182a139c"}
{"id": "mcs500_programming_manual_5870", "text": "\u2022 GetRtInputState (page 301)", "source": "mcs500_programming_manual", "chunk_index": 5870, "length": 28, "hash": "8faec55928074976f9cfb17fb87fd4ea"}
{"id": "mcs500_programming_manual_5871", "text": "\u2022 GetRtIoStatus (page 302)", "source": "mcs500_programming_manual", "chunk_index": 5871, "length": 26, "hash": "e37b79d82016006ad6f1186834cbbb4e"}
{"id": "mcs500_programming_manual_5872", "text": "\u2022 GetRtOutputState (page 303)", "source": "mcs500_programming_manual", "chunk_index": 5872, "length": 29, "hash": "94df9be3d866f80aa15d0b822d18a039"}
{"id": "mcs500_programming_manual_5873", "text": "\u2022 GetRtVacuumPressure (page 304)", "source": "mcs500_programming_manual", "chunk_index": 5873, "length": 32, "hash": "ed210799da3d0469c478f0f4c399f2be"}
{"id": "mcs500_programming_manual_5874", "text": "\u2022 GetRtVacuumState (page 305)", "source": "mcs500_programming_manual", "chunk_index": 5874, "length": 29, "hash": "85f505968795ad474fc6203e07386834"}
{"id": "mcs500_programming_manual_5875", "text": "\u2022 GetVacuumPurgeDuration (page 307)", "source": "mcs500_programming_manual", "chunk_index": 5875, "length": 35, "hash": "d8285ebc7834502891fa9bab8aa00481"}
{"id": "mcs500_programming_manual_5876", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 5876, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_5877", "text": "\u2022 GetVacuumThreshold (page 308)", "source": "mcs500_programming_manual", "chunk_index": 5877, "length": 31, "hash": "187c1ff6350a7394445a259077bc246c"}
{"id": "mcs500_programming_manual_5878", "text": "\u2022 SetIoSim (page 316)", "source": "mcs500_programming_manual", "chunk_index": 5878, "length": 21, "hash": "f7757283741f33aabb7634b9f5cf16d5"}
{"id": "mcs500_programming_manual_5879", "text": "\u2022 SetOutputState (page 317)", "source": "mcs500_programming_manual", "chunk_index": 5879, "length": 27, "hash": "c61072bf65b85a4b87fcbbd53e13c2b3"}
{"id": "mcs500_programming_manual_5880", "text": "\u2022 SetOutputState_Immediate (page 318)", "source": "mcs500_programming_manual", "chunk_index": 5880, "length": 37, "hash": "a1a4a85d0b4bc963e6177f6cfd106d6b"}
{"id": "mcs500_programming_manual_5881", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 5881, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_5882", "text": "\u2022 SetVacuumPurgeDuration (page 319)", "source": "mcs500_programming_manual", "chunk_index": 5882, "length": 35, "hash": "a1044d7f806b5109745907bf4d0ee2c7"}
{"id": "mcs500_programming_manual_5883", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 5883, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_5884", "text": "\u2022 SetVacuumPurgeDuration_Immediate (page 320)", "source": "mcs500_programming_manual", "chunk_index": 5884, "length": 45, "hash": "3ff9b2d30823618929d6e027635a710e"}
{"id": "mcs500_programming_manual_5885", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 5885, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_5886", "text": "\u2022 SetVacuumThreshold (page 321)", "source": "mcs500_programming_manual", "chunk_index": 5886, "length": 31, "hash": "c566e7a7fb5500c6d5a5470d193c026c"}
{"id": "mcs500_programming_manual_5887", "text": "\u2022 SetVacuumThreshold_Immediate (page 322)", "source": "mcs500_programming_manual", "chunk_index": 5887, "length": 41, "hash": "db16f56578b32d53a7040471d8b33788"}
{"id": "mcs500_programming_manual_5888", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 5888, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_5889", "text": "\u2022 VacuumGrip (page 324)", "source": "mcs500_programming_manual", "chunk_index": 5889, "length": 23, "hash": "421f0a9d484a572e451a0c72feb94f08"}
{"id": "mcs500_programming_manual_5890", "text": "\u2022 VacuumGrip_Immediate (page 325)", "source": "mcs500_programming_manual", "chunk_index": 5890, "length": 33, "hash": "8850669caeb57c5c039ef5c14dfc6ca5"}
{"id": "mcs500_programming_manual_5891", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 5891, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_5892", "text": "\u2022 VacuumRelease (page 326)", "source": "mcs500_programming_manual", "chunk_index": 5892, "length": 26, "hash": "e44b3efd63c55083e07467971f648896"}
{"id": "mcs500_programming_manual_5893", "text": "\u2022 VacuumRelease_Immediate (page 327)", "source": "mcs500_programming_manual", "chunk_index": 5893, "length": 36, "hash": "7ac4ee2f8ca5cc3ca6f8310790426289"}
{"id": "mcs500_programming_manual_5894", "text": "VacuumRelease_Immediate", "source": "mcs500_programming_manual", "chunk_index": 5894, "length": 23, "hash": "8b36e69120d10c16f258423e04a4472c"}
{"id": "mcs500_programming_manual_5895", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5895, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5896", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5896, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5897", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5897, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5898", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5898, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5899", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5899, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5900", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5900, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5901", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5901, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5902", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5902, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5903", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5903, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5904", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5904, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5905", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5905, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5906", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5906, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5907", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5907, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5908", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5908, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5909", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5909, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5910", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5910, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5911", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5911, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5912", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5912, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5913", "text": "This instantaneous command returns the state of the simulation of the MVK01 vacuum and\nI/O module set by the command SetIoSim (page 316) (or the default one).", "source": "mcs500_programming_manual", "chunk_index": 5913, "length": 158, "hash": "d42f6495b385bf82f380973abe0363ad"}
{"id": "mcs500_programming_manual_5914", "text": "This instantaneous command returns the state of the simulation of the MVK01 vacuum and\nI/O module set by the command", "source": "mcs500_programming_manual", "chunk_index": 5914, "length": 116, "hash": "19c4fe3984f64214b7e10b0ef5add3b7"}
{"id": "mcs500_programming_manual_5915", "text": "(page 316) (or the default one).", "source": "mcs500_programming_manual", "chunk_index": 5915, "length": 32, "hash": "9ab052e614c1f4c13571dcec27d9c536"}
{"id": "mcs500_programming_manual_5916", "text": "\u2022 bid: I/O bank ID, should be 1.", "source": "mcs500_programming_manual", "chunk_index": 5916, "length": 32, "hash": "9c38030f8e0e8e3c845d90a8532907d8"}
{"id": "mcs500_programming_manual_5917", "text": ": I/O bank ID, should be 1.", "source": "mcs500_programming_manual", "chunk_index": 5917, "length": 27, "hash": "a3be979dcd7a3e5707030163632e85ee"}
{"id": "mcs500_programming_manual_5918", "text": "\u2013 bid: I/O bank ID, should be 1;", "source": "mcs500_programming_manual", "chunk_index": 5918, "length": 32, "hash": "035e7907cf29050be6b125addd811768"}
{"id": "mcs500_programming_manual_5919", "text": ": I/O bank ID, should be 1;", "source": "mcs500_programming_manual", "chunk_index": 5919, "length": 27, "hash": "bc3e1a0e42a1ef6450915628c4c1abe4"}
{"id": "mcs500_programming_manual_5920", "text": "\u2013 e: status of the simulation mode (1 if enabled, 0 if disabled).", "source": "mcs500_programming_manual", "chunk_index": 5920, "length": 65, "hash": "d072e9f4be97a7eec81abb0f201003ef"}
{"id": "mcs500_programming_manual_5921", "text": "e: status of the simulation mode (1 if enabled, 0 if disabled).", "source": "mcs500_programming_manual", "chunk_index": 5921, "length": 63, "hash": "73ed8f4d579b7262efa0f090c662c1c5"}
{"id": "mcs500_programming_manual_5922", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5922, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5923", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5923, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5924", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 5924, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_5925", "text": "This command is not available in cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 5925, "length": 50, "hash": "b2327ff4374366b2ebfa7654252d5acf"}
{"id": "mcs500_programming_manual_5926", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5926, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5927", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5927, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5928", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5928, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5929", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5929, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5930", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5930, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5931", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5931, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5932", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5932, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5933", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5933, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5934", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5934, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5935", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5935, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5936", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5936, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5937", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5937, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5938", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5938, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5939", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5939, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5940", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5940, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5941", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 5941, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_5942", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5942, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5943", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5943, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5944", "text": "This instantaneous command returns the state of the eight digital inputs of the MVK01\nmodule.", "source": "mcs500_programming_manual", "chunk_index": 5944, "length": 93, "hash": "485777a12abd31b4c0784cf5a8241c89"}
{"id": "mcs500_programming_manual_5945", "text": "This instantaneous command returns the state of the eight digital inputs of the MVK01\nmodule.", "source": "mcs500_programming_manual", "chunk_index": 5945, "length": 93, "hash": "485777a12abd31b4c0784cf5a8241c89"}
{"id": "mcs500_programming_manual_5946", "text": "GetRtInputState(bid)", "source": "mcs500_programming_manual", "chunk_index": 5946, "length": 20, "hash": "7fc5ff53a22430b3e623f4a98af6d8be"}
{"id": "mcs500_programming_manual_5947", "text": "\u2022 bid: I/O bank ID, currently 1", "source": "mcs500_programming_manual", "chunk_index": 5947, "length": 31, "hash": "4d7cc58f22cfa18012eed1952e1c84f8"}
{"id": "mcs500_programming_manual_5948", "text": ": I/O bank ID, currently 1", "source": "mcs500_programming_manual", "chunk_index": 5948, "length": 26, "hash": "436c1fc77279b55153d5dd352476e23b"}
{"id": "mcs500_programming_manual_5949", "text": "\u2022 [2341][t, bid,p1,p2,p3,p4, p5,p6,p7,p8]\u2020", "source": "mcs500_programming_manual", "chunk_index": 5949, "length": 42, "hash": "a1d3fb4ad2d714447bf171af1c67b0cd"}
{"id": "mcs500_programming_manual_5950", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5950, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5951", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5951, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5952", "text": "\u2013 bid: I/O bank ID, currently 1;", "source": "mcs500_programming_manual", "chunk_index": 5952, "length": 32, "hash": "2c99a3259d4469a8f2077701df5f1ab2"}
{"id": "mcs500_programming_manual_5953", "text": ": I/O bank ID, currently 1;", "source": "mcs500_programming_manual", "chunk_index": 5953, "length": 27, "hash": "346f04874d2fd1f49d4e18cc1c7a71e9"}
{"id": "mcs500_programming_manual_5954", "text": "\u2013 pi: state of input pin i (i = 1, 2, \u2026, 8), 1 for high and 0 for low.", "source": "mcs500_programming_manual", "chunk_index": 5954, "length": 70, "hash": "8301ff647e6016408c60b1e1e0a756e1"}
{"id": "mcs500_programming_manual_5955", "text": ": state of input pin i (i = 1, 2, \u2026, 8), 1 for high and 0 for low.", "source": "mcs500_programming_manual", "chunk_index": 5955, "length": 66, "hash": "cc35d7314102fa96eaaece9ef992116d"}
{"id": "mcs500_programming_manual_5956", "text": "\u2020 If an MVK01 module is not present, no input values will be included in the response and\nthere will be no error.", "source": "mcs500_programming_manual", "chunk_index": 5956, "length": 113, "hash": "c6674dae18b06f4e07ff588f4dd2f811"}
{"id": "mcs500_programming_manual_5957", "text": "If an MVK01 module is not present, no input values will be included in the response and\nthere will be no error.", "source": "mcs500_programming_manual", "chunk_index": 5957, "length": 111, "hash": "99f486d4d9ccc60e037b8afacd92cb78"}
{"id": "mcs500_programming_manual_5958", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5958, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5959", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5959, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5960", "text": "In cyclic protocols,\nDynamicDataTypeID 72. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5960, "length": 74, "hash": "00724b5411a6c44819abe2ad20c3d11d"}
{"id": "mcs500_programming_manual_5961", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 5961, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_5962", "text": "72. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5962, "length": 35, "hash": "527e10745e8b29e28be1e1fb1fbb9188"}
{"id": "mcs500_programming_manual_5963", "text": "the command GetRtInputState (page 301)", "source": "mcs500_programming_manual", "chunk_index": 5963, "length": 38, "hash": "a391e0c5723145ad3de719a3cd7e61bb"}
{"id": "mcs500_programming_manual_5964", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5964, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5965", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5965, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5966", "text": "This instantaneous command returns the status of the MVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 5966, "length": 81, "hash": "11699b8992a67ff9f29a00fb18ef5fa7"}
{"id": "mcs500_programming_manual_5967", "text": "This instantaneous command returns the status of the MVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 5967, "length": 81, "hash": "11699b8992a67ff9f29a00fb18ef5fa7"}
{"id": "mcs500_programming_manual_5968", "text": "\u2022 bid: I/O bank ID, currently 1", "source": "mcs500_programming_manual", "chunk_index": 5968, "length": 31, "hash": "4d7cc58f22cfa18012eed1952e1c84f8"}
{"id": "mcs500_programming_manual_5969", "text": ": I/O bank ID, currently 1", "source": "mcs500_programming_manual", "chunk_index": 5969, "length": 26, "hash": "436c1fc77279b55153d5dd352476e23b"}
{"id": "mcs500_programming_manual_5970", "text": "\u2022 [2330][t, bid, present, simMode, errorCode]", "source": "mcs500_programming_manual", "chunk_index": 5970, "length": 45, "hash": "60789c06044cea4edf5fc4f5e2ffda50"}
{"id": "mcs500_programming_manual_5971", "text": ", present, simMode, errorCode]", "source": "mcs500_programming_manual", "chunk_index": 5971, "length": 30, "hash": "e3ae8276e25d73385aadd2e7e1b37153"}
{"id": "mcs500_programming_manual_5972", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5972, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5973", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5973, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5974", "text": "\u2013 bid: I/O bank ID, currently 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 5974, "length": 44, "hash": "26c22fbb53482c053f5e2b18d3f6ef20"}
{"id": "mcs500_programming_manual_5975", "text": ": I/O bank ID, currently 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 5975, "length": 39, "hash": "31ba234c54d862d5ce992f156002f09b"}
{"id": "mcs500_programming_manual_5976", "text": "\u2013 present: 1 if the MVK01 module has been detected, 0 if otherwise;", "source": "mcs500_programming_manual", "chunk_index": 5976, "length": 67, "hash": "9a0d093272eca07778a15e0bef1206b9"}
{"id": "mcs500_programming_manual_5977", "text": "present: 1 if the MVK01 module has been detected, 0 if otherwise;", "source": "mcs500_programming_manual", "chunk_index": 5977, "length": 65, "hash": "009f9382c312e11aa2329366f04a5a03"}
{"id": "mcs500_programming_manual_5978", "text": "\u2013 simMode: state (1 for enabled, 0 for disabled) of the MVK01 simulation mode (see", "source": "mcs500_programming_manual", "chunk_index": 5978, "length": 82, "hash": "46c7c53770d5d86fbfab363e035902a3"}
{"id": "mcs500_programming_manual_5979", "text": "simMode: state (1 for enabled, 0 for disabled) of the MVK01 simulation mode (see", "source": "mcs500_programming_manual", "chunk_index": 5979, "length": 80, "hash": "2d82bad8572bb95fba4570a2e1c70c2f"}
{"id": "mcs500_programming_manual_5980", "text": "SetIoSim (page 316));", "source": "mcs500_programming_manual", "chunk_index": 5980, "length": 21, "hash": "a74be14a6e08717590f9f4e8468524e2"}
{"id": "mcs500_programming_manual_5981", "text": "\u2013 errorCode: error code (0 if no error).", "source": "mcs500_programming_manual", "chunk_index": 5981, "length": 40, "hash": "9e391145124c19ef1d774bf79634d651"}
{"id": "mcs500_programming_manual_5982", "text": "errorCode: error code (0 if no error).", "source": "mcs500_programming_manual", "chunk_index": 5982, "length": 38, "hash": "ab49a2c0f27754f25f277d39773cd3e7"}
{"id": "mcs500_programming_manual_5983", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5983, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5984", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 5984, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_5985", "text": "In cyclic protocols,\nthe command GetRtIoStatus\nDynamicDataTypeID 72. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5985, "length": 100, "hash": "1e72b29e7d071e547708f1c316c8571c"}
{"id": "mcs500_programming_manual_5986", "text": "In cyclic protocols,\nthe command", "source": "mcs500_programming_manual", "chunk_index": 5986, "length": 32, "hash": "14cc334b50defddbafbaa12758b7a94e"}
{"id": "mcs500_programming_manual_5987", "text": "72. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 5987, "length": 35, "hash": "527e10745e8b29e28be1e1fb1fbb9188"}
{"id": "mcs500_programming_manual_5988", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5988, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5989", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 5989, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_5990", "text": "This instantaneous command returns the state of the eight digital outputs of the MVK01\nmodule.", "source": "mcs500_programming_manual", "chunk_index": 5990, "length": 94, "hash": "efdfae5c67c9d2d336ef953463c5b5f5"}
{"id": "mcs500_programming_manual_5991", "text": "This instantaneous command returns the state of the eight digital outputs of the MVK01\nmodule.", "source": "mcs500_programming_manual", "chunk_index": 5991, "length": 94, "hash": "efdfae5c67c9d2d336ef953463c5b5f5"}
{"id": "mcs500_programming_manual_5992", "text": "GetRtOutputState(bid)", "source": "mcs500_programming_manual", "chunk_index": 5992, "length": 21, "hash": "fed77784211581035a4961e09c9e4fe4"}
{"id": "mcs500_programming_manual_5993", "text": "\u2022 bid: I/O bank ID, currently 1", "source": "mcs500_programming_manual", "chunk_index": 5993, "length": 31, "hash": "4d7cc58f22cfa18012eed1952e1c84f8"}
{"id": "mcs500_programming_manual_5994", "text": ": I/O bank ID, currently 1", "source": "mcs500_programming_manual", "chunk_index": 5994, "length": 26, "hash": "436c1fc77279b55153d5dd352476e23b"}
{"id": "mcs500_programming_manual_5995", "text": "\u2022 [2340][t, bid,p1,p2,p3,p4, p5,p6,p7,p8]\u2020", "source": "mcs500_programming_manual", "chunk_index": 5995, "length": 42, "hash": "22c0883e78d9f21e5d5f7f909e6c5c51"}
{"id": "mcs500_programming_manual_5996", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5996, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_5997", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 5997, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_5998", "text": "\u2013 bid: I/O bank ID, currently 1;", "source": "mcs500_programming_manual", "chunk_index": 5998, "length": 32, "hash": "2c99a3259d4469a8f2077701df5f1ab2"}
{"id": "mcs500_programming_manual_5999", "text": ": I/O bank ID, currently 1;", "source": "mcs500_programming_manual", "chunk_index": 5999, "length": 27, "hash": "346f04874d2fd1f49d4e18cc1c7a71e9"}
{"id": "mcs500_programming_manual_6000", "text": "\u2013 pi: state of output pin i (i = 1, 2, \u2026, 8), 1 for high and 0 for low.", "source": "mcs500_programming_manual", "chunk_index": 6000, "length": 71, "hash": "13f140ca80e03911157e73ff9f39f7e2"}
{"id": "mcs500_programming_manual_6001", "text": ": state of output pin i (i = 1, 2, \u2026, 8), 1 for high and 0 for low.", "source": "mcs500_programming_manual", "chunk_index": 6001, "length": 67, "hash": "1639402f6dc4c586ce45706e762e7267"}
{"id": "mcs500_programming_manual_6002", "text": "\u2020 If an MVK01 module is not present, no output values will be included in the response and\nthere will be no error.", "source": "mcs500_programming_manual", "chunk_index": 6002, "length": 114, "hash": "4284e572e27a38bc8369a80339ff3b55"}
{"id": "mcs500_programming_manual_6003", "text": "If an MVK01 module is not present, no output values will be included in the response and\nthere will be no error.", "source": "mcs500_programming_manual", "chunk_index": 6003, "length": 112, "hash": "34eb0cb2fe27295a12e582546b2aeaaa"}
{"id": "mcs500_programming_manual_6004", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6004, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6005", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6005, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6006", "text": "In cyclic protocols,\nDynamicDataTypeID 72. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6006, "length": 74, "hash": "00724b5411a6c44819abe2ad20c3d11d"}
{"id": "mcs500_programming_manual_6007", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 6007, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_6008", "text": "72. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6008, "length": 35, "hash": "527e10745e8b29e28be1e1fb1fbb9188"}
{"id": "mcs500_programming_manual_6009", "text": "the command GetRtOutputState (page 303)", "source": "mcs500_programming_manual", "chunk_index": 6009, "length": 39, "hash": "f54c0532139eab605fce2fc3800b9621"}
{"id": "mcs500_programming_manual_6010", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6010, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6011", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6011, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6012", "text": "This instantaneous command returns the current pressure in the vacuum chamber of the\nMVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6012, "length": 113, "hash": "fa3a38e61451e351228b0d9728e30b12"}
{"id": "mcs500_programming_manual_6013", "text": "This instantaneous command returns the current pressure in the vacuum chamber of the\nMVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6013, "length": 113, "hash": "fa3a38e61451e351228b0d9728e30b12"}
{"id": "mcs500_programming_manual_6014", "text": "GetRtVacuumPressure()", "source": "mcs500_programming_manual", "chunk_index": 6014, "length": 21, "hash": "2c0b0ebaec596a61e4639986c8b3b34b"}
{"id": "mcs500_programming_manual_6015", "text": "GetRtVacuumPressure()", "source": "mcs500_programming_manual", "chunk_index": 6015, "length": 21, "hash": "2c0b0ebaec596a61e4639986c8b3b34b"}
{"id": "mcs500_programming_manual_6016", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 6016, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_6017", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 6017, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_6018", "text": "\u2013 p: pressure of the vacuum chamber, in kPa (usually non-positive, except during", "source": "mcs500_programming_manual", "chunk_index": 6018, "length": 80, "hash": "dbcec2acd1cc79f77e9df851ca117919"}
{"id": "mcs500_programming_manual_6019", "text": "p: pressure of the vacuum chamber, in kPa (usually non-positive, except during", "source": "mcs500_programming_manual", "chunk_index": 6019, "length": 78, "hash": "c7b37804880fba7af7ea894678d6a505"}
{"id": "mcs500_programming_manual_6020", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6020, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6021", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6021, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6022", "text": "In cyclic protocols, the command GetRtVacuumPressure (page 304) is represented by\nDynamicDataTypeID 73. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6022, "length": 135, "hash": "27ecfc04b3d6f1b5f6efc5ccfd1be02f"}
{"id": "mcs500_programming_manual_6023", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 6023, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_6024", "text": "(page 304) is represented by", "source": "mcs500_programming_manual", "chunk_index": 6024, "length": 28, "hash": "3e39fdf4bacb71d3690457811b0f8cf3"}
{"id": "mcs500_programming_manual_6025", "text": "73. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6025, "length": 35, "hash": "f7e1db45f38a926da46f8cf6fd360905"}
{"id": "mcs500_programming_manual_6026", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6026, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6027", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6027, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6028", "text": "This instantaneous command returns the current state of the pneumatic part of the MVK01\nvacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6028, "length": 110, "hash": "01b0ecc11f0e63b08fe10f9844b9555b"}
{"id": "mcs500_programming_manual_6029", "text": "This instantaneous command returns the current state of the pneumatic part of the MVK01\nvacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6029, "length": 110, "hash": "01b0ecc11f0e63b08fe10f9844b9555b"}
{"id": "mcs500_programming_manual_6030", "text": "\u2022 [2342][t, v, h, p]", "source": "mcs500_programming_manual", "chunk_index": 6030, "length": 20, "hash": "faee29f72d1ae934d0a13ab2126c3bbd"}
{"id": "mcs500_programming_manual_6031", "text": "\u2022 [2342][t, v, h, p]", "source": "mcs500_programming_manual", "chunk_index": 6031, "length": 20, "hash": "faee29f72d1ae934d0a13ab2126c3bbd"}
{"id": "mcs500_programming_manual_6032", "text": "\u2013 t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 6032, "length": 31, "hash": "8d5011fe91a479efa638b1cb0f3434e1"}
{"id": "mcs500_programming_manual_6033", "text": "t: timestamp in microseconds;", "source": "mcs500_programming_manual", "chunk_index": 6033, "length": 29, "hash": "99961388acc7f5a3bf97f1678557c480"}
{"id": "mcs500_programming_manual_6034", "text": "\u2013 v: state of vacuum generation (1 if vacuum is being generated, 0 if not);", "source": "mcs500_programming_manual", "chunk_index": 6034, "length": 75, "hash": "de707b376961efc55c7654405374c184"}
{"id": "mcs500_programming_manual_6035", "text": "v: state of vacuum generation (1 if vacuum is being generated, 0 if not);", "source": "mcs500_programming_manual", "chunk_index": 6035, "length": 73, "hash": "50aed6c33671da75d84d8143ac1ee428"}
{"id": "mcs500_programming_manual_6036", "text": "\u2013 p: state of air purge (1 if air is being purged in order to quickly release a part, 0 if", "source": "mcs500_programming_manual", "chunk_index": 6036, "length": 90, "hash": "cc1347ca1e842f37bd4d83c48e7a585f"}
{"id": "mcs500_programming_manual_6037", "text": "p: state of air purge (1 if air is being purged in order to quickly release a part, 0 if", "source": "mcs500_programming_manual", "chunk_index": 6037, "length": 88, "hash": "eb83ecacedf73390e2be49f330d04881"}
{"id": "mcs500_programming_manual_6038", "text": "\u2013 h: state of holding part (1 if vacuum is being generated and a part is being held, 0", "source": "mcs500_programming_manual", "chunk_index": 6038, "length": 86, "hash": "11d9c545de632d91014804d2304afd04"}
{"id": "mcs500_programming_manual_6039", "text": "h: state of holding part (1 if vacuum is being generated and a part is being held, 0", "source": "mcs500_programming_manual", "chunk_index": 6039, "length": 84, "hash": "068ec8eaa2327bda6392698dca9c04ee"}
{"id": "mcs500_programming_manual_6040", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6040, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6041", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6041, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6042", "text": "In cyclic protocols,\nDynamicDataTypeID 73. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6042, "length": 74, "hash": "892eb7f703f33e7b3d4f9588ce37df23"}
{"id": "mcs500_programming_manual_6043", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 6043, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_6044", "text": "73. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6044, "length": 35, "hash": "f7e1db45f38a926da46f8cf6fd360905"}
{"id": "mcs500_programming_manual_6045", "text": "the command GetRtVacuumState (page 305)", "source": "mcs500_programming_manual", "chunk_index": 6045, "length": 39, "hash": "7b41cd4dd38921df816571deadf1a985"}
{"id": "mcs500_programming_manual_6046", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6046, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6047", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6047, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6048", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6048, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6049", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6049, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6050", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6050, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6051", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6051, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6052", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6052, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_6053", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6053, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_6054", "text": "This instantaneous command returns the duration of the air purge on the MVK01 vacuum and\nI/O module set by the command SetVacuumPurgeDuration (page 319) (or the default one).", "source": "mcs500_programming_manual", "chunk_index": 6054, "length": 174, "hash": "cfdc94f136aaba69e7e06b8dbc25e99a"}
{"id": "mcs500_programming_manual_6055", "text": "This instantaneous command returns the duration of the air purge on the MVK01 vacuum and\nI/O module set by the command", "source": "mcs500_programming_manual", "chunk_index": 6055, "length": 118, "hash": "63fb308bc5a202ae5868f56067d8d362"}
{"id": "mcs500_programming_manual_6056", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6056, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6057", "text": "(page 319) (or the default one).", "source": "mcs500_programming_manual", "chunk_index": 6057, "length": 32, "hash": "05b2c5cb9d61f1d0d247ebd5fb05c177"}
{"id": "mcs500_programming_manual_6058", "text": "GetVacuumPurgeDuration()", "source": "mcs500_programming_manual", "chunk_index": 6058, "length": 24, "hash": "8e2a1ae857bd0442cb5f2f2d300309a0"}
{"id": "mcs500_programming_manual_6059", "text": "GetVacuumPurgeDuration()", "source": "mcs500_programming_manual", "chunk_index": 6059, "length": 24, "hash": "8e2a1ae857bd0442cb5f2f2d300309a0"}
{"id": "mcs500_programming_manual_6060", "text": "\u2013 tp: duration of air purge in seconds.", "source": "mcs500_programming_manual", "chunk_index": 6060, "length": 39, "hash": "5d0f4d2a5d899f39352145943d144a9d"}
{"id": "mcs500_programming_manual_6061", "text": ": duration of air purge in seconds.", "source": "mcs500_programming_manual", "chunk_index": 6061, "length": 35, "hash": "bf56b5fece87b80f98783ad37cdfb267"}
{"id": "mcs500_programming_manual_6062", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6062, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6063", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6063, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6064", "text": "In cyclic protocols, the command GetVacuumPurgeDuration (page 307) is represented by\nDynamicDataTypeID 26. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6064, "length": 138, "hash": "4044fb24f7e31a9e1ddce9375874ad1d"}
{"id": "mcs500_programming_manual_6065", "text": "In cyclic protocols, the command", "source": "mcs500_programming_manual", "chunk_index": 6065, "length": 32, "hash": "cb165a2de5f2687e06c8e63924c1e1f6"}
{"id": "mcs500_programming_manual_6066", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6066, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_6067", "text": "(page 307) is represented by", "source": "mcs500_programming_manual", "chunk_index": 6067, "length": 28, "hash": "df83a4cc5d4479599dd95ed3cc9bca38"}
{"id": "mcs500_programming_manual_6068", "text": "26. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6068, "length": 35, "hash": "72b26842366a26cbd946f316d46d4efa"}
{"id": "mcs500_programming_manual_6069", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6069, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_6070", "text": "GetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6070, "length": 22, "hash": "0209e842f75dc2d1cae9e1cee978a58c"}
{"id": "mcs500_programming_manual_6071", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6071, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6072", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6072, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6073", "text": "This instantaneous command returns the current pressure thresholds (negative values) for\nthe MVK01 vacuum and I/O module set by the command SetVacuumThreshold (page 321) (or\nthe default ones).", "source": "mcs500_programming_manual", "chunk_index": 6073, "length": 192, "hash": "228cc4ad6aac5b2108c11f1bed90bda4"}
{"id": "mcs500_programming_manual_6074", "text": "This instantaneous command returns the current pressure thresholds (negative values) for\nthe MVK01 vacuum and I/O module set by the command", "source": "mcs500_programming_manual", "chunk_index": 6074, "length": 139, "hash": "a5a9d0aaf141ca32375b6d56985b22a6"}
{"id": "mcs500_programming_manual_6075", "text": "(page 321) (or\nthe default ones).", "source": "mcs500_programming_manual", "chunk_index": 6075, "length": 33, "hash": "4e77550c548394418c3bc5332d1c4182"}
{"id": "mcs500_programming_manual_6076", "text": "GetVacuumThreshold()", "source": "mcs500_programming_manual", "chunk_index": 6076, "length": 20, "hash": "63ccf0df984663582a4f371eb1b31803"}
{"id": "mcs500_programming_manual_6077", "text": "GetVacuumThreshold()", "source": "mcs500_programming_manual", "chunk_index": 6077, "length": 20, "hash": "63ccf0df984663582a4f371eb1b31803"}
{"id": "mcs500_programming_manual_6078", "text": "\u2013 ph: threshold pressure below which the robot considers that a part is held, in kPa;", "source": "mcs500_programming_manual", "chunk_index": 6078, "length": 85, "hash": "326e040fde0c527690f27c3d2034d94e"}
{"id": "mcs500_programming_manual_6079", "text": ": threshold pressure below which the robot considers that a part is held, in kPa;", "source": "mcs500_programming_manual", "chunk_index": 6079, "length": 81, "hash": "329822a4370c5571ac922f25bb679927"}
{"id": "mcs500_programming_manual_6080", "text": "\u2013 pr: threshold pressure above which the robot considers that a part is no longer held,", "source": "mcs500_programming_manual", "chunk_index": 6080, "length": 87, "hash": "e05c2a9c816888b339618873cb6f37b9"}
{"id": "mcs500_programming_manual_6081", "text": ": threshold pressure above which the robot considers that a part is no longer held,", "source": "mcs500_programming_manual", "chunk_index": 6081, "length": 83, "hash": "da099a855da2b2516c4411eb4042f7fa"}
{"id": "mcs500_programming_manual_6082", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6082, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6083", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6083, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6084", "text": "In cyclic protocols, the commands GetVacuumThreshold (page 308) is represented by\nDynamicDataTypeID 26. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6084, "length": 135, "hash": "5373830dac942b10667d5e41a4285c15"}
{"id": "mcs500_programming_manual_6085", "text": "In cyclic protocols, the commands", "source": "mcs500_programming_manual", "chunk_index": 6085, "length": 33, "hash": "f357597bdfc797b2a572f213d1d87b06"}
{"id": "mcs500_programming_manual_6086", "text": "(page 308) is represented by", "source": "mcs500_programming_manual", "chunk_index": 6086, "length": 28, "hash": "cfb18f52c23f5e225509a340fd46d4dd"}
{"id": "mcs500_programming_manual_6087", "text": "26. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6087, "length": 35, "hash": "72b26842366a26cbd946f316d46d4efa"}
{"id": "mcs500_programming_manual_6088", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6088, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6089", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6089, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6090", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6090, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6091", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6091, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6092", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6092, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6093", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6093, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6094", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6094, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6095", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6095, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6096", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6096, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6097", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6097, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6098", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6098, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6099", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6099, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6100", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6100, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6101", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6101, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6102", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6102, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6103", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6103, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6104", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6104, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6105", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6105, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6106", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6106, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6107", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6107, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6108", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6108, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6109", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6109, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6110", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6110, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6111", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6111, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6112", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6112, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6113", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6113, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6114", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6114, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6115", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6115, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6116", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6116, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6117", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6117, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6118", "text": "This instantaneous command toggles the simulation mode for the MVK01 vacuum and\nI/O module. With the simulation enabled, you can use all the MVK01 commands (e.g.,\nVacuumGrip (page 324), SetOutputState (page 317)) and if the MVK01 is physically present,\nthese commands will not have any physical impact (i.e., they will only be simulated).", "source": "mcs500_programming_manual", "chunk_index": 6118, "length": 338, "hash": "3a1b77ec4ad029defcae78cb024afd3a"}
{"id": "mcs500_programming_manual_6119", "text": "This instantaneous command toggles the simulation mode for the MVK01 vacuum and\nI/O module. With the simulation enabled, you can use all the MVK01 commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 6119, "length": 162, "hash": "5c818009d4e831aee40c9b760ad2211f"}
{"id": "mcs500_programming_manual_6120", "text": "(page 317)) and if the MVK01 is physically present,\nthese commands will not have any physical impact (i.e., they will only be simulated).", "source": "mcs500_programming_manual", "chunk_index": 6120, "length": 137, "hash": "44f7e266466c73570c72e32a534020b2"}
{"id": "mcs500_programming_manual_6121", "text": "\u2022 bid: I/O bank ID, must be 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 6121, "length": 42, "hash": "617b148a4f0acdd9a065398eef91364c"}
{"id": "mcs500_programming_manual_6122", "text": ": I/O bank ID, must be 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 6122, "length": 37, "hash": "8af42d805802129ece1ae340ee817364"}
{"id": "mcs500_programming_manual_6123", "text": "\u2022 e: state of simulation mode (1 to enable, 0 to disable).", "source": "mcs500_programming_manual", "chunk_index": 6123, "length": 58, "hash": "e744345b27233545a4ae69f163683d4e"}
{"id": "mcs500_programming_manual_6124", "text": "\u2022 e: state of simulation mode (1 to enable, 0 to disable).", "source": "mcs500_programming_manual", "chunk_index": 6124, "length": 58, "hash": "e744345b27233545a4ae69f163683d4e"}
{"id": "mcs500_programming_manual_6125", "text": "By default, the simulation mode of the MVK01 is disabled.", "source": "mcs500_programming_manual", "chunk_index": 6125, "length": 57, "hash": "984c0e2a22f85ffbea5cf662c77ac9a4"}
{"id": "mcs500_programming_manual_6126", "text": "By default, the simulation mode of the MVK01 is disabled.", "source": "mcs500_programming_manual", "chunk_index": 6126, "length": 57, "hash": "984c0e2a22f85ffbea5cf662c77ac9a4"}
{"id": "mcs500_programming_manual_6127", "text": "\u2013 bid: I/O bank ID, must be 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 6127, "length": 42, "hash": "8be8e7c546c4290e8eca1903f16946db"}
{"id": "mcs500_programming_manual_6128", "text": ": I/O bank ID, must be 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 6128, "length": 37, "hash": "8af42d805802129ece1ae340ee817364"}
{"id": "mcs500_programming_manual_6129", "text": "\u2013 e: state of simulation mode (1 to enable, 0 to disable).", "source": "mcs500_programming_manual", "chunk_index": 6129, "length": 58, "hash": "32b47d0c25c9dc4b4a9c6685f4055ddc"}
{"id": "mcs500_programming_manual_6130", "text": "e: state of simulation mode (1 to enable, 0 to disable).", "source": "mcs500_programming_manual", "chunk_index": 6130, "length": 56, "hash": "bf605e7ac7a07f47238429c051eee2ff"}
{"id": "mcs500_programming_manual_6131", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6131, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6132", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6132, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6133", "text": "In cyclic protocols, the SetIoSim (page 316) command is represented by MotionCommandID\n36. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6133, "length": 122, "hash": "227da134e260c0071571c40b541d4e7c"}
{"id": "mcs500_programming_manual_6134", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6134, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6135", "text": "(page 316) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6135, "length": 36, "hash": "8ec363c33be96b809dd8550caff5895b"}
{"id": "mcs500_programming_manual_6136", "text": "36. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6136, "length": 35, "hash": "fd8d27c43b8772e0e1618381017c9200"}
{"id": "mcs500_programming_manual_6137", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6137, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6138", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6138, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6139", "text": "This queued command is used to control the digital outputs of the MVK01 vacuum and I/O\nmodule.", "source": "mcs500_programming_manual", "chunk_index": 6139, "length": 94, "hash": "678f87c10e9047a5d6ac0e48e1fb8ff6"}
{"id": "mcs500_programming_manual_6140", "text": "This queued command is used to control the digital outputs of the MVK01 vacuum and I/O\nmodule.", "source": "mcs500_programming_manual", "chunk_index": 6140, "length": 94, "hash": "678f87c10e9047a5d6ac0e48e1fb8ff6"}
{"id": "mcs500_programming_manual_6141", "text": "SetOutputState(bid,p1,p2,p3,p4,p5,p6,p7,p8)", "source": "mcs500_programming_manual", "chunk_index": 6141, "length": 43, "hash": "55784fdb47d8cc6288896d7b742b7e6b"}
{"id": "mcs500_programming_manual_6142", "text": "\u2022 bid: I/O bank ID, currently 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 6142, "length": 44, "hash": "99294086d022327ba91f1bb451599654"}
{"id": "mcs500_programming_manual_6143", "text": ": I/O bank ID, currently 1 (for MVK01);", "source": "mcs500_programming_manual", "chunk_index": 6143, "length": 39, "hash": "31ba234c54d862d5ce992f156002f09b"}
{"id": "mcs500_programming_manual_6144", "text": "\u2022 pi: state of output pin i (i = 1, 2, \u2026, 8), 1 to set, 0 to reset, and \u22121 or * to keep unchanged.", "source": "mcs500_programming_manual", "chunk_index": 6144, "length": 98, "hash": "9c39203caed74a9e9865b02504e0b650"}
{"id": "mcs500_programming_manual_6145", "text": ": state of output pin i (i = 1, 2, \u2026, 8), 1 to set, 0 to reset, and \u22121 or * to keep unchanged.", "source": "mcs500_programming_manual", "chunk_index": 6145, "length": 94, "hash": "3e567379047b5e1ec7dc0bb5b3780321"}
{"id": "mcs500_programming_manual_6146", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6146, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_6147", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 6147, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_6148", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 6148, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_6149", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6149, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_6150", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6150, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6151", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6151, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6152", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6152, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6153", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6153, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6154", "text": "In cyclic protocols,\nMotionCommandID 34. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6154, "length": 72, "hash": "fd9ae8833f36b8a153caea3ef7c3a092"}
{"id": "mcs500_programming_manual_6155", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 6155, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_6156", "text": "34. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6156, "length": 35, "hash": "1379ff5c2176ad204e84ea41db99fa76"}
{"id": "mcs500_programming_manual_6157", "text": "the SetOutputState (page 317) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6157, "length": 55, "hash": "c03755644386bb9a055d24917567beab"}
{"id": "mcs500_programming_manual_6158", "text": "(page 317) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6158, "length": 36, "hash": "5fd8f0cfde4bbf30ab73c6805e195f3c"}
{"id": "mcs500_programming_manual_6159", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6159, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6160", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6160, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6161", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6161, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_6162", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6162, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_6163", "text": "This is the same command as SetOutputState (page 317), but it is instantaneous rather than\nqueued and can be executed even when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6163, "length": 153, "hash": "be032b6aec4145e5eeadd8cfe0d91fb8"}
{"id": "mcs500_programming_manual_6164", "text": "This is the same command as", "source": "mcs500_programming_manual", "chunk_index": 6164, "length": 27, "hash": "378c505b9dab8fa252162bbe60a8d030"}
{"id": "mcs500_programming_manual_6165", "text": "(page 317), but it is instantaneous rather than\nqueued and can be executed even when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6165, "length": 110, "hash": "889d1d9b08c507666650555d0947cd8a"}
{"id": "mcs500_programming_manual_6166", "text": "SetOutputState_Immediate(bid,p1,p2,p3,p4,p5,p6,p7,p8)", "source": "mcs500_programming_manual", "chunk_index": 6166, "length": 53, "hash": "45a653385895bc8bab3fe59d125d8b62"}
{"id": "mcs500_programming_manual_6167", "text": "SetOutputState_Immediate(b", "source": "mcs500_programming_manual", "chunk_index": 6167, "length": 26, "hash": "754a79a4c7656c2325c92cf6e0aa586e"}
{"id": "mcs500_programming_manual_6168", "text": "\u2022 bid: I/O bank ID, currently 1;", "source": "mcs500_programming_manual", "chunk_index": 6168, "length": 32, "hash": "2900de7eb18efff746e4424ee07b50b6"}
{"id": "mcs500_programming_manual_6169", "text": ": I/O bank ID, currently 1;", "source": "mcs500_programming_manual", "chunk_index": 6169, "length": 27, "hash": "346f04874d2fd1f49d4e18cc1c7a71e9"}
{"id": "mcs500_programming_manual_6170", "text": "\u2022 pi: state of output pin i (i = 1, 2, \u2026, 8), 1 to set, 0 to reset, and \u22121 or * to keep unchanged.", "source": "mcs500_programming_manual", "chunk_index": 6170, "length": 98, "hash": "9c39203caed74a9e9865b02504e0b650"}
{"id": "mcs500_programming_manual_6171", "text": ": state of output pin i (i = 1, 2, \u2026, 8), 1 to set, 0 to reset, and \u22121 or * to keep unchanged.", "source": "mcs500_programming_manual", "chunk_index": 6171, "length": 94, "hash": "3e567379047b5e1ec7dc0bb5b3780321"}
{"id": "mcs500_programming_manual_6172", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6172, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6173", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6173, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6174", "text": "In cyclic protocols, the SetOutputState_Immediate (page 318) command is represented by\nMotionCommandID 35. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6174, "length": 138, "hash": "e98e739c7931a3070ea95fbe95af5d85"}
{"id": "mcs500_programming_manual_6175", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6175, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6176", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6176, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_6177", "text": "(page 318) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6177, "length": 36, "hash": "ef07d3e2c9fb6c8c676a9384a95a2307"}
{"id": "mcs500_programming_manual_6178", "text": "35. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6178, "length": 35, "hash": "3f83f4328445ad15ec3b340dd2e3218f"}
{"id": "mcs500_programming_manual_6179", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6179, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_6180", "text": "SetOutputState_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6180, "length": 24, "hash": "ab7ebfd9a2d64505800cbcec8ef32723"}
{"id": "mcs500_programming_manual_6181", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6181, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6182", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6182, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6183", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6183, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6184", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6184, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6185", "text": "This queued command sets the duration of the air purge for ejecting a part when using the\ncommands VacuumRelease*.", "source": "mcs500_programming_manual", "chunk_index": 6185, "length": 114, "hash": "014cd953c85880468d2eca650c72fc26"}
{"id": "mcs500_programming_manual_6186", "text": "This queued command sets the duration of the air purge for ejecting a part when using the\ncommands VacuumRelease*.", "source": "mcs500_programming_manual", "chunk_index": 6186, "length": 114, "hash": "014cd953c85880468d2eca650c72fc26"}
{"id": "mcs500_programming_manual_6187", "text": "SetVacuumPurgeDuration(tp)", "source": "mcs500_programming_manual", "chunk_index": 6187, "length": 26, "hash": "ef9e8e63289e213b879e3f7f666a8d24"}
{"id": "mcs500_programming_manual_6188", "text": "SetVacuumPurgeDuration(t", "source": "mcs500_programming_manual", "chunk_index": 6188, "length": 24, "hash": "6263369731660ba11320ecb5733c80fe"}
{"id": "mcs500_programming_manual_6189", "text": "\u2022 tp: duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 6189, "length": 26, "hash": "afe8044f8db4a71b5aeaf90996a1f904"}
{"id": "mcs500_programming_manual_6190", "text": ": duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 6190, "length": 22, "hash": "7474e35659902dacd915beb72eb630bd"}
{"id": "mcs500_programming_manual_6191", "text": "By default, tp = 0.1.", "source": "mcs500_programming_manual", "chunk_index": 6191, "length": 21, "hash": "a14d3e1342d66588e5d0ee060cbdbdab"}
{"id": "mcs500_programming_manual_6192", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6192, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_6193", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 6193, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_6194", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 6194, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_6195", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6195, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_6196", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6196, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6197", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6197, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6198", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6198, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6199", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6199, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6200", "text": "In cyclic protocols, the SetVacuumPurgeDuration (page 319) command is represented by\nMotionCommandID 43. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6200, "length": 136, "hash": "3d9e8e59e11624666b4985891ee552d7"}
{"id": "mcs500_programming_manual_6201", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6201, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6202", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6202, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6203", "text": "(page 319) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6203, "length": 36, "hash": "0fe136847527315464d0bc5d54430a4f"}
{"id": "mcs500_programming_manual_6204", "text": "43. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6204, "length": 35, "hash": "ef3e4da1a44807fe3cd7f3c898639dde"}
{"id": "mcs500_programming_manual_6205", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6205, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6206", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6206, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6207", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6207, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6208", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6208, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6209", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6209, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_6210", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6210, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_6211", "text": "This is the same command as SetVacuumPurgeDuration (page 319), but it is instantaneous,\nrather than queued and can be executed even when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6211, "length": 162, "hash": "a9f1caa52eabe87486f4da008976ba38"}
{"id": "mcs500_programming_manual_6212", "text": "This is the same command as", "source": "mcs500_programming_manual", "chunk_index": 6212, "length": 27, "hash": "378c505b9dab8fa252162bbe60a8d030"}
{"id": "mcs500_programming_manual_6213", "text": "SetVacuumPurgeDuration", "source": "mcs500_programming_manual", "chunk_index": 6213, "length": 22, "hash": "45573dfd78aec074cc92f7ad3d8d2c43"}
{"id": "mcs500_programming_manual_6214", "text": "(page 319), but it is instantaneous,\nrather than queued and can be executed even when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6214, "length": 111, "hash": "13499a9851230fa2a57a9f5620d6cf07"}
{"id": "mcs500_programming_manual_6215", "text": "SetVacuumPurgeDuration_Immediate(tp)", "source": "mcs500_programming_manual", "chunk_index": 6215, "length": 36, "hash": "89b7abe1a8fc686bdd74df63fd37d689"}
{"id": "mcs500_programming_manual_6216", "text": "SetVacuumPurgeDuration_Immediate(t", "source": "mcs500_programming_manual", "chunk_index": 6216, "length": 34, "hash": "30038057607fbfb765535bc10535ac75"}
{"id": "mcs500_programming_manual_6217", "text": "\u2022 tp: duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 6217, "length": 26, "hash": "afe8044f8db4a71b5aeaf90996a1f904"}
{"id": "mcs500_programming_manual_6218", "text": ": duration in seconds.", "source": "mcs500_programming_manual", "chunk_index": 6218, "length": 22, "hash": "7474e35659902dacd915beb72eb630bd"}
{"id": "mcs500_programming_manual_6219", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6219, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6220", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6220, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6221", "text": "In cyclic protocols,\nrepresented by MotionCommandID 44. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6221, "length": 87, "hash": "994833d2068dd0181a23777e83a19e25"}
{"id": "mcs500_programming_manual_6222", "text": "In cyclic protocols,\nrepresented by", "source": "mcs500_programming_manual", "chunk_index": 6222, "length": 35, "hash": "e1def7d3b4a25b6bc821f3d9e44de72b"}
{"id": "mcs500_programming_manual_6223", "text": "44. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6223, "length": 35, "hash": "501028f39cacae12e4c32805bf42da8c"}
{"id": "mcs500_programming_manual_6224", "text": "the SetVacuumPurgeDuration_Immediate (page 320) command is", "source": "mcs500_programming_manual", "chunk_index": 6224, "length": 58, "hash": "fca93476e23e7e56d779be4258703000"}
{"id": "mcs500_programming_manual_6225", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6225, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_6226", "text": "(page 320) command is", "source": "mcs500_programming_manual", "chunk_index": 6226, "length": 21, "hash": "694ca3b6edd79b0d32b37b793f3e6bbb"}
{"id": "mcs500_programming_manual_6227", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6227, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_6228", "text": "SetVacuumPurgeDuration_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6228, "length": 32, "hash": "50c565ce6f0d362253f035c8d06330d3"}
{"id": "mcs500_programming_manual_6229", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6229, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6230", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6230, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6231", "text": "This queued command sets the thresholds for the vacuum sensor (which measures only\nnegative pressure) in the MVK01 vacuum and I/O module that will be used for reporting\nwhether a part is being held or not.", "source": "mcs500_programming_manual", "chunk_index": 6231, "length": 205, "hash": "8bfa04d052f924b2e9d5947eec83b4b2"}
{"id": "mcs500_programming_manual_6232", "text": "This queued command sets the thresholds for the vacuum sensor (which measures only\nnegative pressure) in the MVK01 vacuum and I/O module that will be used for reporting\nwhether a part is being held or not.", "source": "mcs500_programming_manual", "chunk_index": 6232, "length": 205, "hash": "8bfa04d052f924b2e9d5947eec83b4b2"}
{"id": "mcs500_programming_manual_6233", "text": "SetVacuumThreshold(ph,pr)", "source": "mcs500_programming_manual", "chunk_index": 6233, "length": 25, "hash": "b4bc0b400997d3341dcd137a7b20aaca"}
{"id": "mcs500_programming_manual_6234", "text": "SetVacuumThreshold(p", "source": "mcs500_programming_manual", "chunk_index": 6234, "length": 20, "hash": "b48afb2b7c486af6870cfcdf0809211e"}
{"id": "mcs500_programming_manual_6235", "text": "\u2022 ph: when the negative pressure sensed is smaller than ph, the robot reports that a part", "source": "mcs500_programming_manual", "chunk_index": 6235, "length": 89, "hash": "cca18fb050a5ea6e138ac510c92d1002"}
{"id": "mcs500_programming_manual_6236", "text": ": when the negative pressure sensed is smaller than p", "source": "mcs500_programming_manual", "chunk_index": 6236, "length": 53, "hash": "7954d1d4691445c376ae7c0947d3a134"}
{"id": "mcs500_programming_manual_6237", "text": ", the robot reports that a part", "source": "mcs500_programming_manual", "chunk_index": 6237, "length": 31, "hash": "289229f14a932237d9bdaf74af73d641"}
{"id": "mcs500_programming_manual_6238", "text": "is being held. The value for this argument ranges from \u2212100 kPa to \u22125 kPa.", "source": "mcs500_programming_manual", "chunk_index": 6238, "length": 74, "hash": "a9608fadb994240930f734dd385a2a26"}
{"id": "mcs500_programming_manual_6239", "text": "is being held. The value for this argument ranges from \u2212100 kPa to \u22125 kPa.", "source": "mcs500_programming_manual", "chunk_index": 6239, "length": 74, "hash": "a9608fadb994240930f734dd385a2a26"}
{"id": "mcs500_programming_manual_6240", "text": "\u2022 pr: when the value of the negative pressure sensed is larger than pr, the robot reports\nno part is being held. The value for this argument ranges from \u221295 kPa to 0 kPa. The\nvalue of pr must be larger than the < value of ph by at least 5 kPa.", "source": "mcs500_programming_manual", "chunk_index": 6240, "length": 243, "hash": "9e0d04bbc6c48a36975c5ce25d0906bd"}
{"id": "mcs500_programming_manual_6241", "text": ": when the value of the negative pressure sensed is larger than p", "source": "mcs500_programming_manual", "chunk_index": 6241, "length": 65, "hash": "8570a2359f816c2be80ecdf0bcbe15a6"}
{"id": "mcs500_programming_manual_6242", "text": ", the robot reports\nno part is being held. The value for this argument ranges from \u221295 kPa to 0 kPa. The\nvalue of p", "source": "mcs500_programming_manual", "chunk_index": 6242, "length": 115, "hash": "9d6a7a14365d04b98955e752b18fdcd7"}
{"id": "mcs500_programming_manual_6243", "text": "must be larger than the < value of p", "source": "mcs500_programming_manual", "chunk_index": 6243, "length": 36, "hash": "3731235527548fc925c7e1c1258f184f"}
{"id": "mcs500_programming_manual_6244", "text": "By default, ph = \u221240 kPa, and pr = \u221230 kPa. To reset to the default values, reactivate the\nrobot or send the command SetVacuumThreshold(0,0) (page 321).", "source": "mcs500_programming_manual", "chunk_index": 6244, "length": 152, "hash": "c6340bf9bd4bf1dc982117062765b064"}
{"id": "mcs500_programming_manual_6245", "text": "= \u221230 kPa. To reset to the default values, reactivate the\nrobot or send the command", "source": "mcs500_programming_manual", "chunk_index": 6245, "length": 83, "hash": "0bfc05d37a6cd8a8d832d2b6c7ddcecd"}
{"id": "mcs500_programming_manual_6246", "text": "SetVacuumThreshold(0,0)", "source": "mcs500_programming_manual", "chunk_index": 6246, "length": 23, "hash": "2cf9f0a8c93a4d79c417e8bee1ae4025"}
{"id": "mcs500_programming_manual_6247", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6247, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_6248", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 6248, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_6249", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 6249, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_6250", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6250, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_6251", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6251, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6252", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6252, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6253", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6253, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6254", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6254, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6255", "text": "In cyclic protocols,\nMotionCommandID 41. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6255, "length": 72, "hash": "5bb0f407b9c2d51116426de636b46f34"}
{"id": "mcs500_programming_manual_6256", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 6256, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_6257", "text": "41. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6257, "length": 35, "hash": "368416270559c6beedc40cedf86b8aa5"}
{"id": "mcs500_programming_manual_6258", "text": "the SetVacuumThreshold (page 321) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6258, "length": 59, "hash": "91febb2b044020e62d287c6ba5eb509c"}
{"id": "mcs500_programming_manual_6259", "text": "(page 321) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6259, "length": 36, "hash": "5859e9024e7e224a896d77b970100ea3"}
{"id": "mcs500_programming_manual_6260", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6260, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6261", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6261, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6262", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6262, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_6263", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6263, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_6264", "text": "This is the same command as SetVacuumThreshold (page 321), but it is instantaneous, rather\nthan queued and can be executed even when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6264, "length": 158, "hash": "f56037315aea7cb43a0a903bddd4944b"}
{"id": "mcs500_programming_manual_6265", "text": "This is the same command as", "source": "mcs500_programming_manual", "chunk_index": 6265, "length": 27, "hash": "378c505b9dab8fa252162bbe60a8d030"}
{"id": "mcs500_programming_manual_6266", "text": "(page 321), but it is instantaneous, rather\nthan queued and can be executed even when the robot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6266, "length": 111, "hash": "5c75e35e54b486aa871b7dde506213d0"}
{"id": "mcs500_programming_manual_6267", "text": "SetVacuumThreshold_Immediate(ph,pr)", "source": "mcs500_programming_manual", "chunk_index": 6267, "length": 35, "hash": "f9c8ba0ce30e6e5de522d64e7998c3aa"}
{"id": "mcs500_programming_manual_6268", "text": "SetVacuumThreshold_Immediate(p", "source": "mcs500_programming_manual", "chunk_index": 6268, "length": 30, "hash": "bc517db92ea63ab96e7422548c2572fe"}
{"id": "mcs500_programming_manual_6269", "text": "\u2022 ph: when the negative pressure sensed is smaller than ph, the robot reports that a part", "source": "mcs500_programming_manual", "chunk_index": 6269, "length": 89, "hash": "cca18fb050a5ea6e138ac510c92d1002"}
{"id": "mcs500_programming_manual_6270", "text": ": when the negative pressure sensed is smaller than p", "source": "mcs500_programming_manual", "chunk_index": 6270, "length": 53, "hash": "7954d1d4691445c376ae7c0947d3a134"}
{"id": "mcs500_programming_manual_6271", "text": ", the robot reports that a part", "source": "mcs500_programming_manual", "chunk_index": 6271, "length": 31, "hash": "289229f14a932237d9bdaf74af73d641"}
{"id": "mcs500_programming_manual_6272", "text": "is being held. The value for this argument ranges from \u2212100 kPa to \u22125 kPa.", "source": "mcs500_programming_manual", "chunk_index": 6272, "length": 74, "hash": "a9608fadb994240930f734dd385a2a26"}
{"id": "mcs500_programming_manual_6273", "text": "is being held. The value for this argument ranges from \u2212100 kPa to \u22125 kPa.", "source": "mcs500_programming_manual", "chunk_index": 6273, "length": 74, "hash": "a9608fadb994240930f734dd385a2a26"}
{"id": "mcs500_programming_manual_6274", "text": "\u2022 pr: when the value of the negative pressure sensed is larger than pr, the robot reports\nno part is being held. The value for this argument ranges from \u221295 kPa to 0 kPa. The\nvalue of pr must be larger than the < value of ph by at least 5 kPa.", "source": "mcs500_programming_manual", "chunk_index": 6274, "length": 243, "hash": "9e0d04bbc6c48a36975c5ce25d0906bd"}
{"id": "mcs500_programming_manual_6275", "text": ": when the value of the negative pressure sensed is larger than p", "source": "mcs500_programming_manual", "chunk_index": 6275, "length": 65, "hash": "8570a2359f816c2be80ecdf0bcbe15a6"}
{"id": "mcs500_programming_manual_6276", "text": "no part is being held. The value for this argument ranges from \u221295 kPa to 0 kPa. The\nvalue of p", "source": "mcs500_programming_manual", "chunk_index": 6276, "length": 95, "hash": "d7450da24dfaa2699a3da36e1df4558b"}
{"id": "mcs500_programming_manual_6277", "text": "must be larger than the < value of p", "source": "mcs500_programming_manual", "chunk_index": 6277, "length": 36, "hash": "3731235527548fc925c7e1c1258f184f"}
{"id": "mcs500_programming_manual_6278", "text": "By default, ph = \u221240 kPa, and pr = \u221230 kPa. To reset to the default values, reactivate the\nrobot or send the command SetVacuumThreshold(0,0) (page 321).", "source": "mcs500_programming_manual", "chunk_index": 6278, "length": 152, "hash": "c6340bf9bd4bf1dc982117062765b064"}
{"id": "mcs500_programming_manual_6279", "text": "= \u221230 kPa. To reset to the default values, reactivate the\nrobot or send the command", "source": "mcs500_programming_manual", "chunk_index": 6279, "length": 83, "hash": "0bfc05d37a6cd8a8d832d2b6c7ddcecd"}
{"id": "mcs500_programming_manual_6280", "text": "SetVacuumThreshold(0,0)", "source": "mcs500_programming_manual", "chunk_index": 6280, "length": 23, "hash": "2cf9f0a8c93a4d79c417e8bee1ae4025"}
{"id": "mcs500_programming_manual_6281", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6281, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6282", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6282, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6283", "text": "In cyclic protocols, the SetVacuumThreshold_Immediate (page 322) command is represented\nby MotionCommandID 42. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6283, "length": 142, "hash": "0c7ebff41de9e631bc8e247666a0dfd3"}
{"id": "mcs500_programming_manual_6284", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6284, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6285", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6285, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_6286", "text": "(page 322) command is represented\nby", "source": "mcs500_programming_manual", "chunk_index": 6286, "length": 36, "hash": "b0648e72e927df24c2ea7ad5a75e0b82"}
{"id": "mcs500_programming_manual_6287", "text": "42. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6287, "length": 35, "hash": "367e00537c2c105f39a2dbd8405e5043"}
{"id": "mcs500_programming_manual_6288", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6288, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_6289", "text": "SetVacuumThreshold_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6289, "length": 28, "hash": "ef12b4677d3115991f0d9879e882eadc"}
{"id": "mcs500_programming_manual_6290", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6290, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6291", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6291, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6292", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6292, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6293", "text": "This command is available only on the Meca500 robot.", "source": "mcs500_programming_manual", "chunk_index": 6293, "length": 52, "hash": "e7e3af54d1b9ba915fefde2f07efba2b"}
{"id": "mcs500_programming_manual_6294", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6294, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6295", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6295, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6296", "text": "This queued command activates the suction in the MVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6296, "length": 77, "hash": "b71b73f495f62b52e07610d77f2b33f8"}
{"id": "mcs500_programming_manual_6297", "text": "This queued command activates the suction in the MVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6297, "length": 77, "hash": "b71b73f495f62b52e07610d77f2b33f8"}
{"id": "mcs500_programming_manual_6298", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6298, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_6299", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 6299, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_6300", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 6300, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_6301", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6301, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_6302", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6302, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6303", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6303, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6304", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6304, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6305", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6305, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6306", "text": "In cyclic protocols, the VacuumGrip (page 324) command is represented by MotionCommandID\n37. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6306, "length": 124, "hash": "055dfee0f84af00c697397950ba515cb"}
{"id": "mcs500_programming_manual_6307", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6307, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6308", "text": "(page 324) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6308, "length": 36, "hash": "c440a608fde72d7309e2c163912e702f"}
{"id": "mcs500_programming_manual_6309", "text": "37. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6309, "length": 35, "hash": "fdbcb706e0ac08bbf287b9fc0ef2bcd2"}
{"id": "mcs500_programming_manual_6310", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6310, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6311", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6311, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6312", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6312, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_6313", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6313, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_6314", "text": "This instantaneous command activates the suction in the MVK01 vacuum and I/O module.\nUnlike its queued equivalent (VacuumGrip (page 324)), it can be executed even when the\nrobot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6314, "length": 193, "hash": "153c8fb2757a94dae9040ca4d4e7a1d2"}
{"id": "mcs500_programming_manual_6315", "text": "This instantaneous command activates the suction in the MVK01 vacuum and I/O module.\nUnlike its queued equivalent (", "source": "mcs500_programming_manual", "chunk_index": 6315, "length": 115, "hash": "72c422f3e961d35452cde2d037ce475b"}
{"id": "mcs500_programming_manual_6316", "text": "(page 324)), it can be executed even when the\nrobot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6316, "length": 67, "hash": "177e82041a5ecb7d4ca4a59b7116e836"}
{"id": "mcs500_programming_manual_6317", "text": "VacuumGrip_Immediate()", "source": "mcs500_programming_manual", "chunk_index": 6317, "length": 22, "hash": "040147d6fa1f5a424b5e077a479775b4"}
{"id": "mcs500_programming_manual_6318", "text": "VacuumGrip_Immediate()", "source": "mcs500_programming_manual", "chunk_index": 6318, "length": 22, "hash": "040147d6fa1f5a424b5e077a479775b4"}
{"id": "mcs500_programming_manual_6319", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6319, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6320", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6320, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6321", "text": "In cyclic protocols, the VacuumGrip_Immediate (page 325) command is represented by\nMotionCommandID 38. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6321, "length": 134, "hash": "e50da7af5a2a5f8048bc4a0876da7254"}
{"id": "mcs500_programming_manual_6322", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6322, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6323", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6323, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_6324", "text": "(page 325) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6324, "length": 36, "hash": "8ca192fd124fe5ce0e3e2010d8b0c41c"}
{"id": "mcs500_programming_manual_6325", "text": "38. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6325, "length": 35, "hash": "174de2991caf1ce971edbcb60daccd50"}
{"id": "mcs500_programming_manual_6326", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6326, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_6327", "text": "VacuumGrip_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6327, "length": 20, "hash": "ecd2338db176479716221b53036c5b70"}
{"id": "mcs500_programming_manual_6328", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6328, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6329", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6329, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6330", "text": "This queued command deactivates the suction in the MVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6330, "length": 79, "hash": "6c8a95c2df706ff6ac821b8527eae0e2"}
{"id": "mcs500_programming_manual_6331", "text": "This queued command deactivates the suction in the MVK01 vacuum and I/O module.", "source": "mcs500_programming_manual", "chunk_index": 6331, "length": 79, "hash": "6c8a95c2df706ff6ac821b8527eae0e2"}
{"id": "mcs500_programming_manual_6332", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the robot\nis ready for motion (page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6332, "length": 248, "hash": "d8fabd2a7ef26f158d1c6a028095be0c"}
{"id": "mcs500_programming_manual_6333", "text": "This command is added to the robot\u2019s motion queue and can only be executed when the", "source": "mcs500_programming_manual", "chunk_index": 6333, "length": 83, "hash": "1fb99f612301699854d71b9347f38782"}
{"id": "mcs500_programming_manual_6334", "text": "robot\nis ready for motion", "source": "mcs500_programming_manual", "chunk_index": 6334, "length": 25, "hash": "99178cc0863afc600bc9812d9c1d1195"}
{"id": "mcs500_programming_manual_6335", "text": "(page 341), not in an error state and when no safety signal conditions are\npresent. Otherwise, the robot will report one of the following:", "source": "mcs500_programming_manual", "chunk_index": 6335, "length": 138, "hash": "99a050cbe7341669b137301f9d5e6001"}
{"id": "mcs500_programming_manual_6336", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6336, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6337", "text": "\u2022 [1005][The robot is not activated.]", "source": "mcs500_programming_manual", "chunk_index": 6337, "length": 37, "hash": "e834ae7e3ae9a861e36be9608e1fcbb5"}
{"id": "mcs500_programming_manual_6338", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6338, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6339", "text": "\u2022 [1011][The robot is already in error.]", "source": "mcs500_programming_manual", "chunk_index": 6339, "length": 40, "hash": "170ee01d606837ecac5e3afd90a2ad2a"}
{"id": "mcs500_programming_manual_6340", "text": "In cyclic protocols,\nMotionCommandID 39. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6340, "length": 72, "hash": "567cc849f46802a9e8abf47875fad2ae"}
{"id": "mcs500_programming_manual_6341", "text": "In cyclic protocols,", "source": "mcs500_programming_manual", "chunk_index": 6341, "length": 20, "hash": "b21afec939404b8f55636ee0016f6f37"}
{"id": "mcs500_programming_manual_6342", "text": "39. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6342, "length": 35, "hash": "4a112249bf685758c874f44cf8004717"}
{"id": "mcs500_programming_manual_6343", "text": "the VacuumRelease (page 326) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6343, "length": 54, "hash": "a12878b851991c3085d8b78e7787f4a4"}
{"id": "mcs500_programming_manual_6344", "text": "(page 326) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6344, "length": 36, "hash": "b77ee6739196c62fa23e1ae8a422a7c2"}
{"id": "mcs500_programming_manual_6345", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6345, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6346", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6346, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6347", "text": "This instanteneous command deactivates the suction in the MVK01 vacuum and I/O module.\nUnlike its queued equivalent (VacuumRelease (page 326)), it can be executed even when the\nrobot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6347, "length": 198, "hash": "876c1e4a2817b7d5f72e582713756531"}
{"id": "mcs500_programming_manual_6348", "text": "This instanteneous command deactivates the suction in the MVK01 vacuum and I/O module.\nUnlike its queued equivalent (", "source": "mcs500_programming_manual", "chunk_index": 6348, "length": 117, "hash": "bd11abcadbc107a8ab2500f910218e8d"}
{"id": "mcs500_programming_manual_6349", "text": "(page 326)), it can be executed even when the\nrobot is deactivated.", "source": "mcs500_programming_manual", "chunk_index": 6349, "length": 67, "hash": "73b7bb337af6021f2edfad255099f724"}
{"id": "mcs500_programming_manual_6350", "text": "VacuumRelease_Immediate()", "source": "mcs500_programming_manual", "chunk_index": 6350, "length": 25, "hash": "99a583c77ae110bbec24f7d9d1b86328"}
{"id": "mcs500_programming_manual_6351", "text": "VacuumRelease_Immediate()", "source": "mcs500_programming_manual", "chunk_index": 6351, "length": 25, "hash": "99a583c77ae110bbec24f7d9d1b86328"}
{"id": "mcs500_programming_manual_6352", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6352, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6353", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6353, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6354", "text": "In cyclic protocols, the VacuumRelease_Immediate (page 327) command is represented by\nMotionCommandID 40. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6354, "length": 137, "hash": "ae626f49841c0be7097b6b427d1483b2"}
{"id": "mcs500_programming_manual_6355", "text": "In cyclic protocols, the", "source": "mcs500_programming_manual", "chunk_index": 6355, "length": 24, "hash": "fb6c9629544c9014e083cc9373072942"}
{"id": "mcs500_programming_manual_6356", "text": "VacuumRelease_Immediate", "source": "mcs500_programming_manual", "chunk_index": 6356, "length": 23, "hash": "8b36e69120d10c16f258423e04a4472c"}
{"id": "mcs500_programming_manual_6357", "text": "(page 327) command is represented by", "source": "mcs500_programming_manual", "chunk_index": 6357, "length": 36, "hash": "4f19cf2c36519bd4fad8d6a9ff17010f"}
{"id": "mcs500_programming_manual_6358", "text": "40. See Section 5 for more details.", "source": "mcs500_programming_manual", "chunk_index": 6358, "length": 35, "hash": "29133e5a366a7b54dfcb970ef5ebc46f"}
{"id": "mcs500_programming_manual_6359", "text": "for managing variables", "source": "mcs500_programming_manual", "chunk_index": 6359, "length": 22, "hash": "963bee820385766af3b441eb343b566f"}
{"id": "mcs500_programming_manual_6360", "text": "for managing variables", "source": "mcs500_programming_manual", "chunk_index": 6360, "length": 22, "hash": "963bee820385766af3b441eb343b566f"}
{"id": "mcs500_programming_manual_6361", "text": "Please note that this feature is in beta and may undergo changes, including potential API\nchanges.", "source": "mcs500_programming_manual", "chunk_index": 6361, "length": 98, "hash": "412181872d09ebe81d72e23181ded525"}
{"id": "mcs500_programming_manual_6362", "text": "Please note that this feature is in beta and may undergo changes, including potential API\nchanges.", "source": "mcs500_programming_manual", "chunk_index": 6362, "length": 98, "hash": "412181872d09ebe81d72e23181ded525"}
{"id": "mcs500_programming_manual_6363", "text": "We also provide an API to manage persistent variables. These variables persist after the robot\nis rebooted. They can be used in programs that control the robot (via the TCP API or cyclic\nprotocols).", "source": "mcs500_programming_manual", "chunk_index": 6363, "length": 198, "hash": "32da65d75c2d3eb47ceea65da9bcadd3"}
{"id": "mcs500_programming_manual_6364", "text": "We also provide an API to manage persistent variables. These variables persist after the robot\nis rebooted. They can be used in programs that control the robot (via the TCP API or cyclic\nprotocols).", "source": "mcs500_programming_manual", "chunk_index": 6364, "length": 198, "hash": "32da65d75c2d3eb47ceea65da9bcadd3"}
{"id": "mcs500_programming_manual_6365", "text": "Variables are ideal for saving information that can vary between different robots running the\nsame program, such as reference positions, desired velocities, or delays. This allows the\nprogram to automatically adapt to each robot it is executed on.", "source": "mcs500_programming_manual", "chunk_index": 6365, "length": 247, "hash": "53ef30b62c571668722c4907c489d8ec"}
{"id": "mcs500_programming_manual_6366", "text": "Variables are ideal for saving information that can vary between different robots running the\nsame program, such as reference positions, desired velocities, or delays. This allows the\nprogram to automatically adapt to each robot it is executed on.", "source": "mcs500_programming_manual", "chunk_index": 6366, "length": 247, "hash": "53ef30b62c571668722c4907c489d8ec"}
{"id": "mcs500_programming_manual_6367", "text": "Variables can be referenced by the programs saved in the robot (by passing variables instead\nof numeric arguments to robot commands). They can also be referenced by a PLC (by using\nvariables as arguments for motion commands or by setting variables, then starting a program\nthat uses them).", "source": "mcs500_programming_manual", "chunk_index": 6367, "length": 289, "hash": "52b2d923b961d0acdf6927effb01b83e"}
{"id": "mcs500_programming_manual_6368", "text": "Variables can be referenced by the programs saved in the robot (by passing variables instead\nof numeric arguments to robot commands). They can also be referenced by a PLC (by using\nvariables as arguments for motion commands or by setting variables, then starting a program\nthat uses them).", "source": "mcs500_programming_manual", "chunk_index": 6368, "length": 289, "hash": "52b2d923b961d0acdf6927effb01b83e"}
{"id": "mcs500_programming_manual_6369", "text": "The complete list of variables management commands is:", "source": "mcs500_programming_manual", "chunk_index": 6369, "length": 54, "hash": "e3240555d871425648f8777d4c48d417"}
{"id": "mcs500_programming_manual_6370", "text": "The complete list of variables management commands is:", "source": "mcs500_programming_manual", "chunk_index": 6370, "length": 54, "hash": "e3240555d871425648f8777d4c48d417"}
{"id": "mcs500_programming_manual_6371", "text": "\u2022 CreateVariable (page 334)", "source": "mcs500_programming_manual", "chunk_index": 6371, "length": 27, "hash": "73486e236f68c5536b2dc7b98497f208"}
{"id": "mcs500_programming_manual_6372", "text": "\u2022 DeleteVariable (page 335)", "source": "mcs500_programming_manual", "chunk_index": 6372, "length": 27, "hash": "f6f74d1652e09d32fd67f0503f828baa"}
{"id": "mcs500_programming_manual_6373", "text": "\u2022 GetVariable (page 336)", "source": "mcs500_programming_manual", "chunk_index": 6373, "length": 24, "hash": "247854c8221b4709feea1afd5c8c3048"}
{"id": "mcs500_programming_manual_6374", "text": "\u2022 ListVariables (page 337)", "source": "mcs500_programming_manual", "chunk_index": 6374, "length": 26, "hash": "493c53dba6859eada65dc8cd54194b51"}
{"id": "mcs500_programming_manual_6375", "text": "\u2022 SetVariable (page 337)", "source": "mcs500_programming_manual", "chunk_index": 6375, "length": 24, "hash": "5a1a78836f3928f56386a97e551cf475"}
{"id": "mcs500_programming_manual_6376", "text": "The following provides a summary of important details regarding variables in the robot:", "source": "mcs500_programming_manual", "chunk_index": 6376, "length": 87, "hash": "eba509ba2893f3c601a5911bed4c2388"}
{"id": "mcs500_programming_manual_6377", "text": "The following provides a summary of important details regarding variables in the robot:", "source": "mcs500_programming_manual", "chunk_index": 6377, "length": 87, "hash": "eba509ba2893f3c601a5911bed4c2388"}
{"id": "mcs500_programming_manual_6378", "text": "\u2022 Persistence Variables are saved on the robot and persist after rebooting. However, a", "source": "mcs500_programming_manual", "chunk_index": 6378, "length": 86, "hash": "dff87d869c93023b9edc3fb3615d6261"}
{"id": "mcs500_programming_manual_6379", "text": "Variables are saved on the robot and persist after rebooting. However, a", "source": "mcs500_programming_manual", "chunk_index": 6379, "length": 72, "hash": "58d3f12018a261b7bcb0336343aaa7ae"}
{"id": "mcs500_programming_manual_6380", "text": "factory reset removes all variables from the robot\u2019s persistent storage.", "source": "mcs500_programming_manual", "chunk_index": 6380, "length": 72, "hash": "36eea075a16e8dead035a2ee9d2cd9d3"}
{"id": "mcs500_programming_manual_6381", "text": "factory reset removes all variables from the robot\u2019s persistent storage.", "source": "mcs500_programming_manual", "chunk_index": 6381, "length": 72, "hash": "36eea075a16e8dead035a2ee9d2cd9d3"}
{"id": "mcs500_programming_manual_6382", "text": "\u2022 Access and modification Variables can be accessed, created, modified, or deleted in", "source": "mcs500_programming_manual", "chunk_index": 6382, "length": 85, "hash": "17fa0fac5d2d332095f58b1ad9c4cac2"}
{"id": "mcs500_programming_manual_6383", "text": "Access and modification", "source": "mcs500_programming_manual", "chunk_index": 6383, "length": 23, "hash": "0a2fd6feae5b6404cfe22b222d342c53"}
{"id": "mcs500_programming_manual_6384", "text": "Variables can be accessed, created, modified, or deleted in", "source": "mcs500_programming_manual", "chunk_index": 6384, "length": 59, "hash": "ad02d0aa664f164994558976ab912c11"}
{"id": "mcs500_programming_manual_6385", "text": "any robot state (robot activated, robot deactivated, robot in recovery mode, etc.).", "source": "mcs500_programming_manual", "chunk_index": 6385, "length": 83, "hash": "8491b754bc0df125c7d34fbe18e9498e"}
{"id": "mcs500_programming_manual_6386", "text": "any robot state (robot activated, robot deactivated, robot in recovery mode, etc.).", "source": "mcs500_programming_manual", "chunk_index": 6386, "length": 83, "hash": "8491b754bc0df125c7d34fbe18e9498e"}
{"id": "mcs500_programming_manual_6387", "text": "\u2022 Data types Variables can store a variety of JSON-supported values, including booleans,", "source": "mcs500_programming_manual", "chunk_index": 6387, "length": 88, "hash": "e15033c481e75fdee31f4d7e68aa10a4"}
{"id": "mcs500_programming_manual_6388", "text": "Variables can store a variety of JSON-supported values, including booleans,", "source": "mcs500_programming_manual", "chunk_index": 6388, "length": 75, "hash": "6e69322fe9ba1a8c2ecded9e5718e926"}
{"id": "mcs500_programming_manual_6389", "text": "numbers, strings, and arrays.", "source": "mcs500_programming_manual", "chunk_index": 6389, "length": 29, "hash": "26cd213e4d8a65a6816ca916495faf1c"}
{"id": "mcs500_programming_manual_6390", "text": "numbers, strings, and arrays.", "source": "mcs500_programming_manual", "chunk_index": 6390, "length": 29, "hash": "26cd213e4d8a65a6816ca916495faf1c"}
{"id": "mcs500_programming_manual_6391", "text": "The variable type is deduced by the value provided to CreateVariable (page 334). Command\nSetVariable (page 337) will be refused if the provided value is of a different type. No automatic\ntype conversion is performed by the robot.", "source": "mcs500_programming_manual", "chunk_index": 6391, "length": 229, "hash": "ef4a75a80a588e5285a1dbe26721f4fa"}
{"id": "mcs500_programming_manual_6392", "text": "The variable type is deduced by the value provided to", "source": "mcs500_programming_manual", "chunk_index": 6392, "length": 53, "hash": "0e67a42a16d18fc2dd5617623088cf76"}
{"id": "mcs500_programming_manual_6393", "text": "(page 337) will be refused if the provided value is of a different type. No automatic\ntype conversion is performed by the robot.", "source": "mcs500_programming_manual", "chunk_index": 6393, "length": 128, "hash": "dcc6fd8e4865abfdeec3c56539593404"}
{"id": "mcs500_programming_manual_6394", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6394, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6395", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6395, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6396", "text": "Managing variables in the MecaPortal", "source": "mcs500_programming_manual", "chunk_index": 6396, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "mcs500_programming_manual_6397", "text": "Managing variables in the MecaPortal", "source": "mcs500_programming_manual", "chunk_index": 6397, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "mcs500_programming_manual_6398", "text": "The robot\u2019s MecaPortal web interface has a configuration panel to view, edit, create and delete\nvariables. For more information on the MecaPortal, please refer to mecaportal_config_menu\nof the MecaPortal operating manual.", "source": "mcs500_programming_manual", "chunk_index": 6398, "length": 221, "hash": "f570b8b7f4cee6c6936610831ec3da61"}
{"id": "mcs500_programming_manual_6399", "text": "The robot\u2019s MecaPortal web interface has a configuration panel to view, edit, create and delete\nvariables. For more information on the MecaPortal, please refer to", "source": "mcs500_programming_manual", "chunk_index": 6399, "length": 162, "hash": "e55319406ab3a7aa2c01c7888c1690e2"}
{"id": "mcs500_programming_manual_6400", "text": "mecaportal_config_menu", "source": "mcs500_programming_manual", "chunk_index": 6400, "length": 22, "hash": "a5c3ef3ab5728a830d4f0ec155f97c0b"}
{"id": "mcs500_programming_manual_6401", "text": "of the MecaPortal operating manual.", "source": "mcs500_programming_manual", "chunk_index": 6401, "length": 35, "hash": "09e68a9873883c80563f8dce51950a90"}
{"id": "mcs500_programming_manual_6402", "text": "Managing variables in the MecaPortal", "source": "mcs500_programming_manual", "chunk_index": 6402, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "mcs500_programming_manual_6403", "text": "Managing variables in the MecaPortal", "source": "mcs500_programming_manual", "chunk_index": 6403, "length": 36, "hash": "d79f7fff518b5f55e4a4ab6d0cb7bbbd"}
{"id": "mcs500_programming_manual_6404", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6404, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6405", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6405, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6406", "text": "Managing variables in robot programs (TCP API)", "source": "mcs500_programming_manual", "chunk_index": 6406, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "mcs500_programming_manual_6407", "text": "Managing variables in robot programs (TCP API)", "source": "mcs500_programming_manual", "chunk_index": 6407, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "mcs500_programming_manual_6408", "text": "In robot programs, you can use CreateVariable (page 334), DeleteVariable (page 335) or\nSetVariable (page 337) commands to manage your variables.", "source": "mcs500_programming_manual", "chunk_index": 6408, "length": 144, "hash": "dfcdc0c1946ee758b1917a7ddea4624f"}
{"id": "mcs500_programming_manual_6409", "text": "In robot programs, you can use", "source": "mcs500_programming_manual", "chunk_index": 6409, "length": 30, "hash": "dfc5b6e53eadb0a44d7fb8a0b704c073"}
{"id": "mcs500_programming_manual_6410", "text": "(page 337) commands to manage your variables.", "source": "mcs500_programming_manual", "chunk_index": 6410, "length": 45, "hash": "b43e84d562c7b5eb84493d9b53fda486"}
{"id": "mcs500_programming_manual_6411", "text": "We suggest to create a program responsible for variables creation (using CreateVariable\n(page 334)) that is called once, then refer to (or modify) these variables in your robot\nprograms.", "source": "mcs500_programming_manual", "chunk_index": 6411, "length": 186, "hash": "ad1df2a799205b0b3bc0690dad78c507"}
{"id": "mcs500_programming_manual_6412", "text": "We suggest to create a program responsible for variables creation (using", "source": "mcs500_programming_manual", "chunk_index": 6412, "length": 72, "hash": "3784ff3c392af5ecea306477fb20ca86"}
{"id": "mcs500_programming_manual_6413", "text": "(page 334)) that is called once, then refer to (or modify) these variables in your robot\nprograms.", "source": "mcs500_programming_manual", "chunk_index": 6413, "length": 98, "hash": "2981374d717fa2ddd4e9303b80b59df4"}
{"id": "mcs500_programming_manual_6414", "text": "You can refer to these variables by using vars.myGroup.myVar when calling robot API\nfunctions, where myGroup is the case-sensitive name of the group (you can have subgroups\nas well) and myVar is the case-sensitive name of the variable. There are two ways to use\nvariables in robot TCP API commands:", "source": "mcs500_programming_manual", "chunk_index": 6414, "length": 298, "hash": "026b4cf55f47b30db00eae84f0dccc20"}
{"id": "mcs500_programming_manual_6415", "text": "You can refer to these variables by using", "source": "mcs500_programming_manual", "chunk_index": 6415, "length": 41, "hash": "6d2ed77c428a790e3fec18c66ab1520b"}
{"id": "mcs500_programming_manual_6416", "text": "when calling robot API\nfunctions, where", "source": "mcs500_programming_manual", "chunk_index": 6416, "length": 39, "hash": "45cb5ae377c9ad88223a9b5bd2818c3d"}
{"id": "mcs500_programming_manual_6417", "text": "is the case-sensitive name of the group (you can have subgroups\nas well) and", "source": "mcs500_programming_manual", "chunk_index": 6417, "length": 76, "hash": "7c0e0f071001f4f52af79bff85199fcb"}
{"id": "mcs500_programming_manual_6418", "text": "is the case-sensitive name of the variable. There are two ways to use\nvariables in robot TCP API commands:", "source": "mcs500_programming_manual", "chunk_index": 6418, "length": 106, "hash": "b82960fe9517012a1b88f0cfc78960c1"}
{"id": "mcs500_programming_manual_6419", "text": "Single-value variables", "source": "mcs500_programming_manual", "chunk_index": 6419, "length": 22, "hash": "5f4f43aa1e30dd7faae40d2eb9431ea3"}
{"id": "mcs500_programming_manual_6420", "text": "Single-value variables", "source": "mcs500_programming_manual", "chunk_index": 6420, "length": 22, "hash": "5f4f43aa1e30dd7faae40d2eb9431ea3"}
{"id": "mcs500_programming_manual_6421", "text": "\u2022 A single-value variable holds a single value and has the prefix vars.", "source": "mcs500_programming_manual", "chunk_index": 6421, "length": 71, "hash": "8584580481acb18cea32ebf052329f9e"}
{"id": "mcs500_programming_manual_6422", "text": "\u2022 A single-value variable holds a single value and has the prefix", "source": "mcs500_programming_manual", "chunk_index": 6422, "length": 65, "hash": "84674672b557a2f405aa3d84eab7a451"}
{"id": "mcs500_programming_manual_6423", "text": "\u2022 Example: SetPayload(vars.myGroup.m, vars.myGroup.cx, vars.myGroup.cy, vars.myGroup.cz)", "source": "mcs500_programming_manual", "chunk_index": 6423, "length": 88, "hash": "c7903c8776f8aecf0e2d47453d4bfa4c"}
{"id": "mcs500_programming_manual_6424", "text": "SetPayload(vars.myGroup.m, vars.myGroup.cx, vars.myGroup.cy, vars.myGroup.cz)", "source": "mcs500_programming_manual", "chunk_index": 6424, "length": 77, "hash": "5ecc4921cd8705812621cc86af4e5ee6"}
{"id": "mcs500_programming_manual_6425", "text": "Unrolling array variables", "source": "mcs500_programming_manual", "chunk_index": 6425, "length": 25, "hash": "28f0438f22f064b9166bbee8c8f001e4"}
{"id": "mcs500_programming_manual_6426", "text": "Unrolling array variables", "source": "mcs500_programming_manual", "chunk_index": 6426, "length": 25, "hash": "28f0438f22f064b9166bbee8c8f001e4"}
{"id": "mcs500_programming_manual_6427", "text": "\u2022 An unrolling array variable holds an array and has the prefix *vars. The asterisk (*)", "source": "mcs500_programming_manual", "chunk_index": 6427, "length": 87, "hash": "65e8eabdad67e88e901e2405fa854797"}
{"id": "mcs500_programming_manual_6428", "text": "\u2022 An unrolling array variable holds an array and has the prefix", "source": "mcs500_programming_manual", "chunk_index": 6428, "length": 63, "hash": "9871fa53afc738d5b85e2fb6b43ee5a7"}
{"id": "mcs500_programming_manual_6429", "text": "unrolls the array to pass individual elements to the function.", "source": "mcs500_programming_manual", "chunk_index": 6429, "length": 62, "hash": "0cbf47d402a67fb1b7337801365b22e7"}
{"id": "mcs500_programming_manual_6430", "text": "unrolls the array to pass individual elements to the function.", "source": "mcs500_programming_manual", "chunk_index": 6430, "length": 62, "hash": "0cbf47d402a67fb1b7337801365b22e7"}
{"id": "mcs500_programming_manual_6431", "text": "\u2022 Example: MoveJoints(*vars.myGroup.myJointPos)", "source": "mcs500_programming_manual", "chunk_index": 6431, "length": 47, "hash": "ad7b6afa35abb21fcd34eb39779a6e39"}
{"id": "mcs500_programming_manual_6432", "text": "\u2022 Example: MoveJoints(*vars.myGroup.myJointPos)", "source": "mcs500_programming_manual", "chunk_index": 6432, "length": 47, "hash": "ad7b6afa35abb21fcd34eb39779a6e39"}
{"id": "mcs500_programming_manual_6433", "text": "Managing variables in robot programs (TCP API)", "source": "mcs500_programming_manual", "chunk_index": 6433, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "mcs500_programming_manual_6434", "text": "Managing variables in robot programs (TCP API)", "source": "mcs500_programming_manual", "chunk_index": 6434, "length": 46, "hash": "35ec45107df4959e3715316dfd1d7e0f"}
{"id": "mcs500_programming_manual_6435", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6435, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6436", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6436, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6437", "text": "Managing variables with Mecademicpy (Python API)", "source": "mcs500_programming_manual", "chunk_index": 6437, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "mcs500_programming_manual_6438", "text": "Managing variables with Mecademicpy (Python API)", "source": "mcs500_programming_manual", "chunk_index": 6438, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "mcs500_programming_manual_6439", "text": "The Python API provides a simplified API for managing variables. All robot variables are\nsynchronized and stored in the robot class as attributes of robot.vars.", "source": "mcs500_programming_manual", "chunk_index": 6439, "length": 160, "hash": "66414e369e3295e6f57f1b3c5d92cb6b"}
{"id": "mcs500_programming_manual_6440", "text": "The Python API provides a simplified API for managing variables. All robot variables are\nsynchronized and stored in the robot class as attributes of", "source": "mcs500_programming_manual", "chunk_index": 6440, "length": 148, "hash": "3389493025b77aa826fbc285e46d6757"}
{"id": "mcs500_programming_manual_6441", "text": "Creating or deleting a robot variable", "source": "mcs500_programming_manual", "chunk_index": 6441, "length": 37, "hash": "39aa2eacfef7fe0edefb4ad238071237"}
{"id": "mcs500_programming_manual_6442", "text": "Creating or deleting a robot variable", "source": "mcs500_programming_manual", "chunk_index": 6442, "length": 37, "hash": "39aa2eacfef7fe0edefb4ad238071237"}
{"id": "mcs500_programming_manual_6443", "text": "The robot Python class provides the same functions to manage variables:", "source": "mcs500_programming_manual", "chunk_index": 6443, "length": 71, "hash": "616c95964915e855c8edcb306f8422f7"}
{"id": "mcs500_programming_manual_6444", "text": "Python class provides the same functions to manage variables:", "source": "mcs500_programming_manual", "chunk_index": 6444, "length": 61, "hash": "13c385b79f74a3bc11494472d017e83d"}
{"id": "mcs500_programming_manual_6445", "text": "\u2022 robot.CreateVariable", "source": "mcs500_programming_manual", "chunk_index": 6445, "length": 22, "hash": "e5d8c8c7f27713a98145526617fa2641"}
{"id": "mcs500_programming_manual_6446", "text": "robot.CreateVariable", "source": "mcs500_programming_manual", "chunk_index": 6446, "length": 20, "hash": "49f5dc8469227aff7d5dceade3189d73"}
{"id": "mcs500_programming_manual_6447", "text": "\u2022 robot.DeleteVariable", "source": "mcs500_programming_manual", "chunk_index": 6447, "length": 22, "hash": "68b4b62fffc581df4dd45b9e2435b3cb"}
{"id": "mcs500_programming_manual_6448", "text": "robot.DeleteVariable", "source": "mcs500_programming_manual", "chunk_index": 6448, "length": 20, "hash": "512001807feabbdbd7698f7acf3d5378"}
{"id": "mcs500_programming_manual_6449", "text": "\u2022 robot.ListVariables", "source": "mcs500_programming_manual", "chunk_index": 6449, "length": 21, "hash": "5c3020b0f398b27f0c8c6ebf3bc271e1"}
{"id": "mcs500_programming_manual_6450", "text": "Please refer to Mecademicpy\u2019s documentation for details on these function calls.", "source": "mcs500_programming_manual", "chunk_index": 6450, "length": 80, "hash": "a99599c12e4e8eb3de5207acb9d9eb6a"}
{"id": "mcs500_programming_manual_6451", "text": "Please refer to Mecademicpy\u2019s documentation for details on these function calls.", "source": "mcs500_programming_manual", "chunk_index": 6451, "length": 80, "hash": "a99599c12e4e8eb3de5207acb9d9eb6a"}
{"id": "mcs500_programming_manual_6452", "text": "Directly accessing robot variables through Python attributes", "source": "mcs500_programming_manual", "chunk_index": 6452, "length": 60, "hash": "6e8d4d5af5c7516fb1d66fddb08a57fd"}
{"id": "mcs500_programming_manual_6453", "text": "Directly accessing robot variables through Python attributes", "source": "mcs500_programming_manual", "chunk_index": 6453, "length": 60, "hash": "6e8d4d5af5c7516fb1d66fddb08a57fd"}
{"id": "mcs500_programming_manual_6454", "text": "While a Python script can access a variable using robot.GetVariable and modify it with\nrobot.SetVariable or robot.CreateVariable, our Python API offers a more convenient\napproach: variables are available as attributes of robot.vars.", "source": "mcs500_programming_manual", "chunk_index": 6454, "length": 232, "hash": "4733c5b6424186db4de3f6adbe7b97ff"}
{"id": "mcs500_programming_manual_6455", "text": "While a Python script can access a variable using", "source": "mcs500_programming_manual", "chunk_index": 6455, "length": 49, "hash": "173c33858298b8146aa514f8074c4826"}
{"id": "mcs500_programming_manual_6456", "text": "robot.CreateVariable", "source": "mcs500_programming_manual", "chunk_index": 6456, "length": 20, "hash": "49f5dc8469227aff7d5dceade3189d73"}
{"id": "mcs500_programming_manual_6457", "text": ", our Python API offers a more convenient\napproach: variables are available as attributes of", "source": "mcs500_programming_manual", "chunk_index": 6457, "length": 92, "hash": "db6368b12c0846dfcc5c15aeb52e0b50"}
{"id": "mcs500_programming_manual_6458", "text": "To access a variable, use: robot.vars.myGroup.myVar", "source": "mcs500_programming_manual", "chunk_index": 6458, "length": 51, "hash": "4e069f3ee4e2e0820b3b33641aeee8c7"}
{"id": "mcs500_programming_manual_6459", "text": "To access a variable, use:", "source": "mcs500_programming_manual", "chunk_index": 6459, "length": 26, "hash": "3ff98adb0b922f25f0dd163ae655b2e2"}
{"id": "mcs500_programming_manual_6460", "text": "robot.vars.myGroup.myVar", "source": "mcs500_programming_manual", "chunk_index": 6460, "length": 24, "hash": "13eebec4f036188017d645a78dd0b601"}
{"id": "mcs500_programming_manual_6461", "text": "To modify a variable, assign a new value: robot.vars.myGroup.myVar = [1, 2, 3, 4, 5,\n6]", "source": "mcs500_programming_manual", "chunk_index": 6461, "length": 87, "hash": "58931bb48300faf331669e79683ae326"}
{"id": "mcs500_programming_manual_6462", "text": "To modify a variable, assign a new value:", "source": "mcs500_programming_manual", "chunk_index": 6462, "length": 41, "hash": "37e232af5310b870e8fb3746bd23fc49"}
{"id": "mcs500_programming_manual_6463", "text": "robot.vars.myGroup.myVar = [1, 2, 3, 4, 5,\n6]", "source": "mcs500_programming_manual", "chunk_index": 6463, "length": 45, "hash": "d7a65f5e3434fb24452ef892564e7262"}
{"id": "mcs500_programming_manual_6464", "text": "Setting a variable value is a blocking operation, as it involves sending a TCP request to\nthe robot and waiting for confirmation. Additionally, the robot must write the new value\nto persistent storage. For optimal performance, Python scripts should use local variables\n(and not robot variables) for values that change frequently during runtime.", "source": "mcs500_programming_manual", "chunk_index": 6464, "length": 344, "hash": "5cf5592d3e404ecf1ee0045f85b2de7d"}
{"id": "mcs500_programming_manual_6465", "text": "Setting a variable value is a blocking operation, as it involves sending a TCP request to\nthe robot and waiting for confirmation. Additionally, the robot must write the new value\nto persistent storage. For optimal performance, Python scripts should use local variables", "source": "mcs500_programming_manual", "chunk_index": 6465, "length": 268, "hash": "5d0a87a5009403e2c0f898e52c14b1f4"}
{"id": "mcs500_programming_manual_6466", "text": "(and not robot variables) for values that change frequently during runtime.", "source": "mcs500_programming_manual", "chunk_index": 6466, "length": 75, "hash": "0bfe71a78c484c4f2e387d6a59e89704"}
{"id": "mcs500_programming_manual_6467", "text": "Managing variables with Mecademicpy (Python API)", "source": "mcs500_programming_manual", "chunk_index": 6467, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "mcs500_programming_manual_6468", "text": "Managing variables with Mecademicpy (Python API)", "source": "mcs500_programming_manual", "chunk_index": 6468, "length": 48, "hash": "c88f5731740f9731bddea202f5a0b1b3"}
{"id": "mcs500_programming_manual_6469", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6469, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6470", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6470, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6471", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6471, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6472", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6472, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6473", "text": "In cyclic protocols (see Section 5), variables are accessed by their cyclic ID, which is defined\nwhen the variable is created.", "source": "mcs500_programming_manual", "chunk_index": 6473, "length": 126, "hash": "b609da80c0a8b4e9661432f70d2be1fe"}
{"id": "mcs500_programming_manual_6474", "text": "In cyclic protocols (see Section 5), variables are accessed by their cyclic ID, which is defined\nwhen the variable is created.", "source": "mcs500_programming_manual", "chunk_index": 6474, "length": 126, "hash": "b609da80c0a8b4e9661432f70d2be1fe"}
{"id": "mcs500_programming_manual_6475", "text": "The cyclic ID of a variable must be in the range [10000,19999].", "source": "mcs500_programming_manual", "chunk_index": 6475, "length": 63, "hash": "7a09cd6a9c03363b8866f87cc513c20b"}
{"id": "mcs500_programming_manual_6476", "text": "The cyclic ID of a variable must be in the range [10000,19999].", "source": "mcs500_programming_manual", "chunk_index": 6476, "length": 63, "hash": "7a09cd6a9c03363b8866f87cc513c20b"}
{"id": "mcs500_programming_manual_6477", "text": "By referring to this cyclic ID, cyclic protocols can modify variables and use to their values as\narguments for motion commands.", "source": "mcs500_programming_manual", "chunk_index": 6477, "length": 127, "hash": "bffec231f56dd35c81e18cde575e0850"}
{"id": "mcs500_programming_manual_6478", "text": "By referring to this cyclic ID, cyclic protocols can modify variables and use to their values as\narguments for motion commands.", "source": "mcs500_programming_manual", "chunk_index": 6478, "length": 127, "hash": "bffec231f56dd35c81e18cde575e0850"}
{"id": "mcs500_programming_manual_6479", "text": "Cyclic protocols do not support creating, deleting, getting, or listing variables.", "source": "mcs500_programming_manual", "chunk_index": 6479, "length": 82, "hash": "cc2e605725a10d459e1e006797fb7572"}
{"id": "mcs500_programming_manual_6480", "text": "Cyclic protocols do not support creating, deleting, getting, or listing variables.", "source": "mcs500_programming_manual", "chunk_index": 6480, "length": 82, "hash": "cc2e605725a10d459e1e006797fb7572"}
{"id": "mcs500_programming_manual_6481", "text": "A variable is modified by using its cyclic ID as the command ID in a sent cyclic command. For\nmore information on how to send a command using cyclic protocols, see Section 5.", "source": "mcs500_programming_manual", "chunk_index": 6481, "length": 174, "hash": "95638d81c5df135ea1edfea18798f23d"}
{"id": "mcs500_programming_manual_6482", "text": "A variable is modified by using its cyclic ID as the command ID in a sent cyclic command. For\nmore information on how to send a command using cyclic protocols, see Section 5.", "source": "mcs500_programming_manual", "chunk_index": 6482, "length": 174, "hash": "95638d81c5df135ea1edfea18798f23d"}
{"id": "mcs500_programming_manual_6483", "text": "The six floating-point values of the motion command are used to set the new value of the\nvariable as follows:", "source": "mcs500_programming_manual", "chunk_index": 6483, "length": 109, "hash": "96a566ae5af71d699670821e230e001c"}
{"id": "mcs500_programming_manual_6484", "text": "The six floating-point values of the motion command are used to set the new value of the\nvariable as follows:", "source": "mcs500_programming_manual", "chunk_index": 6484, "length": 109, "hash": "96a566ae5af71d699670821e230e001c"}
{"id": "mcs500_programming_manual_6485", "text": "\u2022 Cyclic protocols support only setting variables of type number or array of numbers;", "source": "mcs500_programming_manual", "chunk_index": 6485, "length": 85, "hash": "eae9a880a83bce2b05c9ebda274085b5"}
{"id": "mcs500_programming_manual_6486", "text": "\u2022 Cyclic protocols support only setting variables of type number or array of numbers;", "source": "mcs500_programming_manual", "chunk_index": 6486, "length": 85, "hash": "eae9a880a83bce2b05c9ebda274085b5"}
{"id": "mcs500_programming_manual_6487", "text": "\u2022 For a variable of type number, the first argument of the cyclic command is used as the", "source": "mcs500_programming_manual", "chunk_index": 6487, "length": 88, "hash": "a9be4db3230f93ef86323d0aef752e2c"}
{"id": "mcs500_programming_manual_6488", "text": "\u2022 For a variable of type number, the first argument of the cyclic command is used as the", "source": "mcs500_programming_manual", "chunk_index": 6488, "length": 88, "hash": "a9be4db3230f93ef86323d0aef752e2c"}
{"id": "mcs500_programming_manual_6489", "text": "\u2022 For a variable of type array of numbers, the corresponding number of cyclic command\narguments are used to update the array. The size of the array remains unchanged and\ncannot be modified through cyclic protocols;", "source": "mcs500_programming_manual", "chunk_index": 6489, "length": 214, "hash": "0c220caacc02470b26b2253b21938fea"}
{"id": "mcs500_programming_manual_6490", "text": "\u2022 For a variable of type array of numbers, the corresponding number of cyclic command\narguments are used to update the array. The size of the array remains unchanged and\ncannot be modified through cyclic protocols;", "source": "mcs500_programming_manual", "chunk_index": 6490, "length": 214, "hash": "0c220caacc02470b26b2253b21938fea"}
{"id": "mcs500_programming_manual_6491", "text": "Remember that the variable type is defined when the variable is created (CreateVariable\n(page 334)) and cannot be changed afterward. The robot also does not perform any\nautomatic type conversion. Therefore, boolean or string variables cannot be assigned\nthrough cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 6491, "length": 279, "hash": "38fd51681ce8e60af8ff0897c07cb4b9"}
{"id": "mcs500_programming_manual_6492", "text": "Remember that the variable type is defined when the variable is created (", "source": "mcs500_programming_manual", "chunk_index": 6492, "length": 73, "hash": "9dc6029208076235cfb9d4487842c724"}
{"id": "mcs500_programming_manual_6493", "text": "(page 334)) and cannot be changed afterward. The robot also does not perform any", "source": "mcs500_programming_manual", "chunk_index": 6493, "length": 80, "hash": "8181d17b63bebaf4f332b5da04611036"}
{"id": "mcs500_programming_manual_6494", "text": "automatic type conversion. Therefore, boolean or string variables cannot be assigned\nthrough cyclic protocols.", "source": "mcs500_programming_manual", "chunk_index": 6494, "length": 110, "hash": "cb8f6eaf7ed90432b20f627d3fd92e31"}
{"id": "mcs500_programming_manual_6495", "text": "Referencing a variable", "source": "mcs500_programming_manual", "chunk_index": 6495, "length": 22, "hash": "1ca1601e98d1f382f065765df8d7868a"}
{"id": "mcs500_programming_manual_6496", "text": "Referencing a variable", "source": "mcs500_programming_manual", "chunk_index": 6496, "length": 22, "hash": "1ca1601e98d1f382f065765df8d7868a"}
{"id": "mcs500_programming_manual_6497", "text": "To use a variable (or multiple variables) as arguments for cyclic protocol motion commands,\nproceed as follows:", "source": "mcs500_programming_manual", "chunk_index": 6497, "length": 111, "hash": "1637be05a87ed85a225ac826399810d9"}
{"id": "mcs500_programming_manual_6498", "text": "To use a variable (or multiple variables) as arguments for cyclic protocol motion commands,\nproceed as follows:", "source": "mcs500_programming_manual", "chunk_index": 6498, "length": 111, "hash": "1637be05a87ed85a225ac826399810d9"}
{"id": "mcs500_programming_manual_6499", "text": "\u2022 Set the desired command ID (example: 2 for MovePose (page 138));", "source": "mcs500_programming_manual", "chunk_index": 6499, "length": 66, "hash": "f1696036e390c813b67af3c1ae9b90ed"}
{"id": "mcs500_programming_manual_6500", "text": "\u2022 Set the desired command ID (example: 2 for", "source": "mcs500_programming_manual", "chunk_index": 6500, "length": 44, "hash": "91cf5a647588a1fb651620f73488592c"}
{"id": "mcs500_programming_manual_6501", "text": "\u2022 Set the UseVariables bit in cyclic motion control data (see Section 5);", "source": "mcs500_programming_manual", "chunk_index": 6501, "length": 73, "hash": "ab2913f563cef49f0a70cea93c638bc6"}
{"id": "mcs500_programming_manual_6502", "text": "bit in cyclic motion control data (see Section 5);", "source": "mcs500_programming_manual", "chunk_index": 6502, "length": 50, "hash": "e262f214f397d2611f123ad5970c1538"}
{"id": "mcs500_programming_manual_6503", "text": "\u2022 Set the variable ID(s) to use as the float arguments of the motion parameters structure", "source": "mcs500_programming_manual", "chunk_index": 6503, "length": 89, "hash": "d7c2e16eb5a76050f18a5b41a252fe81"}
{"id": "mcs500_programming_manual_6504", "text": "\u2022 Set the variable ID(s) to use as the float arguments of the motion parameters structure", "source": "mcs500_programming_manual", "chunk_index": 6504, "length": 89, "hash": "d7c2e16eb5a76050f18a5b41a252fe81"}
{"id": "mcs500_programming_manual_6505", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6505, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6506", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6506, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6507", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6507, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6508", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6508, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6509", "text": "\u2022 The chosen variable value(s) will be used in place of the inline motion command", "source": "mcs500_programming_manual", "chunk_index": 6509, "length": 81, "hash": "b8d69247bfafedea9eb44774afa6b3c6"}
{"id": "mcs500_programming_manual_6510", "text": "\u2022 The chosen variable value(s) will be used in place of the inline motion command", "source": "mcs500_programming_manual", "chunk_index": 6510, "length": 81, "hash": "b8d69247bfafedea9eb44774afa6b3c6"}
{"id": "mcs500_programming_manual_6511", "text": "\u2022 The values of the selected variables will be concatenated and used as (up to six)\narguments for the motion command. This allows you to combine the values from multiple\nvariables for a single motion command.", "source": "mcs500_programming_manual", "chunk_index": 6511, "length": 208, "hash": "2752b3be70a9a09de62e3ba272751fb3"}
{"id": "mcs500_programming_manual_6512", "text": "\u2022 The values of the selected variables will be concatenated and used as (up to six)\narguments for the motion command. This allows you to combine the values from multiple\nvariables for a single motion command.", "source": "mcs500_programming_manual", "chunk_index": 6512, "length": 208, "hash": "2752b3be70a9a09de62e3ba272751fb3"}
{"id": "mcs500_programming_manual_6513", "text": "In this example, we create a variable that is defined as an array of 6 float values, then use it\nto call the MovePose (page 138) command.", "source": "mcs500_programming_manual", "chunk_index": 6513, "length": 137, "hash": "98dee7b97ecc20090fa734e42874e26a"}
{"id": "mcs500_programming_manual_6514", "text": "In this example, we create a variable that is defined as an array of 6 float values, then use it\nto call the", "source": "mcs500_programming_manual", "chunk_index": 6514, "length": 108, "hash": "79aa2ddd69fbd41ac951f88016cde0a5"}
{"id": "mcs500_programming_manual_6515", "text": "It is also possible to pass multiple variables to the function, for example, one array of\nthree floats for [x, y, z] and another for [alpha, beta, gamma], or six separate variables\neach holding a single float. However, for simplicity, the following example uses a single\nvariable containing all six float values.", "source": "mcs500_programming_manual", "chunk_index": 6515, "length": 312, "hash": "3f6df2ee498892dad7cae52a00942299"}
{"id": "mcs500_programming_manual_6516", "text": "It is also possible to pass multiple variables to the function, for example, one array of\nthree floats for [x, y, z] and another for [alpha, beta, gamma], or six separate variables\neach holding a single float. However, for simplicity, the following example uses a single\nvariable containing all six float values.", "source": "mcs500_programming_manual", "chunk_index": 6516, "length": 312, "hash": "3f6df2ee498892dad7cae52a00942299"}
{"id": "mcs500_programming_manual_6517", "text": "Assuming we have previously created the following variable (using the MecaPortal or the TCP\nAPI):", "source": "mcs500_programming_manual", "chunk_index": 6517, "length": 97, "hash": "6dffafb05d3abbf3811d2cf51bc6a38f"}
{"id": "mcs500_programming_manual_6518", "text": "Assuming we have previously created the following variable (using the MecaPortal or the TCP\nAPI):", "source": "mcs500_programming_manual", "chunk_index": 6518, "length": 97, "hash": "6dffafb05d3abbf3811d2cf51bc6a38f"}
{"id": "mcs500_programming_manual_6519", "text": "\u2013 Array of six floating-point values, representing [x, y, z, alpha, beta, gamma]", "source": "mcs500_programming_manual", "chunk_index": 6519, "length": 80, "hash": "29c375b4865d64d7168f2b905e1b2556"}
{"id": "mcs500_programming_manual_6520", "text": "Array of six floating-point values, representing [x, y, z, alpha, beta, gamma]", "source": "mcs500_programming_manual", "chunk_index": 6520, "length": 78, "hash": "df159ed97ced3c560639220f624d536b"}
{"id": "mcs500_programming_manual_6521", "text": "The PLC can modify the variable myCartPos as shown below:", "source": "mcs500_programming_manual", "chunk_index": 6521, "length": 57, "hash": "40c79527533f5b49b8147b4286925e83"}
{"id": "mcs500_programming_manual_6522", "text": "The PLC can modify the variable", "source": "mcs500_programming_manual", "chunk_index": 6522, "length": 31, "hash": "ded029d615d9ab6467f8a55cc11b0e6b"}
{"id": "mcs500_programming_manual_6523", "text": "\u2022 Send motion command with ID 10000 (referring to myCartPos), using motion command", "source": "mcs500_programming_manual", "chunk_index": 6523, "length": 82, "hash": "5da6a7ebf601a03e3513746655708d55"}
{"id": "mcs500_programming_manual_6524", "text": "\u2022 Send motion command with ID 10000 (referring to", "source": "mcs500_programming_manual", "chunk_index": 6524, "length": 49, "hash": "c7ed114c3befcdbee4995e816691b065"}
{"id": "mcs500_programming_manual_6525", "text": "), using motion command", "source": "mcs500_programming_manual", "chunk_index": 6525, "length": 23, "hash": "d0f2867b8b3131f8bea26e41591fbf29"}
{"id": "mcs500_programming_manual_6526", "text": "arguments [190.0, 0.0, 308.9, -1, 75, -2] (see Section 5);", "source": "mcs500_programming_manual", "chunk_index": 6526, "length": 58, "hash": "b18ca8edae05514aedb60a8c68fffdd1"}
{"id": "mcs500_programming_manual_6527", "text": "[190.0, 0.0, 308.9, -1, 75, -2]", "source": "mcs500_programming_manual", "chunk_index": 6527, "length": 31, "hash": "485e36bc3d15f789d6c6024e8f06e215"}
{"id": "mcs500_programming_manual_6528", "text": "The PLC then selects the variable to be used in a MovePose (page 138) command as follows:", "source": "mcs500_programming_manual", "chunk_index": 6528, "length": 89, "hash": "6734cc997fb15d829bdd79398edafae6"}
{"id": "mcs500_programming_manual_6529", "text": "The PLC then selects the variable to be used in a", "source": "mcs500_programming_manual", "chunk_index": 6529, "length": 49, "hash": "6eed5019d9d9f71f7a9b6e6307dcca13"}
{"id": "mcs500_programming_manual_6530", "text": "(page 138) command as follows:", "source": "mcs500_programming_manual", "chunk_index": 6530, "length": 30, "hash": "023d23940933f1f50ace323b8695539c"}
{"id": "mcs500_programming_manual_6531", "text": "\u2022 Set motion command with ID 2 (MovePose (page 138))", "source": "mcs500_programming_manual", "chunk_index": 6531, "length": 52, "hash": "6ffaf917240c4f0ed9ad8586468f1bf4"}
{"id": "mcs500_programming_manual_6532", "text": "\u2022 Set motion command with ID 2 (", "source": "mcs500_programming_manual", "chunk_index": 6532, "length": 32, "hash": "b3f0598d3617f62f5dab529730894f70"}
{"id": "mcs500_programming_manual_6533", "text": "\u2022 With the UseVariables bit set (see Section 5);", "source": "mcs500_programming_manual", "chunk_index": 6533, "length": 48, "hash": "f8f1369ae81c02d0f42e40f155aaad91"}
{"id": "mcs500_programming_manual_6534", "text": "bit set (see Section 5);", "source": "mcs500_programming_manual", "chunk_index": 6534, "length": 24, "hash": "c5e2db3b6ce075e6315a07e0445f2b93"}
{"id": "mcs500_programming_manual_6535", "text": "\u2022 And as command arguments, the cyclic ID of the variable to use: [10000,0, 0, 0, 0, 0];", "source": "mcs500_programming_manual", "chunk_index": 6535, "length": 88, "hash": "50846d6ec471c2c92a0c48b774a19257"}
{"id": "mcs500_programming_manual_6536", "text": "\u2022 And as command arguments, the cyclic ID of the variable to use:", "source": "mcs500_programming_manual", "chunk_index": 6536, "length": 65, "hash": "db7c361759bd36186ee3ef2476488893"}
{"id": "mcs500_programming_manual_6537", "text": "[10000,0, 0, 0, 0, 0]", "source": "mcs500_programming_manual", "chunk_index": 6537, "length": 21, "hash": "44a73e88e22b6f24ea5affab97696a42"}
{"id": "mcs500_programming_manual_6538", "text": "\u2022 Note that here up to 6 variables could be used for calling the command, in this example", "source": "mcs500_programming_manual", "chunk_index": 6538, "length": 89, "hash": "bedbb50736754643ae37aed8edb6bcb5"}
{"id": "mcs500_programming_manual_6539", "text": "\u2022 Note that here up to 6 variables could be used for calling the command, in this example", "source": "mcs500_programming_manual", "chunk_index": 6539, "length": 89, "hash": "bedbb50736754643ae37aed8edb6bcb5"}
{"id": "mcs500_programming_manual_6540", "text": "we refer to a single variable that contains an array of 6 float.", "source": "mcs500_programming_manual", "chunk_index": 6540, "length": 64, "hash": "c4dd4fddb2de56288581861bc81d29d2"}
{"id": "mcs500_programming_manual_6541", "text": "we refer to a single variable that contains an array of 6 float.", "source": "mcs500_programming_manual", "chunk_index": 6541, "length": 64, "hash": "c4dd4fddb2de56288581861bc81d29d2"}
{"id": "mcs500_programming_manual_6542", "text": "\u2022 The MovePose (page 138) command will be executed using the six values from the", "source": "mcs500_programming_manual", "chunk_index": 6542, "length": 80, "hash": "f282a299830e222d6c60cdb9f8cd57a4"}
{"id": "mcs500_programming_manual_6543", "text": "(page 138) command will be executed using the six values from the", "source": "mcs500_programming_manual", "chunk_index": 6543, "length": 65, "hash": "f40721ce880ed2ba4612f52736785bc8"}
{"id": "mcs500_programming_manual_6544", "text": "\u2022 The result is: MovePose(190.0, 0.0, 308.9, -1, 75, -2) (page 138)", "source": "mcs500_programming_manual", "chunk_index": 6544, "length": 67, "hash": "e2c1d4c75f2bfab4bb050bf3725cec81"}
{"id": "mcs500_programming_manual_6545", "text": "MovePose(190.0, 0.0, 308.9, -1, 75, -2)", "source": "mcs500_programming_manual", "chunk_index": 6545, "length": 39, "hash": "e1f606a1bb31cf57a0e53f29e8792fc8"}
{"id": "mcs500_programming_manual_6546", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6546, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6547", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6547, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6548", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6548, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6549", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6549, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6550", "text": "CreateVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6550, "length": 29, "hash": "edfae8098a7ad9f1aa431b5350ce1cbf"}
{"id": "mcs500_programming_manual_6551", "text": "CreateVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6551, "length": 29, "hash": "edfae8098a7ad9f1aa431b5350ce1cbf"}
{"id": "mcs500_programming_manual_6552", "text": "This command creates a variable that is saved on the robot and persists even after a reboot.\nA variable is defined by its case-sensitive name, a value (supporting various types) and an\noptional cyclic ID.", "source": "mcs500_programming_manual", "chunk_index": 6552, "length": 204, "hash": "5fdadfe2b8027c5d0180839c3be1c36f"}
{"id": "mcs500_programming_manual_6553", "text": "This command creates a variable that is saved on the robot and persists even after a reboot.\nA variable is defined by its case-sensitive name, a value (supporting various types) and an\noptional cyclic ID.", "source": "mcs500_programming_manual", "chunk_index": 6553, "length": 204, "hash": "5fdadfe2b8027c5d0180839c3be1c36f"}
{"id": "mcs500_programming_manual_6554", "text": "For more information, see Commands for managing variables (beta) (page 328).", "source": "mcs500_programming_manual", "chunk_index": 6554, "length": 76, "hash": "08f4ac8a5c1bafe35fbd9367d7352305"}
{"id": "mcs500_programming_manual_6555", "text": "For more information, see", "source": "mcs500_programming_manual", "chunk_index": 6555, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "mcs500_programming_manual_6556", "text": "Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 6556, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "mcs500_programming_manual_6557", "text": "CreateVariable(name, value, cyclicId, override)", "source": "mcs500_programming_manual", "chunk_index": 6557, "length": 47, "hash": "df116be279a568bfd09b9f8997774578"}
{"id": "mcs500_programming_manual_6558", "text": "CreateVariable(name, value, cyclicId, override)", "source": "mcs500_programming_manual", "chunk_index": 6558, "length": 47, "hash": "df116be279a568bfd09b9f8997774578"}
{"id": "mcs500_programming_manual_6559", "text": "\u2013 A unique name for this variable (e.g., \u201cmyVar\u201d);", "source": "mcs500_programming_manual", "chunk_index": 6559, "length": 50, "hash": "08b910c1acd8094e85d49ecc94197812"}
{"id": "mcs500_programming_manual_6560", "text": "A unique name for this variable (e.g., \u201cmyVar\u201d);", "source": "mcs500_programming_manual", "chunk_index": 6560, "length": 48, "hash": "25d40ea01c8b7e7fc40311a1c999945a"}
{"id": "mcs500_programming_manual_6561", "text": "\u2013 Variable names are case sensitive;", "source": "mcs500_programming_manual", "chunk_index": 6561, "length": 36, "hash": "080fb0c29f749fc925c5e2c1b04163b7"}
{"id": "mcs500_programming_manual_6562", "text": "Variable names are case sensitive", "source": "mcs500_programming_manual", "chunk_index": 6562, "length": 33, "hash": "9d159d5ad0509f1e3daa4dc9711b444a"}
{"id": "mcs500_programming_manual_6563", "text": "\u2013 May include several case-sensitive prefixes (e.g., \u201cmyGroup.mySubgroup.mainWrf\u201d);", "source": "mcs500_programming_manual", "chunk_index": 6563, "length": 83, "hash": "7edfdb3c10822264afb451b43cc49aba"}
{"id": "mcs500_programming_manual_6564", "text": "May include several case-sensitive prefixes (e.g., \u201cmyGroup.mySubgroup.mainWrf\u201d);", "source": "mcs500_programming_manual", "chunk_index": 6564, "length": 81, "hash": "7426d0b110f2fa780460136affd13c76"}
{"id": "mcs500_programming_manual_6565", "text": "\u2013 If the name already exists, the behavior of CreateVariable (page 334) depends on", "source": "mcs500_programming_manual", "chunk_index": 6565, "length": 82, "hash": "dc02b912e4de646dbf087a1ea59f5587"}
{"id": "mcs500_programming_manual_6566", "text": "If the name already exists, the behavior of", "source": "mcs500_programming_manual", "chunk_index": 6566, "length": 43, "hash": "d539e28bddf2c685f2abaf03713f4d3d"}
{"id": "mcs500_programming_manual_6567", "text": "(page 334) depends on", "source": "mcs500_programming_manual", "chunk_index": 6567, "length": 21, "hash": "c92722d694a2f0b9cde92acf0e8cb92f"}
{"id": "mcs500_programming_manual_6568", "text": "the override argument.", "source": "mcs500_programming_manual", "chunk_index": 6568, "length": 22, "hash": "0ba2b2ba7920520d73c533adfb1818f0"}
{"id": "mcs500_programming_manual_6569", "text": "the override argument.", "source": "mcs500_programming_manual", "chunk_index": 6569, "length": 22, "hash": "0ba2b2ba7920520d73c533adfb1818f0"}
{"id": "mcs500_programming_manual_6570", "text": "\u2013 The value to assign to the variable;", "source": "mcs500_programming_manual", "chunk_index": 6570, "length": 38, "hash": "24ef0cc2c915bddac4ccfe8f97cf64d8"}
{"id": "mcs500_programming_manual_6571", "text": "The value to assign to the variable;", "source": "mcs500_programming_manual", "chunk_index": 6571, "length": 36, "hash": "9fd7d972f3f4d727c0db352c26fef850"}
{"id": "mcs500_programming_manual_6572", "text": "\u2013 The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false).", "source": "mcs500_programming_manual", "chunk_index": 6572, "length": 184, "hash": "17c59839d12890196f6c4aba4425302f"}
{"id": "mcs500_programming_manual_6573", "text": "The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false).", "source": "mcs500_programming_manual", "chunk_index": 6573, "length": 182, "hash": "99cb075c13845f918f868632d893c070"}
{"id": "mcs500_programming_manual_6574", "text": "\u2217 a boolean: CreateVariable(myBoolVar, true)", "source": "mcs500_programming_manual", "chunk_index": 6574, "length": 44, "hash": "c2bbb65822b3a0cb8f85c6cfe75710fe"}
{"id": "mcs500_programming_manual_6575", "text": "CreateVariable(myBoolVar, true)", "source": "mcs500_programming_manual", "chunk_index": 6575, "length": 31, "hash": "cebdbe73aca5c2a5f3bcac49ff89769a"}
{"id": "mcs500_programming_manual_6576", "text": "\u2217 a number: CreateVariable(myIntVar, -0.153)", "source": "mcs500_programming_manual", "chunk_index": 6576, "length": 44, "hash": "c5109f90642fd33b21d529f49291583a"}
{"id": "mcs500_programming_manual_6577", "text": "CreateVariable(myIntVar, -0.153)", "source": "mcs500_programming_manual", "chunk_index": 6577, "length": 32, "hash": "e8d402f5e8b65c062970a9d19f5b4017"}
{"id": "mcs500_programming_manual_6578", "text": "\u2217 a string: CreateVariable(myStringVar, \"Hello world!\")", "source": "mcs500_programming_manual", "chunk_index": 6578, "length": 55, "hash": "2f0ee97c5c0a676dd50a2e7cd12add3f"}
{"id": "mcs500_programming_manual_6579", "text": "CreateVariable(myStringVar, \"Hello world!\")", "source": "mcs500_programming_manual", "chunk_index": 6579, "length": 43, "hash": "06783d118807e926ef1ea49598ae2fa6"}
{"id": "mcs500_programming_manual_6580", "text": "\u2217 an array: CreateVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "mcs500_programming_manual", "chunk_index": 6580, "length": 69, "hash": "7ff5772bebedf4d0916fbebeae37c0c1"}
{"id": "mcs500_programming_manual_6581", "text": "CreateVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "mcs500_programming_manual", "chunk_index": 6581, "length": 57, "hash": "f99c320143b3ecfd1188911a01b10eaa"}
{"id": "mcs500_programming_manual_6582", "text": "\u2022 cyclicId (optional, 0 by default):", "source": "mcs500_programming_manual", "chunk_index": 6582, "length": 36, "hash": "a9a462a8543de741452e5d685890b5dc"}
{"id": "mcs500_programming_manual_6583", "text": "\u2022 cyclicId (optional, 0 by default):", "source": "mcs500_programming_manual", "chunk_index": 6583, "length": 36, "hash": "a9a462a8543de741452e5d685890b5dc"}
{"id": "mcs500_programming_manual_6584", "text": "\u2013 The unique ID used to refer to this variable in cyclic protocols in the range", "source": "mcs500_programming_manual", "chunk_index": 6584, "length": 79, "hash": "f72c61f4c93d78b0df64e906ed6c2ddf"}
{"id": "mcs500_programming_manual_6585", "text": "The unique ID used to refer to this variable in cyclic protocols in the range", "source": "mcs500_programming_manual", "chunk_index": 6585, "length": 77, "hash": "7d53b7d9e22f9a3be072faab94ed320c"}
{"id": "mcs500_programming_manual_6586", "text": "\u2013 When 0 (or omitted), no cyclic ID is associated with the variable;", "source": "mcs500_programming_manual", "chunk_index": 6586, "length": 68, "hash": "c27ef9b102cbe630ddb14d348f13156b"}
{"id": "mcs500_programming_manual_6587", "text": "When 0 (or omitted), no cyclic ID is associated with the variable;", "source": "mcs500_programming_manual", "chunk_index": 6587, "length": 66, "hash": "0c0a83aedf08ab0c6b1967b7ac28f82f"}
{"id": "mcs500_programming_manual_6588", "text": "\u2013 If the provided cyclic ID is already in use, CreateVariable (page 334) will fail with", "source": "mcs500_programming_manual", "chunk_index": 6588, "length": 87, "hash": "2160c8b150e9e84db03380fb0360ee0d"}
{"id": "mcs500_programming_manual_6589", "text": "If the provided cyclic ID is already in use,", "source": "mcs500_programming_manual", "chunk_index": 6589, "length": 44, "hash": "1432018aa355aa5e082b4d907b1c70fb"}
{"id": "mcs500_programming_manual_6590", "text": "(page 334) will fail with", "source": "mcs500_programming_manual", "chunk_index": 6590, "length": 25, "hash": "e78ecc3d88ae6f89ca31f1b826e0f261"}
{"id": "mcs500_programming_manual_6591", "text": "\u2013 If a non-zero cyclic ID is used, the value must be a number or an array of numbers,", "source": "mcs500_programming_manual", "chunk_index": 6591, "length": 85, "hash": "da23f1a057fab86f9a428b372f1f32fc"}
{"id": "mcs500_programming_manual_6592", "text": "If a non-zero cyclic ID is used, the value must be a number or an array of numbers,", "source": "mcs500_programming_manual", "chunk_index": 6592, "length": 83, "hash": "ccd4a5e5fd50549626ee7242d4602411"}
{"id": "mcs500_programming_manual_6593", "text": "otherwise CreateVariable (page 334) will fail with error [1552].", "source": "mcs500_programming_manual", "chunk_index": 6593, "length": 64, "hash": "5913d3843a9bd108b930f9011217bbd9"}
{"id": "mcs500_programming_manual_6594", "text": "(page 334) will fail with error [1552].", "source": "mcs500_programming_manual", "chunk_index": 6594, "length": 39, "hash": "c50ae264b0cd1e030abb7f0df059e858"}
{"id": "mcs500_programming_manual_6595", "text": "\u2022 override (optional, 0 by default):", "source": "mcs500_programming_manual", "chunk_index": 6595, "length": 36, "hash": "e58bb87267a876550502fc78d9862a54"}
{"id": "mcs500_programming_manual_6596", "text": "\u2022 override (optional, 0 by default):", "source": "mcs500_programming_manual", "chunk_index": 6596, "length": 36, "hash": "e58bb87267a876550502fc78d9862a54"}
{"id": "mcs500_programming_manual_6597", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6597, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6598", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6598, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6599", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6599, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6600", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6600, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6601", "text": "\u2013 Specifies how CreateVariable (page 334) behaves when a variable with the same", "source": "mcs500_programming_manual", "chunk_index": 6601, "length": 79, "hash": "59264d638f9c29d1682696b3bcf6bb13"}
{"id": "mcs500_programming_manual_6602", "text": "(page 334) behaves when a variable with the same", "source": "mcs500_programming_manual", "chunk_index": 6602, "length": 48, "hash": "fd903dca72321ad10cdb21ec28619f44"}
{"id": "mcs500_programming_manual_6603", "text": "name already exists:", "source": "mcs500_programming_manual", "chunk_index": 6603, "length": 20, "hash": "bae1e9c5b964fb31bb6e51abbb2fa157"}
{"id": "mcs500_programming_manual_6604", "text": "name already exists:", "source": "mcs500_programming_manual", "chunk_index": 6604, "length": 20, "hash": "bae1e9c5b964fb31bb6e51abbb2fa157"}
{"id": "mcs500_programming_manual_6605", "text": "\u2217 1 to update the existing variable\u2019s value and cyclic ID with the new ones;", "source": "mcs500_programming_manual", "chunk_index": 6605, "length": 76, "hash": "1918b6db50edd2c17ca00b37ad0932c5"}
{"id": "mcs500_programming_manual_6606", "text": "\u2217 1 to update the existing variable\u2019s value and cyclic ID with the new ones;", "source": "mcs500_programming_manual", "chunk_index": 6606, "length": 76, "hash": "1918b6db50edd2c17ca00b37ad0932c5"}
{"id": "mcs500_programming_manual_6607", "text": "\u2217 0 to return the error [1552] if the existing variable has a different type or cyclic", "source": "mcs500_programming_manual", "chunk_index": 6607, "length": 86, "hash": "e193059fa0265488e2911aaff68b4aac"}
{"id": "mcs500_programming_manual_6608", "text": "\u2217 0 to return the error [1552] if the existing variable has a different type or cyclic", "source": "mcs500_programming_manual", "chunk_index": 6608, "length": 86, "hash": "e193059fa0265488e2911aaff68b4aac"}
{"id": "mcs500_programming_manual_6609", "text": "ID; otherwise do nothing and leave the variable unchanged.", "source": "mcs500_programming_manual", "chunk_index": 6609, "length": 58, "hash": "d70dac2b734da32b5eb0fdd907ad4e8c"}
{"id": "mcs500_programming_manual_6610", "text": "ID; otherwise do nothing and leave the variable unchanged.", "source": "mcs500_programming_manual", "chunk_index": 6610, "length": 58, "hash": "d70dac2b734da32b5eb0fdd907ad4e8c"}
{"id": "mcs500_programming_manual_6611", "text": "\u2022 [2552] [name, value, cyclicId, override]", "source": "mcs500_programming_manual", "chunk_index": 6611, "length": 42, "hash": "cd9170048199e1c99f0f7b126011fc01"}
{"id": "mcs500_programming_manual_6612", "text": "\u2022 [2552] [name, value, cyclicId, override]", "source": "mcs500_programming_manual", "chunk_index": 6612, "length": 42, "hash": "cd9170048199e1c99f0f7b126011fc01"}
{"id": "mcs500_programming_manual_6613", "text": "\u2217 An error message explaining why variable creation failed;", "source": "mcs500_programming_manual", "chunk_index": 6613, "length": 59, "hash": "b348c5cee07cb5ef3a4541812b0e5a13"}
{"id": "mcs500_programming_manual_6614", "text": "\u2217 An error message explaining why variable creation failed;", "source": "mcs500_programming_manual", "chunk_index": 6614, "length": 59, "hash": "b348c5cee07cb5ef3a4541812b0e5a13"}
{"id": "mcs500_programming_manual_6615", "text": "\u2217 e.g., \u201cCyclic ID 100001 is already used by variable myOtherVar\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6615, "length": 66, "hash": "09e28f9bddf83880753748682341cafe"}
{"id": "mcs500_programming_manual_6616", "text": "\u2217 e.g., \u201cCyclic ID 100001 is already used by variable myOtherVar\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6616, "length": 66, "hash": "09e28f9bddf83880753748682341cafe"}
{"id": "mcs500_programming_manual_6617", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6617, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6618", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6618, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6619", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 332).", "source": "mcs500_programming_manual", "chunk_index": 6619, "length": 107, "hash": "866720162e79011df766bc9c8244d136"}
{"id": "mcs500_programming_manual_6620", "text": "This command is not available in cyclic protocols. See", "source": "mcs500_programming_manual", "chunk_index": 6620, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "mcs500_programming_manual_6621", "text": "Managing variables with cyclic\nprotocols", "source": "mcs500_programming_manual", "chunk_index": 6621, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "mcs500_programming_manual_6622", "text": "DeleteVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6622, "length": 29, "hash": "30586e175a95a0968437d59ec8a0a6ba"}
{"id": "mcs500_programming_manual_6623", "text": "DeleteVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6623, "length": 29, "hash": "30586e175a95a0968437d59ec8a0a6ba"}
{"id": "mcs500_programming_manual_6624", "text": "This command deletes a variable from the robot.", "source": "mcs500_programming_manual", "chunk_index": 6624, "length": 47, "hash": "dc0045df9be1ef182e34855fdfce9ac1"}
{"id": "mcs500_programming_manual_6625", "text": "This command deletes a variable from the robot.", "source": "mcs500_programming_manual", "chunk_index": 6625, "length": 47, "hash": "dc0045df9be1ef182e34855fdfce9ac1"}
{"id": "mcs500_programming_manual_6626", "text": "For more information, see Commands for managing variables (beta) (page 328).", "source": "mcs500_programming_manual", "chunk_index": 6626, "length": 76, "hash": "08f4ac8a5c1bafe35fbd9367d7352305"}
{"id": "mcs500_programming_manual_6627", "text": "For more information, see", "source": "mcs500_programming_manual", "chunk_index": 6627, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "mcs500_programming_manual_6628", "text": "Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 6628, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "mcs500_programming_manual_6629", "text": "DeleteVariable(name)", "source": "mcs500_programming_manual", "chunk_index": 6629, "length": 20, "hash": "5308d8b4ac12434ce5249bdb905708c0"}
{"id": "mcs500_programming_manual_6630", "text": "DeleteVariable(name)", "source": "mcs500_programming_manual", "chunk_index": 6630, "length": 20, "hash": "5308d8b4ac12434ce5249bdb905708c0"}
{"id": "mcs500_programming_manual_6631", "text": "\u2022 name: name of the variable to delete (e.g., \u201cmyVar\u201d).", "source": "mcs500_programming_manual", "chunk_index": 6631, "length": 55, "hash": "0fd27aa931b4a928f23facb04f42c156"}
{"id": "mcs500_programming_manual_6632", "text": "\u2022 name: name of the variable to delete (e.g., \u201cmyVar\u201d).", "source": "mcs500_programming_manual", "chunk_index": 6632, "length": 55, "hash": "0fd27aa931b4a928f23facb04f42c156"}
{"id": "mcs500_programming_manual_6633", "text": "\u2217 An error message explaining why variable deletion failed;", "source": "mcs500_programming_manual", "chunk_index": 6633, "length": 59, "hash": "08659612f782f2a21c93e43c0881b3b7"}
{"id": "mcs500_programming_manual_6634", "text": "\u2217 An error message explaining why variable deletion failed;", "source": "mcs500_programming_manual", "chunk_index": 6634, "length": 59, "hash": "08659612f782f2a21c93e43c0881b3b7"}
{"id": "mcs500_programming_manual_6635", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6635, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6636", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6636, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6637", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6637, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6638", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6638, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6639", "text": "\u2217 e.g., \u201cCannot delete variable myVar (not found)\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6639, "length": 51, "hash": "9c64591589cf3752882e3f426da2bbd8"}
{"id": "mcs500_programming_manual_6640", "text": "\u2217 e.g., \u201cCannot delete variable myVar (not found)\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6640, "length": 51, "hash": "9c64591589cf3752882e3f426da2bbd8"}
{"id": "mcs500_programming_manual_6641", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6641, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6642", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6642, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6643", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 332).", "source": "mcs500_programming_manual", "chunk_index": 6643, "length": 107, "hash": "866720162e79011df766bc9c8244d136"}
{"id": "mcs500_programming_manual_6644", "text": "This command is not available in cyclic protocols. See", "source": "mcs500_programming_manual", "chunk_index": 6644, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "mcs500_programming_manual_6645", "text": "Managing variables with cyclic\nprotocols", "source": "mcs500_programming_manual", "chunk_index": 6645, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "mcs500_programming_manual_6646", "text": "GetVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6646, "length": 26, "hash": "01160cc2b864947cc3f36bf7ecbf4910"}
{"id": "mcs500_programming_manual_6647", "text": "GetVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6647, "length": 26, "hash": "01160cc2b864947cc3f36bf7ecbf4910"}
{"id": "mcs500_programming_manual_6648", "text": "This command returns the value of a robot variable.", "source": "mcs500_programming_manual", "chunk_index": 6648, "length": 51, "hash": "61f61e6b99eb32f284304b9d1cbf2729"}
{"id": "mcs500_programming_manual_6649", "text": "This command returns the value of a robot variable.", "source": "mcs500_programming_manual", "chunk_index": 6649, "length": 51, "hash": "61f61e6b99eb32f284304b9d1cbf2729"}
{"id": "mcs500_programming_manual_6650", "text": "For more information, see Commands for managing variables (beta) (page 328).", "source": "mcs500_programming_manual", "chunk_index": 6650, "length": 76, "hash": "08f4ac8a5c1bafe35fbd9367d7352305"}
{"id": "mcs500_programming_manual_6651", "text": "For more information, see", "source": "mcs500_programming_manual", "chunk_index": 6651, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "mcs500_programming_manual_6652", "text": "Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 6652, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "mcs500_programming_manual_6653", "text": "\u2022 name: name of the variable to get (e.g., \u201cmyVar\u201d).", "source": "mcs500_programming_manual", "chunk_index": 6653, "length": 52, "hash": "70f462d63cb0bbb462a8ef6a14d85e65"}
{"id": "mcs500_programming_manual_6654", "text": "\u2022 name: name of the variable to get (e.g., \u201cmyVar\u201d).", "source": "mcs500_programming_manual", "chunk_index": 6654, "length": 52, "hash": "70f462d63cb0bbb462a8ef6a14d85e65"}
{"id": "mcs500_programming_manual_6655", "text": "\u2022 [2551] [name, value, cyclicId]", "source": "mcs500_programming_manual", "chunk_index": 6655, "length": 32, "hash": "cddb758f007f86f6f6c7cb2211595c86"}
{"id": "mcs500_programming_manual_6656", "text": "\u2022 [2551] [name, value, cyclicId]", "source": "mcs500_programming_manual", "chunk_index": 6656, "length": 32, "hash": "cddb758f007f86f6f6c7cb2211595c86"}
{"id": "mcs500_programming_manual_6657", "text": "\u2217 An error message explaining why the variable could not be retrieved;", "source": "mcs500_programming_manual", "chunk_index": 6657, "length": 70, "hash": "7bdd131b79abe6129f0354b07a2976e0"}
{"id": "mcs500_programming_manual_6658", "text": "\u2217 An error message explaining why the variable could not be retrieved;", "source": "mcs500_programming_manual", "chunk_index": 6658, "length": 70, "hash": "7bdd131b79abe6129f0354b07a2976e0"}
{"id": "mcs500_programming_manual_6659", "text": "\u2217 e.g., \u201cVariable \u2018myVar\u2019 does not exist\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6659, "length": 42, "hash": "25c31177526d943465f59e1e4567aa58"}
{"id": "mcs500_programming_manual_6660", "text": "\u2217 e.g., \u201cVariable \u2018myVar\u2019 does not exist\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6660, "length": 42, "hash": "25c31177526d943465f59e1e4567aa58"}
{"id": "mcs500_programming_manual_6661", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6661, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6662", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6662, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6663", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 332).", "source": "mcs500_programming_manual", "chunk_index": 6663, "length": 107, "hash": "866720162e79011df766bc9c8244d136"}
{"id": "mcs500_programming_manual_6664", "text": "This command is not available in cyclic protocols. See", "source": "mcs500_programming_manual", "chunk_index": 6664, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "mcs500_programming_manual_6665", "text": "Managing variables with cyclic\nprotocols", "source": "mcs500_programming_manual", "chunk_index": 6665, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "mcs500_programming_manual_6666", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6666, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6667", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6667, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6668", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6668, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6669", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6669, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6670", "text": "ListVariables (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6670, "length": 28, "hash": "3fe57230eeaf668f4881dbd9c29df25d"}
{"id": "mcs500_programming_manual_6671", "text": "ListVariables (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6671, "length": 28, "hash": "3fe57230eeaf668f4881dbd9c29df25d"}
{"id": "mcs500_programming_manual_6672", "text": "This command returns the list of all variable names that exist on the robot.", "source": "mcs500_programming_manual", "chunk_index": 6672, "length": 76, "hash": "99d9e175fe18194398d431eb900d9764"}
{"id": "mcs500_programming_manual_6673", "text": "This command returns the list of all variable names that exist on the robot.", "source": "mcs500_programming_manual", "chunk_index": 6673, "length": 76, "hash": "99d9e175fe18194398d431eb900d9764"}
{"id": "mcs500_programming_manual_6674", "text": "For more information, see Commands for managing variables (beta) (page 328).", "source": "mcs500_programming_manual", "chunk_index": 6674, "length": 76, "hash": "08f4ac8a5c1bafe35fbd9367d7352305"}
{"id": "mcs500_programming_manual_6675", "text": "For more information, see", "source": "mcs500_programming_manual", "chunk_index": 6675, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "mcs500_programming_manual_6676", "text": "Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 6676, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "mcs500_programming_manual_6677", "text": "\u2022 [2550] [var1, var2, \u2026]", "source": "mcs500_programming_manual", "chunk_index": 6677, "length": 24, "hash": "cd1eb742e437c09955175e11e86b36c3"}
{"id": "mcs500_programming_manual_6678", "text": "\u2022 [2550] [var1, var2, \u2026]", "source": "mcs500_programming_manual", "chunk_index": 6678, "length": 24, "hash": "cd1eb742e437c09955175e11e86b36c3"}
{"id": "mcs500_programming_manual_6679", "text": "\u2217 An error message explaining why the variable could not be listed.", "source": "mcs500_programming_manual", "chunk_index": 6679, "length": 67, "hash": "dff082668158b799feb71f1a42604fe8"}
{"id": "mcs500_programming_manual_6680", "text": "\u2217 An error message explaining why the variable could not be listed.", "source": "mcs500_programming_manual", "chunk_index": 6680, "length": 67, "hash": "dff082668158b799feb71f1a42604fe8"}
{"id": "mcs500_programming_manual_6681", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6681, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6682", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6682, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6683", "text": "This command is not available in cyclic protocols. See Managing variables with cyclic\nprotocols (page 332).", "source": "mcs500_programming_manual", "chunk_index": 6683, "length": 107, "hash": "866720162e79011df766bc9c8244d136"}
{"id": "mcs500_programming_manual_6684", "text": "This command is not available in cyclic protocols. See", "source": "mcs500_programming_manual", "chunk_index": 6684, "length": 54, "hash": "9d070d81950c632a744030f84dc02666"}
{"id": "mcs500_programming_manual_6685", "text": "Managing variables with cyclic\nprotocols", "source": "mcs500_programming_manual", "chunk_index": 6685, "length": 40, "hash": "1f5641887148bc7a627251cb7e7ca9bf"}
{"id": "mcs500_programming_manual_6686", "text": "SetVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6686, "length": 26, "hash": "8e19956bdc2e6fa8be65d99a0d035ebe"}
{"id": "mcs500_programming_manual_6687", "text": "SetVariable (beta feature)", "source": "mcs500_programming_manual", "chunk_index": 6687, "length": 26, "hash": "8e19956bdc2e6fa8be65d99a0d035ebe"}
{"id": "mcs500_programming_manual_6688", "text": "This command modifies a robot variable. The modification persists even after a reboot.", "source": "mcs500_programming_manual", "chunk_index": 6688, "length": 86, "hash": "e6a67fddd89f667f790ba580478ad883"}
{"id": "mcs500_programming_manual_6689", "text": "This command modifies a robot variable. The modification persists even after a reboot.", "source": "mcs500_programming_manual", "chunk_index": 6689, "length": 86, "hash": "e6a67fddd89f667f790ba580478ad883"}
{"id": "mcs500_programming_manual_6690", "text": "A variable\u2019s value can only be changed to a value of the same type. For example, a variable\nholding a number cannot be assigned a string or an array.", "source": "mcs500_programming_manual", "chunk_index": 6690, "length": 149, "hash": "db24519b15da2c0638c0a992f883c6d7"}
{"id": "mcs500_programming_manual_6691", "text": "A variable\u2019s value can only be changed to a value of the same type. For example, a variable\nholding a number cannot be assigned a string or an array.", "source": "mcs500_programming_manual", "chunk_index": 6691, "length": 149, "hash": "db24519b15da2c0638c0a992f883c6d7"}
{"id": "mcs500_programming_manual_6692", "text": "No automatic conversion is performed between supported types. For instance assigning an\ninteger to a boolean value, or vice versa, is not supported.", "source": "mcs500_programming_manual", "chunk_index": 6692, "length": 148, "hash": "ed7ae93bf1287327df732bbfbfb59f54"}
{"id": "mcs500_programming_manual_6693", "text": "No automatic conversion is performed between supported types. For instance assigning an", "source": "mcs500_programming_manual", "chunk_index": 6693, "length": 87, "hash": "a20165521e5f7dcaa6463e1f1e0620b9"}
{"id": "mcs500_programming_manual_6694", "text": "integer to a boolean value, or vice versa, is not supported.", "source": "mcs500_programming_manual", "chunk_index": 6694, "length": 60, "hash": "312fe00bae8d15816fe6d130b2f4f16e"}
{"id": "mcs500_programming_manual_6695", "text": "To change a variable\u2019s type, use the \u2018override\u2019 option in the CreateVariable (page 334)\ncommand.", "source": "mcs500_programming_manual", "chunk_index": 6695, "length": 96, "hash": "ddc834e59499585a4f91da654bc6354e"}
{"id": "mcs500_programming_manual_6696", "text": "To change a variable\u2019s type, use the \u2018override\u2019 option in the", "source": "mcs500_programming_manual", "chunk_index": 6696, "length": 61, "hash": "6fe37e61d0a8581902dac98815b525ee"}
{"id": "mcs500_programming_manual_6697", "text": "For more information, see Commands for managing variables (beta) (page 328).", "source": "mcs500_programming_manual", "chunk_index": 6697, "length": 76, "hash": "08f4ac8a5c1bafe35fbd9367d7352305"}
{"id": "mcs500_programming_manual_6698", "text": "For more information, see", "source": "mcs500_programming_manual", "chunk_index": 6698, "length": 25, "hash": "0f7387dd5f45ee23aed918c34f24513e"}
{"id": "mcs500_programming_manual_6699", "text": "Commands for managing variables (beta)", "source": "mcs500_programming_manual", "chunk_index": 6699, "length": 38, "hash": "3661471a5ffa59863eb61eb317f37bd2"}
{"id": "mcs500_programming_manual_6700", "text": "SetVariable(name, value)", "source": "mcs500_programming_manual", "chunk_index": 6700, "length": 24, "hash": "bee1e6c50b8cfdeaa439b7f24a07d67f"}
{"id": "mcs500_programming_manual_6701", "text": "SetVariable(name, value)", "source": "mcs500_programming_manual", "chunk_index": 6701, "length": 24, "hash": "bee1e6c50b8cfdeaa439b7f24a07d67f"}
{"id": "mcs500_programming_manual_6702", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6702, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6703", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6703, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6704", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6704, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6705", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6705, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6706", "text": "\u2013 The name of the variable to modify (e.g., \u201cmyVar\u201d).", "source": "mcs500_programming_manual", "chunk_index": 6706, "length": 53, "hash": "405056e57b8b5a6fba27f93f6a5e1ea1"}
{"id": "mcs500_programming_manual_6707", "text": "The name of the variable to modify (e.g., \u201cmyVar\u201d).", "source": "mcs500_programming_manual", "chunk_index": 6707, "length": 51, "hash": "6e56e09e46d89549d22e2a7ef0cc4f08"}
{"id": "mcs500_programming_manual_6708", "text": "\u2013 The new value to assign to the variable;", "source": "mcs500_programming_manual", "chunk_index": 6708, "length": 42, "hash": "b11ce0bb9f413c159308e45a5a363c16"}
{"id": "mcs500_programming_manual_6709", "text": "The new value to assign to the variable;", "source": "mcs500_programming_manual", "chunk_index": 6709, "length": 40, "hash": "49e409b26da3f73ae31ac1439429c6ae"}
{"id": "mcs500_programming_manual_6710", "text": "\u2013 The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false);", "source": "mcs500_programming_manual", "chunk_index": 6710, "length": 184, "hash": "e1935aa01a834634a19cd42582b984df"}
{"id": "mcs500_programming_manual_6711", "text": "The value can be any basic JSON type: boolean, number, string, or array (but not\na JSON object). Remember that in JSON syntax, boolean values must be lowercase\n(i.e., true or false);", "source": "mcs500_programming_manual", "chunk_index": 6711, "length": 182, "hash": "8f093082791c9c7d7173b78c96e4224c"}
{"id": "mcs500_programming_manual_6712", "text": "\u2013 SetVariable (page 337) will fail with error [1554] if you try to assign a value of a", "source": "mcs500_programming_manual", "chunk_index": 6712, "length": 86, "hash": "6153fc655258d43cb57bc3cd4957475a"}
{"id": "mcs500_programming_manual_6713", "text": "(page 337) will fail with error [1554] if you try to assign a value of a", "source": "mcs500_programming_manual", "chunk_index": 6713, "length": 72, "hash": "7f4849e67667b745d672f52977e7dc46"}
{"id": "mcs500_programming_manual_6714", "text": "different type or array length.", "source": "mcs500_programming_manual", "chunk_index": 6714, "length": 31, "hash": "350a974d77bd736fc08e435314a9a690"}
{"id": "mcs500_programming_manual_6715", "text": "different type or array length.", "source": "mcs500_programming_manual", "chunk_index": 6715, "length": 31, "hash": "350a974d77bd736fc08e435314a9a690"}
{"id": "mcs500_programming_manual_6716", "text": "\u2217 a boolean: SetVariable(myBoolVar, true)", "source": "mcs500_programming_manual", "chunk_index": 6716, "length": 41, "hash": "92484640e1ae3a0ba7e3672f9dc9df87"}
{"id": "mcs500_programming_manual_6717", "text": "SetVariable(myBoolVar, true)", "source": "mcs500_programming_manual", "chunk_index": 6717, "length": 28, "hash": "0da10a2aff0f770264851b14eef97d19"}
{"id": "mcs500_programming_manual_6718", "text": "\u2217 a number: SetVariable(myIntVar, -0.153)", "source": "mcs500_programming_manual", "chunk_index": 6718, "length": 41, "hash": "acd1229fabeb2d86da491a953500c074"}
{"id": "mcs500_programming_manual_6719", "text": "SetVariable(myIntVar, -0.153)", "source": "mcs500_programming_manual", "chunk_index": 6719, "length": 29, "hash": "aa91f6ce36e00a03ea138fa15a23df1e"}
{"id": "mcs500_programming_manual_6720", "text": "\u2217 a string: SetVariable(myStringVar, \"Hello world!\")", "source": "mcs500_programming_manual", "chunk_index": 6720, "length": 52, "hash": "29b456b797746f74baa1939d5ef5a7e7"}
{"id": "mcs500_programming_manual_6721", "text": "SetVariable(myStringVar, \"Hello world!\")", "source": "mcs500_programming_manual", "chunk_index": 6721, "length": 40, "hash": "c3a97680afaddeac13dae76eafaf8238"}
{"id": "mcs500_programming_manual_6722", "text": "\u2217 an array: SetVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "mcs500_programming_manual", "chunk_index": 6722, "length": 66, "hash": "980a7637c85886db14e23341b9e08e7a"}
{"id": "mcs500_programming_manual_6723", "text": "SetVariable(myArrayVar, [190.0, 0.0, 308.9, 0, 90, 0])", "source": "mcs500_programming_manual", "chunk_index": 6723, "length": 54, "hash": "afd26fc9208d63f1f1147006bc0ea23f"}
{"id": "mcs500_programming_manual_6724", "text": "\u2022 [2554] [name, value]", "source": "mcs500_programming_manual", "chunk_index": 6724, "length": 22, "hash": "00b9854a0330291618f344542a91632f"}
{"id": "mcs500_programming_manual_6725", "text": "\u2022 [2554] [name, value]", "source": "mcs500_programming_manual", "chunk_index": 6725, "length": 22, "hash": "00b9854a0330291618f344542a91632f"}
{"id": "mcs500_programming_manual_6726", "text": "\u2217 An error message explaining why the variable modification failed;", "source": "mcs500_programming_manual", "chunk_index": 6726, "length": 67, "hash": "ca00b77b4203851f89b55dfa99fa0003"}
{"id": "mcs500_programming_manual_6727", "text": "\u2217 An error message explaining why the variable modification failed;", "source": "mcs500_programming_manual", "chunk_index": 6727, "length": 67, "hash": "ca00b77b4203851f89b55dfa99fa0003"}
{"id": "mcs500_programming_manual_6728", "text": "\u2217 e.g., \u201cCannot set variable my_var (not found)\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6728, "length": 49, "hash": "1f993ead5db9a62e88e3a566f7827693"}
{"id": "mcs500_programming_manual_6729", "text": "\u2217 e.g., \u201cCannot set variable my_var (not found)\u201d.", "source": "mcs500_programming_manual", "chunk_index": 6729, "length": 49, "hash": "1f993ead5db9a62e88e3a566f7827693"}
{"id": "mcs500_programming_manual_6730", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6730, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6731", "text": "This command can be executed in any robot state.", "source": "mcs500_programming_manual", "chunk_index": 6731, "length": 48, "hash": "8cf96c1ab608196bb378aa1ed75de0ff"}
{"id": "mcs500_programming_manual_6732", "text": "See Managing variables with cyclic protocols (page 332).", "source": "mcs500_programming_manual", "chunk_index": 6732, "length": 56, "hash": "0d60270e74d6207c6199c88f6d356d17"}
{"id": "mcs500_programming_manual_6733", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6733, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6734", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6734, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6735", "text": "Managing variables with cyclic protocols", "source": "mcs500_programming_manual", "chunk_index": 6735, "length": 40, "hash": "1f6f233c0a35c29096ebe7cb553de84b"}
{"id": "mcs500_programming_manual_6736", "text": "Below is the list of terms used by us in our technical documentation.", "source": "mcs500_programming_manual", "chunk_index": 6736, "length": 69, "hash": "8f9f4b4bb3c39825baf1bb8bc9f1238b"}
{"id": "mcs500_programming_manual_6737", "text": "Below is the list of terms used by us in our technical documentation.", "source": "mcs500_programming_manual", "chunk_index": 6737, "length": 69, "hash": "8f9f4b4bb3c39825baf1bb8bc9f1238b"}
{"id": "mcs500_programming_manual_6738", "text": "active line: The line in the MecaPortal where the cursor is currently positioned.", "source": "mcs500_programming_manual", "chunk_index": 6738, "length": 81, "hash": "29642951d741b7e971752c05c6ce8061"}
{"id": "mcs500_programming_manual_6739", "text": ": The line in the MecaPortal where the cursor is currently positioned.", "source": "mcs500_programming_manual", "chunk_index": 6739, "length": 70, "hash": "0d43d9e0ee701a9ba31dd65e2df7ab7e"}
{"id": "mcs500_programming_manual_6740", "text": "BRF: Base Reference Frame.", "source": "mcs500_programming_manual", "chunk_index": 6740, "length": 26, "hash": "fe58c229addd080c32e43eee058aae46"}
{"id": "mcs500_programming_manual_6741", "text": ": Base Reference Frame.", "source": "mcs500_programming_manual", "chunk_index": 6741, "length": 23, "hash": "e9144f060389ad01ebddcf876d916d2f"}
{"id": "mcs500_programming_manual_6742", "text": "Cartesian space: The four-dimensional space defined by the position (x, y, z) and orientation\n(\u03b3) of the TRF with respect to the WRF.", "source": "mcs500_programming_manual", "chunk_index": 6742, "length": 133, "hash": "665c8daedd5d7e02f17e77962bc7d903"}
{"id": "mcs500_programming_manual_6743", "text": ": The four-dimensional space defined by the position (x, y, z) and orientation\n(\u03b3) of the TRF with respect to the WRF.", "source": "mcs500_programming_manual", "chunk_index": 6743, "length": 118, "hash": "d675285002e0c3b1cded658f1d93b24a"}
{"id": "mcs500_programming_manual_6744", "text": "control port: The TCP port 10000, over which commands to the robot and messages from\nthe robot are sent.", "source": "mcs500_programming_manual", "chunk_index": 6744, "length": 104, "hash": "89d16280ac1ee0a69ca465f03f93d0d9"}
{"id": "mcs500_programming_manual_6745", "text": ": The TCP port 10000, over which commands to the robot and messages from\nthe robot are sent.", "source": "mcs500_programming_manual", "chunk_index": 6745, "length": 92, "hash": "64fde0dc9c75f9e8f10afb97a955c71c"}
{"id": "mcs500_programming_manual_6746", "text": "data request commands: Commands used to request some data regarding the robot (e.g.,\nGetTrf (page 251), GetBlending (page 215), GetJointVel (page 229)). These commands are\nexecuted immediately and generally return values for parameters that have already been\nconfigured (sent and executed) with a Set* command (or the default values).", "source": "mcs500_programming_manual", "chunk_index": 6746, "length": 334, "hash": "0ee90456ccff7e0bc237d10770942e46"}
{"id": "mcs500_programming_manual_6747", "text": "data request commands", "source": "mcs500_programming_manual", "chunk_index": 6747, "length": 21, "hash": "98619a04001f4cb3e796fb1870e56f10"}
{"id": "mcs500_programming_manual_6748", "text": ": Commands used to request some data regarding the robot (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 6748, "length": 63, "hash": "3166a0cc02c8811fc6b4339a0d16fa6b"}
{"id": "mcs500_programming_manual_6749", "text": "(page 229)). These commands are", "source": "mcs500_programming_manual", "chunk_index": 6749, "length": 31, "hash": "d2efaeb0fee56e3337788e1f88d4a100"}
{"id": "mcs500_programming_manual_6750", "text": "executed immediately and generally return values for parameters that have already been\nconfigured (sent and executed) with a Set* command (or the default values).", "source": "mcs500_programming_manual", "chunk_index": 6750, "length": 162, "hash": "aea804b2c1340b7b1fee9bea980c1b4b"}
{"id": "mcs500_programming_manual_6751", "text": "default value: There are different settings in the robot controller that can be configured\nusing Set* commands (e.g., SetCartAcc (page 142)). Many of these settings have default\nvalues. Every time the robot is powered up, these settings are initialized to their default\nvalues. In the case of motion commands settings, their values are also initialized to their\ndefault values every time the robot is deactivated. In contrast, some settings are persistent\nand their values are stored on an SD drive.", "source": "mcs500_programming_manual", "chunk_index": 6751, "length": 499, "hash": "91bb718d6c92c11a8cbdccd831203764"}
{"id": "mcs500_programming_manual_6752", "text": ": There are different settings in the robot controller that can be configured\nusing Set* commands (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 6752, "length": 104, "hash": "f24aba2d6832d869e8875e77c9229f1b"}
{"id": "mcs500_programming_manual_6753", "text": "(page 142)). Many of these settings have default\nvalues. Every time the robot is powered up, these settings are initialized to their default\nvalues. In the case of motion commands settings, their values are also initialized to their\ndefault values every time the robot is deactivated. In contrast, some settings are persistent\nand their values are stored on an SD drive.", "source": "mcs500_programming_manual", "chunk_index": 6753, "length": 370, "hash": "51f4fe5eb6387b41dc18fdfeb7f78e4c"}
{"id": "mcs500_programming_manual_6754", "text": "detailed event log: This file mirrors the content of the event log panel in the MecaPortal\nwhen in detailed mode.\nIt can be downloaded from the MecaPortal (see Section 9 of the\nProgramming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6754, "length": 197, "hash": "28a73b92ffd9f0f8f8f3556abd4b38c1"}
{"id": "mcs500_programming_manual_6755", "text": ": This file mirrors the content of the event log panel in the MecaPortal\nwhen in detailed mode.\nIt can be downloaded from the MecaPortal (see Section 9 of the\nProgramming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6755, "length": 179, "hash": "9da1790f8f6be3a1b808da95826a3a4c"}
{"id": "mcs500_programming_manual_6756", "text": "distal link: In the MCS500, this is the black-anodized body that holds the spline shaft.", "source": "mcs500_programming_manual", "chunk_index": 6756, "length": 88, "hash": "64646b76ae8616f929ef203755333b0f"}
{"id": "mcs500_programming_manual_6757", "text": ": In the MCS500, this is the black-anodized body that holds the spline shaft.", "source": "mcs500_programming_manual", "chunk_index": 6757, "length": 77, "hash": "d4af90f30e02a993f3c0c5fde292778e"}
{"id": "mcs500_programming_manual_6758", "text": "EOAT: End-of-arm tooling.", "source": "mcs500_programming_manual", "chunk_index": 6758, "length": 25, "hash": "b099bc30e44c7c0bd96c1a32149c5560"}
{"id": "mcs500_programming_manual_6759", "text": ": End-of-arm tooling.", "source": "mcs500_programming_manual", "chunk_index": 6759, "length": 21, "hash": "db7b19a8abf30e913ff35da43bd745f3"}
{"id": "mcs500_programming_manual_6760", "text": "EOB: End-of-block message, [3012][], sent by default every time the robot has stopped moving\nAND its motion queue is empty. You can disable this message with the command SetEob\n(page 188).", "source": "mcs500_programming_manual", "chunk_index": 6760, "length": 188, "hash": "991795d5350b1d27df7529ecfe39c1d6"}
{"id": "mcs500_programming_manual_6761", "text": ": End-of-block message, [3012][], sent by default every time the robot has stopped moving\nAND its motion queue is empty. You can disable this message with the command", "source": "mcs500_programming_manual", "chunk_index": 6761, "length": 166, "hash": "f9e9fa326056664a02ecb8aecace6728"}
{"id": "mcs500_programming_manual_6762", "text": "EOM: End-of-motion message, [3004][], sent by the robot whenever it has stopped moving\nfor at least 1 ms, if this option is activated with SetEom (page 189).", "source": "mcs500_programming_manual", "chunk_index": 6762, "length": 157, "hash": "5170f5e701e85fa0a38e0eabd7f46a2e"}
{"id": "mcs500_programming_manual_6763", "text": ": End-of-motion message, [3004][], sent by the robot whenever it has stopped moving\nfor at least 1 ms, if this option is activated with", "source": "mcs500_programming_manual", "chunk_index": 6763, "length": 135, "hash": "aff9365d74185ceac4fad3d2a0b1e21f"}
{"id": "mcs500_programming_manual_6764", "text": "error mode: The robot goes into error mode when it encounters an error while executing a\ncommand or a hardware problem (see Table 1).", "source": "mcs500_programming_manual", "chunk_index": 6764, "length": 133, "hash": "54d63c28c0303f384b536dd121fc18d2"}
{"id": "mcs500_programming_manual_6765", "text": ": The robot goes into error mode when it encounters an error while executing a\ncommand or a hardware problem (see Table 1).", "source": "mcs500_programming_manual", "chunk_index": 6765, "length": 123, "hash": "060a00b99ca1e7feec9fd08c4364551e"}
{"id": "mcs500_programming_manual_6766", "text": "FCP: Flange Center Point. The origin of the FRF.", "source": "mcs500_programming_manual", "chunk_index": 6766, "length": 48, "hash": "bd378f5835379aa0ffcb17e873e335aa"}
{"id": "mcs500_programming_manual_6767", "text": ": Flange Center Point. The origin of the FRF.", "source": "mcs500_programming_manual", "chunk_index": 6767, "length": 45, "hash": "6ea72b71f39ea25b9fbf34788350b95c"}
{"id": "mcs500_programming_manual_6768", "text": "FRF: Flange Reference Frame.", "source": "mcs500_programming_manual", "chunk_index": 6768, "length": 28, "hash": "95c534285893f807be661b966362d0b8"}
{"id": "mcs500_programming_manual_6769", "text": ": Flange Reference Frame.", "source": "mcs500_programming_manual", "chunk_index": 6769, "length": 25, "hash": "288c9204593c4b5e45dca954fe41d349"}
{"id": "mcs500_programming_manual_6770", "text": "instantaneous commands: These are commands that are executed immediately, as soon\nas received by the robot. All data request commands (Get*), all robot control commands,\nall work zone supervision and collision prevention commands and some optional accessories\ncommands (*_Immediate) are instantaneous.", "source": "mcs500_programming_manual", "chunk_index": 6770, "length": 301, "hash": "737ee98ed8bb40c9bd8e69533581f692"}
{"id": "mcs500_programming_manual_6771", "text": "instantaneous commands", "source": "mcs500_programming_manual", "chunk_index": 6771, "length": 22, "hash": "b7fce247011c5194869abccf0bc2cca2"}
{"id": "mcs500_programming_manual_6772", "text": ": These are commands that are executed immediately, as soon\nas received by the robot. All data request commands (Get*), all robot control commands,\nall work zone supervision and collision prevention commands and some optional accessories\ncommands (*_Immediate) are instantaneous.", "source": "mcs500_programming_manual", "chunk_index": 6772, "length": 279, "hash": "b42b28d8eab52c32aacc042160f913b0"}
{"id": "mcs500_programming_manual_6773", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6773, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6774", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6774, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6775", "text": "inverse kinematics: The problem of obtaining the robot joint sets that correspond to a\ndesired end-effector pose. See Section 3 of the Programming manual for more details.", "source": "mcs500_programming_manual", "chunk_index": 6775, "length": 171, "hash": "c9ab3560b669967d089084b958a05ad3"}
{"id": "mcs500_programming_manual_6776", "text": ": The problem of obtaining the robot joint sets that correspond to a\ndesired end-effector pose. See Section 3 of the Programming manual for more details.", "source": "mcs500_programming_manual", "chunk_index": 6776, "length": 153, "hash": "f5c564431dbeade05f784f395c758df2"}
{"id": "mcs500_programming_manual_6777", "text": "joint position: The joint angle associated with a rotary joint or the position of joint 3.", "source": "mcs500_programming_manual", "chunk_index": 6777, "length": 90, "hash": "adc5a1972d500a4d2bbd67324640cf90"}
{"id": "mcs500_programming_manual_6778", "text": ": The joint angle associated with a rotary joint or the position of joint 3.", "source": "mcs500_programming_manual", "chunk_index": 6778, "length": 76, "hash": "17e9cebdb016d08c1d240cb431c3bf51"}
{"id": "mcs500_programming_manual_6779", "text": "joint set: The set of all joint positions.", "source": "mcs500_programming_manual", "chunk_index": 6779, "length": 42, "hash": "6e37bb267e64d2016e3931682a4cbb8f"}
{"id": "mcs500_programming_manual_6780", "text": ": The set of all joint positions.", "source": "mcs500_programming_manual", "chunk_index": 6780, "length": 33, "hash": "051948dab4dc84918b40e9b4577c1f1a"}
{"id": "mcs500_programming_manual_6781", "text": "joint space: The four-dimensional space defined by the positions of the robot joints.", "source": "mcs500_programming_manual", "chunk_index": 6781, "length": 85, "hash": "227abff09f39a3e9eed8a3a9541f4157"}
{"id": "mcs500_programming_manual_6782", "text": ": The four-dimensional space defined by the positions of the robot joints.", "source": "mcs500_programming_manual", "chunk_index": 6782, "length": 74, "hash": "c66add9a11f94f1cf60f699f64a1de85"}
{"id": "mcs500_programming_manual_6783", "text": "monitoring port: The TCP port 10001, over which data is sent periodically from the robot.", "source": "mcs500_programming_manual", "chunk_index": 6783, "length": 89, "hash": "8386a7e64ee69dfc58705de8f77687b6"}
{"id": "mcs500_programming_manual_6784", "text": ": The TCP port 10001, over which data is sent periodically from the robot.", "source": "mcs500_programming_manual", "chunk_index": 6784, "length": 74, "hash": "0ad8f8affcfb2c273c4039f8856b3dca"}
{"id": "mcs500_programming_manual_6785", "text": "motion commands: Commands used to construct the robot trajectory (e.g., Delay\n(page 125), MoveJoints (page 126), SetTRF (page 166), SetBlending (page 141)). When a\nMecademic robot receives a motion command, it places it in a motion queue. The command\nwill be run once all preceding motion commands have been executed.", "source": "mcs500_programming_manual", "chunk_index": 6785, "length": 317, "hash": "d90c745c70b5cbf2707b0ea98f9068bc"}
{"id": "mcs500_programming_manual_6786", "text": ": Commands used to construct the robot trajectory (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 6786, "length": 56, "hash": "b1198e5d1b70002e3b4ee5f6777e94ec"}
{"id": "mcs500_programming_manual_6787", "text": "(page 141)). When a\nMecademic robot receives a motion command, it places it in a motion queue. The command\nwill be run once all preceding motion commands have been executed.", "source": "mcs500_programming_manual", "chunk_index": 6787, "length": 173, "hash": "710e4cfb67ddd60633fcd6442a43d337"}
{"id": "mcs500_programming_manual_6788", "text": "motion queue: The buffer where motion commands that were sent to the robot are stored\nand executed on a FIFO basis by the robot.", "source": "mcs500_programming_manual", "chunk_index": 6788, "length": 128, "hash": "dd35fd4cfb0e5dd1944b263bb5f3671c"}
{"id": "mcs500_programming_manual_6789", "text": ": The buffer where motion commands that were sent to the robot are stored\nand executed on a FIFO basis by the robot.", "source": "mcs500_programming_manual", "chunk_index": 6789, "length": 116, "hash": "1c4b7503ce64fd48b645aa086934d8c8"}
{"id": "mcs500_programming_manual_6790", "text": "offline program: A sequence of commands saved in the internal memory of the robot. The\nterm offline is often omitted and will eventually be removed altogether.", "source": "mcs500_programming_manual", "chunk_index": 6790, "length": 159, "hash": "dbc6dd99627f71baa452e9a957198673"}
{"id": "mcs500_programming_manual_6791", "text": ": A sequence of commands saved in the internal memory of the robot. The\nterm", "source": "mcs500_programming_manual", "chunk_index": 6791, "length": 76, "hash": "7266b1ecc9b7d6767cfecaa6ccd56bba"}
{"id": "mcs500_programming_manual_6792", "text": "is often omitted and will eventually be removed altogether.", "source": "mcs500_programming_manual", "chunk_index": 6792, "length": 59, "hash": "e438b4c84eee095b3d18b5591643e651"}
{"id": "mcs500_programming_manual_6793", "text": "online mode programming: Programming the robot in online mode involves moving it\ndirectly to each desired robot position, typically using jogging controls.", "source": "mcs500_programming_manual", "chunk_index": 6793, "length": 155, "hash": "f89c4a935f0d41672aab26ac83653315"}
{"id": "mcs500_programming_manual_6794", "text": "online mode programming", "source": "mcs500_programming_manual", "chunk_index": 6794, "length": 23, "hash": "0132caa04a6bfe2e90f1b439db743e28"}
{"id": "mcs500_programming_manual_6795", "text": ": Programming the robot in online mode involves moving it\ndirectly to each desired robot position, typically using jogging controls.", "source": "mcs500_programming_manual", "chunk_index": 6795, "length": 132, "hash": "e0d58929e5e7ce94de67b76af4c649f8"}
{"id": "mcs500_programming_manual_6796", "text": "PDO (Process Data Object): In EtherCAT, a Process Data Object (PDO) is a data structure\nused for exchanging real-time cyclic data between an EtherCAT master and its slave devices.\nPDOs can contain individual bits, bytes, or words.", "source": "mcs500_programming_manual", "chunk_index": 6796, "length": 230, "hash": "a07b9966056c3ebacfa75d8d1d512cc4"}
{"id": "mcs500_programming_manual_6797", "text": "): In EtherCAT, a Process Data Object (PDO) is a data structure\nused for exchanging real-time cyclic data between an EtherCAT master and its slave devices.\nPDOs can contain individual bits, bytes, or words.", "source": "mcs500_programming_manual", "chunk_index": 6797, "length": 206, "hash": "ea5265e7b66a27f71730b5a206170712"}
{"id": "mcs500_programming_manual_6798", "text": "persistent settings: Some settings in the robot controller have default values (e.g., the robot\nname set by the command SetRobotName (page 199)), but when changed, their new values\nare written on an SD drive and persist even if the robot is powered off.", "source": "mcs500_programming_manual", "chunk_index": 6798, "length": 253, "hash": "1f141c633081556fff8532820a88a7df"}
{"id": "mcs500_programming_manual_6799", "text": ": Some settings in the robot controller have default values (e.g., the robot\nname set by the command", "source": "mcs500_programming_manual", "chunk_index": 6799, "length": 100, "hash": "918420b32a1511a061af93aaaa4d5cf4"}
{"id": "mcs500_programming_manual_6800", "text": "(page 199)), but when changed, their new values\nare written on an SD drive and persist even if the robot is powered off.", "source": "mcs500_programming_manual", "chunk_index": 6800, "length": 120, "hash": "41bd554431404fe7c5f1164b9c452c79"}
{"id": "mcs500_programming_manual_6801", "text": "pose: The position and orientation of one reference frame with respect to another.", "source": "mcs500_programming_manual", "chunk_index": 6801, "length": 82, "hash": "6609a410f3dc17a3555799aabf562dcb"}
{"id": "mcs500_programming_manual_6802", "text": ": The position and orientation of one reference frame with respect to another.", "source": "mcs500_programming_manual", "chunk_index": 6802, "length": 78, "hash": "68829af22994aaac3243a61b1ee08d94"}
{"id": "mcs500_programming_manual_6803", "text": "position mode: One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target end-effector pose or joint set (see Section 3 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6803, "length": 182, "hash": "f8e3fee3c7117a53a60e0feedf777131"}
{"id": "mcs500_programming_manual_6804", "text": ": One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target end-effector pose or joint set (see Section 3 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6804, "length": 169, "hash": "32eb3d3a79afaedf4ca61ed8cad1a4e6"}
{"id": "mcs500_programming_manual_6805", "text": "robot posture configuration: The two-value (\u22121 or 1) parameter ce that normally defines\neach of the two possible robot postures for a given pose of the robot\u2019s end-effector.", "source": "mcs500_programming_manual", "chunk_index": 6805, "length": 173, "hash": "8e46f656913b2697d72e08c2cb34549e"}
{"id": "mcs500_programming_manual_6806", "text": "robot posture configuration", "source": "mcs500_programming_manual", "chunk_index": 6806, "length": 27, "hash": "f7fde43d7591ac11b5bab7742c179f9d"}
{"id": "mcs500_programming_manual_6807", "text": ": The two-value (\u22121 or 1) parameter c", "source": "mcs500_programming_manual", "chunk_index": 6807, "length": 37, "hash": "0c88eb5a555eb446311803671230be8a"}
{"id": "mcs500_programming_manual_6808", "text": "that normally defines\neach of the two possible robot postures for a given pose of the robot\u2019s end-effector.", "source": "mcs500_programming_manual", "chunk_index": 6808, "length": 107, "hash": "2e13f7df5a8d4f9eda7b49720c208431"}
{"id": "mcs500_programming_manual_6809", "text": "proximal link: This is the clear-anodized body between the base and the distal link.", "source": "mcs500_programming_manual", "chunk_index": 6809, "length": 84, "hash": "0b65fbe85d7798763bd18b02a6d5eaca"}
{"id": "mcs500_programming_manual_6810", "text": ": This is the clear-anodized body between the base and the distal link.", "source": "mcs500_programming_manual", "chunk_index": 6810, "length": 71, "hash": "ccbb8941883cfb3fc0ed1703058f8361"}
{"id": "mcs500_programming_manual_6811", "text": "queued commands: Commands that are placed in the motion queue, rather than executed\nimmediately. All motion commands are queued commands, as well as some external-tool\ncommands.", "source": "mcs500_programming_manual", "chunk_index": 6811, "length": 177, "hash": "317679abdcfdbcc8626afa3d8884b1d5"}
{"id": "mcs500_programming_manual_6812", "text": ": Commands that are placed in the motion queue, rather than executed\nimmediately. All motion commands are queued commands, as well as some external-tool\ncommands.", "source": "mcs500_programming_manual", "chunk_index": 6812, "length": 162, "hash": "82c8506eefc6dd80797bdee15607f453"}
{"id": "mcs500_programming_manual_6813", "text": "reach: The maximum distance between the axis of joint 1 and the axis of joint 4.", "source": "mcs500_programming_manual", "chunk_index": 6813, "length": 80, "hash": "60698a4ada6f3936d92191c35f3054f6"}
{"id": "mcs500_programming_manual_6814", "text": ": The maximum distance between the axis of joint 1 and the axis of joint 4.", "source": "mcs500_programming_manual", "chunk_index": 6814, "length": 75, "hash": "78586861847b6f19feceadaaa30f2791"}
{"id": "mcs500_programming_manual_6815", "text": "real-time data request commands: Commands used to request some real-time data\nregarding the current status of robot (e.g., GetRtTrf (page 273), GetRtCartPos (page 259),\nGetStatusRobot (page 277)).", "source": "mcs500_programming_manual", "chunk_index": 6815, "length": 196, "hash": "b5b52bae0b8ca578283904a27c2eabb5"}
{"id": "mcs500_programming_manual_6816", "text": "real-time data request commands", "source": "mcs500_programming_manual", "chunk_index": 6816, "length": 31, "hash": "4f75e7b3ce56efd38db92f8a466049e1"}
{"id": "mcs500_programming_manual_6817", "text": ": Commands used to request some real-time data\nregarding the current status of robot (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 6817, "length": 91, "hash": "96f6de1591ea367d01ed5a8d65857d47"}
{"id": "mcs500_programming_manual_6818", "text": "retaining ring: In the MCS500, this is each of the two circular clamps on both ends of the\nspline shaft.", "source": "mcs500_programming_manual", "chunk_index": 6818, "length": 104, "hash": "678f4c89dac27fa96ddb77470826095c"}
{"id": "mcs500_programming_manual_6819", "text": ": In the MCS500, this is each of the two circular clamps on both ends of the\nspline shaft.", "source": "mcs500_programming_manual", "chunk_index": 6819, "length": 90, "hash": "75fa5e575e470f47d5437ed748c59d0e"}
{"id": "mcs500_programming_manual_6820", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6820, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6821", "text": "MC-PM-MCS500, Revision number: 11.1.43", "source": "mcs500_programming_manual", "chunk_index": 6821, "length": 38, "hash": "1df6697ff9e94cbb44dd5533f19b5e3e"}
{"id": "mcs500_programming_manual_6822", "text": "robot control commands: Commands used to immediately control the robot, (e.g.,\nActivateRobot (page 171), PauseMotion (page 182), SetNetworkOptions (page 193)). These\ncommands are executed immediately, i.e., are instantaneous.", "source": "mcs500_programming_manual", "chunk_index": 6822, "length": 225, "hash": "3991e522dfb3fbd9bf1691e3eff05e19"}
{"id": "mcs500_programming_manual_6823", "text": "robot control commands", "source": "mcs500_programming_manual", "chunk_index": 6823, "length": 22, "hash": "76125ada5f59cf4007423506c75d1afe"}
{"id": "mcs500_programming_manual_6824", "text": ": Commands used to immediately control the robot, (e.g.,", "source": "mcs500_programming_manual", "chunk_index": 6824, "length": 56, "hash": "b38467c2e3101f7d1d1d906445ceec5f"}
{"id": "mcs500_programming_manual_6825", "text": "(page 193)). These\ncommands are executed immediately, i.e., are instantaneous.", "source": "mcs500_programming_manual", "chunk_index": 6825, "length": 78, "hash": "ce9fc2761ed97925873632be585fd41f"}
{"id": "mcs500_programming_manual_6826", "text": "robot is ready for motion: The robot is considered ready to receive motion commands, i.e.\nwhen it is activated.", "source": "mcs500_programming_manual", "chunk_index": 6826, "length": 111, "hash": "76b0ff9e67b4410e8e28c941905ba746"}
{"id": "mcs500_programming_manual_6827", "text": "robot is ready for motion", "source": "mcs500_programming_manual", "chunk_index": 6827, "length": 25, "hash": "4768c4e148c43e430d678d61d9e3d19b"}
{"id": "mcs500_programming_manual_6828", "text": ": The robot is considered", "source": "mcs500_programming_manual", "chunk_index": 6828, "length": 25, "hash": "3b9a82105b3ba90ec73312a09a0d63a3"}
{"id": "mcs500_programming_manual_6829", "text": "to receive motion commands, i.e.\nwhen it is activated.", "source": "mcs500_programming_manual", "chunk_index": 6829, "length": 54, "hash": "ad047fb6c5ff63ae978a1e4011258dd7"}
{"id": "mcs500_programming_manual_6830", "text": "Note that if the robot is in error or if a safety stop condition is present, it will refuse motion\ncommands, but it will still be considered ready since its motion queue remains initialized and\nretains the latest received settings (e.q., velocity, acceleration, blending, WRF, TRF, etc.).", "source": "mcs500_programming_manual", "chunk_index": 6830, "length": 288, "hash": "2edcb27ccce1cc367242ea6d509fde67"}
{"id": "mcs500_programming_manual_6831", "text": "Note that if the robot is in error or if a safety stop condition is present, it will refuse motion\ncommands, but it will still be considered", "source": "mcs500_programming_manual", "chunk_index": 6831, "length": 140, "hash": "667f23791f0f087f85c73c46ab55b5c8"}
{"id": "mcs500_programming_manual_6832", "text": "since its motion queue remains initialized and\nretains the latest received settings (e.q., velocity, acceleration, blending, WRF, TRF, etc.).", "source": "mcs500_programming_manual", "chunk_index": 6832, "length": 141, "hash": "cd6e1dee3b7b1e1e29d16248835951d6"}
{"id": "mcs500_programming_manual_6833", "text": "robot log: This file is a more detailed version of the user log, intended primarily for our\nsupport team. It can be downloaded from the MecaPortal (see Section 9 of the Programming\nManual).", "source": "mcs500_programming_manual", "chunk_index": 6833, "length": 189, "hash": "6307d321440e3f23f286e3d6f920ea38"}
{"id": "mcs500_programming_manual_6834", "text": ": This file is a more detailed version of the user log, intended primarily for our\nsupport team. It can be downloaded from the MecaPortal (see Section 9 of the Programming\nManual).", "source": "mcs500_programming_manual", "chunk_index": 6834, "length": 180, "hash": "08b5fe9e8dbbadba16b7144812c0a60c"}
{"id": "mcs500_programming_manual_6835", "text": "robot position: A robot position is equivalent to either a joint set or the pose of the TRF\nrelative to the WRF, along with the definitions of both reference frames, and the robot posture\nand last joint turn configuration parameters.", "source": "mcs500_programming_manual", "chunk_index": 6835, "length": 233, "hash": "8d7d8a09fac9c17d6cbb9c7500c2c3e9"}
{"id": "mcs500_programming_manual_6836", "text": ": A robot position is equivalent to either a joint set or the pose of the TRF\nrelative to the WRF, along with the definitions of both reference frames, and the robot posture", "source": "mcs500_programming_manual", "chunk_index": 6836, "length": 173, "hash": "e243df578a2423cbbd141802e8829e2c"}
{"id": "mcs500_programming_manual_6837", "text": "and last joint turn configuration parameters.", "source": "mcs500_programming_manual", "chunk_index": 6837, "length": 45, "hash": "3f86041abc9a28bda5384a0e1cc575c0"}
{"id": "mcs500_programming_manual_6838", "text": "robot posture: The arrangement of the robot links. Equivalent to a joint set in which all joint\nangles are normalized, i.e. have been converted to the range (\u2212180\u00b0, 180\u00b0].", "source": "mcs500_programming_manual", "chunk_index": 6838, "length": 171, "hash": "c694d875e23ca9992df0b3e07174d69a"}
{"id": "mcs500_programming_manual_6839", "text": ": The arrangement of the robot links. Equivalent to a joint set in which all joint\nangles are normalized, i.e. have been converted to the range (\u2212180\u00b0, 180\u00b0].", "source": "mcs500_programming_manual", "chunk_index": 6839, "length": 158, "hash": "d8b288b678b41787832b153a55ced322"}
{"id": "mcs500_programming_manual_6840", "text": "SDO (Service Data Object): In EtherCAT, a Service Data Object (SDO) is a data structure\nused for non-real-time communication between an EtherCAT master and its slave devices.\nSDOs are typically used to configure device parameters and access diagnostic information\nthrough the object dictionary. Unlike PDOs, SDOs exchange structured data rather than\nindividual bits or bytes.", "source": "mcs500_programming_manual", "chunk_index": 6840, "length": 375, "hash": "dc2d94cb46997c649e44772292b5b2b8"}
{"id": "mcs500_programming_manual_6841", "text": "): In EtherCAT, a Service Data Object (SDO) is a data structure\nused for non-real-time communication between an EtherCAT master and its slave devices.\nSDOs are typically used to configure device parameters and access diagnostic information\nthrough the object dictionary. Unlike PDOs, SDOs exchange structured data rather than\nindividual bits or bytes.", "source": "mcs500_programming_manual", "chunk_index": 6841, "length": 351, "hash": "6976cac4b6f3523f13b8df9c1d8fb746"}
{"id": "mcs500_programming_manual_6842", "text": "singularities: A robot posture where the robot\u2019s end-effector is blocked in some directions\neven if no joint is at a limit (see Section 3 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6842, "length": 165, "hash": "43bc193713c8200ef91698e32759a382"}
{"id": "mcs500_programming_manual_6843", "text": ": A robot posture where the robot\u2019s end-effector is blocked in some directions\neven if no joint is at a limit (see Section 3 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6843, "length": 152, "hash": "91e0a59054689e83b27ac35e0bc12d77"}
{"id": "mcs500_programming_manual_6844", "text": "spline shaft: This is the the groved reciprocating shaft.", "source": "mcs500_programming_manual", "chunk_index": 6844, "length": 57, "hash": "7f1d4e3471a2be68322209282a6dc55e"}
{"id": "mcs500_programming_manual_6845", "text": ": This is the the groved reciprocating shaft.", "source": "mcs500_programming_manual", "chunk_index": 6845, "length": 45, "hash": "66876b65d4ab5fb97281612d0c13983f"}
{"id": "mcs500_programming_manual_6846", "text": "TCP: Tool Center Point. The origin of the TRF. Not to be confused with Transmission Control\nProtocol.", "source": "mcs500_programming_manual", "chunk_index": 6846, "length": 101, "hash": "66c99d27e0bd62162e77e6285ebd0112"}
{"id": "mcs500_programming_manual_6847", "text": ": Tool Center Point. The origin of the TRF. Not to be confused with Transmission Control\nProtocol.", "source": "mcs500_programming_manual", "chunk_index": 6847, "length": 98, "hash": "30495b2ab3611df30b4502a173d3478b"}
{"id": "mcs500_programming_manual_6848", "text": "TRF: Tool reference frame.", "source": "mcs500_programming_manual", "chunk_index": 6848, "length": 26, "hash": "d3e838be639192c97d8abfcf46330a8e"}
{"id": "mcs500_programming_manual_6849", "text": ": Tool reference frame.", "source": "mcs500_programming_manual", "chunk_index": 6849, "length": 23, "hash": "791711246663216971670129b53a0c39"}
{"id": "mcs500_programming_manual_6850", "text": "turn configuration parameter: Since the last joint of the robot can rotate multiple\nrevolutions, the turn configuration parameter defines the revolution number.", "source": "mcs500_programming_manual", "chunk_index": 6850, "length": 160, "hash": "17f7d705d88fc134816a485ef1440675"}
{"id": "mcs500_programming_manual_6851", "text": "turn configuration parameter", "source": "mcs500_programming_manual", "chunk_index": 6851, "length": 28, "hash": "a30bb88e7239bd8dafc0dae4dbaebbd5"}
{"id": "mcs500_programming_manual_6852", "text": ": Since the last joint of the robot can rotate multiple\nrevolutions, the turn configuration parameter defines the revolution number.", "source": "mcs500_programming_manual", "chunk_index": 6852, "length": 132, "hash": "6327e5c22f6bcbdba8fc9221be25dffa"}
{"id": "mcs500_programming_manual_6853", "text": "user log: This file is a simplified log containing user-friendly traces of major events (e.g.,\nrobot activation, movement, E-Stop activation). It can be downloaded from the MecaPortal\n(see Section 9 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6853, "length": 226, "hash": "ece342f254cd94eb028b653080fce7c2"}
{"id": "mcs500_programming_manual_6854", "text": ": This file is a simplified log containing user-friendly traces of major events (e.g.,\nrobot activation, movement, E-Stop activation). It can be downloaded from the MecaPortal\n(see Section 9 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6854, "length": 218, "hash": "08633f7f78ea101ffe1ed8732077e33a"}
{"id": "mcs500_programming_manual_6855", "text": "velocity mode: One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target joint velocity vector or end-effector Cartesian velocity vector (see Section\n3 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6855, "length": 215, "hash": "e8d4dea1bbf7a9f8bfa065fd75698934"}
{"id": "mcs500_programming_manual_6856", "text": ": One of the two control modes, in which the robot\u2019s motion is generated by\nrequesting a target joint velocity vector or end-effector Cartesian velocity vector (see Section\n3 of the Programming Manual).", "source": "mcs500_programming_manual", "chunk_index": 6856, "length": 202, "hash": "558d410453f312dc40a8844fba9743a8"}
{"id": "mcs500_programming_manual_6857", "text": "workspace: The Cartesian workspace of a robot is the set of all feasible poses of its TRF with\nrespect to its WRF. Note that many of these poses can be attained with more than one set of\nconfiguration parameters.", "source": "mcs500_programming_manual", "chunk_index": 6857, "length": 212, "hash": "9552d8f1f9ec20199dd0167627940101"}
{"id": "mcs500_programming_manual_6858", "text": ": The Cartesian workspace of a robot is the set of all feasible poses of its TRF with\nrespect to its WRF. Note that many of these poses can be attained with more than one set of\nconfiguration parameters.", "source": "mcs500_programming_manual", "chunk_index": 6858, "length": 203, "hash": "65e6209fc17172f386715b457c51642c"}
{"id": "mcs500_programming_manual_6859", "text": "WRF: World reference frame.", "source": "mcs500_programming_manual", "chunk_index": 6859, "length": 27, "hash": "d29373141098afff1785160ad15be0a4"}
{"id": "mcs500_programming_manual_6860", "text": ": World reference frame.", "source": "mcs500_programming_manual", "chunk_index": 6860, "length": 24, "hash": "9c5b8d51f5ff77b38ef52415eb90c06d"}
{"id": "mcs500_programming_manual_6861", "text": "Page: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343", "source": "mcs500_programming_manual", "chunk_index": 6861, "length": 1611, "hash": "f5ce651067533ebbe681dab9091b94c8"}
